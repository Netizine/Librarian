{"name": "963_B. Destruction of a Tree", "description": "You are given a tree (a graph with n vertices and n - 1 edges in which it's possible to reach any vertex from any other vertex using only its edges).\n\nA vertex can be destroyed if this vertex has even degree. If you destroy a vertex, all edges connected to it are also deleted.\n\nDestroy all vertices in the given tree or determine that it is impossible.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b7105) \u2014 number of vertices in a tree.\n\nThe second line contains n integers p1, p2, ..., pn (0 \u2264 pi \u2264 n). If pi \u2260 0 there is an edge between vertices i and pi. It is guaranteed that the given graph is a tree.\n\nOutput\n\nIf it's possible to destroy all vertices, print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nIf it's possible to destroy all vertices, in the next n lines print the indices of the vertices in order you destroy them. If there are multiple correct answers, print any.\n\nExamples\n\nInput\n\n5\n0 1 2 1 2\n\n\nOutput\n\nYES\n1\n2\n3\n5\n4\n\n\nInput\n\n4\n0 1 2 3\n\n\nOutput\n\nNO\n\nNote\n\nIn the first example at first you have to remove the vertex with index 1 (after that, the edges (1, 2) and (1, 4) are removed), then the vertex with index 2 (and edges (2, 3) and (2, 5) are removed). After that there are no edges in the tree, so you can remove remaining vertices in any order.\n\n<image>", "solution": "from collections import defaultdict,deque\nimport sys\nimport bisect\nimport math\ninput=sys.stdin.readline\nmod=1000000007\n\ndef bfs(root,count):\n    q=deque([root])\n    vis.add(root)\n    while q:\n        vertex=q.popleft()\n        for child in graph[vertex]:\n            if ans[child]==0:\n                ans[child]=count+1\n                count+=1\n            if child not in vis:\n                q.append(child)\n                vis.add(child)\n                \ngraph=defaultdict(list)\nn=int(input())\np=[int(i) for i in input().split() if i!='\\n']\nif n&1:\n    for i in range(n):\n        if p[i]!=0:\n            graph[p[i]].append(i+1)\n            graph[i+1].append(p[i])\n    length=[0]*(n+1)\n    for i in graph:\n        length[i]=len(graph[i])\n    CHECK,OBSERVE=1,0\n    stack=[(OBSERVE,1,0)]\n    ans=[0]*(n+1)\n    count=0\n    while stack:\n        state,vertex,parent=stack.pop()\n        if state==OBSERVE:\n            stack.append((CHECK,vertex,parent))\n            for child in graph[vertex]:\n                if child != parent:\n                    stack.append((OBSERVE,child,vertex))\n        else:\n            if length[vertex]%2==0:\n                count+=1\n                ans[vertex]=count\n                length[parent]-=1\n    vis=set()\n    bfs(1,count)\n    out=[0]*(n)\n    for i in range(1,n+1):\n        out[ans[i]-1]=i\n    print('YES')\n    for i in out:\n        sys.stdout.write(str(i)+'\\n')\nelse:\n    print('NO')\n        \n    \n            \n        \n        \n        \n    \n    \n", "difficulty": 8, "public_tests": {"input": ["5\n0 1 2 1 2\n", "4\n0 1 2 3\n"], "output": ["YES\n1\n2\n3\n5\n4\n", "NO\n"]}, "private_tests": {"input": ["21\n11 19 4 19 6 0 13 7 6 2 5 3 16 10 1 9 15 21 9 21 2\n", "100\n57 85 27 81 41 27 73 10 73 95 91 90 89 41 86 44 6 20 9 13 46 73 56 19 37 32 40 42 79 76 96 5 6 8 76 52 14 86 33 69 100 95 58 87 43 47 17 39 48 28 77 65 100 100 41 39 87 5 61 67 94 64 61 88 32 23 79 44 0 67 44 23 48 96 48 56 86 75 90 2 17 46 4 75 42 90 17 77 5 33 87 91 27 28 58 95 58 47 33 6\n", "61\n5 61 20 5 50 59 56 29 44 1 48 13 20 35 61 33 38 52 30 8 43 17 35 43 24 59 22 23 11 26 38 37 48 36 13 37 44 23 30 19 26 1 15 19 8 18 42 0 50 33 52 36 17 11 29 18 48 15 24 22 42\n", "8\n3 1 4 0 4 2 4 5\n", "61\n58 39 45 57 31 43 11 24 8 18 56 54 47 37 50 40 19 16 29 10 1 23 36 28 21 48 52 55 27 42 2 33 46 25 53 6 15 26 14 17 9 44 56 34 5 61 38 12 30 7 49 32 20 41 51 0 3 4 60 35 13\n", "21\n11 10 12 3 6 0 8 6 16 14 5 9 7 19 1 13 15 21 4 2 20\n", "100\n81 96 65 28 4 40 5 49 5 89 48 70 94 70 17 58 58 1 61 19 45 33 46 19 22 83 56 67 62 82 57 16 29 36 84 71 42 66 78 54 73 45 82 80 67 88 79 69 61 66 5 36 24 60 96 21 77 67 68 29 87 37 91 34 78 43 0 69 49 62 16 2 68 79 57 1 60 12 39 99 14 37 30 92 47 18 14 75 73 39 94 12 43 87 90 22 91 59 54 71\n", "21\n21 6 4 20 14 1 13 10 11 0 10 18 10 12 4 1 2 2 8 2 13\n", "1\n0\n", "21\n15 6 13 7 15 21 8 0 7 16 16 21 12 6 12 12 13 6 15 16 7\n", "61\n47 61 20 5 10 59 46 55 44 1 57 13 3 35 21 48 31 7 9 45 43 53 14 6 42 39 22 23 54 40 45 37 16 36 12 44 34 28 25 19 26 33 25 39 33 36 42 0 50 4 52 46 17 11 29 7 48 15 41 27 58\n", "61\n10 42 20 50 4 24 18 55 19 5 57 13 3 35 58 48 31 46 40 45 15 53 14 25 43 41 22 23 54 39 38 44 16 37 12 34 32 28 26 30 59 47 21 9 8 52 1 0 33 49 36 51 17 11 29 7 48 61 6 27 2\n", "21\n5 20 9 19 8 0 13 6 13 19 5 3 8 10 1 9 1 20 3 10 18\n", "79\n0 56 56 42 56 56 56 56 4 56 56 22 56 56 56 48 56 56 56 56 56 24 56 16 56 56 56 9 56 56 56 56 56 56 56 56 56 55 56 56 12 20 56 28 56 56 56 38 56 56 56 56 56 56 44 1 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56\n", "21\n18 0 18 2 21 2 9 15 3 5 8 2 8 21 6 10 21 13 9 1 13\n", "61\n45 48 30 23 15 47 8 3 35 56 54 35 17 47 35 56 32 42 14 37 36 44 6 44 1 44 41 46 43 0 33 3 44 54 43 3 47 57 7 32 29 60 36 36 43 61 36 47 3 48 18 8 17 29 3 54 3 6 43 43 56\n", "61\n17 19 8 53 10 38 59 60 46 25 49 28 46 15 25 56 53 60 60 54 18 49 10 53 29 19 11 61 24 11 17 52 32 54 29 55 0 1 14 56 25 14 33 53 47 56 8 6 53 55 16 46 47 9 24 37 3 52 25 37 26\n", "61\n56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 0 56 56 56 56 56 56 56 48 56 56 56 56 56\n", "21\n18 18 18 18 18 0 18 18 18 18 18 18 18 18 18 18 18 6 18 18 18\n", "121\n110 31 57 33 45 33 33 33 91 102 79 33 61 72 107 101 117 10 118 33 33 64 24 94 117 76 33 23 33 49 5 52 95 78 33 39 33 92 17 33 25 33 56 33 3 88 33 108 62 15 28 111 67 33 33 11 96 33 36 70 46 98 80 104 33 19 60 33 112 51 33 2 33 33 121 59 33 41 50 81 105 33 115 34 33 18 84 32 33 33 87 13 86 103 16 119 33 63 30 43 83 53 26 100 69 33 14 38 33 75 66 120 33 33 9 99 0 93 1 48 116\n"], "output": ["YES\n11\n6\n16\n7\n8\n13\n10\n14\n2\n21\n18\n20\n19\n3\n12\n4\n9\n5\n15\n17\n1\n", "NO\n", "YES\n56\n7\n18\n46\n52\n51\n36\n34\n37\n32\n44\n9\n19\n40\n30\n39\n26\n41\n59\n6\n24\n25\n43\n21\n15\n58\n61\n2\n42\n47\n1\n10\n5\n4\n50\n49\n33\n16\n48\n11\n29\n8\n20\n3\n13\n12\n35\n14\n23\n28\n38\n17\n22\n27\n60\n53\n31\n45\n55\n54\n57\n", "NO\n", "YES\n1\n4\n3\n5\n2\n14\n15\n7\n56\n6\n23\n22\n36\n43\n11\n50\n37\n39\n31\n45\n57\n58\n25\n44\n30\n51\n28\n8\n41\n12\n26\n47\n61\n33\n52\n29\n17\n16\n10\n53\n60\n59\n35\n20\n18\n40\n19\n27\n32\n46\n13\n38\n48\n54\n9\n24\n55\n49\n42\n34\n21\n", "YES\n11\n6\n7\n16\n12\n4\n14\n2\n21\n18\n20\n10\n19\n3\n9\n13\n8\n5\n15\n17\n1\n", "NO\n", "YES\n21\n13\n7\n8\n19\n11\n9\n10\n1\n18\n14\n5\n12\n20\n4\n3\n15\n2\n17\n6\n16\n", "YES\n1\n", "YES\n15\n5\n16\n10\n11\n20\n12\n6\n2\n14\n18\n7\n4\n8\n9\n21\n13\n3\n17\n19\n1\n", "YES\n1\n43\n15\n61\n2\n58\n21\n25\n39\n41\n6\n24\n59\n26\n9\n40\n30\n19\n52\n51\n46\n7\n18\n56\n36\n37\n32\n34\n44\n42\n16\n57\n54\n55\n8\n29\n11\n48\n31\n53\n27\n60\n22\n17\n45\n3\n12\n14\n28\n38\n23\n35\n13\n20\n33\n47\n5\n50\n49\n4\n10\n", "YES\n10\n4\n49\n16\n57\n54\n55\n45\n3\n12\n14\n28\n31\n53\n27\n60\n22\n17\n38\n23\n35\n13\n20\n8\n29\n11\n48\n33\n50\n5\n47\n2\n58\n21\n25\n6\n41\n39\n40\n9\n32\n34\n51\n46\n7\n56\n18\n52\n36\n37\n44\n19\n30\n26\n59\n24\n43\n15\n61\n42\n1\n", "YES\n18\n21\n20\n2\n10\n14\n19\n4\n3\n12\n9\n16\n13\n7\n8\n5\n1\n15\n17\n11\n6\n", "YES\n12\n41\n24\n22\n48\n16\n55\n38\n28\n44\n4\n9\n20\n42\n56\n2\n3\n5\n6\n7\n8\n10\n11\n13\n14\n15\n17\n18\n19\n21\n23\n25\n26\n27\n29\n30\n31\n32\n33\n34\n35\n36\n37\n39\n40\n43\n45\n46\n47\n49\n50\n51\n52\n53\n54\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n1\n", "YES\n1\n3\n9\n7\n19\n21\n10\n16\n5\n14\n17\n13\n8\n6\n2\n4\n12\n15\n11\n18\n20\n", "YES\n1\n41\n27\n29\n56\n10\n16\n46\n28\n61\n54\n11\n34\n60\n18\n51\n42\n43\n15\n5\n35\n9\n12\n33\n31\n44\n22\n24\n26\n23\n4\n6\n58\n14\n19\n37\n20\n47\n48\n2\n50\n36\n21\n7\n39\n8\n52\n57\n38\n3\n30\n32\n17\n13\n53\n40\n49\n55\n59\n45\n25\n", "YES\n1\n17\n3\n57\n8\n18\n21\n26\n28\n12\n61\n19\n2\n37\n16\n51\n56\n40\n9\n54\n20\n34\n46\n13\n52\n33\n43\n32\n58\n60\n47\n45\n53\n4\n24\n29\n15\n14\n39\n42\n59\n7\n25\n10\n5\n23\n41\n35\n55\n36\n50\n44\n49\n11\n27\n30\n22\n31\n6\n48\n38\n", "YES\n56\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n49\n50\n51\n52\n53\n54\n55\n57\n58\n59\n60\n61\n48\n", "YES\n18\n1\n2\n3\n4\n5\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n19\n20\n21\n6\n", "YES\n1\n75\n116\n30\n62\n63\n81\n69\n120\n108\n92\n61\n88\n52\n66\n118\n86\n10\n53\n60\n51\n23\n94\n26\n59\n39\n117\n41\n34\n87\n9\n83\n16\n33\n4\n6\n7\n8\n12\n20\n21\n27\n29\n35\n37\n40\n42\n44\n47\n54\n55\n58\n65\n68\n71\n73\n74\n77\n82\n85\n89\n90\n97\n106\n109\n113\n114\n95\n101\n115\n91\n84\n78\n25\n17\n36\n76\n103\n24\n28\n70\n67\n102\n18\n93\n19\n111\n32\n46\n13\n38\n48\n112\n105\n80\n98\n49\n99\n121\n110\n96\n3\n5\n2\n14\n15\n79\n56\n100\n64\n22\n104\n43\n11\n50\n107\n72\n31\n45\n57\n119\n"]}, "generated_tests": {"input": ["21\n11 19 4 19 6 0 13 7 6 2 5 3 16 16 1 9 15 21 9 21 2\n", "100\n57 85 27 81 41 27 73 10 73 95 91 90 89 41 86 44 6 20 9 13 46 73 56 19 37 32 40 42 79 76 96 5 6 8 76 52 14 86 33 69 100 95 58 87 43 47 17 39 48 28 77 65 100 100 41 39 87 5 61 67 94 64 61 88 32 23 79 44 0 67 44 23 48 96 48 56 86 75 90 2 17 46 4 75 79 90 17 77 5 33 87 91 27 28 58 95 58 47 33 6\n", "61\n58 39 45 57 31 43 11 24 8 18 56 54 47 37 50 40 19 16 29 10 1 23 36 28 21 48 52 55 27 42 2 33 46 25 53 6 15 26 14 17 9 44 56 34 5 61 38 12 30 11 49 32 20 41 51 0 3 4 60 35 13\n", "21\n11 10 12 3 6 0 8 6 16 14 5 8 7 19 1 13 15 21 4 2 20\n", "21\n21 6 4 20 14 1 13 10 11 0 10 18 11 12 4 1 2 2 8 2 13\n", "21\n15 6 13 7 15 21 8 0 7 16 16 21 12 6 6 12 13 6 15 16 7\n", "61\n10 42 20 50 4 24 18 55 19 5 57 13 3 35 58 48 31 46 40 45 15 53 14 25 43 41 22 23 54 16 38 44 16 37 12 34 32 28 26 30 59 47 21 9 8 52 1 0 33 49 36 51 17 11 29 7 48 61 6 27 2\n", "61\n17 19 8 53 10 38 59 60 46 25 49 28 46 15 25 56 53 60 60 54 18 49 10 53 29 19 11 61 24 11 17 52 17 54 29 55 0 1 14 56 25 14 33 53 47 56 8 6 53 55 16 46 47 9 24 37 3 52 25 37 26\n", "61\n56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 15 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 0 56 56 56 56 56 56 56 48 56 56 56 56 56\n", "21\n18 18 18 18 18 0 18 18 14 18 18 18 18 18 18 18 18 6 18 18 18\n", "121\n110 31 57 33 45 33 33 33 91 102 79 33 61 72 107 101 117 10 118 33 33 64 24 94 117 76 33 23 42 49 5 52 95 78 33 39 33 92 17 33 25 33 56 33 3 88 33 108 62 15 28 111 67 33 33 11 96 33 36 70 46 98 80 104 33 19 60 33 112 51 33 2 33 33 121 59 33 41 50 81 105 33 115 34 33 18 84 32 33 33 87 13 86 103 16 119 33 63 30 43 83 53 26 100 69 33 14 38 33 75 66 120 33 33 9 99 0 93 1 48 116\n", "5\n0 1 2 2 2\n", "21\n5 19 4 19 6 0 13 7 6 2 5 3 16 16 1 9 15 21 9 21 2\n", "21\n21 6 4 20 9 1 13 10 11 0 10 18 11 12 4 1 2 2 8 2 13\n", "61\n10 42 20 50 4 16 18 55 19 5 57 13 3 35 58 48 31 46 40 45 15 53 14 25 43 41 22 23 54 16 38 44 16 37 12 34 32 28 26 30 59 47 21 9 8 52 1 0 33 49 36 51 17 11 29 7 48 61 6 27 2\n", "61\n17 19 8 53 10 38 59 60 46 25 49 28 46 15 25 56 53 60 60 54 18 49 10 53 29 19 11 61 24 11 17 52 17 54 47 55 0 1 14 56 25 14 33 53 47 56 8 6 53 55 16 46 47 9 24 37 3 52 25 37 26\n", "5\n0 1 2 2 1\n", "21\n5 19 4 19 6 0 13 7 6 2 6 3 16 16 1 9 15 21 9 21 2\n", "21\n21 6 4 20 9 1 13 10 11 0 10 13 11 12 4 1 2 2 8 2 13\n", "61\n17 19 8 53 10 38 59 60 46 25 49 28 46 15 25 56 53 60 60 54 18 49 10 53 29 19 11 61 24 11 34 52 17 54 47 55 0 1 14 56 25 14 33 53 47 56 8 6 53 55 16 46 47 9 24 37 3 52 25 37 26\n", "5\n0 1 1 2 1\n", "21\n5 19 4 19 6 0 13 7 6 2 6 3 16 16 1 9 15 21 14 21 2\n", "21\n11 19 4 19 6 0 13 7 6 2 5 3 16 10 1 9 15 21 9 21 4\n", "61\n5 61 20 5 50 59 56 29 44 1 48 13 20 35 61 33 38 52 30 8 43 17 35 43 24 59 22 23 11 26 38 37 48 36 13 37 44 23 30 19 26 1 15 19 8 18 42 0 55 33 52 36 17 11 29 18 48 15 24 22 42\n", "61\n58 39 45 11 31 43 11 24 8 18 56 54 47 37 50 40 19 16 29 10 1 23 36 28 21 48 52 55 27 42 2 33 46 25 53 6 15 26 14 17 9 44 56 34 5 61 38 12 30 7 49 32 20 41 51 0 3 4 60 35 13\n", "21\n10 10 12 3 6 0 8 6 16 14 5 9 7 19 1 13 15 21 4 2 20\n", "61\n47 61 20 5 10 59 46 55 44 1 57 13 3 35 21 48 31 7 9 45 43 53 14 6 42 39 22 23 54 40 45 37 16 36 9 44 34 28 25 19 26 33 25 39 33 36 42 0 50 4 52 46 17 11 29 7 48 15 41 27 58\n", "61\n10 42 20 50 4 24 18 55 19 5 57 13 3 35 58 48 31 46 40 45 15 53 14 25 43 41 22 23 54 39 38 44 16 37 12 34 32 28 26 30 59 47 21 9 8 52 1 0 33 49 36 51 17 11 57 7 48 61 6 27 2\n", "79\n0 56 56 42 56 56 56 56 4 56 56 22 56 56 56 48 56 56 56 56 56 24 56 16 56 56 56 9 56 56 56 56 56 56 56 56 56 55 56 56 12 20 56 28 56 56 56 38 56 56 56 56 56 56 44 1 56 56 56 56 56 56 47 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56\n", "121\n110 31 57 33 45 33 33 33 91 102 79 33 61 72 107 101 117 10 118 33 33 64 24 94 117 76 33 23 33 49 5 52 95 78 33 39 33 92 17 33 25 33 56 33 3 88 33 108 62 15 28 111 67 33 33 11 96 33 36 70 46 98 80 104 33 18 60 33 112 51 33 2 33 33 121 59 33 41 50 81 105 33 115 34 33 18 84 32 33 33 87 13 86 103 16 119 33 63 30 43 83 53 26 100 69 33 14 38 33 75 66 120 33 33 9 99 0 93 1 48 116\n", "5\n0 1 1 1 2\n", "21\n11 10 12 5 6 0 8 6 16 14 5 8 7 19 1 13 15 21 4 2 20\n", "61\n10 42 20 50 4 24 18 55 19 5 57 13 3 35 58 48 31 46 40 45 15 53 14 25 43 41 22 23 54 16 38 44 16 37 12 34 32 19 26 30 59 47 21 9 8 52 1 0 33 49 36 51 17 11 29 7 48 61 6 27 2\n", "61\n17 19 8 53 16 38 59 60 46 25 49 28 46 15 25 56 53 60 60 54 18 49 10 53 29 19 11 61 24 11 17 52 17 54 29 55 0 1 14 56 25 14 33 53 47 56 8 6 53 55 16 46 47 9 24 37 3 52 25 37 26\n", "121\n110 31 57 33 45 33 33 33 91 102 79 33 61 72 107 101 117 10 118 33 33 64 24 94 117 76 33 23 42 49 5 52 95 78 33 39 33 92 17 33 25 33 56 33 3 88 33 108 62 15 28 111 67 33 33 11 96 33 36 70 46 98 80 104 33 19 60 33 112 51 33 2 33 33 121 59 51 41 50 81 105 33 115 34 33 18 84 32 33 33 87 13 86 103 16 119 33 63 30 43 83 53 26 100 69 33 14 38 33 75 66 120 33 33 9 99 0 93 1 48 116\n", "5\n0 1 4 2 2\n", "61\n10 42 20 50 4 16 18 55 19 5 57 13 3 35 58 48 31 46 40 19 15 53 14 25 43 41 22 23 54 16 38 44 16 37 12 34 32 28 26 30 59 47 21 9 8 52 1 0 33 49 36 51 17 11 29 7 48 61 6 27 2\n", "61\n17 19 8 53 10 38 59 60 46 25 49 28 46 15 25 56 53 60 60 54 18 49 10 53 29 19 11 61 24 11 17 52 17 54 47 55 0 1 14 56 25 14 33 7 47 56 8 6 53 55 16 46 47 9 24 37 3 52 25 37 26\n", "21\n5 19 4 19 6 0 13 7 6 2 6 3 16 16 1 9 15 21 9 15 2\n", "21\n21 6 4 20 9 1 13 10 10 0 10 13 11 12 4 1 2 2 8 2 13\n", "61\n17 19 8 53 10 1 59 60 46 25 49 28 46 15 25 56 53 60 60 54 18 49 10 53 29 19 11 61 24 11 34 52 17 54 47 55 0 1 14 56 25 14 33 53 47 56 8 6 53 55 16 46 47 9 24 37 3 52 25 37 26\n", "61\n5 61 20 5 50 59 56 29 44 1 48 21 20 35 61 33 38 52 30 8 43 17 35 43 24 59 22 23 11 26 38 37 48 36 13 37 44 23 30 19 26 1 15 19 8 18 42 0 55 33 52 36 17 11 29 18 48 15 24 22 42\n", "61\n58 39 45 11 31 43 11 24 8 18 56 54 47 37 50 40 19 16 29 10 1 23 36 28 36 48 52 55 27 42 2 33 46 25 53 6 15 26 14 17 9 44 56 34 5 61 38 12 30 7 49 32 20 41 51 0 3 4 60 35 13\n", "21\n10 10 12 3 6 0 8 6 16 14 5 9 7 19 1 6 15 21 4 2 20\n", "100\n81 96 65 28 4 40 5 49 5 89 48 70 94 70 17 58 58 1 61 19 45 33 46 19 22 83 56 67 62 82 57 16 29 36 84 71 42 66 78 54 73 45 82 80 67 88 79 69 61 66 5 36 24 60 96 21 77 67 68 29 87 37 91 34 78 43 0 69 49 62 16 2 68 79 57 1 60 2 39 99 14 37 30 92 47 18 14 75 73 39 94 12 43 87 90 22 91 59 54 71\n", "21\n21 6 4 20 14 1 13 10 11 0 8 18 10 12 4 1 2 2 8 2 13\n", "4\n0 1 1 3\n", "100\n57 85 27 81 41 27 73 10 73 95 91 90 89 41 86 44 6 20 9 13 46 73 56 19 37 32 40 42 79 76 96 5 6 8 76 52 14 86 33 69 100 95 58 87 43 47 17 39 48 28 77 65 100 100 41 39 87 5 61 67 94 64 61 88 32 23 79 44 0 67 44 23 48 96 48 56 86 75 90 2 17 46 4 75 79 90 17 77 5 33 87 91 27 28 58 95 64 47 33 6\n", "100\n81 96 65 28 4 40 5 49 5 89 48 70 94 70 17 58 58 1 61 19 45 33 46 19 22 83 56 67 73 82 57 16 29 36 84 71 42 66 78 54 73 45 82 80 67 88 79 69 61 66 5 36 24 60 96 21 77 67 68 29 87 37 91 34 78 43 0 69 49 62 16 2 68 79 57 1 60 2 39 99 14 37 30 92 47 18 14 75 73 39 94 12 43 87 90 22 91 59 54 71\n"], "output": ["YES\n11\n6\n9\n16\n7\n8\n13\n14\n19\n2\n10\n21\n18\n20\n3\n12\n4\n5\n15\n17\n1\n", "NO\n", "YES\n1\n4\n3\n5\n2\n14\n15\n56\n6\n23\n22\n36\n43\n11\n7\n50\n37\n39\n31\n45\n57\n58\n25\n44\n30\n51\n28\n8\n41\n12\n26\n47\n61\n33\n52\n29\n17\n16\n10\n53\n60\n59\n35\n20\n18\n40\n19\n27\n32\n46\n13\n38\n48\n54\n9\n24\n55\n49\n42\n34\n21\n", "YES\n11\n6\n7\n16\n9\n13\n12\n4\n14\n2\n21\n18\n20\n10\n19\n3\n8\n5\n15\n17\n1\n", "YES\n21\n13\n7\n11\n9\n8\n19\n10\n1\n18\n14\n5\n12\n20\n4\n3\n15\n2\n17\n6\n16\n", "YES\n15\n5\n6\n2\n16\n10\n11\n20\n12\n13\n3\n17\n7\n4\n8\n9\n21\n14\n18\n19\n1\n", "YES\n1\n5\n50\n33\n16\n57\n54\n55\n45\n3\n12\n14\n28\n31\n53\n27\n60\n22\n17\n38\n23\n35\n13\n20\n8\n29\n11\n48\n40\n9\n32\n34\n51\n46\n7\n56\n18\n52\n36\n37\n44\n19\n30\n49\n4\n10\n42\n61\n15\n43\n24\n59\n26\n39\n41\n6\n25\n21\n58\n2\n47\n", "YES\n1\n33\n43\n17\n3\n57\n8\n18\n21\n26\n28\n12\n61\n19\n2\n37\n16\n51\n56\n40\n9\n54\n20\n34\n46\n13\n52\n32\n58\n60\n47\n45\n53\n4\n24\n29\n15\n14\n39\n42\n59\n7\n25\n10\n5\n23\n41\n35\n55\n36\n50\n44\n49\n11\n27\n30\n22\n31\n6\n48\n38\n", "YES\n15\n21\n56\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n16\n17\n18\n19\n20\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n49\n50\n51\n52\n53\n54\n55\n48\n57\n58\n59\n60\n61\n1\n", "YES\n14\n9\n18\n2\n3\n4\n5\n7\n8\n10\n11\n12\n13\n15\n16\n17\n6\n19\n20\n21\n1\n", "YES\n1\n75\n116\n30\n62\n63\n81\n69\n120\n108\n92\n61\n88\n52\n66\n118\n86\n10\n53\n60\n51\n23\n94\n26\n59\n39\n117\n41\n34\n87\n9\n83\n16\n42\n29\n33\n4\n6\n7\n8\n12\n20\n21\n27\n35\n37\n40\n44\n47\n54\n55\n58\n65\n68\n71\n73\n74\n77\n82\n85\n89\n90\n97\n106\n109\n113\n114\n95\n101\n115\n91\n84\n78\n25\n17\n36\n76\n103\n24\n28\n70\n67\n102\n18\n93\n19\n111\n32\n46\n13\n38\n48\n112\n105\n80\n98\n49\n99\n121\n110\n96\n3\n5\n2\n14\n15\n79\n56\n100\n64\n22\n104\n43\n11\n50\n107\n72\n31\n45\n57\n119\n", "YES\n2\n3\n4\n5\n1\n", "YES\n6\n9\n16\n7\n8\n13\n14\n19\n2\n10\n21\n18\n20\n3\n12\n4\n5\n11\n15\n17\n1\n", "YES\n6\n20\n4\n3\n15\n2\n17\n12\n14\n18\n1\n9\n5\n11\n8\n19\n10\n13\n7\n21\n16\n", "YES\n10\n4\n49\n16\n59\n26\n39\n41\n6\n57\n54\n55\n45\n3\n12\n14\n28\n31\n53\n27\n60\n22\n17\n38\n23\n35\n13\n20\n8\n29\n11\n48\n40\n9\n32\n34\n51\n46\n7\n56\n18\n52\n36\n37\n44\n19\n30\n33\n50\n5\n47\n2\n58\n21\n25\n24\n43\n15\n61\n42\n1\n", "YES\n1\n33\n43\n17\n29\n15\n14\n39\n42\n59\n7\n25\n10\n5\n23\n41\n24\n55\n36\n50\n53\n4\n44\n49\n11\n27\n30\n22\n3\n57\n8\n18\n21\n26\n28\n12\n61\n19\n2\n37\n16\n51\n56\n40\n9\n54\n20\n34\n46\n13\n52\n32\n58\n60\n47\n35\n45\n31\n6\n48\n38\n", "YES\n1\n2\n3\n4\n5\n", "YES\n5\n6\n9\n16\n7\n8\n13\n14\n19\n2\n10\n21\n18\n20\n3\n12\n4\n11\n15\n17\n1\n", "YES\n6\n20\n4\n3\n15\n2\n17\n18\n1\n12\n14\n9\n5\n11\n8\n19\n10\n13\n7\n21\n16\n", "YES\n1\n29\n15\n14\n39\n42\n59\n7\n25\n10\n5\n23\n41\n24\n55\n36\n50\n47\n35\n45\n3\n57\n18\n21\n26\n28\n12\n61\n19\n2\n60\n16\n51\n46\n34\n31\n54\n20\n9\n13\n52\n32\n58\n56\n40\n37\n8\n53\n4\n44\n49\n11\n27\n30\n22\n33\n43\n17\n6\n48\n38\n", "YES\n2\n4\n1\n3\n5\n", "YES\n5\n6\n14\n19\n2\n10\n21\n18\n20\n3\n12\n4\n16\n7\n8\n13\n9\n11\n15\n17\n1\n", "YES\n11\n6\n16\n7\n8\n13\n3\n12\n4\n21\n18\n20\n19\n10\n14\n2\n9\n5\n15\n17\n1\n", "YES\n56\n7\n18\n46\n52\n51\n36\n34\n37\n32\n44\n9\n19\n40\n30\n39\n26\n41\n59\n6\n24\n25\n43\n21\n15\n58\n61\n2\n42\n47\n1\n5\n4\n55\n49\n29\n8\n20\n3\n13\n12\n35\n14\n23\n28\n38\n17\n22\n27\n60\n53\n31\n45\n11\n54\n48\n57\n33\n16\n50\n10\n", "YES\n1\n4\n7\n15\n14\n2\n5\n3\n57\n45\n31\n39\n37\n50\n56\n6\n23\n22\n36\n43\n11\n58\n25\n44\n30\n51\n28\n8\n41\n12\n26\n47\n61\n33\n52\n29\n17\n16\n10\n53\n60\n59\n35\n20\n18\n40\n19\n27\n32\n46\n13\n38\n48\n54\n9\n24\n55\n49\n42\n34\n21\n", "YES\n2\n21\n18\n20\n10\n19\n3\n9\n13\n8\n5\n11\n6\n7\n16\n12\n4\n14\n15\n17\n1\n", "YES\n1\n16\n57\n54\n55\n8\n29\n11\n48\n33\n20\n13\n12\n3\n31\n53\n27\n60\n22\n17\n45\n42\n52\n51\n46\n7\n18\n56\n36\n37\n32\n34\n44\n9\n40\n30\n19\n14\n28\n38\n23\n35\n39\n41\n6\n24\n59\n26\n43\n15\n61\n2\n58\n21\n25\n47\n5\n50\n49\n4\n10\n", "YES\n10\n4\n49\n16\n55\n45\n3\n12\n14\n28\n31\n53\n27\n60\n22\n17\n38\n23\n35\n13\n20\n8\n57\n54\n29\n11\n48\n33\n50\n5\n47\n2\n58\n21\n25\n6\n41\n39\n40\n9\n32\n34\n51\n46\n7\n56\n18\n52\n36\n37\n44\n19\n30\n26\n59\n24\n43\n15\n61\n42\n1\n", "YES\n20\n4\n28\n55\n48\n24\n12\n41\n22\n16\n38\n44\n9\n42\n47\n63\n56\n2\n3\n5\n6\n7\n8\n10\n11\n13\n14\n15\n17\n18\n19\n21\n23\n25\n26\n27\n29\n30\n31\n32\n33\n34\n35\n36\n37\n39\n40\n43\n45\n46\n49\n50\n51\n52\n53\n54\n57\n58\n59\n60\n61\n62\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n1\n", "YES\n1\n75\n116\n30\n62\n63\n81\n69\n120\n108\n92\n61\n88\n52\n66\n10\n53\n60\n51\n23\n94\n26\n59\n39\n117\n41\n34\n87\n9\n83\n16\n33\n4\n6\n7\n8\n12\n20\n21\n27\n29\n35\n37\n40\n42\n44\n47\n54\n55\n58\n65\n68\n71\n73\n74\n77\n82\n85\n89\n90\n97\n106\n109\n113\n114\n95\n101\n115\n91\n84\n78\n25\n17\n36\n76\n103\n24\n28\n70\n67\n102\n86\n118\n19\n93\n18\n111\n32\n46\n13\n38\n48\n112\n105\n80\n98\n49\n99\n121\n110\n96\n3\n5\n2\n14\n15\n79\n56\n100\n64\n22\n104\n43\n11\n50\n107\n72\n31\n45\n57\n119\n", "YES\n2\n5\n1\n3\n4\n", "YES\n11\n4\n14\n2\n21\n18\n20\n10\n19\n6\n7\n16\n9\n13\n12\n3\n8\n5\n15\n17\n1\n", "YES\n1\n5\n50\n33\n48\n11\n29\n8\n20\n13\n35\n23\n28\n14\n12\n3\n45\n55\n54\n57\n30\n9\n32\n34\n51\n46\n7\n56\n18\n52\n36\n37\n44\n19\n31\n53\n27\n60\n22\n17\n38\n40\n16\n49\n4\n10\n42\n61\n15\n43\n24\n59\n26\n39\n41\n6\n25\n21\n58\n2\n47\n", "YES\n1\n33\n43\n17\n10\n23\n15\n14\n39\n42\n59\n7\n25\n41\n29\n35\n24\n55\n36\n50\n53\n4\n44\n49\n11\n27\n30\n22\n47\n45\n3\n57\n18\n21\n26\n28\n12\n61\n19\n2\n60\n56\n16\n5\n51\n40\n9\n54\n20\n34\n46\n13\n52\n32\n58\n37\n8\n31\n6\n48\n38\n", "YES\n1\n75\n116\n30\n62\n63\n81\n69\n120\n108\n92\n61\n88\n52\n66\n118\n86\n10\n53\n60\n28\n24\n103\n76\n36\n17\n25\n78\n84\n91\n115\n101\n95\n42\n29\n33\n4\n6\n7\n8\n12\n20\n21\n27\n35\n37\n40\n44\n47\n54\n55\n58\n65\n68\n71\n73\n74\n82\n85\n89\n90\n97\n106\n109\n113\n114\n16\n83\n9\n87\n34\n41\n117\n39\n59\n26\n94\n23\n51\n77\n70\n67\n102\n18\n93\n19\n111\n32\n46\n13\n38\n48\n112\n105\n80\n98\n49\n99\n121\n110\n96\n3\n5\n2\n14\n15\n79\n56\n100\n64\n22\n104\n43\n11\n50\n107\n72\n31\n45\n57\n119\n", "YES\n4\n3\n2\n5\n1\n", "YES\n10\n4\n49\n48\n11\n29\n8\n45\n55\n54\n57\n30\n9\n32\n34\n51\n46\n7\n56\n18\n52\n36\n37\n44\n19\n3\n12\n14\n28\n31\n53\n27\n60\n22\n17\n38\n23\n35\n13\n20\n40\n16\n59\n26\n39\n41\n6\n33\n50\n5\n47\n2\n58\n21\n25\n24\n43\n15\n61\n42\n1\n", "YES\n1\n33\n43\n17\n53\n4\n24\n15\n14\n39\n42\n25\n10\n5\n23\n41\n7\n44\n59\n29\n55\n36\n50\n49\n11\n27\n30\n22\n3\n57\n8\n18\n21\n26\n28\n12\n61\n19\n2\n37\n16\n51\n56\n40\n9\n54\n20\n34\n46\n13\n52\n32\n58\n60\n47\n35\n45\n31\n6\n48\n38\n", "YES\n1\n21\n18\n2\n10\n19\n3\n12\n4\n9\n16\n7\n8\n13\n14\n6\n11\n5\n15\n17\n20\n", "YES\n6\n20\n4\n3\n15\n2\n17\n18\n1\n12\n14\n11\n8\n19\n9\n5\n10\n13\n7\n21\n16\n", "YES\n6\n48\n1\n29\n15\n14\n39\n42\n59\n7\n25\n10\n5\n23\n41\n24\n55\n36\n50\n47\n35\n45\n3\n57\n18\n21\n26\n28\n12\n61\n19\n2\n60\n16\n51\n46\n34\n31\n54\n20\n9\n13\n52\n32\n58\n56\n40\n37\n8\n53\n4\n44\n49\n11\n27\n30\n22\n33\n43\n17\n38\n", "YES\n50\n33\n16\n48\n11\n13\n35\n14\n23\n28\n38\n17\n22\n27\n60\n53\n31\n20\n3\n8\n45\n55\n49\n29\n54\n57\n5\n4\n1\n10\n42\n47\n61\n2\n15\n21\n12\n56\n7\n18\n46\n52\n51\n36\n34\n37\n32\n44\n9\n19\n40\n30\n39\n26\n41\n59\n6\n24\n25\n43\n58\n", "YES\n1\n4\n7\n15\n14\n2\n5\n3\n57\n45\n31\n39\n37\n50\n56\n6\n23\n22\n25\n44\n30\n51\n28\n8\n41\n12\n26\n47\n61\n33\n52\n29\n17\n16\n10\n53\n60\n59\n35\n20\n18\n40\n19\n27\n32\n46\n13\n38\n48\n54\n9\n24\n55\n49\n42\n34\n36\n43\n11\n58\n21\n", "YES\n2\n21\n18\n20\n10\n19\n3\n9\n5\n11\n6\n7\n13\n8\n16\n12\n4\n14\n15\n17\n1\n", "NO\n", "YES\n21\n13\n7\n11\n9\n8\n19\n10\n1\n18\n14\n5\n12\n20\n4\n3\n15\n2\n17\n6\n16\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary  \nAssign sequential labels to the nodes of an undirected tree of odd size by first greedily selecting and numbering nodes with even remaining degree via a post-order traversal, then BFS-propagating labels to all other nodes.\n\n2. Core algorithmic approach  \n\u2022 A two-phase tree traversal:  \n  \u2013 Phase 1: An explicit stack\u2013based DFS in \u201cobserve/check\u201d states (a post-order scan) to greedily pick and label nodes whose current degree is even, decrementing their parent\u2019s degree.  \n  \u2013 Phase 2: A BFS from the root to assign the remaining labels in increasing order.\n\n3. Reusable components  \n\u2022 Iterative DFS with explicit \u201cobserve\u201d and \u201ccheck\u201d states to perform post-order operations without recursion.  \n\u2022 Degree-counter array to track and update node degrees dynamically during greedy selection.  \n\u2022 Standard BFS to fill in or propagate values once initial seeds are set."}
{"name": "319_B. Psychos in a Line", "description": "There are n psychos standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. Note that a psycho might kill and get killed at the same step. \n\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment. Look notes to understand the statement more precise.\n\nInput\n\nThe first line of input contains integer n denoting the number of psychos, (1 \u2264 n \u2264 105). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.\n\nOutput\n\nPrint the number of steps, so that the line remains the same afterward.\n\nExamples\n\nInput\n\n10\n10 9 7 8 6 5 3 4 2 1\n\n\nOutput\n\n2\n\n\nInput\n\n6\n1 2 3 4 5 6\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample line of the psychos transforms as follows: [10 9 7 8 6 5 3 4 2 1]  \u2192  [10 8 4] \u2192  [10]. So, there are two steps.", "solution": "n, t = int(input()), list(map(int, input().split()))\n\np, s, r = [0] * n, [0] * n, t[0]\n\nfor i in range(n - 1):\n\n    j = i + 1\n\n    x = t[j]\n\n    if x > r: r = x\n\n    else:\n\n        while t[i] < x: s[j], i = max(s[j], s[i]), p[i]\n\n        p[j] = i\n\n        s[j] += 1\n\nprint(max(s))\n\n\n\n# Made By Mostafa_Khaled", "difficulty": 8, "public_tests": {"input": ["6\n1 2 3 4 5 6\n", "10\n10 9 7 8 6 5 3 4 2 1\n"], "output": ["0\n", "2\n"]}, "private_tests": {"input": ["2\n1 2\n", "100\n61 96 25 10 50 71 38 77 76 75 59 100 89 66 6 99 2 13 3 23 91 93 22 92 4 86 90 44 39 31 9 47 28 95 18 54 1 73 94 78 60 20 42 84 97 83 16 81 67 64 74 46 82 5 88 80 14 48 53 79 30 11 62 21 41 70 63 58 51 56 57 17 87 72 27 85 68 49 52 8 12 98 43 37 35 69 55 32 26 40 29 65 19 24 34 33 15 45 36 7\n", "1\n1\n", "6\n6 5 4 3 2 1\n", "15\n15 9 5 10 7 11 14 6 2 3 12 1 8 13 4\n", "2\n2 1\n", "10\n10 7 4 2 5 8 9 6 3 1\n"], "output": ["0\n", "8\n", "0\n", "1\n", "4\n", "1\n", "4\n"]}, "generated_tests": {"input": [], "output": []}, "short_description": "1. One-sentence summary  \nBuild a parent\u2010pointer tree over the array by linking each element to its nearest previous larger element, and compute the maximum depth of that tree.\n\n2. Core algorithmic approach  \nA single\u2010pass linear scan that mimics a monotonic\u2010stack/Cartesian\u2010tree construction via \u201cpointer\u00adjumping\u201d over parent links, combined with a simple tree\u2010DP to track and update depths.\n\n3. Reusable components  \n- Nearest\u2010greater predecessor search via parent\u2010pointer walking (an alternative to an explicit stack)  \n- Depth accumulation: storing and updating the depth of each node as max(depth of candidate parent, current depth)+1  \n- Early skip for new global maxima (using a running max to avoid parent\u2010search when no predecessor can be larger)"}
{"name": "421_D. Bug in Code", "description": "Recently a serious bug has been found in the FOS code. The head of the F company wants to find the culprit and punish him. For that, he set up an organizational meeting, the issue is: who's bugged the code? Each of the n coders on the meeting said: 'I know for sure that either x or y did it!'\n\nThe head of the company decided to choose two suspects and invite them to his office. Naturally, he should consider the coders' opinions. That's why the head wants to make such a choice that at least p of n coders agreed with it. A coder agrees with the choice of two suspects if at least one of the two people that he named at the meeting was chosen as a suspect. In how many ways can the head of F choose two suspects?\n\nNote that even if some coder was chosen as a suspect, he can agree with the head's choice if he named the other chosen coder at the meeting.\n\nInput\n\nThe first line contains integers n and p (3 \u2264 n \u2264 3\u00b7105; 0 \u2264 p \u2264 n) \u2014 the number of coders in the F company and the minimum number of agreed people.\n\nEach of the next n lines contains two integers xi, yi (1 \u2264 xi, yi \u2264 n) \u2014 the numbers of coders named by the i-th coder. It is guaranteed that xi \u2260 i, yi \u2260 i, xi \u2260 yi.\n\nOutput\n\nPrint a single integer \u2014 the number of possible two-suspect sets. Note that the order of the suspects doesn't matter, that is, sets (1, 2) and (2, 1) are considered identical.\n\nExamples\n\nInput\n\n4 2\n2 3\n1 4\n1 4\n2 1\n\n\nOutput\n\n6\n\n\nInput\n\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n\nOutput\n\n1", "solution": "from collections import defaultdict\nfrom bisect import bisect_left as lower\nimport sys\ninput = sys.stdin.readline\ndef put():\n    return map(int, input().split())\n\ntry:\n    n,m = put()\n    cnt, mp, ans = [0]*n, defaultdict(), [0]*n\n    for _ in range(n):\n        x,y = put()\n        x,y = x-1,y-1\n        key = (min(x,y), max(x,y))\n        if key in mp:\n            mp[key]+=1\n        else:\n            mp[key]=1\n        cnt[x]+=1\n        cnt[y]+=1\n\nexcept:\n    print('lol')\n\nfor (x,y),val in mp.items():\n    if cnt[x]+cnt[y]>= m and cnt[x]+cnt[y]-val<m:\n        ans[x]-=1\n        ans[y]-=1\n\n\nscnt = cnt.copy()\nscnt.sort()\nfor i in range(n):\n    ans[i]+= n-lower(scnt, m-cnt[i])\n    if 2*cnt[i]>=m:\n        ans[i]-=1\n\nprint(sum(ans)//2)\n", "difficulty": 10, "public_tests": {"input": ["8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n", "4 2\n2 3\n1 4\n1 4\n2 1\n"], "output": ["1\n", "6\n"]}, "private_tests": {"input": ["10 3\n6 3\n6 10\n2 5\n5 7\n6 2\n9 2\n8 1\n10 5\n5 10\n7 6\n", "4 2\n3 4\n4 3\n4 2\n3 1\n", "10 10\n5 6\n1 4\n1 4\n1 2\n1 2\n1 2\n1 3\n1 3\n1 3\n1 4\n", "5 5\n3 2\n3 4\n2 5\n3 2\n4 3\n", "6 6\n5 6\n5 6\n5 6\n1 2\n1 3\n3 4\n", "5 3\n4 5\n4 5\n4 5\n3 2\n2 3\n", "8 8\n6 5\n1 6\n1 6\n1 6\n1 6\n1 2\n1 3\n6 4\n", "5 3\n5 2\n4 3\n4 5\n3 1\n4 2\n", "10 1\n4 9\n8 9\n7 6\n1 5\n3 6\n4 3\n4 6\n10 1\n1 8\n7 9\n", "4 4\n3 4\n4 3\n1 2\n2 1\n", "5 1\n4 2\n4 5\n5 1\n5 1\n4 2\n", "10 4\n8 7\n1 5\n7 4\n7 8\n3 2\n10 8\n3 6\n9 7\n8 7\n4 1\n", "4 1\n3 2\n4 1\n4 2\n1 2\n", "10 2\n10 2\n9 3\n9 4\n7 2\n4 6\n10 1\n9 2\n3 10\n7 1\n5 1\n", "8 5\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n", "5 5\n3 2\n3 4\n1 2\n1 2\n1 2\n", "4 4\n3 4\n3 4\n1 2\n1 2\n", "4 4\n2 3\n4 3\n2 1\n2 3\n", "8 7\n7 8\n7 8\n1 6\n1 6\n1 2\n1 3\n6 4\n6 5\n", "3 2\n2 3\n3 1\n2 1\n", "5 2\n4 3\n1 3\n4 2\n1 2\n1 4\n", "5 3\n3 4\n3 4\n1 2\n1 2\n1 2\n", "5 3\n5 3\n5 1\n2 1\n5 3\n1 4\n", "6 4\n2 3\n3 1\n1 2\n5 6\n6 4\n4 5\n", "4 3\n3 2\n4 3\n2 4\n3 2\n", "6 5\n5 6\n5 6\n5 6\n5 6\n1 2\n3 4\n", "4 3\n3 4\n3 4\n1 2\n1 2\n", "4 4\n2 3\n3 4\n2 4\n2 1\n", "5 5\n4 5\n4 5\n4 5\n1 2\n1 2\n"], "output": ["34\n", "6\n", "2\n", "3\n", "0\n", "7\n", "1\n", "9\n", "45\n", "4\n", "10\n", "19\n", "6\n", "43\n", "5\n", "3\n", "4\n", "3\n", "0\n", "3\n", "10\n", "7\n", "9\n", "9\n", "5\n", "8\n", "4\n", "2\n", "4\n"]}, "generated_tests": {"input": ["10 3\n6 3\n6 10\n2 5\n5 7\n6 2\n9 2\n8 1\n10 5\n5 10\n7 3\n", "5 3\n4 5\n4 5\n4 5\n3 1\n2 3\n", "8 8\n6 5\n1 6\n1 6\n1 6\n2 6\n1 2\n1 3\n6 4\n", "5 3\n5 2\n4 3\n4 5\n5 1\n4 2\n", "5 1\n4 2\n4 5\n5 1\n5 1\n4 1\n", "4 1\n3 2\n4 1\n4 1\n1 2\n", "5 3\n5 3\n5 1\n2 1\n5 3\n1 2\n", "10 3\n6 3\n6 9\n2 5\n5 7\n6 2\n9 2\n8 1\n10 5\n5 10\n7 6\n", "3 0\n2 3\n3 1\n2 1\n", "4 3\n3 4\n3 4\n1 2\n1 3\n", "10 3\n6 3\n6 10\n2 5\n2 7\n6 2\n9 2\n8 2\n10 5\n5 10\n7 3\n", "10 3\n6 3\n6 10\n2 5\n2 7\n9 2\n9 2\n8 2\n10 5\n5 10\n7 3\n", "10 0\n6 3\n6 10\n2 5\n5 7\n6 2\n9 2\n8 1\n10 5\n5 10\n7 6\n", "10 10\n5 6\n2 4\n1 4\n1 2\n1 2\n1 2\n1 3\n1 3\n1 3\n1 4\n", "8 8\n6 5\n1 6\n1 6\n1 6\n1 6\n1 2\n1 6\n6 4\n", "5 2\n4 5\n4 5\n4 5\n3 1\n2 3\n", "5 1\n4 2\n4 5\n5 1\n3 1\n4 1\n", "4 2\n3 2\n4 1\n4 1\n1 2\n", "4 0\n3 2\n4 1\n4 1\n1 2\n", "4 2\n3 4\n4 3\n4 2\n3 2\n", "5 3\n4 5\n4 5\n4 5\n3 4\n2 3\n", "8 8\n6 5\n1 6\n1 6\n1 6\n1 6\n1 2\n1 3\n5 4\n", "4 1\n3 2\n4 2\n4 2\n1 2\n", "5 3\n3 4\n3 4\n1 4\n1 2\n1 2\n", "6 5\n5 6\n5 6\n5 6\n5 6\n1 2\n3 6\n", "5 5\n4 5\n1 5\n4 5\n1 2\n1 2\n", "10 3\n6 3\n6 10\n2 5\n2 7\n6 2\n9 2\n8 1\n10 5\n5 10\n7 3\n", "5 3\n5 2\n4 3\n1 5\n5 1\n4 2\n", "5 1\n4 2\n4 5\n2 1\n5 1\n4 1\n", "5 2\n4 5\n4 5\n4 5\n3 1\n2 4\n", "4 2\n3 2\n4 1\n4 1\n1 3\n", "10 3\n6 3\n6 9\n2 5\n5 7\n6 2\n9 2\n8 1\n10 9\n5 10\n7 6\n", "5 3\n4 5\n2 5\n4 5\n3 4\n2 3\n", "4 1\n3 2\n4 3\n4 2\n1 2\n", "3 0\n2 1\n3 1\n2 1\n", "5 3\n3 4\n2 4\n1 4\n1 2\n1 2\n", "5 3\n4 5\n1 5\n4 5\n3 4\n2 3\n", "4 1\n3 4\n4 3\n4 2\n1 2\n", "5 3\n1 4\n2 4\n1 4\n1 2\n1 2\n", "5 5\n3 2\n3 4\n2 1\n3 2\n4 3\n", "5 3\n4 5\n4 5\n3 5\n3 2\n2 3\n", "4 4\n3 2\n4 3\n1 2\n2 1\n", "5 1\n4 2\n2 5\n5 1\n5 1\n4 2\n"], "output": ["37\n", "7\n", "1\n", "9\n", "10\n", "6\n", "8\n", "36\n", "3\n", "5\n", "35\n", "34\n", "45\n", "0\n", "2\n", "10\n", "10\n", "6\n", "6\n", "6\n", "7\n", "1\n", "6\n", "8\n", "8\n", "3\n", "37\n", "9\n", "10\n", "9\n", "6\n", "37\n", "8\n", "6\n", "3\n", "9\n", "8\n", "6\n", "9\n", "3\n", "8\n", "3\n", "10\n"]}, "short_description": "1. One-sentence summary:  \nCounts the number of unordered pairs in a graph whose combined degree meets or exceeds a given threshold, correcting for overcounts due to directly connected vertices.\n\n2. Core algorithmic approach:  \n- Sort-and-binary-search on the vertex degree array to count, for each vertex, how many other vertices bring its degree sum to the threshold (i.e. two-pointer/binary-search on sorted list).  \n- Use a hash map to track edge multiplicities and apply an inclusion\u2013exclusion correction for pairs whose direct edge causes an overcount.\n\n3. Reusable components:  \n- Degree preprocessing and sorting, together with a binary\u2010search routine (`bisect_left`) to count how many degrees \u2265 (threshold \u2013 current_degree).  \n- A hash-map (or `defaultdict`) keyed by sorted node pairs for tracking edge counts/multiplicities.  \n- The inclusion\u2013exclusion adjustment pattern: for each edge (u,v), if deg[u]+deg[v] \u2265 T but deg[u]+deg[v]\u2212edge_count(u,v) < T, decrement the overall count."}
{"name": "1325_C. Ehab and Path-etic MEXs", "description": "You are given a tree consisting of n nodes. You want to write some labels on the tree's edges such that the following conditions hold:\n\n  * Every label is an integer between 0 and n-2 inclusive. \n  * All the written labels are distinct. \n  * The largest value among MEX(u,v) over all pairs of nodes (u,v) is as small as possible. \n\n\n\nHere, MEX(u,v) denotes the smallest non-negative integer that isn't written on any edge on the unique simple path from node u to node v.\n\nInput\n\nThe first line contains the integer n (2 \u2264 n \u2264 10^5) \u2014 the number of nodes in the tree.\n\nEach of the next n-1 lines contains two space-separated integers u and v (1 \u2264 u,v \u2264 n) that mean there's an edge between nodes u and v. It's guaranteed that the given graph is a tree.\n\nOutput\n\nOutput n-1 integers. The i^{th} of them will be the number written on the i^{th} edge (in the input order).\n\nExamples\n\nInput\n\n\n3\n1 2\n1 3\n\n\nOutput\n\n\n0\n1\n\n\nInput\n\n\n6\n1 2\n1 3\n2 4\n2 5\n5 6\n\n\nOutput\n\n\n0\n3\n2\n4\n1\n\nNote\n\nThe tree from the second sample:\n\n<image>", "solution": "n = int(input())\nocc = [0 for i in range(n)]\ngraph = [[0,0] for i in range(n-1)]\nfor i in range(n-1):\n    x, y = map(int,input().split())\n    occ[x-1]+=1\n    occ[y-1]+=1\n    graph[i][0] = x-1\n    graph[i][1] = y-1\n    \nfin = [-1 for i in range(n-1)]\nfor i in range(n):\n    if occ[i] >= 3 :\n        var = 0\n        for j in range(n-1):\n            if graph[j][0] == i or graph[j][1] == i:\n                fin[j] = var\n                var += 1\n        break\nelse:\n    var = 0\n    for i in range(n):\n        if var > 1:\n            break\n        if occ[i] == 1:\n            for j in range(n-1):\n                if graph[j][0] == i or graph[j][1] == i:\n                    fin[j] = var\n                    var += 1\n                    break\nfor i in fin:\n    if n == 2:\n        print(0)\n        break\n    if i == -1:\n        print(var)\n        var += 1\n    else:\n        print(i)", "difficulty": 9, "public_tests": {"input": ["6\n1 2\n1 3\n2 4\n2 5\n5 6\n", "3\n1 2\n1 3\n"], "output": ["0\n3\n1\n2\n4\n", "0\n1\n"]}, "private_tests": {"input": ["6\n1 2\n2 3\n3 4\n3 5\n3 6\n", "7\n6 4\n3 7\n3 5\n1 3\n4 2\n7 4\n", "7\n3 2\n5 7\n4 2\n7 6\n6 3\n1 6\n", "2\n1 2\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 12\n12 13\n13 6\n6 7\n7 8\n7 9\n7 10\n", "4\n2 3\n2 4\n2 1\n", "5\n1 3\n4 3\n2 5\n3 2\n", "2\n2 1\n", "7\n2 1\n4 7\n2 3\n6 4\n7 3\n1 5\n", "7\n5 6\n2 6\n6 4\n6 1\n6 3\n6 7\n", "6\n1 2\n1 3\n2 4\n2 5\n5 6\n", "11\n2 3\n3 4\n4 7\n7 8\n1 3\n3 5\n4 10\n4 11\n6 7\n7 9\n"], "output": ["0\n4\n1\n2\n3\n", "3\n0\n1\n2\n4\n5\n", "3\n4\n5\n0\n1\n2\n", "0\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n", "0\n1\n3\n2\n", "0\n", "0\n1\n2\n3\n4\n5\n", "0\n1\n2\n3\n4\n5\n", "0\n3\n1\n2\n4\n", "0\n1\n3\n4\n2\n5\n6\n7\n8\n9\n"]}, "generated_tests": {"input": ["7\n6 4\n3 7\n5 5\n1 3\n4 2\n7 4\n", "7\n4 2\n5 7\n4 2\n7 6\n6 3\n1 6\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 12\n12 13\n13 6\n6 7\n7 8\n7 8\n7 10\n", "4\n2 3\n2 4\n1 1\n", "5\n1 3\n4 3\n2 5\n4 2\n", "7\n5 6\n2 6\n6 4\n0 1\n6 3\n6 7\n", "6\n1 2\n0 3\n2 4\n2 5\n5 6\n", "3\n1 2\n2 3\n", "6\n1 3\n0 3\n2 4\n2 5\n5 6\n", "7\n6 2\n5 7\n4 3\n7 6\n6 3\n0 6\n", "7\n3 2\n5 7\n4 3\n7 6\n6 3\n0 6\n", "6\n1 2\n2 3\n3 4\n6 5\n3 6\n", "2\n1 1\n", "5\n0 5\n4 3\n3 5\n3 2\n", "7\n5 6\n2 6\n1 4\n6 1\n6 3\n6 7\n", "5\n0 3\n4 3\n2 5\n3 2\n", "6\n1 5\n0 3\n2 4\n2 5\n5 6\n", "6\n1 3\n0 3\n2 4\n2 3\n5 1\n", "7\n6 4\n3 7\n5 5\n0 3\n4 2\n7 4\n", "7\n4 2\n5 7\n4 3\n7 6\n6 3\n1 6\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 10\n12 13\n13 6\n6 7\n7 8\n7 8\n7 10\n", "5\n0 3\n4 3\n2 5\n4 2\n", "7\n4 2\n5 7\n4 3\n7 6\n6 3\n0 6\n", "7\n6 3\n3 7\n3 5\n1 3\n4 2\n7 4\n", "7\n3 2\n5 7\n4 2\n7 4\n6 3\n1 6\n", "13\n1 4\n2 4\n6 4\n4 5\n5 11\n11 12\n12 13\n13 6\n6 7\n7 8\n7 9\n7 10\n", "4\n2 3\n2 4\n2 0\n", "5\n1 3\n0 3\n2 5\n4 2\n", "2\n2 0\n", "6\n1 2\n1 3\n2 4\n2 5\n3 6\n", "3\n1 2\n1 2\n", "7\n6 4\n3 7\n5 5\n1 6\n4 2\n7 4\n", "7\n4 3\n5 7\n4 2\n7 6\n6 3\n1 6\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 12\n12 13\n13 1\n6 7\n7 8\n7 8\n7 10\n", "4\n2 3\n2 4\n1 2\n", "5\n1 3\n4 3\n3 5\n3 2\n", "3\n1 2\n2 1\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 10\n12 13\n13 6\n6 7\n6 8\n7 8\n7 10\n", "6\n1 3\n0 3\n2 4\n2 5\n5 1\n", "7\n6 3\n3 7\n3 5\n1 3\n4 2\n7 5\n", "13\n1 4\n2 4\n6 4\n4 5\n5 11\n11 12\n12 13\n13 6\n6 7\n5 8\n7 9\n7 10\n", "4\n3 3\n2 4\n2 0\n", "6\n1 2\n1 3\n2 6\n2 5\n3 6\n", "3\n1 2\n1 0\n", "7\n4 6\n5 7\n4 2\n7 6\n6 3\n1 6\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 12\n12 13\n13 1\n6 7\n11 8\n7 8\n7 10\n", "4\n2 3\n2 4\n2 2\n", "5\n0 3\n4 3\n3 5\n3 2\n", "3\n1 2\n2 0\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 10\n12 13\n13 6\n6 7\n6 3\n7 8\n7 10\n", "6\n1 3\n0 3\n2 4\n2 4\n5 1\n", "7\n6 3\n3 7\n3 5\n1 6\n4 2\n7 5\n", "13\n1 4\n2 4\n6 4\n4 5\n5 11\n11 12\n12 13\n13 6\n6 7\n5 8\n0 9\n7 10\n", "6\n1 2\n1 3\n2 6\n2 5\n6 6\n", "7\n4 6\n5 7\n4 2\n7 6\n6 0\n1 6\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 12\n12 13\n11 1\n6 7\n11 8\n7 8\n7 10\n", "13\n1 4\n2 4\n6 4\n4 5\n5 11\n11 10\n12 13\n13 6\n6 7\n6 3\n7 8\n7 10\n", "13\n1 4\n2 4\n6 4\n4 5\n5 11\n11 12\n12 13\n13 11\n6 7\n5 8\n0 9\n7 10\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 12\n12 13\n11 1\n6 7\n11 6\n7 8\n7 10\n", "13\n1 4\n2 4\n6 4\n4 5\n9 11\n11 12\n12 13\n13 11\n6 7\n5 8\n0 9\n7 10\n", "7\n5 2\n5 7\n4 2\n7 6\n6 3\n1 6\n", "2\n2 2\n", "7\n2 1\n4 7\n2 3\n6 6\n7 3\n1 5\n", "6\n1 4\n1 3\n2 4\n2 5\n5 6\n", "3\n1 2\n0 3\n", "7\n5 6\n2 6\n6 4\n0 0\n6 3\n6 7\n", "6\n1 1\n0 3\n2 4\n2 5\n5 6\n", "7\n4 2\n5 7\n1 3\n7 6\n6 3\n0 6\n", "6\n1 2\n2 3\n3 4\n6 5\n3 0\n", "6\n1 0\n1 3\n2 4\n2 5\n3 6\n", "7\n4 3\n5 1\n4 2\n7 6\n6 3\n1 6\n", "4\n2 3\n1 4\n1 2\n", "5\n1 3\n4 3\n3 5\n5 2\n", "3\n1 2\n0 1\n", "13\n0 4\n2 4\n3 4\n4 5\n5 11\n11 10\n12 13\n13 6\n6 7\n6 8\n7 8\n7 10\n", "13\n1 4\n2 4\n6 4\n4 5\n5 11\n11 12\n12 13\n13 6\n6 7\n5 8\n7 9\n0 10\n", "6\n1 2\n1 3\n2 6\n2 5\n3 2\n", "7\n4 6\n5 7\n4 2\n7 6\n6 3\n0 6\n", "3\n0 2\n2 0\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 10\n12 13\n13 6\n6 7\n7 3\n7 8\n7 10\n", "6\n1 3\n0 3\n0 4\n2 4\n5 1\n", "7\n6 3\n3 7\n3 5\n1 6\n7 2\n7 5\n", "7\n4 6\n5 7\n4 2\n7 2\n6 0\n1 6\n", "13\n1 4\n2 4\n3 4\n4 5\n5 11\n11 12\n12 13\n11 1\n6 7\n11 8\n10 8\n7 10\n", "13\n1 4\n2 4\n6 4\n4 5\n5 11\n11 10\n12 13\n13 6\n7 7\n6 3\n7 8\n7 10\n", "13\n1 4\n2 4\n6 4\n4 5\n7 11\n11 12\n12 13\n13 11\n6 7\n5 8\n0 9\n7 10\n"], "output": ["0\n3\n4\n5\n1\n2\n", "3\n4\n5\n0\n1\n2\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n", "0\n1\n2\n3\n", "0\n1\n2\n3\n4\n5\n", "0\n3\n1\n2\n4\n", "0\n1\n", "0\n1\n2\n3\n4\n", "0\n3\n4\n1\n2\n5\n", "0\n3\n1\n4\n2\n5\n", "3\n0\n1\n4\n2\n", "0\n", "3\n0\n1\n2\n", "0\n1\n3\n2\n4\n5\n", "0\n1\n3\n2\n", "0\n3\n4\n1\n2\n", "0\n1\n3\n2\n4\n", "0\n3\n4\n5\n1\n2\n", "3\n4\n5\n0\n1\n2\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n", "3\n4\n5\n0\n1\n2\n", "0\n1\n2\n3\n4\n5\n", "0\n1\n2\n3\n4\n5\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n", "0\n1\n2\n3\n", "0\n", "0\n3\n1\n2\n4\n", "0\n1\n", "0\n3\n4\n5\n1\n2\n", "3\n4\n5\n0\n1\n2\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n", "0\n1\n2\n3\n", "0\n1\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n4\n", "0\n1\n2\n3\n4\n5\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n", "0\n3\n1\n2\n4\n", "0\n1\n", "0\n3\n4\n1\n2\n5\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n", "0\n1\n2\n3\n", "0\n1\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n4\n", "0\n1\n2\n3\n4\n5\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n3\n1\n2\n4\n", "0\n3\n4\n1\n2\n5\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "3\n4\n5\n0\n1\n2\n", "0\n", "0\n1\n2\n3\n4\n5\n", "0\n1\n2\n3\n4\n", "0\n1\n", "0\n1\n2\n3\n4\n5\n", "0\n1\n2\n3\n4\n", "3\n4\n5\n0\n1\n2\n", "3\n0\n1\n4\n2\n", "0\n1\n2\n3\n4\n", "3\n4\n5\n0\n1\n2\n", "0\n1\n2\n", "0\n1\n2\n3\n", "0\n1\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n3\n1\n2\n4\n", "0\n3\n4\n1\n2\n5\n", "0\n1\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n4\n", "0\n1\n2\n3\n4\n5\n", "0\n3\n4\n5\n1\n2\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n"]}, "short_description": "1. One-sentence summary:  \nThe code takes an undirected tree and produces a permutation of its edges by first selecting a \u201cspecial\u201d vertex (one of highest degree, or otherwise two leaves) and assigning its incident edges the smallest labels, then greedily labeling all remaining edges with increasing numbers.\n\n2. Core algorithmic approach:  \nGreedy traversal on a tree\u2014count node degrees to pick a pivot, then scan the edge list twice (once to label pivot\u2010incident edges, once to label the rest).\n\n3. Reusable components:  \n- Degree counting array: tallying occurrences of each endpoint to detect high\u2010degree or leaf nodes.  \n- Edge list storage and scans: storing edges as pairs and performing multiple linear passes to assign or fill in labels.  \n- Label\u2010assignment pattern: reserving a contiguous block of labels for a chosen subset of edges, then assigning the remaining labels in a second pass."}
{"name": "1287_D. Numbers on Tree", "description": "Evlampiy was gifted a rooted tree. The vertices of the tree are numbered from 1 to n. Each of its vertices also has an integer a_i written on it. For each vertex i, Evlampiy calculated c_i \u2014 the number of vertices j in the subtree of vertex i, such that a_j < a_i. \n\n<image>Illustration for the second example, the first integer is a_i and the integer in parentheses is c_i\n\nAfter the new year, Evlampiy could not remember what his gift was! He remembers the tree and the values of c_i, but he completely forgot which integers a_i were written on the vertices.\n\nHelp him to restore initial integers!\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 2000) \u2014 the number of vertices in the tree.\n\nThe next n lines contain descriptions of vertices: the i-th line contains two integers p_i and c_i (0 \u2264 p_i \u2264 n; 0 \u2264 c_i \u2264 n-1), where p_i is the parent of vertex i or 0 if vertex i is root, and c_i is the number of vertices j in the subtree of vertex i, such that a_j < a_i.\n\nIt is guaranteed that the values of p_i describe a rooted tree with n vertices.\n\nOutput\n\nIf a solution exists, in the first line print \"YES\", and in the second line output n integers a_i (1 \u2264 a_i \u2264 {10}^{9}). If there are several solutions, output any of them. One can prove that if there is a solution, then there is also a solution in which all a_i are between 1 and 10^9.\n\nIf there are no solutions, print \"NO\".\n\nExamples\n\nInput\n\n\n3\n2 0\n0 2\n2 0\n\n\nOutput\n\n\nYES\n1 2 1 \n\nInput\n\n\n5\n0 1\n1 3\n2 1\n3 0\n2 0\n\n\nOutput\n\n\nYES\n2 3 2 1 2", "solution": "import sys\n\n# inf = open('input.txt', 'r')\n# reader = (line.rstrip() for line in inf)\nreader = (line.rstrip() for line in sys.stdin)\ninput = reader.__next__\n\nn = int(input())\ncs = [0] * (n + 1)\nps = [0] * (n + 1)\nchildren = [[] for _ in range(n+1)]\nfor i in range(1, n+1):\n    p, c = map(int, input().split())\n    ps[i] = p\n    children[p].append(i)\n    cs[i] = c\n\ndef sortDescendants(v):\n    result = []\n    pos = cs[v]\n    for child in children[v]:\n        result += sortDescendants(child)\n    if len(result) < pos:\n        print('NO')\n        sys.exit()\n    result.insert(pos, v)\n    return result\n\nroot = children[0][0]\norder = sortDescendants(root)\na = [0] * n\nfor i, v in enumerate(order):\n    a[v - 1] = i + 1\nprint('YES')\nprint(*a)\n\n# inf.close()\n", "difficulty": 10, "public_tests": {"input": ["3\n2 0\n0 2\n2 0\n", "5\n0 1\n1 3\n2 1\n3 0\n2 0\n"], "output": ["YES\n1 3 2 \n", "YES\n2 5 3 1 4 \n"]}, "private_tests": {"input": ["3\n2 0\n0 2\n2 0\n", "3\n2 1\n0 0\n1 1\n", "2\n0 1\n1 0\n", "3\n3 1\n1 0\n0 1\n", "2\n2 1\n0 1\n", "1\n0 0\n", "3\n0 0\n1 0\n1 0\n", "3\n0 1\n3 0\n1 0\n", "5\n0 1\n1 3\n2 1\n3 0\n2 0\n", "2\n2 0\n0 0\n"], "output": ["YES\n1 3 2 \n", "NO\n", "YES\n2 1 \n", "YES\n3 1 2 \n", "NO\n", "YES\n1 \n", "YES\n1 2 3 \n", "YES\n2 3 1 \n", "YES\n2 5 3 1 4 \n", "YES\n2 1 \n"]}, "generated_tests": {"input": ["3\n3 1\n1 0\n0 2\n", "5\n0 1\n1 2\n2 1\n3 0\n2 0\n", "3\n3 2\n1 0\n0 2\n", "3\n0 0\n1 0\n2 0\n", "2\n2 0\n0 1\n", "3\n2 0\n0 2\n1 0\n", "5\n0 1\n1 3\n2 0\n3 0\n2 0\n", "5\n0 1\n1 2\n2 0\n3 0\n2 0\n", "5\n0 1\n1 1\n2 0\n2 0\n2 0\n", "3\n0 1\n1 0\n1 0\n", "3\n3 2\n1 0\n0 4\n", "3\n2 2\n0 0\n1 1\n", "3\n3 1\n1 1\n0 2\n", "3\n0 1\n1 0\n1 1\n", "3\n3 2\n1 1\n0 4\n", "3\n2 0\n0 0\n1 1\n", "3\n0 1\n1 0\n2 1\n", "3\n2 0\n0 1\n1 1\n", "3\n2 1\n0 1\n1 1\n", "3\n2 1\n0 2\n1 1\n", "3\n2 1\n0 4\n1 1\n", "3\n2 0\n0 4\n1 1\n", "3\n2 0\n0 8\n1 1\n", "3\n2 1\n0 0\n2 1\n", "2\n2 1\n0 0\n", "5\n0 1\n1 4\n2 1\n3 0\n2 0\n", "3\n3 0\n1 0\n0 2\n", "3\n0 1\n1 0\n2 0\n", "3\n3 0\n1 1\n0 2\n", "3\n0 1\n1 0\n1 2\n", "3\n2 0\n0 -1\n1 1\n", "3\n2 0\n0 1\n1 0\n", "3\n2 1\n0 1\n2 1\n", "5\n0 2\n1 4\n2 1\n3 0\n2 0\n", "5\n0 1\n1 3\n2 0\n2 0\n2 0\n", "3\n3 0\n1 2\n0 2\n", "3\n0 1\n1 0\n1 3\n", "3\n2 0\n0 -1\n2 1\n", "3\n2 1\n0 1\n2 2\n", "5\n0 2\n1 4\n2 2\n3 0\n2 0\n", "5\n0 1\n1 3\n2 0\n1 0\n2 0\n", "3\n3 0\n1 2\n0 3\n", "3\n3 0\n1 0\n0 1\n", "3\n0 0\n3 0\n1 0\n", "5\n0 1\n1 3\n2 1\n5 0\n2 0\n", "3\n2 1\n0 2\n2 0\n", "3\n3 2\n1 0\n0 3\n", "3\n3 2\n1 0\n0 5\n", "3\n3 2\n1 1\n0 8\n", "3\n0 1\n1 1\n2 1\n", "3\n2 0\n0 2\n1 1\n", "3\n2 0\n0 12\n1 1\n", "3\n2 1\n0 0\n2 0\n", "3\n0 1\n1 0\n2 2\n"], "output": ["YES\n2 1 3 ", "YES\n2 4 3 1 5 ", "NO\n", "YES\n1 2 3 ", "YES\n1 2 ", "YES\n1 3 2 ", "YES\n2 5 1 3 4 ", "YES\n2 4 1 3 5 ", "YES\n2 3 1 4 5 ", "YES\n2 1 3 ", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 2 3 ", "YES\n2 1 3 ", "NO\n", "NO\n", "NO\n", "YES\n1 2 3 ", "NO\n", "NO\n", "YES\n2 5 1 3 4 ", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 3 2 ", "YES\n1 3 2 ", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary:\nReconstruct a permutation of tree nodes so that each node\u2019s assigned label position within its subtree list matches a given count, or determine it\u2019s impossible.\n\n2. Core algorithmic approach:\nA depth-first traversal that gathers ordered descendant lists bottom-up and inserts the current node at the specified index\u2014effectively a greedy order-statistic insertion on each subtree.\n\n3. Reusable components:\n- Building an adjacency list from parent pointers for rooted-tree DFS.\n- A recursive DFS function that returns a list of nodes in \u201clabel order\u201d and checks feasibility by comparing list length to the required insertion position.\n- In-place list insertion at a given rank as a means of satisfying \u201ck smaller elements before me\u201d constraints."}
{"name": "1143_C. Queen", "description": "You are given a rooted tree with vertices numerated from 1 to n. A tree is a connected graph without cycles. A rooted tree has a special vertex named root.\n\nAncestors of the vertex i are all vertices on the path from the root to the vertex i, except the vertex i itself. The parent of the vertex i is the nearest to the vertex i ancestor of i. Each vertex is a child of its parent. In the given tree the parent of the vertex i is the vertex p_i. For the root, the value p_i is -1.\n\n<image> An example of a tree with n=8, the root is vertex 5. The parent of the vertex 2 is vertex 3, the parent of the vertex 1 is vertex 5. The ancestors of the vertex 6 are vertices 4 and 5, the ancestors of the vertex 7 are vertices 8, 3 and 5\n\nYou noticed that some vertices do not respect others. In particular, if c_i = 1, then the vertex i does not respect any of its ancestors, and if c_i = 0, it respects all of them.\n\nYou decided to delete vertices from the tree one by one. On each step you select such a non-root vertex that it does not respect its parent and none of its children respects it. If there are several such vertices, you select the one with the smallest number. When you delete this vertex v, all children of v become connected with the parent of v.\n\n<image> An example of deletion of the vertex 7.\n\nOnce there are no vertices matching the criteria for deletion, you stop the process. Print the order in which you will delete the vertices. Note that this order is unique.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of vertices in the tree.\n\nThe next n lines describe the tree: the i-th line contains two integers p_i and c_i (1 \u2264 p_i \u2264 n, 0 \u2264 c_i \u2264 1), where p_i is the parent of the vertex i, and c_i = 0, if the vertex i respects its parents, and c_i = 1, if the vertex i does not respect any of its parents. The root of the tree has -1 instead of the parent index, also, c_i=0 for the root. It is guaranteed that the values p_i define a rooted tree with n vertices.\n\nOutput\n\nIn case there is at least one vertex to delete, print the only line containing the indices of the vertices you will delete in the order you delete them. Otherwise print a single integer -1.\n\nExamples\n\nInput\n\n\n5\n3 1\n1 1\n-1 0\n2 1\n3 0\n\n\nOutput\n\n\n1 2 4 \n\n\nInput\n\n\n5\n-1 0\n1 1\n1 1\n2 0\n3 0\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n8\n2 1\n-1 0\n1 0\n1 1\n1 1\n4 0\n5 1\n7 0\n\n\nOutput\n\n\n5 \n\nNote\n\nThe deletion process in the first example is as follows (see the picture below, the vertices with c_i=1 are in yellow):\n\n  * first you will delete the vertex 1, because it does not respect ancestors and all its children (the vertex 2) do not respect it, and 1 is the smallest index among such vertices; \n  * the vertex 2 will be connected with the vertex 3 after deletion; \n  * then you will delete the vertex 2, because it does not respect ancestors and all its children (the only vertex 4) do not respect it; \n  * the vertex 4 will be connected with the vertex 3; \n  * then you will delete the vertex 4, because it does not respect ancestors and all its children (there are none) do not respect it ([vacuous truth](https://en.wikipedia.org/wiki/Vacuous_truth)); \n  * you will just delete the vertex 4; \n  * there are no more vertices to delete. \n\n<image>\n\nIn the second example you don't need to delete any vertex:\n\n  * vertices 2 and 3 have children that respect them; \n  * vertices 4 and 5 respect ancestors. \n\n<image>\n\nIn the third example the tree will change this way:\n\n<image>", "solution": "\"\"\"\nhttps://codeforces.com/problemset/problem/1143/C\n\"\"\"\n\nn = int(input())\n\nrespect = [0 for _ in range(n)]\nchild_respect = [0 for _ in range(n)]\n\nroot = -1\n\nfor i in range(n):\n    p, c = map(int,input().split())\n    if p == -1:\n        root = i\n        continue\n    respect[i] = c\n    if p != -1 and not c: child_respect[p-1]=1\n\nres = []\nfor i in range(n):\n    if i == root:\n        continue\n    if respect[i] and not child_respect[i]:\n        res.append(i+1)\n\nif res:\n    print(*res)\nelse:\n    print(-1)", "difficulty": 9, "public_tests": {"input": ["5\n3 1\n1 1\n-1 0\n2 1\n3 0\n", "8\n2 1\n-1 0\n1 0\n1 1\n1 1\n4 0\n5 1\n7 0\n", "5\n-1 0\n1 1\n1 1\n2 0\n3 0\n"], "output": ["1 2 4\n", "5\n", "-1\n"]}, "private_tests": {"input": ["1\n-1 0\n"], "output": ["-1\n"]}, "generated_tests": {"input": ["5\n-1 0\n1 0\n1 1\n2 0\n3 0\n", "8\n2 1\n-1 0\n1 1\n1 1\n1 1\n4 0\n5 1\n7 0\n", "8\n2 1\n-1 0\n1 0\n1 1\n2 1\n4 0\n5 1\n7 0\n", "5\n3 1\n1 1\n-1 0\n2 1\n3 1\n", "5\n-1 0\n1 1\n1 1\n2 0\n2 0\n", "8\n2 1\n-1 0\n1 0\n1 1\n2 1\n4 0\n5 1\n7 1\n", "5\n3 0\n1 1\n-1 0\n2 1\n3 1\n", "5\n3 1\n1 1\n-1 0\n3 1\n3 0\n", "5\n3 1\n1 1\n-1 0\n2 0\n3 1\n", "5\n-1 0\n1 1\n1 0\n2 1\n3 0\n", "8\n2 1\n-1 0\n1 1\n1 1\n1 1\n4 0\n5 1\n7 1\n", "5\n-1 0\n1 1\n4 1\n2 1\n1 0\n", "5\n-1 0\n1 1\n2 1\n1 0\n4 0\n", "5\n3 1\n1 0\n-1 0\n2 1\n3 1\n", "5\n-1 0\n1 1\n1 1\n3 1\n2 0\n", "5\n-1 0\n1 1\n1 1\n3 0\n4 0\n", "5\n3 1\n1 1\n-1 0\n1 0\n3 1\n", "5\n-1 0\n1 0\n1 0\n2 1\n3 0\n", "5\n3 1\n1 1\n-1 0\n3 0\n3 0\n", "8\n2 0\n-1 0\n1 1\n1 1\n1 1\n4 0\n2 1\n7 0\n", "5\n3 1\n1 1\n-1 0\n2 0\n3 0\n", "5\n-1 0\n1 1\n2 1\n2 0\n2 0\n", "5\n-1 0\n1 0\n1 1\n3 0\n3 0\n", "5\n-1 0\n1 1\n1 1\n2 0\n1 0\n", "5\n-1 0\n1 1\n2 1\n3 0\n2 0\n", "5\n-1 0\n1 0\n2 1\n3 0\n3 0\n", "5\n3 0\n1 1\n-1 0\n3 1\n3 1\n", "5\n-1 0\n1 1\n1 1\n3 0\n2 0\n", "5\n-1 0\n1 1\n1 0\n2 0\n3 0\n", "5\n-1 0\n1 1\n1 0\n2 0\n2 0\n", "5\n-1 0\n1 1\n2 1\n2 0\n1 0\n", "5\n-1 0\n1 1\n1 0\n2 0\n2 1\n", "5\n-1 0\n1 1\n1 0\n2 1\n2 1\n", "5\n3 0\n1 1\n-1 0\n2 1\n3 0\n", "8\n2 1\n-1 0\n1 0\n1 1\n1 1\n4 0\n6 1\n7 0\n", "5\n-1 0\n1 1\n2 1\n2 0\n3 0\n", "5\n-1 0\n1 1\n2 1\n5 0\n2 0\n", "5\n3 0\n1 1\n-1 0\n2 0\n3 1\n", "5\n-1 0\n1 0\n1 0\n2 0\n2 0\n", "5\n-1 0\n1 1\n4 1\n2 0\n1 0\n", "8\n2 1\n-1 0\n1 0\n1 1\n1 1\n4 0\n2 1\n7 0\n", "5\n-1 0\n1 1\n2 1\n2 0\n4 0\n", "5\n-1 0\n1 0\n2 1\n3 0\n2 0\n", "5\n3 1\n1 1\n-1 0\n3 1\n3 1\n", "5\n-1 0\n1 1\n1 1\n2 0\n4 0\n", "5\n-1 0\n1 1\n2 0\n2 1\n2 1\n", "5\n-1 0\n1 1\n2 0\n5 0\n2 0\n", "5\n-1 0\n1 1\n4 1\n2 0\n2 0\n", "8\n2 0\n-1 0\n1 0\n1 1\n1 1\n4 0\n2 1\n7 0\n", "5\n-1 0\n1 1\n2 1\n1 0\n2 0\n", "5\n-1 0\n1 1\n2 1\n3 1\n2 0\n", "5\n3 1\n1 1\n-1 0\n1 1\n3 1\n", "5\n-1 0\n1 0\n1 0\n2 1\n1 0\n", "5\n-1 0\n1 1\n2 0\n1 0\n2 0\n", "5\n-1 0\n1 0\n2 0\n2 1\n1 0\n", "8\n2 1\n-1 0\n1 0\n1 1\n1 1\n4 0\n1 1\n7 0\n", "5\n-1 0\n1 1\n1 1\n3 0\n3 0\n", "5\n-1 0\n1 0\n1 1\n2 1\n3 0\n", "5\n-1 0\n1 0\n1 1\n3 0\n2 0\n", "5\n-1 0\n1 1\n1 0\n1 0\n2 1\n", "5\n3 0\n1 1\n-1 0\n2 1\n1 0\n", "5\n-1 0\n1 0\n2 1\n2 0\n3 0\n", "5\n3 0\n1 0\n-1 0\n2 0\n3 1\n", "5\n-1 0\n1 1\n1 1\n2 1\n2 0\n", "5\n3 1\n1 1\n-1 0\n1 0\n2 1\n", "5\n-1 0\n1 1\n2 0\n3 1\n2 1\n", "5\n-1 0\n1 0\n1 0\n2 1\n1 1\n", "5\n-1 0\n1 1\n2 0\n2 1\n1 0\n", "5\n3 1\n1 1\n-1 0\n2 1\n1 0\n", "5\n-1 0\n1 1\n2 0\n3 1\n2 0\n", "5\n-1 0\n1 1\n1 0\n2 1\n1 0\n", "5\n-1 0\n1 1\n1 0\n2 1\n1 1\n", "5\n-1 0\n1 1\n1 0\n2 1\n2 0\n", "5\n-1 0\n1 0\n1 1\n3 0\n1 0\n", "5\n-1 0\n1 0\n2 1\n3 0\n1 0\n", "5\n3 0\n1 1\n-1 0\n3 1\n3 0\n", "5\n-1 0\n1 1\n1 0\n2 1\n4 0\n", "5\n-1 0\n1 1\n4 1\n2 0\n1 1\n", "5\n-1 0\n1 1\n2 0\n2 0\n4 0\n", "5\n3 0\n1 0\n-1 0\n2 1\n3 1\n", "5\n-1 0\n1 0\n2 1\n1 0\n2 0\n"], "output": ["-1\n", "1 3 5\n", "5\n", "1 2 4 5\n", "3\n", "5 7 8\n", "2 4 5\n", "1 2 4\n", "1 5\n", "2 4\n", "1 3 5 7 8\n", "2 3 4\n", "2 3\n", "4 5\n", "3 4\n", "2\n", "2 5\n", "4\n", "1 2\n", "3 5\n", "1\n", "3\n", "-1\n", "3\n", "-1\n", "-1\n", "2 4 5\n", "-1\n", "-1\n", "-1\n", "3\n", "5\n", "2 4 5\n", "2 4\n", "5\n", "-1\n", "3\n", "5\n", "-1\n", "3\n", "5\n", "3\n", "-1\n", "1 2 4 5\n", "3\n", "4 5\n", "-1\n", "3\n", "5\n", "3\n", "3 4\n", "1 2 4 5\n", "4\n", "-1\n", "4\n", "5\n", "2\n", "4\n", "-1\n", "2 5\n", "2 4\n", "-1\n", "5\n", "3 4\n", "2 5\n", "4 5\n", "4 5\n", "4\n", "2 4\n", "4\n", "2 4\n", "2 4 5\n", "4\n", "-1\n", "-1\n", "2 4\n", "2\n", "3 5\n", "-1\n", "4 5\n", "3\n"]}, "short_description": "1. One-sentence summary:  \nGiven a rooted tree where each node has a binary label, identify all non-root nodes whose label is 1 and none of whose children have label 0.\n\n2. Core algorithmic approach:  \nA two-pass linear scan over parent-pointer data\u2014first pass to record each node\u2019s label and mark which parents have a child labeled 0, second pass to collect nodes labeled 1 that were never marked as having a zero-labeled child.\n\n3. Reusable components:  \n- Parent-pointer array with label storage for quick parent/child relations.  \n- Child-flag propagation array to record whether any child violates a condition.  \n- Two-phase scan pattern: collect metadata in one pass, filter results in a second pass."}
{"name": "839_C. Journey", "description": "There are n cities and n - 1 roads in the Seven Kingdoms, each road connects two cities and we can reach any city from any other by the roads.\n\nTheon and Yara Greyjoy are on a horse in the first city, they are starting traveling through the roads. But the weather is foggy, so they can\u2019t see where the horse brings them. When the horse reaches a city (including the first one), it goes to one of the cities connected to the current city. But it is a strange horse, it only goes to cities in which they weren't before. In each such city, the horse goes with equal probabilities and it stops when there are no such cities. \n\nLet the length of each road be 1. The journey starts in the city 1. What is the expected length (expected value of length) of their journey? You can read about expected (average) value by the link <https://en.wikipedia.org/wiki/Expected_value>.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100000) \u2014 number of cities.\n\nThen n - 1 lines follow. The i-th line of these lines contains two integers ui and vi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi) \u2014 the cities connected by the i-th road.\n\nIt is guaranteed that one can reach any city from any other by the roads.\n\nOutput\n\nPrint a number \u2014 the expected length of their journey. The journey starts in the city 1.\n\nYour answer will be considered correct if its absolute or relative error does not exceed 10 - 6.\n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if <image>.\n\nExamples\n\nInput\n\n4\n1 2\n1 3\n2 4\n\n\nOutput\n\n1.500000000000000\n\n\nInput\n\n5\n1 2\n1 3\n3 4\n2 5\n\n\nOutput\n\n2.000000000000000\n\nNote\n\nIn the first sample, their journey may end in cities 3 or 4 with equal probability. The distance to city 3 is 1 and to city 4 is 2, so the expected length is 1.5.\n\nIn the second sample, their journey may end in city 4 or 5. The distance to the both cities is 2, so the expected length is 2.", "solution": "from queue import *\n\nn = int(input())\ng = [[] for x in range(n)]\n\nfor i in range(n-1):\n  a, b = map(int, input().split())\n  a -= 1\n  b -= 1\n  g[a].append(b)\n  g[b].append(a)\n\nused = [0]*n\n\nanw = 0\n\ndef solve(v, d, r):\n  global anw\n  q = Queue()\n  q.put((v, d, r))\n  while not q.empty():\n    v, d, r = q.get(v)\n    used[v] = True\n    for u in g[v]:\n      if not used[u]:\n        q.put((u, d+1, r*(len(g[v])-(v!=0))))\n        #print(\"put\", u)\n    #print(\"so at\", v, \"len\", len(g[v]))\n    if v != 0 and len(g[v]) == 1:\n      #print(\"At \", v, \"is\", d, r)\n      anw += d/r\n  \nsolve(0, 0, 1)\nprint(anw)", "difficulty": 9, "public_tests": {"input": ["5\n1 2\n1 3\n3 4\n2 5\n", "4\n1 2\n1 3\n2 4\n"], "output": ["2.000000\n", "1.500000\n"]}, "private_tests": {"input": ["1\n", "10\n8 6\n9 10\n8 7\n1 4\n1 8\n9 5\n9 8\n2 5\n3 1\n", "70\n1 25\n57 1\n18 1\n65 1\n38 1\n1 41\n1 5\n1 69\n1 3\n31 1\n1 8\n1 9\n53 1\n70 1\n45 1\n1 24\n1 42\n1 30\n1 12\n1 37\n64 1\n1 28\n1 58\n1 22\n11 1\n1 4\n1 27\n1 16\n1 21\n54 1\n1 51\n1 43\n29 1\n56 1\n1 39\n32 1\n1 15\n1 17\n1 19\n1 40\n36 1\n48 1\n63 1\n1 7\n1 47\n1 13\n1 46\n60 1\n1 6\n23 1\n20 1\n1 52\n2 1\n26 1\n1 59\n1 66\n10 1\n1 62\n1 68\n1 55\n50 1\n33 1\n44 1\n1 34\n1 35\n1 61\n14 1\n67 1\n49 1\n"], "output": ["0.000000\n", "1.500000\n", "1.000000\n"]}, "generated_tests": {"input": ["10\n8 6\n9 10\n8 7\n1 4\n1 8\n9 5\n9 8\n2 9\n3 1\n", "10\n8 6\n5 10\n8 7\n1 4\n1 8\n9 5\n9 8\n2 5\n3 1\n", "5\n1 2\n1 3\n3 4\n1 5\n", "5\n1 2\n1 3\n1 4\n1 5\n", "5\n1 2\n2 3\n3 4\n2 5\n", "10\n8 6\n4 10\n8 7\n1 4\n1 8\n9 5\n2 8\n2 5\n3 1\n", "5\n1 2\n1 3\n2 4\n2 5\n", "10\n8 6\n4 10\n8 7\n1 4\n1 8\n9 5\n2 7\n2 5\n3 1\n", "5\n1 2\n1 3\n2 4\n3 5\n", "10\n8 6\n4 10\n8 7\n1 4\n1 8\n9 5\n2 7\n4 5\n3 1\n", "10\n8 6\n9 10\n8 7\n1 4\n1 8\n9 5\n9 7\n2 5\n3 1\n", "70\n1 25\n57 1\n18 1\n65 1\n38 1\n1 41\n1 5\n1 69\n1 3\n31 1\n1 8\n1 9\n53 1\n70 1\n45 1\n1 24\n1 42\n1 30\n1 12\n1 37\n64 1\n1 28\n1 58\n1 22\n11 1\n1 4\n1 27\n1 16\n1 21\n54 1\n1 51\n1 43\n29 1\n56 1\n1 39\n32 2\n1 15\n1 17\n1 19\n1 40\n36 1\n48 1\n63 1\n1 7\n1 47\n1 13\n1 46\n60 1\n1 6\n23 1\n20 1\n1 52\n2 1\n26 1\n1 59\n1 66\n10 1\n1 62\n1 68\n1 55\n50 1\n33 1\n44 1\n1 34\n1 35\n1 61\n14 1\n67 1\n49 1\n", "10\n8 6\n5 10\n8 7\n1 4\n1 8\n1 5\n9 8\n2 5\n3 1\n", "10\n8 6\n5 10\n8 7\n1 4\n1 8\n9 5\n2 8\n2 9\n3 1\n", "10\n8 6\n4 10\n8 7\n1 4\n1 8\n9 5\n2 8\n2 5\n3 2\n", "10\n8 6\n4 10\n8 7\n1 4\n1 8\n9 3\n2 7\n2 5\n3 1\n", "10\n8 6\n8 10\n8 7\n1 4\n1 8\n9 5\n2 7\n4 5\n3 1\n", "10\n8 6\n7 10\n8 7\n1 4\n1 8\n9 5\n9 7\n2 5\n3 1\n", "10\n8 6\n5 10\n5 7\n1 4\n1 8\n9 5\n2 8\n2 5\n3 1\n", "10\n8 6\n4 10\n8 7\n1 4\n1 8\n9 7\n2 7\n2 5\n3 1\n", "10\n8 6\n4 10\n4 7\n1 4\n1 8\n9 5\n2 8\n2 5\n3 2\n", "10\n8 6\n5 10\n9 7\n1 4\n1 8\n9 5\n2 8\n2 5\n3 1\n", "10\n8 6\n4 10\n8 7\n1 4\n1 8\n9 7\n2 7\n1 5\n3 1\n", "4\n2 3\n1 3\n2 4\n", "10\n8 6\n4 10\n3 7\n1 4\n1 8\n9 5\n2 8\n2 5\n3 1\n", "10\n8 6\n5 10\n8 7\n1 4\n1 8\n1 5\n9 8\n2 5\n3 2\n", "10\n5 6\n5 10\n8 7\n1 4\n1 8\n9 5\n2 8\n2 9\n3 1\n", "10\n8 6\n4 10\n4 7\n1 4\n1 8\n9 1\n2 8\n2 5\n3 2\n", "10\n1 6\n5 10\n9 7\n1 4\n1 8\n9 5\n2 8\n2 5\n3 1\n", "10\n8 6\n8 10\n4 7\n1 4\n1 8\n9 5\n2 10\n8 5\n3 1\n", "10\n4 6\n8 10\n4 7\n1 4\n1 8\n9 5\n2 8\n4 5\n3 1\n", "10\n4 6\n1 10\n4 7\n1 4\n1 8\n9 5\n2 8\n4 5\n3 1\n", "10\n8 6\n1 10\n8 7\n1 4\n1 8\n9 5\n9 8\n2 5\n3 1\n", "70\n1 25\n57 1\n18 1\n65 1\n38 1\n1 41\n1 5\n1 69\n1 3\n31 1\n1 8\n1 9\n53 1\n70 1\n45 1\n1 24\n1 42\n1 30\n1 12\n1 37\n64 1\n1 28\n1 58\n1 22\n11 1\n1 4\n1 27\n1 16\n1 21\n54 1\n1 51\n1 43\n29 1\n56 1\n1 39\n32 2\n1 15\n1 17\n1 19\n1 40\n36 1\n48 1\n63 1\n1 7\n1 47\n1 13\n1 46\n60 1\n1 6\n23 1\n20 1\n1 52\n2 1\n26 1\n1 59\n1 66\n10 1\n1 62\n1 68\n1 55\n50 1\n33 2\n44 1\n1 34\n1 35\n1 61\n14 1\n67 1\n49 1\n", "10\n8 6\n4 10\n8 7\n2 4\n1 8\n9 7\n2 7\n2 5\n3 1\n", "10\n8 6\n4 10\n8 10\n2 4\n1 8\n9 5\n9 7\n2 5\n3 1\n", "10\n1 6\n5 10\n1 7\n1 4\n1 8\n9 5\n2 8\n2 5\n3 1\n", "10\n8 6\n5 10\n8 7\n1 4\n1 8\n9 5\n2 8\n2 5\n3 1\n", "10\n8 6\n4 10\n8 9\n1 4\n1 8\n9 5\n2 7\n2 5\n3 1\n", "5\n1 2\n2 3\n1 4\n1 5\n", "5\n1 2\n2 3\n2 4\n2 5\n", "5\n1 2\n2 3\n2 4\n1 5\n", "10\n8 6\n4 10\n8 9\n1 4\n1 8\n9 5\n4 7\n2 5\n3 1\n", "5\n1 2\n2 3\n2 4\n4 5\n", "10\n8 6\n4 10\n8 9\n1 4\n1 8\n6 5\n2 7\n2 5\n3 1\n", "10\n8 6\n5 10\n8 7\n1 4\n1 8\n9 3\n2 7\n2 5\n3 1\n", "10\n8 6\n8 10\n6 7\n1 4\n1 8\n9 5\n2 7\n4 5\n3 1\n", "70\n1 25\n57 1\n18 1\n65 1\n38 1\n1 41\n1 5\n1 69\n1 3\n31 1\n1 8\n1 9\n53 1\n70 2\n45 1\n1 24\n1 42\n1 30\n1 12\n1 37\n64 1\n1 28\n1 58\n1 22\n11 1\n1 4\n1 27\n1 16\n1 21\n54 1\n1 51\n1 43\n29 1\n56 1\n1 39\n32 1\n1 15\n1 17\n1 19\n1 40\n36 1\n48 1\n63 1\n1 7\n1 47\n1 13\n1 46\n60 1\n1 6\n23 1\n20 1\n1 52\n2 1\n26 1\n1 59\n1 66\n10 1\n1 62\n1 68\n1 55\n50 1\n33 1\n44 1\n1 34\n1 35\n1 61\n14 1\n67 1\n49 1\n", "10\n8 6\n4 10\n8 9\n1 4\n1 8\n9 5\n2 7\n2 6\n3 1\n", "10\n8 6\n9 10\n8 7\n2 4\n1 8\n9 5\n9 7\n2 5\n3 1\n", "10\n8 6\n4 10\n8 9\n1 4\n1 8\n6 5\n2 7\n2 6\n3 1\n", "10\n8 6\n8 10\n8 7\n1 4\n1 8\n9 5\n2 10\n4 5\n3 1\n", "10\n4 6\n8 10\n6 7\n1 4\n1 8\n9 5\n2 7\n4 5\n3 1\n", "10\n8 6\n8 10\n4 7\n1 4\n1 8\n9 5\n2 10\n4 5\n3 1\n", "10\n4 6\n8 10\n6 7\n1 4\n1 8\n9 5\n2 8\n4 5\n3 1\n", "70\n1 25\n57 1\n18 1\n65 1\n38 1\n1 41\n1 5\n1 69\n1 3\n31 1\n1 8\n1 9\n53 1\n70 1\n45 1\n1 24\n1 42\n1 30\n1 12\n1 37\n64 1\n1 28\n2 58\n1 22\n11 1\n1 4\n1 27\n1 16\n1 21\n54 1\n1 51\n1 43\n29 1\n56 1\n1 39\n32 1\n1 15\n1 17\n1 19\n1 40\n36 1\n48 1\n63 1\n1 7\n1 47\n1 13\n1 46\n60 1\n1 6\n23 1\n20 1\n1 52\n2 1\n26 1\n1 59\n1 66\n10 1\n1 62\n1 68\n1 55\n50 1\n33 1\n44 1\n1 34\n1 35\n1 61\n14 1\n67 1\n49 1\n", "5\n1 4\n1 3\n2 4\n2 5\n", "10\n8 6\n4 10\n8 9\n1 4\n1 8\n9 5\n6 7\n2 5\n3 1\n", "10\n8 6\n9 10\n8 7\n1 4\n1 8\n9 5\n9 7\n2 5\n3 2\n", "10\n8 6\n4 10\n8 7\n1 4\n1 8\n9 5\n2 1\n2 5\n3 2\n", "10\n8 6\n4 10\n3 7\n1 4\n1 8\n9 3\n2 7\n2 5\n3 1\n", "10\n8 6\n5 10\n8 7\n1 4\n1 8\n9 3\n2 7\n2 5\n3 2\n", "10\n8 6\n5 10\n5 7\n1 4\n1 8\n9 3\n2 8\n2 5\n3 1\n", "10\n8 6\n9 10\n8 10\n2 4\n1 8\n9 5\n9 7\n2 5\n3 1\n", "10\n8 5\n4 10\n8 9\n1 4\n1 8\n6 5\n2 7\n2 6\n3 1\n", "10\n4 6\n8 10\n6 7\n1 4\n1 8\n9 8\n2 7\n4 5\n3 1\n", "5\n1 4\n1 3\n2 4\n1 5\n", "10\n8 6\n5 10\n8 7\n1 4\n1 8\n1 5\n9 8\n2 6\n3 2\n", "10\n8 6\n9 10\n8 10\n2 4\n1 8\n9 5\n9 7\n2 1\n3 1\n", "10\n8 6\n4 10\n4 7\n1 4\n1 8\n9 2\n2 8\n2 5\n3 2\n", "10\n8 5\n4 10\n8 9\n1 4\n1 8\n6 5\n2 7\n2 4\n3 1\n", "10\n2 6\n8 10\n4 7\n1 4\n1 8\n9 5\n2 10\n8 5\n3 1\n", "5\n1 4\n2 3\n2 4\n1 5\n", "10\n8 6\n9 10\n8 10\n2 4\n1 8\n8 5\n9 7\n2 1\n3 1\n", "10\n8 6\n4 10\n4 7\n1 4\n1 8\n9 2\n2 7\n2 5\n3 2\n", "10\n8 6\n9 10\n8 10\n2 4\n2 8\n8 5\n9 7\n2 1\n3 1\n", "10\n8 6\n4 10\n4 7\n1 4\n1 8\n9 2\n2 10\n2 5\n3 2\n", "5\n1 2\n1 4\n3 4\n2 5\n", "10\n8 6\n5 10\n8 7\n2 4\n1 8\n9 5\n2 8\n2 5\n3 1\n", "10\n8 6\n4 10\n1 7\n1 4\n1 8\n9 5\n2 8\n2 5\n3 1\n", "10\n8 6\n1 10\n8 7\n1 4\n1 8\n9 3\n2 7\n2 5\n3 1\n", "5\n1 2\n1 3\n2 4\n4 5\n", "10\n8 6\n8 10\n8 7\n2 4\n1 8\n9 5\n2 7\n4 5\n3 1\n", "10\n8 6\n5 10\n8 7\n1 4\n1 8\n9 3\n2 8\n2 5\n3 1\n", "10\n8 6\n4 10\n5 9\n1 4\n1 8\n6 5\n2 7\n2 6\n3 1\n", "10\n8 6\n4 10\n3 7\n1 4\n1 8\n9 3\n2 8\n2 5\n3 1\n", "10\n8 6\n5 10\n9 7\n1 4\n1 8\n9 3\n2 8\n2 5\n3 1\n", "10\n8 6\n8 10\n4 7\n1 4\n1 8\n9 5\n2 9\n8 5\n3 1\n", "10\n4 6\n8 10\n4 7\n1 4\n1 8\n9 5\n2 9\n4 5\n3 1\n"], "output": ["1.4444444444444446\n", "1.5555555555555558\n", "1.3333333333333333\n", "1.0\n", "2.5\n", "1.888888888888889\n", "1.5\n", "2.1666666666666665\n", "2.0\n", "1.9999999999999998\n", "1.7499999999999998\n", "1.0147058823529393\n", "1.5000000000000002\n", "1.6666666666666667\n", "2.25\n", "2.3333333333333335\n", "2.111111111111111\n", "1.6666666666666665\n", "1.666666666666667\n", "1.9166666666666665\n", "2.375\n", "1.75\n", "1.625\n", "3.0\n", "2.333333333333333\n", "1.8333333333333335\n", "1.833333333333333\n", "1.8333333333333333\n", "1.875\n", "1.8888888888888888\n", "1.7777777777777775\n", "1.5833333333333333\n", "1.4166666666666665\n", "1.0149253731343295\n", "1.9375\n", "2.75\n", "1.5999999999999999\n", "1.5555555555555558\n", "2.1666666666666665\n", "1.3333333333333333\n", "2.0\n", "1.5\n", "2.0\n", "2.5\n", "2.1666666666666665\n", "2.1666666666666665\n", "2.3333333333333335\n", "1.0147058823529393\n", "2.1666666666666665\n", "2.25\n", "1.9166666666666665\n", "2.111111111111111\n", "2.1666666666666665\n", "1.9999999999999998\n", "1.9999999999999998\n", "1.0147058823529393\n", "2.0\n", "2.1666666666666665\n", "2.25\n", "2.1666666666666665\n", "2.333333333333333\n", "2.25\n", "1.9999999999999998\n", "2.25\n", "2.1666666666666665\n", "1.9999999999999998\n", "1.3333333333333333\n", "1.8888888888888888\n", "1.9999999999999998\n", "2.25\n", "1.9999999999999998\n", "2.1666666666666665\n", "2.0\n", "1.888888888888889\n", "2.5\n", "1.9166666666666665\n", "2.5\n", "2.0\n", "1.75\n", "1.75\n", "1.75\n", "2.0\n", "2.1666666666666665\n", "1.888888888888889\n", "2.333333333333333\n", "2.1666666666666665\n", "2.333333333333333\n", "1.8888888888888888\n", "1.8888888888888888\n"]}, "short_description": "1. One-sentence summary:  \nCompute a cumulative metric over all root-to-leaf paths in a tree by traversing the graph and aggregating contributions based on path length and branching factors.\n\n2. Core algorithmic approach:  \nBreadth\u2010First Search (BFS) on an undirected tree, carrying along depth and a running product accumulator.\n\n3. Reusable components:  \n- Adjacency\u2010list representation of an undirected graph (tree) for efficient neighbor iteration.  \n- BFS traversal with an explicit queue that carries extra state per node (e.g., depth, product of branching factors).  \n- Leaf\u2010detection pattern (node degree == 1 and not the root) combined with on\u2010the\u2010fly aggregation of results."}
{"name": "902_B. Coloring a Tree", "description": "You are given a rooted tree with n vertices. The vertices are numbered from 1 to n, the root is the vertex number 1.\n\nEach vertex has a color, let's denote the color of vertex v by cv. Initially cv = 0.\n\nYou have to color the tree into the given colors using the smallest possible number of steps. On each step you can choose a vertex v and a color x, and then color all vectices in the subtree of v (including v itself) in color x. In other words, for every vertex u, such that the path from root to u passes through v, set cu = x.\n\nIt is guaranteed that you have to color each vertex in a color different from 0.\n\nYou can learn what a rooted tree is using the link: https://en.wikipedia.org/wiki/Tree_(graph_theory).\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 104) \u2014 the number of vertices in the tree.\n\nThe second line contains n - 1 integers p2, p3, ..., pn (1 \u2264 pi < i), where pi means that there is an edge between vertices i and pi.\n\nThe third line contains n integers c1, c2, ..., cn (1 \u2264 ci \u2264 n), where ci is the color you should color the i-th vertex into.\n\nIt is guaranteed that the given graph is a tree. \n\nOutput\n\nPrint a single integer \u2014 the minimum number of steps you have to perform to color the tree into given colors.\n\nExamples\n\nInput\n\n6\n1 2 2 1 5\n2 1 1 1 1 1\n\n\nOutput\n\n3\n\n\nInput\n\n7\n1 1 2 3 1 4\n3 3 1 1 1 2 3\n\n\nOutput\n\n5\n\nNote\n\nThe tree from the first sample is shown on the picture (numbers are vetices' indices):\n\n<image>\n\nOn first step we color all vertices in the subtree of vertex 1 into color 2 (numbers are colors):\n\n<image>\n\nOn seond step we color all vertices in the subtree of vertex 5 into color 1:\n\n<image>\n\nOn third step we color all vertices in the subtree of vertex 2 into color 1:\n\n<image>\n\nThe tree from the second sample is shown on the picture (numbers are vetices' indices):\n\n<image>\n\nOn first step we color all vertices in the subtree of vertex 1 into color 3 (numbers are colors):\n\n<image>\n\nOn second step we color all vertices in the subtree of vertex 3 into color 1:\n\n<image>\n\nOn third step we color all vertices in the subtree of vertex 6 into color 2:\n\n<image>\n\nOn fourth step we color all vertices in the subtree of vertex 4 into color 1:\n\n<image>\n\nOn fith step we color all vertices in the subtree of vertex 7 into color 3:\n\n<image>", "solution": "from queue import *\n\nn=int(input())\nparent={}\nchild={}\nfor i in range(1,n+1):\n    parent[i]=0\n    child[i]=[]\nl=list(map(int,input().split()))\nfor i in range(2,n+1):\n    parent[i]=l[i-2]\n    child[l[i-2]].append(i)\nl=list(map(int,input().split()))\ncolor={}\nfor i in range(1,n+1):\n    color[i]=l[i-1]\n    \nq=Queue()\nq.put(1)\nans=0\nwhile(not(q.empty())):\n    e=q.get()\n    c=0\n    if(e==1):\n        c=0\n    else:\n        c=color[parent[e]]\n    if(c!=color[e]):\n        ans+=1\n    for i in child[e]:\n        q.put(i)\n        \nprint(ans)\n\n\n    \n    \n    \n    \n", "difficulty": 8, "public_tests": {"input": ["7\n1 1 2 3 1 4\n3 3 1 1 1 2 3\n", "6\n1 2 2 1 5\n2 1 1 1 1 1\n"], "output": ["5", "3"]}, "private_tests": {"input": ["4\n1 1 2\n4 1 4 1\n", "4\n1 2 3\n4 1 2 4\n", "3\n1 2\n2 1 1\n", "3\n1 1\n2 2 2\n", "5\n1 2 1 4\n1 1 1 2 2\n", "3\n1 1\n1 2 2\n", "4\n1 2 2\n3 1 2 3\n", "4\n1 2 1\n1 2 3 4\n", "2\n1\n2 2\n", "4\n1 1 1\n3 1 3 1\n"], "output": ["2", "4", "2", "1", "2", "3", "4", "4", "1", "3"]}, "generated_tests": {"input": ["4\n1 1 2\n8 1 4 1\n", "4\n1 2 3\n8 1 2 4\n", "3\n1 2\n2 2 1\n", "6\n1 2 2 1 5\n3 1 2 1 2 1\n", "6\n1 2 1 1 5\n3 1 2 1 2 1\n", "4\n1 2 2\n2 2 2 2\n", "3\n1 1\n2 1 2\n", "4\n1 2 2\n6 1 2 3\n", "4\n1 2 2\n1 2 3 4\n", "2\n1\n2 4\n", "6\n1 2 2 1 5\n3 1 1 1 1 1\n", "3\n1 1\n4 1 2\n", "4\n1 2 2\n6 1 2 6\n", "4\n1 2 3\n1 2 3 4\n", "2\n1\n2 6\n", "6\n1 2 2 1 5\n3 1 2 1 1 1\n", "3\n1 1\n8 1 2\n", "6\n1 1 1 1 5\n3 1 2 1 2 1\n", "6\n1 1 1 1 5\n3 0 2 1 2 1\n", "6\n1 1 1 1 1\n3 0 2 1 2 1\n", "6\n1 1 1 1 1\n3 0 2 0 2 1\n", "6\n1 1 1 1 1\n3 0 2 0 2 0\n", "4\n1 2 3\n4 1 1 4\n", "5\n1 2 1 4\n2 1 1 2 2\n", "3\n1 1\n1 3 2\n", "4\n1 2 2\n3 1 2 6\n", "4\n1 1 1\n1 2 3 4\n", "2\n1\n2 0\n", "4\n1 1 1\n2 1 3 1\n", "7\n1 1 2 3 1 4\n3 3 1 1 1 2 6\n", "6\n1 2 2 1 5\n2 1 1 1 1 0\n", "4\n1 1 2\n8 1 6 1\n", "4\n1 2 3\n5 1 2 4\n", "4\n1 2 2\n1 2 3 3\n", "6\n1 2 2 1 5\n3 1 1 0 1 1\n", "4\n1 2 3\n1 2 2 4\n", "2\n1\n2 12\n", "6\n1 1 2 1 5\n3 1 2 1 2 1\n", "3\n1 1\n10 1 2\n", "6\n1 2 1 1 5\n3 2 2 1 2 1\n", "6\n1 1 1 1 5\n3 0 2 2 2 1\n", "6\n1 1 1 1 1\n3 0 2 1 2 0\n", "6\n1 1 1 1 1\n3 0 2 0 3 1\n", "5\n1 2 1 4\n2 1 1 1 2\n", "3\n1 1\n1 0 2\n", "4\n1 2 2\n2 1 2 6\n", "4\n1 1 1\n2 1 3 2\n", "7\n1 1 2 3 1 5\n3 3 1 1 1 2 6\n", "4\n1 2 1\n1 2 3 3\n", "2\n1\n2 20\n", "6\n1 2 1 1 5\n1 2 2 1 2 1\n", "6\n1 1 1 1 5\n1 0 2 2 2 1\n", "6\n1 1 1 1 1\n4 0 2 1 2 0\n", "6\n1 1 1 1 1\n1 0 2 0 3 1\n", "3\n1 1\n1 0 1\n", "4\n1 2 2\n2 2 2 6\n", "4\n1 1 1\n2 1 0 2\n", "7\n1 1 1 3 1 5\n3 3 1 1 1 2 6\n", "4\n1 2 2\n1 2 0 3\n", "2\n1\n2 30\n", "6\n1 1 1 1 5\n1 0 2 2 1 1\n", "6\n1 1 1 1 1\n4 0 1 1 2 0\n", "6\n1 1 1 1 1\n1 0 2 -1 3 1\n", "3\n1 1\n1 -1 1\n", "7\n1 1 1 3 1 5\n3 5 1 1 1 2 6\n", "4\n1 2 2\n1 2 0 1\n", "2\n1\n2 26\n", "6\n1 1 1 1 5\n1 0 3 2 1 1\n", "6\n1 1 1 1 1\n5 0 1 1 2 0\n", "6\n1 1 1 1 1\n1 0 2 -1 0 1\n", "3\n1 1\n2 -1 1\n", "7\n1 1 1 3 1 5\n3 6 1 1 1 2 6\n", "4\n1 2 2\n1 3 0 1\n", "2\n1\n2 16\n", "6\n1 1 1 1 5\n1 0 3 3 1 1\n", "3\n1 1\n3 -1 1\n", "7\n1 1 1 3 1 5\n3 6 1 1 1 1 6\n", "2\n1\n4 16\n", "6\n1 1 1 1 5\n1 1 3 3 1 1\n", "7\n1 1 2 3 1 5\n3 6 1 1 1 1 6\n", "2\n1\n4 3\n", "6\n1 1 1 1 4\n1 1 3 3 1 1\n", "6\n1 1 1 1 4\n1 1 3 4 1 1\n", "6\n1 1 1 1 4\n2 1 3 4 1 1\n", "6\n1 1 1 2 4\n2 1 3 4 1 1\n"], "output": ["3\n", "4\n", "2\n", "5\n", "6\n", "1\n", "2\n", "4\n", "4\n", "2\n", "3\n", "3\n", "4\n", "4\n", "2\n", "4\n", "3\n", "6\n", "6\n", "6\n", "6\n", "6\n", "3\n", "2\n", "3\n", "4\n", "4\n", "2\n", "4\n", "5\n", "4\n", "3\n", "4\n", "4\n", "4\n", "3\n", "2\n", "5\n", "3\n", "5\n", "6\n", "6\n", "5\n", "4\n", "3\n", "4\n", "3\n", "5\n", "4\n", "2\n", "4\n", "6\n", "6\n", "5\n", "2\n", "2\n", "3\n", "5\n", "4\n", "2\n", "4\n", "6\n", "5\n", "2\n", "6\n", "4\n", "2\n", "4\n", "6\n", "5\n", "3\n", "6\n", "4\n", "2\n", "4\n", "3\n", "6\n", "2\n", "3\n", "6\n", "2\n", "4\n", "4\n", "6\n", "5\n"]}, "short_description": "1. One-sentence summary:  \nCount the number of edges in a rooted tree where the value at a child node differs from its parent\u2019s value.\n\n2. Core algorithmic approach:  \nBreadth-first search (BFS) on a tree to propagate parent\u2013child relationships and tally transitions between differing node values.\n\n3. Reusable components:  \n- Adjacency lists for representing a rooted tree (mapping each node to its children).  \n- A BFS traversal template using a queue to visit nodes level by level.  \n- A transition-counting pattern that compares a node\u2019s value to its parent\u2019s value during traversal."}
{"name": "246_D. Colorful Graph", "description": "You've got an undirected graph, consisting of n vertices and m edges. We will consider the graph's vertices numbered with integers from 1 to n. Each vertex of the graph has a color. The color of the i-th vertex is an integer ci.\n\nLet's consider all vertices of the graph, that are painted some color k. Let's denote a set of such as V(k). Let's denote the value of the neighbouring color diversity for color k as the cardinality of the set Q(k) = {cu : cu \u2260 k and there is vertex v belonging to set V(k) such that nodes v and u are connected by an edge of the graph}.\n\nYour task is to find such color k, which makes the cardinality of set Q(k) maximum. In other words, you want to find the color that has the most diverse neighbours. Please note, that you want to find such color k, that the graph has at least one vertex with such color.\n\nInput\n\nThe first line contains two space-separated integers n, m (1 \u2264 n, m \u2264 105) \u2014 the number of vertices end edges of the graph, correspondingly. The second line contains a sequence of integers c1, c2, ..., cn (1 \u2264 ci \u2264 105) \u2014 the colors of the graph vertices. The numbers on the line are separated by spaces.\n\nNext m lines contain the description of the edges: the i-th line contains two space-separated integers ai, bi (1 \u2264 ai, bi \u2264 n; ai \u2260 bi) \u2014 the numbers of the vertices, connected by the i-th edge. \n\nIt is guaranteed that the given graph has no self-loops or multiple edges.\n\nOutput\n\nPrint the number of the color which has the set of neighbours with the maximum cardinality. It there are multiple optimal colors, print the color with the minimum number. Please note, that you want to find such color, that the graph has at least one vertex with such color.\n\nExamples\n\nInput\n\n6 6\n1 1 2 3 5 8\n1 2\n3 2\n1 4\n4 3\n4 5\n4 6\n\n\nOutput\n\n3\n\n\nInput\n\n5 6\n4 2 5 2 4\n1 2\n2 3\n3 1\n5 3\n5 4\n3 4\n\n\nOutput\n\n2", "solution": "from collections import defaultdict\nl=lambda :map(int,input().split())\nn,m=l()\nc=list(l())\ngraph=defaultdict(set)\nfor i in range(m):\n    a,b=l()\n    if c[a-1]==c[b-1]:\n        continue\n    graph[c[a-1]].add(c[b-1])\n    graph[c[b - 1]].add(c[a - 1])\nd,f=min(c),0\nfor i in sorted(graph):\n    h=len(graph[i])\n    if h>f:\n        f=h\n        d=i\nprint(d)", "difficulty": 10, "public_tests": {"input": ["5 6\n4 2 5 2 4\n1 2\n2 3\n3 1\n5 3\n5 4\n3 4\n", "6 6\n1 1 2 3 5 8\n1 2\n3 2\n1 4\n4 3\n4 5\n4 6\n"], "output": ["2", "3"]}, "private_tests": {"input": ["10 15\n1 1 1 1 2 2 2 2 1 2\n8 5\n9 1\n8 6\n3 5\n2 7\n2 9\n10 3\n3 2\n3 6\n4 2\n5 9\n7 3\n6 7\n5 10\n4 7\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n5 8\n8 6\n1 8\n8 4\n3 7\n1 10\n1 9\n2 5\n6 9\n", "3 1\n13 13 4\n1 2\n", "10 27\n1 1 3 2 4 1 3 2 4 1\n9 3\n7 8\n9 7\n6 5\n7 6\n7 4\n6 9\n3 8\n6 10\n8 5\n3 1\n4 6\n8 1\n10 8\n9 5\n10 1\n5 10\n3 6\n4 3\n8 2\n10 7\n10 9\n10 3\n8 4\n3 2\n2 4\n6 1\n", "2 1\n500 300\n1 2\n", "7 6\n1 2 3 4 3 3 3\n5 1\n6 1\n7 1\n1 2\n2 3\n2 4\n", "2 1\n100000 100000\n1 2\n", "5 2\n4 4 10 3 3\n1 2\n4 5\n", "8 8\n3 3 2 3 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n5 6\n4 2\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n50 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 7\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n4 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "6 1\n10 1 1 2 3 4\n2 3\n", "6 5\n2 2 2 1 2 2\n4 5\n4 2\n5 2\n4 1\n2 3\n", "5 4\n300 300 300 300 300\n1 2\n2 3\n3 4\n4 5\n"], "output": ["1", "1", "4", "1", "300", "2", "100000", "3", "3", "47", "1", "1", "300"]}, "generated_tests": {"input": ["10 9\n1 1 1 1 1 1 1 1 1 1\n5 8\n8 6\n1 8\n8 4\n3 7\n2 10\n1 9\n2 5\n6 9\n", "7 6\n1 2 3 4 3 3 3\n5 2\n6 1\n7 1\n1 2\n2 3\n2 4\n", "8 8\n3 3 2 3 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n4 6\n4 2\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n50 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 7\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "6 5\n2 2 2 1 2 2\n4 5\n4 2\n5 1\n4 1\n2 3\n", "5 6\n4 2 5 2 4\n1 2\n2 3\n1 1\n5 3\n5 4\n3 4\n", "6 6\n1 1 2 3 5 8\n1 2\n3 2\n2 4\n4 3\n4 5\n4 6\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n5 8\n8 3\n1 8\n8 4\n3 7\n2 10\n1 9\n2 5\n6 9\n", "7 6\n1 2 3 4 3 5 3\n5 2\n6 1\n7 1\n1 2\n2 3\n2 4\n", "8 8\n3 3 2 1 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n4 6\n4 2\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 7\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "6 6\n1 1 2 3 5 4\n1 2\n3 2\n2 4\n4 3\n4 5\n4 6\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n5 4\n8 3\n1 8\n8 4\n3 7\n2 10\n1 9\n2 5\n6 9\n", "8 8\n3 3 2 1 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n4 6\n4 3\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 1 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n4 6\n4 3\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 1 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n4 6\n4 3\n3 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 1 3 3 1 3\n8 2\n6 3\n4 3\n2 6\n4 6\n4 3\n3 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 1 3 3 1 3\n8 2\n6 3\n4 3\n2 6\n5 6\n4 3\n3 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 6\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 2 3 3 1 3\n8 2\n6 3\n4 3\n2 6\n5 6\n4 3\n3 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 47\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 6\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 2 3 3 1 3\n8 2\n6 6\n4 3\n2 6\n5 6\n4 3\n3 5\n1 6\n", "10 15\n1 1 1 1 2 2 2 2 1 2\n8 5\n6 1\n8 6\n3 5\n2 7\n2 9\n10 3\n3 2\n3 6\n4 2\n5 9\n7 3\n6 7\n5 10\n4 7\n", "3 1\n2 13 4\n1 2\n", "10 27\n1 1 3 2 4 1 3 2 4 1\n9 3\n7 8\n9 7\n6 5\n7 6\n7 4\n6 9\n3 8\n6 10\n8 5\n3 1\n4 6\n8 1\n10 8\n9 5\n10 1\n5 10\n3 6\n4 5\n8 2\n10 7\n10 9\n10 3\n8 4\n3 2\n2 4\n6 1\n", "7 6\n1 2 3 4 3 3 3\n5 1\n6 1\n7 1\n1 2\n2 3\n3 4\n", "5 2\n4 4 4 3 3\n1 2\n4 5\n", "8 8\n3 3 2 3 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n5 6\n4 1\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n50 2\n42 5\n36 28\n8 44\n36 4\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 7\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n4 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "6 1\n10 1 2 2 3 4\n2 3\n", "5 6\n4 2 5 2 4\n1 2\n2 3\n3 1\n3 3\n5 4\n3 4\n", "8 8\n3 3 2 3 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n4 5\n4 2\n7 5\n1 6\n", "6 5\n2 2 2 1 2 2\n4 5\n4 2\n5 1\n4 1\n2 2\n", "5 6\n4 2 5 2 7\n1 2\n2 3\n1 1\n5 3\n5 4\n3 4\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n5 8\n8 3\n1 9\n8 4\n3 7\n2 10\n1 9\n2 5\n6 9\n", "8 8\n3 6 2 1 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n4 6\n4 2\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 7\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 3\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "6 6\n1 1 2 3 5 4\n1 2\n3 2\n2 6\n4 3\n4 5\n4 6\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n5 4\n8 3\n1 8\n8 5\n3 7\n2 10\n1 9\n2 5\n6 9\n", "8 8\n3 3 4 1 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n4 6\n4 3\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n10 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 1 3 3 1 3\n8 2\n6 3\n2 3\n4 6\n4 6\n4 3\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n9 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 1 3 3 1 3\n8 2\n6 4\n2 3\n2 6\n4 6\n4 3\n3 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n31 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 1 3 3 1 3\n8 2\n6 3\n4 3\n2 6\n4 6\n4 3\n4 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 5\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 1 3 3 1 4\n8 2\n6 3\n4 3\n2 6\n5 6\n4 3\n3 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n2 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 6\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 2 3 3 1 3\n8 2\n6 3\n4 3\n2 6\n8 6\n4 3\n3 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 46 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 47\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 6\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 2 3 3 1 3\n8 2\n6 6\n4 5\n2 6\n5 6\n4 3\n3 5\n1 6\n", "10 15\n1 1 1 1 2 2 2 2 1 2\n8 5\n6 1\n8 6\n3 5\n2 7\n2 9\n10 3\n3 2\n3 6\n4 2\n5 9\n7 3\n9 7\n5 10\n4 7\n", "10 27\n1 1 3 2 4 1 3 2 4 1\n9 3\n7 8\n9 7\n6 9\n7 6\n7 4\n6 9\n3 8\n6 10\n8 5\n3 1\n4 6\n8 1\n10 8\n9 5\n10 1\n5 10\n3 6\n4 5\n8 2\n10 7\n10 9\n10 3\n8 4\n3 2\n2 4\n6 1\n", "7 6\n1 2 3 4 3 3 3\n5 2\n6 1\n7 1\n1 2\n2 3\n3 4\n", "5 2\n2 4 4 3 3\n1 2\n4 5\n", "50 47\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 44 8 50 1 28\n7 5\n50 2\n42 5\n36 28\n8 44\n36 4\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 7\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n4 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "5 6\n4 2 5 2 4\n1 2\n2 3\n3 1\n3 3\n5 4\n5 4\n", "5 6\n4 2 4 2 7\n1 2\n2 3\n1 1\n5 3\n5 4\n3 4\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n5 8\n8 3\n1 9\n8 4\n3 7\n2 10\n1 9\n4 5\n6 9\n", "8 8\n4 6 2 1 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n4 6\n4 2\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 7\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 3\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 24\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n5 1\n8 3\n1 8\n8 5\n3 7\n2 10\n1 9\n2 5\n6 9\n", "8 8\n3 3 4 1 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n7 6\n4 3\n7 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 23 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n9 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 5 2 1 3 3 1 3\n8 2\n6 4\n2 3\n2 6\n4 6\n4 3\n3 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 19\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n31 8\n10 6\n12 46\n41 5\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n15 41\n2 47\n4 48\n36 32\n45 5\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 1 3 3 1 4\n8 2\n6 4\n4 3\n2 6\n5 6\n4 3\n3 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n10 18\n40 31\n2 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 6\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 2 3 3 1 3\n8 2\n6 3\n4 3\n2 6\n8 6\n4 3\n3 3\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 46 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 76 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 47\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 6\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "10 15\n1 1 1 1 2 2 2 2 1 2\n8 5\n6 1\n8 6\n3 5\n2 7\n2 9\n10 3\n6 2\n3 6\n4 2\n5 9\n7 3\n9 7\n5 10\n4 7\n", "10 27\n1 1 3 2 4 1 3 2 4 1\n9 3\n7 8\n9 7\n6 9\n7 6\n7 4\n6 9\n3 8\n6 10\n8 5\n3 1\n4 6\n8 1\n10 8\n9 5\n10 1\n5 10\n3 6\n4 5\n8 2\n10 7\n10 2\n10 3\n8 4\n3 2\n2 4\n6 1\n", "50 47\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 44 8 50 1 28\n7 5\n50 2\n42 5\n36 28\n8 44\n36 4\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n28 7\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n4 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n11 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "5 6\n4 2 5 2 4\n1 2\n2 3\n3 1\n3 3\n5 2\n5 4\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n5 8\n8 3\n1 9\n8 4\n3 7\n2 10\n1 9\n4 5\n6 8\n", "8 8\n4 6 2 1 3 3 1 3\n8 2\n6 3\n2 3\n2 6\n5 6\n4 2\n7 5\n1 6\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n5 1\n8 3\n1 8\n8 5\n3 7\n2 10\n2 9\n2 5\n6 9\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 23 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 3\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n9 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 2\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 19\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n31 8\n10 6\n12 46\n41 5\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 25 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n15 41\n2 47\n4 48\n36 32\n45 5\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 1 3 3 1 4\n3 2\n6 4\n4 3\n2 6\n5 6\n4 3\n3 5\n1 6\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 10 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 2\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n21 39\n17 47\n19 49\n28 10\n7 13\n34 3\n22 26\n5 6\n8 17\n10 18\n40 31\n2 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 50\n14 26\n15 6\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n", "8 8\n1 3 2 2 3 3 1 3\n8 2\n6 3\n4 3\n2 6\n8 6\n4 2\n3 3\n1 6\n", "10 15\n1 1 1 1 2 2 2 2 1 2\n8 5\n6 1\n8 6\n3 5\n2 7\n2 9\n10 3\n6 4\n3 6\n4 2\n5 9\n7 3\n9 7\n5 10\n4 7\n", "10 27\n1 1 3 2 4 1 3 2 4 1\n9 3\n7 8\n9 7\n6 9\n7 6\n7 4\n6 9\n3 8\n6 10\n8 5\n3 1\n4 6\n8 1\n10 8\n9 5\n9 1\n5 10\n3 6\n4 5\n8 2\n10 7\n10 2\n10 3\n8 4\n3 2\n2 4\n6 1\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n5 8\n8 3\n1 9\n8 4\n3 7\n2 10\n1 9\n4 5\n6 6\n", "10 9\n1 1 1 1 1 1 1 1 1 1\n3 1\n8 3\n1 8\n8 5\n3 7\n2 10\n2 9\n2 5\n6 9\n", "50 47\n21 17 47 15 50 47 47 41 30 18 27 47 29 28 32 26 23 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\n7 5\n34 3\n42 5\n36 28\n8 44\n36 3\n40 15\n33 18\n5 50\n1 6\n25 20\n39 24\n45 35\n14 27\n14 39\n17 47\n19 49\n9 10\n13 13\n34 3\n22 26\n5 6\n8 17\n32 18\n40 31\n7 40\n17 21\n37 18\n30 41\n2 47\n4 48\n36 32\n45 20\n39 28\n39 43\n7 33\n44 48\n21 47\n14 26\n15 47\n16 14\n23 18\n50 12\n28 8\n10 6\n12 46\n41 5\n"], "output": ["1\n", "2\n", "3\n", "47\n", "1\n", "2\n", "3\n", "1\n", "1\n", "3\n", "47\n", "3\n", "1\n", "1\n", "47\n", "1\n", "47\n", "1\n", "47\n", "1\n", "47\n", "1\n", "47\n", "3\n", "47\n", "3\n", "1\n", "2\n", "1\n", "3\n", "3\n", "3\n", "47\n", "1\n", "2\n", "3\n", "1\n", "2\n", "1\n", "3\n", "47\n", "3\n", "1\n", "1\n", "47\n", "1\n", "47\n", "1\n", "47\n", "1\n", "47\n", "3\n", "47\n", "3\n", "47\n", "3\n", "1\n", "1\n", "3\n", "2\n", "47\n", "2\n", "2\n", "1\n", "3\n", "47\n", "1\n", "1\n", "47\n", "2\n", "47\n", "47\n", "3\n", "47\n", "3\n", "47\n", "1\n", "1\n", "47\n", "2\n", "1\n", "3\n", "1\n", "47\n", "47\n", "47\n", "1\n", "47\n", "3\n", "1\n", "1\n", "1\n", "1\n", "47\n"]}, "short_description": "1. One-sentence summary:  \nDetermine which label among items has the most distinct connections to differently labeled items in an undirected relation set, breaking ties by the smallest label.\n\n2. Core algorithmic approach:  \nConstruct an undirected graph at the label level using adjacency sets and then scan through these sets to count degrees, selecting the maximum.\n\n3. Reusable components:  \n- Adjacency\u2010set graph builder: mapping keys to sets and skipping same\u2010label edges.  \n- Degree computation and max\u2010with\u2010tie\u2010break logic: iterate through sorted keys, track highest count and corresponding key.  \n- Input parsing helper (e.g., lambda for fast integer reading)."}
{"name": "404_C. Restore Graph", "description": "Valera had an undirected connected graph without self-loops and multiple edges consisting of n vertices. The graph had an interesting property: there were at most k edges adjacent to each of its vertices. For convenience, we will assume that the graph vertices were indexed by integers from 1 to n.\n\nOne day Valera counted the shortest distances from one of the graph vertices to all other ones and wrote them out in array d. Thus, element d[i] of the array shows the shortest distance from the vertex Valera chose to vertex number i.\n\nThen something irreparable terrible happened. Valera lost the initial graph. However, he still has the array d. Help him restore the lost graph.\n\nInput\n\nThe first line contains two space-separated integers n and k (1 \u2264 k < n \u2264 105). Number n shows the number of vertices in the original graph. Number k shows that at most k edges were adjacent to each vertex in the original graph.\n\nThe second line contains space-separated integers d[1], d[2], ..., d[n] (0 \u2264 d[i] < n). Number d[i] shows the shortest distance from the vertex Valera chose to the vertex number i.\n\nOutput\n\nIf Valera made a mistake in his notes and the required graph doesn't exist, print in the first line number -1. Otherwise, in the first line print integer m (0 \u2264 m \u2264 106) \u2014 the number of edges in the found graph.\n\nIn each of the next m lines print two space-separated integers ai and bi (1 \u2264 ai, bi \u2264 n; ai \u2260 bi), denoting the edge that connects vertices with numbers ai and bi. The graph shouldn't contain self-loops and multiple edges. If there are multiple possible answers, print any of them.\n\nExamples\n\nInput\n\n3 2\n0 1 1\n\n\nOutput\n\n3\n1 2\n1 3\n3 2\n\n\nInput\n\n4 2\n2 0 1 3\n\n\nOutput\n\n3\n1 3\n1 4\n2 3\n\n\nInput\n\n3 1\n0 0 0\n\n\nOutput\n\n-1", "solution": "from sys import exit\n\n\nn, k = map(int, input().split())\nnodes = [[] for _ in range(n+1)]\nedges = []\n\nfor node, dist in enumerate(map(int, input().split())):\n    nodes[dist].append(node)\n\nif len(nodes[0]) != 1 or len(nodes[1]) > k:\n    print(-1)\nelse:\n    for i in range(1, n):\n        if len(nodes[i])*(k-1) < len(nodes[i+1]):\n            print(-1)\n            exit(0)\n    for i in range(n):\n\n        next = 0\n\n        if len(nodes[i+1]) > 0:\n            for j, node in enumerate(nodes[i]):\n\n                current = 0\n\n                while current < (k if i == 0 else k-1) and next < len(nodes[i+1]):\n                    edges.append((node+1, nodes[i+1][next]+1))\n                    next += 1\n                    current += 1\n\n    print(len(edges))\n    print('\\n'.join(map(lambda x: ' '.join([str(x[0]), str(x[1])]), edges)))\n", "difficulty": 9, "public_tests": {"input": ["3 2\n0 1 1\n", "3 1\n0 0 0\n", "4 2\n2 0 1 3\n"], "output": ["2\n1 2\n1 3\n", "-1\n", "3\n2 3\n3 1\n1 4\n"]}, "private_tests": {"input": ["3 1\n0 1 2\n", "5 3\n0 2 1 2 1\n", "4 3\n1 1 1 2\n", "2 1\n1 0\n", "2 1\n1 1\n", "3 2\n0 1 1\n", "9 4\n2 1 1 3 1 2 2 1 0\n", "4 2\n0 1 0 1\n", "7 3\n2 2 0 1 3 2 1\n", "2 1\n0 0\n", "5 4\n1 2 2 2 3\n", "7 6\n1 1 2 2 3 3 3\n", "4 3\n1 2 2 3\n", "10 5\n0 1 1 1 1 1 1 2 2 2\n", "4 3\n1 2 3 3\n", "5 4\n0 1 1 1 4\n", "5 3\n3 1 4 2 1\n"], "output": ["-1\n", "4\n1 3\n1 5\n3 2\n3 4\n", "-1\n", "1\n2 1\n", "-1\n", "2\n1 2\n1 3\n", "8\n9 2\n9 3\n9 5\n9 8\n2 1\n2 6\n2 7\n1 4\n", "-1\n", "6\n3 4\n3 7\n4 1\n4 2\n7 6\n1 5\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n"]}, "generated_tests": {"input": ["5 3\n0 2 1 2 2\n", "7 3\n2 2 0 1 1 2 1\n", "5 3\n3 1 4 2 0\n", "4 5\n1 1 1 0\n", "3 3\n0 1 1\n", "3 2\n1 1 0\n", "3 3\n0 1 2\n", "10 6\n0 2 1 1 1 1 1 2 1 2\n", "3 2\n2 1 0\n", "4 2\n0 2 1 1\n", "10 6\n0 2 1 1 2 1 1 2 1 2\n", "10 6\n0 3 1 1 2 1 1 2 1 2\n", "10 6\n0 3 1 1 2 1 1 2 1 3\n", "10 6\n0 4 1 1 2 1 1 2 1 3\n", "2 2\n0 1\n", "5 5\n1 0 2 2 3\n", "3 2\n1 2 0\n", "4 5\n1 1 1 2\n", "2 2\n1 1\n", "3 2\n0 0 1\n", "9 4\n2 1 1 3 1 2 2 0 0\n", "4 2\n0 2 0 1\n", "2 0\n0 0\n", "5 6\n1 2 2 2 3\n", "10 5\n0 1 1 1 1 1 1 2 1 2\n", "4 3\n2 2 3 3\n", "3 2\n0 1 0\n", "3 1\n0 1 0\n", "4 2\n2 0 0 3\n", "9 8\n2 1 1 3 1 2 2 0 0\n", "4 3\n0 2 0 1\n", "5 5\n1 2 2 2 3\n", "10 5\n0 2 1 1 1 1 1 2 1 2\n", "4 3\n2 3 3 3\n", "5 3\n0 1 4 2 0\n", "3 1\n1 1 0\n", "4 6\n0 2 0 1\n", "5 5\n1 2 3 2 3\n", "3 1\n1 2 0\n", "10 6\n0 4 1 1 2 1 1 2 1 2\n", "10 6\n0 4 1 1 2 0 1 2 1 2\n", "10 6\n0 0 1 1 2 0 1 2 1 2\n", "10 6\n0 0 1 1 3 0 1 2 1 2\n", "9 4\n2 1 1 6 1 2 2 1 0\n", "4 0\n0 1 0 1\n", "7 3\n0 2 0 1 3 2 1\n", "5 3\n1 2 2 2 3\n", "4 3\n1 2 3 1\n", "5 4\n0 1 0 1 4\n", "5 3\n3 2 4 2 1\n", "5 3\n0 2 1 2 0\n", "4 9\n1 1 1 2\n", "9 4\n2 1 0 3 1 2 2 0 0\n", "7 3\n2 2 0 1 1 0 1\n", "5 6\n1 2 2 4 3\n", "4 3\n3 2 3 3\n", "5 3\n1 1 4 2 0\n", "3 3\n0 1 0\n", "4 5\n1 0 1 0\n", "3 2\n0 1 2\n", "9 8\n2 0 1 3 1 2 2 0 0\n", "10 5\n0 2 1 1 1 1 1 2 0 2\n", "4 3\n2 0 3 3\n", "5 3\n0 0 4 2 0\n", "3 4\n0 1 2\n", "4 11\n0 2 0 1\n", "5 5\n1 2 3 2 2\n"], "output": ["-1\n", "6\n3 4\n3 5\n3 7\n4 1\n4 2\n5 6\n", "4\n5 2\n2 4\n4 1\n1 3\n", "3\n4 1\n4 2\n4 3\n", "2\n1 2\n1 3\n", "2\n3 1\n3 2\n", "2\n1 2\n2 3\n", "9\n1 3\n1 4\n1 5\n1 6\n1 7\n1 9\n3 2\n3 8\n3 10\n", "2\n3 2\n2 1\n", "3\n1 3\n1 4\n3 2\n", "9\n1 3\n1 4\n1 6\n1 7\n1 9\n3 2\n3 5\n3 8\n3 10\n", "9\n1 3\n1 4\n1 6\n1 7\n1 9\n3 5\n3 8\n3 10\n5 2\n", "9\n1 3\n1 4\n1 6\n1 7\n1 9\n3 5\n3 8\n5 2\n5 10\n", "9\n1 3\n1 4\n1 6\n1 7\n1 9\n3 5\n3 8\n5 10\n10 2\n", "1\n1 2\n", "4\n2 1\n1 3\n1 4\n3 5\n", "2\n3 1\n1 2\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "2\n1 2\n2 3\n", "-1\n", "-1\n", "-1\n", "-1\n", "2\n1 2\n2 3\n", "-1\n", "-1\n"]}, "short_description": "1. One-sentence summary:\nConstruct a spanning tree over a set of vertices partitioned by integer \u201clevels\u201d such that each vertex (except the root) connects to a vertex in the previous level under a maximum\u2010degree constraint.\n\n2. Core algorithmic approach:\nGreedy layer-by-layer tree construction (akin to BFS layering) with per\u2010node degree limits.\n\n3. Reusable components:\n- Layering nodes by distance/level: grouping elements into buckets indexed by their assigned level.\n- Feasibility checks on layer sizes vs. degree constraints: ensuring |layer i|\u00b7max_degree_per_parent \u2265 |layer i+1|.\n- Greedy edge assignment between consecutive layers: iterate parents and assign up to k (or k\u22121) children each."}
{"name": "981_C. Useful Decomposition", "description": "Ramesses knows a lot about problems involving trees (undirected connected graphs without cycles)!\n\nHe created a new useful tree decomposition, but he does not know how to construct it, so he asked you for help!\n\nThe decomposition is the splitting the edges of the tree in some simple paths in such a way that each two paths have at least one common vertex. Each edge of the tree should be in exactly one path.\n\nHelp Remesses, find such a decomposition of the tree or derermine that there is no such decomposition.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^{5}) the number of nodes in the tree.\n\nEach of the next n - 1 lines contains two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n, a_i \u2260 b_i) \u2014 the edges of the tree. It is guaranteed that the given edges form a tree.\n\nOutput\n\nIf there are no decompositions, print the only line containing \"No\".\n\nOtherwise in the first line print \"Yes\", and in the second line print the number of paths in the decomposition m. \n\nEach of the next m lines should contain two integers u_i, v_i (1 \u2264 u_i, v_i \u2264 n, u_i \u2260 v_i) denoting that one of the paths in the decomposition is the simple path between nodes u_i and v_i. \n\nEach pair of paths in the decomposition should have at least one common vertex, and each edge of the tree should be presented in exactly one path. You can print the paths and the ends of each path in arbitrary order.\n\nIf there are multiple decompositions, print any.\n\nExamples\n\nInput\n\n4\n1 2\n2 3\n3 4\n\n\nOutput\n\nYes\n1\n1 4\n\n\nInput\n\n6\n1 2\n2 3\n3 4\n2 5\n3 6\n\n\nOutput\n\nNo\n\n\nInput\n\n5\n1 2\n1 3\n1 4\n1 5\n\n\nOutput\n\nYes\n4\n1 2\n1 3\n1 4\n1 5\n\nNote\n\nThe tree from the first example is shown on the picture below: <image> The number next to each edge corresponds to the path number in the decomposition. It is easy to see that this decomposition suits the required conditions.\n\nThe tree from the second example is shown on the picture below: <image> We can show that there are no valid decompositions of this tree.\n\nThe tree from the third example is shown on the picture below: <image> The number next to each edge corresponds to the path number in the decomposition. It is easy to see that this decomposition suits the required conditions.", "solution": "n = int(input())\nflag = True\nf = [0] * (n - 1)\nt = [0] * (n - 1)\nco = [0] * n\nfor i in range(n - 1):\n    f[i], t[i] = map(int, input().split())\n    co[f[i] - 1] += 1\n    co[t[i] - 1] += 1\nmid = 0\nen = []\nfor i in range(n):\n    if co[i] == 1:\n        en.append(i + 1)\n    elif co[i] > 2:\n        if mid == 0:\n            mid = i + 1\n        else:\n            print(\"No\")\n            flag = False\n            break\nif flag:\n    print(\"Yes\")\n    if mid != 0:\n        print(len(en))\n        for i in range(len(en)):\n            if (en[i] != mid):\n                print(mid, en[i])\n    else:\n        print(1)\n        print(en[0], en[1])", "difficulty": 9, "public_tests": {"input": ["6\n1 2\n2 3\n3 4\n2 5\n3 6\n", "4\n1 2\n2 3\n3 4\n", "5\n1 2\n1 3\n1 4\n1 5\n"], "output": ["No\n", "Yes\n1\n1 4\n", "Yes\n4\n1 2\n1 3\n1 4\n1 5\n"]}, "private_tests": {"input": ["9\n1 2\n1 3\n1 4\n1 5\n1 6\n6 7\n7 8\n7 9\n", "8\n1 2\n1 3\n1 4\n1 8\n7 8\n6 8\n5 8\n", "3\n2 3\n1 2\n", "2\n1 2\n"], "output": ["No\n", "No\n", "Yes\n1\n1 3\n", "Yes\n1\n1 2\n"]}, "generated_tests": {"input": ["9\n1 2\n2 3\n1 4\n1 5\n1 6\n6 7\n7 8\n7 9\n", "3\n3 3\n1 2\n", "5\n2 2\n1 3\n1 4\n1 5\n", "9\n1 2\n1 3\n1 4\n1 5\n1 6\n6 7\n7 8\n8 9\n", "4\n1 2\n2 4\n3 4\n", "9\n1 2\n2 3\n1 4\n1 5\n1 6\n6 7\n5 8\n7 9\n", "6\n1 3\n2 3\n4 4\n2 5\n3 6\n", "5\n1 2\n4 3\n1 4\n1 5\n", "9\n1 2\n2 3\n1 4\n1 8\n1 6\n6 7\n5 8\n7 9\n", "9\n1 2\n1 3\n1 4\n1 5\n2 6\n6 7\n7 8\n7 9\n", "9\n1 2\n2 3\n1 4\n1 5\n1 6\n9 7\n7 8\n7 9\n", "9\n1 2\n3 3\n1 4\n1 5\n1 6\n9 7\n7 8\n7 9\n", "9\n1 2\n3 3\n1 4\n1 5\n1 6\n9 7\n9 8\n7 9\n", "9\n1 2\n1 3\n1 4\n1 5\n1 6\n6 6\n7 8\n7 9\n", "9\n1 2\n2 3\n1 4\n1 5\n1 3\n6 7\n7 8\n7 9\n", "9\n1 2\n3 3\n1 4\n1 5\n1 6\n9 2\n9 8\n7 9\n", "5\n1 2\n2 3\n1 4\n1 5\n", "9\n1 1\n2 3\n1 4\n1 5\n1 6\n6 7\n7 8\n7 9\n", "9\n1 2\n3 3\n1 4\n1 5\n1 6\n9 7\n7 8\n7 2\n", "9\n2 2\n1 3\n1 4\n1 5\n1 6\n6 6\n7 8\n7 9\n", "9\n1 1\n2 3\n1 4\n1 5\n1 6\n8 7\n7 8\n7 9\n", "9\n1 2\n1 3\n1 4\n1 5\n4 6\n6 7\n7 8\n7 9\n", "3\n1 3\n2 2\n", "9\n1 2\n3 3\n1 4\n1 5\n1 6\n9 4\n9 8\n7 9\n", "9\n1 2\n3 4\n1 4\n1 5\n1 6\n9 2\n9 8\n7 9\n", "9\n2 2\n1 3\n1 4\n1 5\n1 2\n6 6\n7 8\n7 9\n", "9\n1 1\n2 3\n1 4\n2 5\n1 6\n8 7\n7 8\n7 9\n", "3\n1 3\n3 2\n", "9\n2 2\n1 3\n2 4\n1 5\n1 2\n6 6\n7 8\n7 9\n", "9\n1 2\n2 3\n1 4\n2 5\n1 6\n8 7\n7 8\n7 9\n", "9\n4 2\n1 3\n2 4\n1 5\n1 2\n6 6\n7 8\n7 9\n", "9\n1 2\n2 3\n1 4\n2 5\n1 6\n8 7\n3 8\n7 9\n", "9\n1 4\n1 3\n1 4\n1 5\n2 6\n6 7\n7 8\n7 9\n", "9\n1 2\n3 3\n1 4\n1 5\n1 6\n9 7\n3 8\n7 9\n", "9\n1 2\n3 3\n1 4\n1 5\n1 6\n9 7\n9 8\n6 9\n", "9\n1 2\n1 3\n1 4\n1 5\n1 6\n6 7\n8 8\n8 9\n", "9\n1 2\n3 3\n1 4\n1 5\n1 6\n9 7\n7 8\n7 3\n", "9\n4 2\n1 3\n2 4\n1 5\n1 4\n6 6\n7 8\n7 9\n", "9\n1 8\n1 3\n1 4\n1 5\n2 6\n6 7\n7 8\n7 9\n", "9\n1 2\n1 3\n1 4\n1 5\n2 6\n6 7\n8 8\n8 9\n", "9\n1 8\n1 3\n1 4\n1 5\n2 6\n5 7\n7 8\n7 9\n", "9\n1 2\n1 3\n1 4\n1 5\n2 6\n6 7\n8 8\n2 9\n", "9\n2 2\n1 3\n1 4\n1 5\n2 6\n6 7\n8 8\n2 9\n", "9\n2 2\n1 3\n1 4\n1 5\n2 6\n6 7\n2 8\n2 9\n", "9\n2 2\n1 3\n1 4\n1 5\n2 6\n6 7\n1 8\n2 9\n", "9\n1 4\n2 3\n1 4\n1 5\n1 3\n6 7\n7 8\n7 9\n", "9\n1 2\n4 3\n1 4\n1 5\n1 6\n9 7\n7 8\n7 2\n", "9\n2 2\n1 3\n1 4\n1 5\n1 6\n6 2\n7 8\n7 9\n", "9\n2 1\n2 3\n1 4\n1 5\n1 6\n8 7\n7 8\n7 9\n", "9\n1 2\n3 4\n2 4\n1 5\n1 6\n9 2\n9 8\n7 9\n", "9\n1 1\n2 3\n1 4\n2 5\n1 6\n8 7\n7 8\n2 9\n", "9\n2 2\n2 3\n1 4\n2 5\n1 6\n8 7\n7 8\n7 9\n", "9\n1 2\n2 3\n1 4\n2 5\n1 6\n9 7\n3 8\n7 9\n", "9\n1 4\n1 3\n1 4\n1 5\n2 2\n6 7\n7 8\n7 9\n", "9\n1 2\n3 3\n2 4\n1 5\n1 6\n9 7\n7 8\n7 3\n"], "output": ["No\n", "Yes\n1\n1 2\n", "Yes\n3\n1 3\n1 4\n1 5\n", "Yes\n5\n1 2\n1 3\n1 4\n1 5\n1 9\n", "Yes\n1\n1 3\n", "Yes\n4\n1 3\n1 4\n1 8\n1 9\n", "Yes\n3\n3 1\n3 5\n3 6\n", "Yes\n3\n1 2\n1 3\n1 5\n", "Yes\n4\n1 3\n1 4\n1 5\n1 9\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n3\n1 3\n1 4\n1 5\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n1\n1 3\n", "No\n", "No\n", "No\n", "No\n", "Yes\n1\n1 2\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n"]}, "short_description": "1. One-sentence summary  \nCheck whether an undirected tree has at most one node of degree > 2 (so it is \u201cstar\u2010like\u201d), and if so, output that central node paired with every leaf (or the single edge between the two leaves when it\u2019s just a path).\n\n2. Core algorithmic approach  \n\u2013 Graph degree counting and classification in O(n).  \n(No complex traversal\u2014just a linear scan to compute degrees, identify leaves and high-degree nodes.)\n\n3. Reusable components  \n\u2013 Degree-count array construction: tally degrees as edges are read.  \n\u2013 Leaf extraction: collect all vertices whose degree == 1.  \n\u2013 High-degree vertex detection: find and validate that there is at most one vertex with degree > 2."}
{"name": "931_D. Peculiar apple-tree", "description": "In Arcady's garden there grows a peculiar apple-tree that fruits one time per year. Its peculiarity can be explained in following way: there are n inflorescences, numbered from 1 to n. Inflorescence number 1 is situated near base of tree and any other inflorescence with number i (i > 1) is situated at the top of branch, which bottom is pi-th inflorescence and pi < i.\n\nOnce tree starts fruiting, there appears exactly one apple in each inflorescence. The same moment as apples appear, they start to roll down along branches to the very base of tree. Each second all apples, except ones in first inflorescence simultaneously roll down one branch closer to tree base, e.g. apple in a-th inflorescence gets to pa-th inflorescence. Apples that end up in first inflorescence are gathered by Arcady in exactly the same moment. Second peculiarity of this tree is that once two apples are in same inflorescence they annihilate. This happens with each pair of apples, e.g. if there are 5 apples in same inflorescence in same time, only one will not be annihilated and if there are 8 apples, all apples will be annihilated. Thus, there can be no more than one apple in each inflorescence in each moment of time.\n\nHelp Arcady with counting number of apples he will be able to collect from first inflorescence during one harvest.\n\nInput\n\nFirst line of input contains single integer number n (2 \u2264 n \u2264 100 000) \u2014 number of inflorescences.\n\nSecond line of input contains sequence of n - 1 integer numbers p2, p3, ..., pn (1 \u2264 pi < i), where pi is number of inflorescence into which the apple from i-th inflorescence rolls down.\n\nOutput\n\nSingle line of output should contain one integer number: amount of apples that Arcady will be able to collect from first inflorescence during one harvest.\n\nExamples\n\nInput\n\n3\n1 1\n\n\nOutput\n\n1\n\n\nInput\n\n5\n1 2 2 2\n\n\nOutput\n\n3\n\n\nInput\n\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n\n\nOutput\n\n4\n\nNote\n\nIn first example Arcady will be able to collect only one apple, initially situated in 1st inflorescence. In next second apples from 2nd and 3rd inflorescences will roll down and annihilate, and Arcady won't be able to collect them.\n\nIn the second example Arcady will be able to collect 3 apples. First one is one initially situated in first inflorescence. In a second apple from 2nd inflorescence will roll down to 1st (Arcady will collect it) and apples from 3rd, 4th, 5th inflorescences will roll down to 2nd. Two of them will annihilate and one not annihilated will roll down from 2-nd inflorescence to 1st one in the next second and Arcady will collect it.", "solution": "from collections import Counter\n\ntree = []\n\n\nclass Node:\n    def __init__(self, num=None):\n        self.length = 0 if num is None else tree[num-1].length + 1\n\n\ndef main():\n    n = int(input())\n    global tree\n    tree = [Node()]\n\n    for x in input().split():\n        tree.append(Node(int(x)))\n\n    print(sum([value & 1 for key, value in Counter([x.length for x in tree]).items()]))\n\n\nif __name__ == \"__main__\":\n    main()\n", "difficulty": 10, "public_tests": {"input": ["18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n", "3\n1 1\n", "5\n1 2 2 2\n"], "output": ["4\n", "1\n", "3\n"]}, "private_tests": {"input": ["10\n1 2 3 4 5 5 5 7 9\n", "50\n1 1 3 3 4 5 5 2 4 3 9 9 1 5 5 7 5 5 16 1 18 3 6 5 6 13 26 12 23 20 17 21 9 17 19 34 12 24 11 9 32 10 40 42 7 40 11 25 3\n", "30\n1 1 1 1 2 1 4 4 2 3 2 1 1 1 1 3 1 1 3 2 3 5 1 2 9 16 2 4 3\n", "50\n1 1 1 1 3 4 1 2 3 5 1 2 1 5 1 10 4 11 1 8 8 4 4 12 5 3 4 1 1 2 5 13 13 2 2 10 12 3 19 14 1 1 15 3 23 21 12 3 14\n", "20\n1 2 1 2 2 1 2 4 1 6 2 2 4 3 2 6 2 5 9\n", "50\n1 1 1 1 1 2 3 3 2 1 1 2 3 1 3 1 5 6 4 1 1 2 1 2 1 10 17 2 2 4 12 9 6 6 5 13 1 3 2 8 25 3 22 1 10 13 6 3 2\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "40\n1 1 1 2 1 2 1 2 4 8 1 7 1 6 2 8 2 12 4 11 5 5 15 3 12 11 22 11 13 13 24 6 10 15 3 6 7 1 2\n", "100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n", "20\n1 1 1 4 2 4 3 1 2 8 3 2 11 13 15 1 12 13 12\n", "10\n1 1 1 1 2 1 3 4 3\n", "30\n1 2 2 4 5 6 5 7 9 6 4 12 7 14 12 12 15 17 13 12 8 20 21 15 17 24 21 19 16\n", "20\n1 1 1 1 1 4 1 2 4 1 2 1 7 1 2 2 9 7 1\n", "99\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98\n", "50\n1 2 2 4 5 5 7 6 9 10 11 12 13 7 14 15 14 17 10 14 9 21 23 23 19 26 19 25 11 24 22 27 26 34 35 30 37 31 38 32 40 32 42 44 37 21 40 40 48\n", "10\n1 2 3 4 3 6 6 6 7\n", "50\n1 2 1 1 1 3 1 3 1 5 3 2 7 3 6 6 3 1 4 2 3 10 8 9 1 4 5 2 8 6 12 9 7 5 7 19 3 15 10 4 12 4 19 5 16 5 3 13 5\n", "10\n1 1 1 2 3 2 1 2 3\n", "30\n1 1 1 1 3 3 2 3 7 4 1 2 4 6 2 8 1 2 13 7 5 15 3 3 8 4 4 18 3\n", "10\n1 1 1 1 2 4 1 1 3\n", "40\n1 2 2 2 2 4 2 2 6 9 3 9 9 9 3 5 7 7 2 17 4 4 8 8 25 18 12 27 8 19 26 15 33 26 33 9 24 4 27\n", "20\n1 2 3 4 5 6 7 8 9 6 11 12 12 7 13 15 16 11 13\n", "40\n1 1 1 2 2 1 1 4 6 4 7 7 7 4 4 8 10 7 5 1 5 13 7 8 2 11 18 2 1 20 7 3 12 16 2 22 4 22 14\n", "2\n1\n", "50\n1 2 3 3 4 3 6 7 8 10 11 10 12 11 11 14 13 8 17 20 21 19 15 18 21 18 17 23 25 28 25 27 29 32 32 34 37 29 30 39 41 35 24 41 37 36 41 35 43\n", "10\n1 2 2 4 5 5 6 4 7\n", "40\n1 1 1 2 3 1 2 1 3 7 1 3 4 3 2 3 4 1 2 2 4 1 7 4 1 3 2 1 4 5 3 10 14 11 10 13 8 7 4\n", "20\n1 2 2 4 3 5 5 6 6 9 11 9 9 12 13 10 15 13 15\n", "30\n1 2 1 1 1 2 1 4 2 3 9 2 3 2 1 1 4 3 12 4 8 8 3 7 9 1 9 19 1\n", "40\n1 1 1 1 1 1 1 1 1 3 4 3 3 1 3 6 7 4 5 2 4 3 9 1 4 2 5 3 5 9 5 9 10 12 3 7 2 11 1\n", "30\n1 2 3 4 5 6 5 3 6 7 8 11 12 13 15 15 13 13 19 10 14 10 15 23 21 9 27 22 28\n", "99\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\n1 1 1 2 1 3 4 2 1\n", "30\n1 2 2 1 5 5 5 1 7 4 10 2 4 11 2 3 10 10 7 13 12 4 10 3 22 25 8 1 1\n", "50\n1 1 1 2 2 1 3 5 3 1 9 4 4 2 12 15 3 13 8 8 4 13 20 17 19 2 4 3 9 5 17 9 17 1 5 7 6 5 20 11 31 33 32 20 6 25 1 2 6\n", "3\n1 2\n", "30\n1 1 1 2 1 2 1 1 2 1 1 1 2 2 4 3 6 2 3 5 3 4 11 5 3 3 4 7 6\n", "10\n1 2 1 2 5 5 6 6 6\n", "50\n1 2 3 4 5 5 5 7 1 2 11 5 7 11 11 11 15 3 17 10 6 18 14 14 24 11 10 7 17 18 8 7 19 18 31 27 21 30 34 32 27 39 38 22 32 23 31 48 25\n", "30\n1 1 3 3 5 6 7 5 7 6 5 4 8 6 10 12 14 9 15 20 6 21 14 24 17 23 23 18 8\n", "40\n1 2 3 4 4 6 6 4 9 9 10 12 10 12 12 16 8 13 18 14 17 20 21 23 25 22 25 26 29 26 27 27 33 31 33 34 36 29 34\n", "30\n1 2 3 3 5 6 3 8 9 10 10 10 11 7 8 8 15 16 13 13 19 12 15 18 18 24 27 25 10\n", "50\n1 2 2 2 5 6 7 7 9 10 7 4 5 4 15 15 16 17 10 19 18 16 15 24 20 8 27 16 19 24 23 32 17 23 29 18 35 35 38 35 39 41 42 38 19 46 38 28 29\n", "10\n1 1 1 3 3 5 6 8 3\n", "40\n1 2 2 3 3 6 5 5 9 7 8 11 13 7 10 10 16 14 18 20 11 19 23 18 20 21 25 16 29 25 27 31 26 34 33 23 36 33 32\n", "40\n1 2 2 3 1 2 5 6 4 8 11 12 9 5 12 7 4 16 16 15 6 22 17 24 10 8 22 4 27 9 19 23 16 18 28 22 5 35 19\n", "40\n1 2 3 4 5 6 6 8 7 10 11 3 12 11 15 12 17 15 10 20 16 20 12 20 15 21 20 26 29 23 29 30 23 24 35 33 25 32 36\n"], "output": ["8\n", "6\n", "2\n", "4\n", "2\n", "4\n", "2\n", "2\n", "100\n", "4\n", "2\n", "4\n", "2\n", "99\n", "10\n", "4\n", "2\n", "2\n", "2\n", "2\n", "4\n", "8\n", "4\n", "2\n", "10\n", "2\n", "2\n", "4\n", "2\n", "2\n", "4\n", "1\n", "2\n", "6\n", "4\n", "3\n", "4\n", "2\n", "2\n", "2\n", "10\n", "6\n", "6\n", "4\n", "6\n", "4\n", "8\n"]}, "generated_tests": {"input": ["10\n1 2 3 4 5 5 5 4 9\n", "50\n1 1 3 3 4 5 5 2 1 3 9 9 1 5 5 7 5 5 16 1 18 3 6 5 6 13 26 12 23 20 17 21 9 17 19 34 12 24 11 9 32 10 40 42 7 40 11 25 3\n", "30\n1 1 1 1 2 1 4 4 2 3 2 1 1 1 1 3 1 1 3 2 3 5 1 2 9 23 2 4 3\n", "99\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "40\n1 2 3 4 5 6 6 8 7 10 11 3 12 11 15 12 17 15 10 20 16 20 12 20 15 21 20 26 29 23 29 30 17 24 35 33 25 32 36\n", "30\n1 2 3 4 5 6 5 3 6 7 8 11 12 13 15 15 5 13 19 10 14 5 15 23 21 9 27 22 28\n", "50\n1 1 1 1 3 4 1 2 3 5 1 2 1 5 1 10 4 11 1 8 8 4 4 12 5 3 4 1 1 2 5 18 13 2 2 10 12 3 19 14 1 1 15 3 23 21 12 3 14\n", "20\n1 2 1 2 2 1 2 4 1 7 2 2 4 3 2 6 2 5 9\n", "50\n1 1 1 1 1 2 3 3 2 1 1 2 3 1 3 1 5 6 4 1 1 2 1 2 1 10 17 2 2 4 12 9 6 6 5 13 1 3 2 8 25 3 22 1 10 13 6 1 2\n", "10\n1 1 1 1 2 1 3 4 4\n", "30\n1 2 2 4 5 6 5 7 9 6 4 12 13 14 12 12 15 17 13 12 8 20 21 15 17 24 21 19 16\n", "20\n1 1 1 1 1 4 1 2 4 1 2 2 7 1 2 2 9 7 1\n", "10\n1 2 3 4 3 6 6 6 4\n", "50\n1 2 1 1 1 3 1 3 1 5 3 2 7 3 6 6 3 1 4 2 3 10 8 9 1 4 5 2 8 6 12 11 7 5 7 19 3 15 10 4 12 4 19 5 16 5 3 13 5\n", "10\n1 1 2 2 3 2 1 2 3\n", "30\n1 1 1 1 3 3 2 3 7 4 1 2 4 6 2 8 1 2 13 7 5 12 3 3 8 4 4 18 3\n", "40\n1 2 2 2 2 4 2 2 6 9 3 9 9 9 3 5 7 7 2 17 4 4 6 8 25 18 12 27 8 19 26 15 33 26 33 9 24 4 27\n", "40\n1 1 1 2 2 1 1 4 6 4 7 7 7 4 4 8 10 7 5 1 5 13 7 8 2 11 18 2 1 20 7 3 12 16 2 4 4 22 14\n", "10\n1 2 2 4 5 5 6 4 1\n", "40\n1 1 1 2 3 1 2 1 3 7 1 3 4 3 2 3 7 1 2 2 4 1 7 4 1 3 2 1 4 5 3 10 14 11 10 13 8 7 4\n", "40\n1 1 1 1 1 1 1 1 2 3 4 3 3 1 3 6 7 4 5 2 4 3 9 1 4 2 5 3 5 9 5 9 10 12 3 7 2 11 1\n", "30\n1 2 3 4 5 6 5 3 6 7 8 11 12 13 15 15 13 13 19 10 14 5 15 23 21 9 27 22 28\n", "10\n1 1 1 2 1 3 3 2 1\n", "30\n1 2 2 1 5 5 5 1 7 4 10 2 4 11 2 3 10 10 7 13 7 4 10 3 22 25 8 1 1\n", "50\n1 1 1 2 2 1 3 5 3 1 9 4 4 2 12 15 2 13 8 8 4 13 20 17 19 2 4 3 9 5 17 9 17 1 5 7 6 5 20 11 31 33 32 20 6 25 1 2 6\n", "30\n1 1 1 2 1 2 1 1 2 1 1 1 2 2 4 3 6 2 3 5 3 4 11 1 3 3 4 7 6\n", "50\n1 2 3 4 5 5 5 7 1 2 11 5 7 11 11 11 15 3 17 10 6 18 14 14 24 11 10 7 17 18 8 7 19 18 31 27 21 30 34 32 29 39 38 22 32 23 31 48 25\n", "50\n1 2 2 2 5 6 7 7 9 10 7 4 5 4 15 15 16 17 10 19 18 16 8 24 20 8 27 16 19 24 23 32 17 23 29 18 35 35 38 35 39 41 42 38 19 46 38 28 29\n", "40\n1 2 2 3 1 2 5 2 4 8 11 12 9 5 12 7 4 16 16 15 6 22 17 24 10 8 22 4 27 9 19 23 16 18 28 22 5 35 19\n", "18\n1 1 1 4 4 3 2 1 2 10 8 9 9 9 10 10 4\n", "50\n1 1 3 3 4 5 5 2 1 3 9 9 1 5 5 7 5 5 16 1 18 3 6 5 12 13 26 12 23 20 17 21 9 17 19 34 12 24 11 9 32 10 40 42 7 40 11 25 3\n", "30\n1 1 1 1 2 1 4 8 2 3 2 1 1 1 1 3 1 1 3 2 3 5 1 2 9 23 2 4 3\n", "20\n1 2 1 2 2 1 2 4 1 7 2 2 4 3 2 6 2 3 9\n", "50\n1 2 1 1 1 3 1 3 1 5 3 2 7 3 8 6 3 1 4 2 3 10 8 9 1 4 5 2 8 6 12 11 7 5 7 19 3 15 10 4 12 4 19 5 16 5 3 13 5\n", "40\n1 2 2 2 2 4 2 2 6 9 3 9 9 9 3 5 7 7 2 17 4 4 6 8 25 18 12 27 8 1 26 15 33 26 33 9 24 4 27\n", "10\n1 2 2 4 5 5 5 4 1\n", "40\n1 1 1 2 2 1 2 1 3 7 1 3 4 3 2 3 7 1 2 2 4 1 7 4 1 3 2 1 4 5 3 10 14 11 10 13 8 7 4\n", "40\n1 1 1 1 1 1 1 1 2 3 4 3 3 1 3 6 7 4 5 2 4 3 11 1 4 2 5 3 5 9 5 9 10 12 3 7 2 11 1\n", "30\n1 2 2 1 5 5 5 1 7 4 10 2 4 11 2 3 10 8 7 13 7 4 10 3 22 25 8 1 1\n", "50\n1 1 1 2 2 1 3 5 3 1 9 4 4 2 12 15 2 13 8 8 4 13 20 17 19 2 4 3 9 5 17 9 17 1 5 7 11 5 20 11 31 33 32 20 6 25 1 2 6\n", "30\n1 1 1 2 1 2 1 1 2 1 1 1 2 2 4 3 6 2 6 5 3 4 11 1 3 3 4 7 6\n", "50\n1 2 3 4 5 5 5 7 1 2 11 5 7 11 11 11 15 3 17 10 6 18 14 14 24 11 10 7 17 18 8 7 19 18 26 27 21 30 34 32 29 39 38 22 32 23 31 48 25\n", "50\n1 2 2 2 5 6 7 7 9 7 7 4 5 4 15 15 16 17 10 19 18 16 8 24 20 8 27 16 19 24 23 32 17 23 29 18 35 35 38 35 39 41 42 38 19 46 38 28 29\n", "40\n1 2 3 4 5 6 6 8 7 10 11 3 12 11 15 12 17 15 10 20 16 20 12 20 15 21 20 26 29 23 29 30 17 22 35 33 25 32 36\n", "18\n1 1 1 4 4 3 2 1 2 10 8 9 9 9 10 1 4\n", "50\n1 1 3 3 4 5 5 2 1 3 9 9 1 5 5 1 5 5 16 1 18 3 6 5 12 13 26 12 23 20 17 21 9 17 19 34 12 24 11 9 32 10 40 42 7 40 11 25 3\n", "30\n1 1 1 1 2 1 4 8 2 3 2 1 1 2 1 3 1 1 3 2 3 5 1 2 9 23 2 4 3\n", "20\n1 2 1 2 2 1 2 4 1 7 2 2 4 3 1 6 2 3 9\n", "50\n1 2 1 1 1 3 1 3 1 5 3 2 7 3 8 6 3 1 4 2 3 10 8 9 1 4 5 2 8 6 12 11 7 5 7 19 3 15 10 4 16 4 19 5 16 5 3 13 5\n", "40\n1 2 2 2 2 4 2 2 6 4 3 9 9 9 3 5 7 7 2 17 4 4 6 8 25 18 12 27 8 1 26 15 33 26 33 9 24 4 27\n", "10\n1 2 2 4 5 5 7 4 1\n", "40\n1 1 1 2 2 1 2 1 3 7 1 3 4 3 2 3 7 1 2 2 4 1 7 4 1 3 2 1 4 5 3 10 14 11 10 13 8 3 4\n", "40\n1 1 1 1 1 1 1 1 2 3 4 3 4 1 3 6 7 4 5 2 4 3 11 1 4 2 5 3 5 9 5 9 10 12 3 7 2 11 1\n", "30\n1 2 3 4 5 6 5 3 6 7 8 11 12 13 15 15 5 13 12 10 14 5 15 23 21 9 27 22 28\n", "30\n1 2 2 1 5 5 5 1 7 4 10 2 4 11 2 4 10 8 7 13 7 4 10 3 22 25 8 1 1\n", "50\n1 1 1 2 2 1 3 5 3 1 9 4 4 2 12 15 2 13 8 8 4 13 20 17 19 2 4 3 9 5 17 9 17 1 5 7 11 5 20 11 31 33 32 20 6 3 1 2 6\n"], "output": ["4\n", "6\n", "2\n", "3\n", "10\n", "8\n", "4\n", "2\n", "2\n", "2\n", "4\n", "4\n", "4\n", "4\n", "2\n", "2\n", "4\n", "4\n", "2\n", "2\n", "4\n", "6\n", "2\n", "4\n", "4\n", "2\n", "4\n", "6\n", "4\n", "2\n", "6\n", "2\n", "2\n", "4\n", "4\n", "2\n", "2\n", "2\n", "4\n", "4\n", "2\n", "6\n", "8\n", "8\n", "4\n", "2\n", "4\n", "2\n", "2\n", "4\n", "2\n", "2\n", "2\n", "8\n", "4\n", "6\n"]}, "short_description": "1. One-sentence summary  \nGiven a rooted\u2010tree encoded by parent indexes, compute each node\u2019s depth and then count how many distinct depths occur an odd number of times.  \n\n2. Core algorithmic approach  \nSingle\u2010pass dynamic programming on parent pointers to compute node depths in O(n), followed by a frequency count (hash map) and a parity check.  \n\n3. Reusable components  \n- Depth\u2010by\u2010parent DP: compute depth[i] = depth[parent[i]] + 1 for a tree given as parent pointers.  \n- Histogram with parity check: use a hash map or Counter to tally occurrences of each value and then sum up counts mod 2.  \n- Bitwise parity accumulation: value & 1 to test oddness when summing up results."}
{"name": "796_C. Bank Hacking", "description": "Although Inzane successfully found his beloved bone, Zane, his owner, has yet to return. To search for Zane, he would need a lot of money, of which he sadly has none. To deal with the problem, he has decided to hack the banks.\n\n<image>\n\nThere are n banks, numbered from 1 to n. There are also n - 1 wires connecting the banks. All banks are initially online. Each bank also has its initial strength: bank i has initial strength ai.\n\nLet us define some keywords before we proceed. Bank i and bank j are neighboring if and only if there exists a wire directly connecting them. Bank i and bank j are semi-neighboring if and only if there exists an online bank k such that bank i and bank k are neighboring and bank k and bank j are neighboring.\n\nWhen a bank is hacked, it becomes offline (and no longer online), and other banks that are neighboring or semi-neighboring to it have their strengths increased by 1.\n\nTo start his plan, Inzane will choose a bank to hack first. Indeed, the strength of such bank must not exceed the strength of his computer. After this, he will repeatedly choose some bank to hack next until all the banks are hacked, but he can continue to hack bank x if and only if all these conditions are met:\n\n  1. Bank x is online. That is, bank x is not hacked yet. \n  2. Bank x is neighboring to some offline bank. \n  3. The strength of bank x is less than or equal to the strength of Inzane's computer. \n\n\n\nDetermine the minimum strength of the computer Inzane needs to hack all the banks.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 3\u00b7105) \u2014 the total number of banks.\n\nThe second line contains n integers a1, a2, ..., an ( - 109 \u2264 ai \u2264 109) \u2014 the strengths of the banks.\n\nEach of the next n - 1 lines contains two integers ui and vi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi) \u2014 meaning that there is a wire directly connecting banks ui and vi.\n\nIt is guaranteed that the wires connect the banks in such a way that Inzane can somehow hack all the banks using a computer with appropriate strength.\n\nOutput\n\nPrint one integer \u2014 the minimum strength of the computer Inzane needs to accomplish the goal.\n\nExamples\n\nInput\n\n5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n5\n\nInput\n\n7\n38 -29 87 93 39 28 -55\n1 2\n2 5\n3 2\n2 4\n1 7\n7 6\n\n\nOutput\n\n93\n\nInput\n\n5\n1 2 7 6 7\n1 5\n5 3\n3 4\n2 4\n\n\nOutput\n\n8\n\nNote\n\nIn the first sample, Inzane can hack all banks using a computer with strength 5. Here is how:\n\n  * Initially, strengths of the banks are [1, 2, 3, 4, 5]. \n  * He hacks bank 5, then strengths of the banks become [1, 2, 4, 5, - ]. \n  * He hacks bank 4, then strengths of the banks become [1, 3, 5, - , - ]. \n  * He hacks bank 3, then strengths of the banks become [2, 4, - , - , - ]. \n  * He hacks bank 2, then strengths of the banks become [3, - , - , - , - ]. \n  * He completes his goal by hacking bank 1. \n\n\n\nIn the second sample, Inzane can hack banks 4, 2, 3, 1, 5, 7, and 6, in this order. This way, he can hack all banks using a computer with strength 93.", "solution": "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\nn = int(input())\narr = list(int(i) for i in input().split()) + [-int(1e9+3)]\nc = Counter(arr)\ntop, sec = sorted(set(arr))[-1:-3:-1]\ntop_cnt = [int(i == top) for i in arr]\nsec_cnt = [int(i == sec) for i in arr]\n\nedges = list(list(map(int, input().split())) for _ in range(n-1))\nfor u, v in edges:\n    if arr[u-1] == top: top_cnt[v-1] += 1\n    if arr[v-1] == top: top_cnt[u-1] += 1\n    if arr[u-1] == sec: sec_cnt[v-1] += 1\n    if arr[v-1] == sec: sec_cnt[u-1] += 1\n\nres = top + 2\nfor i in range(n):\n    if top_cnt[i] < c[top]: \n        continue\n    if top_cnt[i] == 1 and arr[i] == top:\n        curr = top  \n    else: \n        curr = top+1 \n    if sec_cnt[i] < c[sec]: \n        curr = max(curr, sec+2)\n    res = min(res, curr)\nprint(res)\n", "difficulty": 9, "public_tests": {"input": ["5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n", "5\n1 2 7 6 7\n1 5\n5 3\n3 4\n2 4\n", "7\n38 -29 87 93 39 28 -55\n1 2\n2 5\n3 2\n2 4\n1 7\n7 6\n"], "output": ["5\n", "8\n", "93\n"]}, "private_tests": {"input": ["2\n999999999 1000000000\n2 1\n", "5\n-1 -1000000000 -1 -2 -1\n5 2\n1 2\n3 2\n4 1\n", "3\n-1000000000 -999999999 -1000000000\n1 2\n3 1\n", "3\n-999999999 -999999998 -1000000000\n2 3\n1 2\n", "2\n-1000000000 -1\n1 2\n", "5\n0 0 0 0 0\n3 2\n1 2\n5 1\n4 2\n", "2\n0 1\n2 1\n", "5\n1000000000 0 1000000000 0 1000000000\n1 2\n2 3\n3 4\n4 5\n", "2\n1000000000 1000000000\n2 1\n", "3\n1000000000 -1000000000 1000000000\n1 2\n2 3\n", "3\n999397 999397 999397\n2 3\n2 1\n", "3\n10 1 10\n1 2\n2 3\n", "2\n-1000000000 -1000000000\n2 1\n", "3\n0 0 0\n1 3\n2 3\n", "3\n7 6 7\n1 2\n2 3\n", "3\n1000000000 1000000000 1000000000\n1 3\n2 1\n", "1\n1000000000\n", "3\n2 1 2\n1 2\n2 3\n", "3\n-1 -1000000000 -1000000000\n2 1\n3 1\n", "4\n1 2 2 2\n1 2\n1 3\n1 4\n", "2\n-999999999 -1000000000\n1 2\n", "1\n-11\n", "3\n999999998 999999998 999999998\n1 3\n2 1\n", "1\n0\n", "6\n10 1 10 1 1 1\n1 2\n2 3\n3 4\n4 5\n5 6\n", "1\n-1000000000\n", "3\n-1000000000 -1000000000 -1000000000\n3 1\n2 1\n", "4\n0 0 0 -1\n3 1\n4 1\n2 4\n", "10\n-2 -1000000000 -2 -1000000000 -2 -5 -3 -1 -2 -1000000000\n8 6\n10 6\n5 10\n3 10\n7 5\n2 8\n1 6\n4 1\n9 5\n", "3\n8 7 8\n1 2\n2 3\n", "3\n1 0 0\n2 1\n3 2\n", "6\n5 5 5 4 4 4\n1 2\n1 3\n3 4\n3 5\n3 6\n", "5\n-1 -1 -1 0 0\n4 3\n5 3\n1 4\n2 5\n", "10\n-1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000\n10 3\n7 4\n2 6\n9 2\n5 10\n1 8\n7 8\n7 2\n10 6\n", "4\n1 -2 2 2\n4 3\n2 4\n1 2\n", "4\n1000000000 -1000000000 -1000000000 1000000000\n1 2\n3 2\n4 3\n", "4\n0 0 0 0\n2 4\n1 4\n3 2\n", "7\n5 0 0 0 0 5 5\n1 2\n1 3\n1 4\n1 5\n4 6\n4 7\n", "4\n7 1 1 7\n1 2\n1 3\n3 4\n", "3\n2 2 2\n3 2\n1 2\n", "3\n999999999 1000000000 1000000000\n2 1\n3 2\n", "4\n1 93 93 93\n1 2\n1 3\n1 4\n", "5\n-2 -1 -2 1 0\n3 1\n5 1\n2 1\n4 2\n", "6\n10 10 10 1 1 1\n1 2\n2 3\n3 4\n1 5\n1 6\n", "2\n0 0\n2 1\n", "3\n-2 -2 2\n1 3\n2 1\n", "5\n1 1 7 7 7\n1 3\n2 3\n3 4\n4 5\n"], "output": ["1000000000\n", "0\n", "-999999998\n", "-999999998\n", "-1\n", "2\n", "1\n", "1000000002\n", "1000000001\n", "1000000001\n", "999398\n", "11\n", "-999999999\n", "1\n", "8\n", "1000000001\n", "1000000000\n", "3\n", "-1\n", "3\n", "-999999999\n", "-11\n", "999999999\n", "0\n", "11\n", "-1000000000\n", "-999999999\n", "2\n", "0\n", "9\n", "2\n", "6\n", "1\n", "-999999998\n", "3\n", "1000000002\n", "2\n", "6\n", "8\n", "3\n", "1000000001\n", "94\n", "2\n", "11\n", "1\n", "2\n", "8\n"]}, "generated_tests": {"input": ["2\n998581997 1000000000\n2 1\n", "3\n-1000000000 -999999999 -1000000000\n1 2\n3 2\n", "2\n-11456988 -1\n1 2\n", "2\n1 1\n2 1\n", "3\n1347115 999397 999397\n2 3\n2 1\n", "3\n10 1 1\n1 2\n2 3\n", "3\n0 0 0\n1 2\n2 3\n", "3\n7 3 7\n1 2\n2 3\n", "6\n10 0 10 1 1 1\n1 2\n2 3\n3 4\n4 5\n5 6\n", "10\n-2 -1000000000 -2 -1000000000 -2 -5 -3 -1 -2 -1000000000\n8 6\n10 6\n5 10\n3 10\n7 5\n2 8\n1 6\n4 1\n9 2\n", "10\n-1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -564301051 -1000000000 -1000000000 -1000000000\n10 3\n7 4\n2 6\n9 2\n5 10\n1 8\n7 8\n7 2\n10 6\n", "4\n1000000000 -1611858850 -1000000000 1000000000\n1 2\n3 2\n4 3\n", "4\n1 93 93 106\n1 2\n1 3\n1 4\n", "6\n10 12 10 1 1 1\n1 2\n2 3\n3 4\n1 5\n1 6\n", "1\n4\n", "10\n-1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -809685659 -1000000000 -1000000000 -1000000000\n10 3\n7 4\n2 6\n9 2\n5 10\n1 8\n7 8\n7 2\n10 6\n", "4\n1 93 93 47\n1 2\n1 3\n1 4\n", "1\n-2\n", "1\n3\n", "1\n-3\n", "1\n7\n", "1\n-5\n", "1\n9\n", "1\n-6\n", "1\n18\n", "1\n5\n", "1\n27\n", "1\n-4\n", "1\n44\n", "1\n-8\n", "1\n-7\n", "1\n-15\n", "1\n-10\n", "1\n-16\n", "1\n-20\n", "1\n-32\n", "1\n-35\n", "1\n-9\n", "1\n-26\n", "3\n2 1 0\n1 2\n2 3\n", "1\n1\n", "1\n-1\n", "3\n1 1 0\n2 1\n3 2\n", "4\n0 -1 0 0\n2 4\n1 4\n3 2\n", "3\n0 1 0\n1 2\n2 3\n", "1\n2\n", "10\n-2 -1000000000 -2 -1000000000 -2 -5 -3 -1 -2 -1386946323\n8 6\n10 6\n5 10\n3 10\n7 5\n2 8\n1 6\n4 1\n9 2\n", "4\n1000000000 -1140123052 -1000000000 1000000000\n1 2\n3 2\n4 3\n", "4\n0 -1 0 0\n3 4\n1 4\n3 2\n", "10\n-2 -1000000000 -2 -1000000000 -2 -5 -6 -1 -2 -1386946323\n8 6\n10 6\n5 10\n3 10\n7 5\n2 8\n1 6\n4 1\n9 2\n", "10\n-1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -809685659 -1000000000 -1000000000 -1000000000\n10 3\n7 4\n2 6\n9 2\n5 3\n1 8\n7 8\n7 2\n10 6\n", "4\n0 -1 0 -1\n3 4\n1 4\n3 2\n"], "output": ["1000000000\n", "-999999999\n", "-1\n", "2\n", "1347115\n", "10\n", "1\n", "8\n", "11\n", "0\n", "-564301051\n", "1000000002\n", "106\n", "12\n", "4\n", "-809685659\n", "94\n", "-2\n", "3\n", "-3\n", "7\n", "-5\n", "9\n", "-6\n", "18\n", "5\n", "27\n", "-4\n", "44\n", "-8\n", "-7\n", "-15\n", "-10\n", "-16\n", "-20\n", "-32\n", "-35\n", "-9\n", "-26\n", "2\n", "1\n", "-1\n", "2\n", "2\n", "1\n", "2\n", "0\n", "1000000002\n", "1\n", "0\n", "-809685659\n", "1\n"]}, "short_description": "1. One-sentence summary:  \nGiven a tree whose vertices carry integer labels, the code computes the smallest \u201ccost\u201d threshold so that there exists a vertex that directly \u201ccovers\u201d (is itself or adjacent to) every occurrence of the two most frequent labels, with different cost contributions depending on whether the vertex itself has that label.\n\n2. Core algorithmic approach:  \nThis is essentially a single-pass graph\u2010counting on a tree (O(n)) combined with frequency analysis (using a hash counter) and a linear scan to evaluate candidate centers. No heavy graph algorithms are needed beyond constructing adjacency lists and iterating over edges once.\n\n3. Reusable components:  \n- Label frequency extraction via Counter + identification of top-k frequent keys.  \n- Building and traversing an adjacency list to accumulate per-node counts of special labels in O(n).  \n- A pattern for evaluating a global minimum over all nodes by checking simple per-node coverage constraints."}
{"name": "982_C. Cut 'em all!", "description": "You're given a tree with n vertices.\n\nYour task is to determine the maximum possible number of edges that can be removed in such a way that all the remaining connected components will have even size.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) denoting the size of the tree. \n\nThe next n - 1 lines contain two integers u, v (1 \u2264 u, v \u2264 n) each, describing the vertices connected by the i-th edge.\n\nIt's guaranteed that the given edges form a tree.\n\nOutput\n\nOutput a single integer k \u2014 the maximum number of edges that can be removed to leave all connected components with even size, or -1 if it is impossible to remove edges in order to satisfy this property.\n\nExamples\n\nInput\n\n4\n2 4\n4 1\n3 1\n\n\nOutput\n\n1\n\nInput\n\n3\n1 2\n1 3\n\n\nOutput\n\n-1\n\nInput\n\n10\n7 1\n8 4\n8 10\n4 7\n6 5\n9 3\n3 5\n2 10\n2 5\n\n\nOutput\n\n4\n\nInput\n\n2\n1 2\n\n\nOutput\n\n0\n\nNote\n\nIn the first example you can remove the edge between vertices 1 and 4. The graph after that will have two connected components with two vertices in each.\n\nIn the second example you can't remove edges in such a way that all components have even number of vertices, so the answer is -1.", "solution": "from collections import  defaultdict\nimport threading\nfrom sys import stdin,setrecursionlimit\nsetrecursionlimit(300000)\ninput=stdin.readline\n\ndef dfs(node,g,par,sz):\n\tfor i in g[node]:\n\t\tif i!=par:\n\t\t\tsz[node]+=dfs(i,g,node,sz)\n\treturn sz[node]+1\ndef main():\n\tn=int(input())\n\tif n%2!=0:\n\t\tprint(-1)\n\t\texit(0)\n\tg=defaultdict(list)\n\tfor i in range(n-1):\n\t\tx,y=map(int,input().strip().split())\n\t\tg[x-1].append(y-1)\n\t\tg[y-1].append(x-1)\n\n\tsz=[0]*(n)\n\ttt=[]\n\tdfs(0,g,-1,sz)\n\tres=0\n\t# print(sz)\n\tfor i in range(1,n):\n\t\tif sz[i]%2!=0:\n\t\t\tres+=1\n\tprint(res)\n\nthreading.stack_size(10 ** 8)\nt = threading.Thread(target=main)\nt.start()\nt.join()", "difficulty": 9, "public_tests": {"input": ["4\n2 4\n4 1\n3 1\n", "2\n1 2\n", "10\n7 1\n8 4\n8 10\n4 7\n6 5\n9 3\n3 5\n2 10\n2 5\n", "3\n1 2\n1 3\n"], "output": ["1\n", "0\n", "4\n", "-1\n"]}, "private_tests": {"input": ["1\n", "4\n1 2\n1 3\n1 4\n"], "output": ["-1\n", "0\n"]}, "generated_tests": {"input": ["10\n7 1\n8 4\n8 10\n4 7\n6 10\n9 3\n3 5\n2 10\n2 5\n", "4\n2 4\n2 1\n3 1\n", "4\n2 4\n2 1\n3 2\n", "3\n1 2\n2 3\n", "10\n7 1\n8 4\n8 10\n4 7\n6 5\n9 2\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 10\n6 7\n6 5\n9 2\n3 6\n2 10\n2 5\n", "4\n2 3\n4 1\n3 1\n", "4\n1 2\n1 3\n2 4\n", "3\n1 3\n2 3\n", "4\n1 2\n2 3\n2 4\n", "2\n2 1\n", "10\n7 1\n8 4\n8 10\n6 7\n6 5\n9 2\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 10\n6 7\n6 5\n9 2\n3 5\n1 10\n2 5\n", "4\n2 3\n4 2\n3 1\n", "3\n1 3\n2 1\n", "4\n2 3\n4 3\n3 1\n", "3\n2 3\n2 1\n", "10\n8 1\n8 4\n8 10\n4 7\n6 10\n9 3\n3 5\n2 10\n2 5\n", "4\n1 4\n2 1\n3 1\n", "10\n7 1\n5 4\n8 10\n6 7\n6 5\n9 2\n3 5\n1 10\n2 5\n", "4\n2 1\n4 1\n3 1\n", "4\n2 3\n4 1\n2 1\n", "4\n1 4\n1 3\n2 4\n", "10\n4 1\n8 4\n8 10\n4 7\n6 5\n9 2\n3 5\n2 10\n2 5\n", "4\n2 1\n4 2\n3 1\n", "10\n7 1\n8 4\n8 10\n6 7\n6 5\n9 2\n3 6\n3 10\n2 5\n", "3\n2 3\n3 1\n", "10\n4 1\n10 4\n8 10\n4 7\n6 5\n9 2\n3 5\n2 10\n2 5\n", "4\n2 1\n4 3\n3 1\n", "10\n7 1\n8 4\n8 10\n6 7\n6 5\n9 2\n4 6\n3 10\n2 5\n", "10\n7 1\n8 4\n8 10\n6 7\n6 5\n9 2\n4 2\n3 10\n2 5\n", "10\n7 1\n8 4\n8 10\n6 7\n7 5\n9 2\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 2\n6 7\n6 5\n9 2\n3 6\n2 10\n2 5\n", "4\n2 1\n4 2\n3 2\n", "4\n2 1\n4 3\n4 1\n", "4\n3 4\n2 1\n3 2\n", "10\n7 1\n8 4\n8 10\n6 7\n6 5\n9 2\n3 9\n2 10\n2 5\n", "10\n6 1\n8 4\n8 10\n6 7\n6 5\n9 2\n3 5\n1 10\n2 5\n", "10\n7 1\n8 4\n8 10\n6 7\n6 9\n9 2\n3 6\n2 10\n2 5\n", "10\n4 1\n8 4\n8 10\n4 7\n6 3\n9 2\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 10\n6 7\n6 5\n9 2\n3 6\n3 10\n2 6\n", "10\n4 1\n10 4\n8 10\n4 7\n6 1\n9 2\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 10\n6 7\n6 8\n9 2\n4 2\n3 10\n2 5\n", "10\n7 1\n8 4\n8 2\n6 7\n6 5\n9 2\n3 8\n2 10\n2 5\n", "4\n3 4\n3 1\n3 2\n", "10\n6 1\n8 4\n8 10\n6 7\n6 5\n9 2\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 2\n6 7\n6 2\n9 2\n3 8\n2 10\n2 5\n", "10\n7 1\n8 4\n8 2\n4 7\n6 2\n9 2\n3 8\n2 10\n2 5\n", "10\n7 1\n8 4\n8 2\n4 7\n6 2\n9 2\n3 8\n1 10\n2 5\n", "4\n1 2\n2 3\n1 4\n", "10\n7 1\n8 4\n8 10\n4 7\n6 5\n9 3\n3 4\n2 10\n2 5\n", "4\n3 4\n2 1\n3 1\n", "4\n1 4\n2 3\n2 4\n", "10\n7 1\n8 4\n8 2\n6 7\n6 5\n9 2\n3 5\n2 10\n2 5\n", "4\n2 3\n4 3\n2 1\n", "4\n2 1\n4 1\n3 2\n", "10\n4 1\n8 4\n8 10\n4 7\n6 2\n9 2\n3 5\n2 10\n2 5\n", "10\n6 1\n8 4\n8 10\n6 7\n6 5\n9 3\n3 5\n1 10\n2 5\n", "10\n6 1\n8 4\n8 10\n6 7\n6 5\n9 1\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 2\n6 7\n6 2\n9 2\n3 8\n4 10\n2 5\n", "10\n7 1\n8 4\n8 10\n5 7\n6 10\n9 3\n3 5\n2 10\n2 5\n", "3\n2 1\n3 1\n", "10\n4 1\n10 4\n8 6\n4 7\n6 5\n9 2\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 10\n6 7\n7 5\n9 1\n3 5\n2 10\n2 5\n", "10\n5 1\n8 4\n8 2\n6 7\n6 5\n9 2\n3 6\n2 10\n2 5\n", "4\n3 1\n4 2\n3 2\n", "4\n3 1\n4 2\n4 1\n", "10\n7 1\n8 4\n8 10\n6 7\n6 9\n9 2\n3 1\n2 10\n2 5\n", "10\n7 1\n8 4\n8 10\n6 7\n6 5\n9 2\n4 6\n3 10\n2 6\n", "10\n7 1\n8 4\n8 10\n2 7\n6 8\n9 2\n4 2\n3 10\n2 5\n", "10\n6 1\n8 4\n8 10\n10 7\n6 5\n9 2\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 2\n4 1\n6 2\n9 2\n3 8\n2 10\n2 5\n", "4\n1 2\n2 3\n3 4\n", "10\n7 1\n8 4\n8 6\n4 7\n6 5\n9 3\n3 4\n2 10\n2 5\n", "10\n7 1\n8 4\n8 2\n6 7\n6 5\n9 2\n3 9\n2 10\n2 5\n", "10\n6 1\n3 4\n8 10\n6 7\n6 5\n9 1\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 2\n6 7\n6 2\n9 2\n3 5\n4 10\n2 5\n", "10\n7 1\n10 4\n8 10\n6 7\n7 5\n9 1\n3 5\n2 10\n2 5\n", "4\n3 1\n4 2\n2 1\n", "10\n7 1\n8 4\n8 6\n8 7\n6 5\n9 3\n3 4\n2 10\n2 5\n", "10\n2 1\n8 4\n8 2\n6 7\n6 5\n9 2\n3 9\n2 10\n2 5\n", "10\n7 1\n8 7\n8 10\n4 7\n6 10\n9 3\n3 5\n2 10\n2 5\n", "10\n7 1\n8 4\n8 10\n6 7\n6 5\n9 2\n3 5\n1 10\n2 8\n", "10\n10 1\n8 4\n8 10\n6 7\n6 5\n9 2\n3 6\n2 10\n2 5\n"], "output": ["4\n", "1\n", "0\n", "-1\n", "2\n", "3\n", "1\n", "1\n", "-1\n", "0\n", "0\n", "2\n", "4\n", "1\n", "-1\n", "0\n", "-1\n", "4\n", "0\n", "3\n", "0\n", "1\n", "1\n", "1\n", "1\n", "4\n", "-1\n", "0\n", "1\n", "4\n", "4\n", "1\n", "3\n", "0\n", "1\n", "1\n", "4\n", "4\n", "3\n", "2\n", "4\n", "4\n", "3\n", "2\n", "0\n", "1\n", "1\n", "1\n", "3\n", "1\n", "4\n", "1\n", "1\n", "2\n", "1\n", "1\n", "2\n", "4\n", "4\n", "3\n", "4\n", "-1\n", "3\n", "4\n", "1\n", "1\n", "1\n", "3\n", "4\n", "3\n", "4\n", "1\n", "1\n", "4\n", "4\n", "4\n", "3\n", "3\n", "1\n", "4\n", "3\n", "3\n", "4\n", "3\n"]}, "short_description": "1. One-sentence summary  \nGiven an undirected tree with an even number of nodes, compute how many edges can be removed so that every resulting connected component has an even number of nodes.\n\n2. Core algorithmic approach  \nA single DFS traversal to compute the size of each node\u2019s subtree (post-order), then count all non-root nodes whose subtree size is even\u2014each such subtree edge can be cut.\n\n3. Reusable components  \n\u2022 DFS subtree\u2010size calculation (with parent parameter to avoid backtracking)  \n\u2022 Adjacency\u2010list representation using a hash\u2010map or list of lists  \n\u2022 Post-order pattern that aggregates child results and applies a condition (e.g., \u201cif subtree_size is even, increment counter\u201d)"}
{"name": "420_C. Bug in Code", "description": "Recently a serious bug has been found in the FOS code. The head of the F company wants to find the culprit and punish him. For that, he set up an organizational meeting, the issue is: who's bugged the code? Each of the n coders on the meeting said: 'I know for sure that either x or y did it!'\n\nThe head of the company decided to choose two suspects and invite them to his office. Naturally, he should consider the coders' opinions. That's why the head wants to make such a choice that at least p of n coders agreed with it. A coder agrees with the choice of two suspects if at least one of the two people that he named at the meeting was chosen as a suspect. In how many ways can the head of F choose two suspects?\n\nNote that even if some coder was chosen as a suspect, he can agree with the head's choice if he named the other chosen coder at the meeting.\n\nInput\n\nThe first line contains integers n and p (3 \u2264 n \u2264 3\u00b7105; 0 \u2264 p \u2264 n) \u2014 the number of coders in the F company and the minimum number of agreed people.\n\nEach of the next n lines contains two integers xi, yi (1 \u2264 xi, yi \u2264 n) \u2014 the numbers of coders named by the i-th coder. It is guaranteed that xi \u2260 i, yi \u2260 i, xi \u2260 yi.\n\nOutput\n\nPrint a single integer \u2013\u2013 the number of possible two-suspect sets. Note that the order of the suspects doesn't matter, that is, sets (1, 2) \u0438 (2, 1) are considered identical.\n\nExamples\n\nInput\n\n4 2\n2 3\n1 4\n1 4\n2 1\n\n\nOutput\n\n6\n\n\nInput\n\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n\nOutput\n\n1", "solution": "from collections import defaultdict\nfrom bisect import bisect_left as lower\nimport sys\ninput = sys.stdin.readline\ndef put():\n    return map(int, input().split())\n\ntry:\n    n,m = put()\n    cnt, mp, ans = [0]*n, defaultdict(), [0]*n\n    for _ in range(n):\n        x,y = put()\n        x,y = x-1,y-1\n        key = (min(x,y), max(x,y))\n        if key in mp:\n            mp[key]+=1\n        else:\n            mp[key]=1\n        cnt[x]+=1\n        cnt[y]+=1\n\nexcept:\n    print('lol')\n\nfor (x,y),val in mp.items():\n    if cnt[x]+cnt[y]>= m and cnt[x]+cnt[y]-val<m:\n        ans[x]-=1\n        ans[y]-=1\n\n\nscnt = cnt.copy()\nscnt.sort()\nfor i in range(n):\n    ans[i]+= n-lower(scnt, m-cnt[i])\n    if 2*cnt[i]>=m:\n        ans[i]-=1\n\nprint(sum(ans)//2)\n", "difficulty": 9, "public_tests": {"input": ["8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n", "4 2\n2 3\n1 4\n1 4\n2 1\n"], "output": ["1\n", "6\n"]}, "private_tests": {"input": ["5 2\n4 3\n1 3\n4 2\n1 2\n1 4\n", "6 4\n2 3\n3 1\n1 2\n5 6\n6 4\n4 5\n", "4 4\n2 3\n4 3\n2 1\n2 3\n", "10 1\n4 9\n8 9\n7 6\n1 5\n3 6\n4 3\n4 6\n10 1\n1 8\n7 9\n", "10 4\n8 7\n1 5\n7 4\n7 8\n3 2\n10 8\n3 6\n9 7\n8 7\n4 1\n", "5 5\n3 2\n3 4\n2 5\n3 2\n4 3\n", "5 5\n3 2\n3 4\n1 2\n1 2\n1 2\n", "8 5\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n", "5 3\n5 3\n5 1\n2 1\n5 3\n1 4\n", "4 2\n3 4\n4 3\n4 2\n3 1\n", "6 6\n5 6\n5 6\n5 6\n1 2\n1 3\n3 4\n", "4 4\n2 3\n3 4\n2 4\n2 1\n", "4 3\n3 2\n4 3\n2 4\n3 2\n", "4 1\n3 2\n4 1\n4 2\n1 2\n", "3 2\n2 3\n3 1\n2 1\n", "10 2\n10 2\n9 3\n9 4\n7 2\n4 6\n10 1\n9 2\n3 10\n7 1\n5 1\n", "10 10\n5 6\n1 4\n1 4\n1 2\n1 2\n1 2\n1 3\n1 3\n1 3\n1 4\n", "6 5\n5 6\n5 6\n5 6\n5 6\n1 2\n3 4\n", "5 3\n3 4\n3 4\n1 2\n1 2\n1 2\n", "5 1\n4 2\n4 5\n5 1\n5 1\n4 2\n", "8 7\n7 8\n7 8\n1 6\n1 6\n1 2\n1 3\n6 4\n6 5\n", "5 5\n4 5\n4 5\n4 5\n1 2\n1 2\n", "8 8\n6 5\n1 6\n1 6\n1 6\n1 6\n1 2\n1 3\n6 4\n", "4 3\n3 4\n3 4\n1 2\n1 2\n", "4 4\n3 4\n3 4\n1 2\n1 2\n", "10 3\n6 3\n6 10\n2 5\n5 7\n6 2\n9 2\n8 1\n10 5\n5 10\n7 6\n", "4 4\n3 4\n4 3\n1 2\n2 1\n"], "output": ["10\n", "9\n", "3\n", "45\n", "19\n", "3\n", "3\n", "5\n", "9\n", "6\n", "0\n", "2\n", "5\n", "6\n", "3\n", "43\n", "2\n", "8\n", "7\n", "10\n", "0\n", "4\n", "1\n", "4\n", "4\n", "34\n", "4\n"]}, "generated_tests": {"input": ["4 4\n2 3\n1 3\n2 1\n2 3\n", "10 2\n4 9\n8 9\n7 6\n1 5\n3 6\n4 3\n4 6\n10 1\n1 8\n7 9\n", "5 5\n3 2\n3 4\n2 5\n3 1\n4 3\n", "5 5\n3 4\n3 4\n1 2\n1 2\n1 2\n", "5 1\n5 3\n5 1\n2 1\n5 3\n1 4\n", "6 6\n5 6\n4 6\n5 6\n1 2\n1 3\n3 4\n", "10 4\n10 2\n9 3\n9 4\n7 2\n4 6\n10 1\n9 2\n3 10\n7 1\n5 1\n", "5 3\n3 4\n3 4\n1 4\n1 2\n1 2\n", "8 8\n6 5\n1 6\n1 6\n1 6\n1 4\n1 2\n1 3\n6 4\n", "5 2\n4 3\n1 3\n4 3\n1 2\n1 4\n", "8 5\n5 6\n5 7\n5 8\n6 2\n2 1\n4 3\n1 3\n1 4\n", "4 0\n3 4\n4 3\n4 2\n3 1\n", "6 0\n5 6\n5 6\n5 6\n5 6\n1 2\n3 4\n", "10 3\n6 3\n6 10\n2 5\n5 7\n6 2\n9 2\n8 1\n10 5\n1 10\n7 6\n", "10 4\n10 2\n9 2\n9 4\n7 2\n4 6\n10 1\n9 2\n3 10\n7 1\n5 1\n", "10 0\n9 6\n1 4\n1 4\n1 2\n1 2\n1 2\n1 3\n1 3\n1 3\n1 4\n", "8 5\n5 6\n5 7\n5 8\n6 2\n2 1\n4 1\n1 3\n1 4\n", "10 4\n10 2\n9 2\n9 4\n7 2\n4 6\n10 1\n9 4\n3 10\n7 1\n5 1\n", "10 4\n8 7\n1 5\n7 4\n7 8\n3 2\n10 8\n3 6\n10 7\n8 7\n4 1\n", "4 4\n2 3\n3 4\n3 4\n2 1\n", "10 10\n9 6\n1 4\n1 4\n1 2\n1 2\n1 2\n1 3\n1 3\n1 3\n1 4\n", "5 1\n4 2\n4 5\n5 1\n4 1\n4 2\n", "4 4\n4 3\n1 3\n2 1\n2 3\n", "10 2\n4 3\n8 9\n7 6\n1 5\n3 6\n4 3\n4 6\n10 1\n1 8\n7 9\n", "5 1\n3 4\n3 4\n1 2\n1 2\n1 2\n", "4 4\n1 3\n3 4\n3 4\n2 1\n", "4 4\n4 3\n1 3\n4 1\n2 3\n", "5 5\n3 4\n3 4\n2 5\n3 2\n4 3\n", "4 4\n4 3\n3 4\n2 4\n2 1\n", "8 7\n7 8\n7 8\n1 6\n1 6\n1 2\n1 2\n6 4\n6 5\n", "4 4\n3 2\n4 3\n1 2\n2 1\n", "8 6\n5 6\n5 7\n3 8\n6 2\n2 1\n7 3\n1 3\n1 4\n", "5 5\n3 4\n5 4\n1 2\n1 2\n1 2\n", "8 8\n6 5\n1 5\n1 6\n1 6\n1 4\n1 2\n1 3\n6 4\n", "5 2\n4 3\n2 3\n4 3\n1 2\n1 4\n", "5 5\n3 4\n3 4\n1 5\n3 2\n4 3\n", "4 4\n3 2\n4 1\n1 2\n2 1\n", "10 0\n9 6\n1 4\n1 4\n1 3\n1 2\n1 2\n1 3\n1 3\n1 3\n1 4\n", "8 8\n6 5\n1 5\n1 6\n1 6\n1 4\n2 2\n1 3\n6 4\n", "5 2\n4 3\n2 3\n4 3\n1 2\n1 5\n", "10 0\n9 6\n1 4\n1 4\n1 3\n1 2\n1 2\n1 3\n1 3\n1 2\n1 4\n", "5 2\n4 3\n4 3\n4 3\n1 2\n1 5\n", "10 0\n9 6\n1 4\n1 4\n1 3\n1 2\n1 2\n1 3\n1 3\n1 2\n2 4\n", "5 2\n4 1\n1 3\n4 2\n1 2\n1 4\n", "8 5\n5 6\n5 7\n6 8\n6 2\n2 1\n7 3\n1 3\n1 4\n", "4 4\n2 3\n1 4\n2 4\n2 1\n", "8 7\n7 8\n7 8\n1 6\n1 6\n1 2\n1 6\n6 4\n6 5\n"], "output": ["3\n", "43\n", "2\n", "4\n", "10\n", "0\n", "28\n", "8\n", "1\n", "9\n", "5\n", "6\n", "15\n", "36\n", "26\n", "45\n", "7\n", "27\n", "22\n", "3\n", "2\n", "10\n", "2\n", "43\n", "10\n", "3\n", "2\n", "3\n", "3\n", "0\n", "3\n", "0\n", "2\n", "1\n", "10\n", "2\n", "3\n", "45\n", "0\n", "10\n", "45\n", "10\n", "45\n", "9\n", "5\n", "2\n", "2\n"]}, "short_description": "1. One-sentence summary:  \n   The solution counts the number of unordered pairs of items whose combined scores meet or exceed a given threshold, adjusting for direct connections that were double-counted.\n\n2. Core algorithmic approach:  \n   Sort-and-binary-search combined with a hash-map adjustment pass. First, it sorts the list of scores and for each element uses binary search to count how many complements meet the threshold; then it corrects overcounts caused by direct pairwise links stored in a hash map.\n\n3. Reusable components:  \n   \u2022 Degree/score accumulation array (cnt) for fast updates and lookups.  \n   \u2022 Sorted array + binary search (bisect) pattern to count pair sums \u2265 target in O(n log n).  \n   \u2022 Hash-map of edge-multiplicities for identifying and correcting specific pair contributions."}
{"name": "580_C. Kefa and Park", "description": "Kefa decided to celebrate his first big salary by going to the restaurant. \n\nHe lives by an unusual park. The park is a rooted tree consisting of n vertices with the root at vertex 1. Vertex 1 also contains Kefa's house. Unfortunaely for our hero, the park also contains cats. Kefa has already found out what are the vertices with cats in them.\n\nThe leaf vertices of the park contain restaurants. Kefa wants to choose a restaurant where he will go, but unfortunately he is very afraid of cats, so there is no way he will go to the restaurant if the path from the restaurant to his house contains more than m consecutive vertices with cats. \n\nYour task is to help Kefa count the number of restaurants where he can go.\n\nInput\n\nThe first line contains two integers, n and m (2 \u2264 n \u2264 105, 1 \u2264 m \u2264 n) \u2014 the number of vertices of the tree and the maximum number of consecutive vertices with cats that is still ok for Kefa.\n\nThe second line contains n integers a1, a2, ..., an, where each ai either equals to 0 (then vertex i has no cat), or equals to 1 (then vertex i has a cat).\n\nNext n - 1 lines contains the edges of the tree in the format \"xi yi\" (without the quotes) (1 \u2264 xi, yi \u2264 n, xi \u2260 yi), where xi and yi are the vertices of the tree, connected by an edge. \n\nIt is guaranteed that the given set of edges specifies a tree.\n\nOutput\n\nA single integer \u2014 the number of distinct leaves of a tree the path to which from Kefa's home contains at most m consecutive vertices with cats.\n\nExamples\n\nInput\n\n4 1\n1 1 0 0\n1 2\n1 3\n1 4\n\n\nOutput\n\n2\n\n\nInput\n\n7 1\n1 0 1 1 0 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n\n\nOutput\n\n2\n\nNote\n\nLet us remind you that a tree is a connected graph on n vertices and n - 1 edge. A rooted tree is a tree with a special vertex called root. In a rooted tree among any two vertices connected by an edge, one vertex is a parent (the one closer to the root), and the other one is a child. A vertex is called a leaf, if it has no children.\n\nNote to the first sample test: <image> The vertices containing cats are marked red. The restaurants are at vertices 2, 3, 4. Kefa can't go only to the restaurant located at vertex 2.\n\nNote to the second sample test: <image> The restaurants are located at vertices 4, 5, 6, 7. Kefa can't go to restaurants 6, 7.", "solution": "M=lambda:map(int,input().split())\nn,m=M()\n*c,=M()\nt=[[]for i in range(n)]\nv=[0]*n\nfor i in range(n-1):\n    x,y=M()\n    t[x-1].append(y-1)\n    t[y-1].append(x-1)\na=i=0\nq=[(0,0)]\nwhile i<len(q):\n    x,N=q[i]\n    v[x]=1\n    if c[x]+N<=m:\n        L=1\n        for y in t[x]:\n            if not v[y]:\n                L=0\n                q.append((y,c[x]*(c[x]+N)))\n        if L:\n            a+=1\n    i+=1\nprint(a)\n", "difficulty": 9, "public_tests": {"input": ["7 1\n1 0 1 1 0 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "4 1\n1 1 0 0\n1 2\n1 3\n1 4\n"], "output": ["2\n", "2\n"]}, "private_tests": {"input": ["5 2\n1 1 0 1 1\n1 2\n2 3\n3 4\n4 5\n", "6 1\n1 0 1 1 0 0\n1 2\n1 3\n1 4\n1 5\n1 6\n", "2 1\n1 1\n2 1\n", "3 2\n1 1 1\n1 2\n2 3\n", "12 3\n1 0 1 0 1 1 1 1 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n4 2\n", "15 2\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n", "7 3\n1 1 1 1 1 0 1\n1 2\n1 3\n2 4\n3 5\n5 6\n6 7\n"], "output": ["1\n", "3\n", "0\n", "0\n", "7\n", "8\n", "2\n"]}, "generated_tests": {"input": ["6 1\n1 0 1 1 0 0\n1 2\n2 3\n1 4\n1 5\n1 6\n", "3 2\n0 1 1\n1 2\n2 3\n", "12 3\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n4 2\n", "7 1\n1 0 1 1 0 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n5 7\n", "15 2\n1 0 1 0 1 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n", "7 1\n1 0 1 1 0 0 0\n1 2\n2 3\n2 4\n2 5\n3 6\n3 7\n", "12 3\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 12\n7 1\n11 8\n5 1\n3 7\n5 8\n3 2\n", "4 1\n1 1 1 1\n1 2\n1 3\n1 4\n", "6 1\n0 0 1 1 0 0\n1 2\n1 3\n1 4\n1 5\n1 6\n", "4 1\n1 1 0 1\n1 2\n1 3\n1 4\n", "12 3\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n3 2\n", "12 6\n1 0 1 0 1 1 1 1 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n4 2\n", "7 3\n1 0 1 1 1 0 1\n1 2\n1 3\n2 4\n3 5\n5 6\n6 7\n", "3 4\n0 1 1\n1 2\n2 3\n", "7 1\n1 0 1 1 1 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n5 7\n", "15 2\n1 0 1 0 1 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n", "15 2\n1 0 1 0 1 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n12 14\n7 15\n", "12 3\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n7 8\n4 2\n", "12 6\n1 0 1 1 1 1 1 1 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n4 2\n", "7 3\n1 0 1 1 0 0 1\n1 2\n1 3\n2 4\n3 5\n5 6\n6 7\n", "7 1\n1 0 1 1 1 0 0\n1 2\n1 3\n2 4\n4 5\n3 6\n5 7\n", "15 2\n1 0 1 1 1 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n", "4 1\n1 1 1 1\n1 2\n1 3\n2 4\n", "5 2\n1 1 0 1 1\n1 2\n2 3\n3 5\n4 5\n", "7 1\n1 0 1 1 0 0 0\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7\n", "3 0\n0 1 1\n1 2\n2 3\n", "12 3\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 5\n5 8\n3 2\n", "15 2\n1 0 1 0 1 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n11 15\n", "7 3\n1 0 1 1 1 0 1\n1 2\n1 3\n2 4\n3 5\n5 6\n3 7\n", "15 2\n1 0 1 0 1 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n4 8\n4 9\n5 10\n5 11\n1 12\n6 13\n12 14\n7 15\n", "7 6\n1 0 1 1 0 0 1\n1 2\n1 3\n2 4\n3 5\n5 6\n6 7\n", "15 2\n1 0 1 1 1 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n4 8\n4 9\n5 10\n5 11\n11 12\n6 13\n7 14\n7 15\n", "12 3\n1 0 1 0 1 1 1 1 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n8 2\n", "7 3\n1 1 1 1 1 0 0\n1 2\n1 3\n2 4\n3 5\n5 6\n6 7\n", "7 1\n1 0 1 1 1 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "12 3\n1 0 1 0 1 1 1 0 0 0 0 0\n6 11\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n4 2\n", "7 1\n1 0 1 1 0 0 0\n1 2\n2 3\n2 4\n2 5\n3 6\n5 7\n", "4 1\n1 0 0 1\n1 2\n1 3\n1 4\n", "12 3\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n1 2\n", "3 7\n0 1 1\n1 2\n2 3\n", "15 2\n1 0 1 0 1 0 0 0 0 0 0 0 0 1 0\n1 2\n2 3\n2 4\n2 5\n3 6\n1 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n", "7 1\n1 0 1 1 1 0 0\n1 2\n1 3\n2 4\n4 7\n3 6\n5 7\n", "15 2\n1 0 1 1 1 0 0 0 1 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n", "5 2\n0 1 0 1 1\n1 2\n2 3\n3 5\n4 5\n", "12 3\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 2\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 5\n5 8\n3 2\n", "15 2\n0 0 1 0 1 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n4 8\n4 9\n5 10\n5 11\n1 12\n6 13\n12 14\n7 15\n", "7 6\n1 1 1 1 1 0 0\n1 2\n1 3\n2 4\n3 5\n5 6\n6 7\n", "7 1\n1 0 0 1 1 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "3 7\n0 1 1\n1 3\n2 3\n", "7 1\n1 0 1 1 1 0 0\n1 2\n1 3\n1 4\n4 7\n3 6\n5 7\n", "7 1\n1 0 0 1 1 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "7 1\n1 0 1 0 1 0 0\n1 2\n1 3\n1 4\n4 7\n3 6\n5 7\n", "7 1\n1 0 0 1 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "12 3\n1 0 1 0 1 1 1 1 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 2\n3 7\n5 8\n4 2\n", "15 2\n1 0 1 0 1 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n", "15 2\n1 0 1 0 1 0 0 0 0 0 0 0 1 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n", "12 2\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n7 8\n4 2\n", "7 1\n1 0 1 0 0 0 0\n1 2\n2 3\n2 4\n2 5\n3 6\n3 7\n", "12 3\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 1\n9 7\n2 4\n10 12\n7 1\n11 8\n5 1\n3 7\n5 8\n3 2\n", "12 6\n1 0 1 1 1 0 1 1 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n4 2\n", "3 0\n0 0 1\n1 2\n2 3\n", "7 3\n1 0 1 1 1 0 1\n1 2\n1 3\n2 4\n3 5\n7 6\n3 7\n", "15 2\n1 0 1 1 0 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n4 8\n4 9\n5 10\n5 11\n11 12\n6 13\n7 14\n7 15\n", "7 1\n1 0 1 1 1 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n", "12 3\n1 0 1 0 1 1 1 0 0 0 0 0\n6 11\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n1 2\n", "7 1\n1 0 1 1 0 0 0\n1 2\n2 3\n2 4\n2 7\n3 6\n5 7\n", "3 14\n0 1 1\n1 2\n2 3\n", "7 1\n1 0 1 1 1 0 0\n1 2\n1 3\n2 4\n1 7\n3 6\n5 7\n", "7 1\n1 0 0 1 1 0 0\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n", "7 1\n1 0 1 0 1 0 0\n1 2\n1 3\n1 4\n1 7\n3 6\n5 7\n", "7 2\n1 0 0 1 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "15 2\n1 0 1 0 1 0 0 0 0 0 0 0 0 1 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n", "12 4\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n7 8\n4 2\n", "12 5\n1 0 1 0 1 1 1 0 0 0 0 0\n6 7\n12 1\n9 7\n2 4\n10 12\n7 1\n11 8\n5 1\n3 7\n5 8\n3 2\n", "7 1\n1 0 1 1 1 0 0\n1 4\n1 3\n2 4\n2 5\n3 6\n1 7\n", "7 1\n1 0 1 1 1 0 0\n1 2\n2 3\n2 4\n2 7\n3 6\n5 7\n", "7 1\n1 0 0 1 1 0 0\n1 2\n1 3\n2 4\n4 5\n1 6\n3 7\n", "7 1\n0 0 1 0 1 0 0\n1 2\n1 3\n1 4\n1 7\n3 6\n5 7\n", "7 1\n1 0 1 1 1 0 0\n1 2\n2 3\n2 4\n1 7\n3 6\n5 7\n", "7 1\n1 0 0 1 1 0 0\n1 2\n1 3\n2 5\n4 5\n1 6\n3 7\n", "5 1\n1 1 0 1 1\n1 2\n2 3\n3 4\n4 5\n", "3 2\n1 1 1\n1 2\n1 3\n", "12 3\n1 0 1 0 1 1 1 1 0 0 0 0\n6 7\n12 1\n9 11\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n4 2\n", "15 2\n1 1 1 0 1 0 0 0 0 0 0 0 0 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n", "12 3\n1 0 1 0 1 1 0 0 0 0 0 0\n6 7\n12 1\n9 7\n1 4\n10 7\n7 1\n11 8\n5 1\n3 7\n5 8\n4 2\n"], "output": ["3\n", "1\n", "7\n", "2\n", "8\n", "4\n", "6\n", "0\n", "5\n", "1\n", "7\n", "7\n", "2\n", "1\n", "2\n", "8\n", "7\n", "8\n", "7\n", "2\n", "0\n", "8\n", "0\n", "1\n", "1\n", "0\n", "7\n", "7\n", "3\n", "7\n", "2\n", "7\n", "8\n", "2\n", "2\n", "6\n", "3\n", "2\n", "8\n", "1\n", "8\n", "1\n", "8\n", "1\n", "6\n", "7\n", "2\n", "4\n", "1\n", "1\n", "4\n", "2\n", "4\n", "6\n", "8\n", "8\n", "6\n", "4\n", "5\n", "7\n", "0\n", "3\n", "7\n", "3\n", "7\n", "3\n", "1\n", "2\n", "2\n", "3\n", "4\n", "8\n", "8\n", "5\n", "1\n", "3\n", "2\n", "4\n", "3\n", "2\n", "0\n", "2\n", "6\n", "6\n", "7\n"]}, "short_description": "1. One-sentence summary:\nCount the number of leaf nodes in a tree reachable from the root such that a path\u2010dependent value (computed cumulatively along the path) never exceeds a given threshold.\n\n2. Core algorithmic approach:\nA single pass tree traversal (BFS or DFS) with state propagation and branch pruning when the accumulated state exceeds the limit.\n\n3. Reusable components:\n- Adjacency list construction for undirected trees or graphs.\n- Generic graph traversal template (BFS/DFS) that carries and updates a custom state per node.\n- Pruning pattern: skip expanding a branch as soon as its propagated state violates a global constraint."}
{"name": "1391_E. Pairs of Pairs", "description": "You have a simple and connected undirected graph consisting of n nodes and m edges.\n\nConsider any way to pair some subset of these n nodes such that no node is present in more than one pair. \n\nThis pairing is valid if for every pair of pairs, the induced subgraph containing all 4 nodes, two from each pair, has at most 2 edges (out of the 6 possible edges). More formally, for any two pairs, (a,b) and (c,d), the induced subgraph with nodes \\\\{a,b,c,d\\} should have at most 2 edges. \n\nPlease note that the subgraph induced by a set of nodes contains nodes only from this set and edges which have both of its end points in this set.\n\nNow, do one of the following: \n\n  * Find a simple path consisting of at least \u2308 n/2 \u2309 nodes. Here, a path is called simple if it does not visit any node multiple times. \n  * Find a valid pairing in which at least \u2308 n/2 \u2309 nodes are paired. \n\n\n\nIt can be shown that it is possible to find at least one of the two in every graph satisfying constraints from the statement. \n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^5). Description of the test cases follows.\n\nThe first line of each test case contains 2 integers n, m (2 \u2264 n \u2264 5\u22c5 10^5, 1 \u2264 m \u2264 10^6), denoting the number of nodes and edges, respectively. \n\nThe next m lines each contain 2 integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v), denoting that there is an undirected edge between nodes u and v in the given graph.\n\nIt is guaranteed that the given graph is connected, and simple \u2014 it does not contain multiple edges between the same pair of nodes, nor does it have any self-loops. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 5\u22c5 10^5.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 10^6.\n\nOutput\n\nFor each test case, the output format is as follows. \n\nIf you have found a pairing, in the first line output \"PAIRING\" (without quotes). \n\n  * Then, output k (\u2308 n/2 \u2309 \u2264 2\u22c5 k \u2264 n), the number of pairs in your pairing. \n  * Then, in each of the next k lines, output 2 integers a and b \u2014 denoting that a and b are paired with each other. Note that the graph does not have to have an edge between a and b!\n  * This pairing has to be valid, and every node has to be a part of at most 1 pair. \n\n\n\nOtherwise, in the first line output \"PATH\" (without quotes). \n\n  * Then, output k (\u2308 n/2 \u2309 \u2264 k \u2264 n), the number of nodes in your path. \n  * Then, in the second line, output k integers, v_1, v_2, \u2026, v_k, in the order in which they appear on the path. Formally, v_i and v_{i+1} should have an edge between them for every i (1 \u2264 i < k).\n  * This path has to be simple, meaning no node should appear more than once. \n\nExample\n\nInput\n\n\n4\n6 5\n1 4\n2 5\n3 6\n1 5\n3 5\n6 5\n1 4\n2 5\n3 6\n1 5\n3 5\n12 14\n1 2\n2 3\n3 4\n4 1\n1 5\n1 12\n2 6\n2 7\n3 8\n3 9\n4 10\n4 11\n2 4\n1 3\n12 14\n1 2\n2 3\n3 4\n4 1\n1 5\n1 12\n2 6\n2 7\n3 8\n3 9\n4 10\n4 11\n2 4\n1 3\n\n\nOutput\n\n\nPATH\n4 \n1 5 3 6\nPAIRING\n2\n1 6\n2 4\nPAIRING\n3\n1 8\n2 5\n4 10\nPAIRING\n4\n1 7\n2 9\n3 11\n4 5\n\nNote\n\nThe path outputted in the first case is the following. \n\n<image>\n\nThe pairing outputted in the second case is the following. \n\n<image>\n\nHere is an invalid pairing for the same graph \u2014 the subgraph \\{1,3,4,5\\} has 3 edges. \n\n<image>\n\nHere is the pairing outputted in the third case. \n\n<image>\n\nIt's valid because \u2014 \n\n  * The subgraph \\{1,8,2,5\\} has edges (1,2) and (1,5). \n  * The subgraph \\{1,8,4,10\\} has edges (1,4) and (4,10). \n  * The subgraph \\{4,10,2,5\\} has edges (2,4) and (4,10). \n\n\n\nHere is the pairing outputted in the fourth case. \n\n<image>", "solution": "# Fast IO (only use in integer input)\n\nimport os,io\ninput=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\nt = int(input())\nfor _ in range(t):\n    n,m = map(int,input().split())\n    connectionList = []\n    for _ in range(n):\n        connectionList.append([])\n    for _ in range(m):\n        u,v = map(int,input().split())\n        connectionList[u-1].append(v-1)\n        connectionList[v-1].append(u-1)\n    DFSLevel = [-1] * n\n    DFSParent = [-1] * n\n    vertexStack = []\n    vertexStack.append((0,1,-1)) # vertex depth and parent\n    while vertexStack:\n        vertex,depth,parent = vertexStack.pop()\n        if DFSLevel[vertex] != -1:\n            continue\n        DFSLevel[vertex] = depth\n        DFSParent[vertex] = parent\n        for nextV in connectionList[vertex]:\n            if DFSLevel[nextV] == -1:\n                vertexStack.append((nextV,depth + 1,vertex))\n    if max(DFSLevel) >= n//2 + n % 2:\n        for i in range(n):\n            if DFSLevel[i] >= (n//2 + n%2):\n                break\n        longPath = [str(i + 1)]\n        while DFSParent[i] != -1:\n            longPath.append(str(DFSParent[i] + 1))\n            i = DFSParent[i]\n        print(\"PATH\")\n        print(len(longPath))\n        print(\" \".join(longPath))\n    else:\n        levelWithVertex = list(enumerate(DFSLevel))\n        levelWithVertex.sort(key = lambda x: x[1])\n        i = 0\n        pair = []\n        while i < len(levelWithVertex) - 1:\n            if levelWithVertex[i][1] == levelWithVertex[i + 1][1]:\n                pair.append([levelWithVertex[i][0],levelWithVertex[i + 1][0]])\n                i += 2\n            else:\n                i += 1\n        print(\"PAIRING\")\n        print(len(pair))\n        for elem in pair:\n            print(str(elem[0] + 1)+\" \"+str(elem[1] + 1))\n\n", "difficulty": 11, "public_tests": {"input": ["4\n6 5\n1 4\n2 5\n3 6\n1 5\n3 5\n6 5\n1 4\n2 5\n3 6\n1 5\n3 5\n12 14\n1 2\n2 3\n3 4\n4 1\n1 5\n1 12\n2 6\n2 7\n3 8\n3 9\n4 10\n4 11\n2 4\n1 3\n12 14\n1 2\n2 3\n3 4\n4 1\n1 5\n1 12\n2 6\n2 7\n3 8\n3 9\n4 10\n4 11\n2 4\n1 3\n"], "output": ["PATH\n3\n2 5 1 \nPATH\n3\n2 5 1 \nPAIRING\n4\n2 5\n3 6\n4 8\n10 11\nPAIRING\n4\n2 5\n3 6\n4 8\n10 11\n"]}, "private_tests": {"input": ["1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "4\n6 5\n1 4\n2 5\n3 6\n1 5\n3 5\n6 5\n1 4\n2 5\n3 6\n1 5\n3 5\n12 14\n1 2\n2 3\n3 4\n4 1\n1 5\n1 12\n2 6\n2 7\n3 8\n3 9\n4 10\n4 11\n2 4\n1 3\n12 14\n1 2\n2 3\n3 4\n4 1\n1 5\n1 12\n2 6\n2 7\n3 8\n3 9\n4 10\n4 11\n2 4\n1 3\n"], "output": ["PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n3\n2 5 1 \nPATH\n3\n2 5 1 \nPAIRING\n4\n2 5\n3 6\n4 8\n10 11\nPAIRING\n4\n2 5\n3 6\n4 8\n10 11\n"]}, "generated_tests": {"input": ["1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "4\n6 5\n1 4\n2 5\n3 6\n1 5\n3 5\n6 5\n1 4\n2 5\n3 6\n1 5\n3 5\n12 14\n1 2\n2 3\n3 4\n4 1\n1 5\n1 12\n2 6\n2 7\n3 8\n3 9\n4 10\n4 11\n2 4\n1 3\n12 14\n1 2\n2 3\n3 4\n4 1\n1 5\n1 12\n2 6\n2 7\n3 8\n6 9\n4 10\n4 11\n2 4\n1 3\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 13\n18 1\n2 5\n19 9\n4 8\n8 7\n6 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n3 13\n9 7\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n17 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n20 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 13\n9 4\n1 3\n6 2\n16 6\n13 17\n4 20\n", "1\n20 37\n17 10\n6 9\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n19 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 15\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n3 13\n9 7\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 4\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 13\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n3 13\n9 7\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n5 9\n20 15\n7 14\n19 11\n14 9\n13 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 13\n18 1\n2 5\n19 9\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n3 13\n9 7\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n1 13\n9 7\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n5 9\n20 15\n7 14\n19 11\n14 9\n18 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n20 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 17\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n5 9\n20 15\n7 14\n19 11\n14 9\n13 16\n1 15\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 6\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n5 9\n20 15\n7 14\n19 11\n14 9\n18 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n20 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n13 17\n4 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n20 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 13\n9 4\n1 3\n6 2\n16 6\n13 17\n4 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 1\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "4\n6 5\n1 4\n2 5\n3 6\n1 5\n3 5\n6 5\n1 4\n2 5\n3 6\n1 5\n3 5\n12 14\n1 2\n2 3\n3 4\n4 1\n1 5\n1 12\n2 6\n2 7\n3 8\n3 9\n4 10\n4 11\n2 4\n1 3\n12 14\n1 2\n2 3\n3 4\n4 1\n1 5\n1 12\n2 6\n2 7\n3 8\n3 9\n4 10\n4 11\n4 4\n1 3\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n5 18\n20 15\n7 14\n19 11\n14 9\n18 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n10 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n5 18\n20 15\n7 14\n19 11\n14 9\n18 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n19 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n5 9\n20 15\n7 14\n19 11\n14 9\n18 16\n1 13\n9 4\n1 8\n6 2\n16 6\n19 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n20 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 1\n9 4\n1 3\n6 2\n16 6\n13 17\n4 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 1\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n10 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 13\n18 1\n2 5\n19 9\n4 8\n12 7\n6 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n3 13\n9 7\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 9\n14 9\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n19 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 9\n14 14\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n19 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 15\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n5 17\n7 20\n", "1\n20 37\n17 10\n3 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n1 14\n19 11\n14 9\n13 16\n3 13\n9 7\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 13\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 4\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n1 13\n9 4\n1 8\n6 2\n16 6\n9 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 13\n18 1\n2 5\n19 9\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 9\n13 16\n3 11\n9 7\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 13\n18 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n5 9\n20 15\n7 14\n19 11\n14 9\n18 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n10 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n5 18\n20 15\n7 14\n19 11\n14 9\n18 16\n1 13\n12 4\n1 8\n6 2\n16 6\n13 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n3 1\n2 5\n18 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n5 9\n20 15\n7 14\n19 11\n14 9\n18 16\n1 13\n9 4\n1 8\n6 2\n16 6\n19 17\n7 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n20 1\n2 5\n19 12\n4 9\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 1\n9 4\n1 3\n6 2\n16 6\n13 17\n4 20\n", "1\n20 37\n17 10\n6 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 15\n18 1\n2 5\n19 12\n4 14\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n7 14\n19 11\n14 15\n13 16\n3 13\n9 4\n1 8\n6 2\n16 6\n5 17\n7 20\n", "1\n20 37\n17 10\n3 10\n20 14\n4 7\n3 16\n5 11\n16 17\n17 6\n10 5\n10 2\n12 9\n11 18\n11 12\n9 1\n12 18\n18 1\n2 5\n19 12\n4 8\n8 7\n5 19\n8 20\n2 19\n1 4\n18 9\n20 15\n12 14\n19 11\n14 9\n13 16\n1 13\n9 4\n1 8\n6 2\n16 6\n13 17\n7 20\n"], "output": ["PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n4\n6 3 5 1 \nPATH\n4\n6 3 5 1 \nPAIRING\n4\n2 5\n3 6\n4 8\n10 11\nPAIRING\n4\n2 5\n3 6\n4 8\n10 11\n", "PATH\n11\n2 19 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n13 3 16 6 17 10 5 11 12 9 1 \n", "PATH\n11\n2 19 12 18 11 5 10 17 6 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n4\n6 3 5 1 \nPATH\n4\n6 3 5 1 \nPAIRING\n4\n2 5\n3 6\n4 8\n10 11\nPAIRING\n4\n2 5\n3 6\n4 8\n10 11\n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n2 19 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n", "PATH\n11\n19 2 6 16 17 10 5 11 12 9 1 \n"]}, "short_description": "1. One-sentence summary:  \nGiven an undirected graph, construct a DFS spanning tree, then either extract a root-to-node path of length at least \u2308n/2\u2309 or greedily pair up as many vertices as possible that lie on the same depth level.\n\n2. Core algorithmic approach:  \n- Depth-first search (iterative stack-based) to compute depths and parents.  \n- Greedy grouping/pairing of vertices by equal depth.\n\n3. Reusable components:  \n- Iterative DFS with explicit stack to record (node, depth, parent) and fill arrays for depth and parent.  \n- Extraction of a path from any node back to the root using a parent-pointer array.  \n- Grouping items by key (depth) and then linearly scanning each group to form disjoint pairs."}
{"name": "116_C. Party", "description": "A company has n employees numbered from 1 to n. Each employee either has no immediate manager or exactly one immediate manager, who is another employee with a different number. An employee A is said to be the superior of another employee B if at least one of the following is true:\n\n  * Employee A is the immediate manager of employee B\n  * Employee B has an immediate manager employee C such that employee A is the superior of employee C. \n\n\n\nThe company will not have a managerial cycle. That is, there will not exist an employee who is the superior of his/her own immediate manager.\n\nToday the company is going to arrange a party. This involves dividing all n employees into several groups: every employee must belong to exactly one group. Furthermore, within any single group, there must not be two employees A and B such that A is the superior of B.\n\nWhat is the minimum number of groups that must be formed?\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of employees.\n\nThe next n lines contain the integers pi (1 \u2264 pi \u2264 n or pi = -1). Every pi denotes the immediate manager for the i-th employee. If pi is -1, that means that the i-th employee does not have an immediate manager. \n\nIt is guaranteed, that no employee will be the immediate manager of him/herself (pi \u2260 i). Also, there will be no managerial cycles.\n\nOutput\n\nPrint a single integer denoting the minimum number of groups that will be formed in the party.\n\nExamples\n\nInput\n\n5\n-1\n1\n2\n1\n-1\n\n\nOutput\n\n3\n\nNote\n\nFor the first example, three groups are sufficient, for example: \n\n  * Employee 1 \n  * Employees 2 and 4 \n  * Employees 3 and 5 ", "solution": "def findDepth(a, i):\n    depth = 1\n    nextLevel = a[i][:]\n\n    while len(nextLevel) > 0:\n        depth += 1\n\n        children = nextLevel[:]\n\n        nextLevel = []\n\n        for child in children:\n            nextLevel += a[child]\n\n    return depth\n\n\n\n\nn = int(input())\n\n\na = []\nfor i in range(n):\n    a.append([])\n\n\nroots = []\n\nfor i in range(n):\n    \n    x = int(input())\n\n    if x > 0:\n        a[x-1].append(i)\n\n    else:\n        roots.append(i)\n\n\nprint(max([findDepth(a, i) for i in roots]))\n    \n", "difficulty": 9, "public_tests": {"input": ["5\n-1\n1\n2\n1\n-1\n"], "output": ["3\n"]}, "private_tests": {"input": ["12\n-1\n8\n9\n-1\n4\n2\n11\n1\n-1\n6\n-1\n10\n", "5\n4\n5\n1\n-1\n4\n", "12\n-1\n9\n11\n6\n6\n-1\n6\n3\n8\n6\n1\n6\n", "4\n-1\n1\n2\n3\n", "12\n3\n8\n9\n12\n2\n8\n11\n12\n2\n9\n-1\n11\n", "5\n2\n3\n4\n5\n-1\n", "12\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "12\n-1\n1\n1\n1\n1\n1\n3\n4\n3\n3\n4\n7\n", "3\n-1\n1\n1\n", "77\n53\n-1\n48\n-1\n51\n-1\n54\n43\n70\n19\n64\n31\n45\n58\n6\n61\n41\n56\n34\n-1\n54\n-1\n66\n65\n74\n16\n38\n1\n2\n61\n-1\n34\n-1\n-1\n7\n19\n57\n13\n61\n42\n-1\n34\n65\n16\n31\n61\n6\n5\n34\n15\n-1\n13\n4\n22\n74\n7\n-1\n70\n38\n61\n45\n53\n46\n22\n-1\n65\n34\n19\n43\n48\n33\n58\n36\n-1\n47\n24\n34\n", "6\n-1\n-1\n2\n3\n1\n1\n", "12\n7\n8\n4\n12\n7\n9\n-1\n-1\n-1\n8\n6\n-1\n", "1\n-1\n", "12\n7\n4\n4\n-1\n6\n7\n9\n7\n-1\n7\n4\n1\n", "12\n-1\n1\n2\n3\n-1\n5\n6\n7\n-1\n9\n10\n11\n", "12\n-1\n7\n9\n12\n1\n7\n-1\n-1\n8\n5\n4\n-1\n", "12\n-1\n10\n-1\n1\n-1\n5\n9\n12\n-1\n-1\n3\n-1\n", "2\n-1\n-1\n", "12\n11\n11\n8\n9\n1\n1\n2\n-1\n10\n3\n-1\n8\n", "12\n3\n4\n2\n8\n7\n1\n10\n12\n5\n-1\n9\n11\n", "12\n-1\n6\n10\n6\n1\n11\n5\n9\n11\n5\n1\n9\n", "7\n7\n6\n-1\n-1\n4\n4\n-1\n", "12\n8\n6\n6\n8\n6\n-1\n6\n6\n8\n6\n8\n8\n", "12\n5\n6\n7\n1\n-1\n9\n12\n4\n8\n-1\n3\n2\n", "3\n-1\n-1\n-1\n", "2\n2\n-1\n", "12\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n2\n-1\n-1\n-1\n", "3\n2\n-1\n1\n", "12\n-1\n-1\n1\n-1\n1\n1\n5\n11\n8\n6\n6\n4\n"], "output": ["6\n", "3\n", "6\n", "4\n", "7\n", "5\n", "1\n", "4\n", "2\n", "6\n", "3\n", "3\n", "1\n", "4\n", "4\n", "3\n", "2\n", "1\n", "5\n", "12\n", "4\n", "3\n", "3\n", "11\n", "1\n", "2\n", "2\n", "3\n", "5\n"]}, "generated_tests": {"input": ["12\n-1\n9\n5\n6\n6\n-1\n6\n3\n8\n6\n1\n6\n", "4\n-1\n1\n1\n3\n", "5\n4\n3\n4\n5\n-1\n", "12\n7\n4\n4\n-1\n6\n7\n2\n7\n-1\n7\n4\n1\n", "3\n2\n-1\n2\n", "12\n5\n6\n7\n1\n-1\n9\n12\n4\n8\n-1\n6\n2\n", "12\n-1\n9\n5\n6\n6\n-1\n6\n3\n8\n6\n2\n6\n", "77\n53\n-1\n48\n-1\n51\n-1\n54\n43\n70\n19\n64\n35\n45\n58\n6\n61\n41\n56\n34\n-1\n54\n-1\n66\n65\n74\n16\n38\n1\n2\n61\n-1\n34\n-1\n-1\n7\n19\n57\n13\n61\n42\n-1\n34\n65\n16\n31\n61\n6\n5\n34\n15\n-1\n13\n4\n22\n74\n7\n-1\n70\n38\n61\n45\n53\n46\n22\n-1\n65\n34\n19\n43\n48\n33\n58\n36\n-1\n47\n24\n34\n", "12\n-1\n7\n9\n12\n1\n1\n-1\n-1\n8\n5\n4\n-1\n", "12\n11\n11\n8\n6\n1\n1\n2\n-1\n10\n3\n-1\n8\n", "12\n8\n6\n6\n8\n6\n-1\n5\n6\n8\n6\n8\n8\n", "12\n-1\n-1\n1\n-1\n1\n1\n5\n11\n8\n2\n6\n4\n", "5\n-1\n1\n1\n1\n-1\n", "12\n-1\n9\n5\n6\n6\n-1\n6\n3\n8\n8\n1\n6\n", "5\n4\n1\n4\n5\n-1\n", "12\n7\n4\n4\n-1\n6\n7\n2\n7\n-1\n7\n2\n1\n", "12\n-1\n7\n9\n12\n1\n1\n-1\n-1\n8\n1\n4\n-1\n", "12\n11\n11\n8\n6\n2\n1\n2\n-1\n10\n3\n-1\n8\n", "12\n8\n6\n6\n8\n9\n-1\n5\n6\n8\n6\n8\n8\n", "12\n-1\n9\n5\n6\n6\n-1\n6\n3\n8\n8\n1\n5\n", "5\n4\n1\n2\n5\n-1\n", "12\n7\n4\n4\n-1\n6\n7\n2\n7\n-1\n7\n1\n1\n", "12\n-1\n9\n5\n6\n6\n-1\n6\n3\n8\n8\n1\n3\n", "12\n-1\n9\n5\n6\n6\n-1\n5\n3\n8\n8\n1\n3\n", "12\n-1\n9\n5\n5\n6\n-1\n5\n3\n8\n8\n1\n3\n", "12\n-1\n8\n4\n-1\n4\n2\n11\n1\n-1\n6\n-1\n10\n", "12\n-1\n1\n1\n1\n1\n1\n3\n4\n3\n3\n4\n3\n", "77\n53\n-1\n48\n-1\n51\n-1\n54\n43\n70\n19\n64\n31\n45\n58\n6\n61\n41\n56\n34\n-1\n54\n-1\n66\n65\n74\n16\n38\n1\n2\n61\n-1\n34\n-1\n-1\n7\n19\n57\n13\n61\n42\n-1\n34\n65\n16\n51\n61\n6\n5\n34\n15\n-1\n13\n4\n22\n74\n7\n-1\n70\n38\n61\n45\n53\n46\n22\n-1\n65\n34\n19\n43\n48\n33\n58\n36\n-1\n47\n24\n34\n", "12\n7\n8\n4\n12\n7\n9\n-1\n-1\n-1\n8\n4\n-1\n", "12\n7\n4\n4\n-1\n6\n7\n9\n7\n-1\n7\n1\n1\n", "12\n-1\n1\n2\n3\n-1\n5\n6\n7\n-1\n9\n10\n4\n", "12\n-1\n10\n-1\n1\n-1\n5\n9\n9\n-1\n-1\n3\n-1\n", "12\n-1\n6\n10\n6\n1\n11\n4\n9\n11\n5\n1\n9\n", "12\n-1\n7\n9\n12\n1\n2\n-1\n-1\n8\n5\n4\n-1\n", "12\n11\n10\n8\n6\n1\n1\n2\n-1\n10\n3\n-1\n8\n", "12\n8\n6\n6\n8\n6\n-1\n5\n6\n8\n6\n8\n1\n", "5\n-1\n1\n1\n2\n-1\n", "12\n-1\n9\n5\n6\n11\n-1\n6\n3\n8\n8\n1\n6\n", "5\n4\n1\n1\n5\n-1\n", "12\n7\n4\n4\n-1\n6\n7\n2\n7\n-1\n3\n2\n1\n", "12\n-1\n7\n7\n12\n1\n1\n-1\n-1\n8\n1\n4\n-1\n", "12\n11\n11\n8\n6\n2\n2\n2\n-1\n10\n3\n-1\n8\n", "12\n8\n6\n6\n8\n3\n-1\n5\n6\n8\n6\n8\n8\n", "12\n7\n4\n4\n-1\n12\n7\n2\n7\n-1\n7\n1\n1\n", "12\n-1\n9\n5\n6\n6\n-1\n6\n3\n8\n8\n1\n4\n", "12\n7\n8\n4\n12\n7\n11\n-1\n-1\n-1\n8\n4\n-1\n", "12\n-1\n1\n1\n3\n-1\n5\n6\n7\n-1\n9\n10\n4\n", "12\n-1\n10\n-1\n1\n-1\n5\n9\n11\n-1\n-1\n3\n-1\n", "12\n-1\n6\n10\n12\n1\n11\n4\n9\n11\n5\n1\n9\n", "12\n-1\n6\n5\n6\n6\n-1\n6\n3\n8\n6\n2\n6\n", "12\n-1\n7\n9\n12\n1\n2\n-1\n-1\n8\n8\n4\n-1\n", "12\n8\n4\n6\n8\n6\n-1\n5\n6\n8\n6\n8\n1\n", "12\n-1\n9\n5\n6\n11\n-1\n6\n3\n8\n11\n1\n6\n", "12\n7\n4\n8\n-1\n6\n7\n2\n7\n-1\n3\n2\n1\n", "12\n-1\n7\n8\n12\n1\n1\n-1\n-1\n8\n1\n4\n-1\n"], "output": ["6\n", "3\n", "4\n", "5\n", "2\n", "10\n", "7\n", "6\n", "3\n", "4\n", "3\n", "5\n", "2\n", "6\n", "4\n", "5\n", "3\n", "4\n", "5\n", "6\n", "5\n", "5\n", "6\n", "6\n", "6\n", "6\n", "3\n", "6\n", "3\n", "4\n", "5\n", "2\n", "5\n", "3\n", "5\n", "4\n", "3\n", "7\n", "4\n", "5\n", "3\n", "4\n", "4\n", "6\n", "6\n", "4\n", "4\n", "3\n", "6\n", "5\n", "3\n", "4\n", "7\n", "6\n", "3\n"]}, "short_description": "1. One-sentence summary:  \nCompute the maximum depth of a forest of trees represented by parent pointers.  \n\n2. Core algorithmic approach:  \nLevel-order traversal (BFS) on each tree to measure its height.  \n\n3. Reusable components:  \n- Building an adjacency list from parent-array input.  \n- Extracting root nodes (those with no parent).  \n- A level-order depth computation routine that iteratively scans one layer\u2019s nodes to collect the next layer."}
{"name": "1338_B. Edge Weight Assignment", "description": "You have unweighted tree of n vertices. You have to assign a positive weight to each edge so that the following condition would hold:\n\n  * For every two different leaves v_{1} and v_{2} of this tree, [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of weights of all edges on the simple path between v_{1} and v_{2} has to be equal to 0. \n\n\n\nNote that you can put very large positive integers (like 10^{(10^{10})}).\n\nIt's guaranteed that such assignment always exists under given constraints. Now let's define f as the number of distinct weights in assignment.\n\n<image> In this example, assignment is valid, because bitwise XOR of all edge weights between every pair of leaves is 0. f value is 2 here, because there are 2 distinct edge weights(4 and 5).\n\n<image> In this example, assignment is invalid, because bitwise XOR of all edge weights between vertex 1 and vertex 6 (3, 4, 5, 4) is not 0. \n\nWhat are the minimum and the maximum possible values of f for the given tree? Find and print both.\n\nInput\n\nThe first line contains integer n (3 \u2264 n \u2264 10^{5}) \u2014 the number of vertices in given tree.\n\nThe i-th of the next n-1 lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i} < b_{i} \u2264 n) \u2014 it means there is an edge between a_{i} and b_{i}. It is guaranteed that given graph forms tree of n vertices.\n\nOutput\n\nPrint two integers \u2014 the minimum and maximum possible value of f can be made from valid assignment of given tree. Note that it's always possible to make an assignment under given constraints.\n\nExamples\n\nInput\n\n\n6\n1 3\n2 3\n3 4\n4 5\n5 6\n\n\nOutput\n\n\n1 4\n\n\nInput\n\n\n6\n1 3\n2 3\n3 4\n4 5\n4 6\n\n\nOutput\n\n\n3 3\n\n\nInput\n\n\n7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 7\n\n\nOutput\n\n\n1 6\n\nNote\n\nIn the first example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum. \n\n<image>\n\nIn the second example, possible assignments for each minimum and maximum are described in picture below. The f value of valid assignment of this tree is always 3. \n\n<image>\n\nIn the third example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum. \n\n<image>", "solution": "import sys\n# try:\n# \tsys.stdin = open('input.txt', 'r') \n# \tsys.stdout = open('output.txt', 'w')\n# except:\n# \tpass\n\ninput = sys.stdin.readline\ndef DFS(i):\n\tvisited = {i:True}\n\tstack = [(i,0)]\n\twhile len(stack)!=0:\n\t\ttail,depth = stack.pop(-1)\n\t\tflag = True\n\t\tfor each in neigh[tail]:\n\t\t\tif each not in visited:\n\t\t\t\tvisited[each] = True\n\t\t\t\tflag = False\n\t\t\t\tstack.append((each,depth+1))\n\t\tif flag:\n\t\t\tleafDepth.append(depth)\n\n\nn = int(input())\n\nneigh = [[] for i in range(n)]\nl = []\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    a -= 1\n    b -= 1\n    neigh[a].append(b)\n    neigh[b].append(a)\n    l.append((a,b))\n#Max\nedges = set()\nfor a, b in l:\n    if len(neigh[a]) == 1:\n        a = -1\n    if len(neigh[b]) == 1:\n        b = -1\n    if a > b:\n        a, b = b, a\n    edges.add((a,b))\n\nMAX = len(edges)\n\n#Min\nleafDepth = []\n\nDFS(0)\nif (len(neigh[0])==1):\n\tMIN = 1 if all([True if i%2==0 else False for i in leafDepth]) else 3\nelse:\n\tMIN = 1 if all([True if i%2==0 else False for i in leafDepth]) or all([True if i%2==1 else False for i in leafDepth]) else 3\n        \n#Out\nprint(MIN, MAX)", "difficulty": 8, "public_tests": {"input": ["6\n1 3\n2 3\n3 4\n4 5\n4 6\n", "6\n1 3\n2 3\n3 4\n4 5\n5 6\n", "7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 7\n"], "output": ["3 3\n", "1 4\n", "1 6\n"]}, "private_tests": {"input": ["5\n1 2\n2 3\n1 4\n4 5\n", "4\n1 2\n2 3\n3 4\n", "3\n1 2\n2 3\n", "5\n1 5\n2 5\n3 5\n4 5\n", "5\n1 2\n2 3\n1 4\n3 5\n"], "output": ["1 4\n", "3 3\n", "1 1\n", "1 1\n", "1 4\n"]}, "generated_tests": {"input": ["5\n1 2\n2 3\n2 4\n4 5\n", "6\n1 3\n2 3\n3 6\n4 5\n5 6\n", "5\n1 2\n2 3\n2 4\n2 5\n", "7\n1 2\n2 6\n3 4\n4 7\n5 6\n6 7\n", "6\n1 3\n2 3\n3 6\n4 1\n5 6\n", "7\n1 2\n2 6\n3 4\n4 7\n5 6\n1 7\n", "5\n1 3\n2 5\n3 5\n4 5\n", "6\n1 3\n2 3\n1 4\n4 5\n4 6\n", "6\n1 3\n2 3\n3 6\n4 5\n5 3\n", "5\n1 2\n2 5\n3 5\n4 5\n", "3\n1 2\n1 3\n", "5\n1 2\n2 3\n2 4\n3 5\n", "5\n1 2\n2 3\n2 5\n4 5\n", "4\n1 4\n2 3\n3 4\n", "4\n1 4\n2 3\n3 1\n", "4\n1 2\n2 4\n3 4\n", "7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 1\n", "5\n1 3\n2 5\n3 2\n4 5\n", "6\n1 3\n2 5\n3 6\n4 5\n5 6\n", "5\n1 2\n2 3\n3 4\n1 5\n", "5\n1 2\n4 3\n2 5\n4 5\n", "7\n1 2\n2 6\n3 4\n4 7\n5 6\n2 7\n", "6\n1 2\n2 3\n3 4\n4 5\n4 6\n", "6\n1 3\n2 3\n2 4\n4 5\n4 6\n", "5\n1 3\n3 5\n3 2\n4 5\n", "5\n1 2\n4 3\n1 5\n4 5\n", "7\n1 2\n2 6\n3 6\n4 7\n5 6\n2 7\n", "7\n1 4\n2 7\n3 4\n4 7\n5 6\n6 7\n", "6\n1 3\n2 4\n3 6\n4 5\n5 3\n", "4\n1 4\n2 3\n2 4\n", "7\n1 2\n2 4\n3 4\n4 7\n5 6\n6 1\n", "5\n1 3\n2 5\n3 2\n4 1\n", "6\n1 5\n2 3\n2 4\n4 5\n4 6\n", "7\n1 4\n2 6\n3 6\n4 7\n5 6\n2 7\n", "5\n1 4\n2 5\n3 5\n4 5\n", "5\n2 1\n2 5\n3 5\n4 5\n", "4\n1 4\n2 4\n3 4\n", "7\n1 2\n2 7\n3 2\n4 7\n5 6\n6 1\n", "6\n1 3\n2 3\n2 5\n4 5\n4 6\n", "7\n1 4\n2 6\n3 6\n4 7\n5 2\n2 7\n", "5\n1 2\n2 5\n1 4\n3 4\n", "5\n1 2\n2 3\n2 5\n4 2\n", "4\n1 4\n2 1\n3 1\n", "7\n1 2\n2 7\n3 1\n4 7\n5 6\n6 1\n", "5\n1 2\n2 3\n3 4\n2 5\n", "4\n1 2\n2 3\n2 4\n", "5\n1 5\n2 5\n3 2\n4 1\n", "5\n1 2\n4 3\n2 5\n4 2\n", "5\n1 2\n1 3\n2 4\n4 5\n", "6\n1 3\n2 3\n1 4\n4 5\n2 6\n", "6\n1 2\n2 3\n3 6\n4 5\n5 3\n", "7\n1 3\n2 6\n3 4\n4 7\n5 6\n6 7\n", "6\n1 4\n2 3\n2 4\n4 5\n4 6\n", "6\n1 3\n2 4\n5 6\n4 5\n5 3\n", "7\n1 4\n2 3\n3 6\n4 7\n5 6\n2 7\n", "7\n1 2\n2 7\n3 2\n4 3\n5 6\n6 1\n", "6\n1 4\n2 3\n2 4\n3 5\n4 6\n", "7\n1 4\n2 3\n1 6\n4 7\n5 6\n2 7\n", "4\n1 2\n1 3\n3 4\n", "6\n1 3\n2 3\n3 5\n4 5\n4 6\n", "7\n1 2\n2 7\n3 4\n3 7\n5 6\n6 7\n", "5\n1 2\n4 3\n2 4\n4 5\n", "6\n1 3\n2 4\n1 4\n4 5\n4 6\n", "6\n1 4\n2 3\n3 6\n4 5\n5 3\n", "7\n1 2\n2 5\n3 4\n4 7\n5 6\n6 7\n", "4\n1 2\n2 4\n3 2\n"], "output": ["3 3\n", "1 4\n", "1 1\n", "3 6\n", "3 5\n", "1 6\n", "3 3\n", "1 4\n", "3 3\n", "3 3\n", "1 1\n", "3 3\n", "3 3\n", "3 3\n", "3 3\n", "3 3\n", "1 6\n", "1 4\n", "1 4\n", "1 4\n", "1 4\n", "3 6\n", "1 4\n", "1 4\n", "3 3\n", "1 4\n", "3 5\n", "3 5\n", "1 4\n", "3 3\n", "3 5\n", "1 4\n", "3 5\n", "3 5\n", "3 3\n", "3 3\n", "1 1\n", "3 6\n", "3 5\n", "3 6\n", "1 4\n", "1 1\n", "1 1\n", "3 6\n", "3 3\n", "1 1\n", "1 4\n", "3 3\n", "1 4\n", "3 5\n", "3 5\n", "3 5\n", "3 3\n", "3 5\n", "1 6\n", "3 6\n", "1 4\n", "1 6\n", "3 3\n", "1 4\n", "1 6\n", "3 3\n", "3 3\n", "1 4\n", "1 6\n", "1 1\n"]}, "short_description": "1. One-sentence summary:  \nCompute two values on an undirected tree: (a) the number of edges whose both endpoints have degree > 1, and (b) a parity-based minimum metric determined by whether all leaves occur at uniformly even or odd depths.\n\n2. Core algorithmic approach:  \n- Graph construction with adjacency lists (O(n)).  \n- Iterative depth-first search (DFS) using an explicit stack to record and collect depths of leaves (O(n)).  \n- Basic set operations and degree checks to count internal edges (O(n)).\n\n3. Reusable components:  \n- Adjacency-list builder for undirected graphs.  \n- Iterative DFS that tracks node depth and collects per-node or per-leaf statistics.  \n- Pattern for counting or filtering edges based on endpoint degrees using a set to avoid duplicates."}
{"name": "913_B. Christmas Spruce", "description": "Consider a rooted tree. A rooted tree has one special vertex called the root. All edges are directed from the root. Vertex u is called a child of vertex v and vertex v is called a parent of vertex u if there exists a directed edge from v to u. A vertex is called a leaf if it doesn't have children and has a parent.\n\nLet's call a rooted tree a spruce if its every non-leaf vertex has at least 3 leaf children. You are given a rooted tree, check whether it's a spruce.\n\nThe definition of a rooted tree can be found [here](https://goo.gl/1dqvzz).\n\nInput\n\nThe first line contains one integer n \u2014 the number of vertices in the tree (3 \u2264 n \u2264 1 000). Each of the next n - 1 lines contains one integer pi (1 \u2264 i \u2264 n - 1) \u2014 the index of the parent of the i + 1-th vertex (1 \u2264 pi \u2264 i).\n\nVertex 1 is the root. It's guaranteed that the root has at least 2 children.\n\nOutput\n\nPrint \"Yes\" if the tree is a spruce and \"No\" otherwise.\n\nExamples\n\nInput\n\n4\n1\n1\n1\n\n\nOutput\n\nYes\n\n\nInput\n\n7\n1\n1\n1\n2\n2\n2\n\n\nOutput\n\nNo\n\n\nInput\n\n8\n1\n1\n1\n1\n3\n3\n3\n\n\nOutput\n\nYes\n\nNote\n\nThe first example:\n\n<image>\n\nThe second example:\n\n<image>\n\nIt is not a spruce, because the non-leaf vertex 1 has only 2 leaf children.\n\nThe third example:\n\n<image>", "solution": "if __name__ == '__main__':\n    n = int(input())\n    nonleaf = [0 for i in range(1010)]\n    child = [[] for i in range(1010)]\n    leaf = [0 for i in range(1010)]\n\n    def dfs(s):\n        cnt = 0\n        for chd in child[s]:\n            cnt += dfs(chd)\n        leaf[s] = cnt\n        return 1 - nonleaf[s]\n\n    for i in range(2, n + 1):\n        node = int(input())\n        child[node].append(i)\n        nonleaf[node] = 1\n\n    dfs(1)\n\n    # print(nonleaf[1:n + 1])\n    # print(child[1:n + 1])\n    # print(leaf[1:n + 1])\n\n    for i in range(1, n + 1):\n        if nonleaf[i] and leaf[i] < 3:\n            print(\"No\")\n            exit()\n\n    print(\"Yes\")\n\n          \t \t\t  \t \t\t   \t\t\t\t \t \t", "difficulty": 8, "public_tests": {"input": ["4\n1\n1\n1\n", "8\n1\n1\n1\n1\n3\n3\n3\n", "7\n1\n1\n1\n2\n2\n2\n"], "output": ["Yes\n", "Yes\n", "No\n"]}, "private_tests": {"input": ["7\n1\n1\n1\n3\n3\n3\n", "3\n1\n1\n", "12\n1\n1\n1\n2\n5\n5\n5\n5\n1\n2\n2\n", "13\n1\n2\n2\n2\n1\n6\n6\n6\n1\n10\n10\n10\n", "9\n1\n1\n1\n1\n2\n6\n6\n6\n", "20\n1\n1\n1\n1\n2\n2\n2\n3\n3\n3\n4\n4\n4\n5\n5\n5\n1\n1\n1\n", "8\n1\n1\n1\n1\n5\n5\n5\n", "7\n1\n1\n1\n1\n2\n2\n", "7\n1\n2\n2\n1\n1\n1\n"], "output": ["No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "Yes\n", "No\n", "No\n"]}, "generated_tests": {"input": ["3\n1\n2\n", "12\n1\n1\n1\n2\n3\n5\n5\n5\n1\n2\n2\n", "9\n1\n1\n1\n1\n2\n5\n6\n6\n", "7\n1\n2\n3\n1\n1\n1\n", "8\n1\n2\n1\n1\n3\n3\n3\n", "7\n1\n1\n1\n2\n3\n2\n", "9\n1\n1\n1\n1\n2\n5\n6\n5\n", "8\n1\n1\n1\n1\n3\n3\n2\n", "7\n1\n1\n1\n2\n1\n2\n", "7\n1\n1\n2\n2\n2\n2\n", "7\n1\n1\n1\n4\n3\n3\n", "20\n1\n1\n1\n1\n4\n2\n2\n3\n3\n3\n4\n4\n4\n5\n5\n5\n1\n1\n1\n", "12\n1\n1\n2\n2\n3\n5\n5\n5\n1\n2\n2\n", "9\n1\n1\n1\n1\n3\n5\n6\n6\n", "8\n1\n2\n1\n1\n5\n3\n3\n", "7\n1\n1\n1\n3\n3\n2\n", "20\n1\n1\n1\n1\n4\n2\n2\n3\n3\n3\n4\n4\n4\n10\n5\n5\n1\n1\n1\n", "9\n1\n1\n1\n1\n3\n2\n6\n6\n", "8\n1\n2\n1\n2\n5\n3\n3\n", "8\n1\n2\n1\n2\n5\n4\n3\n", "12\n1\n1\n1\n2\n5\n5\n5\n5\n1\n2\n4\n", "20\n1\n1\n1\n1\n2\n2\n2\n3\n2\n3\n4\n4\n4\n5\n5\n5\n1\n1\n1\n", "8\n1\n1\n2\n1\n5\n5\n5\n", "7\n1\n1\n1\n1\n2\n3\n", "7\n1\n1\n2\n1\n1\n1\n", "8\n1\n1\n1\n1\n3\n3\n6\n", "12\n1\n1\n1\n2\n3\n5\n5\n5\n2\n2\n2\n", "9\n1\n1\n1\n2\n2\n5\n6\n6\n", "7\n1\n2\n3\n2\n1\n1\n", "8\n1\n2\n1\n1\n3\n3\n2\n", "7\n1\n1\n1\n2\n3\n1\n", "8\n1\n1\n1\n1\n4\n3\n2\n", "7\n1\n1\n1\n4\n1\n2\n", "7\n1\n1\n2\n2\n4\n2\n", "8\n1\n2\n1\n1\n5\n3\n1\n", "7\n1\n1\n1\n3\n3\n4\n", "20\n1\n1\n1\n1\n4\n2\n2\n3\n3\n3\n4\n4\n4\n6\n5\n5\n1\n1\n1\n", "8\n1\n2\n1\n2\n5\n3\n5\n", "8\n1\n2\n1\n2\n5\n4\n4\n", "12\n1\n2\n1\n2\n5\n5\n5\n5\n1\n2\n4\n", "20\n1\n1\n1\n1\n2\n2\n2\n3\n2\n3\n4\n4\n3\n5\n5\n5\n1\n1\n1\n", "7\n1\n1\n3\n1\n1\n1\n", "7\n1\n2\n3\n2\n2\n1\n", "8\n1\n2\n1\n1\n1\n3\n2\n", "8\n1\n1\n1\n1\n4\n3\n1\n", "7\n1\n2\n2\n2\n4\n2\n", "8\n1\n2\n1\n1\n5\n3\n2\n", "20\n1\n1\n1\n1\n4\n2\n2\n3\n3\n3\n4\n5\n4\n6\n5\n5\n1\n1\n1\n", "8\n1\n2\n2\n2\n5\n3\n5\n", "8\n1\n2\n1\n4\n5\n4\n4\n", "12\n1\n2\n1\n3\n5\n5\n5\n5\n1\n2\n4\n", "20\n1\n1\n1\n1\n2\n2\n2\n3\n1\n3\n4\n4\n3\n5\n5\n5\n1\n1\n1\n", "8\n1\n2\n1\n2\n1\n3\n2\n", "8\n1\n1\n1\n1\n4\n4\n1\n", "7\n1\n2\n2\n2\n3\n2\n", "20\n1\n1\n1\n1\n4\n2\n2\n3\n3\n3\n3\n5\n4\n6\n5\n5\n1\n1\n1\n", "20\n1\n1\n1\n1\n4\n2\n2\n3\n1\n3\n4\n4\n3\n5\n5\n5\n1\n1\n1\n", "7\n1\n2\n1\n2\n3\n2\n", "7\n1\n1\n2\n3\n3\n3\n", "12\n1\n2\n1\n2\n5\n5\n5\n5\n1\n2\n2\n", "8\n1\n1\n1\n1\n5\n3\n5\n", "7\n1\n1\n1\n1\n3\n2\n", "7\n1\n1\n2\n1\n1\n2\n", "4\n1\n1\n2\n", "9\n1\n1\n2\n1\n2\n5\n6\n6\n"], "output": ["NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary  \nGiven a rooted tree described by parent pointers, the solution checks whether every internal node has at least three direct leaf children.\n\n2. Core algorithmic approach  \nA single recursive depth-first search (DFS) on the tree to classify nodes as leaf or internal and to count the number of direct leaf\u2010children for each internal node.\n\n3. Reusable components  \n- Tree construction via adjacency lists: reading parent references and populating child lists.  \n- DFS node classification: a function that returns 1 if a node is a leaf (no children) or 0 otherwise, while also accumulating statistics about children.  \n- Post-DFS validation pattern: iterating over nodes to enforce a per-node invariant (e.g., minimum number of leaf-children)."}
{"name": "1041_E. Tree Reconstruction", "description": "Monocarp has drawn a tree (an undirected connected acyclic graph) and then has given each vertex an index. All indices are distinct numbers from 1 to n. For every edge e of this tree, Monocarp has written two numbers: the maximum indices of the vertices of the two components formed if the edge e (and only this edge) is erased from the tree.\n\nMonocarp has given you a list of n - 1 pairs of numbers. He wants you to provide an example of a tree that will produce the said list if this tree exists. If such tree does not exist, say so.\n\nInput\n\nThe first line contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of vertices in the tree.\n\nEach of the next n-1 lines contains two integers a_i and b_i each (1 \u2264 a_i < b_i \u2264 n) \u2014 the maximal indices of vertices in the components formed if the i-th edge is removed.\n\nOutput\n\nIf there is no such tree that can produce the given list of pairs, print \"NO\" (without quotes).\n\nOtherwise print \"YES\" (without quotes) in the first line and the edges of the tree in the next n - 1 lines. Each of the last n - 1 lines should contain two integers x_i and y_i (1 \u2264 x_i, y_i \u2264 n) \u2014 vertices connected by an edge.\n\nNote: The numeration of edges doesn't matter for this task. Your solution will be considered correct if your tree produces the same pairs as given in the input file (possibly reordered). That means that you can print the edges of the tree you reconstructed in any order.\n\nExamples\n\nInput\n\n4\n3 4\n1 4\n3 4\n\n\nOutput\n\nYES\n1 3\n3 2\n2 4\n\n\nInput\n\n3\n1 3\n1 3\n\n\nOutput\n\nNO\n\n\nInput\n\n3\n1 2\n2 3\n\n\nOutput\n\nNO\n\nNote\n\nPossible tree from the first example. Dotted lines show edges you need to remove to get appropriate pairs. \n\n<image>", "solution": "# \n\ndef solve():\n    n = int(input())\n    d = {}\n    \n    for _ in range(n-1):\n        u, v = map(int, input().split())\n        min_ = min(u, v)\n        max_ = max(u, v)\n        \n        if max_ != n:\n            return False, None\n        \n        if min_ not in d:\n            d[min_] = 0\n        d[min_] += 1\n    \n    if sum(list(d.values())) + 1 != n:\n        return False, None\n        \n    edge = [] \n    used = {i:False for i in range(1, n+1)}\n    \n    for k in sorted(list(d.keys())):\n        used[k] = True\n        mid     = [n]\n        \n        for i in range(k-1, 0, -1): # k-1->1\n            \n            if len(mid) == d[k]:\n                break\n                \n            if used[i] == False:\n                used[i] = True\n                mid.append(i)\n                \n        if len(mid) < d[k]:\n            return False, None\n        \n        mid.append(k)\n        \n        for  u, v in zip(mid[:-1], mid[1:]):\n            edge.append([u, v])\n    \n    return True, edge        \n            \nans, arr = solve()\n\nif ans == False:\n    print('NO')\nelse:\n    print('YES')\n    for u, v in arr:\n        print(str(u)+' '+str(v))\n\n#4\n#3 4\n#1 4\n#3 4    \n    ", "difficulty": 11, "public_tests": {"input": ["3\n1 2\n2 3\n", "4\n3 4\n1 4\n3 4\n", "3\n1 3\n1 3\n"], "output": ["NO\n", "YES\n1 3\n3 2\n2 4\n", "NO\n"]}, "private_tests": {"input": ["15\n10 15\n12 15\n6 15\n8 15\n2 15\n3 15\n10 15\n13 15\n5 15\n7 15\n11 15\n4 14\n1 15\n14 15\n", "15\n9 15\n6 15\n12 15\n3 14\n14 15\n11 15\n6 15\n7 15\n10 15\n4 15\n1 15\n13 15\n2 15\n9 15\n", "2\n1 2\n", "15\n13 15\n9 15\n6 15\n14 15\n4 15\n7 15\n11 15\n5 15\n8 15\n2 15\n12 15\n4 15\n12 14\n1 15\n"], "output": ["NO\n", "NO\n", "YES\n1 2\n", "NO\n"]}, "generated_tests": {"input": ["15\n10 15\n12 15\n6 15\n8 15\n2 15\n3 15\n10 15\n13 15\n5 15\n7 15\n11 15\n4 11\n1 15\n14 15\n", "3\n2 3\n1 3\n", "15\n9 15\n6 15\n12 15\n3 14\n14 15\n11 15\n6 15\n7 15\n10 15\n4 15\n1 15\n13 15\n1 15\n9 15\n", "15\n13 15\n9 15\n6 15\n14 15\n4 15\n7 15\n11 15\n5 15\n8 15\n2 15\n12 15\n4 15\n21 14\n1 15\n", "3\n1 2\n3 3\n", "15\n10 15\n12 15\n6 15\n8 15\n2 15\n3 15\n10 15\n13 15\n5 15\n7 15\n11 15\n4 11\n0 15\n14 15\n", "15\n9 15\n6 15\n12 15\n3 14\n14 15\n11 15\n6 15\n7 15\n10 15\n2 15\n1 15\n13 15\n1 15\n9 15\n", "15\n13 15\n9 15\n6 15\n14 15\n4 15\n7 15\n11 15\n5 18\n8 15\n2 15\n12 15\n4 15\n21 14\n1 15\n", "3\n1 1\n3 3\n", "15\n4 15\n12 15\n6 15\n8 15\n2 15\n3 15\n10 15\n13 15\n5 15\n7 15\n11 15\n4 11\n0 15\n14 15\n", "15\n9 15\n6 15\n12 15\n3 14\n14 15\n11 15\n6 15\n7 15\n10 15\n2 15\n1 15\n13 15\n1 15\n11 15\n", "15\n13 15\n9 15\n11 15\n14 15\n4 15\n7 15\n11 15\n5 18\n8 15\n2 15\n12 15\n4 15\n21 14\n1 15\n", "3\n0 1\n3 3\n", "15\n4 15\n12 15\n6 15\n8 15\n2 15\n3 15\n10 15\n13 15\n5 15\n7 15\n14 15\n4 11\n0 15\n14 15\n", "15\n9 15\n6 15\n12 15\n3 14\n14 15\n11 15\n6 15\n7 15\n10 15\n2 15\n1 15\n13 15\n2 15\n11 15\n", "15\n13 15\n9 15\n11 15\n14 15\n4 15\n3 15\n11 15\n5 18\n8 15\n2 15\n12 15\n4 15\n21 14\n1 15\n", "3\n0 1\n5 3\n", "15\n4 15\n12 15\n6 15\n8 15\n2 15\n3 15\n10 15\n13 7\n5 15\n7 15\n14 15\n4 11\n0 15\n14 15\n", "15\n9 15\n6 3\n12 15\n3 14\n14 15\n11 15\n6 15\n7 15\n10 15\n2 15\n1 15\n13 15\n2 15\n11 15\n", "15\n13 15\n9 15\n11 15\n14 15\n0 15\n3 15\n11 15\n5 18\n8 15\n2 15\n12 15\n4 15\n21 14\n1 15\n", "3\n1 1\n5 3\n", "15\n4 15\n12 18\n6 15\n8 15\n2 15\n3 15\n10 15\n13 7\n5 15\n7 15\n14 15\n4 11\n0 15\n14 15\n", "15\n9 15\n6 3\n12 15\n3 14\n14 15\n11 15\n6 15\n7 15\n10 15\n2 10\n1 15\n13 15\n2 15\n11 15\n", "15\n13 15\n9 15\n11 15\n14 15\n0 15\n3 15\n11 15\n5 18\n8 15\n2 29\n12 15\n4 15\n21 14\n1 15\n", "3\n1 1\n5 5\n", "15\n4 15\n12 18\n6 15\n8 15\n2 15\n3 15\n10 15\n13 7\n5 17\n7 15\n14 15\n4 11\n0 15\n14 15\n", "15\n9 15\n6 3\n12 15\n3 14\n14 15\n11 15\n6 15\n4 15\n10 15\n2 10\n1 15\n13 15\n2 15\n11 15\n", "15\n13 15\n9 15\n11 29\n14 15\n0 15\n3 15\n11 15\n5 18\n8 15\n2 29\n12 15\n4 15\n21 14\n1 15\n", "3\n1 1\n1 5\n", "15\n4 15\n12 18\n6 15\n8 15\n2 15\n3 15\n10 5\n13 7\n5 17\n7 15\n14 15\n4 11\n0 15\n14 15\n", "15\n9 15\n6 3\n12 15\n3 14\n14 15\n11 15\n6 15\n4 15\n20 15\n2 10\n1 15\n13 15\n2 15\n11 15\n", "15\n13 15\n9 15\n11 29\n14 15\n0 15\n3 15\n11 15\n2 18\n8 15\n2 29\n12 15\n4 15\n21 14\n1 15\n", "3\n0 1\n1 5\n", "15\n4 15\n12 9\n6 15\n8 15\n2 15\n3 15\n10 5\n13 7\n5 17\n7 15\n14 15\n4 11\n0 15\n14 15\n", "15\n9 15\n6 3\n12 8\n3 14\n14 15\n11 15\n6 15\n4 15\n20 15\n2 10\n1 15\n13 15\n2 15\n11 15\n", "15\n13 15\n9 15\n11 29\n14 15\n0 15\n3 15\n11 15\n2 18\n8 15\n2 29\n12 15\n4 15\n21 15\n1 15\n", "3\n0 1\n2 5\n", "15\n4 15\n12 9\n6 15\n8 15\n2 15\n2 15\n10 5\n13 7\n5 17\n7 15\n14 15\n4 11\n0 15\n14 15\n", "15\n9 15\n6 3\n12 8\n3 14\n14 15\n11 15\n6 15\n4 15\n20 15\n2 10\n1 15\n13 15\n2 15\n20 15\n", "15\n25 15\n9 15\n11 29\n14 15\n0 15\n3 15\n11 15\n2 18\n8 15\n2 29\n12 15\n4 15\n21 15\n1 15\n", "3\n0 1\n2 8\n", "15\n4 15\n12 9\n6 15\n8 15\n2 15\n2 15\n10 5\n13 7\n5 17\n7 15\n14 15\n4 11\n0 15\n14 10\n", "15\n9 15\n6 3\n12 8\n3 14\n14 15\n11 15\n6 15\n4 15\n20 15\n2 10\n2 15\n13 15\n2 15\n20 15\n", "15\n25 15\n9 15\n11 29\n14 15\n0 15\n3 15\n11 15\n2 18\n8 15\n2 29\n12 15\n4 15\n21 15\n1 29\n", "3\n0 1\n2 11\n", "15\n4 15\n12 9\n6 15\n8 15\n2 15\n2 15\n10 5\n13 7\n5 17\n7 15\n14 13\n4 11\n0 15\n14 10\n", "15\n9 15\n6 3\n12 8\n3 14\n14 15\n11 15\n6 15\n6 15\n20 15\n2 10\n2 15\n13 15\n2 15\n20 15\n", "15\n25 15\n9 15\n11 29\n14 15\n0 15\n3 15\n11 15\n2 18\n8 15\n2 29\n12 15\n0 15\n21 15\n1 29\n", "3\n0 1\n1 11\n", "15\n4 15\n12 9\n6 15\n8 15\n2 23\n2 15\n10 5\n13 7\n5 17\n7 15\n14 13\n4 11\n0 15\n14 10\n", "15\n9 15\n6 3\n12 8\n3 14\n14 15\n11 15\n6 15\n6 15\n20 8\n2 10\n2 15\n13 15\n2 15\n20 15\n", "15\n25 15\n9 15\n11 29\n14 15\n0 15\n3 15\n1 15\n2 18\n8 15\n2 29\n12 15\n0 15\n21 15\n1 29\n", "3\n0 0\n1 11\n", "15\n5 15\n12 9\n6 15\n8 15\n2 23\n2 15\n10 5\n13 7\n5 17\n7 15\n14 13\n4 11\n0 15\n14 10\n", "15\n15 15\n6 3\n12 8\n3 14\n14 15\n11 15\n6 15\n6 15\n20 8\n2 10\n2 15\n13 15\n2 15\n20 15\n"], "output": ["NO", "YES\n1 2\n2 3\n", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "NO"]}, "short_description": "1. One-sentence summary  \nGiven a target size and a list of unordered pairs that must all include the maximum element, determine whether one can form a spanning structure (a \u201ctree\u2010like\u201d set of chains) using exactly the prescribed counts per smaller element, and if so, construct its edges.\n\n2. Core algorithmic approach  \nGreedy assignment with sorting:  \n- Count how many times each smaller node must appear (degree requirement).  \n- Process these nodes in increasing order of key, and for each, greedily pick the smallest unused nodes to form a chain ending at that key and the maximum node.  \n- Validate total counts and chain lengths match the required sums.\n\n3. Reusable components  \n- Degree\u2010count map: tally occurrences or required degrees of nodes in a dictionary.  \n- Boolean \u201cused\u201d array (or set) to track which elements have been assigned to chains.  \n- Greedy chain\u2010building loop: for each key, scan backward (or over a sorted list of candidates) to pick unused nodes until the required count is met, then zip consecutive elements to generate edges."}
{"name": "1086_B. Minimum Diameter Tree", "description": "You are given a tree (an undirected connected graph without cycles) and an integer s.\n\nVanya wants to put weights on all edges of the tree so that all weights are non-negative real numbers and their sum is s. At the same time, he wants to make the diameter of the tree as small as possible.\n\nLet's define the diameter of a weighed tree as the maximum sum of the weights of the edges lying on the path between two some vertices of the tree. In other words, the diameter of a weighed tree is the length of the longest simple path in the tree, where length of a path is equal to the sum of weights over all edges in the path.\n\nFind the minimum possible diameter that Vanya can get.\n\nInput\n\nThe first line contains two integer numbers n and s (2 \u2264 n \u2264 10^5, 1 \u2264 s \u2264 10^9) \u2014 the number of vertices in the tree and the sum of edge weights.\n\nEach of the following n\u22121 lines contains two space-separated integer numbers a_i and b_i (1 \u2264 a_i, b_i \u2264 n, a_i \u2260 b_i) \u2014 the indexes of vertices connected by an edge. The edges are undirected.\n\nIt is guaranteed that the given edges form a tree.\n\nOutput\n\nPrint the minimum diameter of the tree that Vanya can get by placing some non-negative real weights on its edges with the sum equal to s.\n\nYour answer will be considered correct if its absolute or relative error does not exceed 10^{-6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is considered correct if \\frac {|a-b|} {max(1, b)} \u2264 10^{-6}.\n\nExamples\n\nInput\n\n\n4 3\n1 2\n1 3\n1 4\n\n\nOutput\n\n\n2.000000000000000000\n\nInput\n\n\n6 1\n2 1\n2 3\n2 5\n5 4\n5 6\n\n\nOutput\n\n\n0.500000000000000000\n\nInput\n\n\n5 5\n1 2\n2 3\n3 4\n3 5\n\n\nOutput\n\n\n3.333333333333333333\n\nNote\n\nIn the first example it is necessary to put weights like this:\n\n<image>\n\nIt is easy to see that the diameter of this tree is 2. It can be proved that it is the minimum possible diameter.\n\nIn the second example it is necessary to put weights like this:\n\n<image>", "solution": "n, s = map(int, input().split())\na = [0] * n\nif n == 2:\n    xc, xd = map(int, input().split())\n    print(s)\n    exit()\nfor i in range(n - 1):\n    xc, xd = map(int, input().split())\n    a[xd - 1] += 1\n    a[xc - 1] += 1\ncnt = 0\nfor i in range(n):\n    if a[i] == 1:\n        cnt += 1\nprint(2 * round(s / cnt, 10))", "difficulty": 8, "public_tests": {"input": ["6 1\n2 1\n2 3\n2 5\n5 4\n5 6\n", "4 3\n1 2\n1 3\n1 4\n", "5 5\n1 2\n2 3\n3 4\n3 5\n"], "output": ["0.5000000000\n", "2.0000000000\n", "3.3333333333\n"]}, "private_tests": {"input": ["2 1000000000\n2 1\n", "2 1\n2 1\n", "4 1\n4 1\n2 4\n3 1\n", "3 1000000000\n3 2\n2 1\n", "4 1\n1 3\n1 4\n2 1\n"], "output": ["1000000000.0000000000\n", "1.0000000000\n", "1.0000000000\n", "1000000000.0000000000\n", "0.6666666667\n"]}, "generated_tests": {"input": ["4 1\n2 3\n1 4\n2 1\n", "6 1\n2 1\n4 3\n2 5\n5 4\n5 6\n", "6 1\n2 1\n2 3\n2 5\n2 4\n5 6\n", "4 5\n1 2\n1 3\n1 4\n", "6 2\n2 1\n4 3\n4 5\n1 4\n5 6\n", "6 0\n2 1\n4 3\n2 5\n1 4\n5 6\n", "6 2\n2 1\n4 3\n2 5\n1 4\n5 6\n", "4 5\n1 2\n1 3\n2 4\n", "2 3\n2 1\n", "4 6\n4 2\n2 1\n3 1\n", "5 8\n1 2\n2 3\n3 4\n3 5\n", "6 1\n2 1\n4 3\n2 5\n1 4\n5 6\n", "6 1\n2 1\n4 3\n4 5\n1 4\n5 6\n", "4 1\n4 3\n1 4\n2 1\n", "6 1\n2 1\n4 3\n4 5\n2 4\n5 6\n", "4 0\n4 1\n2 4\n3 1\n", "4 0\n1 3\n1 4\n2 1\n", "6 1\n3 1\n2 3\n2 5\n5 4\n5 6\n", "5 5\n1 2\n2 3\n3 4\n2 5\n", "4 0\n4 2\n2 4\n3 1\n", "2 2\n2 1\n", "4 2\n4 1\n2 4\n3 1\n", "6 2\n2 1\n4 3\n4 6\n1 4\n5 6\n", "6 1\n4 1\n4 3\n4 5\n2 4\n5 6\n", "4 0\n1 2\n1 4\n2 1\n", "6 1\n3 1\n4 3\n2 5\n5 4\n5 6\n", "4 5\n1 2\n2 3\n2 4\n", "4 2\n4 1\n2 1\n3 1\n", "6 1\n6 1\n4 3\n2 5\n5 4\n5 6\n", "6 1\n2 1\n4 3\n4 6\n1 4\n5 6\n", "4 2\n4 3\n1 4\n2 1\n", "6 0\n2 1\n4 1\n2 5\n1 4\n5 6\n", "4 0\n1 3\n1 3\n2 1\n", "5 3\n1 2\n2 3\n3 4\n2 5\n", "6 3\n2 1\n4 3\n2 5\n1 4\n5 6\n", "4 0\n4 4\n2 4\n3 1\n", "6 2\n2 1\n4 3\n1 6\n1 4\n5 6\n", "6 1\n4 1\n4 3\n4 5\n2 1\n5 6\n", "4 2\n4 2\n2 1\n3 1\n", "6 0\n2 1\n4 1\n2 3\n1 4\n5 6\n", "4 3\n4 2\n2 1\n3 1\n", "6 0\n2 1\n4 1\n2 6\n1 4\n5 6\n", "2 0\n2 1\n", "4 3\n1 2\n1 3\n2 4\n", "6 1\n2 1\n6 3\n2 5\n1 4\n5 6\n", "4 5\n1 2\n2 3\n1 4\n", "6 2\n3 1\n2 3\n2 5\n5 4\n5 6\n", "4 5\n1 4\n1 3\n2 4\n", "4 0\n4 2\n2 1\n3 1\n", "6 2\n2 1\n4 3\n4 6\n1 4\n5 1\n", "6 1\n4 1\n4 3\n4 5\n2 4\n1 6\n", "6 1\n3 1\n4 3\n2 5\n5 4\n4 6\n", "4 0\n1 2\n1 3\n2 1\n", "4 5\n4 2\n2 1\n3 1\n", "6 2\n3 1\n2 3\n2 5\n2 4\n5 6\n", "6 2\n2 1\n4 3\n2 6\n1 4\n5 1\n", "6 0\n4 1\n4 3\n4 5\n2 4\n1 6\n", "6 1\n3 1\n4 3\n2 5\n5 4\n3 6\n", "6 0\n4 1\n4 3\n4 5\n4 4\n1 6\n", "6 1\n3 1\n4 3\n2 5\n5 4\n1 6\n", "6 1\n3 1\n4 3\n2 5\n5 3\n1 6\n", "6 0\n2 1\n4 3\n4 5\n2 4\n5 6\n", "4 0\n4 1\n1 4\n3 1\n", "6 2\n2 1\n4 3\n4 6\n2 4\n5 6\n"], "output": ["1.0000000000\n", "0.6666666667\n", "0.5000000000\n", "3.3333333333\n", "1.3333333333\n", "0.0000000000\n", "2.0000000000\n", "5.0000000000\n", "3.0000000000\n", "6.0000000000\n", "5.3333333333\n", "1.0000000000\n", "0.6666666667\n", "1.0000000000\n", "0.6666666667\n", "0.0000000000\n", "0.0000000000\n", "0.6666666667\n", "3.3333333333\n", "0.0000000000\n", "2.0000000000\n", "2.0000000000\n", "1.3333333333\n", "0.5000000000\n", "0.0000000000\n", "0.6666666667\n", "3.3333333333\n", "1.3333333333\n", "0.6666666667\n", "0.6666666667\n", "2.0000000000\n", "0.0000000000\n", "0.0000000000\n", "2.0000000000\n", "3.0000000000\n", "0.0000000000\n", "1.3333333333\n", "0.6666666667\n", "2.0000000000\n", "0.0000000000\n", "3.0000000000\n", "0.0000000000\n", "0.0000000000\n", "3.0000000000\n", "1.0000000000\n", "5.0000000000\n", "1.3333333333\n", "5.0000000000\n", "0.0000000000\n", "1.0000000000\n", "0.5000000000\n", "0.6666666667\n", "0.0000000000\n", "5.0000000000\n", "1.3333333333\n", "1.3333333333\n", "0.0000000000\n", "0.6666666667\n", "0.0000000000\n", "1.0000000000\n", "0.6666666667\n", "0.0000000000\n", "0.0000000000\n", "1.3333333333\n"]}, "short_description": "1. One-sentence summary:\nCompute a simple function of a tree\u2019s structure by counting its leaves and scaling a given value accordingly.\n\n2. Core algorithmic approach:\nLinear scan over edges to build node degrees in a tree and a second scan to count leaves (nodes of degree 1).  \n\n3. Reusable components:\n- Degree\u2010counting array: maintain an array of size n, increment for each endpoint when reading edges.\n- Leaf\u2010identification pass: a single loop to count how many nodes have degree exactly one.\n- Safe floating\u2010point scaling/rounding: compute a ratio and apply rounding to fixed precision."}
{"name": "1076_D. Edge Deletion", "description": "You are given an undirected connected weighted graph consisting of n vertices and m edges. Let's denote the length of the shortest path from vertex 1 to vertex i as d_i. \n\nYou have to erase some edges of the graph so that at most k edges remain. Let's call a vertex i good if there still exists a path from 1 to i with length d_i after erasing the edges.\n\nYour goal is to erase the edges in such a way that the number of good vertices is maximized.\n\nInput\n\nThe first line contains three integers n, m and k (2 \u2264 n \u2264 3 \u22c5 10^5, 1 \u2264 m \u2264 3 \u22c5 10^5, n - 1 \u2264 m, 0 \u2264 k \u2264 m) \u2014 the number of vertices and edges in the graph, and the maximum number of edges that can be retained in the graph, respectively.\n\nThen m lines follow, each containing three integers x, y, w (1 \u2264 x, y \u2264 n, x \u2260 y, 1 \u2264 w \u2264 10^9), denoting an edge connecting vertices x and y and having weight w.\n\nThe given graph is connected (any vertex can be reached from any other vertex) and simple (there are no self-loops, and for each unordered pair of vertices there exists at most one edge connecting these vertices).\n\nOutput\n\nIn the first line print e \u2014 the number of edges that should remain in the graph (0 \u2264 e \u2264 k).\n\nIn the second line print e distinct integers from 1 to m \u2014 the indices of edges that should remain in the graph. Edges are numbered in the same order they are given in the input. The number of good vertices should be as large as possible.\n\nExamples\n\nInput\n\n\n3 3 2\n1 2 1\n3 2 1\n1 3 3\n\n\nOutput\n\n\n2\n1 2 \n\nInput\n\n\n4 5 2\n4 1 8\n2 4 1\n2 1 3\n3 4 9\n3 1 5\n\n\nOutput\n\n\n2\n3 2 ", "solution": "import sys\nimport io, os\ninput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\nn,m,k = map(int, input().split())\ng = [[] for i in range(n)]\ntoid = {}\nfor i in range(m):\n    x,y,w = map(int, input().split())\n    x,y = x-1, y-1\n    g[x].append((w,y))\n    g[y].append((w,x))\n    toid[(x,y)] = i\n    toid[(y,x)] = i\n\nif k == 0:\n    print(0)\n    exit()\n\nimport heapq\nINF = 10**18\ndef dijkstra(s, edge):\n    n = len(edge)\n    dist = [INF]*n\n    prev = [-1]*n\n    dist[s] = 0\n    edgelist = []\n    heapq.heappush(edgelist,(dist[s], s))\n    while edgelist:\n        minedge = heapq.heappop(edgelist)\n        if dist[minedge[1]] < minedge[0]:\n            continue\n        v = minedge[1]\n        for e in edge[v]:\n            if dist[e[1]] > dist[v]+e[0]:\n                dist[e[1]] = dist[v]+e[0]\n                prev[e[1]] = v\n                heapq.heappush(edgelist,(dist[e[1]], e[1]))\n    return dist, prev\n\ndist, prev = dijkstra(0, g)\nG = [[] for i in range(n)]\nfor i, p in enumerate(prev):\n    if prev[i] != -1:\n        G[p].append(i)\n#print(G)\ns = []\ns.append(0)\norder = []\nwhile s:\n    v = s.pop()\n    order.append(v)\n    for u in G[v]:\n        s.append(u)\n#print(order)\nans = []\nfor v in order:\n    for u in G[v]:\n        ans.append(toid[(v, u)]+1)\n        if len(ans) == k:\n            break\n    else:\n        continue\n    break\nprint(len(ans))\nprint(*ans)\n", "difficulty": 10, "public_tests": {"input": ["4 5 2\n4 1 8\n2 4 1\n2 1 3\n3 4 9\n3 1 5\n", "3 3 2\n1 2 1\n3 2 1\n1 3 3\n"], "output": ["2\n3 2 \n", "2\n1 2 "]}, "private_tests": {"input": ["9 9 7\n1 2 1000000000\n7 9 1000000000\n9 4 1000000000\n2 6 1000000000\n2 3 1000000000\n3 7 1000000000\n6 8 1000000000\n8 4 1000000000\n4 5 1000000000\n", "5 5 4\n1 2 947932848\n2 3 932847264\n3 4 994392894\n1 5 943982748\n5 4 983472874\n", "7 8 6\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n3 5 50000000\n4 5 50000000\n6 4 50000000\n7 6 1\n7 3 1000000000\n", "6 6 4\n1 2 947932848\n2 3 932847264\n3 4 994392894\n1 5 943982748\n5 4 983472874\n5 6 236174687\n", "7 7 6\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n4 5 1000000000\n5 6 1000000000\n6 7 1000000000\n7 1 1000000000\n", "6 6 5\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n3 5 1\n4 6 1\n5 6 2\n", "10 10 4\n1 2 1000000000\n2 3 1\n3 4 1000000000\n4 5 1000000000\n5 6 1000000000\n6 7 1000000000\n7 8 1\n8 9 1000000000\n9 10 1000000000\n8 10 1\n", "7 7 4\n1 2 1000000000\n2 3 1000000000\n3 7 1\n7 5 1\n3 4 1000000000\n4 5 1000000000\n4 6 1\n", "4 4 0\n1 2 1\n2 3 1\n3 4 1\n1 4 2\n", "5 5 4\n1 2 999999999\n2 3 999999999\n3 4 999999999\n1 5 999999999\n5 4 999999999\n", "6 6 4\n1 2 999999998\n2 3 999999998\n3 4 999999998\n4 5 1\n1 6 999999999\n5 6 1000000000\n", "6 5 5\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n4 5 1000000000\n5 6 1000000000\n", "4 5 0\n4 1 8\n2 4 1\n2 1 3\n3 4 9\n3 1 5\n", "6 6 4\n1 2 999999999\n2 3 999999999\n3 4 999999999\n4 5 1\n1 6 1000000000\n5 6 1000000000\n", "4 3 3\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n"], "output": ["7\n1 5 4 6 7 8 2 \n", "4\n4 1 2 5 ", "6\n1 2 4 5 6 7 ", "4\n4 1 6 2 ", "6\n1 7 2 6 3 5 ", "5\n1 2 4 6 5 \n", "4\n1 2 3 4 ", "4\n1 2 3 4 \n", "0\n", "4\n1 4 2 5 ", "4\n1 5 2 6 ", "5\n1 2 3 4 5 ", "0\n", "4\n1 5 2 6 ", "3\n1 2 3 "]}, "generated_tests": {"input": ["5 5 4\n1 2 947932848\n2 3 932847264\n3 4 994392894\n1 5 1039247166\n5 4 983472874\n", "6 6 4\n1 2 947932848\n2 3 932847264\n3 4 994392894\n1 5 447264976\n5 4 983472874\n5 6 236174687\n", "7 7 6\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n4 5 1010000000\n5 6 1000000000\n6 7 1000000000\n7 1 1000000000\n", "6 6 5\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n3 5 1\n4 6 1\n1 6 2\n", "10 10 4\n1 2 1000000000\n2 3 1\n3 4 1000000000\n4 5 1000000000\n3 6 1000000000\n6 7 1000000000\n7 8 1\n8 9 1000000000\n9 10 1000000000\n8 10 1\n", "7 7 4\n1 2 1000000000\n2 3 1000100000\n3 7 1\n7 5 1\n3 4 1000000000\n4 5 1000000000\n4 6 1\n", "5 5 4\n1 2 999999999\n2 3 999999999\n3 4 999999999\n1 5 309966577\n5 4 999999999\n", "8 5 5\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n4 5 1000000000\n5 6 1000000000\n", "4 5 0\n4 1 8\n2 4 1\n2 1 3\n3 4 17\n3 1 5\n", "6 6 4\n1 2 999999999\n2 3 999999999\n4 4 999999999\n4 5 1\n1 6 1000000000\n5 6 1000000000\n", "4 3 6\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n", "6 6 4\n1 2 947932848\n2 3 481908008\n3 4 994392894\n1 5 447264976\n5 4 983472874\n5 6 236174687\n", "5 5 4\n1 2 1553634918\n2 3 999999999\n3 4 999999999\n1 5 309966577\n5 4 999999999\n", "6 6 4\n1 2 947932848\n2 3 481908008\n3 4 994392894\n1 5 447264976\n5 4 284894089\n5 6 236174687\n", "7 7 4\n1 2 1000000000\n2 3 1000100000\n3 7 2\n7 5 1\n3 4 1000000000\n4 5 1000000000\n4 7 1\n", "7 8 6\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n3 5 50000000\n4 5 50000000\n3 4 50000000\n7 6 1\n7 3 1000000000\n", "6 6 4\n1 2 947932848\n2 3 932847264\n6 4 994392894\n1 5 943982748\n5 4 983472874\n5 6 236174687\n", "6 6 4\n1 2 999999998\n3 3 999999998\n3 4 999999998\n4 5 1\n1 6 999999999\n5 6 1000000000\n", "4 5 2\n4 1 8\n2 4 1\n2 1 2\n3 4 9\n3 1 5\n", "5 5 4\n1 2 947932848\n1 3 932847264\n3 4 994392894\n1 5 1039247166\n5 4 983472874\n", "10 10 4\n1 2 1000000000\n2 3 1\n3 4 1000000001\n4 5 1000000000\n3 6 1000000000\n6 7 1000000000\n7 8 1\n8 9 1000000000\n9 10 1000000000\n8 10 1\n", "5 5 4\n1 2 239819102\n2 3 932847264\n3 1 994392894\n1 5 1039247166\n5 4 983472874\n", "7 7 6\n1 2 1000000000\n2 3 0000000000\n3 4 1000000000\n4 5 1010000000\n5 6 1000000001\n6 7 1000000000\n7 1 1000000000\n", "5 5 4\n1 2 239819102\n2 3 932847264\n3 4 994392894\n1 5 1555137521\n5 4 680237208\n", "7 7 7\n1 3 1000000000\n2 3 1000000000\n3 4 1000000000\n4 5 1010000000\n5 6 1000000001\n6 7 1000000000\n7 1 1000000000\n", "5 5 4\n1 2 239819102\n2 3 932847264\n3 4 994392894\n1 5 1039247166\n5 4 983472874\n", "7 7 6\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n4 5 1010000000\n5 6 1000000001\n6 7 1000000000\n7 1 1000000000\n", "6 6 5\n1 2 1000000000\n2 3 1000000000\n3 6 1000000000\n3 5 1\n4 6 1\n1 6 2\n", "10 10 4\n1 2 1000000000\n2 3 1\n3 5 1000000000\n4 5 1000000000\n3 6 1000000000\n6 7 1000000000\n7 8 1\n8 9 1000000000\n9 10 1000000000\n8 10 1\n", "7 7 4\n1 2 1000000000\n2 3 1000100000\n3 7 2\n7 5 1\n3 4 1000000000\n4 5 1000000000\n4 6 1\n", "8 5 5\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n4 5 1000000000\n5 7 1000000000\n", "4 5 0\n3 1 8\n2 4 1\n2 1 3\n3 4 17\n3 1 5\n", "6 6 4\n1 2 999999999\n2 3 999999999\n4 4 999999999\n4 5 1\n1 6 1000000000\n5 2 1000000000\n", "4 3 12\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n", "5 5 4\n1 2 239819102\n2 3 932847264\n3 4 994392894\n1 5 1039247166\n5 4 680237208\n", "7 7 7\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n4 5 1010000000\n5 6 1000000001\n6 7 1000000000\n7 1 1000000000\n", "6 6 5\n1 2 1000000000\n2 3 1000000000\n3 6 1000000100\n3 5 1\n4 6 1\n1 6 2\n", "10 10 4\n1 2 1000000000\n2 3 1\n3 5 1000000000\n4 5 1000000000\n3 6 1000001000\n6 7 1000000000\n7 8 1\n8 9 1000000000\n9 10 1000000000\n8 10 1\n", "5 5 4\n1 2 1553634918\n2 3 999999999\n3 4 999999999\n1 5 606988161\n5 4 999999999\n", "6 6 5\n1 2 1000000000\n2 3 1000000010\n3 6 1000000100\n3 5 1\n4 6 1\n1 6 2\n", "7 7 4\n1 2 1000000000\n2 3 1000100000\n3 7 2\n7 5 1\n3 4 1100000000\n4 5 1000000000\n4 7 1\n", "6 6 5\n1 2 1000000000\n2 5 1000000010\n3 6 1000000100\n3 5 1\n4 6 1\n1 6 2\n", "7 7 4\n1 2 1000000001\n2 3 1000100000\n3 7 2\n7 5 1\n3 4 1100000000\n4 5 1000000000\n4 7 1\n", "6 6 5\n1 2 1000000000\n2 5 1000000010\n3 1 1000000100\n3 5 1\n4 6 1\n1 6 2\n", "6 6 5\n1 2 1000000000\n2 5 1000000010\n3 1 1000000100\n3 5 1\n4 6 1\n1 6 1\n", "7 7 10\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n4 5 1000000000\n5 6 1000000000\n6 7 1000000000\n7 1 1000000000\n", "10 10 4\n1 2 1000000000\n2 3 1\n3 4 1000000000\n4 5 1000000000\n5 10 1000000000\n6 7 1000000000\n7 8 1\n8 9 1000000000\n9 10 1000000000\n8 10 1\n", "7 7 4\n1 2 1000000000\n2 3 1000000000\n3 7 1\n7 5 1\n3 4 1000000000\n3 5 1000000000\n4 6 1\n", "4 4 0\n1 2 1\n2 3 1\n3 4 1\n1 4 0\n", "6 3 3\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n", "6 6 4\n1 2 947932848\n2 5 932847264\n3 4 994392894\n1 5 447264976\n5 4 983472874\n5 6 236174687\n", "5 5 4\n1 2 999999999\n2 3 584343222\n3 4 999999999\n1 5 309966577\n5 4 999999999\n", "7 5 0\n4 1 8\n2 4 1\n2 1 3\n3 4 17\n3 1 5\n", "7 7 5\n1 2 1000000000\n2 3 1000100000\n3 7 2\n7 5 1\n3 4 1000000000\n4 5 1000000000\n4 6 1\n", "5 5 5\n1 2 1553634918\n2 3 999999999\n3 4 999999999\n1 5 309966577\n5 4 999999999\n", "10 10 4\n1 2 1000000000\n2 3 1\n3 5 1000000000\n4 5 1000000000\n3 6 1000001000\n6 5 1000000000\n7 8 1\n8 9 1000000000\n9 10 1000000000\n8 10 1\n", "7 7 4\n1 2 0000000000\n2 3 1000100000\n3 7 2\n7 5 1\n3 4 1000000000\n4 5 1000000000\n4 7 1\n"], "output": ["4\n1 4 2 5\n", "4\n4 6 1 5\n", "6\n1 7 2 6 3 5\n", "5\n6 5 1 3 4\n", "4\n1 2 3 5\n", "4\n1 2 3 4\n", "4\n4 1 5 2\n", "5\n1 2 3 4 5\n", "0\n\n", "4\n1 5 2 6\n", "3\n1 2 3\n", "4\n4 6 1 2\n", "4\n4 5 1 3\n", "4\n4 6 5 1\n", "4\n1 2 3 7\n", "6\n1 2 6 4 8 7\n", "4\n4 1 6 2\n", "4\n1 5 6 4\n", "2\n3 2\n", "4\n2 1 4 3\n", "4\n1 2 5 3\n", "4\n1 3 4 5\n", "6\n1 2 7 3 6 5\n", "4\n1 2 4 3\n", "6\n1 7 2 3 6 5\n", "4\n1 4 2 5\n", "6\n1 7 2 6 3 5\n", "5\n6 5 1 3 4\n", "4\n1 2 3 5\n", "4\n1 2 3 4\n", "5\n1 2 3 4 5\n", "0\n\n", "4\n1 5 2 6\n", "3\n1 2 3\n", "4\n1 4 2 5\n", "6\n1 7 2 6 3 5\n", "5\n6 5 1 3 4\n", "4\n1 2 3 5\n", "4\n4 1 5 2\n", "5\n6 5 1 3 4\n", "4\n1 2 3 7\n", "5\n6 5 1 3 4\n", "4\n1 2 3 7\n", "5\n6 5 1 3 4\n", "5\n6 5 1 3 4\n", "6\n1 7 2 6 3 5\n", "4\n1 2 3 4\n", "4\n1 2 3 4\n", "0\n\n", "3\n1 2 3\n", "4\n4 6 1 5\n", "4\n4 1 5 2\n", "0\n\n", "5\n1 2 3 4 5\n", "4\n4 5 1 3\n", "4\n1 2 3 5\n", "4\n1 2 3 7\n"]}, "short_description": "1. One-sentence summary:  \nCompute a shortest-path tree from a source in a weighted undirected graph and then extract the first k tree edges in a preorder traversal.\n\n2. Core algorithmic approach:  \n\u2013 Single-source shortest paths via Dijkstra\u2019s algorithm  \n\u2013 Tree construction from predecessor pointers  \n\u2013 Depth-first (stack-based) preorder traversal to pick k edges\n\n3. Reusable components:  \n\u2013 A Dijkstra function returning distance and predecessor arrays for any weighted graph  \n\u2013 Building a tree (adjacency list) from a predecessor list  \n\u2013 A stack-based DFS preorder iterator that can stop early after collecting a fixed number of edges"}
{"name": "747_E. Comments", "description": "A rare article in the Internet is posted without a possibility to comment it. On a Polycarp's website each article has comments feed.\n\nEach comment on Polycarp's website is a non-empty string consisting of uppercase and lowercase letters of English alphabet. Comments have tree-like structure, that means each comment except root comments (comments of the highest level) has exactly one parent comment.\n\nWhen Polycarp wants to save comments to his hard drive he uses the following format. Each comment he writes in the following format: \n\n  * at first, the text of the comment is written; \n  * after that the number of comments is written, for which this comment is a parent comment (i. e. the number of the replies to this comments); \n  * after that the comments for which this comment is a parent comment are written (the writing of these comments uses the same algorithm). \n\nAll elements in this format are separated by single comma. Similarly, the comments of the first level are separated by comma.\n\nFor example, if the comments look like:\n\n<image>\n\nthen the first comment is written as \"hello,2,ok,0,bye,0\", the second is written as \"test,0\", the third comment is written as \"one,1,two,2,a,0,b,0\". The whole comments feed is written as: \"hello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0\". For a given comments feed in the format specified above print the comments in a different format: \n\n  * at first, print a integer d \u2014 the maximum depth of nesting comments; \n  * after that print d lines, the i-th of them corresponds to nesting level i; \n  * for the i-th row print comments of nesting level i in the order of their appearance in the Policarp's comments feed, separated by space. \n\nInput\n\nThe first line contains non-empty comments feed in the described format. It consists of uppercase and lowercase letters of English alphabet, digits and commas. \n\nIt is guaranteed that each comment is a non-empty string consisting of uppercase and lowercase English characters. Each of the number of comments is integer (consisting of at least one digit), and either equals 0 or does not contain leading zeros.\n\nThe length of the whole string does not exceed 106. It is guaranteed that given structure of comments is valid. \n\nOutput\n\nPrint comments in a format that is given in the statement. For each level of nesting, comments should be printed in the order they are given in the input.\n\nExamples\n\nInput\n\nhello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0\n\n\nOutput\n\n3\nhello test one \nok bye two \na b \n\n\nInput\n\na,5,A,0,a,0,A,0,a,0,A,0\n\n\nOutput\n\n2\na \nA a A a A \n\n\nInput\n\nA,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\n\n\nOutput\n\n4\nA K M \nB F H L N O \nC D G I P \nE J \n\nNote\n\nThe first example is explained in the statements. ", "solution": "from queue import Queue\n\ndef parse(s):\n    A = s.split(',')\n    n = len(A)//2\n    B = [(A[2*i], int(A[2*i+1])) for i in range(n)]\n\n    stack = []\n    E = {i:[] for i in range(n+1)}\n    comment = {}\n    depth = {i:0 for i in range(n+1)}\n    for i, b in enumerate(reversed(B)):\n        comment[i+1] = b[0]\n        for j in range(b[1]):\n            k = stack.pop()\n            E[i+1].append(k)\n            depth[i+1] = max(depth[i+1], depth[k])\n\n        depth[i+1] += 1\n        stack.append(i+1)\n\n    E[0].extend(reversed(stack))\n    depth[0] = max(depth[i] for i in stack) + 1\n    comment[0] = None\n\n    Q = Queue()\n    Q.put(0)\n    res = [[] for i in range(depth[0])]\n    while not Q.empty():\n        v = Q.get()\n        d = depth[v] - 1\n        res[d].append(comment[v])\n        for u in E[v]:\n            depth[u] = d\n            Q.put(u)\n\n    res.pop()\n    return res\n\ns = input().rstrip()\nres = parse(s)    \nprint(len(res))\nfor layer in reversed(res):\n    print(' '.join(layer))\n", "difficulty": 11, "public_tests": {"input": ["A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\n", "a,5,A,0,a,0,A,0,a,0,A,0\n", "hello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0\n"], "output": ["4\nA K M \nB F H L N O \nC D G I P \nE J \n", "2\na \nA a A a A \n", "3\nhello test one \nok bye two \na b \n"]}, "private_tests": {"input": ["b,2,b,0,b,0,b,1,b,0,ba,1,b,0\n", "BA,0\n", "nwEwA,2,C,1,aG,0,xgv,0\n", "ab,0,ba,0\n", "aa,0\n", "a,3,aa,0,b,0,b,0,b,0,a,0,b,2,aa,1,a,0,ab,0\n", "a,2,b,0,bb,1,a,1,a,0\n", "bb,0,bb,0,b,1,ab,0,b,0,a,2,ab,0,bb,0\n", "ba,0,aa,1,a,0,bb,1,a,0,a,0,a,0,a,1,a,0\n", "bb,0,b,1,a,1,b,1,a,0,b,0\n", "Tu,1,dU,1,zncD,0\n", "a,0,bb,1,a,1,bb,0\n", "aa,0,ab,1,a,0\n"], "output": ["2\nb b ba \nb b b b \n", "1\nBA \n", "3\nnwEwA \nC xgv \naG \n", "1\nab ba \n", "1\naa \n", "3\na b a b \naa b b aa ab \na \n", "4\na \nb bb \na \na \n", "2\nbb bb b b a \nab ab bb \n", "2\nba aa bb a a a \na a a \n", "4\nbb b b \na \nb \na \n", "3\nTu \ndU \nzncD \n", "3\na bb \na \nbb \n", "2\naa ab \na \n"]}, "generated_tests": {"input": ["b,2,b,1,b,0,b,1,b,0,ba,1,b,0\n", "a,2,b,0,ab,1,a,1,a,0\n", "hello,2,pk,0,bye,0,test,0,one,1,two,2,a,0,b,0\n", "nwEwA,2,B,1,aG,0,xgv,0\n", "aa,0,ba,0\n", "bb,0,bb,0,b,1,ab,0,b,0,a,1,ab,0,bb,0\n", "a,0,bb,1,a,1,ba,0\n", "A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,O,0,O,1,P,0\n", "hello,2,pk,0,bye,0,uest,0,one,1,two,2,a,0,b,0\n", "hello,2,pb,0,bye,0,uest,0,one,1,two,2,a,0,k,0\n", "bb,0,b,1,b,1,a,1,a,0,b,0\n", "hello,2,pk,0,eyb,0,test,0,one,1,two,2,a,0,b,0\n", "nwEwA,2,B,1,bG,0,xgv,0\n", "bb,0,bb,0,b,1,ab,0,b,0,a,1,ac,0,bb,0\n", "a,0,ba,1,b,1,ba,0\n", "hello,2,pk,0,bye,0,uest,0,onf,1,two,2,a,0,b,0\n", "bb,0,c,1,b,1,a,1,a,0,b,0\n", "hello,2,pk,0,eyb,0,tdst,0,one,1,two,2,a,0,b,0\n", "nxEwA,2,B,1,bG,0,xgv,0\n", "bb,0,c,1,b,1,a,1,a,0,c,0\n", "hello,2,pk,0,eyb,0,udst,0,one,1,two,2,a,0,b,0\n", "bb,0,b,1,a,1,b,0,a,0,b,0\n", "a,0,bb,1,b,1,bb,0\n", "a,1,bb,1,a,1,ba,0\n", "ab,0,b,1,b,1,a,1,a,0,b,0\n", "hello,2,pk,0,eyb,0,test,0,ooe,1,two,2,a,0,b,0\n", "ba,0,bb,0,b,1,ab,0,b,0,a,1,ac,0,bb,0\n", "hello,2,pk,0,bye,0,uess,0,onf,1,two,2,a,0,b,0\n", "hello,2,pt,0,eyb,0,kdst,0,one,1,two,2,a,0,b,0\n", "nxEwA,2,B,1,bH,0,xgv,0\n", "a,1,bb,1,b,1,ba,0\n", "hello,2,pk,0,byn,0,uess,0,oef,1,two,2,a,0,b,0\n", "aa,0,bb,1,a,0\n", "b,1,b,1,b,0,b,1,b,0,ba,1,b,0\n", "a,2,a,0,ab,1,a,1,a,0\n", "nwEwA,2,B,1,aH,0,xgv,0\n", "ba,0,ba,0\n", "bb,0,b,1,a,1,a,1,a,0,b,0\n", "hello,2,pk,0,eyb,0,ttse,0,one,1,two,2,a,0,b,0\n", "hello,2,pk,0,bye,0,uest,0,onf,1,uwo,2,a,0,b,0\n", "ab,0,b,1,b,1,a,1,a,0,c,0\n", "ba,0,bb,0,b,1,ab,0,b,0,a,1,bc,0,bb,0\n", "hello,1,pk,0,bye,0,uess,0,onf,1,two,2,a,0,b,0\n", "b,1,a,1,b,0,b,1,b,0,bb,1,b,0\n", "nwDwA,2,B,1,aH,0,xgv,0\n", "hemlo,2,pk,0,bye,0,uest,0,onf,1,uwo,2,a,0,b,0\n", "bb,0,ba,0\n", "a,3,ab,0,b,0,b,0,b,0,a,0,b,2,aa,1,a,0,ab,0\n"], "output": ["3\nb ba\nb b b\nb b\n", "4\na\nb ab\na\na\n", "3\nhello test one\npk bye two\na b\n", "3\nnwEwA\nB xgv\naG\n", "1\naa ba\n", "2\nbb bb b b a bb\nab ab\n", "3\na bb\na\nba\n", "4\nA K M\nB F H L O O\nC D G I P\nE J\n", "3\nhello uest one\npk bye two\na b\n", "3\nhello uest one\npb bye two\na k\n", "4\nbb b b\nb\na\na\n", "3\nhello test one\npk eyb two\na b\n", "3\nnwEwA\nB xgv\nbG\n", "2\nbb bb b b a bb\nab ac\n", "3\na ba\nb\nba\n", "3\nhello uest onf\npk bye two\na b\n", "4\nbb c b\nb\na\na\n", "3\nhello tdst one\npk eyb two\na b\n", "3\nnxEwA\nB xgv\nbG\n", "4\nbb c c\nb\na\na\n", "3\nhello udst one\npk eyb two\na b\n", "3\nbb b a b\na\nb\n", "3\na bb\nb\nbb\n", "4\na\nbb\na\nba\n", "4\nab b b\nb\na\na\n", "3\nhello test ooe\npk eyb two\na b\n", "2\nba bb b b a bb\nab ac\n", "3\nhello uess onf\npk bye two\na b\n", "3\nhello kdst one\npt eyb two\na b\n", "3\nnxEwA\nB xgv\nbH\n", "4\na\nbb\nb\nba\n", "3\nhello uess oef\npk byn two\na b\n", "2\naa bb\na\n", "3\nb b ba\nb b b\nb\n", "4\na\na ab\na\na\n", "3\nnwEwA\nB xgv\naH\n", "1\nba ba\n", "4\nbb b b\na\na\na\n", "3\nhello ttse one\npk eyb two\na b\n", "3\nhello uest onf\npk bye uwo\na b\n", "4\nab b c\nb\na\na\n", "2\nba bb b b a bb\nab bc\n", "3\nhello bye uess onf\npk two\na b\n", "3\nb b bb\na b b\nb\n", "3\nnwDwA\nB xgv\naH\n", "3\nhemlo uest onf\npk bye uwo\na b\n", "1\nbb ba\n", "3\na b a b\nab b b aa ab\na\n"]}, "short_description": "1. One-sentence summary:\nReconstructs a rooted forest from a flat sequence of (label, child-count) pairs and then outputs the labels grouped by their depth in the resulting tree.\n\n2. Core algorithmic approach:\nUses a stack-based parsing method to build a parent\u2013child adjacency list (similar to parsing nested structures) followed by a breadth-first search to collect nodes by depth.\n\n3. Reusable components:\n- Stack-based tree/forest reconstruction: pushing new nodes and popping their children based on a given count.\n- Adjacency list representation of a tree/forest using a dictionary of lists.\n- BFS traversal that annotates or groups nodes by depth into layers."}
{"name": "292_B. Network Topology", "description": "This problem uses a simplified network topology model, please read the problem statement carefully and use it as a formal document as you develop the solution.\n\nPolycarpus continues working as a system administrator in a large corporation. The computer network of this corporation consists of n computers, some of them are connected by a cable. The computers are indexed by integers from 1 to n. It's known that any two computers connected by cable directly or through other computers\n\nPolycarpus decided to find out the network's topology. A network topology is the way of describing the network configuration, the scheme that shows the location and the connections of network devices.\n\nPolycarpus knows three main network topologies: bus, ring and star. A bus is the topology that represents a shared cable with all computers connected with it. In the ring topology the cable connects each computer only with two other ones. A star is the topology where all computers of a network are connected to the single central node.\n\nLet's represent each of these network topologies as a connected non-directed graph. A bus is a connected graph that is the only path, that is, the graph where all nodes are connected with two other ones except for some two nodes that are the beginning and the end of the path. A ring is a connected graph, where all nodes are connected with two other ones. A star is a connected graph, where a single central node is singled out and connected with all other nodes. For clarifications, see the picture.\n\n<image> (1) \u2014 bus, (2) \u2014 ring, (3) \u2014 star\n\nYou've got a connected non-directed graph that characterizes the computer network in Polycarpus' corporation. Help him find out, which topology type the given network is. If that is impossible to do, say that the network's topology is unknown. \n\nInput\n\nThe first line contains two space-separated integers n and m (4 \u2264 n \u2264 105; 3 \u2264 m \u2264 105) \u2014 the number of nodes and edges in the graph, correspondingly. Next m lines contain the description of the graph's edges. The i-th line contains a space-separated pair of integers xi, yi (1 \u2264 xi, yi \u2264 n) \u2014 the numbers of nodes that are connected by the i-the edge.\n\nIt is guaranteed that the given graph is connected. There is at most one edge between any two nodes. No edge connects a node with itself.\n\nOutput\n\nIn a single line print the network topology name of the given graph. If the answer is the bus, print \"bus topology\" (without the quotes), if the answer is the ring, print \"ring topology\" (without the quotes), if the answer is the star, print \"star topology\" (without the quotes). If no answer fits, print \"unknown topology\" (without the quotes).\n\nExamples\n\nInput\n\n4 3\n1 2\n2 3\n3 4\n\n\nOutput\n\nbus topology\n\n\nInput\n\n4 4\n1 2\n2 3\n3 4\n4 1\n\n\nOutput\n\nring topology\n\n\nInput\n\n4 3\n1 2\n1 3\n1 4\n\n\nOutput\n\nstar topology\n\n\nInput\n\n4 4\n1 2\n2 3\n3 1\n1 4\n\n\nOutput\n\nunknown topology", "solution": "n,m=map(int,input().split())\narr=[0]*(n+1)\nfor w in range(m):\n    a,b=map(int,input().split())\n    arr[a]+=1\n    arr[b]+=1\nc1=0\nc2=0\ncs=0\nfor i in range(1,n+1):\n    if arr[i]==1:\n        c1+=1\n    if arr[i]==2:\n        c2+=1\n    if arr[i]==n-1:\n        cs+=1\nif c1==2 and c2==n-2:\n    print(\"bus topology\")\nelif c2==n:\n    print(\"ring topology\")\nelif c1==n-1 and cs==1:\n    print(\"star topology\")\nelse:\n    print(\"unknown topology\")", "difficulty": 8, "public_tests": {"input": ["4 3\n1 2\n2 3\n3 4\n", "4 4\n1 2\n2 3\n3 4\n4 1\n", "4 4\n1 2\n2 3\n3 1\n1 4\n", "4 3\n1 2\n1 3\n1 4\n"], "output": ["bus topology\n", "ring topology\n", "unknown topology\n", "star topology\n"]}, "private_tests": {"input": ["4 4\n1 2\n2 3\n3 4\n4 2\n", "10 9\n10 6\n3 4\n8 9\n8 4\n6 1\n2 9\n5 1\n7 5\n10 3\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 1\n2 5\n7 10\n9 5\n7 1\n8 10\n3 4\n", "6 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 1\n", "4 3\n2 4\n1 3\n4 1\n", "5 4\n4 2\n5 2\n1 2\n2 3\n", "10 10\n1 4\n3 6\n10 7\n5 8\n2 10\n3 4\n7 5\n9 6\n8 1\n2 9\n", "5 4\n1 2\n3 5\n1 4\n5 4\n", "5 9\n5 3\n4 5\n3 1\n3 2\n2 1\n2 5\n1 5\n1 4\n4 2\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "4 4\n1 2\n2 3\n2 4\n3 4\n", "5 5\n3 4\n5 2\n2 1\n5 4\n3 1\n", "10 9\n10 1\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n", "4 4\n2 4\n4 1\n1 3\n2 3\n", "6 5\n1 2\n1 3\n1 4\n4 5\n4 6\n", "10 9\n1 4\n4 10\n4 9\n8 4\n4 7\n4 5\n4 2\n4 6\n4 3\n", "4 3\n1 2\n2 4\n3 2\n", "5 4\n1 2\n1 3\n1 4\n4 5\n", "4 4\n3 2\n2 4\n4 1\n1 2\n"], "output": ["unknown topology\n", "bus topology\n", "unknown topology\n", "unknown topology\n", "bus topology\n", "star topology\n", "ring topology\n", "bus topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "ring topology\n", "star topology\n", "ring topology\n", "unknown topology\n", "star topology\n", "star topology\n", "unknown topology\n", "unknown topology\n"]}, "generated_tests": {"input": ["6 6\n1 2\n4 3\n3 1\n4 5\n5 6\n6 1\n", "4 3\n1 4\n2 4\n3 2\n", "4 3\n1 4\n2 4\n3 4\n", "4 4\n1 4\n2 3\n2 4\n3 1\n", "10 10\n1 4\n3 6\n10 7\n5 8\n2 10\n3 4\n7 5\n9 6\n8 1\n4 9\n", "4 4\n1 4\n2 3\n2 4\n3 4\n", "5 5\n3 4\n5 1\n2 1\n5 4\n3 1\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 1\n2 1\n7 10\n9 5\n7 1\n8 10\n3 4\n", "6 6\n1 2\n2 3\n3 1\n4 5\n5 2\n6 1\n", "4 4\n1 2\n2 3\n2 4\n3 3\n", "4 4\n1 3\n2 3\n3 4\n4 1\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 1\n2 1\n7 10\n9 5\n7 1\n8 2\n3 4\n", "6 6\n1 2\n2 3\n3 2\n4 5\n5 2\n6 1\n", "4 4\n1 2\n2 3\n2 4\n1 3\n", "6 6\n1 2\n2 1\n3 1\n4 5\n5 6\n6 1\n", "5 4\n4 1\n5 2\n1 2\n2 3\n", "10 10\n1 4\n3 6\n10 9\n5 8\n2 10\n3 4\n7 5\n9 6\n8 1\n2 9\n", "5 9\n5 3\n4 5\n3 1\n3 2\n2 1\n2 5\n1 5\n1 4\n3 2\n", "4 4\n2 4\n4 1\n1 2\n2 3\n", "6 5\n2 2\n1 3\n1 4\n4 5\n4 6\n", "5 4\n1 2\n2 3\n1 4\n4 5\n", "10 10\n1 4\n3 6\n10 7\n5 8\n2 10\n3 4\n7 9\n9 6\n8 1\n4 9\n", "6 6\n1 2\n2 3\n3 1\n4 4\n5 2\n6 1\n", "4 4\n1 2\n2 3\n2 4\n3 1\n", "10 14\n3 1\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 1\n2 1\n7 10\n9 5\n7 1\n8 2\n3 4\n", "4 4\n1 2\n2 3\n2 4\n1 1\n", "10 10\n1 4\n3 6\n10 7\n5 8\n2 10\n3 4\n7 9\n9 6\n8 2\n4 9\n", "4 4\n1 2\n2 3\n3 4\n3 1\n", "10 14\n5 1\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 1\n2 1\n7 10\n9 5\n7 1\n8 2\n3 4\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 1\n2 5\n7 10\n9 5\n7 1\n5 10\n3 4\n", "6 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 2\n", "4 3\n2 4\n2 3\n4 1\n", "4 3\n1 2\n2 3\n1 4\n", "10 10\n1 4\n3 6\n10 7\n5 8\n2 10\n3 5\n7 5\n9 6\n8 1\n4 9\n", "5 5\n3 4\n5 1\n2 1\n5 4\n4 1\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 1\n2 1\n7 10\n9 5\n7 1\n4 2\n3 4\n", "10 10\n1 4\n3 6\n10 9\n5 8\n2 10\n3 1\n7 5\n9 6\n8 1\n2 9\n", "5 4\n1 2\n2 3\n2 4\n4 5\n", "10 10\n1 4\n4 6\n10 7\n5 8\n2 10\n3 4\n7 9\n9 6\n8 1\n4 9\n", "10 14\n3 1\n7 2\n6 3\n8 1\n3 9\n5 6\n6 3\n4 1\n2 1\n7 10\n9 5\n7 1\n8 2\n3 4\n", "4 4\n1 2\n4 3\n2 4\n1 1\n", "10 10\n1 4\n3 6\n10 7\n5 8\n2 10\n3 4\n7 3\n9 6\n8 2\n4 9\n", "10 14\n5 1\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 1\n2 1\n1 10\n9 5\n7 1\n8 2\n3 4\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 6\n6 4\n4 1\n2 1\n7 10\n9 5\n7 1\n4 2\n3 4\n", "10 10\n1 4\n3 6\n10 7\n5 8\n2 10\n3 1\n7 5\n9 6\n8 1\n2 9\n", "10 10\n1 4\n4 6\n10 7\n5 8\n2 10\n3 4\n7 9\n9 6\n8 2\n4 9\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 2\n2 5\n7 10\n9 5\n7 1\n8 10\n3 4\n", "5 4\n4 2\n5 1\n1 2\n2 3\n", "4 3\n1 2\n2 4\n3 4\n", "6 6\n1 2\n4 3\n3 1\n4 5\n5 5\n6 1\n", "10 14\n3 2\n7 2\n1 4\n8 1\n3 9\n5 6\n6 3\n4 1\n2 1\n7 10\n9 5\n7 1\n8 10\n3 4\n", "4 4\n1 2\n2 3\n2 4\n4 3\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 6\n2 3\n4 1\n2 1\n7 10\n9 5\n7 1\n8 2\n3 4\n", "6 5\n3 2\n1 3\n1 4\n4 5\n4 6\n", "4 3\n1 3\n2 4\n3 2\n", "10 10\n1 4\n3 6\n10 7\n5 8\n2 10\n3 5\n7 9\n9 6\n8 1\n4 9\n", "10 14\n3 1\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 1\n2 1\n7 10\n9 5\n7 1\n8 2\n1 4\n", "5 5\n3 4\n5 1\n2 1\n5 4\n1 1\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 4\n6 3\n4 1\n2 1\n7 10\n9 5\n7 1\n4 2\n3 4\n", "10 10\n1 7\n4 6\n10 7\n5 8\n2 10\n3 4\n7 9\n9 6\n8 1\n4 9\n", "4 4\n1 3\n4 3\n2 4\n1 1\n", "10 14\n5 1\n7 2\n6 4\n8 1\n3 9\n3 6\n6 3\n4 1\n2 1\n1 10\n9 5\n7 1\n8 2\n3 4\n", "10 10\n1 4\n3 6\n10 7\n5 8\n2 10\n6 1\n7 5\n9 6\n8 1\n2 9\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 6\n6 3\n4 4\n2 5\n7 10\n9 5\n7 1\n8 10\n3 4\n", "4 3\n1 3\n2 4\n3 4\n", "10 10\n1 1\n3 6\n10 7\n5 8\n2 10\n3 5\n7 9\n9 6\n8 1\n4 9\n", "4 4\n1 4\n2 3\n2 1\n3 1\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 4\n6 3\n4 1\n2 1\n7 10\n9 5\n7 2\n4 2\n3 4\n", "10 14\n5 1\n7 2\n6 4\n8 1\n3 9\n3 6\n6 3\n4 1\n2 1\n1 10\n9 10\n7 1\n8 2\n3 4\n", "10 10\n1 4\n3 6\n10 7\n5 8\n2 10\n6 1\n9 5\n9 6\n8 1\n2 9\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 7\n5 6\n6 3\n4 4\n2 5\n7 10\n9 5\n7 1\n8 10\n3 4\n", "10 10\n1 1\n3 6\n10 7\n5 8\n2 10\n3 5\n7 9\n9 6\n1 1\n4 9\n", "10 14\n3 2\n7 2\n6 4\n8 1\n3 9\n5 4\n6 3\n7 1\n2 1\n7 10\n9 5\n7 2\n4 2\n3 4\n", "10 14\n5 1\n7 2\n6 4\n8 1\n3 9\n3 6\n6 3\n4 1\n2 1\n1 10\n6 10\n7 1\n8 2\n3 4\n"], "output": ["unknown topology\n", "bus topology\n", "star topology\n", "ring topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "bus topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "bus topology\n", "bus topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "bus topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "bus topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "bus topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n", "unknown topology\n"]}, "short_description": "1. One-sentence summary  \nClassify an undirected graph\u2019s overall structure by analyzing vertex degree frequencies to determine if it forms a path, cycle, star, or none of these.\n\n2. Core algorithmic approach  \nSimple degree\u2010counting followed by pattern matching on the degree distribution (O(n + m) time, no complex graph traversal required).\n\n3. Reusable components  \n- Degree histogram computation: reading edge list and maintaining an array or map of vertex degrees.  \n- Degree\u2010frequency aggregation: counting how many vertices have each degree value.  \n- Topology\u2010pattern checks: predicates that test degree\u2010frequency conditions for common graph shapes (e.g., path: two degree-1 and rest degree-2; cycle: all degree-2; star: one degree-(n-1) and rest degree-1)."}
{"name": "1176_E. Cover it!", "description": "You are given an undirected unweighted connected graph consisting of n vertices and m edges. It is guaranteed that there are no self-loops or multiple edges in the given graph.\n\nYour task is to choose at most \u230an/2\u230b vertices in this graph so each unchosen vertex is adjacent (in other words, connected by an edge) to at least one of chosen vertices.\n\nIt is guaranteed that the answer exists. If there are multiple answers, you can print any.\n\nYou will be given multiple independent queries to answer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 2 \u22c5 10^5) \u2014 the number of queries.\n\nThen t queries follow.\n\nThe first line of each query contains two integers n and m (2 \u2264 n \u2264 2 \u22c5 10^5, n - 1 \u2264 m \u2264 min(2 \u22c5 10^5, (n(n-1))/(2))) \u2014 the number of vertices and the number of edges, respectively.\n\nThe following m lines denote edges: edge i is represented by a pair of integers v_i, u_i (1 \u2264 v_i, u_i \u2264 n, u_i \u2260 v_i), which are the indices of vertices connected by the edge.\n\nThere are no self-loops or multiple edges in the given graph, i. e. for each pair (v_i, u_i) there are no other pairs (v_i, u_i) or (u_i, v_i) in the list of edges, and for each pair (v_i, u_i) the condition v_i \u2260 u_i is satisfied. It is guaranteed that the given graph is connected.\n\nIt is guaranteed that \u2211 m \u2264 2 \u22c5 10^5 over all queries.\n\nOutput\n\nFor each query print two lines.\n\nIn the first line print k (1 \u2264 \u230an/2\u230b) \u2014 the number of chosen vertices.\n\nIn the second line print k distinct integers c_1, c_2, ..., c_k in any order, where c_i is the index of the i-th chosen vertex.\n\nIt is guaranteed that the answer exists. If there are multiple answers, you can print any.\n\nExample\n\nInput\n\n\n2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 6\n\n\nOutput\n\n\n2\n1 3\n3\n4 3 6\n\nNote\n\nIn the first query any vertex or any pair of vertices will suffice.\n\n<image>\n\nNote that you don't have to minimize the number of chosen vertices. In the second query two vertices can be enough (vertices 2 and 4) but three is also ok.\n\n<image>", "solution": "n, m = map(int, input().split())\ng = []\nfor i in range(n):\n    g.append([])\nfor i in range(m):\n    u, v = map(int, input().split())\n    u-=1\n    v-=1\n    g[u]+=[v]\n    g[v]+=[u]\n\nstart = max(range(n), key=lambda i: len(g[i]))\nedges = []\nvis = [False] * n\nq = [start]\nvis[start] = True\nwhile q:\n    u = q.pop(0)\n    for v in g[u]:\n        if vis[v]:\n            continue\n        vis[v] = True\n        edges.append((u, v))\n        q.append(v)\n\nfor u, v in edges:\n    print(u+1, v+1)", "difficulty": 11, "public_tests": {"input": ["2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 6\n"], "output": ["1\n1 \n3\n3 4 6 \n"]}, "private_tests": {"input": ["5 6\n2 1\n2 3\n2 4\n2 5\n3 4\n3 5\n", "5 6\n1 5\n2 5\n3 5\n4 5\n2 3\n1 2\n", "5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n", "2 1\n1 2\n", "8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 6\n"], "output": ["2 1\n2 3\n2 4\n2 5\n", "5 1\n5 2\n5 3\n5 4\n", "3 2\n3 5\n3 4\n2 1\n", "1 2\n", "2 1\n2 3\n2 5\n2 7\n1 6\n3 4\n5 8\n", "1 2\n1 3\n1 4\n", "1\n1 \n3\n3 4 6 \n"]}, "generated_tests": {"input": ["3 6\n2 1\n2 3\n2 4\n2 5\n3 4\n3 5\n", "5 5\n1 3\n2 3\n3 5\n4 3\n1 5\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n6 4\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "5 5\n1 6\n2 3\n3 5\n4 3\n1 5\n", "2\n4 6\n1 2\n1 3\n2 4\n2 3\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n2 6\n5 6\n", "2 1\n1 4\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 5\n", "2\n4 6\n1 2\n1 4\n1 4\n2 3\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n2 4\n4 3\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n2 6\n5 6\n", "2\n4 5\n1 2\n1 3\n1 4\n2 3\n2 0\n3 3\n6 0\n2 7\n5 6\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 4\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 6\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n2 7\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 2\n6 8\n2 7\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 2\n6 8\n2 7\n5 6\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 2\n6 0\n2 7\n5 6\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n3 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 3\n6 0\n2 7\n5 6\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n3 5\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n3 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 0\n3 3\n6 0\n2 7\n5 6\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 6\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 2\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n2 7\n5 4\n4 3\n4 1\n1 3\n3 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 2\n1 0\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 5\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 2\n6 0\n2 7\n5 6\n4 3\n4 1\n1 3\n2 3\n2 11\n5 3\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n8 2\n1 3\n2 3\n3 6\n5 6\n", "2\n6 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 3\n6 0\n2 7\n5 6\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n3 5\n6 8\n1 5\n5 4\n4 3\n4 2\n1 5\n2 3\n3 6\n5 6\n", "2\n4 6\n1 2\n1 4\n1 2\n2 3\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n1 4\n2 2\n2 4\n3 1\n6 8\n1 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n0 5\n5 4\n4 3\n4 2\n1 0\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n2 4\n4 3\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n3 6\n5 6\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n3 0\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n4 4\n3 2\n6 0\n2 7\n5 6\n4 3\n4 1\n1 3\n2 3\n2 11\n5 3\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n8 0\n1 3\n2 3\n3 6\n5 6\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 8\n3 5\n6 8\n1 5\n5 4\n4 3\n4 2\n1 5\n2 3\n3 6\n5 6\n", "2\n4 5\n1 2\n1 3\n1 4\n2 3\n2 0\n3 3\n6 0\n2 7\n5 6\n4 4\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 4\n1 2\n1 3\n1 4\n2 3\n2 4\n1 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 6\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 4\n1 2\n2 4\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n1 4\n2 2\n2 4\n3 1\n6 1\n1 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n2 4\n4 3\n3 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n3 6\n5 6\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n4 0\n6 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n4 4\n3 2\n6 0\n2 7\n5 6\n4 5\n4 1\n1 3\n2 3\n2 11\n5 3\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n3 4\n6 8\n1 5\n5 4\n4 3\n8 0\n1 3\n1 3\n3 6\n5 6\n", "2\n4 6\n1 2\n1 3\n2 4\n2 8\n2 8\n3 5\n6 8\n1 5\n5 4\n4 3\n4 2\n1 5\n2 3\n3 6\n5 6\n", "2\n4 5\n1 2\n1 3\n1 4\n2 3\n2 1\n3 3\n6 0\n2 7\n5 6\n4 4\n4 1\n1 3\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 4\n1 2\n2 4\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 4\n2 3\n2 6\n5 3\n", "2\n4 6\n1 2\n1 3\n1 4\n2 2\n2 4\n3 1\n6 1\n1 5\n5 4\n4 3\n4 1\n1 1\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n2 4\n4 3\n3 4\n3 4\n6 8\n1 5\n5 4\n4 3\n4 2\n1 2\n2 3\n3 6\n5 6\n", "2\n4 6\n1 2\n1 3\n2 4\n2 4\n2 4\n4 0\n3 8\n1 5\n5 4\n4 3\n4 2\n1 3\n2 3\n2 6\n5 6\n", "2\n4 6\n1 2\n1 3\n1 4\n2 3\n4 4\n3 2\n6 1\n2 7\n5 6\n4 5\n4 1\n1 3\n2 3\n2 11\n5 3\n"], "output": ["2 1\n2 3\n2 4\n2 5\n", "3 1\n3 2\n3 5\n3 4\n", "1 2\n1 3\n1 4\n4 6\n", "1 6\n1 2\n1 3\n2 4\n", "3 2\n3 5\n3 4\n5 1\n1 6\n", "2 1\n2 3\n2 4\n1 6\n", "1 4\n", "1 2\n1 3\n1 4\n3 5\n", "1 6\n1 2\n1 4\n", "1 6\n1 2\n2 3\n", "1 5\n1 2\n1 3\n2 4\n", "1 4\n1 2\n1 3\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n1 3\n2 4\n", "2 1\n2 3\n2 4\n1 6\n", "1 6\n1 2\n1 3\n2 4\n", "2 1\n2 3\n2 4\n1 6\n", "1 6\n1 2\n1 3\n2 4\n", "2 1\n2 3\n2 4\n1 6\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n1 3\n2 4\n", "2 1\n2 3\n2 4\n1 6\n", "1 6\n1 2\n1 3\n2 4\n", "2 1\n2 3\n2 4\n1 6\n", "1 6\n1 2\n1 3\n2 4\n", "2 1\n2 3\n2 4\n1 6\n", "1 6\n1 2\n1 4\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n2 3\n", "2 1\n2 3\n2 4\n1 6\n", "1 6\n1 2\n1 3\n2 4\n", "2 1\n2 3\n2 4\n1 6\n", "2 1\n2 3\n2 4\n1 6\n", "1 5\n1 2\n1 3\n2 4\n", "1 4\n1 2\n1 3\n", "1 6\n1 2\n1 4\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n2 3\n", "2 1\n2 3\n2 4\n1 6\n", "1 6\n1 2\n1 3\n2 4\n", "2 1\n2 3\n2 4\n1 6\n", "2 1\n2 3\n2 4\n1 6\n", "1 5\n1 2\n1 3\n2 4\n", "1 6\n1 2\n1 4\n", "1 6\n1 2\n1 3\n2 4\n", "1 6\n1 2\n2 3\n", "2 1\n2 3\n2 4\n1 6\n", "1 6\n1 2\n1 3\n2 4\n"]}, "short_description": "1. One-sentence summary:  \nConstruct a spanning tree of an undirected graph by performing a breadth-first search starting from the highest-degree vertex.\n\n2. Core algorithmic approach:  \nBreadth-First Search (BFS) to traverse the graph and collect tree edges.\n\n3. Reusable components:  \n- Adjacency list representation for an undirected graph.  \n- Degree-based vertex selection (finding the vertex with maximum degree).  \n- BFS traversal that marks visited nodes and records parent\u2010child edges to form a spanning tree."}
{"name": "1133_F1. Spanning Tree with Maximum Degree", "description": "You are given an undirected unweighted connected graph consisting of n vertices and m edges. It is guaranteed that there are no self-loops or multiple edges in the given graph.\n\nYour task is to find any spanning tree of this graph such that the maximum degree over all vertices is maximum possible. Recall that the degree of a vertex is the number of edges incident to it.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 2 \u22c5 10^5, n - 1 \u2264 m \u2264 min(2 \u22c5 10^5, (n(n-1))/(2))) \u2014 the number of vertices and edges, respectively.\n\nThe following m lines denote edges: edge i is represented by a pair of integers v_i, u_i (1 \u2264 v_i, u_i \u2264 n, u_i \u2260 v_i), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair (v_i, u_i) there are no other pairs (v_i, u_i) or (u_i, v_i) in the list of edges, and for each pair (v_i, u_i) the condition v_i \u2260 u_i is satisfied.\n\nOutput\n\nPrint n-1 lines describing the edges of a spanning tree such that the maximum degree over all vertices is maximum possible. Make sure that the edges of the printed spanning tree form some subset of the input edges (order doesn't matter and edge (v, u) is considered the same as the edge (u, v)).\n\nIf there are multiple possible answers, print any of them.\n\nExamples\n\nInput\n\n\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\n\nOutput\n\n\n3 5\n2 1\n3 2\n3 4\n\n\nInput\n\n\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\n\nOutput\n\n\n4 1\n1 2\n1 3\n\n\nInput\n\n\n8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\n\nOutput\n\n\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\nNote\n\nPicture corresponding to the first example: <image>\n\nIn this example the number of edges of spanning tree incident to the vertex 3 is 3. It is the maximum degree over all vertices of the spanning tree. It is easy to see that we cannot obtain a better answer.\n\nPicture corresponding to the second example: <image>\n\nIn this example the number of edges of spanning tree incident to the vertex 1 is 3. It is the maximum degree over all vertices of the spanning tree. It is easy to see that we cannot obtain a better answer.\n\nPicture corresponding to the third example: <image>\n\nIn this example the number of edges of spanning tree incident to the vertex 2 is 4. It is the maximum degree over all vertices of the spanning tree. It is easy to see that we cannot obtain a better answer. But because this example is symmetric, we can choose almost the same spanning tree but with vertex 5 instead of 2.", "solution": "def dfs(s):\n\tstk,cnt=[],[]\n\tstk.append(s)\n\tcnt.append(0)\n\twhile (len(stk)>0):\n\t\ts=stk[-1]\n\t\tll=cnt[-1]\n\t\tvisit[s]=1\n\t\tflag=1\n\t\tfor j in range(ll,len(adj[s]),1):\n\t\t\tif visit[adj[s][j]]==0:\n\t\t\t\tcnt[-1]=j+1\n\t\t\t\tstk.append(adj[s][j])\n\t\t\t\tcnt.append(0)\n\t\t\t\tflag=0\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tstk.pop()\n\t\t\tcnt.pop()\n\nn,m,d=map(int,input().split())\nadj=[0]*(n+1)\nfor i in range(n+1):\n\tadj[i]=[]\nfor i in range(m):\n\tx,y=map(int,input().split())\n\tadj[x].append(y)\n\tadj[y].append(x)\nvisit=[0]*(n+1)\nvisit[1]=1\nans=[0]*m\nct=0\nmark=[0]*(n+1)\nmark[1]=1\nfor l in range(len(adj[1])):\n\ti=adj[1][l]\n\tif visit[i]==0:\n\t\tdfs(i)\n\t\tans[ct]=[1,i]\n\t\tmark[i]=1\n\t\tct+=1\nif ct>d:\n\tprint(\"NO\")\n\texit()\nif ct<d:\n\tfor i in range(len(adj[1])):\n\t\tif mark[adj[1][i]]==0:\n\t\t\tans[ct]=[1,adj[1][i]]\n\t\t\tmark[adj[1][i]]=1\n\t\t\tct+=1\n\t\tif ct==d:\n\t\t\tbreak\n\tif ct<d:\n\t\tprint(\"NO\")\n\t\texit()\ni=0\nwhile (i<ct):\n\tk=ans[i][1]\n\tif visit[k]:\n\t\t# print(k,adj[k])\n\t\tfor j in range(len(adj[k])):\n\t\t\tif mark[adj[k][j]]==0:\n\t\t\t\tmark[adj[k][j]]=1\n\t\t\t\tans[ct]=[k,adj[k][j]]\n\t\t\t\tct+=1\n\t\tvisit[k]=0\n\ti+=1\nprint(\"YES\")\nfor i in range(ct):\n\tprint(*ans[i])", "difficulty": 12, "public_tests": {"input": ["4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n", "5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n"], "output": ["1 2\n1 3\n1 4\n", "2 1\n2 3\n2 5\n2 7\n1 6\n3 4\n5 8\n", "3 2\n3 5\n3 4\n2 1\n"]}, "private_tests": {"input": ["5 6\n1 5\n2 5\n3 5\n4 5\n2 3\n1 2\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "5 6\n2 1\n2 3\n2 4\n2 5\n3 4\n3 5\n", "8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n", "5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n", "5 6\n1 5\n2 5\n3 5\n4 5\n2 3\n1 2\n", "2 1\n1 2\n", "5 6\n2 1\n2 3\n2 4\n2 5\n3 4\n3 5\n", "5 6\n2 1\n2 3\n2 4\n2 5\n3 4\n3 5\n", "5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n", "5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n", "5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n", "8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "5 6\n1 5\n2 5\n3 5\n4 5\n2 3\n1 2\n", "8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n", "8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n", "2 1\n1 2\n", "6 8 3\n3 1\n2 3\n4 1\n1 2\n5 4\n6 5\n6 1\n6 4\n", "10 18 4\n9 4\n3 8\n6 1\n8 6\n1 5\n2 4\n1 2\n10 9\n4 3\n8 7\n7 2\n4 1\n9 7\n5 10\n4 6\n3 10\n5 3\n3 1\n", "11 15 3\n3 8\n10 11\n11 3\n9 10\n6 5\n5 9\n11 6\n8 4\n9 3\n8 11\n6 10\n1 2\n1 5\n1 10\n7 11\n", "4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n", "12 15 1\n5 2\n12 3\n12 8\n11 12\n1 6\n12 2\n1 12\n9 3\n9 1\n4 10\n9 7\n9 10\n5 1\n4 1\n7 5\n", "10 16 1\n4 3\n4 10\n9 6\n2 5\n10 6\n5 4\n6 7\n3 1\n2 4\n8 6\n1 5\n8 1\n2 8\n1 4\n4 9\n9 5\n", "6 10 3\n1 6\n3 2\n3 4\n1 3\n2 1\n1 4\n5 1\n2 6\n2 5\n4 2\n", "6 5 1\n6 5\n4 1\n2 4\n5 4\n2 3\n", "4 6 2\n3 2\n2 1\n1 4\n3 1\n3 4\n4 2\n", "12 18 3\n4 6\n2 12\n1 9\n8 3\n9 7\n3 6\n2 6\n11 6\n1 6\n4 9\n9 10\n6 5\n6 12\n8 9\n8 2\n10 11\n10 6\n9 2\n", "11 17 2\n9 10\n2 3\n1 7\n10 7\n6 9\n8 9\n8 11\n1 5\n11 6\n5 4\n6 10\n1 9\n10 4\n4 3\n7 9\n2 7\n9 11\n", "11 16 3\n3 2\n6 4\n8 10\n5 3\n7 11\n2 9\n9 10\n3 4\n11 8\n6 10\n1 2\n6 1\n1 11\n7 9\n4 1\n11 10\n", "13 16 4\n1 8\n12 1\n7 1\n9 1\n1 4\n11 1\n9 7\n10 13\n5 7\n2 9\n12 4\n13 5\n9 13\n1 3\n6 9\n8 13\n", "12 16 1\n2 1\n8 4\n5 7\n3 10\n9 6\n11 9\n8 2\n1 5\n6 10\n12 6\n9 3\n4 3\n10 1\n8 1\n1 12\n1 3\n", "10 15 2\n6 2\n5 1\n4 3\n4 9\n2 4\n4 10\n2 5\n1 8\n7 8\n9 1\n1 4\n1 2\n6 4\n2 8\n9 3\n", "3 3 1\n2 3\n1 2\n3 1\n", "12 17 1\n4 5\n12 6\n11 8\n10 12\n2 1\n5 8\n2 7\n11 5\n5 10\n5 9\n12 7\n2 3\n6 8\n6 1\n10 4\n9 6\n11 1\n", "13 18 2\n4 5\n11 8\n10 8\n5 8\n2 12\n9 2\n3 9\n13 7\n6 10\n7 4\n11 13\n3 7\n10 1\n6 12\n1 6\n5 12\n13 4\n5 9\n", "10 15 1\n6 2\n10 2\n6 1\n7 6\n9 10\n7 4\n9 3\n7 9\n4 1\n3 4\n8 1\n5 10\n4 5\n1 5\n9 1\n", "6 6 1\n5 1\n3 4\n2 3\n1 6\n5 4\n3 5\n", "4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n", "6 7 1\n5 1\n4 3\n1 3\n2 3\n1 6\n3 6\n2 1\n", "11 17 2\n3 8\n8 1\n4 6\n1 5\n1 4\n10 2\n6 11\n11 3\n1 6\n11 7\n7 4\n2 5\n9 2\n10 5\n2 6\n8 2\n11 5\n", "7 8 1\n4 1\n5 7\n7 1\n6 3\n5 6\n1 2\n7 2\n4 6\n", "13 15 1\n7 12\n5 9\n4 5\n6 11\n6 12\n2 10\n7 4\n13 7\n3 1\n4 10\n2 12\n11 12\n3 10\n3 9\n8 7\n", "13 18 4\n12 10\n4 12\n13 12\n5 4\n13 8\n5 10\n1 8\n7 8\n10 3\n5 2\n9 8\n6 11\n12 1\n9 2\n11 1\n7 1\n5 1\n10 1\n", "13 16 2\n2 9\n5 11\n10 7\n5 8\n2 13\n4 10\n6 1\n9 6\n4 7\n3 8\n7 6\n11 2\n12 9\n2 1\n7 8\n1 3\n", "12 15 1\n6 12\n10 9\n9 4\n5 1\n3 11\n2 4\n3 7\n2 3\n9 8\n9 11\n12 1\n1 3\n1 2\n4 8\n11 12\n", "4 4 3\n1 2\n1 4\n2 3\n3 4\n", "10 16 1\n10 1\n7 8\n7 3\n5 9\n2 6\n4 10\n3 8\n2 10\n9 10\n4 3\n2 8\n9 2\n4 1\n5 8\n9 7\n10 8\n", "10 17 3\n1 8\n4 9\n7 5\n7 6\n3 1\n1 2\n1 6\n1 10\n2 8\n9 1\n7 4\n3 10\n1 7\n6 2\n2 7\n4 8\n1 5\n", "13 15 6\n1 3\n3 6\n13 3\n11 9\n7 1\n11 4\n1 9\n4 9\n13 7\n10 7\n4 1\n5 3\n3 2\n9 8\n1 12\n", "4 4 1\n4 1\n4 3\n4 2\n1 3\n", "13 17 1\n7 10\n9 3\n10 9\n10 4\n10 1\n3 4\n13 7\n7 2\n13 4\n2 12\n2 6\n5 8\n8 1\n1 4\n3 1\n7 3\n5 11\n", "12 15 3\n9 8\n1 4\n10 11\n5 1\n12 9\n2 12\n7 3\n1 12\n2 4\n6 5\n8 4\n6 4\n12 3\n9 10\n12 8\n", "11 15 1\n8 4\n3 9\n11 10\n7 3\n9 1\n11 5\n9 7\n4 9\n3 2\n11 8\n7 5\n3 6\n11 7\n6 2\n3 4\n", "11 16 3\n10 2\n1 2\n11 7\n4 7\n8 4\n5 6\n4 10\n6 3\n11 3\n1 10\n7 8\n7 5\n6 9\n3 2\n2 9\n10 7\n", "7 15 1\n7 5\n4 6\n1 4\n6 5\n4 2\n5 2\n3 7\n6 3\n3 5\n1 2\n6 2\n7 4\n5 4\n2 7\n1 3\n", "7 6 1\n2 1\n1 3\n7 4\n3 7\n5 2\n4 6\n", "11 18 2\n8 5\n1 4\n4 3\n2 7\n3 6\n11 2\n2 4\n5 1\n2 10\n8 9\n5 6\n1 9\n10 8\n9 10\n3 10\n6 8\n1 11\n6 1\n", "13 18 2\n5 1\n8 11\n2 1\n12 9\n3 2\n5 6\n5 2\n2 11\n12 6\n4 13\n3 4\n8 7\n6 2\n12 13\n2 10\n8 5\n7 5\n1 7\n", "10 17 2\n7 4\n3 5\n6 5\n2 7\n2 3\n8 9\n5 7\n5 2\n7 1\n2 6\n4 2\n2 8\n8 6\n2 9\n10 2\n9 7\n8 4\n", "4 3 2\n1 2\n1 3\n1 4\n", "5 6 3\n1 5\n2 4\n3 5\n4 3\n2 1\n1 4\n", "13 17 1\n13 2\n2 1\n4 12\n11 2\n5 3\n3 12\n11 9\n9 8\n10 9\n5 11\n9 2\n10 8\n11 7\n10 6\n13 7\n8 6\n6 2\n", "11 15 3\n10 7\n1 2\n9 6\n1 5\n1 11\n9 3\n9 8\n6 5\n5 3\n4 6\n1 9\n5 8\n2 4\n7 1\n6 11\n", "11 18 1\n1 11\n11 8\n5 2\n8 4\n10 3\n4 2\n7 4\n6 8\n11 7\n11 4\n5 11\n2 6\n4 6\n1 5\n9 1\n11 6\n11 3\n2 1\n", "6 9 1\n5 6\n3 6\n4 2\n4 1\n4 3\n5 1\n2 1\n1 3\n6 2\n", "4 5 2\n4 1\n2 4\n1 2\n1 3\n4 3\n", "2 1 1\n1 2\n", "7 17 1\n7 5\n3 4\n3 2\n7 1\n7 3\n6 1\n7 2\n6 3\n6 5\n3 5\n5 4\n5 2\n3 1\n2 1\n7 4\n6 7\n2 4\n", "11 16 2\n9 3\n8 1\n7 10\n6 10\n4 1\n5 10\n9 11\n1 7\n3 10\n11 1\n10 11\n11 6\n2 11\n2 6\n6 5\n2 3\n", "13 16 2\n11 10\n8 4\n13 1\n7 2\n7 11\n5 4\n2 13\n8 3\n9 1\n12 11\n6 4\n10 9\n10 2\n4 13\n11 13\n12 3\n", "11 18 3\n1 9\n11 9\n6 1\n7 9\n5 7\n3 8\n4 10\n5 9\n9 8\n9 6\n2 10\n8 5\n8 4\n2 1\n10 3\n10 9\n8 10\n3 11\n", "10 18 3\n4 8\n9 3\n8 3\n9 1\n4 1\n1 5\n6 3\n1 10\n2 6\n6 4\n8 5\n8 7\n4 2\n6 8\n3 2\n5 10\n8 1\n7 3\n", "12 18 1\n11 7\n11 1\n9 8\n5 2\n3 2\n5 6\n11 9\n10 7\n3 7\n1 7\n6 4\n10 3\n2 10\n9 4\n6 8\n6 12\n9 7\n12 4\n", "12 16 1\n2 9\n1 9\n7 12\n10 9\n11 2\n3 12\n8 1\n2 12\n3 5\n11 1\n10 8\n1 3\n9 11\n8 4\n6 4\n6 3\n", "10 16 1\n2 6\n6 7\n2 7\n10 4\n6 4\n6 3\n4 2\n3 8\n7 5\n10 1\n9 7\n4 5\n2 3\n6 1\n1 2\n5 3\n", "12 17 1\n1 9\n5 3\n3 7\n4 7\n8 2\n11 3\n2 9\n11 8\n12 11\n7 6\n6 2\n10 7\n7 1\n11 5\n11 2\n3 6\n5 8\n", "13 15 1\n7 12\n5 8\n12 5\n3 8\n7 4\n10 9\n2 9\n11 8\n3 5\n8 2\n5 13\n5 1\n1 6\n1 11\n1 4\n", "10 17 1\n8 2\n8 10\n5 8\n6 4\n4 10\n4 9\n2 5\n7 1\n2 9\n7 2\n2 1\n1 3\n3 2\n4 3\n5 7\n7 3\n7 6\n", "12 17 1\n2 5\n8 1\n6 5\n4 1\n11 10\n2 11\n1 5\n1 7\n3 5\n8 10\n1 6\n9 6\n6 11\n11 1\n6 2\n4 8\n7 12\n", "3 2 1\n1 2\n3 1\n", "5 4 2\n3 1\n1 5\n4 5\n4 2\n", "10 15 3\n8 10\n9 8\n1 6\n7 6\n10 2\n4 3\n2 3\n8 5\n2 5\n4 8\n2 8\n6 10\n10 4\n5 1\n9 5\n", "7 13 6\n6 5\n6 1\n1 3\n3 5\n3 7\n6 7\n4 1\n5 7\n1 2\n1 5\n7 2\n1 7\n4 7\n", "7 10 2\n7 1\n1 3\n5 2\n6 1\n6 5\n3 7\n5 7\n1 2\n5 1\n1 4\n", "12 16 2\n11 7\n8 5\n7 6\n6 11\n9 6\n11 3\n1 12\n4 7\n1 7\n10 6\n4 12\n11 9\n7 2\n12 3\n10 11\n8 2\n", "10 18 5\n10 9\n1 9\n2 4\n6 8\n10 5\n3 4\n1 3\n4 7\n5 7\n8 4\n9 8\n8 3\n1 2\n4 6\n2 10\n1 10\n4 1\n1 6\n", "13 17 7\n13 1\n6 1\n1 8\n4 6\n6 5\n1 3\n13 4\n1 11\n12 3\n8 7\n2 7\n12 1\n10 1\n9 8\n2 3\n1 5\n1 2\n", "11 17 1\n3 4\n8 2\n1 3\n6 1\n3 9\n2 5\n5 9\n7 2\n5 1\n4 1\n4 5\n8 1\n10 9\n11 1\n9 1\n3 7\n7 10\n", "12 18 3\n2 4\n2 10\n9 1\n10 4\n7 8\n5 10\n10 1\n11 3\n2 1\n11 12\n6 2\n1 3\n5 7\n8 3\n6 1\n12 1\n2 8\n6 7\n", "5 10 3\n5 3\n1 2\n1 5\n1 3\n4 2\n2 3\n2 5\n3 4\n4 5\n4 1\n"], "output": ["5 1\n5 2\n5 3\n5 4\n", "1 2\n1 3\n1 4\n", "1 2\n1 3\n1 4\n", "1 2\n1 3\n1 4\n", "2 1\n2 3\n2 4\n2 5\n", "2 1\n2 3\n2 5\n2 7\n1 6\n3 4\n5 8\n", "3 2\n3 5\n3 4\n2 1\n", "5 1\n5 2\n5 3\n5 4\n", "1 2\n", "2 1\n2 3\n2 4\n2 5\n", "2 1\n2 3\n2 4\n2 5\n", "3 2\n3 5\n3 4\n2 1\n", "3 2\n3 5\n3 4\n2 1\n", "3 2\n3 5\n3 4\n2 1\n", "2 1\n2 3\n2 5\n2 7\n1 6\n3 4\n5 8\n", "1 2\n1 3\n1 4\n", "5 1\n5 2\n5 3\n5 4\n", "2 1\n2 3\n2 5\n2 7\n1 6\n3 4\n5 8\n", "2 1\n2 3\n2 5\n2 7\n1 6\n3 4\n5 8\n", "1 2\n", "1 2\n1 6\n2 5\n6 4\n4 3\n", "4 9\n4 3\n4 1\n4 2\n4 10\n3 8\n3 6\n2 5\n5 7\n", "3 9\n3 8\n9 11\n9 4\n8 10\n8 6\n10 1\n10 7\n1 2\n1 5\n", "YES\n1 2\n1 3\n1 4\n", "NO\n", "4 1\n4 3\n4 6\n4 8\n1 2\n3 7\n6 5\n5 10\n10 9\n", "1 3\n1 4\n1 2\n3 6\n4 5\n", "4 5\n4 2\n2 1\n1 6\n", "YES\n1 2\n1 4\n2 3\n", "NO\n", "9 2\n9 8\n9 10\n9 7\n10 1\n7 6\n7 3\n1 11\n6 5\n6 4\n", "1 10\n1 11\n10 5\n10 3\n11 2\n11 4\n11 7\n2 6\n4 8\n4 9\n", "1 4\n1 7\n1 9\n1 13\n4 11\n7 10\n7 2\n9 12\n9 5\n9 8\n", "NO\n", "2 6\n2 5\n2 9\n2 10\n2 4\n5 1\n9 8\n4 3\n8 7\n", "YES\n1 2\n2 3\n", "5 12\n5 1\n5 10\n12 2\n12 9\n1 4\n10 8\n2 7\n8 6\n7 11\n6 3\n", "5 11\n5 8\n5 6\n5 4\n8 10\n8 2\n6 7\n6 1\n2 3\n1 12\n3 13\n12 9\n", "NO\n", "NO\n", "YES\n1 2\n2 3\n3 4\n", "NO\n", "2 3\n2 6\n2 4\n2 10\n2 5\n2 11\n3 1\n6 8\n5 9\n", "1 4\n1 5\n1 6\n4 2\n5 3\n2 7\n", "12 5\n12 2\n12 11\n12 3\n5 6\n2 10\n3 7\n7 1\n1 4\n4 9\n4 13\n9 8\n", "1 10\n1 9\n1 7\n1 5\n10 4\n10 8\n9 2\n5 12\n5 3\n4 13\n8 6\n2 11\n", "2 8\n2 12\n2 9\n8 7\n8 1\n9 5\n7 3\n", "NO\n", "NO\n", "10 1\n10 3\n10 9\n10 4\n10 7\n1 5\n3 2\n9 8\n4 6\n", "1 3\n1 2\n1 6\n1 7\n1 10\n1 8\n3 4\n7 9\n7 5\n", "NO\n", "1 4\n1 2\n4 3\n", "NO\n", "12 1\n12 7\n12 2\n12 4\n12 10\n1 8\n1 3\n2 9\n4 6\n8 5\n5 11\n", "3 4\n3 9\n3 5\n3 2\n4 7\n9 11\n7 10\n7 8\n7 6\n11 1\n", "NO\n", "2 5\n2 3\n2 6\n2 7\n2 4\n5 1\n", "NO\n", "2 8\n2 3\n2 1\n8 10\n8 9\n3 7\n1 5\n1 6\n5 4\n6 11\n", "2 5\n2 11\n2 12\n2 13\n5 6\n5 7\n5 1\n13 3\n6 4\n1 8\n3 9\n8 10\n", "NO\n", "NO\n", "1 3\n3 4\n3 2\n4 5\n", "2 5\n2 10\n5 9\n10 8\n10 7\n9 11\n11 12\n", "1 7\n1 6\n1 5\n7 4\n6 8\n5 9\n4 3\n8 2\n9 11\n3 10\n", "NO\n", "1 5\n1 4\n1 2\n5 3\n4 6\n", "1 2\n1 4\n4 3\n", "YES\n1 2\n", "3 5\n3 4\n3 6\n3 2\n2 7\n2 1\n", "NO\n", "2 11\n2 7\n2 4\n11 5\n11 6\n11 13\n7 1\n4 10\n13 8\n13 12\n10 9\n9 3\n", "9 11\n9 6\n9 5\n9 8\n6 2\n5 10\n8 4\n10 1\n10 3\n1 7\n", "8 9\n8 3\n8 4\n8 5\n8 10\n3 1\n4 7\n5 6\n5 2\n", "7 11\n7 3\n7 1\n7 6\n7 12\n3 2\n1 9\n6 4\n6 8\n2 5\n9 10\n", "1 2\n1 9\n1 10\n1 8\n2 3\n9 7\n9 11\n10 12\n11 5\n", "2 1\n2 7\n2 3\n2 5\n1 9\n7 10\n7 8\n7 4\n3 6\n", "7 4\n7 8\n7 11\n8 12\n11 2\n11 9\n11 1\n11 5\n2 3\n2 10\n5 6\n", "NO\n", "2 8\n2 9\n2 1\n2 4\n8 6\n9 7\n4 10\n7 5\n7 3\n", "NO\n", "NO\n", "YES\n1 3\n1 5\n5 4\n4 2\n", "NO\n", "1 5\n1 7\n1 2\n5 6\n5 3\n7 4\n", "1 6\n1 7\n6 2\n7 5\n5 3\n", "7 8\n7 5\n7 1\n7 10\n7 9\n8 11\n1 3\n11 2\n11 6\n11 12\n6 4\n", "1 9\n1 4\n1 3\n1 10\n9 2\n4 6\n3 5\n10 8\n5 7\n", "1 6\n1 5\n1 4\n1 10\n1 9\n1 3\n4 8\n3 13\n8 2\n13 7\n7 12\n12 11\n", "NO\n", "1 10\n1 11\n1 2\n1 12\n10 9\n2 3\n2 4\n12 6\n3 5\n4 7\n6 8\n", "3 5\n3 1\n3 4\n3 2\n"]}, "generated_tests": {"input": ["6 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "4 6\n1 2\n1 3\n1 4\n2 3\n1 4\n3 4\n", "4 6\n1 2\n1 3\n1 4\n4 3\n2 4\n3 4\n", "5 6\n2 1\n2 3\n2 4\n2 5\n2 4\n3 5\n", "8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 8\n4 5\n2 7\n5 8\n", "5 4\n1 2\n2 3\n3 5\n4 3\n1 5\n", "5 6\n2 1\n2 3\n2 4\n4 5\n3 4\n3 5\n", "5 5\n1 2\n2 3\n3 5\n4 3\n1 2\n", "5 5\n1 2\n2 4\n3 5\n4 3\n1 5\n", "8 9\n1 2\n2 3\n2 8\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n", "4 6\n2 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "5 3\n1 5\n2 5\n3 5\n4 5\n2 3\n1 2\n", "8 9\n1 2\n1 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n", "8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 4\n5 8\n", "6 8 3\n3 1\n2 3\n4 1\n1 2\n5 4\n6 5\n2 1\n6 4\n", "11 15 3\n3 8\n10 11\n11 3\n9 10\n6 5\n5 9\n11 6\n8 4\n9 3\n8 11\n6 10\n1 2\n1 5\n1 4\n7 11\n", "4 5 3\n1 2\n2 3\n1 4\n2 3\n3 4\n", "12 15 1\n5 2\n12 3\n12 8\n11 12\n1 6\n12 2\n1 12\n9 3\n9 1\n4 10\n9 7\n9 10\n8 1\n4 1\n7 5\n", "10 16 1\n4 3\n4 10\n9 6\n2 5\n10 6\n5 4\n6 7\n3 1\n2 4\n8 6\n1 6\n8 1\n2 8\n1 4\n4 9\n9 5\n", "6 5 1\n6 5\n4 1\n2 4\n5 4\n2 0\n", "4 6 2\n3 4\n2 1\n1 4\n3 1\n3 4\n4 2\n", "12 18 3\n4 6\n2 12\n1 9\n8 3\n9 7\n6 6\n2 6\n11 6\n1 6\n4 9\n9 10\n6 5\n6 12\n8 9\n8 2\n10 11\n10 6\n9 2\n", "11 17 3\n9 10\n2 3\n1 7\n10 7\n6 9\n8 9\n8 11\n1 5\n11 6\n5 4\n6 10\n1 9\n10 4\n4 3\n7 9\n2 7\n9 11\n", "11 16 3\n3 2\n6 4\n8 5\n5 3\n7 11\n2 9\n9 10\n3 4\n11 8\n6 10\n1 2\n6 1\n1 11\n7 9\n4 1\n11 10\n", "13 16 4\n1 8\n9 1\n7 1\n9 1\n1 4\n11 1\n9 7\n10 13\n5 7\n2 9\n12 4\n13 5\n9 13\n1 3\n6 9\n8 13\n", "12 16 1\n2 1\n8 4\n5 7\n3 10\n9 6\n11 9\n8 2\n1 5\n6 10\n12 6\n9 3\n4 3\n10 1\n8 1\n1 12\n2 3\n", "10 15 2\n6 2\n5 1\n4 3\n4 9\n2 6\n4 10\n2 5\n1 8\n7 8\n9 1\n1 4\n1 2\n6 4\n2 8\n9 3\n", "3 3 1\n2 3\n1 2\n3 0\n", "12 17 1\n4 5\n5 6\n11 8\n10 12\n2 1\n5 8\n2 7\n11 5\n5 10\n5 9\n12 7\n2 3\n6 8\n6 1\n10 4\n9 6\n11 1\n", "13 18 2\n4 5\n11 8\n10 8\n5 8\n2 12\n9 2\n3 9\n13 7\n6 10\n7 4\n11 13\n3 7\n10 1\n6 12\n1 6\n3 12\n13 4\n5 9\n", "10 15 1\n6 2\n10 2\n6 1\n7 6\n9 10\n7 4\n9 3\n8 9\n4 1\n3 4\n8 1\n5 10\n4 5\n1 5\n9 1\n", "4 6 1\n1 2\n1 3\n1 4\n2 3\n3 4\n", "13 15 1\n7 12\n5 9\n4 5\n6 11\n6 12\n2 10\n7 7\n13 7\n3 1\n4 10\n2 12\n11 12\n3 10\n3 9\n8 7\n", "13 18 4\n12 10\n4 12\n13 12\n5 4\n13 8\n5 10\n1 8\n3 8\n10 3\n5 2\n9 8\n6 11\n12 1\n9 2\n11 1\n7 1\n5 1\n10 1\n", "13 16 2\n2 9\n5 20\n10 7\n5 8\n2 13\n4 10\n6 1\n9 6\n4 7\n3 8\n7 6\n11 2\n12 9\n2 1\n7 8\n1 3\n", "12 15 1\n6 12\n10 9\n9 4\n5 1\n3 11\n2 4\n3 7\n2 3\n9 8\n9 11\n12 1\n1 3\n1 2\n4 6\n11 12\n", "4 4 3\n1 2\n1 4\n2 3\n3 0\n", "10 16 1\n10 2\n7 8\n7 3\n5 9\n2 6\n4 10\n3 8\n2 10\n9 10\n4 3\n2 8\n9 2\n4 1\n5 8\n9 7\n10 8\n", "10 17 3\n1 8\n4 9\n3 5\n7 6\n3 1\n1 2\n1 6\n1 10\n2 8\n9 1\n7 4\n3 10\n1 7\n6 2\n2 7\n4 8\n1 5\n", "4 4 1\n4 1\n4 3\n3 2\n1 3\n", "13 17 1\n7 10\n9 3\n10 9\n10 4\n10 1\n3 4\n13 7\n7 2\n13 4\n2 12\n2 6\n2 8\n8 1\n1 4\n3 1\n7 3\n5 11\n", "12 15 3\n9 8\n1 4\n10 11\n5 1\n12 9\n2 12\n7 3\n1 12\n2 4\n6 5\n8 4\n6 4\n12 3\n9 10\n12 2\n", "11 15 1\n8 4\n3 9\n11 10\n7 3\n9 1\n2 5\n9 7\n4 9\n3 2\n11 8\n7 5\n3 6\n11 7\n6 2\n3 4\n", "11 16 3\n10 2\n1 2\n11 7\n4 7\n8 4\n5 6\n7 10\n6 3\n11 3\n1 10\n7 8\n7 5\n6 9\n3 2\n2 9\n10 7\n", "7 6 1\n2 1\n2 3\n7 4\n3 7\n5 2\n4 6\n", "11 18 2\n8 5\n1 4\n4 3\n2 7\n3 6\n11 1\n2 4\n5 1\n2 10\n8 9\n5 6\n1 9\n10 8\n9 10\n3 10\n6 8\n1 11\n6 1\n", "13 18 2\n5 1\n8 11\n2 1\n12 9\n3 2\n5 6\n5 2\n2 9\n12 6\n4 13\n3 4\n8 7\n6 2\n12 13\n2 10\n8 5\n7 5\n1 7\n", "10 8 2\n7 4\n3 5\n6 5\n2 7\n2 3\n8 9\n5 7\n5 2\n7 1\n2 6\n4 2\n2 8\n8 6\n2 9\n10 2\n9 7\n8 4\n", "5 6 3\n1 5\n2 4\n3 5\n4 3\n2 1\n1 5\n", "11 18 1\n1 11\n11 8\n5 2\n8 4\n10 3\n4 2\n7 4\n6 8\n11 7\n11 8\n5 11\n2 6\n4 6\n1 5\n9 1\n11 6\n11 3\n2 1\n", "4 5 2\n4 1\n2 4\n1 2\n1 3\n4 4\n", "7 17 1\n7 5\n3 4\n3 4\n7 1\n7 3\n6 1\n7 2\n6 3\n6 5\n3 5\n5 4\n5 2\n3 1\n2 1\n7 4\n6 7\n2 4\n", "13 16 2\n11 10\n8 4\n13 1\n7 2\n7 11\n5 2\n2 13\n8 3\n9 1\n12 11\n6 4\n10 9\n10 2\n4 13\n11 13\n12 3\n", "11 18 3\n2 9\n11 9\n6 1\n7 9\n5 7\n3 8\n4 10\n5 9\n9 8\n9 6\n2 10\n8 5\n8 4\n2 1\n10 3\n10 9\n8 10\n3 11\n", "10 18 3\n4 8\n9 3\n8 3\n9 1\n4 1\n1 5\n6 3\n1 10\n2 6\n6 4\n8 5\n8 7\n4 2\n6 8\n3 4\n5 10\n8 1\n7 3\n", "12 18 1\n11 7\n11 1\n9 8\n5 2\n3 2\n5 6\n11 9\n10 7\n3 7\n1 7\n6 4\n10 3\n2 10\n9 4\n3 8\n6 12\n9 7\n12 4\n", "12 16 1\n2 9\n1 9\n7 12\n10 9\n11 2\n3 12\n8 1\n2 12\n3 5\n11 1\n10 8\n1 3\n9 11\n8 4\n6 4\n6 4\n", "12 17 1\n1 9\n5 3\n3 7\n4 7\n8 2\n11 3\n2 11\n11 8\n12 11\n7 6\n6 2\n10 7\n7 1\n11 5\n11 2\n3 6\n5 8\n", "10 17 1\n8 2\n8 10\n5 8\n6 4\n4 10\n4 9\n2 5\n7 1\n2 9\n7 1\n2 1\n1 3\n3 2\n4 3\n5 7\n7 3\n7 6\n", "12 17 1\n2 5\n8 1\n6 5\n4 1\n11 10\n2 11\n1 5\n1 7\n3 5\n8 10\n1 6\n9 6\n6 11\n11 1\n6 2\n4 8\n1 12\n", "5 4 2\n3 1\n1 5\n2 5\n4 2\n", "10 15 3\n8 10\n9 8\n1 6\n7 6\n10 2\n4 3\n2 3\n8 5\n2 5\n4 8\n1 8\n6 10\n10 4\n5 1\n9 5\n", "7 13 6\n6 5\n6 1\n1 4\n3 5\n3 7\n6 7\n4 1\n5 7\n1 2\n1 5\n7 2\n1 7\n4 7\n", "7 10 2\n7 1\n1 3\n5 2\n5 1\n6 5\n3 7\n5 7\n1 2\n5 1\n1 4\n", "12 16 2\n11 7\n8 5\n7 6\n6 11\n9 6\n11 3\n1 12\n6 7\n1 7\n10 6\n4 12\n11 9\n7 2\n12 3\n10 11\n8 2\n", "13 17 7\n13 1\n6 1\n1 8\n4 6\n6 5\n1 3\n13 4\n1 11\n12 3\n8 7\n2 7\n12 1\n10 1\n9 8\n4 3\n1 5\n1 2\n", "11 17 1\n3 8\n8 2\n1 3\n6 1\n3 9\n2 5\n5 9\n7 2\n5 1\n4 1\n4 5\n8 1\n10 9\n11 1\n9 1\n3 7\n7 10\n", "12 18 3\n2 4\n2 10\n9 1\n10 1\n7 8\n5 10\n10 1\n11 3\n2 1\n11 12\n6 2\n1 3\n5 7\n8 3\n6 1\n12 1\n2 8\n6 7\n", "5 10 3\n5 3\n1 2\n1 4\n1 3\n4 2\n2 3\n2 5\n3 4\n4 5\n4 1\n", "8 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n"], "output": ["1 2\n1 3\n1 4\n", "1 2\n1 3\n1 4\n1 4\n", "4 1\n4 3\n4 2\n4 3\n", "2 1\n2 3\n2 4\n2 5\n2 4\n", "2 1\n2 3\n2 5\n2 7\n1 6\n6 8\n3 4\n", "3 2\n3 5\n3 4\n2 1\n", "2 1\n2 3\n2 4\n3 5\n", "2 1\n2 3\n2 1\n3 5\n3 4\n", "1 2\n1 5\n2 4\n4 3\n", "2 1\n2 3\n2 8\n2 7\n1 6\n6 5\n5 4\n", "2 2\n2 2\n2 3\n2 4\n3 1\n", "5 1\n5 2\n5 3\n", "5 2\n5 6\n5 4\n5 8\n2 1\n1 3\n2 7\n", "2 1\n2 3\n2 5\n2 4\n1 6\n5 8\n", "1 2\n1 1\n1 1\n1 6\n2 5\n6 4\n4 3\n", "3 3\n3 3\n3 9\n3 8\n9 11\n11 6\n6 10\n10 1\n1 2\n1 5\n9 4\n4 7\n", "3 1\n3 1\n3 3\n3 3\n", "1 5\n1 12\n1 2\n1 4\n1 4\n1 7\n12 3\n3 9\n9 10\n10 8\n8 11\n12 6\n", "4 1\n4 3\n4 6\n4 8\n4 4\n4 4\n1 2\n3 7\n6 5\n5 10\n10 9\n", "4 5\n4 5\n4 2\n2 1\n1 6\n", "4 2\n4 3\n4 4\n4 4\n3 1\n", "6 2\n6 7\n6 2\n6 11\n6 1\n6 4\n6 10\n6 5\n6 9\n1 12\n12 8\n4 3\n", "9 3\n9 8\n9 8\n9 10\n9 2\n9 7\n3 1\n1 11\n11 5\n5 6\n6 4\n", "1 10\n1 1\n1 1\n1 11\n10 3\n3 7\n11 2\n2 6\n6 8\n8 4\n4 9\n", "1 4\n1 7\n1 9\n1 1\n1 1\n1 9\n1 13\n4 11\n7 10\n7 2\n9 8\n9 12\n9 5\n", "1 2\n1 8\n1 2\n1 8\n1 1\n1 1\n2 12\n12 10\n10 9\n9 6\n6 11\n6 5\n5 4\n4 3\n3 7\n", "2 6\n2 5\n2 9\n2 10\n2 6\n2 4\n5 1\n9 8\n8 7\n4 3\n", "1 2\n1 3\n", "5 5\n5 5\n5 1\n5 5\n5 5\n5 10\n1 4\n4 9\n9 12\n12 2\n2 8\n8 6\n6 11\n11 7\n6 3\n", "2 4\n2 8\n2 3\n4 11\n11 5\n8 10\n10 7\n7 6\n6 1\n1 12\n12 9\n9 13\n", "1 6\n1 7\n1 3\n1 5\n1 5\n6 2\n2 10\n10 4\n4 9\n4 8\n", "1 1\n1 1\n1 2\n1 3\n2 4\n", "7 1\n7 10\n7 13\n7 3\n1 4\n4 9\n9 8\n10 2\n2 12\n12 5\n5 6\n6 11\n", "1 10\n1 9\n1 7\n1 5\n1 10\n10 4\n4 12\n12 13\n12 11\n11 2\n10 8\n8 3\n8 6\n", "2 2\n2 2\n2 8\n2 12\n2 9\n8 7\n7 5\n7 3\n7 1\n", "1 6\n1 3\n1 1\n1 1\n1 3\n6 11\n11 2\n2 7\n2 4\n4 5\n11 12\n12 10\n3 9\n9 8\n", "3 1\n3 3\n3 3\n1 2\n2 4\n", "2 7\n2 9\n2 8\n2 3\n2 4\n7 10\n10 1\n1 5\n4 6\n", "1 3\n1 1\n1 1\n1 2\n1 6\n1 7\n1 10\n1 8\n3 9\n3 4\n7 5\n", "1 4\n1 4\n1 2\n", "1 7\n1 3\n1 1\n1 1\n1 7\n3 10\n10 9\n10 4\n4 13\n13 2\n2 12\n2 6\n3 5\n", "12 1\n12 7\n12 2\n12 4\n12 10\n1 8\n8 5\n5 11\n1 3\n3 9\n4 6\n", "3 4\n3 9\n3 9\n3 5\n3 2\n4 7\n7 10\n7 8\n8 1\n7 6\n6 11\n", "7 4\n7 8\n7 6\n7 10\n7 8\n4 5\n10 3\n3 11\n11 2\n2 1\n3 9\n", "2 1\n2 1\n2 4\n4 3\n3 7\n7 5\n", "1 5\n1 2\n1 2\n1 6\n1 8\n5 4\n5 9\n9 10\n10 3\n3 7\n6 11\n", "2 5\n2 11\n2 5\n2 2\n2 2\n2 12\n2 13\n5 6\n6 4\n4 8\n8 1\n8 10\n6 7\n12 9\n9 3\n", "5 6\n5 2\n5 9\n5 7\n", "1 3\n1 1\n1 1\n3 4\n4 5\n5 2\n", "11 11\n11 11\n11 8\n11 7\n11 2\n11 1\n11 6\n8 5\n5 9\n2 3\n3 4\n4 10\n", "1 2\n1 4\n1 2\n4 3\n", "3 5\n3 4\n3 6\n3 6\n3 5\n3 2\n4 7\n7 1\n", "2 11\n2 7\n2 2\n2 2\n2 4\n11 5\n11 6\n11 13\n13 8\n8 10\n10 9\n9 3\n13 12\n12 1\n", "9 11\n9 6\n9 5\n9 9\n9 9\n9 8\n9 8\n6 2\n2 3\n3 7\n7 1\n1 10\n2 4\n", "8 9\n8 3\n8 4\n8 5\n8 3\n8 10\n3 1\n1 7\n5 6\n6 2\n", "7 11\n7 3\n7 1\n7 6\n7 12\n3 2\n2 5\n5 8\n3 4\n4 10\n10 9\n", "1 2\n1 9\n1 2\n1 10\n1 8\n2 3\n3 12\n9 7\n9 11\n11 5\n", "11 2\n11 11\n11 11\n11 7\n11 1\n11 5\n2 3\n2 10\n7 4\n7 8\n8 12\n5 9\n5 6\n", "1 8\n1 2\n1 2\n1 1\n1 1\n8 6\n2 9\n9 7\n7 5\n5 10\n10 4\n5 3\n", "1 2\n1 6\n1 11\n1 11\n1 5\n1 10\n1 6\n1 8\n2 4\n6 9\n", "1 1\n1 1\n", "8 3\n8 1\n8 3\n8 1\n8 6\n3 2\n2 4\n4 5\n1 9\n9 10\n6 7\n", "1 1\n1 1\n1 5\n1 7\n1 2\n1 2\n5 6\n5 3\n3 4\n", "1 1\n1 1\n1 6\n1 7\n1 1\n1 1\n7 2\n2 5\n5 3\n", "6 6\n6 6\n6 11\n6 12\n6 4\n11 2\n11 9\n9 7\n7 8\n7 5\n7 1\n1 3\n3 10\n", "1 6\n1 1\n1 1\n1 5\n1 4\n1 10\n1 9\n1 3\n1 5\n4 8\n3 13\n13 7\n7 2\n7 12\n12 11\n", "1 3\n1 2\n1 3\n1 4\n1 4\n1 10\n1 9\n1 3\n3 6\n2 5\n5 8\n9 7\n9 11\n", "1 10\n1 7\n1 11\n1 11\n1 2\n1 12\n1 2\n10 9\n7 8\n8 5\n5 3\n3 6\n2 4\n", "3 5\n3 1\n3 4\n3 2\n3 5\n", "1 2\n1 3\n1 4\n"]}, "short_description": "1. One-sentence summary:  \nConstruct a spanning tree of an undirected graph such that a specified root vertex has exactly d incident tree\u2010edges, or report impossibility.\n\n2. Core algorithmic approach:  \n\u2013 Use an explicit-stack DFS to discover and mark connected components after removing the root, thereby identifying one \u201crepresentative\u201d neighbor per component (guaranteeing connectivity).  \n\u2013 Greedily select exactly d neighbors of the root: first one per component, then extra neighbors if needed.  \n\u2013 Finally, complete the tree by exploring from those chosen neighbors and adding any further edges that connect new vertices, ensuring a spanning tree.\n\n3. Reusable components:  \n\u2013 Iterative DFS with a stack and an auxiliary \u201cnext\u2010child\u201d index array (`stk` and `cnt`) for graphs too deep for recursion or when you need to resume partial traversal.  \n\u2013 Greedy neighbor\u2010selection pattern to satisfy a degree\u2010constraint at a special vertex: first cover mandatory components, then fill up to the required degree.  \n\u2013 Use of boolean/marker arrays (`visit`, `mark`) to control two layers of visitation: one for component discovery, one for final tree\u2010edge inclusion."}
{"name": "110_E. Lucky Tree", "description": "Petya loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nOne day Petya encountered a tree with n vertexes. Besides, the tree was weighted, i. e. each edge of the tree has weight (a positive integer). An edge is lucky if its weight is a lucky number. Note that a tree with n vertexes is an undirected connected graph that has exactly n - 1 edges.\n\nPetya wondered how many vertex triples (i, j, k) exists that on the way from i to j, as well as on the way from i to k there must be at least one lucky edge (all three vertexes are pairwise distinct). The order of numbers in the triple matters, that is, the triple (1, 2, 3) is not equal to the triple (2, 1, 3) and is not equal to the triple (1, 3, 2). \n\nFind how many such triples of vertexes exist.\n\nInput\n\nThe first line contains the single integer n (1 \u2264 n \u2264 105) \u2014 the number of tree vertexes. Next n - 1 lines contain three integers each: ui vi wi (1 \u2264 ui, vi \u2264 n, 1 \u2264 wi \u2264 109) \u2014 the pair of vertexes connected by the edge and the edge's weight.\n\nOutput\n\nOn the single line print the single number \u2014 the answer.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in \u0421++. It is recommended to use the cin, cout streams or the %I64d specificator.\n\nExamples\n\nInput\n\n4\n1 2 4\n3 1 2\n1 4 7\n\n\nOutput\n\n16\n\n\nInput\n\n4\n1 2 4\n1 3 47\n1 4 7447\n\n\nOutput\n\n24\n\nNote\n\nThe 16 triples of vertexes from the first sample are: (1, 2, 4), (1, 4, 2), (2, 1, 3), (2, 1, 4), (2, 3, 1), (2, 3, 4), (2, 4, 1), (2, 4, 3), (3, 2, 4), (3, 4, 2), (4, 1, 2), (4, 1, 3), (4, 2, 1), (4, 2, 3), (4, 3, 1), (4, 3, 2).\n\nIn the second sample all the triples should be counted: 4\u00b73\u00b72 = 24.", "solution": "from sys import stdin, stdout\nimport re\nfrom random import randrange\nfrom pprint import PrettyPrinter\npprint = PrettyPrinter(width=55).pprint\n\ndef is_lucky(num):\n    return re.fullmatch(\"[47]+\", num) is not None\n\ngr = None\ndef topo_order(u):\n    res = [(u, None, None)]\n    i = 0\n    while i < len(res):\n        u, p, _ = res[i]\n        i += 1\n        for v, c in gr[u]:\n            if v != p:\n                res.append((v, u, c))\n    return reversed(res)\n\ndef main():\n    global gr\n    n = int(stdin.readline())\n    # n = 4000\n    gr = [[] for i in range(n)]\n    for _ in range(n - 1):\n        s = stdin.readline().split()\n        u, v = int(s[0]) - 1, int(s[1]) - 1\n        c = is_lucky(s[-1])\n        # u, v = randrange(n), randrange(n)\n        # c = randrange(2) == 1\n        gr[u].append((v, c))\n        gr[v].append((u, c))\n    topo = list(topo_order(0))\n\n    tree_size = [1 for i in range(n)]\n    for u, p, _ in topo:\n        if p is not None:\n            tree_size[p] += tree_size[u]\n\n    dp_up, dp_down = [0 for i in range(n)], [0 for i in range(n)]\n    for u, p, cost in topo:\n        if p is not None:\n            dp_up[p] += tree_size[u] if cost else dp_up[u]\n\n    for u, p, cost in reversed(topo):\n        if p is not None:\n            dp_down[u] += tree_size[0] - tree_size[u] if cost else dp_down[p] + dp_up[p] - dp_up[u]\n\n    ans = sum(((u + v) * (u + v - 1) for u, v in zip(dp_up, dp_down)))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "difficulty": 11, "public_tests": {"input": ["4\n1 2 4\n1 3 47\n1 4 7447\n", "4\n1 2 4\n3 1 2\n1 4 7\n"], "output": ["24", "16"]}, "private_tests": {"input": ["10\n9 2 6\n5 3 7\n7 8 9\n2 1 7\n8 6 3\n1 4 5\n3 10 7\n7 4 3\n6 3 5\n", "7\n1 2 4\n2 3 7\n3 4 44\n4 5 47\n5 6 74\n6 7 77\n", "9\n1 2 1\n1 3 7\n3 4 19\n3 5 2\n4 6 46\n7 4 25\n5 8 64\n5 9 73\n", "2\n1 2 7\n", "7\n1 2 47\n1 3 9\n3 7 7\n3 4 2\n3 5 4\n3 6 1\n", "2\n2 1 1000000000\n", "9\n1 2 7\n1 3 12\n4 1 2\n4 5 4\n4 6 47\n4 7 9\n5 8 2\n5 9 1\n", "5\n1 2 1\n2 3 4\n3 4 4\n4 5 1\n", "10\n9 1 4\n9 2 7\n9 3 74447\n9 4 744\n9 5 777777777\n9 6 447477\n9 7 74\n9 8 777\n4 10 977\n", "10\n4 8 480392999\n3 4 32525297\n9 7 417904789\n6 2 836294777\n5 3 616099185\n1 7 830574407\n8 10 838073755\n6 10 547050646\n2 1 12607780\n", "9\n9 7 4\n7 2 10\n2 3 28\n2 1 1\n1 6 47\n1 5 7\n1 4 4\n1 8 2\n", "5\n1 2 1\n2 3 1\n3 4 1\n4 5 2\n", "5\n1 2 1000000000\n2 3 747774\n3 4 4\n4 5 8447854\n"], "output": ["328", "210", "98", "0", "114", "0", "282", "36", "688", "0", "284", "0", "                                                              36\n"]}, "generated_tests": {"input": ["10\n9 2 6\n5 3 7\n7 8 9\n2 1 7\n4 6 3\n1 4 5\n3 10 7\n7 4 3\n6 3 5\n", "7\n1 2 47\n1 3 9\n6 7 7\n3 4 2\n3 5 4\n3 6 1\n", "2\n2 1 1010000000\n", "5\n1 2 1000000000\n2 3 747774\n1 4 4\n4 5 8447854\n", "4\n1 2 4\n1 3 47\n1 4 12682\n", "9\n1 2 1\n1 3 4\n3 4 19\n3 5 2\n4 6 46\n7 4 25\n5 8 64\n5 9 73\n", "9\n9 7 4\n7 2 10\n2 3 28\n2 1 1\n1 6 72\n1 5 7\n1 4 4\n1 8 2\n", "10\n9 2 6\n5 3 7\n7 8 9\n2 1 7\n2 6 3\n1 4 5\n3 10 7\n7 4 3\n6 3 5\n", "7\n1 2 47\n1 3 9\n3 7 7\n3 4 2\n3 5 1\n3 6 1\n", "9\n9 7 4\n7 2 10\n4 3 28\n2 1 1\n1 6 72\n1 5 7\n1 4 4\n1 8 2\n", "10\n9 2 4\n5 3 7\n7 8 9\n2 1 7\n2 6 3\n1 4 5\n3 10 7\n7 4 3\n6 3 5\n", "10\n9 2 4\n5 3 7\n7 8 9\n2 1 10\n2 6 3\n1 4 5\n3 10 7\n7 4 3\n6 3 5\n", "9\n9 7 4\n7 4 10\n4 3 49\n2 1 1\n1 6 72\n1 5 7\n1 4 4\n1 8 2\n", "9\n9 7 4\n7 2 10\n2 3 28\n2 1 1\n1 6 47\n1 5 7\n1 4 4\n2 8 2\n", "5\n1 2 1100000000\n2 3 1372482\n1 4 4\n4 5 8447854\n", "10\n9 2 6\n5 3 7\n7 8 9\n2 1 8\n8 6 3\n1 4 5\n3 10 7\n7 4 6\n6 3 5\n", "9\n9 7 4\n7 2 10\n2 3 28\n2 1 1\n1 6 72\n1 5 7\n1 4 8\n1 8 2\n", "5\n1 3 1\n2 3 4\n3 4 6\n4 5 1\n", "9\n9 7 4\n7 4 10\n4 3 49\n2 1 1\n2 6 72\n1 5 3\n1 4 4\n1 8 2\n", "4\n1 4 4\n1 3 32\n2 4 13873\n", "7\n1 2 4\n2 3 7\n3 4 15\n4 5 47\n5 6 74\n6 7 77\n", "9\n1 2 7\n2 3 12\n4 1 2\n4 5 4\n4 6 47\n4 7 9\n5 8 2\n5 9 1\n", "10\n9 1 4\n9 2 7\n9 3 74447\n9 4 744\n9 5 777777777\n9 6 447477\n9 7 74\n9 8 62\n4 10 977\n", "10\n9 2 3\n5 3 7\n7 8 9\n2 1 7\n4 6 3\n1 4 5\n3 10 7\n7 4 3\n6 3 5\n", "10\n9 2 6\n5 3 7\n7 8 9\n2 1 7\n8 6 3\n1 4 5\n3 10 7\n7 4 6\n6 3 5\n", "2\n1 2 10\n", "7\n1 2 47\n1 3 9\n3 7 7\n3 4 2\n3 5 7\n3 6 1\n", "5\n1 2 1\n2 3 7\n3 4 4\n4 5 1\n", "4\n1 2 4\n1 3 47\n1 4 11005\n", "7\n1 2 47\n1 3 9\n6 7 7\n3 4 2\n3 5 4\n3 6 2\n", "5\n1 2 1100000000\n2 3 747774\n1 4 4\n4 5 8447854\n", "4\n1 2 4\n1 3 47\n2 4 12682\n", "10\n9 2 3\n5 3 7\n7 8 9\n2 1 7\n4 6 3\n1 4 9\n3 10 7\n7 4 3\n6 3 5\n", "4\n1 2 4\n1 3 47\n2 4 17670\n", "9\n9 7 4\n7 2 10\n4 3 49\n2 1 1\n1 6 72\n1 5 7\n1 4 4\n1 8 2\n", "10\n9 2 6\n5 3 7\n7 8 9\n2 1 7\n8 6 3\n1 6 5\n3 10 7\n7 4 3\n6 3 5\n", "7\n1 2 65\n1 3 9\n3 7 7\n3 4 2\n3 5 4\n3 6 1\n", "5\n1 3 1\n2 3 4\n3 4 4\n4 5 1\n", "5\n1 2 2\n2 3 1\n3 4 1\n4 5 2\n", "9\n1 2 1\n1 5 4\n3 4 19\n3 5 2\n4 6 46\n7 4 25\n5 8 64\n5 9 73\n", "7\n1 2 47\n1 3 9\n4 7 7\n3 4 2\n3 5 7\n3 6 1\n", "4\n1 2 4\n1 3 47\n2 4 11005\n", "10\n9 2 6\n5 1 7\n7 8 9\n2 1 7\n2 6 3\n1 4 5\n3 10 7\n7 4 3\n6 3 5\n", "5\n1 2 1100001000\n2 3 747774\n1 4 4\n4 5 8447854\n", "10\n9 2 4\n5 3 7\n4 8 9\n2 1 7\n2 6 3\n1 4 5\n3 10 7\n7 4 3\n6 3 5\n", "4\n1 2 4\n1 3 47\n1 4 17670\n", "9\n9 7 4\n7 4 10\n4 3 49\n2 1 1\n2 6 72\n1 5 7\n1 4 4\n1 8 2\n", "9\n9 7 4\n7 2 10\n2 3 28\n2 1 1\n1 6 47\n1 5 7\n1 4 1\n2 8 2\n", "5\n1 2 2\n2 4 1\n3 4 1\n4 5 2\n", "9\n1 2 1\n1 5 4\n3 4 19\n3 5 2\n4 6 46\n7 4 25\n5 8 19\n5 9 73\n", "9\n9 7 4\n7 2 10\n2 3 24\n2 1 1\n1 6 72\n1 5 7\n1 4 8\n1 8 2\n", "4\n1 2 4\n1 3 47\n2 4 13873\n", "10\n9 3 6\n5 1 7\n7 8 9\n2 1 7\n2 6 3\n1 4 5\n3 10 7\n7 4 3\n6 3 5\n", "10\n9 2 4\n5 3 7\n4 8 9\n2 1 7\n2 6 3\n1 4 5\n4 10 7\n7 4 3\n6 3 5\n", "9\n9 7 4\n7 2 13\n2 3 28\n2 1 1\n1 6 47\n1 5 7\n1 4 1\n2 8 2\n", "9\n9 7 4\n7 2 10\n2 3 24\n2 1 2\n1 6 72\n1 5 7\n1 4 8\n1 8 2\n", "4\n1 4 4\n1 3 47\n2 4 13873\n", "2\n1 2 3\n", "7\n1 2 57\n1 3 9\n3 7 7\n3 4 2\n3 5 4\n3 6 1\n", "2\n2 1 1000000001\n"], "output": ["328", "114", "0", "36", "16", "98", "204", "384", "70", "256", "462", "258", "282", "284", "18", "160", "126", "12", "206", "8", "190", "320", "656", "328", "328", "0", "114", "36", "16", "114", "36", "16", "328", "16", "256", "328", "70", "36", "0", "98", "114", "16", "384", "36", "462", "16", "282", "204", "0", "98", "126", "16", "384", "462", "204", "126", "16", "0", "70", "0"]}, "short_description": "1. One-sentence summary  \n   Compute, on a tree where each edge is marked \u201cspecial\u201d or not, the total number of ordered endpoint\u2010pairs whose unique path consists entirely of special edges.\n\n2. Core algorithmic approach  \n   A two\u2010phase tree dynamic programming (\u201crerooting\u201d) on an undirected tree:  \n   - First (post-order) pass to compute for each node the count of special-reachable nodes in its subtree.  \n   - Second (pre-order) pass to compute for each node the count of special-reachable nodes outside its subtree, reusing computed subtree values.\n\n3. Reusable components  \n   \u2022 topo_order(u): linear\u2010time parent-aware traversal to produce a post-order list (and its reverse) for tree DP.  \n   \u2022 Subtree aggregation DP: computing sizes or sums over children via parent pointers in post-order.  \n   \u2022 Rerooting DP pattern: propagating \u201cupward\u201d results from parent to child in a pre-order to compute values for the \u201crest of the tree.\u201d  \n   \u2022 Adjacency list representation with (neighbor, edge\u2010property) pairs for general tree labeling."}
{"name": "1286_B. Numbers on Tree", "description": "Evlampiy was gifted a rooted tree. The vertices of the tree are numbered from 1 to n. Each of its vertices also has an integer a_i written on it. For each vertex i, Evlampiy calculated c_i \u2014 the number of vertices j in the subtree of vertex i, such that a_j < a_i. \n\n<image>Illustration for the second example, the first integer is a_i and the integer in parentheses is c_i\n\nAfter the new year, Evlampiy could not remember what his gift was! He remembers the tree and the values of c_i, but he completely forgot which integers a_i were written on the vertices.\n\nHelp him to restore initial integers!\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 2000) \u2014 the number of vertices in the tree.\n\nThe next n lines contain descriptions of vertices: the i-th line contains two integers p_i and c_i (0 \u2264 p_i \u2264 n; 0 \u2264 c_i \u2264 n-1), where p_i is the parent of vertex i or 0 if vertex i is root, and c_i is the number of vertices j in the subtree of vertex i, such that a_j < a_i.\n\nIt is guaranteed that the values of p_i describe a rooted tree with n vertices.\n\nOutput\n\nIf a solution exists, in the first line print \"YES\", and in the second line output n integers a_i (1 \u2264 a_i \u2264 {10}^{9}). If there are several solutions, output any of them. One can prove that if there is a solution, then there is also a solution in which all a_i are between 1 and 10^9.\n\nIf there are no solutions, print \"NO\".\n\nExamples\n\nInput\n\n\n3\n2 0\n0 2\n2 0\n\n\nOutput\n\n\nYES\n1 2 1 \n\nInput\n\n\n5\n0 1\n1 3\n2 1\n3 0\n2 0\n\n\nOutput\n\n\nYES\n2 3 2 1 2", "solution": "import sys\nimport io, os\ninput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nimport collections\nfrom collections import defaultdict\nn=int(input())\nc,root=[],0\ngraph=defaultdict(list)\nfor i in range(n):\n    a,b=map(int,input().split())\n    if a!=0:\n        graph[i+1].append(a)\n        graph[a].append(i+1)\n    else:\n        root=i+1\n    c.append(b)\nans=[0]*(n+1)\nstore=[[] for _ in range(n+1)]\nOBSERVE = 0\nCHECK = 1\nstack = [(OBSERVE, root, 0)]\nif n==1 and c[0]==0:\n    sys.stdout.write('YES'+'\\n')\n    sys.stdout.write('1'+'\\n')\nelse:\n    while len(stack):\n        state, vertex, parent = stack.pop()\n        if state == OBSERVE:\n            stack.append((CHECK, vertex, parent))\n            for child in graph[vertex]:\n                if child != parent:\n                    stack.append((OBSERVE, child, vertex))\n        else:\n            i=0\n            while i<(len(graph[vertex])):\n                if graph[vertex][i] != parent:\n                    if len(graph[graph[vertex][i]])==1 and graph[vertex][i]!=root:\n                        store[graph[vertex][i]].append([i+1,graph[vertex][i]])\n                    store[vertex]+=store[graph[vertex][i]]\n                i+=1\n            store[vertex].sort()\n            ok=True\n            if c[vertex-1]>len(store[vertex]):\n                ok=False\n                break\n            else:\n                if len(store[vertex])>0:\n                    if c[vertex-1]!=0:\n                        store[vertex].insert(c[vertex-1],[store[vertex][c[vertex-1]-1][0]+1,vertex])\n                    else:\n                       store[vertex].insert(c[vertex-1],[store[vertex][c[vertex-1]][0],vertex])\n                for ijk in range(len(store[vertex])):\n                    store[vertex][ijk][0]=ijk+1\n    if ok==True:\n        for ij in store[root]:\n            ans[ij[1]]=ij[0]\n        sys.stdout.write('YES'+'\\n')\n        ans=' '.join(map(str,ans[1:]))\n        sys.stdout.write(ans+'\\n')\n    else:\n        sys.stdout.write('NO'+'\\n')\n", "difficulty": 8, "public_tests": {"input": ["3\n2 0\n0 2\n2 0\n", "5\n0 1\n1 3\n2 1\n3 0\n2 0\n"], "output": ["YES\n1 3 2 \n", "YES\n2 5 3 1 4 \n"]}, "private_tests": {"input": ["2\n2 0\n0 0\n", "2\n0 1\n1 0\n", "3\n2 0\n0 2\n2 0\n", "1\n0 0\n", "5\n0 1\n1 3\n2 1\n3 0\n2 0\n", "3\n0 0\n1 0\n1 0\n", "3\n0 1\n3 0\n1 0\n", "3\n2 1\n0 0\n1 1\n", "3\n3 1\n1 0\n0 1\n", "2\n2 1\n0 1\n"], "output": ["YES\n2 1 \n", "YES\n2 1 \n", "YES\n1 3 2 \n", "YES\n1 \n", "YES\n2 5 3 1 4 \n", "YES\n1 2 3 \n", "YES\n2 3 1 \n", "NO\n", "YES\n3 1 2 \n", "NO\n"]}, "generated_tests": {"input": ["3\n0 1\n3 0\n1 1\n", "3\n2 1\n0 0\n1 0\n", "5\n0 1\n1 3\n1 1\n3 0\n2 0\n", "5\n0 2\n1 3\n2 1\n3 0\n2 0\n", "3\n0 0\n3 0\n1 1\n", "2\n0 0\n1 0\n", "3\n3 1\n1 0\n0 0\n", "3\n0 1\n3 1\n1 1\n", "5\n0 1\n1 3\n1 1\n2 0\n2 0\n", "3\n0 1\n2 1\n1 1\n", "5\n0 2\n1 3\n1 1\n2 0\n2 0\n", "3\n0 1\n2 1\n1 2\n", "3\n0 1\n1 1\n1 2\n", "3\n0 1\n1 0\n1 2\n", "3\n0 0\n1 1\n1 0\n", "3\n0 1\n3 1\n1 0\n", "3\n2 1\n0 0\n2 1\n", "5\n0 1\n1 3\n2 1\n3 0\n2 1\n", "5\n0 1\n1 3\n1 0\n3 0\n2 0\n", "5\n0 1\n1 4\n1 1\n2 0\n2 0\n", "3\n0 1\n1 1\n1 1\n", "5\n0 2\n1 3\n1 1\n2 0\n4 0\n", "3\n0 1\n2 0\n1 2\n", "3\n0 1\n1 1\n1 3\n", "3\n0 0\n1 0\n1 2\n", "3\n0 1\n1 1\n1 0\n", "3\n0 1\n3 2\n1 1\n", "5\n0 1\n1 3\n3 1\n3 0\n2 0\n", "5\n0 1\n1 2\n1 1\n2 0\n2 0\n", "3\n0 1\n1 1\n1 6\n", "3\n0 1\n1 2\n1 0\n", "5\n0 1\n1 3\n3 1\n3 1\n2 0\n", "3\n0 1\n1 1\n2 6\n", "3\n0 1\n1 0\n1 0\n", "5\n0 1\n1 3\n3 1\n3 2\n2 0\n", "3\n0 2\n1 1\n2 6\n", "3\n0 2\n1 1\n1 6\n", "3\n2 0\n0 2\n2 1\n", "5\n0 1\n1 4\n2 1\n3 0\n2 0\n", "3\n0 0\n1 0\n2 0\n", "3\n2 1\n0 0\n1 2\n", "3\n0 1\n2 2\n1 1\n", "5\n0 2\n1 3\n1 1\n3 0\n2 0\n", "3\n0 1\n1 1\n2 2\n", "3\n0 1\n1 0\n2 2\n", "5\n0 2\n1 3\n2 1\n3 0\n1 0\n", "3\n2 2\n0 0\n2 1\n", "5\n0 1\n1 3\n1 1\n3 0\n2 1\n", "3\n0 0\n3 1\n1 1\n", "5\n0 1\n1 3\n1 0\n3 0\n2 1\n", "5\n0 2\n2 3\n1 1\n2 0\n4 0\n", "3\n0 1\n2 0\n1 3\n", "3\n0 1\n2 1\n1 3\n", "3\n0 2\n1 1\n1 0\n", "3\n0 1\n3 3\n1 1\n", "5\n0 1\n2 2\n1 1\n2 0\n2 0\n", "3\n0 1\n1 2\n1 1\n", "3\n0 0\n1 1\n2 6\n", "5\n0 2\n1 3\n3 1\n3 2\n2 0\n", "3\n0 2\n1 2\n2 6\n", "3\n0 4\n1 2\n2 6\n", "5\n0 1\n1 4\n2 1\n5 0\n2 0\n", "3\n0 1\n1 2\n2 2\n", "3\n0 1\n1 0\n2 1\n", "5\n0 4\n1 3\n2 1\n3 0\n1 0\n", "3\n2 3\n0 0\n2 1\n", "3\n0 0\n3 2\n1 1\n", "5\n0 2\n2 3\n1 1\n2 0\n4 -1\n", "3\n0 0\n1 1\n1 6\n", "3\n0 2\n1 2\n2 3\n", "3\n0 4\n1 2\n2 8\n", "3\n0 1\n1 2\n2 1\n", "3\n0 1\n1 0\n2 0\n", "5\n0 1\n1 3\n2 1\n3 0\n1 0\n", "3\n2 3\n0 0\n2 2\n", "3\n0 4\n1 1\n2 8\n", "3\n2 1\n0 0\n2 2\n", "3\n0 4\n2 1\n2 8\n", "3\n0 4\n2 1\n2 12\n", "3\n0 4\n2 1\n2 18\n", "3\n0 4\n2 1\n2 5\n", "3\n0 4\n2 0\n2 5\n", "3\n0 5\n2 0\n2 5\n", "3\n0 5\n2 0\n2 3\n", "2\n0 2\n1 0\n"], "output": ["YES\n2 1 3\n", "YES\n3 1 2\n", "NO\n", "YES\n3 5 2 1 4\n", "YES\n1 2 3\n", "YES\n1 2\n", "YES\n3 2 1\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n2 1 3\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 2 3\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n2 1 3\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary:\nBuilds an ordering of tree nodes (labels) so that for each node the number of nodes in its subtree with smaller labels equals a given target.\n\n2. Core algorithmic approach:\nIterative depth-first search (post-order) on a rooted tree combined with the \u201csmall-to-large\u201d merging of sorted lists and insertion-at-rank to enforce the count constraints.\n\n3. Reusable components:\n- Iterative DFS with explicit OBSERVE/CHECK states for post-order processing.\n- Small-to-large merging of per-subtree sorted lists to keep overall complexity under control.\n- Insertion-at-rank in a list (or balanced structure) to satisfy \u201ck smaller elements\u201d constraints."}
{"name": "1118_F1. Tree Cutting (Easy Version)", "description": "You are given an undirected tree of n vertices. \n\nSome vertices are colored blue, some are colored red and some are uncolored. It is guaranteed that the tree contains at least one red vertex and at least one blue vertex.\n\nYou choose an edge and remove it from the tree. Tree falls apart into two connected components. Let's call an edge nice if neither of the resulting components contain vertices of both red and blue colors.\n\nHow many nice edges are there in the given tree?\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the number of vertices in the tree.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2) \u2014 the colors of the vertices. a_i = 1 means that vertex i is colored red, a_i = 2 means that vertex i is colored blue and a_i = 0 means that vertex i is uncolored.\n\nThe i-th of the next n - 1 lines contains two integers v_i and u_i (1 \u2264 v_i, u_i \u2264 n, v_i \u2260 u_i) \u2014 the edges of the tree. It is guaranteed that the given edges form a tree. It is guaranteed that the tree contains at least one red vertex and at least one blue vertex.\n\nOutput\n\nPrint a single integer \u2014 the number of nice edges in the given tree.\n\nExamples\n\nInput\n\n\n5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n3\n1 1 2\n2 3\n1 3\n\n\nOutput\n\n\n0\n\nNote\n\nHere is the tree from the first example:\n\n<image>\n\nThe only nice edge is edge (2, 4). Removing it makes the tree fall apart into components \\{4\\} and \\{1, 2, 3, 5\\}. The first component only includes a red vertex and the second component includes blue vertices and uncolored vertices.\n\nHere is the tree from the second example:\n\n<image>\n\nEvery edge is nice in it.\n\nHere is the tree from the third example:\n\n<image>\n\nEdge (1, 3) splits the into components \\{1\\} and \\{3, 2\\}, the latter one includes both red and blue vertex, thus the edge isn't nice. Edge (2, 3) splits the into components \\{1, 3\\} and \\{2\\}, the former one includes both red and blue vertex, thus the edge also isn't nice. So the answer is 0.", "solution": "import sys\ninput=sys.stdin.readline\nn = int(input())\na = [int(t) for t in input().split(' ')]\nmx = [[] for _ in range(n)]\nfor i in range(n-1):\n    v1, v2 = map(int,input().split())\n    mx[v1-1].append(v2-1)\n    mx[v2-1].append(v1-1)\ncount = [[0, 0] for _ in range(n)]\ntotal = [a.count(1), a.count(2)]\nanswer = 0\nOBSERVE = 0\nCHECK = 1\nstack = [(OBSERVE, 0, -1)]\nwhile len(stack):\n    #print(stack,count)\n    state, vertex, parent = stack.pop()\n    if state == OBSERVE:\n        stack.append((CHECK, vertex, parent))\n        for child in mx[vertex]:\n            #print(nv,v,from_)\n            if child != parent:\n                stack.append((OBSERVE, child, vertex))\n    else:\n        for child in mx[vertex]:\n            if child != parent:\n                #print(child,parent,count)\n                if count[child][0] == total[0] and count[child][1] == 0 or count[child][1] == total[1] and count[child][0] == 0:\n                    answer += 1\n                count[vertex][0] += count[child][0]\n                count[vertex][1] += count[child][1]\n \n        if a[vertex] != 0:\n            #print(count)\n            count[vertex][a[vertex]-1] += 1\n            #print(count)\n \nprint(answer)\n", "difficulty": 12, "public_tests": {"input": ["5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n", "3\n1 1 2\n2 3\n1 3\n", "5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n"], "output": ["4\n", "0\n", "1\n"]}, "private_tests": {"input": ["2 2\n1 2\n1 2\n", "5\n1 2 2 0 2\n1 2\n1 5\n3 5\n4 5\n", "2\n1 2\n1 2\n", "10 2\n0 1 2 2 1 0 0 0 1 1\n1 3\n2 6\n3 9\n4 6\n5 6\n6 7\n6 9\n6 10\n8 9\n", "5 2\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n", "20 10\n0 1 2 0 4 10 0 5 6 0 0 0 7 8 0 0 9 0 3 0\n8 1\n18 15\n10 13\n8 7\n5 11\n3 16\n4 19\n6 18\n20 5\n12 4\n14 17\n4 16\n9 3\n13 20\n10 17\n2 12\n2 8\n10 4\n8 18\n", "7 3\n0 1 0 2 2 3 0\n1 3\n1 4\n1 5\n2 7\n3 6\n4 7\n", "20\n1 2 1 1 0 0 0 1 1 1 0 0 0 1 0 2 0 2 1 1\n1 20\n2 3\n2 4\n2 14\n2 18\n3 10\n5 15\n5 16\n6 17\n7 15\n8 15\n9 17\n9 20\n11 14\n12 18\n12 20\n13 19\n15 17\n18 19\n", "2 2\n2 1\n1 2\n", "10 10\n1 2 3 4 5 6 7 8 9 10\n1 3\n2 10\n4 7\n8 5\n1 7\n8 6\n5 7\n10 8\n9 1\n", "10 5\n0 1 0 2 3 0 1 4 5 1\n2 3\n3 1\n2 10\n10 6\n7 10\n9 4\n5 9\n5 6\n9 8\n", "10 8\n3 3 1 2 0 4 5 6 7 8\n5 2\n1 2\n10 7\n10 4\n3 8\n3 4\n1 7\n9 6\n6 7\n", "10 5\n1 2 3 5 0 5 0 4 4 5\n7 9\n10 5\n5 6\n5 4\n7 8\n3 10\n1 8\n4 2\n7 10\n", "3\n1 2 1\n1 3\n2 3\n", "5 5\n4 1 5 2 3\n1 2\n1 5\n3 5\n4 5\n", "6\n1 2 1 2 1 0\n1 5\n2 3\n3 5\n3 6\n4 5\n", "2\n2 1\n1 2\n", "5 2\n1 0 1 0 2\n1 2\n1 5\n2 4\n3 5\n", "10\n1 2 0 0 1 1 1 1 0 1\n1 3\n1 5\n2 10\n3 4\n3 8\n4 6\n4 7\n6 9\n9 10\n", "5 3\n0 2 1 1 3\n1 2\n1 5\n2 3\n2 4\n"], "output": ["1\n", "0\n", "1\n", "0\n", "1\n", "3\n", "1\n", "0\n", "0\n", "0\n", "0\n", "3\n", "0\n", "1\n", "1\n", "0\n", "1\n", "0\n", "1\n", "0\n"]}, "generated_tests": {"input": ["2 2\n1 2\n1 0\n", "10 2\n0 1 2 2 1 0 0 0 1 1\n1 3\n2 6\n3 9\n4 6\n5 4\n6 7\n6 9\n6 10\n8 9\n", "5\n1 0 0 0 4\n1 2\n2 3\n3 4\n4 5\n", "5\n1 1 3 0 2\n1 2\n2 3\n3 5\n4 1\n", "5\n1 1 2 0 2\n1 2\n1 5\n3 5\n4 5\n", "5 2\n2 0 0 1 2\n1 2\n2 6\n2 4\n2 5\n", "20 10\n0 1 2 0 4 10 0 5 6 0 0 0 7 8 0 1 9 0 3 0\n8 1\n18 15\n10 13\n8 7\n5 11\n3 16\n4 19\n6 18\n20 5\n12 4\n14 17\n4 16\n9 3\n13 20\n10 17\n2 12\n2 8\n10 4\n8 18\n", "7 4\n0 1 0 2 2 3 0\n1 3\n1 4\n1 5\n2 7\n3 6\n4 7\n", "20\n1 2 1 1 0 0 0 1 1 1 0 0 0 1 0 2 0 2 1 1\n1 20\n2 3\n2 4\n2 14\n2 18\n5 10\n5 15\n5 16\n6 17\n7 15\n8 15\n9 17\n9 20\n11 14\n12 18\n12 20\n13 19\n15 17\n18 19\n", "10 10\n1 2 3 4 5 6 7 8 9 10\n1 3\n2 2\n4 7\n8 5\n1 7\n8 6\n5 7\n10 8\n9 1\n", "10 5\n1 1 0 2 3 0 1 4 5 1\n2 3\n3 1\n2 10\n10 6\n7 10\n9 4\n5 9\n5 6\n9 8\n", "10 8\n3 3 1 2 0 4 5 6 7 8\n5 2\n1 2\n10 7\n10 4\n3 8\n3 2\n1 7\n9 6\n6 7\n", "10 5\n1 2 3 5 0 5 0 4 4 5\n7 9\n10 5\n6 6\n5 4\n7 8\n3 10\n1 8\n4 2\n7 10\n", "5 5\n4 1 5 2 3\n1 2\n1 5\n3 9\n4 5\n", "6\n1 2 1 2 1 0\n1 5\n0 3\n3 5\n3 6\n4 5\n", "2\n4 1\n1 2\n", "5 2\n1 0 1 0 2\n1 2\n1 6\n2 4\n3 5\n", "10\n1 2 0 0 1 1 1 1 0 1\n1 3\n1 5\n2 10\n4 4\n3 8\n4 6\n4 7\n6 9\n9 10\n", "5 3\n-1 2 1 1 3\n1 2\n1 5\n2 3\n2 4\n", "3\n1 1 2\n2 3\n1 0\n", "2 0\n1 2\n1 0\n", "5\n1 1 2 0 2\n1 2\n1 5\n3 5\n4 1\n", "10 2\n0 1 2 2 1 0 0 0 1 1\n1 3\n2 6\n3 9\n4 6\n5 4\n6 7\n6 9\n3 10\n8 9\n", "5 2\n2 -1 0 1 2\n1 2\n2 6\n2 4\n2 5\n", "20 10\n0 1 2 0 4 10 0 5 6 0 0 0 7 8 0 1 9 0 3 0\n8 1\n18 15\n10 13\n16 7\n5 11\n3 16\n4 19\n6 18\n20 5\n12 4\n14 17\n4 16\n9 3\n13 20\n10 17\n2 12\n2 8\n10 4\n8 18\n", "20\n1 2 1 1 0 0 0 1 1 1 0 0 0 1 0 2 0 2 1 1\n1 20\n2 3\n2 4\n2 14\n2 18\n5 10\n5 15\n5 16\n6 17\n7 15\n8 15\n9 17\n9 20\n11 14\n12 18\n12 20\n13 19\n15 17\n30 19\n", "10 10\n1 2 3 4 5 6 7 8 9 10\n1 3\n2 2\n4 3\n8 5\n1 7\n8 6\n5 7\n10 8\n9 1\n", "6 5\n1 1 0 2 3 0 1 4 5 1\n2 3\n3 1\n2 10\n10 6\n7 10\n9 4\n5 9\n5 6\n9 8\n", "10 5\n1 2 3 5 0 5 0 4 4 5\n7 9\n10 5\n6 6\n5 4\n7 8\n3 10\n1 8\n4 2\n7 14\n", "5 5\n4 1 5 2 3\n1 2\n1 5\n3 9\n0 5\n", "6\n1 2 1 2 1 0\n1 5\n0 3\n3 5\n3 6\n4 2\n", "10\n1 2 0 0 1 1 1 1 0 1\n1 3\n1 5\n2 10\n4 4\n3 8\n4 6\n4 4\n6 9\n9 10\n", "5 3\n-1 2 1 1 3\n1 2\n1 5\n2 3\n2 7\n", "3\n1 1 2\n2 5\n1 0\n", "2 0\n2 2\n1 0\n", "5\n1 1 2 0 2\n1 2\n2 5\n3 5\n4 1\n", "10 2\n0 1 2 2 1 0 -1 0 1 1\n1 3\n2 6\n3 9\n4 6\n5 4\n6 7\n6 9\n3 10\n8 9\n", "5 2\n1 -1 0 1 2\n1 2\n2 6\n2 4\n2 5\n", "20 10\n0 1 2 0 4 10 0 5 6 0 0 0 7 8 0 1 9 0 3 0\n8 1\n18 15\n10 13\n16 7\n5 20\n3 16\n4 19\n6 18\n20 5\n12 4\n14 17\n4 16\n9 3\n13 20\n10 17\n2 12\n2 8\n10 4\n8 18\n", "20\n1 2 1 1 0 0 0 1 1 1 0 0 0 1 0 2 0 2 1 1\n1 20\n2 3\n2 4\n2 14\n2 18\n5 10\n5 15\n5 16\n6 17\n7 15\n8 15\n9 17\n9 20\n11 14\n1 18\n12 20\n13 19\n15 17\n30 19\n", "10 10\n1 2 3 4 5 2 7 8 9 10\n1 3\n2 2\n4 3\n8 5\n1 7\n8 6\n5 7\n10 8\n9 1\n", "6 5\n1 1 0 2 3 0 1 8 5 1\n2 3\n3 1\n2 10\n10 6\n7 10\n9 4\n5 9\n5 6\n9 8\n", "10 5\n1 2 3 5 0 5 0 4 4 5\n7 9\n10 5\n6 6\n5 4\n7 8\n3 14\n1 8\n4 2\n7 14\n", "6\n1 2 1 2 1 0\n1 5\n0 6\n3 5\n3 6\n4 2\n", "10\n1 2 0 0 1 1 1 1 0 1\n1 3\n1 5\n2 10\n4 4\n3 6\n4 6\n4 4\n6 9\n9 10\n", "1 3\n-1 2 1 1 3\n1 2\n1 5\n2 3\n2 7\n", "3\n1 1 2\n2 5\n2 0\n", "2 0\n2 2\n1 -1\n", "5\n1 1 2 0 2\n1 2\n2 3\n3 5\n4 1\n", "10 2\n0 1 2 2 1 0 -1 0 1 1\n1 3\n2 6\n3 9\n4 6\n5 4\n6 7\n6 9\n1 10\n8 9\n", "5 2\n1 -1 0 1 2\n1 2\n2 6\n2 2\n2 5\n", "20 10\n0 1 2 0 4 10 0 5 6 0 0 0 7 8 0 1 9 0 3 0\n8 1\n18 15\n10 13\n16 7\n5 20\n3 16\n4 19\n6 18\n20 5\n12 4\n14 17\n4 16\n9 3\n13 34\n10 17\n2 12\n2 8\n10 4\n8 18\n", "20\n1 2 1 1 0 0 0 1 1 1 0 0 0 1 0 2 0 2 1 1\n1 20\n2 3\n2 4\n2 14\n2 18\n5 10\n5 15\n5 16\n6 17\n7 15\n8 15\n4 17\n9 20\n11 14\n1 18\n12 20\n13 19\n15 17\n30 19\n", "10 10\n1 2 3 4 5 2 7 8 9 10\n1 3\n2 2\n4 3\n8 5\n1 7\n8 6\n5 7\n10 8\n11 1\n", "6 5\n2 1 0 2 3 0 1 8 5 1\n2 3\n3 1\n2 10\n10 6\n7 10\n9 4\n5 9\n5 6\n9 8\n", "10 5\n1 2 3 5 0 5 0 4 4 5\n7 9\n10 5\n3 6\n5 4\n7 8\n3 14\n1 8\n4 2\n7 14\n", "6\n1 2 1 2 1 0\n1 5\n0 6\n3 6\n3 6\n4 2\n", "10\n1 2 0 0 1 1 1 1 1 1\n1 3\n1 5\n2 10\n4 4\n3 6\n4 6\n4 4\n6 9\n9 10\n", "1 3\n-1 2 1 1 3\n1 3\n1 5\n2 3\n2 7\n", "3\n1 0 2\n2 5\n2 0\n", "2 1\n2 2\n1 -1\n", "10 2\n0 1 2 2 1 0 -1 0 1 1\n1 3\n2 6\n3 9\n1 6\n5 4\n6 7\n6 9\n1 10\n8 9\n", "5 2\n1 -1 0 1 2\n1 2\n2 6\n2 2\n2 2\n", "20 10\n0 1 2 0 4 10 0 5 6 0 0 0 7 8 1 1 9 0 3 0\n8 1\n18 15\n10 13\n16 7\n5 20\n3 16\n4 19\n6 18\n20 5\n12 4\n14 17\n4 16\n9 3\n13 34\n10 17\n2 12\n2 8\n10 4\n8 18\n", "20\n1 2 1 1 0 0 0 1 1 1 0 0 0 1 0 2 0 2 1 1\n1 20\n2 3\n2 4\n2 14\n2 18\n5 10\n5 15\n5 17\n6 17\n7 15\n8 15\n4 17\n9 20\n11 14\n1 18\n12 20\n13 19\n15 17\n30 19\n", "10 10\n1 2 3 4 5 2 7 1 9 10\n1 3\n2 2\n4 3\n8 5\n1 7\n8 6\n5 7\n10 8\n11 1\n", "6 5\n2 1 0 2 5 0 1 8 5 1\n2 3\n3 1\n2 10\n10 6\n7 10\n9 4\n5 9\n5 6\n9 8\n", "10 5\n1 2 3 5 0 5 0 4 4 5\n7 9\n10 5\n3 0\n5 4\n7 8\n3 14\n1 8\n4 2\n7 14\n", "6\n1 2 1 2 1 0\n1 5\n0 6\n3 6\n3 0\n4 2\n", "10\n1 2 0 0 1 1 1 1 1 1\n1 3\n1 5\n2 10\n4 4\n3 6\n4 6\n4 4\n6 10\n9 10\n", "1 0\n-1 2 1 1 3\n1 3\n1 5\n2 3\n2 7\n", "3\n1 0 2\n4 5\n2 0\n", "2 1\n2 0\n1 -1\n", "5\n1 1 3 0 2\n1 2\n2 6\n3 5\n4 1\n", "10 2\n0 1 2 0 1 0 -1 0 1 1\n1 3\n2 6\n3 9\n1 6\n5 4\n6 7\n6 9\n1 10\n8 9\n", "5 2\n1 -1 0 1 2\n1 2\n1 6\n2 2\n2 2\n", "20 10\n0 1 2 0 4 10 0 5 6 0 0 0 7 8 1 1 9 0 3 0\n8 1\n18 22\n10 13\n16 7\n5 20\n3 16\n4 19\n6 18\n20 5\n12 4\n14 17\n4 16\n9 3\n13 34\n10 17\n2 12\n2 8\n10 4\n8 18\n", "20\n1 2 1 1 0 0 0 1 1 1 0 0 0 1 0 2 0 2 1 1\n1 20\n2 3\n2 4\n2 14\n2 18\n5 10\n5 15\n5 17\n6 17\n7 15\n8 15\n4 17\n11 20\n11 14\n1 18\n12 20\n13 19\n15 17\n30 19\n", "8 10\n1 2 3 4 5 2 7 1 9 10\n1 3\n2 2\n4 3\n8 5\n1 7\n8 6\n5 7\n10 8\n11 1\n", "6 5\n2 1 0 2 8 0 1 8 5 1\n2 3\n3 1\n2 10\n10 6\n7 10\n9 4\n5 9\n5 6\n9 8\n", "10 5\n1 2 3 5 0 5 0 4 4 5\n7 9\n10 5\n3 0\n5 4\n7 8\n3 14\n1 8\n4 2\n7 18\n", "6\n1 4 1 2 1 0\n1 5\n0 6\n3 6\n3 0\n4 2\n", "10\n1 2 0 0 1 1 1 1 1 1\n1 3\n1 5\n2 10\n4 4\n3 6\n4 6\n2 4\n6 10\n9 10\n", "1 0\n-1 2 1 2 3\n1 3\n1 5\n2 3\n2 7\n", "3\n1 0 2\n4 3\n2 0\n", "5\n1 1 3 0 2\n1 2\n2 6\n3 5\n4 0\n", "10 2\n0 1 2 0 2 0 -1 0 1 1\n1 3\n2 6\n3 9\n1 6\n5 4\n6 7\n6 9\n1 10\n8 9\n", "5 2\n1 -1 0 1 2\n1 2\n1 6\n2 2\n2 0\n"], "output": ["1", "0", "4", "2", "1", "0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"]}, "short_description": "1. One-sentence summary:\nThe solution counts the number of edges in a tree whose removal would isolate a subtree containing only one of two label types.\n\n2. Core algorithmic approach:\nAn iterative depth-first search (DFS) with explicit stack states (entry/exit) to perform a post-order traversal and aggregate label counts in subtrees.\n\n3. Reusable components:\n- Adjacency list representation for an undirected tree.\n- Iterative DFS with a stack storing (state, node, parent) to emulate recursion and separate \u201cobserve\u201d (pre-visit) from \u201ccheck\u201d (post-visit) logic.\n- Subtree aggregation pattern: accumulating child contributions into a parent node to compute counts or other summary statistics."}
