{"name": "846_E. Chemistry in Berland", "description": "Igor is a post-graduate student of chemistry faculty in Berland State University (BerSU). He needs to conduct a complicated experiment to write his thesis, but laboratory of BerSU doesn't contain all the materials required for this experiment.\n\nFortunately, chemical laws allow material transformations (yes, chemistry in Berland differs from ours). But the rules of transformation are a bit strange.\n\nBerland chemists are aware of n materials, numbered in the order they were discovered. Each material can be transformed into some other material (or vice versa). Formally, for each i (2 \u2264 i \u2264 n) there exist two numbers xi and ki that denote a possible transformation: ki kilograms of material xi can be transformed into 1 kilogram of material i, and 1 kilogram of material i can be transformed into 1 kilogram of material xi. Chemical processing equipment in BerSU allows only such transformation that the amount of resulting material is always an integer number of kilograms.\n\nFor each i (1 \u2264 i \u2264 n) Igor knows that the experiment requires ai kilograms of material i, and the laboratory contains bi kilograms of this material. Is it possible to conduct an experiment after transforming some materials (or none)?\n\nInput\n\nThe first line contains one integer number n (1 \u2264 n \u2264 105) \u2014 the number of materials discovered by Berland chemists.\n\nThe second line contains n integer numbers b1, b2... bn (1 \u2264 bi \u2264 1012) \u2014 supplies of BerSU laboratory.\n\nThe third line contains n integer numbers a1, a2... an (1 \u2264 ai \u2264 1012) \u2014 the amounts required for the experiment.\n\nThen n - 1 lines follow. j-th of them contains two numbers xj + 1 and kj + 1 that denote transformation of (j + 1)-th material (1 \u2264 xj + 1 \u2264 j, 1 \u2264 kj + 1 \u2264 109).\n\nOutput\n\nPrint YES if it is possible to conduct an experiment. Otherwise print NO.\n\nExamples\n\nInput\n\n3\n1 2 3\n3 2 1\n1 1\n1 1\n\n\nOutput\n\nYES\n\n\nInput\n\n3\n3 2 1\n1 2 3\n1 1\n1 2\n\n\nOutput\n\nNO", "solution": "import sys\n\n# @profile\ndef main():\n    f = sys.stdin\n    # f = open('input.txt', 'r')\n    # fo = open('log.txt', 'w')\n    n = int(f.readline())\n    # b = []\n    # for i in range(n):\n    #    b.append()\n    b = list(map(int, f.readline().strip().split(' ')))\n    a = list(map(int, f.readline().strip().split(' ')))\n    # return\n    b = [b[i] - a[i] for i in range(n)]\n    c = [[0, 0]]\n    for i in range(n - 1):\n        line = f.readline().strip().split(' ')\n        c.append([int(line[0]), int(line[1])])\n    # print(c)\n    for i in range(n - 1, 0, -1):\n        # print(i)\n        fa = c[i][0] - 1\n        if b[i] >= 0:\n            b[fa] += b[i]\n        else:\n            b[fa] += b[i] * c[i][1]\n            if b[fa] < -1e17:\n                print('NO')\n                return 0\n    # for x in b:\n    #    fo.write(str(x) + '\\n')\n    if b[0] >= 0:\n        print('YES')\n    else:\n        print('NO')\n\nmain()\n", "difficulty": 11, "public_tests": {"input": ["3\n3 2 1\n1 2 3\n1 1\n1 2\n", "3\n1 2 3\n3 2 1\n1 1\n1 1\n"], "output": ["NO\n", "YES\n"]}, "private_tests": {"input": ["5\n27468 7465 74275 40573 40155\n112071 76270 244461 264202 132397\n1 777133331\n2 107454154\n3 652330694\n4 792720519\n", "5\n78188 56310 79021 70050 65217\n115040 5149 128449 98357 36580\n1 451393770\n2 574046602\n3 590130784\n4 112514248\n", "7\n1 1 1 1 1 1 1\n1 3000000000 3000000000 3000000000 1000000000 1000000000 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n", "10\n2 8 6 1 2 7 6 9 2 8\n4 9 4 3 5 2 9 3 7 3\n1 8\n2 8\n3 8\n4 10\n5 1\n6 4\n7 3\n8 10\n9 2\n", "11\n1 1 1 1 1 1 1 1 1 1 1\n1 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n", "5\n2 1 1 2 3\n1 2 2 2 1\n1 2\n1 3\n2 4\n1 4\n"], "output": ["NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n"]}, "generated_tests": {"input": ["5\n78188 56310 33094 70050 65217\n115040 5149 128449 98357 36580\n1 451393770\n2 574046602\n3 590130784\n4 112514248\n", "10\n2 8 6 1 2 7 6 9 2 8\n4 9 4 3 5 2 9 3 7 3\n1 8\n2 8\n3 8\n4 10\n5 1\n6 4\n7 3\n8 1\n9 2\n", "7\n1 1 1 1 1 1 1\n1 3000000000 3000000000 3000000000 1000000000 1000000000 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n2 1000000000\n1 1000000000\n", "11\n1 1 1 1 1 1 1 1 1 1 1\n1 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1001000000\n1 1000000000\n1 1000000000\n1 1000000000\n", "5\n2 1 1 2 3\n1 2 3 2 1\n1 2\n1 3\n2 4\n1 4\n", "3\n3 2 1\n1 2 3\n1 1\n1 4\n", "3\n1 2 3\n3 2 0\n1 1\n1 1\n", "5\n78188 56310 33094 70050 65217\n115040 5149 242473 98357 36580\n1 451393770\n2 574046602\n3 590130784\n4 112514248\n", "7\n1 1 1 1 1 1 1\n1 3000000000 3000000000 3000000000 1000000000 1000000000 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n2 1100000000\n1 1000000000\n", "10\n2 8 6 1 2 7 5 9 2 8\n4 9 4 3 5 2 9 3 7 3\n1 8\n2 8\n3 8\n4 10\n5 1\n6 4\n7 3\n8 1\n9 2\n", "11\n1 1 1 1 1 1 1 1 1 1 0\n1 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1001000000\n1 1000000000\n1 1000000000\n1 1000000000\n", "5\n2 1 1 2 3\n0 2 3 2 1\n1 2\n1 3\n2 4\n1 4\n", "3\n3 2 1\n1 2 3\n1 1\n2 4\n", "5\n78188 56310 33094 70050 65217\n794 5149 242473 98357 36580\n1 451393770\n2 574046602\n3 590130784\n4 112514248\n", "7\n1 1 1 1 1 1 1\n1 3000000000 3000000000 3000000000 1000000000 1000000000 1000000000\n1 1000000000\n1 1000000000\n1 1000001000\n1 1000000000\n2 1100000000\n1 1000000000\n", "10\n2 8 6 1 2 7 6 9 2 8\n4 9 4 5 5 2 9 3 7 3\n1 8\n2 8\n3 8\n4 10\n5 1\n6 4\n7 3\n8 1\n9 2\n", "11\n1 1 1 1 1 1 1 1 1 1 0\n1 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n2 1000000000\n1 1000000000\n1 1001000000\n1 1000000000\n1 1000000000\n1 1000000000\n", "5\n2 1 1 2 0\n0 2 3 2 1\n1 2\n1 3\n2 4\n1 4\n", "3\n3 0 1\n1 2 3\n1 1\n2 4\n", "5\n78188 56310 33094 70050 65217\n794 5149 242473 98357 68104\n1 451393770\n2 574046602\n3 590130784\n4 112514248\n", "7\n1 1 1 1 1 1 1\n1 3000000000 1703548480 3000000000 1000000000 1000000000 1000000000\n1 1000000000\n1 1000000000\n1 1000001000\n1 1000000000\n2 1100000000\n1 1000000000\n", "10\n2 8 6 1 2 7 6 9 2 8\n4 9 4 5 5 2 9 3 7 3\n1 8\n2 8\n3 8\n4 10\n4 1\n6 4\n7 3\n8 1\n9 2\n", "11\n1 1 1 1 1 1 1 1 1 1 0\n1 1000000001 1000000001 1000000000 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n2 1000000000\n1 1000000000\n1 1001000000\n1 1000000000\n1 1000000000\n1 1000000000\n", "5\n2 1 1 2 0\n0 2 3 2 1\n1 2\n1 3\n2 4\n2 4\n", "7\n1 1 1 1 1 1 1\n1 3000000000 1703548480 3000000000 1000000000 1000000001 1000000000\n1 1000000000\n1 1000000000\n1 1000001000\n1 1000000000\n2 1100000000\n1 1000000000\n", "10\n2 8 6 1 2 7 6 9 2 8\n4 9 4 9 5 2 9 3 7 3\n1 8\n2 8\n3 8\n4 10\n4 1\n6 4\n7 3\n8 1\n9 2\n", "11\n1 1 1 1 1 1 1 1 1 1 0\n1 1000000001 1000000001 1000000000 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n2 1010000000\n1 1000000000\n1 1001000000\n1 1000000000\n1 1000000000\n1 1000000000\n", "10\n2 8 6 1 2 7 6 9 2 8\n4 9 4 9 5 2 9 3 7 3\n1 8\n2 16\n3 8\n4 10\n4 1\n6 4\n7 3\n8 1\n9 2\n", "11\n1 1 1 1 1 1 1 0 1 1 0\n1 1000000001 1000000001 1000000000 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n2 1010000000\n1 1000000000\n1 1001000000\n1 1000000000\n1 1000000000\n1 1000000000\n", "10\n2 8 6 1 2 7 6 9 2 8\n4 9 4 9 5 2 9 3 7 3\n1 8\n2 16\n3 6\n4 10\n4 1\n6 4\n7 3\n8 1\n9 2\n", "11\n1 1 1 1 1 1 1 0 1 1 0\n1 1000000001 1000000001 1000000000 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001\n1 1000000100\n1 1000000000\n1 1000000000\n1 1000000000\n2 1010000000\n1 1000000000\n1 1001000000\n1 1000000000\n1 1000000000\n1 1000000000\n", "10\n2 8 6 1 2 7 6 9 2 8\n4 9 4 9 5 2 9 3 7 3\n1 8\n2 16\n3 6\n4 10\n4 1\n6 4\n7 3\n8 2\n9 2\n", "10\n2 16 6 1 2 7 6 9 2 8\n4 9 4 9 5 2 9 3 7 3\n1 8\n2 16\n3 6\n4 10\n4 1\n6 4\n7 3\n8 2\n9 2\n", "10\n2 16 6 1 2 7 6 17 2 8\n4 9 4 9 5 2 9 3 7 3\n1 8\n2 16\n3 6\n4 10\n4 1\n6 4\n7 3\n8 2\n9 2\n", "10\n2 16 6 1 2 7 6 17 2 8\n4 9 4 9 5 2 9 3 7 3\n1 8\n2 12\n3 6\n4 10\n4 1\n6 4\n7 3\n8 2\n9 2\n", "10\n2 16 6 1 2 7 6 17 2 8\n4 9 4 9 5 2 9 3 7 3\n1 8\n2 12\n3 6\n1 10\n4 1\n6 4\n7 3\n8 2\n9 2\n", "10\n2 16 6 1 2 7 6 17 2 16\n4 9 4 9 5 2 9 3 7 3\n1 8\n2 12\n3 6\n1 10\n4 1\n6 4\n7 3\n8 2\n9 2\n", "5\n27468 7465 74275 40573 40155\n112071 76270 244461 264202 132397\n1 777133331\n2 107454154\n3 499695208\n4 792720519\n", "5\n78188 61083 79021 70050 65217\n115040 5149 128449 98357 36580\n1 451393770\n2 574046602\n3 590130784\n4 112514248\n", "7\n1 1 1 1 1 1 1\n1 3000000000 3000000000 3000000000 1000000000 1000000000 1000000000\n1 1000000000\n1 1000000000\n1 1000010000\n1 1000000000\n1 1000000000\n1 1000000000\n", "10\n2 8 6 1 2 7 6 9 2 8\n4 9 4 3 5 2 6 3 7 3\n1 8\n2 8\n3 8\n4 10\n5 1\n6 4\n7 3\n8 10\n9 2\n", "5\n2 1 1 2 3\n1 2 0 2 1\n1 2\n1 3\n2 4\n1 4\n", "5\n78188 56310 33094 70050 65217\n115040 7476 128449 98357 36580\n1 451393770\n2 574046602\n3 590130784\n4 112514248\n", "7\n1 1 1 1 1 1 1\n1 1235445348 3000000000 3000000000 1000000000 1000000000 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n2 1000000000\n1 1000000000\n", "10\n2 8 6 1 2 7 6 9 2 8\n4 9 4 3 5 3 9 3 7 3\n1 8\n2 8\n3 8\n4 10\n5 1\n6 4\n7 3\n8 1\n9 2\n", "11\n1 1 1 1 1 1 1 1 1 1 1\n1 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001 1000000001\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1001000000\n2 1000000000\n1 1000000000\n1 1000000000\n", "5\n2 1 1 2 3\n1 2 3 2 1\n1 3\n1 3\n2 4\n1 4\n", "5\n78188 56310 33094 70050 65217\n115040 5149 242473 98357 36580\n1 451393770\n2 574046602\n1 590130784\n4 112514248\n", "7\n1 1 1 1 1 1 1\n1 3000000000 3000000000 3000000000 1000000000 1000000000 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000001\n2 1100000000\n1 1000000000\n", "10\n2 8 6 1 2 7 5 9 4 8\n4 9 4 3 5 2 9 3 7 3\n1 8\n2 8\n3 8\n4 10\n5 1\n6 4\n7 3\n8 1\n9 2\n"], "output": ["NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n"]}, "short_description": "1. One-sentence summary:  \nDetermine whether, in a rooted tree where each node has an initial net value (positive or negative) and negative values can be \u201camplified\u201d when passed to the parent via edge-specific multipliers, the root\u2019s final accumulated value remains nonnegative.\n\n2. Core algorithmic approach:  \nA post-order tree-DP (bottom-up traversal) that aggregates each child\u2019s net contribution into its parent, applying a multiplier when the child\u2019s contribution is negative.\n\n3. Reusable components:  \n- Tree DP traversal pattern: processing nodes in reverse topological order (from leaves to root).  \n- Value aggregation with conditional transformation: adding raw values for nonnegative contributions, and scaled (multiplied) values for negative ones.  \n- Overflow or bound checking to abort early if an aggregate exceeds a safe limit."}
{"name": "1056_D. Decorate Apple Tree", "description": "There is one apple tree in Arkady's garden. It can be represented as a set of junctions connected with branches so that there is only one way to reach any junctions from any other one using branches. The junctions are enumerated from 1 to n, the junction 1 is called the root.\n\nA subtree of a junction v is a set of junctions u such that the path from u to the root must pass through v. Note that v itself is included in a subtree of v.\n\nA leaf is such a junction that its subtree contains exactly one junction.\n\nThe New Year is coming, so Arkady wants to decorate the tree. He will put a light bulb of some color on each leaf junction and then count the number happy junctions. A happy junction is such a junction t that all light bulbs in the subtree of t have different colors.\n\nArkady is interested in the following question: for each k from 1 to n, what is the minimum number of different colors needed to make the number of happy junctions be greater than or equal to k?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of junctions in the tree.\n\nThe second line contains n - 1 integers p_2, p_3, ..., p_n (1 \u2264 p_i < i), where p_i means there is a branch between junctions i and p_i. It is guaranteed that this set of branches forms a tree.\n\nOutput\n\nOutput n integers. The i-th of them should be the minimum number of colors needed to make the number of happy junctions be at least i.\n\nExamples\n\nInput\n\n\n3\n1 1\n\n\nOutput\n\n\n1 1 2 \n\n\nInput\n\n\n5\n1 1 3 3\n\n\nOutput\n\n\n1 1 1 2 3 \n\nNote\n\nIn the first example for k = 1 and k = 2 we can use only one color: the junctions 2 and 3 will be happy. For k = 3 you have to put the bulbs of different colors to make all the junctions happy.\n\nIn the second example for k = 4 you can, for example, put the bulbs of color 1 in junctions 2 and 4, and a bulb of color 2 into junction 5. The happy junctions are the ones with indices 2, 3, 4 and 5 then.", "solution": "n=int(input())\np=[0,0]+list(map(int,input().split()))#tomamos la entrada\nd=[0]*(n+1)#aki vamos a contar la cantidad d colores q necesita cada union\nfor i in range(n,1,-1):#empezamos x las hojas hasta llegar a la raiz\n    if d[i]==0:#si no estas visitado eres una hoja => solo necesitas un color\n        d[i]=1\n    d[p[i]]+=d[i]#si no necesitas tantos colores como la cantidad q necesitan tus hijos\nif n==1:#si la entrada es 1 solo necesitas un color\n    d[1]=1\nd=d[1:]#quitamos el vertice 0(al final todo empieza en 1-n)\nd.sort()#ordenamos para dar la cantidad d colores en orden d los vertices(o sea, de k)\nprint(*d)", "difficulty": 10, "public_tests": {"input": ["5\n1 1 3 3\n", "3\n1 1\n"], "output": ["1 1 1 2 3 \n", "1 1 2 \n"]}, "private_tests": {"input": ["2\n1\n", "10\n1 2 2 3 3 4 4 5 5\n", "10\n1 1 1 1 1 1 1 1 1\n", "1\n\n", "10\n1 1 2 4 2 4 1 8 8\n"], "output": ["1 1 \n", "1 1 1 1 1 2 2 3 5 5 \n", "1 1 1 1 1 1 1 1 1 9 \n", "1 \n", "1 1 1 1 1 1 2 2 3 6\n"]}, "generated_tests": {"input": ["10\n1 2 2 3 4 4 4 5 5\n", "10\n1 1 1 1 1 1 1 1 2\n", "3\n1 2\n", "10\n1 2 2 3 4 4 1 5 5\n", "10\n1 2 1 1 1 1 1 1 2\n", "10\n1 2 2 2 3 4 4 5 5\n", "10\n1 2 1 1 1 1 1 2 2\n", "10\n1 2 2 1 3 4 4 5 5\n", "10\n1 2 1 1 1 1 1 3 2\n", "10\n1 2 2 1 1 4 4 5 5\n", "5\n1 2 3 3\n", "10\n1 2 2 3 5 4 4 5 5\n", "10\n1 2 2 3 4 4 1 5 3\n", "10\n1 2 2 2 3 4 4 5 1\n", "10\n1 2 1 1 2 1 1 3 2\n", "10\n1 2 2 3 2 4 4 5 5\n", "10\n1 2 2 3 4 4 1 1 3\n", "10\n1 2 2 2 3 4 4 5 2\n", "10\n1 1 2 3 4 4 1 1 3\n", "10\n1 2 2 1 2 1 1 6 2\n", "10\n1 2 2 3 4 4 2 1 3\n", "10\n1 2 2 3 3 4 4 5 8\n", "10\n1 1 2 4 3 4 1 8 8\n", "5\n1 1 3 2\n", "10\n1 2 2 3 4 4 4 5 1\n", "10\n1 2 2 3 4 4 1 5 7\n", "10\n1 2 1 1 1 1 1 3 3\n", "10\n1 2 2 1 1 4 4 6 5\n", "10\n1 2 2 2 3 6 4 5 1\n", "10\n1 2 2 2 2 1 1 6 2\n", "10\n1 2 3 3 4 4 4 5 1\n", "10\n1 2 1 1 2 3 1 6 2\n", "10\n1 2 3 3 4 4 1 5 1\n", "10\n1 2 3 4 1 1 1 6 2\n", "10\n1 2 3 3 4 1 1 5 1\n", "10\n1 2 2 3 5 4 3 5 5\n", "5\n1 1 3 1\n", "10\n1 2 1 1 1 1 1 1 4\n", "10\n1 2 2 3 5 4 5 5 5\n", "10\n1 2 2 2 3 6 4 5 2\n", "10\n1 1 1 1 1 1 2 1 1\n", "10\n1 1 2 1 1 1 2 1 1\n", "10\n1 2 2 1 3 4 4 5 2\n", "10\n1 2 1 1 2 1 1 6 2\n", "10\n1 2 2 1 3 4 4 5 3\n", "10\n1 2 2 2 3 4 4 5 3\n", "10\n1 1 1 1 1 2 1 1 1\n", "10\n1 1 2 1 1 1 1 1 2\n", "10\n1 2 1 3 4 4 1 1 3\n", "10\n1 2 1 1 2 2 1 6 2\n", "10\n1 2 2 1 3 4 4 5 8\n", "10\n1 1 1 1 1 2 1 1 2\n", "10\n1 1 2 2 1 1 1 1 2\n", "10\n1 2 2 4 4 4 1 5 7\n", "10\n1 2 2 2 1 4 4 6 5\n", "10\n1 2 2 2 1 1 1 6 2\n", "10\n1 1 2 2 1 1 1 1 3\n", "10\n1 2 3 2 1 1 1 6 2\n", "10\n1 2 3 3 4 5 1 5 1\n", "10\n1 1 3 2 1 1 1 1 3\n", "10\n1 1 2 1 1 2 1 1 2\n", "5\n1 2 3 1\n", "10\n1 2 2 2 3 5 4 5 1\n", "10\n1 1 3 1 1 1 2 1 1\n", "10\n1 2 1 1 2 1 1 5 2\n"], "output": ["1 1 1 1 1 2 2 3 5 5\n", "1 1 1 1 1 1 1 1 1 8\n", "1 1 1\n", "1 1 1 1 1 2 2 2 4 5\n", "1 1 1 1 1 1 1 1 2 8\n", "1 1 1 1 1 1 2 2 5 5\n", "1 1 1 1 1 1 1 1 3 8\n", "1 1 1 1 1 1 2 2 3 5\n", "1 1 1 1 1 1 1 1 2 7\n", "1 1 1 1 1 1 2 2 3 6\n", "1 1 2 2 2\n", "1 1 1 1 1 2 3 3 5 5\n", "1 1 1 1 1 1 2 2 4 5\n", "1 1 1 1 1 1 1 2 4 5\n", "1 1 1 1 1 1 1 1 3 7\n", "1 1 1 1 1 2 2 2 5 5\n", "1 1 1 1 1 1 2 2 4 6\n", "1 1 1 1 1 1 1 2 5 5\n", "1 1 1 1 1 1 2 2 2 6\n", "1 1 1 1 1 1 1 1 4 7\n", "1 1 1 1 1 1 2 2 5 6\n", "1 1 1 1 1 1 2 2 4 4\n", "1 1 1 1 1 1 2 2 2 5\n", "1 1 1 1 2\n", "1 1 1 1 1 1 1 3 4 5\n", "1 1 1 1 1 1 1 2 3 4\n", "1 1 1 1 1 1 1 2 2 7\n", "1 1 1 1 1 1 1 2 3 5\n", "1 1 1 1 1 1 1 1 3 4\n", "1 1 1 1 1 1 1 1 5 7\n", "1 1 1 1 1 1 3 4 4 5\n", "1 1 1 1 1 1 1 1 3 6\n", "1 1 1 1 1 1 2 3 3 5\n", "1 1 1 1 1 1 1 1 2 5\n", "1 1 1 1 1 1 1 2 2 5\n", "1 1 1 1 1 1 3 4 5 5\n", "1 1 1 1 3\n", "1 1 1 1 1 1 1 1 1 7\n", "1 1 1 1 1 1 4 4 5 5\n", "1 1 1 1 1 1 1 1 4 4\n", "1 1 1 1 1 1 1 1 1 8\n", "1 1 1 1 1 1 1 1 2 8\n", "1 1 1 1 1 1 1 2 4 5\n", "1 1 1 1 1 1 1 1 3 7\n", "1 1 1 1 1 1 2 2 4 5\n", "1 1 1 1 1 1 2 2 5 5\n", "1 1 1 1 1 1 1 1 1 8\n", "1 1 1 1 1 1 1 1 2 8\n", "1 1 1 1 1 1 2 2 2 6\n", "1 1 1 1 1 1 1 1 4 7\n", "1 1 1 1 1 1 1 2 3 4\n", "1 1 1 1 1 1 1 1 2 8\n", "1 1 1 1 1 1 1 1 3 8\n", "1 1 1 1 1 1 1 3 4 5\n", "1 1 1 1 1 1 1 2 4 5\n", "1 1 1 1 1 1 1 1 4 7\n", "1 1 1 1 1 1 1 1 2 7\n", "1 1 1 1 1 1 1 1 3 6\n", "1 1 1 1 1 1 2 3 3 5\n", "1 1 1 1 1 1 1 1 2 7\n", "1 1 1 1 1 1 1 1 3 8\n", "1 1 1 1 2\n", "1 1 1 1 1 1 1 2 4 5\n", "1 1 1 1 1 1 1 1 1 7\n", "1 1 1 1 1 1 1 1 3 7\n"]}, "short_description": "1. One-sentence summary:\nCompute for each node in a rooted tree the total contribution coming from its descendants (counting leaves as 1), by propagating values bottom\u2010up, and then output those values in sorted order.\n\n2. Core algorithmic approach:\nA tree\u2010DP (post-order traversal) over a parent\u2010pointer representation, where each leaf is initialized to 1 and each internal node accumulates the sums of its children.\n\n3. Reusable components:\n- Parent\u2010pointer to children aggregation: converting a parent array into child lists or directly summing child contributions by iterating nodes in reverse index order.\n- Bottom\u2010up DP pattern: initializing leaf values and propagating them upward to compute subtree aggregates.\n- Result post-processing: collecting per-node values into a list for sorting or other global queries."}
{"name": "735_E. Ostap and Tree", "description": "Ostap already settled down in Rio de Janiero suburb and started to grow a tree in his garden. Recall that a tree is a connected undirected acyclic graph. \n\nOstap's tree now has n vertices. He wants to paint some vertices of the tree black such that from any vertex u there is at least one black vertex v at distance no more than k. Distance between two vertices of the tree is the minimum possible number of edges of the path between them.\n\nAs this number of ways to paint the tree can be large, Ostap wants you to compute it modulo 109 + 7. Two ways to paint the tree are considered different if there exists a vertex that is painted black in one way and is not painted in the other one.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 100, 0 \u2264 k \u2264 min(20, n - 1)) \u2014 the number of vertices in Ostap's tree and the maximum allowed distance to the nearest black vertex. Don't miss the unusual constraint for k.\n\nEach of the next n - 1 lines contain two integers ui and vi (1 \u2264 ui, vi \u2264 n) \u2014 indices of vertices, connected by the i-th edge. It's guaranteed that given graph is a tree.\n\nOutput\n\nPrint one integer \u2014 the remainder of division of the number of ways to paint the tree by 1 000 000 007 (109 + 7).\n\nExamples\n\nInput\n\n2 0\n1 2\n\n\nOutput\n\n1\n\n\nInput\n\n2 1\n1 2\n\n\nOutput\n\n3\n\n\nInput\n\n4 1\n1 2\n2 3\n3 4\n\n\nOutput\n\n9\n\n\nInput\n\n7 2\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n\n\nOutput\n\n91\n\nNote\n\nIn the first sample, Ostap has to paint both vertices black.\n\nIn the second sample, it is enough to paint only one of two vertices, thus the answer is 3: Ostap can paint only vertex 1, only vertex 2, vertices 1 and 2 both.\n\nIn the third sample, the valid ways to paint vertices are: {1, 3}, {1, 4}, {2, 3}, {2, 4}, {1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}, {1, 2, 3, 4}.", "solution": "def main():\n    n, k = map(int, input().split())\n    cnt = [[[0] * 21 for _ in (0, 1)] for _ in range(n + 1)]\n    edges, mod = [[] for _ in range(n + 1)], 1000000007\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        edges[u].append(v)\n        edges[v].append(u)\n\n    def dfs(u, f):\n        cnt[u][0][0] = cnt[u][1][k] = 1\n        for v in edges[u]:\n            if v != f:\n                dfs(v, u)\n                tmp0, tmp1 = [0] * 21, [0] * 21\n                for i in range(k + 1):\n                    for j in range(k + 1):\n                        if i != k:\n                            tmp0[j if i < j else i + 1] += cnt[u][0][j] * cnt[v][0][i]\n                        if i < j:\n                            tmp1[j] += cnt[u][1][j] * cnt[v][0][i]\n                        elif i != k:\n                            tmp0[i + 1] += cnt[u][1][j] * cnt[v][0][i]\n                        if i > j:\n                            tmp1[i - 1] += cnt[u][0][j] * cnt[v][1][i]\n                        else:\n                            tmp0[j] += cnt[u][0][j] * cnt[v][1][i]\n                        tmp1[max(i - 1, j)] += cnt[u][1][j] * cnt[v][1][i]\n                for i in range(21):\n                    tmp0[i] %= mod\n                    tmp1[i] %= mod\n                cnt[u][0] = tmp0\n                cnt[u][1] = tmp1\n\n    dfs(1, 1)\n    print(sum(cnt[1][1][j] for j in range(k + 1)) % mod)\n\n\nif __name__ == '__main__':\n    main()\n", "difficulty": 11, "public_tests": {"input": ["7 2\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n", "4 1\n1 2\n2 3\n3 4\n", "2 0\n1 2\n", "2 1\n1 2\n"], "output": ["91\n", "9\n", "1\n", "3\n"]}, "private_tests": {"input": ["10 1\n6 3\n1 5\n10 7\n4 10\n2 4\n5 9\n8 1\n1 3\n7 3\n", "10 0\n9 10\n5 1\n10 5\n8 6\n8 2\n7 8\n8 1\n8 3\n4 3\n", "10 4\n4 6\n3 5\n7 3\n4 9\n10 2\n1 9\n4 8\n10 3\n8 7\n", "10 1\n6 8\n1 9\n1 5\n6 10\n3 9\n9 4\n10 9\n2 4\n7 4\n", "10 4\n9 6\n10 8\n9 2\n7 10\n3 7\n7 9\n10 4\n1 7\n9 5\n", "10 9\n1 2\n3 1\n6 10\n6 1\n10 9\n4 5\n7 1\n5 6\n8 5\n", "5 1\n1 2\n4 3\n5 3\n2 3\n", "63 5\n2 31\n5 41\n15 20\n38 12\n54 7\n31 54\n24 47\n13 19\n54 39\n57 50\n25 18\n59 11\n47 30\n60 49\n13 24\n7 11\n16 4\n28 59\n43 36\n3 33\n10 32\n40 48\n63 35\n49 56\n29 20\n44 18\n7 24\n49 18\n36 11\n9 13\n58 23\n34 47\n3 51\n5 61\n1 16\n26 6\n37 57\n26 8\n48 52\n25 43\n26 28\n22 39\n14 31\n44 21\n5 17\n33 23\n48 41\n42 44\n12 51\n59 50\n12 62\n25 41\n53 23\n16 28\n51 32\n63 27\n55 57\n33 20\n45 39\n32 46\n50 63\n3 43\n", "10 5\n6 4\n4 1\n7 5\n8 7\n2 6\n3 6\n8 6\n10 3\n4 9\n", "10 3\n2 5\n4 8\n4 5\n6 8\n4 1\n5 10\n7 9\n4 7\n3 9\n", "10 2\n1 4\n10 9\n1 5\n3 10\n2 10\n5 8\n6 1\n2 7\n6 10\n", "64 3\n13 10\n60 54\n23 35\n4 41\n59 18\n41 36\n48 13\n64 8\n30 19\n53 3\n34 11\n24 27\n21 25\n5 55\n51 11\n3 45\n24 57\n47 38\n55 26\n8 20\n29 42\n44 3\n7 15\n9 1\n17 4\n41 9\n15 29\n60 13\n31 36\n53 52\n59 14\n12 52\n24 31\n47 28\n29 23\n2 49\n30 44\n28 31\n25 22\n9 58\n64 11\n45 35\n59 44\n62 8\n49 53\n32 48\n36 45\n4 56\n25 42\n42 33\n23 10\n48 39\n37 28\n10 64\n6 7\n30 63\n33 50\n40 7\n33 16\n49 46\n60 61\n52 43\n15 55\n", "10 2\n7 10\n2 1\n6 5\n10 6\n3 1\n10 4\n3 4\n9 3\n8 4\n", "10 0\n5 6\n4 3\n8 5\n3 7\n10 4\n1 2\n2 8\n10 1\n7 9\n", "1 0\n"], "output": ["279\n", "1\n", "993\n", "255\n", "1023\n", "1023\n", "15\n", "560665636\n", "1023\n", "945\n", "743\n", "257869945\n", "705\n", "1\n", "1\n"]}, "generated_tests": {"input": ["10 1\n6 8\n1 9\n1 5\n6 10\n3 9\n9 4\n10 7\n2 4\n7 4\n", "10 4\n9 6\n10 8\n9 2\n7 10\n3 3\n7 9\n10 4\n1 7\n9 5\n", "10 1\n6 8\n1 9\n1 5\n6 10\n3 9\n9 2\n10 7\n2 4\n7 4\n", "63 5\n2 31\n5 41\n15 20\n38 4\n54 7\n31 54\n24 47\n13 19\n54 39\n57 50\n25 18\n59 11\n47 30\n60 49\n13 24\n7 11\n16 4\n28 59\n43 36\n3 33\n10 32\n40 48\n63 35\n49 56\n29 20\n44 18\n7 24\n49 18\n36 11\n9 13\n58 23\n34 47\n3 51\n5 61\n1 16\n26 6\n37 57\n26 8\n48 52\n25 43\n26 28\n22 39\n14 31\n44 21\n5 17\n33 23\n48 41\n42 44\n12 51\n59 50\n12 62\n25 41\n53 23\n16 28\n51 32\n63 27\n55 57\n33 20\n45 39\n32 46\n50 63\n3 43\n", "10 5\n6 4\n6 1\n7 5\n8 7\n2 6\n3 6\n8 6\n10 3\n4 9\n", "64 3\n13 10\n60 54\n23 35\n4 41\n59 18\n41 36\n48 13\n64 8\n30 19\n53 3\n34 11\n24 27\n21 25\n5 55\n51 11\n3 45\n24 57\n47 38\n55 26\n5 20\n29 42\n44 3\n7 15\n9 1\n17 4\n41 9\n15 29\n60 13\n31 36\n53 52\n59 14\n12 52\n24 31\n47 28\n29 23\n2 49\n30 44\n28 31\n25 22\n9 58\n64 11\n45 35\n59 44\n62 8\n49 53\n32 48\n36 45\n4 56\n25 42\n42 33\n23 10\n48 39\n37 28\n10 64\n6 7\n30 63\n33 50\n40 7\n33 16\n49 46\n60 61\n52 43\n15 55\n", "1 1\n", "4 2\n1 2\n2 3\n3 4\n", "10 1\n6 8\n1 9\n1 5\n6 10\n3 9\n9 4\n10 5\n2 4\n7 4\n", "10 1\n6 8\n2 9\n1 5\n6 10\n3 9\n9 4\n10 5\n2 4\n7 4\n", "10 1\n5 8\n2 9\n1 5\n6 10\n3 9\n9 4\n10 5\n2 4\n7 4\n", "10 1\n6 8\n1 9\n1 5\n6 10\n3 9\n9 4\n10 9\n2 2\n7 4\n", "10 4\n9 6\n10 8\n9 2\n7 10\n3 7\n1 9\n10 4\n1 7\n9 5\n", "63 5\n2 31\n5 41\n15 20\n38 12\n54 7\n31 54\n24 47\n13 19\n54 39\n57 50\n25 18\n59 11\n47 30\n60 49\n13 24\n7 11\n16 4\n28 59\n43 36\n3 33\n10 32\n40 48\n63 35\n49 56\n29 20\n44 18\n7 24\n49 18\n36 11\n9 13\n58 23\n34 47\n3 51\n5 61\n1 16\n26 6\n37 57\n26 8\n48 52\n25 43\n26 28\n22 39\n14 31\n7 21\n5 17\n33 23\n48 41\n42 44\n12 51\n59 50\n12 62\n25 41\n53 23\n16 28\n51 32\n63 27\n55 57\n33 20\n45 39\n32 46\n50 63\n3 43\n", "10 1\n7 10\n2 1\n6 5\n10 6\n3 1\n10 4\n3 4\n9 3\n8 4\n", "7 2\n2 2\n2 3\n1 4\n4 5\n1 6\n6 7\n", "63 5\n2 31\n5 41\n15 20\n38 4\n54 7\n31 54\n24 47\n13 19\n54 39\n57 50\n25 18\n59 11\n47 30\n60 49\n13 24\n7 11\n16 4\n28 59\n43 36\n3 33\n10 32\n40 48\n63 35\n49 56\n29 20\n44 18\n7 24\n49 18\n36 11\n9 13\n58 23\n34 47\n3 51\n5 61\n1 16\n26 6\n37 57\n26 8\n48 52\n25 43\n26 28\n22 39\n14 31\n44 21\n6 17\n33 23\n48 41\n42 44\n12 51\n59 50\n12 62\n25 41\n53 23\n16 28\n51 32\n63 27\n55 57\n33 20\n45 39\n32 46\n50 63\n3 43\n", "10 5\n6 4\n8 1\n7 5\n8 7\n2 6\n3 6\n8 9\n10 3\n4 9\n", "10 1\n5 8\n2 9\n1 5\n6 10\n3 9\n9 6\n10 5\n2 4\n7 4\n", "10 5\n6 4\n4 1\n7 5\n3 7\n2 6\n3 6\n8 5\n10 3\n4 9\n", "10 2\n1 4\n10 9\n1 5\n3 10\n1 10\n5 8\n6 2\n2 7\n6 10\n", "10 1\n7 10\n2 2\n6 5\n10 6\n3 1\n10 4\n3 4\n9 3\n8 4\n", "63 5\n2 31\n5 41\n15 20\n38 4\n54 7\n31 54\n24 47\n13 19\n54 39\n57 50\n25 18\n59 11\n47 30\n60 49\n13 24\n7 11\n16 4\n28 59\n43 36\n3 33\n10 32\n40 48\n63 35\n49 56\n29 20\n44 18\n7 24\n49 18\n36 11\n9 13\n58 23\n34 47\n3 51\n5 61\n1 16\n26 6\n37 57\n26 8\n48 52\n25 43\n26 28\n22 39\n14 31\n44 21\n6 17\n33 23\n48 41\n42 57\n12 51\n59 50\n12 62\n25 41\n53 23\n16 28\n51 32\n63 27\n55 57\n33 20\n45 39\n32 46\n50 63\n3 43\n", "10 1\n6 1\n1 5\n10 7\n4 10\n2 4\n5 9\n8 1\n1 3\n7 3\n", "10 2\n1 2\n3 1\n6 10\n6 1\n10 9\n4 5\n7 1\n5 6\n8 5\n", "63 5\n2 31\n5 41\n15 20\n38 12\n54 7\n31 54\n24 47\n13 19\n54 39\n57 50\n25 18\n59 11\n47 30\n60 49\n13 24\n7 11\n16 4\n28 59\n43 36\n3 33\n10 32\n40 48\n63 35\n49 56\n29 20\n44 18\n7 24\n49 18\n36 11\n9 13\n58 23\n34 47\n3 51\n5 61\n1 16\n26 6\n37 57\n35 8\n48 52\n25 43\n26 28\n22 39\n14 31\n44 21\n5 17\n33 23\n48 41\n42 44\n12 51\n59 50\n12 62\n25 41\n53 23\n16 28\n51 32\n63 27\n55 57\n33 20\n45 39\n32 46\n50 63\n3 43\n", "10 3\n2 5\n7 8\n4 5\n6 8\n4 1\n5 10\n7 9\n4 7\n3 9\n", "10 2\n1 4\n10 9\n1 5\n3 10\n2 10\n5 8\n6 1\n4 7\n6 10\n", "10 5\n6 4\n8 1\n7 5\n8 7\n2 6\n3 6\n8 6\n10 3\n4 9\n", "10 5\n6 4\n4 1\n7 5\n3 7\n2 6\n3 6\n8 6\n10 3\n4 9\n", "10 2\n1 4\n10 9\n1 5\n3 10\n2 10\n5 8\n6 2\n2 7\n6 10\n", "10 0\n5 6\n4 3\n8 5\n3 7\n10 7\n1 2\n2 8\n10 1\n7 9\n", "10 4\n9 6\n10 8\n9 2\n9 10\n3 3\n7 9\n10 4\n1 7\n9 5\n", "10 1\n6 8\n1 9\n1 5\n6 10\n3 9\n9 2\n10 7\n2 4\n7 2\n", "10 1\n6 8\n2 9\n1 5\n6 10\n3 9\n9 4\n10 5\n1 4\n7 4\n", "10 4\n9 6\n5 8\n9 2\n9 10\n3 3\n7 9\n10 4\n1 7\n9 5\n", "10 1\n7 10\n3 2\n6 5\n10 6\n3 1\n10 4\n3 4\n9 3\n8 4\n", "10 4\n4 6\n3 5\n7 3\n4 9\n10 2\n1 7\n4 8\n10 3\n8 7\n", "10 1\n6 8\n1 9\n1 5\n6 10\n3 9\n9 4\n10 9\n2 4\n7 8\n"], "output": ["279\n", "511\n", "315\n", "799909295\n", "1023\n", "380245868\n", "1\n", "13\n", "285\n", "17\n", "15\n", "153\n", "1013\n", "987403004\n", "243\n", "25\n", "375916732\n", "1009\n", "303\n", "1019\n", "741\n", "135\n", "804941687\n", "291\n", "827\n", "406056446\n", "963\n", "775\n", "1023\n", "1023\n", "13\n", "1\n", "511\n", "279\n", "285\n", "511\n", "243\n", "1009\n", "279\n"]}, "short_description": "1. One-sentence summary:  \n   The code counts the number of valid configurations on a rooted tree under a distance-bounded constraint by propagating and merging per-node state vectors via a post-order traversal.  \n\n2. Core algorithmic approach:  \n   Tree dynamic programming (DFS-based DP) with state-vector merging, effectively performing a convolution of child contributions under modular arithmetic.  \n\n3. Reusable components:  \n   - DFS traversal template for rooted trees with a parent-avoiding parameter.  \n   - Merging two fixed-length DP tables via nested loops and index transformations (convolution-style merge).  \n   - Modular accumulation pattern to keep large counts within a prime modulus."}
{"name": "1153_D. Serval and Rooted Tree", "description": "Now Serval is a junior high school student in Japari Middle School, and he is still thrilled on math as before. \n\nAs a talented boy in mathematics, he likes to play with numbers. This time, he wants to play with numbers on a rooted tree.\n\nA tree is a connected graph without cycles. A rooted tree has a special vertex called the root. A parent of a node v is the last different from v vertex on the path from the root to the vertex v. Children of vertex v are all nodes for which v is the parent. A vertex is a leaf if it has no children.\n\nThe rooted tree Serval owns has n nodes, node 1 is the root. Serval will write some numbers into all nodes of the tree. However, there are some restrictions. Each of the nodes except leaves has an operation max or min written in it, indicating that the number in this node should be equal to the maximum or minimum of all the numbers in its sons, respectively. \n\nAssume that there are k leaves in the tree. Serval wants to put integers 1, 2, \u2026, k to the k leaves (each number should be used exactly once). He loves large numbers, so he wants to maximize the number in the root. As his best friend, can you help him?\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 3\u22c5 10^5), the size of the tree.\n\nThe second line contains n integers, the i-th of them represents the operation in the node i. 0 represents min and 1 represents max. If the node is a leaf, there is still a number of 0 or 1, but you can ignore it.\n\nThe third line contains n-1 integers f_2, f_3, \u2026, f_n (1 \u2264 f_i \u2264 i-1), where f_i represents the parent of the node i.\n\nOutput\n\nOutput one integer \u2014 the maximum possible number in the root of the tree.\n\nExamples\n\nInput\n\n\n6\n1 0 1 1 0 1\n1 2 2 2 2\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n5\n1 0 1 0 1\n1 1 1 1\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n8\n1 0 0 1 0 1 1 0\n1 1 2 2 3 3 3\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n9\n1 1 0 0 1 0 1 0 1\n1 1 2 2 3 3 4 4\n\n\nOutput\n\n\n5\n\nNote\n\nPictures below explain the examples. The numbers written in the middle of the nodes are their indices, and the numbers written on the top are the numbers written in the nodes.\n\nIn the first example, no matter how you arrange the numbers, the answer is 1.\n\n<image>\n\nIn the second example, no matter how you arrange the numbers, the answer is 4.\n\n<image>\n\nIn the third example, one of the best solution to achieve 4 is to arrange 4 and 5 to nodes 4 and 5.\n\n<image>\n\nIn the fourth example, the best solution is to arrange 5 to node 5.\n\n<image>", "solution": "R = lambda: map(int, input().split())\nn = int(input())\nfcs = [0] + list(R())\nps = [0, 0] + list(R())\ncs = [1] * (n + 1)\nfor i in range(2, n + 1):\n    cs[ps[i]] = 0\nnc = sum(cs) - 1\nfor i in range(n, 1, -1):\n    if fcs[ps[i]] == 0:\n        cs[ps[i]] += cs[i]\n    else:\n        if not cs[ps[i]]:\n            cs[ps[i]] = cs[i]\n        else:\n            cs[ps[i]] = min(cs[ps[i]], cs[i])\nprint(nc - cs[1] + 1)", "difficulty": 10, "public_tests": {"input": ["6\n1 0 1 1 0 1\n1 2 2 2 2\n", "9\n1 1 0 0 1 0 1 0 1\n1 1 2 2 3 3 4 4\n", "5\n1 0 1 0 1\n1 1 1 1\n", "8\n1 0 0 1 0 1 1 0\n1 1 2 2 3 3 3\n"], "output": ["1", "5", "4", "4"]}, "private_tests": {"input": ["2\n1 0\n1\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n"], "output": ["1", "42"]}, "generated_tests": {"input": ["100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "6\n1 0 1 1 0 1\n1 2 2 2 3\n", "9\n1 1 0 0 1 0 1 0 1\n1 1 2 4 3 3 4 4\n", "8\n1 0 1 1 0 1 1 0\n1 1 2 2 3 3 3\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 15 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "6\n1 0 1 1 0 1\n1 2 1 2 3\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 16 65\n", "9\n1 1 0 1 1 0 1 0 1\n1 1 2 4 3 3 4 4\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 15 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 41 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "6\n0 0 1 1 0 1\n1 2 1 2 3\n", "9\n1 1 0 1 1 0 1 0 0\n1 1 2 4 3 3 4 4\n", "6\n0 0 1 1 1 1\n1 2 1 2 3\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "6\n1 0 1 1 1 1\n1 2 2 2 2\n", "8\n1 0 0 1 0 1 1 0\n1 1 2 2 3 3 4\n", "9\n0 1 0 0 1 0 1 0 1\n1 1 2 4 3 3 4 4\n", "8\n1 0 1 1 0 1 1 0\n1 1 2 2 3 3 1\n", "9\n1 1 0 1 0 0 1 0 1\n1 1 2 4 3 3 4 4\n", "6\n1 0 1 1 1 1\n1 2 1 2 3\n", "9\n1 1 0 1 1 0 1 0 0\n1 1 2 4 1 3 4 4\n", "8\n1 0 1 1 0 1 1 0\n1 1 2 2 3 3 4\n", "8\n1 0 1 1 0 1 1 1\n1 1 2 2 3 3 1\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "8\n1 0 1 1 0 1 1 0\n1 1 2 2 3 2 4\n", "8\n1 0 1 1 0 1 1 1\n1 1 2 3 3 3 1\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "8\n1 0 1 1 0 1 1 0\n1 1 2 2 3 1 4\n", "8\n1 0 1 1 0 1 0 1\n1 1 2 3 3 3 1\n", "8\n1 0 1 1 0 1 0 1\n1 1 2 3 2 3 1\n", "2\n0 0\n1\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 12 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "9\n1 1 0 0 0 0 1 0 1\n1 1 2 2 3 3 4 4\n", "5\n1 0 0 0 1\n1 1 1 1\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 17 16 43 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "9\n1 1 0 0 1 1 1 0 1\n1 1 2 4 3 3 4 4\n", "8\n1 0 1 1 1 1 1 0\n1 1 2 2 3 3 3\n", "9\n1 1 0 1 1 0 1 0 1\n1 1 2 4 4 3 4 4\n", "6\n0 0 1 1 0 1\n1 2 1 2 1\n", "6\n0 0 1 1 1 1\n1 2 2 2 3\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 1 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "8\n1 0 0 1 0 0 1 0\n1 1 2 2 3 3 4\n", "9\n1 1 0 1 0 0 1 0 1\n1 1 2 4 3 4 4 4\n", "6\n1 0 1 1 1 1\n1 2 1 1 3\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "8\n1 0 1 1 0 1 1 0\n1 1 2 2 3 3 5\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "8\n1 0 1 1 0 1 1 0\n1 1 2 2 5 2 4\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 12 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 26 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "9\n1 1 0 1 0 0 1 0 1\n1 1 2 2 3 3 4 4\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 1 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 17 16 43 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "8\n1 0 1 1 1 1 1 0\n1 1 2 2 3 5 3\n", "6\n0 0 1 0 0 1\n1 2 1 2 1\n", "6\n0 0 1 0 1 1\n1 2 2 2 3\n", "8\n0 0 0 1 0 0 1 0\n1 1 2 2 3 3 4\n", "6\n1 0 1 1 1 1\n1 2 1 1 5\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 57 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 16 65\n", "100\n0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 12 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 26 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "6\n1 0 1 0 0 1\n1 2 1 2 1\n", "6\n1 1 1 1 1 1\n1 2 1 1 5\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 22 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 3 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 57 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 0 1 0 0 1 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 16 65\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 22 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 36 21 43 3 9 15 81 70 56 65\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 1 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 3 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 57 5 61 72 10 5 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 1 12 8 11 22 8 17 19 5 15 27 14 22 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 10 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 5 5 28 77 61 40 18 36 21 43 3 9 15 81 70 56 65\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 36 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "5\n1 0 1 0 0\n1 1 1 1\n", "8\n1 0 0 1 0 1 1 0\n1 1 2 2 3 1 3\n", "100\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 29 1 14 39 26 22 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\n", "6\n1 0 1 1 0 1\n1 2 1 2 1\n", "9\n1 1 0 1 1 0 1 0 1\n1 1 2 4 3 3 3 4\n"], "output": ["42\n", "1\n", "4\n", "5\n", "41\n", "3\n", "43\n", "44\n", "5\n", "41\n", "1\n", "5\n", "1\n", "42\n", "1\n", "3\n", "1\n", "5\n", "5\n", "3\n", "5\n", "4\n", "5\n", "43\n", "4\n", "5\n", "43\n", "4\n", "5\n", "5\n", "1\n", "42\n", "5\n", "4\n", "41\n", "4\n", "5\n", "5\n", "1\n", "1\n", "42\n", "3\n", "5\n", "3\n", "43\n", "4\n", "43\n", "4\n", "42\n", "5\n", "41\n", "4\n", "1\n", "1\n", "1\n", "3\n", "43\n", "42\n", "44\n", "42\n", "4\n", "3\n", "43\n", "43\n", "44\n", "44\n", "43\n", "42\n", "43\n", "4\n", "5\n", "42\n", "4\n", "5\n"]}, "short_description": "1. One-sentence summary:\nThis code computes a bottom-up aggregation over a rooted tree where each node either sums or takes the minimum of its children\u2019s computed values depending on a flag array.\n\n2. Core algorithmic approach:\nPost-order tree dynamic programming (tree DP) using a parent array and a single pass in reverse node order.\n\n3. Reusable components:\n- Leaf detection via an array of child\u2010present flags initialized to all nodes and cleared when a node appears as a parent.\n- Bottom-up traversal by iterating nodes in reverse numerical/post\u2010order when the tree is given implicitly by parent pointers.\n- Conditional aggregation function that, based on a node\u2019s flag, either sums its children\u2019s values or takes the minimum nonzero child value."}
{"name": "1540_B. Tree Array", "description": "You are given a tree consisting of n nodes. You generate an array from the tree by marking nodes one by one.\n\nInitially, when no nodes are marked, a node is equiprobably chosen and marked from the entire tree. \n\nAfter that, until all nodes are marked, a node is equiprobably chosen and marked from the set of unmarked nodes with at least one edge to a marked node. \n\nIt can be shown that the process marks all nodes in the tree. \n\nThe final array a is the list of the nodes' labels in order of the time each node was marked.\n\nFind the expected number of inversions in the array that is generated by the tree and the aforementioned process.\n\nThe number of inversions in an array a is the number of pairs of indices (i, j) such that i < j and a_i > a_j. For example, the array [4, 1, 3, 2] contains 4 inversions: (1, 2), (1, 3), (1, 4), (3, 4).\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 200) \u2014 the number of nodes in the tree.\n\nThe next n - 1 lines each contains two integers x and y (1 \u2264 x, y \u2264 n; x \u2260 y), denoting an edge between node x and y.\n\nIt's guaranteed that the given edges form a tree.\n\nOutput\n\nOutput the expected number of inversions in the generated array modulo 10^9+7.\n\nFormally, let M = 10^9+7. It can be shown that the answer can be expressed as an irreducible fraction p/q, where p and q are integers and q not \u2261 0 \\pmod{M}. Output the integer equal to p \u22c5 q^{-1} mod M. In other words, output such an integer x that 0 \u2264 x < M and x \u22c5 q \u2261 p \\pmod{M}.\n\nExamples\n\nInput\n\n\n3\n1 2\n1 3\n\n\nOutput\n\n\n166666669\n\n\nInput\n\n\n6\n2 1\n2 3\n6 1\n1 4\n2 5\n\n\nOutput\n\n\n500000009\n\n\nInput\n\n\n5\n1 2\n1 3\n1 4\n2 5\n\n\nOutput\n\n\n500000007\n\nNote\n\nThis is the tree from the first sample:\n\n<image>\n\nFor the first sample, the arrays are almost fixed. If node 2 is chosen initially, then the only possible array is [2, 1, 3] (1 inversion). If node 3 is chosen initially, then the only possible array is [3, 1, 2] (2 inversions). If node 1 is chosen initially, the arrays [1, 2, 3] (0 inversions) and [1, 3, 2] (1 inversion) are the only possibilities and equiprobable. In total, the expected number of inversions is 1/3\u22c5 1 + 1/3 \u22c5 2 + 1/3 \u22c5 (1/2 \u22c5 0 + 1/2 \u22c5 1) = 7/6. \n\n166666669 \u22c5 6 = 7 \\pmod {10^9 + 7}, so the answer is 166666669.\n\nThis is the tree from the second sample: \n\n<image>\n\nThis is the tree from the third sample: \n\n<image>", "solution": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\nfrom collections import deque\nmod = 10 ** 9 + 7\nN = int(input())\nE = []\nfor _ in range(N - 1):\n    x, y = map(int, input().split())\n    x, y = x-1, y-1\n    E.append((x, y))\n\npre = [1]\nPA = [pre]\nfor i in range(N + 2):\n    ne = [0] * (i + 2)\n    for j, a in enumerate(pre):\n        ne[j] = (ne[j] + a) % mod\n        ne[j+1] = (ne[j+1] + a) % mod\n    PA.append(ne)\n    pre = ne\nfor pa in PA:\n    for i in range(len(pa) - 1):\n        pa[i+1] = (pa[i+1] + pa[i]) % mod\n\ni2 = mod + 1 >> 1\npoi2 = [1]\nfor _ in range(N + 5):\n    poi2.append(poi2[-1] * i2 % mod)\niN = pow(N, mod - 2, mod)\nans = 0\nfor i0 in range(N):\n    X = [[] for i in range(N)]\n    for x, y in E:\n        X[x].append(y)\n        X[y].append(x)\n\n    P = [-1] * N\n    Q = deque([i0])\n    R = []\n    D = [0] * N\n    while Q:\n        i = deque.popleft(Q)\n        R.append(i)\n        for a in X[i]:\n            if a != P[i]:\n                P[a] = i\n                X[a].remove(i)\n                deque.append(Q, a)\n                D[a] = D[i] + 1\n    \n    size = [1] * N\n    for j in R[1:][::-1]:\n        size[P[j]] += size[j]\n    \n    for j in R:\n        if j <= i0: continue\n        d = D[j]\n        ans = (ans + size[j] * iN)\n        k = j\n        while P[k] != i0:\n            p = P[k]\n            s = size[p] - size[k]\n            ans = (ans + s * PA[d-1][D[p]-1] % mod * iN % mod * poi2[d-1]) % mod\n            k = p\n\nprint(ans)\n\n", "difficulty": 8, "public_tests": {"input": ["3\n1 2\n1 3\n", "6\n2 1\n2 3\n6 1\n1 4\n2 5\n", "5\n1 2\n1 3\n1 4\n2 5\n"], "output": ["166666669\n", "500000009\n", "500000007\n"]}, "private_tests": {"input": ["4\n1 2\n2 3\n3 4\n", "2\n1 2\n"], "output": ["3\n", "500000004\n"]}, "generated_tests": {"input": ["5\n1 2\n1 3\n1 4\n1 5\n", "5\n1 2\n1 3\n2 4\n2 5\n", "4\n1 3\n2 3\n3 4\n", "5\n1 2\n1 3\n2 4\n1 5\n", "4\n1 3\n2 4\n3 4\n", "4\n1 2\n2 3\n2 4\n", "5\n1 2\n2 3\n1 4\n1 5\n", "4\n1 2\n1 3\n2 4\n", "4\n1 2\n1 3\n3 4\n", "5\n1 3\n1 2\n1 4\n2 5\n", "5\n1 3\n1 2\n2 4\n4 5\n", "3\n1 2\n2 3\n", "6\n2 1\n2 3\n6 1\n2 4\n2 5\n", "5\n1 2\n2 3\n2 4\n2 5\n", "6\n2 1\n2 3\n6 1\n2 4\n1 5\n", "5\n1 3\n2 3\n2 4\n2 5\n", "5\n1 4\n1 3\n2 4\n1 5\n", "4\n1 2\n1 4\n3 4\n", "6\n3 1\n2 3\n6 1\n2 4\n1 5\n", "5\n1 4\n1 3\n2 4\n4 5\n", "5\n1 2\n4 3\n1 4\n4 5\n", "2\n2 1\n", "6\n2 1\n1 3\n6 1\n1 4\n2 5\n", "5\n1 4\n1 3\n2 5\n4 5\n", "6\n2 1\n1 3\n6 1\n1 4\n4 5\n", "5\n1 3\n1 2\n2 5\n4 5\n", "5\n2 3\n1 2\n2 5\n4 5\n", "6\n2 1\n2 3\n6 2\n2 4\n4 5\n", "5\n2 3\n1 2\n3 5\n4 2\n", "6\n1 3\n2 3\n6 1\n2 4\n3 5\n", "5\n1 2\n1 3\n3 5\n4 5\n", "6\n4 1\n2 3\n6 1\n2 4\n2 5\n", "5\n2 1\n4 3\n2 4\n3 5\n", "6\n1 5\n2 3\n6 1\n2 4\n3 5\n", "5\n1 3\n4 3\n2 4\n4 5\n", "6\n1 5\n2 3\n6 2\n2 4\n3 5\n", "6\n2 1\n2 3\n6 1\n3 4\n1 5\n", "5\n1 2\n2 3\n3 5\n4 5\n", "6\n2 1\n2 3\n6 4\n1 4\n4 5\n", "4\n1 2\n2 3\n1 4\n", "5\n1 3\n1 2\n2 4\n2 5\n", "4\n1 2\n1 3\n1 4\n", "5\n1 2\n2 3\n2 4\n1 5\n", "5\n1 2\n1 3\n2 4\n4 5\n", "5\n1 3\n2 3\n1 4\n2 5\n", "5\n1 2\n2 3\n2 4\n4 5\n", "4\n1 2\n2 4\n3 4\n", "5\n1 2\n2 3\n1 4\n4 5\n", "5\n1 3\n2 3\n1 4\n4 5\n", "4\n2 3\n1 3\n1 4\n", "5\n2 1\n2 3\n2 4\n1 5\n", "5\n1 2\n1 4\n1 3\n1 5\n", "5\n2 3\n1 2\n1 4\n2 5\n", "5\n1 3\n1 2\n2 4\n1 5\n", "5\n1 3\n2 3\n2 4\n1 5\n", "4\n1 4\n2 3\n3 4\n", "5\n1 2\n2 3\n1 4\n2 5\n", "4\n1 2\n4 3\n1 4\n", "6\n2 1\n2 3\n6 1\n2 4\n4 5\n", "5\n1 2\n4 3\n1 3\n4 5\n", "4\n1 2\n4 3\n2 4\n", "5\n2 3\n1 2\n2 4\n4 5\n", "4\n1 2\n4 3\n3 1\n", "4\n1 3\n2 4\n1 4\n", "4\n1 3\n2 3\n1 4\n", "5\n1 2\n1 4\n1 3\n2 5\n", "5\n1 4\n2 3\n2 4\n2 5\n", "5\n1 3\n1 2\n2 5\n4 2\n", "5\n1 3\n2 4\n1 4\n2 5\n", "5\n1 3\n1 2\n3 5\n4 2\n", "5\n2 3\n2 4\n1 4\n2 5\n", "5\n2 3\n2 4\n1 4\n1 5\n", "4\n1 4\n1 3\n2 4\n", "5\n1 3\n1 2\n3 4\n2 5\n", "6\n1 2\n2 3\n6 1\n2 4\n2 5\n", "5\n2 1\n2 3\n2 4\n2 5\n", "4\n1 3\n2 3\n2 4\n", "5\n1 2\n4 3\n1 3\n1 5\n", "5\n1 3\n1 2\n5 4\n2 5\n", "6\n1 2\n2 3\n6 1\n2 4\n3 5\n", "5\n2 1\n2 3\n1 4\n2 5\n", "5\n1 3\n1 2\n1 4\n1 5\n", "5\n1 2\n1 3\n2 5\n4 5\n", "5\n1 3\n2 3\n1 4\n1 5\n", "5\n2 1\n2 3\n2 4\n3 5\n", "5\n1 2\n4 5\n1 3\n1 5\n", "5\n1 3\n2 1\n1 4\n1 5\n", "6\n2 1\n2 3\n6 2\n1 4\n2 5\n", "4\n1 2\n1 4\n3 1\n", "4\n1 4\n2 4\n3 4\n", "5\n2 1\n2 3\n3 4\n1 5\n", "6\n3 1\n2 1\n6 1\n2 4\n1 5\n", "5\n1 2\n4 3\n2 4\n4 5\n", "5\n2 3\n1 3\n2 4\n4 5\n", "5\n1 4\n4 3\n2 4\n2 5\n", "5\n2 1\n1 3\n2 4\n2 5\n", "5\n2 1\n2 3\n3 4\n3 5\n", "3\n2 1\n2 3\n", "5\n1 3\n1 2\n3 4\n1 5\n", "5\n1 2\n2 3\n3 4\n4 5\n"], "output": ["600000008\n", "300000006\n", "250000005\n", "200000005\n", "750000009\n", "750000008\n", "900000010\n", "250000004\n", "500000006\n", "500000007\n", "4\n", "500000005\n", "583333343\n", "800000010\n", "500000009\n", "900000011\n", "500000008\n", "3\n", "875000012\n", "600000009\n", "300000007\n", "500000004\n", "416666675\n", "800000011\n", "750000011\n", "200000006\n", "700000010\n", "416666676\n", "100000005\n", "916666679\n", "5\n", "125000007\n", "400000008\n", "666666678\n", "900000012\n", "125000008\n", "541666676\n", "200000007\n", "41666673\n", "250000004\n", "300000006\n", "250000004\n", "900000010\n", "4\n", "4\n", "500000008\n", "500000007\n", "600000008\n", "800000010\n", "750000008\n", "900000010\n", "600000008\n", "600000008\n", "200000005\n", "4\n", "750000009\n", "600000008\n", "3\n", "583333343\n", "800000010\n", "500000007\n", "500000008\n", "500000006\n", "3\n", "750000008\n", "500000007\n", "300000007\n", "300000006\n", "800000010\n", "200000005\n", "300000007\n", "800000010\n", "3\n", "200000005\n", "583333343\n", "800000010\n", "3\n", "600000008\n", "200000006\n", "416666675\n", "600000008\n", "600000008\n", "200000006\n", "100000005\n", "100000005\n", "500000008\n", "600000008\n", "916666679\n", "250000004\n", "750000009\n", "600000008\n", "583333343\n", "500000009\n", "600000009\n", "700000010\n", "300000006\n", "300000007\n", "500000005\n", "600000008\n", "5\n"]}, "short_description": "1. One-sentence summary  \nCompute a global aggregate over all ordered pairs of nodes in a tree by rooting at each node, exploring depths, and accumulating weighted contributions that depend on subtree\u2010size splits and precomputed combinatorial/probability factors.\n\n2. Core algorithmic approach  \n- Repeated BFS/tree traversal (breadth\u2010first search) from each root to record parent, depth, and an ordering for post\u2010order DP  \n- Tree DP (post\u2010order) to compute subtree sizes  \n- Precomputation of Pascal\u2019s triangle plus prefix sums for binomial\u2010cumulative values  \n- Modular inverses and inverse powers for probability\u2010style weightings  \n\n3. Reusable components  \n- PascalTrianglePrefix(n): builds binomial coefficients up to n and their prefix sums for O(1) range\u2010sum queries  \n- rootTreeAndOrder(adj, root): BFS to compute parent[], depth[], and a topological (\u201cR\u201d) ordering suitable for bottom\u2010up DP  \n- computeSubtreeSizes(order, parent): does a post\u2010order pass on the BFS order to fill size[] for each node  \n- precomputeInversePowers(base, maxPow, mod): generates base\u207b\u1d4f mod for k up to maxPow (useful for probability weights)"}
{"name": "274_B. Zero Tree", "description": "A tree is a graph with n vertices and exactly n - 1 edges; this graph should meet the following condition: there exists exactly one shortest (by number of edges) path between any pair of its vertices.\n\nA subtree of a tree T is a tree with both vertices and edges as subsets of vertices and edges of T.\n\nYou're given a tree with n vertices. Consider its vertices numbered with integers from 1 to n. Additionally an integer is written on every vertex of this tree. Initially the integer written on the i-th vertex is equal to vi. In one move you can apply the following operation:\n\n  1. Select the subtree of the given tree that includes the vertex with number 1. \n  2. Increase (or decrease) by one all the integers which are written on the vertices of that subtree. \n\n\n\nCalculate the minimum number of moves that is required to make all the integers written on the vertices of the given tree equal to zero.\n\nInput\n\nThe first line of the input contains n (1 \u2264 n \u2264 105). Each of the next n - 1 lines contains two integers ai and bi (1 \u2264 ai, bi \u2264 n; ai \u2260 bi) indicating there's an edge between vertices ai and bi. It's guaranteed that the input graph is a tree. \n\nThe last line of the input contains a list of n space-separated integers v1, v2, ..., vn (|vi| \u2264 109).\n\nOutput\n\nPrint the minimum number of operations needed to solve the task.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n3\n1 2\n1 3\n1 -1 1\n\n\nOutput\n\n3", "solution": "n = int(input())\nr = [[] for i in range(n + 1)]\nr[1] = [0]\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    r[a].append(b)\n    r[b].append(a)\nt = list(map(int, input().split()))\nu, v = [0] * (n + 1), [0] * (n + 1)\nfor i, j in enumerate(t, 1):\n    if j < 0: u[i] = - j\n    else: v[i] = j\n# print(u,v)\nt, p = [1], [0] * (n + 1)\nwhile t:\n    a = t.pop()\n    for b in r[a]:\n        if p[b]: continue\n        p[b] = a\n        t.append(b)\nk = [len(t) for t in r]\nt = [a for a in range(2, n + 1) if k[a] == 1]\nx, y = [0] * (n + 1), [0] * (n + 1)\nwhile t:\n    a = t.pop()\n    b = p[a]\n    x[b] = max(x[b], u[a])\n    y[b] = max(y[b], v[a])\n    k[b] -= 1\n    if k[b] == 1:\n        t.append(b)\n        if u[b] > 0:\n            if x[b] - y[b] > u[b]:\n                u[b], v[b] = x[b], x[b] - u[b]\n            else: u[b], v[b] = y[b] + u[b], y[b]\n        else:\n            if y[b] - x[b] > v[b]:\n                u[b], v[b] = y[b] - v[b], y[b]\n            else: u[b], v[b] = x[b], x[b] + v[b]\nprint(u[1] + v[1])", "difficulty": 8, "public_tests": {"input": ["3\n1 2\n1 3\n1 -1 1\n"], "output": ["3\n"]}, "private_tests": {"input": ["5\n2 3\n4 5\n2 5\n1 3\n0 2 1 4 3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 488291045 253254575 -974301934 709266786 926718320 87511873 514836444 -702876508 848928657\n", "5\n3 1\n2 4\n3 4\n2 5\n0 -3 -1 2 4\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\n"], "output": ["8\n", "2529263875\n", "20\n", "18\n"]}, "generated_tests": {"input": ["5\n2 3\n4 5\n2 5\n1 3\n0 1 1 4 3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 488291045 253254575 -974301934 709266786 926718320 87511873 514836444 -774450572 848928657\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n2 4\n5 2\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\n", "3\n1 2\n1 3\n1 -1 2\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n313077480 861441526 -264928594 488291045 253254575 -974301934 709266786 662215161 87511873 514836444 -774450572 848928657\n", "5\n3 1\n2 4\n3 4\n2 5\n1 -3 -1 2 4\n", "5\n2 3\n4 5\n2 5\n1 3\n-1 1 1 4 3\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n2 4\n5 2\n-1 -6 -9 -1 -5 -4 -2 -7 -8 -3\n", "5\n4 1\n2 4\n3 4\n2 5\n1 -1 -1 2 4\n", "5\n3 1\n2 4\n3 4\n3 5\n0 -3 -1 2 4\n", "3\n1 2\n1 3\n2 -1 1\n", "3\n1 2\n1 3\n1 -1 3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n166957452 861441526 -264928594 488291045 253254575 -974301934 709266786 662215161 87511873 514836444 -774450572 848928657\n", "5\n2 1\n2 4\n3 4\n2 5\n1 -3 -1 2 4\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n2 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 462352906 253254575 -974301934 709266786 662215161 87511873 514836444 -774450572 848928657\n", "3\n1 2\n1 3\n2 0 1\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n2 4\n5 3\n0 -6 -9 -1 -5 -4 -2 -5 -8 -3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n2 11\n3 1\n12 1\n9 1\n274206783 861441526 -264928594 488291045 253254575 -974301934 709266786 662215161 87511873 514836444 -212238415 848928657\n", "5\n4 1\n2 4\n3 4\n4 5\n1 -3 -2 3 4\n", "5\n2 3\n4 5\n2 5\n1 3\n0 2 1 4 5\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 488291045 253254575 -974301934 709266786 662215161 87511873 514836444 -774450572 848928657\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n313077480 861441526 -264928594 488291045 461644714 -974301934 709266786 662215161 87511873 514836444 -774450572 848928657\n", "5\n4 3\n4 5\n2 5\n1 3\n0 2 1 4 3\n", "10\n5 6\n8 2\n9 3\n5 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 152568581 -264928594 488291045 253254575 -974301934 709266786 926718320 87511873 514836444 -774450572 848928657\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 462352906 253254575 -974301934 709266786 662215161 87511873 514836444 -774450572 848928657\n", "5\n4 3\n4 5\n2 5\n1 3\n-1 2 1 4 3\n", "5\n4 1\n2 4\n3 4\n2 5\n1 -3 -1 2 4\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n2 4\n5 2\n-1 -6 -9 -1 -5 -4 -3 -7 -8 -3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 462352906 253254575 -974301934 1176789404 662215161 87511873 514836444 -774450572 848928657\n", "5\n2 3\n4 5\n2 5\n1 3\n0 2 0 4 3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 2\n9 1\n580660007 861441526 -264928594 488291045 253254575 -974301934 709266786 926718320 87511873 514836444 -702876508 848928657\n", "10\n5 6\n8 2\n9 3\n2 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n2 4\n5 3\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n313077480 861441526 -264928594 488291045 253254575 -974301934 709266786 662215161 87511873 514836444 -774450572 700496133\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 152568581 -264928594 488291045 253254575 -974301934 709266786 926718320 103858598 514836444 -774450572 848928657\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n2 4\n5 2\n-1 -6 -9 -1 -5 -4 -4 -7 -8 -3\n", "5\n4 3\n4 5\n2 5\n1 3\n-1 2 1 7 3\n", "10\n5 6\n8 2\n9 3\n4 1\n5 10\n9 8\n7 10\n2 4\n5 2\n-1 -6 -9 -1 -5 -4 -3 -7 -8 -3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 462352906 253254575 -974301934 467148269 662215161 87511873 514836444 -774450572 848928657\n", "10\n5 6\n8 2\n9 3\n2 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -5 -4 0 -7 -8 -3\n", "3\n1 2\n1 3\n2 -1 3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n166957452 861441526 -264928594 488291045 253254575 -974301934 709266786 662215161 87511873 514836444 -212238415 848928657\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n313077480 861441526 -264928594 488291045 253254575 -974301934 709266786 662215161 87511873 211710199 -774450572 700496133\n", "5\n2 1\n2 4\n3 4\n4 5\n1 -3 -1 2 4\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n2 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 462352906 253254575 -974301934 709266786 662215161 87511873 514836444 -774450572 1513689603\n", "5\n4 3\n4 5\n2 5\n1 3\n-1 3 1 7 3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 462352906 253254575 -974301934 467148269 662215161 31943937 514836444 -774450572 848928657\n", "10\n5 6\n8 2\n9 3\n2 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -5 -7 0 -7 -8 -3\n", "10\n5 6\n8 2\n9 3\n8 1\n6 10\n9 8\n7 10\n2 4\n5 3\n0 -6 -9 -1 -5 -4 -2 -5 -8 -3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n2 11\n3 1\n12 1\n9 1\n166957452 861441526 -264928594 488291045 253254575 -974301934 709266786 662215161 87511873 514836444 -212238415 848928657\n", "5\n2 1\n2 4\n3 4\n4 5\n1 -3 -1 3 4\n", "12\n1 6\n10 1\n4 1\n7 2\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 462352906 253254575 -974301934 467148269 662215161 31943937 514836444 -774450572 848928657\n", "5\n2 1\n2 4\n3 4\n4 5\n1 -3 -2 3 4\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 4\n7 10\n2 4\n5 2\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\n"], "output": ["8\n", "2529263875\n", "18\n", "3\n", "2261681348\n", "21\n", "9\n", "17\n", "13\n", "12\n", "4\n", "5\n", "2115561320\n", "15\n", "2691124189\n", "2\n", "20\n", "2222810651\n", "11\n", "10\n", "2529263875\n", "2261681348\n", "8\n", "18\n", "2529263875\n", "2529263875\n", "9\n", "17\n", "17\n", "2529263875\n", "8\n", "2529263875\n", "18\n", "18\n", "2261681348\n", "2529263875\n", "17\n", "15\n", "17\n", "2529263875\n", "18\n", "4\n", "2115561320\n", "2261681348\n", "15\n", "2691124189\n", "15\n", "2529263875\n", "18\n", "18\n", "2115561320\n", "15\n", "2529263875\n", "17\n", "18\n"]}, "short_description": "1. One-sentence summary:  \n   The code computes two aggregated values for each node in a tree by propagating constraints from the leaves inward and then combines them at the root.\n\n2. Core algorithmic approach:  \n   Tree dynamic programming implemented via a leaf-pruning (topological) order:  \n   - First build the tree and parent pointers with a simple DFS/stack.  \n   - Then repeatedly remove leaves (nodes of degree 1), merge their DP states into their parent, decrement the parent\u2019s degree, and enqueue it once it becomes a leaf.  \n\n3. Reusable components:  \n   a) Building parent pointers with an explicit stack (iterative DFS) on an adjacency list.  \n   b) Maintaining a degree array and a \u201cleaves\u201d queue (or list) to process nodes in post-order without recursion.  \n   c) Merging children\u2019s DP states into the parent by taking pairwise maxima (the pattern of accumulating child contributions into two arrays `x[]` and `y[]`)."}
{"name": "1084_D. The Fair Nut and the Best Path", "description": "The Fair Nut is going to travel to the Tree Country, in which there are n cities. Most of the land of this country is covered by forest. Furthermore, the local road system forms a tree (connected graph without cycles). Nut wants to rent a car in the city u and go by a simple path to city v. He hasn't determined the path, so it's time to do it. Note that chosen path can consist of only one vertex.\n\nA filling station is located in every city. Because of strange law, Nut can buy only w_i liters of gasoline in the i-th city. We can assume, that he has infinite money. Each road has a length, and as soon as Nut drives through this road, the amount of gasoline decreases by length. Of course, Nut can't choose a path, which consists of roads, where he runs out of gasoline. He can buy gasoline in every visited city, even in the first and the last.\n\nHe also wants to find the maximum amount of gasoline that he can have at the end of the path. Help him: count it.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the number of cities.\n\nThe second line contains n integers w_1, w_2, \u2026, w_n (0 \u2264 w_{i} \u2264 10^9) \u2014 the maximum amounts of liters of gasoline that Nut can buy in cities.\n\nEach of the next n - 1 lines describes road and contains three integers u, v, c (1 \u2264 u, v \u2264 n, 1 \u2264 c \u2264 10^9, u \u2260 v), where u and v \u2014 cities that are connected by this road and c \u2014 its length.\n\nIt is guaranteed that graph of road connectivity is a tree.\n\nOutput\n\nPrint one number \u2014 the maximum amount of gasoline that he can have at the end of the path.\n\nExamples\n\nInput\n\n3\n1 3 3\n1 2 2\n1 3 2\n\n\nOutput\n\n3\n\n\nInput\n\n5\n6 3 2 5 0\n1 2 10\n2 3 3\n2 4 1\n1 5 1\n\n\nOutput\n\n7\n\nNote\n\nThe optimal way in the first example is 2 \u2192 1 \u2192 3. \n\n<image>\n\nThe optimal way in the second example is 2 \u2192 4. \n\n<image>", "solution": "from sys import stdin\ninput=lambda : stdin.readline().strip()\nfrom math import ceil,sqrt,factorial,gcd\nfrom collections import deque\nn=int(input())\nl=list(map(int,input().split()))\nvisited=set()\ngraph={i:set() for i in range(1,n+1)}\nd={}\npapa=[0 for i in range(n+1)]\nlevel=[[] for i in range(n+1)]\nz=[[0] for i in range(n+1)]\nfor i in range(n-1):\n\ta,b,c=map(int,input().split())\n\tgraph[a].add(b)\n\tgraph[b].add(a)\n\td[(a,b)]=c\nstack=deque()\n# print(graph)\nfor i in graph:\n\tif len(graph[i])==1:\n\t\tstack.append([i,0])\nm=0\nwhile stack:\n\t# print(stack)\n\tx,y=stack.popleft()\n\tif len(graph[x])>=1:\n\t\tfor i in graph[x]:\n\t\t\tt=i\n\t\t\tbreak\n\t\tif (t,x) in d:\n\t\t\tq=d[(t,x)]\n\t\telse:\n\t\t\tq=d[(x,t)]\n\t\tz[t].append(y+l[x-1]-q)\n\t\tgraph[t].remove(x)\n\t\tif len(graph[t])==1:\n\t\t\tstack.append([t,max(z[t])])\nfor i in range(1,n+1):\n\tz[i].sort()\n\tif len(z[i])>=3:\n\t\tm=max(m,l[i-1]+z[i][-2]+z[i][-1])\n\tm=max(m,z[i][-1]+l[i-1])\nprint(m)", "difficulty": 10, "public_tests": {"input": ["5\n6 3 2 5 0\n1 2 10\n2 3 3\n2 4 1\n1 5 1\n", "3\n1 3 3\n1 2 2\n1 3 2\n"], "output": ["7\n", "3\n"]}, "private_tests": {"input": ["10\n28 8 0 1 5 2 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 30\n", "10\n67 9 7 2 33 5 1 7 43 55\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 13\n", "10\n4 85 87 24 19 100 27 73 89 46\n5 4 63\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 39\n10 8 57\n1 4 80\n6 1 10\n", "10\n80 63 78 18 65 77 24 83 79 48\n5 3 67\n1 8 4\n1 2 83\n7 4 16\n6 7 50\n3 9 27\n10 7 74\n2 3 21\n10 2 47\n", "1\n42\n", "10\n19 48 77 50 74 26 8 10 47 7\n6 9 95\n3 9 94\n9 7 76\n5 9 95\n8 9 4\n2 4 85\n1 2 77\n4 10 29\n1 9 60\n", "10\n96 72 39 45 93 64 13 7 3 28\n9 1 18\n1 7 15\n1 10 52\n4 1 93\n1 6 94\n1 5 23\n1 2 20\n8 1 13\n3 1 34\n", "10\n81 34 31 38 69 62 54 18 72 29\n4 8 12\n2 9 25\n4 5 17\n5 7 35\n10 1 13\n9 3 53\n7 6 22\n1 6 82\n3 10 42\n", "4\n10408 544831 53650 494619\n1 4 682017\n4 3 46433\n4 2 98094\n", "10\n46 76 45 9 4 58 28 7 40 100\n10 2 8\n3 9 6\n6 1 9\n2 7 10\n4 6 31\n10 1 1\n8 4 29\n5 9 9\n7 5 3\n", "10\n8 63 0 10 86 14 5 49 13 5\n1 9 48\n6 9 5\n3 7 35\n9 5 3\n10 9 43\n2 6 4\n9 4 36\n8 7 10\n7 2 6\n", "10\n11 43 11 96 18 53 25 89 31 41\n2 4 41\n7 1 88\n3 2 19\n10 3 38\n8 4 97\n7 5 21\n7 2 71\n3 6 69\n9 5 19\n"], "output": ["100\n", "181\n", "225\n", "248\n", "42\n", "77\n", "218\n", "187\n", "948573\n", "351\n", "202\n", "98\n"]}, "generated_tests": {"input": ["10\n10 8 0 1 5 2 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 30\n", "10\n67 9 7 2 33 5 2 7 43 55\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 13\n", "10\n4 85 87 24 19 100 27 73 89 46\n5 4 63\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 39\n10 8 57\n1 4 80\n6 1 0\n", "1\n20\n", "10\n96 72 39 45 93 64 13 7 3 28\n9 1 18\n1 7 15\n1 10 9\n4 1 93\n1 6 94\n1 5 23\n1 2 20\n8 1 13\n3 1 34\n", "5\n6 3 2 6 0\n1 2 10\n2 3 3\n2 4 1\n1 5 1\n", "1\n39\n", "10\n4 85 87 24 19 100 27 73 89 79\n5 4 63\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 74\n10 8 57\n1 4 80\n6 1 0\n", "1\n14\n", "10\n67 9 7 2 33 10 2 7 43 13\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 11\n", "1\n6\n", "10\n67 9 7 2 33 10 2 7 43 13\n2 4 38\n2 5 77\n9 8 91\n9 5 10\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 11\n", "10\n4 85 87 24 19 100 27 11 89 79\n5 4 118\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 74\n10 8 57\n1 4 80\n6 1 0\n", "1\n10\n", "10\n67 9 7 2 33 10 2 7 43 13\n2 4 38\n2 5 77\n9 8 91\n9 5 10\n10 8 4\n2 6 49\n9 1 5\n7 5 100\n3 10 11\n", "1\n7\n", "10\n4 85 87 24 19 100 27 11 117 79\n5 4 118\n8 9 18\n2 9 98\n8 1 61\n7 2 17\n3 9 74\n10 8 57\n1 4 80\n6 1 0\n", "1\n12\n", "10\n4 85 87 24 19 100 27 11 117 79\n5 4 118\n8 9 18\n2 9 98\n8 1 61\n7 2 17\n3 9 25\n10 8 57\n1 4 80\n6 1 0\n", "1\n5\n", "1\n0\n", "1\n1\n", "10\n28 8 0 1 5 2 9 2 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 30\n", "10\n4 85 87 24 19 100 27 73 89 46\n5 4 63\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 39\n10 9 57\n1 4 80\n6 1 10\n", "10\n80 63 78 18 65 77 24 83 79 48\n5 3 67\n1 8 4\n1 2 83\n7 4 16\n6 7 50\n3 9 27\n10 7 74\n2 3 21\n10 2 45\n", "1\n11\n", "10\n46 76 45 9 4 58 45 7 40 100\n10 2 8\n3 9 6\n6 1 9\n2 7 10\n4 6 31\n10 1 1\n8 4 29\n5 9 9\n7 5 3\n", "10\n8 63 0 10 86 14 5 49 13 5\n1 9 48\n6 9 5\n3 7 51\n9 5 3\n10 9 43\n2 6 4\n9 4 36\n8 7 10\n7 2 6\n", "10\n11 43 11 96 18 53 25 89 31 41\n2 4 41\n7 1 119\n3 2 19\n10 3 38\n8 4 97\n7 5 21\n7 2 71\n3 6 69\n9 5 19\n", "3\n1 3 2\n1 2 2\n1 3 2\n", "1\n4\n", "10\n30 9 7 2 33 5 2 7 43 55\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 11\n", "1\n18\n", "10\n4 85 87 24 19 100 27 73 89 79\n5 4 63\n8 9 18\n7 9 98\n8 1 50\n7 2 17\n3 9 74\n10 8 57\n1 4 80\n6 1 0\n", "10\n4 130 87 24 19 100 27 73 89 79\n5 4 118\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 74\n10 8 57\n1 4 80\n6 1 0\n", "1\n2\n", "1\n13\n", "10\n4 85 87 24 19 100 27 11 89 79\n5 4 118\n8 9 18\n2 9 98\n8 1 61\n7 2 17\n3 9 74\n10 8 25\n1 4 80\n6 1 0\n", "1\n15\n", "10\n4 85 87 24 19 100 27 11 117 79\n5 4 118\n8 9 27\n2 9 98\n8 1 61\n7 2 17\n3 9 25\n10 8 57\n1 4 80\n6 1 0\n", "10\n10 8 0 1 5 2 9 0 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 30\n", "10\n67 9 7 2 33 5 2 7 43 55\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 11\n", "10\n4 85 87 24 19 100 27 73 89 79\n5 4 63\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 39\n10 8 57\n1 4 80\n6 1 0\n", "10\n67 9 7 2 33 10 2 7 43 55\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 11\n", "10\n4 85 87 24 19 100 27 73 89 79\n5 4 118\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 74\n10 8 57\n1 4 80\n6 1 0\n", "10\n4 85 87 24 19 100 27 11 89 79\n5 4 118\n8 9 18\n2 9 98\n8 1 61\n7 2 17\n3 9 74\n10 8 57\n1 4 80\n6 1 0\n", "10\n67 9 7 2 33 10 2 7 43 13\n2 4 38\n2 5 77\n9 8 91\n9 5 10\n10 8 4\n4 6 49\n9 1 5\n7 5 100\n3 10 11\n", "10\n4 85 87 24 19 100 27 11 117 120\n5 4 118\n8 9 18\n2 9 98\n8 1 61\n7 2 17\n3 9 25\n10 8 57\n1 4 80\n6 1 0\n", "5\n7 3 2 5 0\n1 2 10\n2 3 3\n2 4 1\n1 5 1\n", "10\n10 8 0 1 5 2 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 2 54\n2 6 34\n4 1 30\n", "10\n67 9 7 2 33 5 2 7 43 55\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n1 6 49\n9 1 5\n7 5 100\n3 10 13\n", "10\n4 85 87 24 19 100 27 73 89 43\n5 4 63\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 39\n10 8 57\n1 4 80\n6 1 0\n", "5\n6 3 2 6 0\n1 2 19\n2 3 3\n2 4 1\n1 5 1\n", "10\n10 8 0 1 5 2 9 0 2 81\n10 1 9\n6 5 78\n8 4 38\n3 9 74\n8 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 30\n", "10\n67 6 7 2 33 10 2 7 43 55\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 11\n", "1\n8\n", "10\n4 85 87 24 19 100 27 11 89 79\n5 4 118\n8 9 18\n7 9 186\n8 1 61\n7 2 17\n3 9 74\n10 8 57\n1 4 80\n6 1 0\n", "10\n4 85 87 24 19 100 27 11 117 79\n5 4 118\n8 9 18\n2 9 168\n8 1 61\n7 2 17\n3 9 74\n10 8 57\n1 4 80\n6 1 0\n", "1\n3\n", "10\n4 85 87 24 19 100 11 11 117 120\n5 4 118\n8 9 18\n2 9 98\n8 1 61\n7 2 17\n3 9 25\n10 8 57\n1 4 80\n6 1 0\n"], "output": ["82\n", "181\n", "235\n", "20\n", "218\n", "8\n", "39\n", "200\n", "14\n", "139\n", "6\n", "137\n", "138\n", "10\n", "128\n", "7\n", "166\n", "12\n", "215\n", "5\n", "0\n", "1\n", "100\n", "225\n", "248\n", "11\n", "368\n", "202\n", "98\n", "3\n", "4\n", "144\n", "18\n", "211\n", "229\n", "2\n", "13\n", "149\n", "15\n", "206\n", "82\n", "181\n", "235\n", "181\n", "200\n", "138\n", "128\n", "235\n", "7\n", "82\n", "181\n", "235\n", "8\n", "82\n", "181\n", "8\n", "138\n", "166\n", "3\n", "235\n"]}, "short_description": "1. One-sentence summary:  \nCompute the maximum sum of node weights minus edge costs over either a single root-to-leaf path or the combination of two leaf-to-root branches in an undirected tree.\n\n2. Core algorithmic approach:  \nA tree\u2010DP implemented by iteratively \u201cpeeling\u201d leaves with a queue (a form of topological order on a tree), propagating the best downward path sums to each parent and tracking the top two contributions per node to evaluate combined-branch best sums.\n\n3. Reusable components:  \n- Leaf-pruning queue: initialize with all leaves and iteratively remove them to process children before parents in a tree.  \n- Per-node best-k path aggregator: maintain a small fixed-size list (here two largest values) of incoming child contributions to compute combined-branch results.  \n- Edge\u2010cost lookup via a dictionary of unordered pairs for constant\u2010time retrieval of weights during DP propagation."}
{"name": "1324_F. Maximum White Subtree", "description": "You are given a tree consisting of n vertices. A tree is a connected undirected graph with n-1 edges. Each vertex v of this tree has a color assigned to it (a_v = 1 if the vertex v is white and 0 if the vertex v is black).\n\nYou have to solve the following problem for each vertex v: what is the maximum difference between the number of white and the number of black vertices you can obtain if you choose some subtree of the given tree that contains the vertex v? The subtree of the tree is the connected subgraph of the given tree. More formally, if you choose the subtree that contains cnt_w white vertices and cnt_b black vertices, you have to maximize cnt_w - cnt_b.\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of vertices in the tree.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 1), where a_i is the color of the i-th vertex.\n\nEach of the next n-1 lines describes an edge of the tree. Edge i is denoted by two integers u_i and v_i, the labels of vertices it connects (1 \u2264 u_i, v_i \u2264 n, u_i \u2260 v_i).\n\nIt is guaranteed that the given edges form a tree.\n\nOutput\n\nPrint n integers res_1, res_2, ..., res_n, where res_i is the maximum possible difference between the number of white and black vertices in some subtree that contains the vertex i.\n\nExamples\n\nInput\n\n\n9\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\n\n\nOutput\n\n\n2 2 2 2 2 1 1 0 2 \n\n\nInput\n\n\n4\n0 0 1 0\n1 2\n1 3\n1 4\n\n\nOutput\n\n\n0 -1 1 -1 \n\nNote\n\nThe first example is shown below:\n\n<image>\n\nThe black vertices have bold borders.\n\nIn the second example, the best subtree for vertices 2, 3 and 4 are vertices 2, 3 and 4 correspondingly. And the best subtree for the vertex 1 is the subtree consisting of vertices 1 and 3.", "solution": "import os\nimport sys\nfrom io import BytesIO, IOBase\nfrom types import GeneratorType\nfrom collections import defaultdict\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(2 * 10 ** 5)\n\n\n\nans=0\n\ndef bootstrap(f, stack=[]):\n    def wrappedfunc(*args, **kwargs):\n        if stack:\n            return f(*args, **kwargs)\n        else:\n            to = f(*args, **kwargs)\n            while True:\n                if type(to) is GeneratorType:\n                    stack.append(to)\n                    to = next(to)\n                else:\n                    stack.pop()\n                    if not stack:\n                        break\n                    to = stack[-1].send(to)\n            return to\n\n    return wrappedfunc\n\n\n@bootstrap\ndef dfs(now, lay, fa):\n    SUM[now] = 0\n    NUM[now] = C[now]\n    for to in A[now]:\n        if to != fa:\n            yield dfs(to, lay + 1, now)\n            SUM[now] += SUM[to]\n            SUM[now] += NUM[to]\n            NUM[now] += NUM[to]\n    yield\n\n\n@bootstrap\ndef change(now, fa):\n    global ans\n    ans = max(ans, SUM[now])\n    for to in A[now]:\n        if to != fa:\n            SUM[now] -= SUM[to]\n            SUM[now] -= NUM[to]\n            NUM[now] -= NUM[to]\n            NUM[to] += NUM[now]\n            SUM[to] += SUM[now]\n            SUM[to] += NUM[now]\n\n            yield change(to, now)\n\n            SUM[to] -= SUM[now]\n            SUM[to] -= NUM[now]\n            NUM[to] -= NUM[now]\n            NUM[now] += NUM[to]\n            SUM[now] += SUM[to]\n            SUM[now] += NUM[to]\n    yield\n\n\nn = int(input())\nA = [[] for i in range(n + 1)]\nC = [0] + (list(map(int, input().split())))\nNUM = [0] * (n + 1)\nSUM = [0] * (n + 1)\nfor i in range(n - 1):\n    x, y = map(int, input().split())\n    A[x].append(y)\n    A[y].append(x)\ndfs(1, 0, 0)\nchange(1, 0)\nprint(ans)\n# print(NUM)\n# print(SUM)\n", "difficulty": 12, "public_tests": {"input": ["9\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\n", "4\n0 0 1 0\n1 2\n1 3\n1 4\n"], "output": ["2 2 2 2 2 1 1 0 2 ", "0 -1 1 -1 "]}, "private_tests": {"input": ["8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n", "1\n1337\n", "2\n12345 65432\n2 1\n"], "output": ["121\n", "0\n", "65432\n"]}, "generated_tests": {"input": ["8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n2 6\n5 7\n5 8\n", "1\n1197\n", "9\n0 1 0 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\n", "4\n0 -1 1 0\n1 2\n1 3\n1 4\n", "4\n0 -1 0 0\n1 2\n1 3\n1 4\n", "9\n1 2 0 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\n", "1\n0\n", "1\n1797\n", "9\n0 2 0 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\n", "1\n232\n", "1\n358\n", "1\n244\n", "1\n441\n", "1\n769\n", "1\n240\n", "1\n133\n", "1\n13\n", "1\n22\n", "1\n31\n", "1\n5\n", "1\n2\n", "1\n1\n", "1\n-1\n", "1\n-2\n", "1\n-3\n", "1\n-6\n", "1\n3\n", "1\n6\n", "1\n4\n", "1\n8\n", "1\n12\n", "1\n-4\n", "1\n-5\n", "1\n7\n", "1\n-7\n", "1\n-8\n", "1\n-16\n", "1\n-18\n", "1\n-12\n", "1\n-13\n", "1\n-19\n", "1\n-21\n", "1\n11\n", "1\n18\n", "1\n30\n", "1\n36\n", "1\n16\n", "1\n-10\n", "1\n10\n", "1\n9\n", "1\n-15\n", "1\n-32\n", "1\n-54\n", "1\n-76\n", "1\n-133\n", "1\n-244\n", "1\n-418\n", "1\n-164\n", "1\n-120\n", "1\n-49\n", "1\n-46\n", "1\n-87\n", "1\n-80\n", "1\n-66\n", "1\n-14\n", "1\n-11\n", "1\n-36\n", "1\n-23\n", "1\n15\n", "1\n14\n", "1\n-9\n", "1\n-25\n", "1\n-20\n", "1\n-31\n", "1\n-43\n", "1\n-52\n", "1\n24\n", "1\n-37\n", "1\n-34\n", "1\n-64\n", "1\n-73\n", "1\n-85\n", "1\n-134\n", "1\n-211\n", "1\n-27\n", "1\n-35\n", "1\n-24\n"], "output": ["8 8 8 8 8 8 8 8\n", "1\n", "0 1 0 1 0 0 0 -1 1\n", "1 1 1 0\n", "0 1 -1 -1\n", "2 2 2 2 2 1 1 0 2\n", "-1\n", "1\n", "0 1 0 1 0 0 0 -1 1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n"]}, "short_description": "1. One-sentence summary:\nCompute, for a tree with weighted nodes, the maximum total distance sum from an optimally chosen root to all weighted nodes.\n\n2. Core algorithmic approach:\nTree\u2010DP with rerooting\u2014first a post\u2010order DFS to compute subtree aggregates (node counts and distance sums), then a second DFS that moves the root and updates those aggregates to evaluate every possible root in O(n).\n\n3. Reusable components:\n- A generic \u201cbootstrap\u201d decorator to convert recursive generators into iterative calls and avoid recursion depth limits.\n- A subtree\u2010aggregation DFS that computes for each node both the total weight/count in its subtree and the sum of distances from that node to its subtree nodes.\n- A rerooting\u2010DP function that, when moving the root from a parent to a child, updates subtree aggregates in O(1) and restores them after backtracking."}
{"name": "1436_D. Bandit in a City", "description": "Bandits appeared in the city! One of them is trying to catch as many citizens as he can.\n\nThe city consists of n squares connected by n-1 roads in such a way that it is possible to reach any square from any other square. The square number 1 is the main square.\n\nAfter Sunday walk all the roads were changed to one-way roads in such a way that it is possible to reach any square from the main square.\n\nAt the moment when the bandit appeared on the main square there were a_i citizens on the i-th square. Now the following process will begin. First, each citizen that is currently on a square with some outgoing one-way roads chooses one of such roads and moves along it to another square. Then the bandit chooses one of the one-way roads outgoing from the square he is located and moves along it. The process is repeated until the bandit is located on a square with no outgoing roads. The bandit catches all the citizens on that square.\n\nThe bandit wants to catch as many citizens as possible; the citizens want to minimize the number of caught people. The bandit and the citizens know positions of all citizens at any time, the citizens can cooperate. If both sides act optimally, how many citizens will be caught?\n\nInput\n\nThe first line contains a single integer n \u2014 the number of squares in the city (2 \u2264 n \u2264 2\u22c510^5).\n\nThe second line contains n-1 integers p_2, p_3 ... p_n meaning that there is a one-way road from the square p_i to the square i (1 \u2264 p_i < i). \n\nThe third line contains n integers a_1, a_2, ..., a_n \u2014 the number of citizens on each square initially (0 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint a single integer \u2014 the number of citizens the bandit will catch if both sides act optimally.\n\nExamples\n\nInput\n\n\n3\n1 1\n3 1 2\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n3\n1 1\n3 1 3\n\n\nOutput\n\n\n4\n\nNote\n\nIn the first example the citizens on the square 1 can split into two groups 2 + 1, so that the second and on the third squares will have 3 citizens each.\n\nIn the second example no matter how citizens act the bandit can catch at least 4 citizens.", "solution": "n = int(input())\nparent = [0] + [x-1 for x in list(map(int, input().split()))]\ncitizen = list(map(int, input().split()))\n \nsz = [1] * n\nfor i in range(1, n):\n    sz[parent[i]] = 0\n#print(sz) \nfor i in range(n-1, 0, -1):\n    citizen[parent[i]] += citizen[i]\n    sz[parent[i]] += sz[i]\n#print(citizen)\n#print(sz)\nans = 0\nfor i in range(n):\n    if citizen[i]%sz[i]==0:\n        ans=max(ans,citizen[i]//sz[i])\n    else:\n        ans=max(ans,(citizen[i]//sz[i])+1)\n    #ans = max(ans, (citizen[i]+sz[i]-1)//sz[i])\n \nprint(ans)", "difficulty": 10, "public_tests": {"input": ["3\n1 1\n3 1 2\n", "3\n1 1\n3 1 3\n"], "output": ["3\n", "4\n"]}, "private_tests": {"input": ["2\n1\n293175439 964211398\n", "50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n82 30 98 3 92 42 28 41 90 67 83 5 2 77 38 39 96 22 18 37 88 42 91 34 39 2 89 72 100 18 11 79 77 82 10 48 61 39 80 13 61 76 87 17 58 83 21 19 46 65\n", "10\n1 1 1 1 1 1 1 1 1\n64 0 0 0 0 0 0 0 0 0\n", "50\n1 1 2 3 1 2 4 6 3 7 7 5 12 13 7 7 4 10 14 8 18 14 19 22 11 4 17 14 11 12 11 18 19 28 9 27 9 7 7 13 17 24 21 9 33 11 44 45 33\n67 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "10\n1 1 1 1 1 1 1 1 1\n77 10 36 51 50 82 8 56 7 26\n", "100\n1 2 1 2 2 5 3 8 9 4 4 7 2 4 6 3 13 2 10 10 17 15 15 9 17 8 18 18 29 7 1 13 32 13 29 12 14 12 24 21 12 31 4 36 5 39 33 6 37 40 2 29 39 42 18 40 26 44 52 22 50 49 1 21 46 59 25 39 38 42 34 45 3 70 57 60 73 76 38 69 38 24 30 40 70 21 38 16 30 41 40 31 11 65 9 46 3 70 85\n50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "2\n1\n3 0\n", "10\n1 1 1 1 1 1 1 1 1\n9 52 36 0 19 79 13 3 89 31\n", "10\n1 2 1 2 1 2 6 7 7\n137037598 441752911 759804266 209515812 234899988 38667789 389711866 680023681 753276683 251101203\n", "10\n1 1 1 1 1 1 1 1 1\n841306067 40156990 957137872 873138809 930194285 483020948 155552934 851771372 401782261 183067980\n", "5\n1 1 1 4\n28 0 0 0 0\n", "10\n1 1 1 1 1 1 1 1 1\n204215424 439630330 408356675 696347865 314256806 345663675 226463233 883526778 85214111 989916765\n", "15\n1 1 2 2 3 3 4 4 5 5 6 6 7 7\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "2\n1\n472137027 495493860\n", "10\n1 1 2 2 3 3 4 4 5\n0 0 1000 0 0 0 0 0 0 0\n", "50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n60 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "10\n1 2 3 1 3 4 2 4 6\n68 5 44 83 46 92 32 51 2 89\n", "2\n1\n10 0\n", "2\n1\n48 32\n", "2\n1\n59 12\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n65 78 71 17 56 55 65 58 64 71 23 22 82 99 79 54 10 6 52 68 99 40 21 100 47 11 72 68 13 45 1 82 73 60 51 16 28 82 17 64 94 39 58 62 99 7 92 95 13 92\n", "100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n62 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n29 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "2\n1\n529696753 688701773\n", "10\n1 2 3 4 5 6 7 8 9\n285667137 980023651 876517010 722834015 294393310 199165086 321915358 105753310 222692362 161158342\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n43 93 92 69 61 67 69 2 81 41 4 68 10 19 96 14 48 47 85 5 78 58 57 72 75 92 12 33 63 14 7 50 80 88 24 97 38 18 70 45 73 74 40 6 36 71 66 68 1 64\n", "2\n1\n76 37\n", "50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n67 8 36 45 5 65 80 3 0 96 13 98 96 46 87 9 31 16 36 0 84 4 65 64 96 70 10 72 85 53 28 67 57 50 38 4 97 38 63 22 4 62 81 50 83 52 82 84 63 71\n", "50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n73 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "2\n1\n74 73\n", "2\n1\n91 0\n", "10\n1 2 3 4 5 6 7 8 9\n92 0 0 0 0 0 0 0 0 0\n", "2\n1\n83 79\n", "10\n1 2 3 4 5 6 7 8 9\n572824925 20293494 105606574 673623641 152420817 620499198 326794512 710530240 321931146 608064601\n", "10\n1 1 2 4 4 3 6 1 5\n44 0 0 0 0 0 0 0 0 0\n", "10\n1 1 1 1 1 1 1 1 1\n69 0 0 0 0 0 0 0 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n71 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "3\n1 1\n0 0 0\n", "3\n1 1\n2 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n0 0 63 70 92 75 4 96 52 33 86 57 53 85 91 62 23 0 28 37 41 69 26 64 7 100 41 19 70 60 1 50 12 98 62 45 77 15 72 25 84 70 38 28 21 58 51 23 40 88 34 85 36 95 65 14 4 13 98 73 93 78 70 29 44 73 49 60 54 49 60 45 99 91 19 67 44 42 14 10 83 74 78 67 61 91 92 23 94 59 36 82 61 33 59 59 80 95 25 33\n", "10\n1 2 3 4 5 6 7 8 9\n68 35 94 38 33 77 81 65 90 71\n", "10\n1 2 3 4 5 6 7 8 9\n13 35 33 86 0 73 15 3 74 100\n", "50\n1 2 1 4 1 2 1 8 4 1 9 10 9 11 4 7 14 3 10 2 11 4 21 11 12 17 2 2 10 29 13 1 11 4 5 22 36 10 5 11 7 17 12 31 1 1 42 25 46\n13 58 22 90 81 91 48 25 61 76 92 86 89 94 8 97 74 16 21 27 100 92 57 87 67 8 89 61 22 3 86 0 95 89 9 59 88 65 30 42 33 63 67 46 66 17 89 49 60 59\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n51 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "2\n1\n978585177 622940364\n", "100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n58 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "2\n1\n39002084 104074590\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n79 29 58 69 56 0 57 27 97 99 80 98 54 7 93 65 29 34 88 74 23 0 23 60 93 24 27 66 42 40 29 89 7 98 49 18 29 49 64 59 56 43 33 88 33 72 81 0 54 70 91 33 61 27 55 37 43 27 90 87 88 90 38 51 66 84 78 47 8 98 1 18 36 23 99 30 61 76 15 30 85 15 41 53 41 67 22 34 42 99 100 31 18 20 26 98 11 38 39 82\n", "2\n1\n487981126 805590708\n", "10\n1 2 3 4 5 6 7 8 9\n3 0 0 0 0 0 0 0 0 0\n", "2\n1\n96 0\n"], "output": ["1257386837\n", "2598\n", "8\n", "3\n", "82\n", "2\n", "3\n", "89\n", "759804266\n", "957137872\n", "10\n", "989916765\n", "2\n", "967630887\n", "500\n", "60\n", "181\n", "10\n", "80\n", "71\n", "100\n", "62\n", "1\n", "1\n", "1218398526\n", "4170119581\n", "97\n", "113\n", "2536\n", "73\n", "147\n", "91\n", "92\n", "162\n", "4112589148\n", "11\n", "8\n", "1\n", "0\n", "1\n", "100\n", "652\n", "432\n", "187\n", "2\n", "1601525541\n", "58\n", "143076674\n", "100\n", "1293571834\n", "3\n", "96\n"]}, "generated_tests": {"input": ["2\n1\n236884846 964211398\n", "50\n1 1 2 3 1 2 4 6 3 7 7 5 12 13 7 7 4 10 14 8 18 14 19 22 11 4 17 14 11 12 11 18 19 28 9 27 9 7 7 13 17 24 21 9 33 11 44 45 33\n67 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n", "10\n1 1 1 1 1 1 2 1 1\n77 10 36 51 50 82 8 56 7 26\n", "100\n1 2 1 2 2 5 3 8 9 4 1 7 2 4 6 3 13 2 10 10 17 15 15 9 17 8 18 18 29 7 1 13 32 13 29 12 14 12 24 21 12 31 4 36 5 39 33 6 37 40 2 29 39 42 18 40 26 44 52 22 50 49 1 21 46 59 25 39 38 42 34 45 3 70 57 60 73 76 38 69 38 24 30 40 70 21 38 16 30 41 40 31 11 65 9 46 3 70 85\n50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "10\n1 1 1 1 2 1 1 1 1\n9 52 36 0 19 79 13 3 89 31\n", "10\n1 2 1 2 1 2 6 7 7\n137037598 441752911 759804266 209515812 234899988 38667789 389711866 680023681 263765081 251101203\n", "10\n1 2 1 1 1 1 1 1 1\n841306067 40156990 957137872 873138809 930194285 483020948 155552934 851771372 401782261 183067980\n", "5\n1 1 1 4\n28 1 0 0 0\n", "10\n1 1 1 1 1 1 1 1 1\n100734736 439630330 408356675 696347865 314256806 345663675 226463233 883526778 85214111 989916765\n", "2\n1\n477593427 495493860\n", "50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 8 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n60 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "10\n1 2 3 1 3 4 2 4 6\n68 2 44 83 46 92 32 51 2 89\n", "2\n1\n23 32\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n65 78 71 17 56 55 65 58 64 71 23 22 82 99 79 54 10 6 52 68 99 40 21 100 47 11 72 72 13 45 1 82 73 60 51 16 28 82 17 64 94 39 58 62 99 7 92 95 13 92\n", "100\n1 2 3 4 5 6 7 8 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n62 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "2\n1\n1024550678 688701773\n", "10\n1 2 3 4 5 6 7 8 9\n285667137 980023651 968508655 722834015 294393310 199165086 321915358 105753310 222692362 161158342\n", "2\n1\n131 37\n", "50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 24 44 45 46 47 48 49\n67 8 36 45 5 65 80 3 0 96 13 98 96 46 87 9 31 16 36 0 84 4 65 64 96 70 10 72 85 53 28 67 57 50 38 4 97 38 63 22 4 62 81 50 83 52 82 84 63 71\n", "2\n1\n106 73\n", "10\n1 2 3 4 5 6 7 8 9\n164 0 0 0 0 0 0 0 0 0\n", "2\n1\n83 89\n", "10\n1 2 3 4 5 6 7 8 9\n572824925 20293494 105606574 673623641 152420817 275964457 326794512 710530240 321931146 608064601\n", "10\n1 1 2 4 4 3 6 1 5\n44 0 0 0 0 1 0 0 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1\n71 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "10\n1 2 3 4 3 6 7 8 9\n68 35 94 38 33 77 81 65 90 71\n", "10\n1 2 3 4 5 6 7 8 9\n13 35 33 86 1 73 15 3 74 100\n", "50\n1 2 1 4 1 2 1 8 4 1 9 10 9 11 4 7 14 3 10 2 11 4 21 11 12 17 2 2 10 29 13 1 11 4 5 22 36 10 5 11 7 17 12 31 1 1 42 25 46\n13 58 22 90 81 91 48 25 61 76 92 86 89 94 8 97 74 16 21 27 100 92 57 87 67 8 89 61 22 3 86 0 95 89 9 30 88 65 30 42 33 63 67 46 66 17 89 49 60 59\n", "2\n1\n978585177 1183960521\n", "2\n1\n39002084 36087306\n", "2\n1\n487981126 807704942\n", "2\n1\n96 1\n", "3\n1 1\n3 1 4\n", "2\n1\n350985930 964211398\n", "10\n1 2 1 1 1 1 1 1 1\n841306067 40156990 957137872 1331398079 930194285 483020948 155552934 851771372 401782261 183067980\n", "2\n1\n20 32\n", "2\n1\n340668542 688701773\n", "2\n1\n114 37\n", "50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 24 44 45 46 47 48 49\n67 8 36 45 5 65 80 3 0 96 13 98 96 46 87 9 31 16 36 0 84 4 65 64 96 70 10 72 85 53 28 67 57 50 38 4 97 16 63 22 4 62 81 50 83 52 82 84 63 71\n", "2\n1\n136 73\n", "2\n1\n28 89\n", "10\n1 2 3 4 5 6 7 8 9\n439376488 20293494 105606574 673623641 152420817 275964457 326794512 710530240 321931146 608064601\n", "10\n1 2 3 4 5 6 5 8 9\n13 35 33 86 1 73 15 3 74 100\n", "2\n1\n1727903985 1183960521\n", "2\n1\n20660359 36087306\n", "2\n1\n487981126 218912700\n", "2\n1\n509586468 964211398\n", "2\n1\n20 21\n", "2\n1\n340668542 1134635738\n", "50\n1 2 3 4 5 2 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 24 44 45 46 47 48 49\n67 8 36 45 5 65 80 3 0 96 13 98 96 46 87 9 31 16 36 0 84 4 65 64 96 70 10 72 85 53 28 67 57 50 38 4 97 16 63 22 4 62 81 50 83 52 82 84 63 71\n", "2\n1\n161 73\n", "2\n1\n31 89\n", "10\n1 2 3 4 5 6 7 8 9\n439376488 20293494 105606574 673623641 152420817 275964457 326794512 710530240 321931146 670578843\n", "3\n1 2\n4 1 0\n", "2\n1\n1543987666 1183960521\n", "2\n1\n518317358 964211398\n", "2\n1\n4 21\n", "2\n1\n340668542 1714165958\n", "50\n1 2 3 4 5 2 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 24 44 45 46 47 48 49\n67 8 36 45 5 65 80 3 0 96 13 98 96 46 87 9 31 16 36 0 84 4 65 64 96 70 10 72 85 53 22 67 57 50 38 4 97 16 63 22 4 62 81 50 83 52 82 84 63 71\n", "2\n1\n1 73\n", "10\n1 2 3 4 5 6 7 8 9\n327295460 20293494 105606574 673623641 152420817 275964457 326794512 710530240 321931146 670578843\n", "10\n1 1 2 1 4 3 6 1 5\n81 1 0 0 0 1 0 0 0 0\n", "2\n1\n518317358 473183459\n", "10\n1 1 1 1 1 1 2 1 1\n145 8 36 51 50 106 6 56 7 26\n", "10\n1 2 3 1 3 4 2 4 6\n68 2 44 83 74 92 32 69 4 16\n", "2\n1\n2 21\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5 78 71 17 56 55 65 58 126 71 23 22 82 99 79 54 10 6 52 68 99 40 21 100 47 11 72 72 13 45 1 82 73 60 51 16 38 82 17 64 94 39 58 51 99 7 92 95 13 92\n", "3\n1 1\n4 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n0 0 63 70 92 75 4 96 52 33 86 57 53 85 91 62 23 0 28 37 41 69 26 64 7 100 41 19 70 60 1 50 12 98 62 45 77 15 72 25 84 70 38 28 21 58 51 23 40 88 34 85 36 95 65 14 4 13 98 73 93 78 70 29 44 73 49 60 54 49 48 45 99 91 19 67 44 42 14 10 83 74 78 67 61 91 92 23 94 59 36 82 61 33 59 59 80 95 25 33\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n51 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n79 29 58 69 56 0 57 27 97 99 80 98 54 7 93 65 29 34 88 74 23 0 23 60 93 24 27 66 42 40 29 89 7 98 49 18 29 49 64 59 56 43 33 88 33 72 81 0 54 70 91 33 61 27 55 37 43 27 90 87 88 90 38 51 66 84 78 47 8 98 1 18 36 23 99 30 61 76 15 30 85 15 41 53 41 67 22 34 42 99 100 31 18 20 26 98 11 38 39 82\n", "3\n1 1\n0 1 3\n", "50\n1 1 2 3 1 2 4 6 3 7 7 5 12 13 7 7 4 10 14 8 18 14 19 22 20 4 17 14 11 12 11 18 19 28 9 27 9 7 7 13 17 24 21 9 33 11 44 45 33\n67 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n", "10\n1 1 1 1 1 1 2 1 1\n145 10 36 51 50 82 8 56 7 26\n", "100\n1 2 1 2 2 5 3 8 9 4 1 7 2 4 6 3 13 2 10 10 17 15 15 9 17 8 18 18 29 7 1 13 32 13 29 22 14 12 24 21 12 31 4 36 5 39 33 6 37 40 2 29 39 42 18 40 26 44 52 22 50 49 1 21 46 59 25 39 38 42 34 45 3 70 57 60 73 76 38 69 38 24 30 40 70 21 38 16 30 41 40 31 11 65 9 46 3 70 85\n50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "10\n1 2 3 1 3 4 2 4 6\n68 2 44 83 74 92 32 51 2 89\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n65 78 71 17 56 55 65 58 64 71 23 22 82 99 79 54 10 6 52 68 99 40 21 100 47 11 72 72 13 45 1 82 73 60 51 16 28 82 17 64 94 39 58 51 99 7 92 95 13 92\n", "10\n1 2 3 1 5 6 7 8 9\n164 0 0 0 0 0 0 0 0 0\n", "10\n1 1 2 1 4 3 6 1 5\n44 0 0 0 0 1 0 0 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1\n71 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "3\n1 2\n4 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n0 0 63 70 92 75 4 96 52 33 86 57 53 85 91 62 23 0 28 37 41 69 26 64 7 100 41 19 70 60 1 50 12 98 62 45 77 15 72 25 84 70 38 28 21 58 51 23 40 88 34 85 36 95 65 14 4 13 98 73 93 78 70 29 44 73 49 60 54 49 48 45 99 91 19 67 44 42 14 10 83 74 78 67 61 91 92 23 94 59 36 82 61 33 59 59 80 95 25 33\n", "50\n1 2 1 4 1 2 1 8 4 1 9 10 9 11 4 7 14 3 10 2 11 4 21 11 12 17 2 2 10 29 13 1 11 4 5 22 36 10 5 11 7 17 12 31 1 1 42 25 46\n13 58 22 90 81 91 48 25 61 76 92 86 89 94 8 97 74 16 21 27 100 92 68 87 67 8 89 61 22 3 86 0 95 89 9 30 88 65 30 42 33 63 67 46 66 17 89 49 60 59\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n51 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n79 29 58 69 56 0 57 27 97 99 80 98 54 7 93 65 29 34 88 74 23 0 23 60 93 24 27 66 42 40 29 89 7 98 49 18 29 49 64 59 56 43 33 88 33 72 81 0 54 70 91 33 61 27 55 37 43 27 90 87 88 90 38 51 66 84 78 47 8 98 0 18 36 23 99 30 61 76 15 30 85 15 41 53 41 67 22 34 42 99 100 31 18 20 26 98 11 38 39 82\n", "3\n1 1\n3 0 4\n", "50\n1 1 2 3 1 2 4 6 3 7 7 5 12 13 7 7 4 10 14 8 18 14 19 22 20 4 17 14 11 12 11 18 19 28 3 27 9 7 7 13 17 24 21 9 33 11 44 45 33\n67 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n", "10\n1 1 1 1 1 1 2 1 1\n145 8 36 51 50 82 8 56 7 26\n", "100\n1 2 1 2 2 5 3 8 9 4 1 7 2 4 6 3 13 2 10 10 17 15 15 9 17 8 18 18 29 7 1 13 32 13 29 22 14 12 24 21 12 31 4 36 5 39 33 6 37 40 2 29 39 42 18 40 26 44 52 22 50 49 1 21 46 59 25 39 38 42 34 45 3 70 57 60 73 76 38 69 38 24 30 40 70 21 38 16 30 41 40 31 11 65 9 46 3 70 85\n50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "10\n1 2 2 1 1 1 1 1 1\n841306067 40156990 957137872 1331398079 930194285 483020948 155552934 851771372 401782261 183067980\n", "10\n1 2 3 1 3 4 2 4 6\n68 2 44 83 74 92 32 69 2 89\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5 78 71 17 56 55 65 58 64 71 23 22 82 99 79 54 10 6 52 68 99 40 21 100 47 11 72 72 13 45 1 82 73 60 51 16 28 82 17 64 94 39 58 51 99 7 92 95 13 92\n", "10\n1 2 3 1 5 6 7 5 9\n164 0 0 0 0 0 0 0 0 0\n", "10\n1 1 2 1 4 3 6 1 5\n44 1 0 0 0 1 0 0 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1\n71 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n0 0 63 70 92 75 4 96 52 33 86 57 53 85 91 62 23 0 28 37 41 69 26 64 7 100 41 19 70 60 1 50 12 98 62 45 77 15 72 25 84 70 38 28 21 58 51 23 40 88 34 85 36 95 65 14 4 13 98 73 93 78 70 29 44 73 49 60 54 49 48 45 99 91 19 67 44 42 14 10 83 74 78 67 61 91 92 23 94 59 36 82 61 33 59 59 80 95 25 33\n", "50\n1 2 1 4 1 2 1 8 4 1 9 10 9 11 4 7 14 3 10 2 11 4 21 11 12 17 2 2 10 29 13 1 11 4 5 22 36 10 10 11 7 17 12 31 1 1 42 25 46\n13 58 22 90 81 91 48 25 61 76 92 86 89 94 8 97 74 16 21 27 100 92 68 87 67 8 89 61 22 3 86 0 95 89 9 30 88 65 30 42 33 63 67 46 66 17 89 49 60 59\n", "3\n1 1\n0 0 4\n", "50\n1 1 2 3 1 2 4 6 3 7 7 5 12 13 7 7 4 10 14 8 18 14 19 22 20 4 17 14 11 12 11 18 19 28 3 27 9 7 7 13 17 24 21 9 33 11 44 45 33\n67 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n", "10\n1 1 1 1 1 1 2 1 1\n145 8 36 51 50 82 6 56 7 26\n"], "output": ["1201096244\n", "3\n", "82\n", "2\n", "131\n", "759804266\n", "997294862\n", "10\n", "989916765\n", "973087287\n", "30\n", "181\n", "55\n", "100\n", "31\n", "1713252451\n", "4262111226\n", "168\n", "1268\n", "179\n", "164\n", "172\n", "3768054407\n", "12\n", "1\n", "384\n", "433\n", "187\n", "2162545698\n", "75089390\n", "1295686068\n", "97\n", "4\n", "1315197328\n", "1331398079\n", "52\n", "1029370315\n", "151\n", "1257\n", "209\n", "117\n", "3634605970\n", "217\n", "2911864506\n", "56747665\n", "706893826\n", "1473797866\n", "41\n", "1475304280\n", "1144\n", "234\n", "120\n", "3697120212\n", "5\n", "2727948187\n", "1482528756\n", "25\n", "2054834500\n", "1141\n", "74\n", "3585039184\n", "21\n", "991500817\n", "106\n", "108\n", "23\n", "126\n", "2\n", "100\n", "2\n", "100\n", "3\n", "3\n", "82\n", "2\n", "181\n", "100\n", "82\n", "12\n", "1\n", "4\n", "100\n", "187\n", "2\n", "100\n", "4\n", "3\n", "82\n", "2\n", "1331398079\n", "181\n", "100\n", "55\n", "12\n", "1\n", "100\n", "187\n", "4\n", "3\n", "82\n"]}, "short_description": "1. One-sentence summary:\nCompute, for each node in a rooted tree, the total of assigned values in its subtree and the subtree\u2019s size, then determine the maximum ceiling of (subtree sum)/(subtree size) across all nodes.\n\n2. Core algorithmic approach:\nA single post-order tree-DP traversal on a parent-pointer tree to accumulate subtree sums and sizes, followed by a linear scan to compute the maximum ceiling ratio.\n\n3. Reusable components:\n- Post-order accumulation using a parent array (or adjacency list) to compute subtree sums and subtree sizes in O(n).\n- Integer ceiling division pattern: ceil(a/b) = (a + b - 1) // b.\n- Single-pass reduction to extract a global extremum (max or min) over computed node values."}
{"name": "23_E. Tree", "description": "Recently Bob invented a new game with a tree (we should remind you, that a tree is a connected graph without cycles): he deletes any (possibly, zero) amount of edges of the tree, and counts the product of sizes of the connected components left after the deletion. Your task is to find out the maximum number that Bob can get in his new game for a given tree.\n\nInput\n\nThe first input line contains integer number n (1 \u2264 n \u2264 700) \u2014 amount of vertices in the tree. The following n - 1 lines contain the description of the edges. Each line contains the pair of vertices' indexes, joined by an edge, ai, bi (1 \u2264 ai, bi \u2264 n). It's guaranteed that the graph described in the input is a tree.\n\nOutput\n\nOutput the only number \u2014 the maximum product of sizes of the connected components, that Bob can get after deleting some of the tree's edges.\n\nExamples\n\nInput\n\n5\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n6\n\nInput\n\n8\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n6 8\n\n\nOutput\n\n18\n\nInput\n\n3\n1 2\n1 3\n\n\nOutput\n\n3", "solution": "from fractions import Fraction\nn = int(input())\n\nadj = [list() for x in  range(n)]\nH = [0] * n\nF = [0] * n\nFoH = [list() for x in range(n)]\nsz = 0\norder = [0] * n\npi = [-1] * n\n\ndef dfs(u, p = -1):\n  global pi, order, sz\n  pi[u] = p\n  for v in adj[u]:\n    if v != p:\n      dfs(v, u)\n  order[sz] = u\n  sz += 1\n\n\nT1 = [0] * n\nT2 = [0] * n\nT3 = [0] * n\n\ndef solve(u, p = -1):\n  global H, F, FoH\n  F[u] = 1\n  for v in adj[u]:\n    if v != p:\n      F[u] *= H[v]\n      FoH[u].append(Fraction(F[v], H[v]))\n  ans = F[u]\n  FoH[u].sort()\n  FoH[u].reverse()\n  pd = 1\n  s = 0\n  for x in FoH[u]:\n    pd *= x\n    s += 1\n    ans = max(ans, int(pd * F[u]) * (s+1))\n  for v in adj[u]:\n    if v != p:\n      pd = 1\n      s = 0\n      for x in FoH[v]:\n        pd *= x\n        s += 1\n        ans = max(ans, int(pd * F[u] * F[v]) // H[v] * (s+2))\n  #print(u+1, ':', FoH[u], ans)\n  H[u] = ans\n\nfor i in range(1, n):\n  u, v = [int(x) for x in input().split()]\n  u -= 1\n  v -= 1\n  adj[u].append(v)\n  adj[v].append(u)\n\ndfs(0)\nfor x in order:\n  solve(x, pi[x])\nprint(H[0])\n\n", "difficulty": 11, "public_tests": {"input": ["5\n1 2\n2 3\n3 4\n4 5\n", "3\n1 2\n1 3\n", "8\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n6 8\n"], "output": ["                                                               6\n", "                                                               3\n", "                                                              18\n"]}, "private_tests": {"input": ["10\n4 8\n10 2\n6 3\n10 9\n2 3\n4 1\n7 10\n2 1\n5 1\n", "5\n1 5\n4 3\n2 4\n4 1\n", "10\n8 10\n5 7\n1 6\n4 9\n3 8\n8 9\n2 3\n5 8\n8 1\n", "15\n4 6\n15 1\n3 8\n15 2\n13 11\n9 10\n14 4\n9 12\n11 6\n8 10\n4 5\n2 11\n7 8\n8 4\n", "50\n45 39\n18 12\n13 6\n48 45\n46 36\n46 8\n40 36\n29 28\n2 18\n43 26\n25 14\n43 31\n13 30\n12 35\n38 42\n20 5\n7 35\n10 50\n27 13\n1 41\n24 21\n25 5\n7 31\n15 45\n32 25\n43 23\n4 50\n46 11\n40 14\n37 21\n50 2\n41 42\n43 30\n14 22\n36 48\n8 24\n49 20\n19 26\n32 10\n35 29\n1 6\n34 33\n29 3\n6 9\n34 39\n5 47\n16 9\n31 44\n33 17\n", "5\n2 3\n3 4\n3 5\n3 1\n", "3\n1 2\n2 3\n", "5\n1 4\n4 5\n4 3\n4 2\n", "2\n2 1\n", "1\n", "5\n2 1\n3 4\n3 5\n5 2\n", "5\n3 2\n1 5\n4 5\n5 3\n"], "output": ["                                                              36\n", "                                                               6\n", "                                                              32\n", "                                                             243\n", "                                                        68024448\n", "                                                               5\n", "                                                               3\n", "                                                               5\n", "                                                               2\n", "                                                               1\n", "                                                               6\n", "                                                               6\n"]}, "generated_tests": {"input": ["10\n8 10\n10 7\n1 6\n4 9\n3 8\n8 9\n2 3\n5 8\n8 1\n", "50\n45 39\n18 12\n13 6\n48 45\n46 36\n46 8\n40 36\n29 28\n2 18\n43 26\n25 14\n43 31\n13 30\n12 35\n38 42\n20 5\n7 35\n10 50\n27 13\n1 41\n24 21\n25 5\n7 31\n15 45\n32 25\n42 23\n4 50\n46 11\n40 14\n37 21\n50 2\n41 42\n43 30\n14 22\n36 48\n8 24\n49 20\n19 26\n32 10\n35 29\n1 6\n34 33\n29 3\n6 9\n34 39\n5 47\n16 9\n31 44\n33 17\n", "5\n2 3\n3 4\n1 5\n3 1\n", "15\n4 6\n15 1\n3 8\n15 2\n13 1\n9 10\n14 4\n9 12\n11 6\n8 10\n4 5\n2 11\n7 8\n8 4\n", "3\n1 3\n2 3\n", "10\n4 8\n10 2\n6 3\n10 9\n2 3\n4 1\n7 8\n2 1\n5 1\n", "50\n45 39\n18 12\n13 6\n48 45\n46 36\n46 8\n40 36\n29 28\n2 18\n43 26\n25 14\n43 31\n13 30\n12 35\n38 42\n20 5\n7 35\n10 50\n27 13\n1 41\n24 21\n25 5\n7 31\n15 45\n32 25\n43 23\n4 50\n46 11\n40 14\n37 21\n50 2\n41 42\n43 30\n14 22\n36 48\n8 24\n49 20\n19 26\n32 10\n35 29\n1 6\n34 33\n29 3\n10 9\n34 39\n5 47\n16 9\n31 44\n33 17\n", "15\n4 6\n15 1\n3 8\n15 2\n13 11\n9 10\n14 4\n2 12\n11 6\n8 10\n4 5\n2 11\n7 8\n8 4\n", "8\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n7 8\n", "5\n3 1\n3 4\n3 5\n5 2\n", "5\n2 3\n5 4\n1 5\n3 1\n", "5\n2 3\n5 4\n1 4\n3 1\n", "5\n4 1\n3 4\n3 5\n5 2\n", "5\n2 1\n3 4\n1 5\n3 1\n", "10\n4 8\n10 2\n6 1\n10 9\n2 3\n4 1\n7 8\n2 1\n5 1\n", "5\n2 1\n3 4\n2 5\n3 1\n", "10\n4 8\n10 1\n6 3\n10 9\n2 3\n4 1\n7 10\n2 1\n5 1\n", "10\n8 10\n5 7\n1 6\n4 9\n3 8\n8 9\n2 3\n7 8\n8 1\n", "5\n2 4\n3 4\n3 5\n3 1\n", "5\n1 4\n3 5\n4 3\n4 2\n", "10\n4 8\n10 2\n6 1\n10 9\n2 3\n4 1\n7 8\n2 1\n5 2\n", "10\n8 10\n5 10\n1 6\n4 9\n3 8\n8 9\n2 3\n7 8\n8 1\n", "5\n2 4\n3 4\n1 5\n3 1\n", "10\n6 8\n10 2\n6 3\n10 9\n2 3\n4 1\n7 10\n2 1\n5 1\n", "5\n2 5\n4 3\n2 4\n4 1\n", "10\n8 10\n5 7\n1 6\n4 5\n3 8\n8 9\n2 3\n5 8\n8 1\n", "5\n1 2\n1 5\n4 5\n5 3\n", "5\n2 3\n1 4\n1 5\n3 1\n", "10\n4 8\n10 4\n6 3\n10 9\n2 3\n4 1\n7 8\n2 1\n5 1\n", "5\n2 1\n3 4\n4 5\n3 1\n", "10\n6 8\n10 2\n6 3\n10 9\n2 3\n4 1\n7 8\n2 1\n5 1\n", "5\n2 5\n4 3\n2 1\n4 1\n", "10\n4 8\n10 2\n6 3\n10 9\n2 3\n4 1\n7 10\n2 1\n5 2\n", "15\n4 6\n15 1\n3 8\n15 2\n13 11\n9 10\n14 4\n9 12\n11 6\n8 10\n4 5\n2 3\n7 8\n8 4\n", "15\n4 6\n15 1\n3 8\n15 2\n13 1\n9 10\n14 4\n9 12\n11 6\n8 10\n4 5\n2 11\n7 3\n8 4\n", "5\n2 3\n2 4\n1 5\n3 1\n", "10\n4 8\n10 3\n6 1\n10 9\n2 3\n4 1\n7 8\n2 1\n5 2\n", "10\n4 8\n10 4\n6 3\n10 9\n2 3\n4 1\n7 8\n3 1\n5 1\n", "5\n1 5\n4 3\n2 1\n4 1\n", "15\n4 6\n15 1\n3 8\n15 2\n13 1\n9 10\n14 4\n9 12\n11 6\n8 10\n4 5\n2 11\n7 3\n8 1\n", "10\n4 8\n10 4\n6 3\n10 9\n2 3\n4 1\n7 10\n3 1\n5 1\n", "50\n45 39\n18 12\n13 6\n48 45\n46 36\n46 8\n40 36\n29 28\n4 18\n43 26\n25 14\n43 31\n13 30\n12 35\n38 42\n20 5\n7 35\n10 50\n27 13\n1 41\n24 21\n25 5\n7 31\n15 45\n32 25\n43 23\n4 50\n46 11\n40 14\n37 21\n50 2\n41 42\n43 30\n14 22\n36 48\n8 24\n49 20\n19 26\n32 10\n35 29\n1 6\n34 33\n29 3\n6 9\n34 39\n5 47\n16 9\n31 44\n33 17\n", "5\n1 2\n2 3\n2 4\n4 5\n", "5\n2 3\n3 4\n1 5\n2 1\n", "5\n3 1\n1 4\n3 5\n5 2\n", "5\n2 3\n5 4\n2 4\n3 1\n", "10\n4 8\n10 2\n6 3\n10 9\n2 3\n4 1\n7 8\n2 1\n5 2\n", "10\n4 8\n10 2\n6 1\n2 9\n2 3\n4 1\n7 8\n2 1\n5 1\n", "10\n8 10\n5 7\n1 6\n4 5\n3 8\n8 9\n2 3\n7 8\n8 1\n"], "output": ["32\n", "76527504\n", "6\n", "243\n", "3\n", "36\n", "68024448\n", "216\n", "18\n", "6\n", "6\n", "6\n", "6\n", "6\n", "36\n", "6\n", "36\n", "32\n", "6\n", "6\n", "36\n", "32\n", "6\n", "36\n", "6\n", "36\n", "6\n", "6\n", "36\n", "6\n", "36\n", "6\n", "36\n", "243\n", "243\n", "6\n", "36\n", "36\n", "6\n", "243\n", "36\n", "68024448\n", "6\n", "6\n", "6\n", "6\n", "36\n", "36\n", "36\n"]}, "short_description": "1. One-sentence summary  \nPerforms a bottom-up traversal on an unrooted tree to compute at the root the maximum achievable score defined as a product of selected subtree contributions times the number of those selections.\n\n2. Core algorithmic approach  \nTree dynamic programming with a post-order DFS and a greedy selection step: for each node, it gathers its children\u2019s DP ratios, sorts them in descending order, and checks all prefixes to maximize \u201cproduct \u00d7 count\u201d (and also considers one extra combination involving a grandchild).\n\n3. Reusable components  \n- Post-order DFS that records a processing order array and parent pointers for any tree DP.  \n- The pattern of collecting child contributions as fractions (or ratios), sorting them, and then scanning prefixes to optimize a \u201cproduct \u00d7 subset size\u201d objective.  \n- Use of adjacency lists with parent checks to implement rooted-tree DP without rerunning DFS from scratch."}
{"name": "1498_F. Christmas Game", "description": "Alice and Bob are going to celebrate Christmas by playing a game with a tree of presents. The tree has n nodes (numbered 1 to n, with some node r as its root). There are a_i presents are hanging from the i-th node.\n\nBefore beginning the game, a special integer k is chosen. The game proceeds as follows:\n\n  * Alice begins the game, with moves alternating each turn;\n  * in any move, the current player may choose some node (for example, i) which has depth at least k. Then, the player picks some positive number of presents hanging from that node, let's call it m (1 \u2264 m \u2264 a_i);\n  * the player then places these m presents on the k-th ancestor (let's call it j) of the i-th node (the k-th ancestor of vertex i is a vertex j such that i is a descendant of j, and the difference between the depth of j and the depth of i is exactly k). Now, the number of presents of the i-th node (a_i) is decreased by m, and, correspondingly, a_j is increased by m;\n  * Alice and Bob both play optimally. The player unable to make a move loses the game.\n\n\n\nFor each possible root of the tree, find who among Alice or Bob wins the game.\n\nNote: The depth of a node i in a tree with root r is defined as the number of edges on the simple path from node r to node i. The depth of root r itself is zero.\n\nInput\n\nThe first line contains two space-separated integers n and k (3 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 20).\n\nThe next n-1 lines each contain two integers x and y (1 \u2264 x, y \u2264 n, x \u2260 y), denoting an undirected edge between the two nodes x and y. These edges form a tree of n nodes.\n\nThe next line contains n space-separated integers denoting the array a (0 \u2264 a_i \u2264 10^9).\n\nOutput\n\nOutput n integers, where the i-th integer is 1 if Alice wins the game when the tree is rooted at node i, or 0 otherwise.\n\nExample\n\nInput\n\n\n5 1\n1 2\n1 3\n5 2\n4 3\n0 3 2 4 4\n\n\nOutput\n\n\n1 0 0 1 1 \n\nNote\n\nLet us calculate the answer for sample input with root node as 1 and as 2.\n\nRoot node 1\n\nAlice always wins in this case. One possible gameplay between Alice and Bob is:\n\n  * Alice moves one present from node 4 to node 3. \n  * Bob moves four presents from node 5 to node 2. \n  * Alice moves four presents from node 2 to node 1. \n  * Bob moves three presents from node 2 to node 1. \n  * Alice moves three presents from node 3 to node 1. \n  * Bob moves three presents from node 4 to node 3. \n  * Alice moves three presents from node 3 to node 1. \n\n\n\nBob is now unable to make a move and hence loses.\n\nRoot node 2\n\nBob always wins in this case. One such gameplay is:\n\n  * Alice moves four presents from node 4 to node 3. \n  * Bob moves four presents from node 5 to node 2. \n  * Alice moves six presents from node 3 to node 1. \n  * Bob moves six presents from node 1 to node 2. \n\n\n\nAlice is now unable to make a move and hence loses.", "solution": "import sys\nfrom sys import stdin\nfrom collections import deque\n\nn,k = map(int,stdin.readline().split())\nN,K = n,k\n\nlis = [ [] for i in range(N) ]\nfor i in range(N-1):\n    x,y = map(int,stdin.readline().split())\n    x -= 1\n    y -= 1\n\n    lis[x].append(y)\n    lis[y].append(x)\n\na = list(map(int,stdin.readline().split()))\n\n#bfs\np = [i for i in range(N)]\nvlis = []\nq = deque([0])\nwhile q:\n    v = q.popleft()\n    vlis.append(v)\n\n    for nex in lis[v]:\n        if nex != p[v]:\n            p[nex] = v\n            q.append(nex)\n\n#dp-first\ndp = [[0] * (2*k) for i in range(N)]\nfor ind in range(N-1,-1,-1):\n    v = vlis[ind]\n    dp[v][0] ^= a[v]\n\n    for nex in lis[v]:\n        if nex != p[v]:\n            for nk in range(2*k):\n                dp[v][(nk+1) % (2*k)] ^= dp[nex][nk]\n\n#dp2\nans = [None] * N\nfor v in vlis:\n\n    if v == 0:\n        now = 0\n        for i in range(k,2*k):\n            now ^= dp[v][i]\n        ans[v] = min(now,1)\n\n    else:\n        pcopy = [dp[p[v]][i] for i in range(2*k)]\n        for i in range(2*k):\n            pcopy[(i+1) % (2*k)] ^= dp[v][i]\n        for i in range(2*k):\n            dp[v][(i+1) % (2*k)] ^= pcopy[i]\n\n        now = 0\n        for i in range(k,2*k):\n            now ^= dp[v][i]\n        ans[v] = min(now,1)\n\nprint (*ans)", "difficulty": 12, "public_tests": {"input": ["5 1\n1 2\n1 3\n5 2\n4 3\n0 3 2 4 4\n"], "output": ["\n1 0 0 1 1 "]}, "private_tests": {"input": ["3 3\n1 3\n1 2\n1 2 3\n", "3 1\n3 1\n3 2\n1 2 3\n", "4 3\n1 2\n1 3\n3 4\n1000000000 999999999 0 1\n", "3 20\n1 2\n1 3\n1 2 3\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 3 4 5 0\n"], "output": ["0 0 0 ", "1 1 1 ", "0 1 0 1 ", "0 0 0 ", "0 0 0 0 0 0 "]}, "generated_tests": {"input": ["3 3\n1 3\n1 2\n1 3 3\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 3 0 5 0\n", "3 1\n1 3\n1 2\n1 4 3\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 4 4 5 0\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 4 4 4 0\n", "5 1\n1 2\n1 3\n5 1\n4 3\n0 3 2 4 4\n", "3 1\n1 3\n1 2\n0 4 3\n", "6 1\n1 2\n1 4\n3 4\n2 5\n5 6\n1 3 4 4 5 0\n", "1 7\n1 3\n1 2\n1 2 0\n", "3 2\n2 3\n1 3\n2 5 3\n", "6 1\n1 2\n1 3\n3 4\n4 5\n5 6\n1 0 4 6 4 0\n", "3 2\n2 1\n1 3\n2 5 3\n", "3 2\n2 1\n1 3\n2 0 3\n", "4 3\n1 2\n1 3\n3 4\n1000000000 999999999 0 2\n", "5 1\n1 2\n1 3\n5 2\n4 3\n0 3 0 4 4\n", "6 1\n1 2\n1 3\n3 4\n2 5\n3 6\n1 3 4 4 5 0\n", "3 2\n2 1\n2 3\n2 1 3\n", "6 2\n1 2\n1 3\n3 4\n2 5\n3 6\n1 3 4 1 4 2\n", "6 1\n1 2\n1 4\n3 4\n2 5\n5 6\n1 5 8 4 5 1\n", "2 7\n1 2\n1 0\n1 2 0\n", "6 1\n1 2\n2 3\n6 4\n2 5\n2 6\n0 1 4 6 4 0\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 5 4 4 5 1\n", "4 3\n1 2\n1 3\n1 4\n1000000000 999999999 0 2\n", "2 1\n1 2\n1 3\n3 4\n2 5\n5 6\n0 0 0 4 5 0\n", "4 1\n1 2\n1 3\n1 4\n1000000000 999999999 0 2\n", "3 3\n1 3\n1 2\n1 3 4\n", "3 3\n1 3\n1 2\n1 4 3\n", "3 20\n1 2\n1 3\n1 4 3\n", "3 3\n1 3\n1 2\n1 3 0\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 3 1 5 0\n", "3 6\n1 3\n1 2\n1 2 3\n", "3 3\n1 3\n1 2\n2 4 3\n", "3 3\n1 3\n1 2\n1 3 -1\n", "3 1\n1 3\n1 2\n2 4 3\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 4 4 5 1\n", "3 6\n1 3\n1 2\n2 4 3\n", "3 4\n1 3\n1 2\n1 3 -1\n", "3 10\n1 3\n1 2\n2 4 3\n", "3 10\n2 3\n1 2\n2 4 3\n", "3 10\n2 3\n1 2\n2 4 0\n", "3 3\n1 3\n1 2\n1 6 3\n", "3 1\n3 1\n1 2\n1 2 3\n", "3 20\n1 2\n1 3\n0 2 3\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 0 4 5 0\n", "3 3\n1 3\n1 2\n1 4 4\n", "3 4\n1 3\n1 2\n1 4 3\n", "3 20\n1 2\n1 3\n1 5 3\n", "3 4\n1 3\n1 2\n1 3 0\n", "3 1\n2 3\n1 2\n1 4 3\n", "3 7\n1 3\n1 2\n1 2 3\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 4 1 5 1\n", "3 6\n1 3\n1 2\n3 4 3\n", "3 4\n1 3\n1 2\n2 3 -1\n", "3 10\n1 3\n1 2\n2 5 3\n", "3 10\n2 3\n1 2\n3 4 3\n", "3 10\n2 3\n1 2\n4 4 0\n", "3 3\n1 3\n1 2\n1 1 3\n", "3 5\n1 2\n1 3\n1 5 3\n", "3 4\n1 3\n1 2\n1 0 0\n", "3 7\n1 3\n1 2\n1 2 1\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 4 6 4 0\n", "3 7\n1 3\n1 2\n2 3 -1\n", "3 10\n2 3\n1 2\n2 5 3\n", "3 10\n2 3\n1 2\n3 3 3\n", "3 10\n2 3\n1 2\n4 7 0\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 5 4 6 4 0\n", "3 10\n2 3\n1 3\n2 5 3\n", "3 5\n2 3\n1 2\n4 7 0\n", "3 5\n2 3\n1 2\n2 7 0\n", "3 20\n1 2\n2 3\n1 2 3\n", "6 1\n1 2\n1 3\n1 4\n2 5\n5 6\n1 3 3 4 5 0\n", "3 3\n1 3\n1 2\n0 3 4\n", "3 20\n1 2\n1 3\n1 1 3\n", "3 10\n2 3\n1 2\n2 4 2\n", "3 10\n1 3\n1 2\n2 4 0\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n0 3 0 4 5 0\n", "3 4\n2 3\n1 2\n1 3 0\n", "3 1\n2 3\n1 2\n1 4 5\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 4 1 4 1\n", "3 7\n1 3\n1 2\n2 5 3\n", "3 10\n2 3\n1 3\n3 4 3\n", "3 7\n1 3\n1 2\n1 2 0\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 1 4 6 4 0\n", "3 10\n2 3\n1 2\n3 2 3\n", "3 17\n2 3\n1 3\n2 5 3\n", "3 5\n2 3\n1 2\n7 7 0\n", "3 5\n1 3\n1 2\n2 7 0\n", "3 10\n2 3\n1 2\n3 4 2\n", "6 2\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 4 1 4 1\n", "3 10\n2 3\n1 3\n6 4 3\n", "6 1\n1 2\n1 3\n3 4\n4 5\n5 6\n1 1 4 6 4 0\n", "3 10\n2 3\n1 2\n4 2 3\n", "3 10\n2 3\n1 3\n6 1 3\n", "1 7\n2 3\n1 2\n1 2 0\n", "3 2\n2 1\n1 3\n2 1 3\n", "3 20\n1 2\n1 3\n1 2 5\n", "3 1\n1 3\n1 2\n1 3 3\n", "1 1\n1 3\n1 2\n1 4 3\n", "6 1\n1 2\n2 3\n3 4\n2 5\n5 6\n1 3 3 1 5 0\n", "3 6\n1 3\n1 2\n1 4 3\n", "3 4\n1 3\n1 2\n2 4 3\n", "3 1\n2 3\n1 2\n2 4 3\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 8 4 5 1\n", "1 6\n1 3\n1 2\n2 4 3\n", "3 10\n2 3\n1 2\n2 6 3\n", "3 3\n1 3\n1 2\n1 12 3\n", "3 1\n3 1\n1 2\n1 4 3\n", "3 20\n1 2\n1 3\n-1 2 3\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n2 3 0 4 5 0\n", "3 3\n1 3\n1 2\n1 8 4\n", "3 4\n2 3\n1 2\n1 4 3\n", "3 4\n1 3\n1 2\n1 6 0\n", "3 1\n2 3\n1 2\n1 4 0\n", "3 6\n1 3\n1 2\n3 4 6\n", "3 4\n1 3\n1 2\n3 3 -1\n", "3 10\n1 3\n1 2\n2 5 2\n", "3 10\n1 3\n1 2\n3 4 3\n", "3 2\n1 2\n1 3\n1 5 3\n", "3 4\n1 3\n1 2\n1 1 0\n", "3 2\n1 3\n1 2\n1 2 1\n", "6 1\n1 2\n2 3\n3 4\n2 5\n5 6\n1 3 4 6 4 0\n", "3 5\n1 3\n1 2\n2 3 -1\n", "3 10\n2 3\n1 2\n3 0 3\n", "1 10\n2 3\n1 2\n4 7 0\n", "3 10\n2 3\n1 3\n2 5 5\n", "3 5\n2 3\n1 2\n1 7 0\n", "6 1\n1 2\n1 4\n3 1\n2 5\n5 6\n1 3 4 4 5 0\n", "3 10\n1 3\n1 2\n2 4 2\n", "3 20\n1 3\n1 2\n2 4 0\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n0 0 0 4 5 0\n", "3 4\n1 3\n1 2\n1 3 1\n", "3 1\n2 3\n1 2\n2 4 5\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 4 2 4 1\n", "3 7\n1 3\n1 2\n3 5 3\n", "3 10\n2 1\n1 3\n3 4 3\n", "6 1\n1 2\n2 3\n3 4\n2 5\n5 6\n1 1 4 6 4 0\n", "3 10\n2 3\n1 2\n3 1 3\n", "1 17\n2 3\n1 3\n2 5 3\n", "3 5\n2 3\n1 2\n7 0 0\n", "6 2\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 4 1 4 2\n", "3 10\n2 3\n1 3\n6 0 3\n", "1 7\n1 2\n1 2\n1 2 0\n", "3 2\n2 3\n1 3\n3 5 3\n", "1 7\n2 3\n1 2\n1 2 1\n", "6 1\n1 2\n2 3\n3 4\n4 5\n5 6\n1 0 4 6 4 0\n", "3 2\n2 1\n1 3\n0 0 3\n", "3 20\n1 2\n1 3\n1 1 5\n", "5 1\n1 2\n1 3\n5 2\n4 3\n0 3 0 4 1\n", "3 2\n1 3\n1 2\n1 3 3\n", "1 1\n2 3\n1 2\n1 4 3\n", "3 6\n1 3\n1 2\n0 4 3\n", "3 4\n1 3\n1 2\n2 6 3\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 5 8 4 5 1\n", "1 6\n2 3\n1 2\n2 4 3\n", "3 14\n2 3\n1 2\n2 6 3\n", "3 3\n1 3\n1 2\n1 12 6\n", "3 2\n3 1\n1 2\n1 4 3\n", "3 3\n1 3\n1 2\n2 8 4\n", "3 4\n1 3\n1 2\n0 6 0\n", "3 4\n1 3\n1 2\n3 3 -2\n", "3 2\n1 2\n1 3\n1 5 5\n", "3 2\n1 3\n1 2\n1 3 1\n", "6 1\n1 2\n2 3\n3 4\n4 5\n5 6\n1 3 4 6 4 0\n", "3 5\n1 3\n1 2\n2 3 -2\n", "3 10\n2 3\n1 2\n3 0 1\n", "1 10\n2 3\n1 2\n4 0 0\n", "3 5\n2 3\n1 2\n1 7 -1\n", "3 1\n2 3\n1 2\n2 4 0\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 4 1 2 1\n", "3 19\n2 1\n1 3\n3 4 3\n", "6 1\n1 2\n2 3\n6 4\n2 5\n5 6\n1 1 4 6 4 0\n", "1 17\n2 3\n1 3\n2 5 4\n", "3 5\n2 3\n1 2\n7 0 1\n", "3 10\n2 1\n1 3\n6 0 3\n", "1 7\n1 2\n1 0\n1 2 0\n", "1 6\n2 3\n1 2\n1 2 1\n", "3 2\n2 1\n2 3\n3 1 3\n", "1 1\n2 3\n1 2\n1 3 3\n", "3 6\n1 3\n1 2\n-1 4 3\n", "1 6\n0 3\n1 2\n2 4 3\n", "3 14\n2 3\n1 2\n3 6 3\n", "3 3\n1 3\n1 2\n1 12 9\n", "3 2\n3 1\n1 2\n0 4 3\n", "3 3\n2 3\n1 2\n2 8 4\n", "3 8\n1 3\n1 2\n0 6 0\n", "6 1\n1 2\n2 3\n3 4\n4 5\n5 6\n1 1 4 6 4 0\n", "1 14\n2 3\n1 2\n4 0 0\n", "6 1\n1 2\n1 3\n3 4\n2 5\n5 6\n1 3 8 1 2 1\n", "6 1\n1 2\n2 3\n6 4\n2 5\n5 6\n0 1 4 6 4 0\n", "1 17\n2 3\n1 3\n2 7 4\n", "3 5\n2 3\n1 2\n7 0 -1\n", "6 2\n1 2\n1 3\n3 4\n2 5\n3 6\n1 3 4 1 0 2\n", "3 10\n2 1\n1 3\n6 0 6\n", "1 1\n2 3\n1 2\n0 3 3\n", "3 6\n1 3\n1 2\n-1 7 3\n", "1 9\n1 3\n1 2\n2 4 3\n", "3 3\n2 3\n1 2\n1 12 9\n", "3 3\n2 3\n1 2\n2 8 1\n", "1 14\n2 6\n1 2\n4 0 0\n", "1 17\n2 3\n1 6\n2 7 4\n"], "output": ["0 0 0\n", "0 1 1 0 0 1\n", "1 1 1\n", "1 0 0 1 1 0\n", "1 1 1 1 1 1\n", "1 1 1 1 1\n", "1 0 0\n", "1 0 1 0 1 0\n", "0\n", "1 1 0\n", "0 1 1 0 1 0\n", "0 1 1\n", "0 1 0\n", "0 1 0 1\n", "1 0 0 1 1\n", "1 0 0 1 1 1\n", "1 0 1\n", "1 1 1 0 1 1\n", "0 1 0 1 0 1\n", "0 0\n", "1 0 1 0 1 1\n", "0 0 0 0 0 0\n", "0 0 0 0\n", "1 1\n", "1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 1 1 0 0 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "1 1 1\n", "1 0 0 1 1 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "1 1 1\n", "0 0 0\n", "1 0 0 1 1 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "1 1 1\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "1 1 1\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0\n", "0 1 1\n", "0 0 0\n", "0 1 1\n", "0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "1 1 1\n", "1 0 0 1 1 0\n", "0\n", "0 0 0\n", "0 0 0\n", "1 1 1\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "1 1 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 1 1\n", "0 0 0\n", "0 1 1\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0\n", "0 0 0\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0 1 1 0 0 1\n", "0 0 0\n", "1 1 1\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0\n", "0 0 0\n", "1 1 1 1 1 1\n", "0 0 0\n", "0\n", "1 1 0\n", "0\n", "1 1 1 1 1 1\n", "0 1 0\n", "0 0 0\n", "1 1 1 1 1\n", "0 1 1\n", "0\n", "0 0 0\n", "0 0 0\n", "1 0 0 1 1 0\n", "0\n", "0 0 0\n", "0 0 0\n", "0 1 1\n", "0 0 0\n", "0 0 0\n", "0 0 0\n", "0 1 1\n", "0 1 1\n", "1 1 1 1 1 1\n", "0 0 0\n", "0 0 0\n", "0\n", "0 0 0\n", "1 1 1\n", "1 1 1 1 1 1\n", "0 0 0\n", "1 1 1 1 1 1\n", "0\n", "0 0 0\n", "0 0 0\n", "0\n", "0\n", "1 0 1\n", "0\n", "0 0 0\n", "0\n", "0 0 0\n", "0 0 0\n", "0 1 1\n", "0 0 0\n", "0 0 0\n", "1 1 1 1 1 1\n", "0\n", "1 1 1 1 1 1\n", "1 1 1 1 1 1\n", "0\n", "0 0 0\n", "1 1 1 0 1 1\n", "0 0 0\n", "0\n", "0 0 0\n", "0\n", "0 0 0\n", "0 0 0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary  \nCompute, for every node in a tree, a Boolean indicator based on the XOR of node-weights whose distances from the root (mod 2k) fall into a specified range, efficiently aggregating contributions both in subtrees and from \u201cabove\u201d via a rerooting technique.\n\n2. Core algorithmic approach  \nTree DP with rerooting:  \n- First pass (\u201cpost-order\u201d over a BFS-derived list) accumulates subtree contributions in a circular array of length 2k, where index i stores the XOR of all nodes at distance \u2261 i mod 2k below the current node.  \n- Second pass re-roots by \u201cremoving\u201d a child\u2019s contribution from its parent\u2019s DP table (shifting indices by +1 mod 2k) and \u201cadding\u201d the parent\u2019s adjusted table into the child, preserving the same circular structure.\n\n3. Reusable components  \n- BFS to compute a parent array and a processing order for tree DP.  \n- Circular-buffer DP state and shift operation: storing depth-indexed aggregates mod 2k and rolling them by one to move all contributions downwards/upwards.  \n- Rerooting template: subtract a child\u2019s DP from the parent\u2019s state and then merge the modified parent state into the child\u2019s DP to obtain full-tree information at each node."}
{"name": "700_B. Connecting Universities", "description": "Treeland is a country in which there are n towns connected by n - 1 two-way road such that it's possible to get from any town to any other town. \n\nIn Treeland there are 2k universities which are located in different towns. \n\nRecently, the president signed the decree to connect universities by high-speed network.The Ministry of Education understood the decree in its own way and decided that it was enough to connect each university with another one by using a cable. Formally, the decree will be done! \n\nTo have the maximum sum in the budget, the Ministry decided to divide universities into pairs so that the total length of the required cable will be maximum. In other words, the total distance between universities in k pairs should be as large as possible. \n\nHelp the Ministry to find the maximum total distance. Of course, each university should be present in only one pair. Consider that all roads have the same length which is equal to 1. \n\nInput\n\nThe first line of the input contains two integers n and k (2 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 n / 2) \u2014 the number of towns in Treeland and the number of university pairs. Consider that towns are numbered from 1 to n. \n\nThe second line contains 2k distinct integers u1, u2, ..., u2k (1 \u2264 ui \u2264 n) \u2014 indices of towns in which universities are located. \n\nThe next n - 1 line contains the description of roads. Each line contains the pair of integers xj and yj (1 \u2264 xj, yj \u2264 n), which means that the j-th road connects towns xj and yj. All of them are two-way roads. You can move from any town to any other using only these roads. \n\nOutput\n\nPrint the maximum possible sum of distances in the division of universities into k pairs.\n\nExamples\n\nInput\n\n7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n\n\nOutput\n\n6\n\n\nInput\n\n9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n\n\nOutput\n\n9\n\nNote\n\nThe figure below shows one of possible division into pairs in the first test. If you connect universities number 1 and 6 (marked in red) and universities number 2 and 5 (marked in blue) by using the cable, the total distance will equal 6 which will be the maximum sum in this example. \n\n<image>", "solution": "def bfs(source):\n\n    q = [0] * (n + 1);\n\n    fa = [-1] * n\n\n    l, r = [1] * 2\n\n    fa[source] = source\n\n    q[1] = source\n\n    while l <= r:\n\n        x = q[l]\n\n        l += 1\n\n        for y in e[x]:\n\n            if  fa[y] == -1:\n\n                fa[y] = x\n\n                r += 1\n\n                q[r] = y\n\n    i = r;\n\n    while i >= 1:\n\n        x = q[i]\n\n        for y in e[x]:\n\n            if fa[y] == x:\n\n                sum[x] += sum[y]\n\n                dp[x] += dp[y] + min(sum[y], m - sum[y])\n\n        i -= 1\n\n\n\nn, m =[int(x) for x in input().split()]\n\nm <<= 1\n\nt = [int(x) for x in input().split()]\n\ne = [list() for i in range(n)]\n\nsum = [0] * n\n\ndp = [0] * n\n\n#print(len(e), e)\n\nfor i in range(n - 1):\n\n    x, y = [int(a) for a in input().split()]\n\n    e[x - 1].append(y - 1)\n\n    e[y - 1].append(x - 1)\n\nfor x in t:\n\n    sum[x - 1] = 1\n\nbfs(0)\n\nprint(dp[0])\n\n\n\n# Made By Mostafa_Khaled", "difficulty": 8, "public_tests": {"input": ["9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n", "7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n"], "output": ["9\n", "6\n"]}, "private_tests": {"input": ["4 2\n1 3 2 4\n1 2\n4 3\n1 4\n", "41 3\n11 10 15 35 34 6\n28 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n8 17\n19 18\n40 19\n15 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n", "6 2\n6 4 2 5\n3 2\n1 3\n2 4\n1 5\n5 6\n", "6 3\n4 5 2 3 6 1\n4 2\n2 3\n1 4\n4 5\n5 6\n", "6 3\n4 5 2 6 3 1\n6 2\n1 3\n1 4\n1 5\n1 6\n", "6 2\n6 5 4 1\n3 2\n1 3\n5 4\n3 5\n1 6\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n4 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "35 15\n6 12 32 18 11 10 29 9 30 27 31 14 8 24 28 25 19 15 21 3 4 1 33 22 23 17 16 13 7 2\n1 2\n20 3\n1 4\n20 5\n20 6\n1 7\n13 8\n4 9\n1 10\n1 11\n1 12\n1 13\n18 14\n10 15\n1 16\n16 17\n1 18\n1 19\n1 20\n20 21\n1 22\n27 23\n25 24\n1 25\n20 26\n20 27\n18 28\n4 29\n13 30\n4 31\n1 32\n20 33\n1 34\n4 35\n", "6 1\n4 5\n1 2\n1 3\n1 4\n1 5\n1 6\n", "5 1\n1 2\n1 2\n2 3\n3 4\n4 5\n", "6 1\n4 6\n5 2\n1 3\n1 4\n4 5\n3 6\n", "6 3\n3 4 2 6 1 5\n3 2\n6 3\n3 4\n2 5\n1 6\n", "6 1\n4 1\n5 2\n1 3\n3 4\n4 5\n5 6\n", "3 1\n2 1\n1 2\n2 3\n", "6 2\n4 5 3 2\n1 2\n1 3\n6 4\n1 5\n1 6\n", "4 1\n3 2\n1 2\n2 3\n2 4\n", "5 1\n2 3\n1 2\n5 3\n1 4\n4 5\n", "5 2\n1 2 3 4\n1 2\n2 3\n2 4\n1 5\n", "2 1\n1 2\n1 2\n", "2 1\n2 1\n1 2\n"], "output": ["4\n", "16\n", "8\n", "7\n", "6\n", "6\n", "59\n", "46\n", "2\n", "1\n", "3\n", "7\n", "2\n", "1\n", "5\n", "1\n", "4\n", "3\n", "1\n", "1\n"]}, "generated_tests": {"input": ["6 2\n6 1 2 5\n3 2\n1 3\n2 4\n1 5\n5 6\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n8 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "5 1\n1 2\n1 3\n2 3\n3 4\n4 5\n", "30 6\n15 17 2 5 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n8 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "41 3\n11 10 15 35 34 6\n28 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n8 17\n16 18\n40 19\n15 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n", "6 1\n5 1\n5 2\n1 3\n3 4\n4 5\n5 6\n", "6 2\n4 5 3 2\n1 2\n1 3\n6 4\n1 5\n2 6\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n25 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n8 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n1 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "5 1\n1 2\n1 3\n2 1\n3 5\n4 5\n", "6 2\n6 5 4 1\n3 2\n1 2\n5 4\n3 5\n1 6\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n4 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n4 28\n23 29\n4 30\n", "30 6\n15 17 2 5 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n8 10\n28 11\n13 12\n6 20\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "41 3\n11 10 15 13 34 6\n28 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n8 17\n16 18\n40 19\n15 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n25 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n8 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n13 19\n19 20\n1 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n4 10\n28 11\n13 12\n6 13\n23 14\n5 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n4 28\n23 29\n4 30\n", "30 6\n15 17 2 5 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n7 10\n28 11\n13 12\n6 20\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "41 3\n11 10 15 35 34 6\n28 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n8 17\n19 18\n40 19\n15 20\n6 38\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n", "6 3\n3 4 2 6 1 5\n3 2\n1 3\n3 4\n2 5\n1 6\n", "30 6\n15 17 2 5 6 30 13 8 10 24 1 12\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n7 10\n28 11\n13 12\n6 20\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "30 6\n15 17 2 5 6 30 13 8 10 24 1 12\n23 2\n26 3\n22 4\n7 5\n1 11\n17 7\n29 8\n30 9\n7 10\n28 11\n13 12\n6 20\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n6 5\n1 6\n17 7\n19 8\n30 9\n4 10\n28 11\n13 12\n6 13\n23 14\n25 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n4 28\n23 29\n4 30\n", "9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n3 1\n2 8\n", "30 6\n15 17 2 23 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n8 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n1 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n8 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n1 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "5 1\n1 2\n1 3\n2 3\n3 5\n4 5\n", "41 3\n11 10 15 35 34 6\n28 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n2 17\n16 18\n40 19\n15 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n", "6 1\n3 1\n5 2\n1 3\n3 4\n4 5\n5 6\n", "5 1\n2 3\n1 2\n5 3\n1 3\n4 5\n", "7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 1\n4 6\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n8 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n11 29\n4 30\n", "5 1\n1 2\n1 3\n2 4\n3 4\n4 5\n", "6 1\n5 1\n5 2\n1 3\n3 5\n4 5\n5 6\n", "6 1\n5 1\n6 2\n1 3\n3 5\n4 5\n5 6\n", "5 1\n1 2\n1 3\n2 3\n2 4\n4 5\n", "30 6\n15 17 2 5 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n8 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n5 28\n9 29\n4 30\n", "41 3\n11 10 15 35 34 6\n31 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n8 17\n16 18\n40 19\n15 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n", "41 3\n11 10 15 35 34 6\n28 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n2 17\n16 18\n40 19\n15 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n4 37\n22 38\n34 39\n29 40\n34 41\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n4 10\n28 11\n13 12\n6 13\n23 14\n25 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n4 28\n23 29\n4 30\n", "7 2\n1 5 6 2\n1 3\n3 2\n4 5\n5 7\n4 1\n4 6\n", "41 3\n11 10 15 13 34 6\n28 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n11 16\n8 17\n16 18\n40 19\n15 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n", "6 1\n5 1\n6 2\n1 6\n3 5\n4 5\n5 6\n", "5 1\n1 2\n1 2\n2 3\n2 4\n4 5\n", "41 3\n11 10 15 35 34 6\n31 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n8 17\n16 18\n40 19\n18 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n", "41 3\n11 10 15 35 34 6\n28 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n30 12\n32 13\n32 14\n32 15\n33 16\n2 17\n16 18\n40 19\n15 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n4 37\n22 38\n34 39\n29 40\n34 41\n", "30 6\n15 17 2 14 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n6 5\n1 6\n17 7\n29 8\n30 9\n4 10\n28 11\n13 12\n6 13\n23 14\n25 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n29 25\n27 26\n13 27\n4 28\n23 29\n4 30\n", "5 1\n1 2\n1 2\n2 3\n2 4\n2 5\n", "41 3\n11 10 15 35 34 6\n31 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n8 17\n16 18\n40 19\n18 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n7 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n", "6 1\n4 6\n5 2\n1 3\n1 4\n4 5\n1 6\n", "30 6\n15 17 2 5 6 30 13 8 10 24 1 19\n23 2\n26 3\n22 4\n7 5\n1 6\n17 7\n29 8\n30 9\n8 10\n28 11\n13 12\n6 13\n23 14\n23 15\n5 16\n30 17\n2 18\n11 19\n19 20\n4 21\n3 22\n16 23\n11 24\n26 25\n27 26\n13 27\n5 28\n23 29\n4 30\n", "41 3\n11 10 15 35 34 6\n28 2\n25 3\n9 4\n11 5\n7 6\n24 7\n32 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n8 17\n16 18\n40 19\n15 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n", "6 2\n4 5 3 2\n1 4\n1 3\n6 4\n1 5\n2 6\n", "41 3\n11 10 15 35 34 6\n28 2\n25 3\n9 4\n11 5\n7 6\n24 7\n19 8\n1 9\n34 10\n23 11\n17 12\n32 13\n32 14\n32 15\n33 16\n2 17\n16 18\n25 19\n15 20\n6 21\n41 22\n35 23\n13 24\n6 25\n22 26\n4 27\n31 28\n34 29\n41 30\n15 31\n4 32\n41 33\n23 34\n21 35\n13 36\n2 37\n22 38\n34 39\n29 40\n34 41\n"], "output": ["5\n", "59\n", "2\n", "56\n", "16\n", "3\n", "6\n", "61\n", "1\n", "8\n", "57\n", "46\n", "21\n", "68\n", "55\n", "43\n", "18\n", "7\n", "50\n", "47\n", "64\n", "10\n", "58\n", "59\n", "2\n", "16\n", "1\n", "2\n", "6\n", "59\n", "3\n", "2\n", "2\n", "2\n", "56\n", "16\n", "16\n", "59\n", "6\n", "21\n", "2\n", "1\n", "16\n", "16\n", "61\n", "1\n", "16\n", "2\n", "56\n", "16\n", "6\n", "16\n"]}, "short_description": "1. One-sentence summary:\nCompute an optimal aggregate metric over a tree by rooting it, accumulating node weights in each subtree, and summing edge contributions based on subtree vs. complement weights.\n\n2. Core algorithmic approach:\n\u2013 Breadth\u2010first search to establish a parent\u2010child tree orientation  \n\u2013 Post\u2010order traversal (via reversed BFS order) to perform a tree\u2010DP that merges child results into parents\n\n3. Reusable components:\n\u2013 BFS\u2010based tree rooting: level\u2010order queue to assign parent pointers and produce an explicit child order  \n\u2013 Post\u2010order accumulation pattern: process nodes in reverse BFS order to compute subtree sums and DP values  \n\u2013 Edge\u2010contribution formula: for each edge, add dp[child] + min(subtree_sum, total_sum \u2013 subtree_sum) (common in \u201cmin\u2010cut\u201d or pairing problems on trees)"}
{"name": "543_D. Road Improvement", "description": "The country has n cities and n - 1 bidirectional roads, it is possible to get from every city to any other one if you move only along the roads. The cities are numbered with integers from 1 to n inclusive.\n\nAll the roads are initially bad, but the government wants to improve the state of some roads. We will assume that the citizens are happy about road improvement if the path from the capital located in city x to any other city contains at most one bad road.\n\nYour task is \u2014 for every possible x determine the number of ways of improving the quality of some roads in order to meet the citizens' condition. As those values can be rather large, you need to print each value modulo 1 000 000 007 (109 + 7).\n\nInput\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 2\u00b7105) \u2014 the number of cities in the country. Next line contains n - 1 positive integers p2, p3, p4, ..., pn (1 \u2264 pi \u2264 i - 1) \u2014 the description of the roads in the country. Number pi means that the country has a road connecting city pi and city i. \n\nOutput\n\nPrint n integers a1, a2, ..., an, where ai is the sought number of ways to improve the quality of the roads modulo 1 000 000 007 (109 + 7), if the capital of the country is at city number i.\n\nExamples\n\nInput\n\n3\n1 1\n\n\nOutput\n\n4 3 3\n\nInput\n\n5\n1 2 3 4\n\n\nOutput\n\n5 8 9 8 5", "solution": "\n\nclass Graph:\n    def __init__(self, n_vertices, edges, directed=True, weighted=False):\n        self.n_vertices = n_vertices\n        self.edges = edges\n        self.directed = directed\n        self.weighted = weighted\n\n    @property\n    def adj(self):\n        try:\n            return self._adj\n        except AttributeError:\n            adj = [[] for _ in range(self.n_vertices)]\n            def d_w(e):\n                adj[e[0]].append((e[1],e[2]))\n            def ud_w(e):\n                adj[e[0]].append((e[1],e[2]))\n                adj[e[1]].append((e[0],e[2]))\n            def d_uw(e):\n                adj[e[0]].append(e[1])\n            def ud_uw(e):\n                adj[e[0]].append(e[1])\n                adj[e[1]].append(e[0])\n            helper = (ud_uw, d_uw, ud_w, d_w)[self.directed+self.weighted*2]\n            for e in self.edges:\n                helper(e)\n            self._adj = adj\n            return adj\n\nclass RootedTree(Graph):\n    def __init__(self, n_vertices, edges, root_vertex):\n        self.root = root_vertex\n        super().__init__(n_vertices, edges, False, False)\n\n    @property\n    def parent(self):\n        try:\n            return self._parent\n        except AttributeError:\n            adj = self.adj\n            parent = [None]*self.n_vertices\n            parent[self.root] = -1\n            stack = [self.root]\n            for i in range(self.n_vertices):\n                v = stack.pop()\n                for u in adj[v]:\n                    if parent[u] is None:\n                        parent[u] = v\n                        stack.append(u)\n            self._parent = parent\n            return parent\n\n    @property\n    def children(self):\n        try:\n            return self._children\n        except AttributeError:\n            children = [None]*self.n_vertices\n            for v,(l,p) in enumerate(zip(self.adj,self.parent)):\n                children[v] = [u for u in l if u != p]\n            self._children = children\n            return children\n\n    @property\n    def dfs_order(self):\n        try:\n            return self._dfs_order\n        except AttributeError:\n            order = [None]*self.n_vertices\n            children = self.children\n            stack = [self.root]\n            for i in range(self.n_vertices):\n                v = stack.pop()\n                order[i] = v\n                for u in children[v]:\n                    stack.append(u)\n            self._dfs_order = order\n            return order\n\nfrom functools import reduce\nfrom itertools import accumulate,chain\ndef rerooting(rooted_tree, merge, identity, finalize):\n    N = rooted_tree.n_vertices\n    parent = rooted_tree.parent\n    children = rooted_tree.children\n    order = rooted_tree.dfs_order\n\n    # from leaf to parent\n    dp_down = [None]*N\n    for v in reversed(order[1:]):\n        dp_down[v] = finalize(reduce(merge,\n            (dp_down[c] for c in children[v]),\n            identity))\n\n    # from parent to leaf\n    dp_up = [None]*N\n    dp_up[0] = identity\n    for v in order:\n        if len(children[v]) == 0:\n            continue\n        temp = (dp_up[v],)+tuple(dp_down[u] for u in children[v])+(identity,)\n        left = tuple(accumulate(temp,merge))\n        right = tuple(accumulate(reversed(temp[2:]),merge))\n        for u,l,r in zip(children[v],left,reversed(right)):\n            dp_up[u] = finalize(merge(l,r))\n\n    res = [None]*N\n    for v,l in enumerate(children):\n        res[v] = reduce(merge,\n                    (dp_down[u] for u in children[v]),\n                    identity)\n        res[v] = finalize(merge(res[v], dp_up[v]))\n\n    return res\n\ndef solve(T):\n    MOD = 10**9 + 7\n    def merge(x,y):\n        return (x*y)%MOD\n    def finalize(x):\n        return x+1\n\n    return [v-1 for v in rerooting(T,merge,1,finalize)]\n\n\nif __name__ == '__main__':\n    N = int(input())\n    edges = [(i+1,p-1) for i,p in enumerate(map(int,input().split()))]\n    T = RootedTree(N, edges, 0)\n    print(*solve(T))\n", "difficulty": 10, "public_tests": {"input": ["3\n1 1\n", "5\n1 2 3 4\n"], "output": ["4 3 3 ", "5 8 9 8 5 "]}, "private_tests": {"input": ["137\n1 1 3 3 5 5 7 8 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 40 41 41 43 43 45 46 46 48 49 49 51 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67 1 1 71 71 73 73 75 76 76 78 78 80 80 82 82 84 84 86 86 88 89 89 91 91 93 94 94 96 96 98 98 100 101 101 103 104 104 106 106 108 109 109 111 111 113 114 114 116 117 117 119 119 121 121 123 124 124 126 127 127 129 130 130 132 132 134 135 135\n", "3\n1 2\n", "2\n1\n", "69\n1 1 3 3 5 5 7 8 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 40 41 41 43 43 45 46 46 48 49 49 51 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 21 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 35 35 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "31\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "29\n1 2 2 4 4 6 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n", "59\n1 2 2 4 4 5 7 7 8 8 10 10 11 11 15 15 9 18 18 20 20 21 23 22 22 26 6 6 28 30 30 31 31 33 34 34 32 32 38 40 39 39 29 44 44 45 47 47 46 46 50 52 52 54 51 51 57 58\n", "70\n1 2 2 4 4 6 6 8 9 9 11 11 13 13 15 15 17 17 19 19 21 22 22 24 24 26 27 27 29 29 31 31 33 34 34 36 37 37 39 39 41 42 42 44 44 46 47 47 49 50 50 52 52 54 54 56 57 57 59 60 60 62 63 63 65 65 67 68 68\n"], "output": ["1 500000005 500000005 750000007 750000007 875000008 875000008 0 1 62499998 31250000 93749994 46874998 109374986 54687494 117187470 58593736 121093688 60546845 123046749 124999808 62499905 125976240 62988121 126464261 126952280 63476141 127195898 63597950 127316924 63658463 127375871 127434816 63717409 127461155 127487492 63743747 127494392 63747197 127485305 127476216 63738109 127446596 63723299 127381635 127316672 63658337 127183887 127051100 63525551 126784098 63392050 126249380 63124691 125179587 124109792 62054897 121970025 119830256 59915129 115550631 111271004 55635503 102711708 51355855 85593095 68474480 34237241 34237241 500000005 500000005 750000007 750000007 875000008 875000008 0 1 62499998 31250000 93749994 46874998 109374986 54687494 117187470 58593736 121093688 60546845 123046749 124999808 62499905 125976240 62988121 126464261 126952280 63476141 127195898 63597950 127316924 63658463 127375871 127434816 63717409 127461155 127487492 63743747 127494392 63747197 127485305 127476216 63738109 127446596 63723299 127381635 127316672 63658337 127183887 127051100 63525551 126784098 63392050 126249380 63124691 125179587 124109792 62054897 121970025 119830256 59915129 115550631 111271004 55635503 102711708 51355855 85593095 68474480 34237241 34237241 ", "3 4 3 ", "2 2 ", "1000000006 500000004 499999999 750000004 749999993 875000001 874999978 999999961 999999985 62499920 31249961 93749852 46874927 109374716 54687359 117186944 58593473 121092650 60546326 123044687 124996722 62498362 125971106 62985554 126455031 126938954 63469478 127174380 63587191 127279022 63639512 127305201 127331378 63665690 127292181 127252982 63626492 127128810 63564406 126857579 126586346 63293174 126032438 63016220 124918901 123805362 61902682 121575425 119345486 59672744 114884180 57442091 105960854 52980428 88113845 70266834 35133418 34572635 998878441 999439225 927489952 856101461 928050735 713324437 856662223 427770368 142216297 571108153 571108153 ", "0 1000000005 0 0 0 0 800000008 800000008 800000008 800000008 800000008 800000008 800000008 222222230 222222230 222222230 222222230 222222230 222222230 222222230 222222230 222222230 222222230 222222230 222222230 222222230 222222230 705882372 705882372 705882372 878787915 878787915 61538524 61538524 596899355 596899355 196881603 400000005 400000005 400000005 400000005 400000005 400000005 400000005 400000005 400000005 400000005 400000005 400000005 400000005 400000005 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 111111116 352941187 352941187 352941187 352941187 352941187 352941187 352941187 352941187 352941187 352941187 352941187 352941187 939393962 939393962 939393962 939393962 939393962 939393962 939393962 939393962 939393962 939393962 30769263 30769263 30769263 30769263 30769263 30769263 30769263 30769263 30769263 30769263 30769263 30769263 798449682 798449682 798449682 798449682 798449682 798449682 798449682 798449682 798449682 798449682 798449682 798449682 798449682 798449682 598440806 598440806 598440806 598440806 598440806 598440806 598440806 598440806 598440806 ", "73741817 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 ", "191 380 191 470 236 506 254 506 504 500 494 486 476 464 450 434 416 396 374 350 324 296 266 234 200 164 126 86 44 ", "0 1000000005 0 499999996 499259752 500131906 498519506 453903141 456877573 963122521 230821046 981561265 981561265 115410524 784656845 892328427 892328427 415235638 207617820 331951678 748963765 998815735 165975843 582987926 999407872 332543823 666271916 492735403 494450227 485338898 330005231 366989446 553336825 864004193 776668417 932002101 932002101 775242091 893591565 183494727 591747368 946795787 946795787 488768546 73973791 454675898 659179041 829589525 829589525 147841416 181934138 841006939 920503474 227337959 613668984 90967070 636450610 90967073 545483541 ", "0 1000000005 0 499999996 249999999 749999986 374999994 874999963 999999938 499999970 62499881 531249945 93749781 546874895 109374581 554687295 117186681 558593345 121092131 560546070 123043656 124995179 562497594 125968539 562984274 126450416 126932291 563466150 127163621 563581815 127260071 563630040 127269866 127279659 563639834 127207694 127135727 563567868 126946019 563473014 126543716 126141411 563070710 125325359 562662684 123687534 122049707 561024858 118771194 115492679 557746344 108934221 554467115 95816591 547908300 69580974 43345355 521672682 990873947 938402530 469201266 833459609 728516686 364258344 518630798 259315400 98859001 679087209 839543609 839543609 "]}, "generated_tests": {"input": ["137\n1 1 3 3 5 5 7 8 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 40 41 41 43 43 45 46 46 48 49 49 51 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67 1 1 71 71 73 73 75 76 76 78 78 80 80 82 82 84 84 86 86 88 89 89 91 91 93 94 94 96 96 98 98 100 101 101 103 104 104 106 106 108 109 109 111 111 113 114 114 116 117 117 119 119 121 121 123 124 124 126 127 127 129 130 130 132 132 134 72 135\n", "69\n1 1 3 3 5 5 7 3 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 40 41 41 43 43 45 46 46 48 49 49 51 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 35 35 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "59\n1 2 2 4 4 5 7 7 8 8 10 10 11 11 15 2 9 18 18 20 20 21 23 22 22 26 6 6 28 30 30 31 31 33 34 34 32 32 38 40 39 39 29 44 44 45 47 47 46 46 50 52 52 54 51 51 57 58\n", "70\n1 2 2 4 4 6 6 8 9 9 11 11 13 13 15 15 17 17 19 19 21 22 22 24 24 26 27 27 29 29 31 31 33 34 34 36 37 37 39 39 41 42 11 44 44 46 47 47 49 50 50 52 52 54 54 56 57 57 59 60 60 62 63 63 65 65 67 68 68\n", "137\n1 1 3 3 5 5 7 8 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 3 41 41 43 43 45 46 46 48 49 49 51 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67 1 1 71 71 73 73 75 76 76 78 78 80 80 82 82 84 84 86 86 88 89 89 91 91 93 94 94 96 96 98 98 100 101 101 103 104 104 106 106 108 109 109 111 111 113 114 114 116 117 117 119 119 121 121 123 124 124 126 127 127 129 130 130 132 132 134 72 135\n", "69\n1 1 3 3 5 5 7 3 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 40 41 41 43 43 45 22 46 48 49 49 51 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 35 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "137\n1 1 3 3 5 5 7 8 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 3 41 41 43 43 45 46 46 48 49 49 51 51 53 53 55 7 56 58 59 59 61 62 62 64 64 66 67 67 1 1 71 71 73 73 75 76 76 78 78 80 80 82 82 84 84 86 86 88 89 89 91 91 93 94 94 96 96 98 98 100 101 101 103 104 104 106 106 108 109 109 111 111 113 114 114 116 117 117 119 119 121 121 123 124 124 126 127 127 129 130 130 132 132 134 72 135\n", "69\n1 1 3 3 5 5 7 3 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 40 7 41 43 43 45 22 46 48 49 49 51 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "69\n1 1 3 3 5 5 7 3 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 40 7 41 43 43 45 22 46 48 49 49 51 51 53 53 55 15 56 58 59 59 61 62 62 64 64 66 67 67\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "69\n1 1 3 3 5 5 7 3 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 21 7 41 43 43 45 22 46 48 49 49 51 51 53 53 55 15 56 58 59 59 61 62 62 64 64 66 67 67\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 53 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 36 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 53 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 36 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 27 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 53 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 4 36 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 27 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 53 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "69\n1 1 3 3 5 5 7 8 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 22 41 41 43 43 45 46 46 48 49 49 51 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 21 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 50 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 35 35 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "29\n1 2 2 4 4 6 6 8 9 10 11 12 13 14 9 16 17 18 19 20 21 22 23 24 25 26 27 28\n", "137\n1 1 3 3 5 5 7 8 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 40 41 41 43 43 45 46 46 48 49 49 34 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67 1 1 71 71 73 73 75 76 76 78 78 80 80 82 82 84 84 86 86 88 89 89 91 91 93 94 94 96 96 98 98 100 101 101 103 104 104 106 106 108 109 109 111 111 113 114 114 116 117 117 119 119 121 121 123 124 124 126 127 127 129 130 130 132 132 134 72 135\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 26 32 33 33 33 33 33 33 34 34 34 34 34 34 35 35 35 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "59\n1 2 2 4 4 5 7 7 8 8 10 10 11 11 15 2 9 18 18 20 20 21 23 22 22 26 6 6 28 30 30 31 31 33 34 34 32 32 38 40 39 42 29 44 44 45 47 47 46 46 50 52 52 54 51 51 57 58\n", "70\n1 2 2 4 4 6 6 8 9 9 11 11 13 13 15 15 17 17 19 19 21 22 22 24 24 26 27 27 29 29 31 31 33 34 34 36 37 37 39 39 41 42 11 44 44 46 47 47 49 50 50 52 52 54 54 56 57 49 59 60 60 62 63 63 65 65 67 68 68\n", "69\n1 1 3 3 5 5 7 3 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 6 30 32 33 33 35 36 36 38 38 40 41 41 43 43 45 22 46 48 49 49 51 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 24 20 21 21 9 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 35 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "137\n1 1 3 3 5 5 7 8 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 30 30 32 33 33 35 36 36 38 38 3 41 41 43 43 45 46 46 48 49 49 51 51 53 53 55 7 56 58 59 59 61 62 62 64 64 66 67 67 1 1 71 71 73 73 75 76 76 78 78 5 80 82 82 84 84 86 86 88 89 89 91 91 93 94 94 96 96 98 98 100 101 101 103 104 104 106 106 108 109 109 111 111 113 114 114 116 117 117 119 119 121 121 123 124 124 126 127 127 129 130 130 132 132 134 72 135\n", "69\n1 1 3 3 5 5 7 3 8 10 10 12 12 14 14 16 16 18 18 20 21 21 23 23 25 26 26 28 28 14 30 32 33 33 35 36 36 38 38 40 7 41 43 43 45 22 46 48 49 49 51 51 53 53 55 56 56 58 59 59 61 62 62 64 64 66 67 67\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 42 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 55 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "150\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 3 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 15 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 57 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 26 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 15 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 38 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 35 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 25 26 26 26 27 27 27 28 49 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 53 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 3 14 14 15 15 15 16 16 16 17 17 17 36 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 25 26 26 26 27 27 27 28 28 28 28 29 29 29 29 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 53 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n", "150\n1 2 2 1 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 7 7 8 8 9 9 10 17 11 11 12 12 13 13 14 14 14 15 15 15 16 16 16 17 17 17 36 18 18 19 19 19 20 20 20 21 21 9 22 22 22 23 23 23 24 24 39 25 35 27 26 26 26 27 27 27 28 28 28 28 29 29 29 12 30 14 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 35 25 17 35 35 35 35 53 36 36 36 36 36 36 37 37 37 37 37 37 37 30 37\n"], "output": ["902653190 451326596 207959551 603979780 68572281 534286145 414797745 761023207 880511608 265974124 132987063 182125965 591062987 967554654 483777328 514974518 257487260 598095503 799047756 758478098 918860691 959430350 236696184 118348093 870902341 505108489 752554249 772788372 386394187 307781921 653890965 377585921 447389919 723694964 586906364 726422807 863211408 5409912 2704957 563361249 121312577 560656293 237203798 118601900 468980519 700757238 350378620 164307810 627858387 813929198 554958106 277479054 409156830 204578416 117553921 825951017 912975513 242745018 659539024 329769513 493126942 326714858 163357430 993890655 996945332 328242214 662593778 331296890 331296890 451326596 451326596 634217735 634217735 817108872 725663306 817108875 908554442 862831661 931415835 885693057 942846533 897123761 948561885 902839125 951419567 905696831 952848420 907125732 908554631 954277320 909269175 954634592 909626636 909984095 954992052 910163201 955081605 910253507 955126758 910300166 910346823 955173416 910373162 910399499 955199754 910418687 955209348 910440320 910461951 955230980 910496843 955248426 910562442 910628039 955314024 910757142 910886243 955443126 911143401 955571705 911657195 955828602 912684522 913711847 956855928 915766368 917820887 958910448 921929862 926038835 963019422 934256751 967128380 950692568 967128383 817108872 983564196\n", "19 500000014 500000029 750000019 625000019 812500014 687499993 749999965 750000019 812499935 906249972 843749875 921874942 859374755 929687382 867187015 933593512 871092785 935546397 873044950 874997113 937498561 875971753 937985881 876456190 876940625 938470317 877177075 938588542 877283765 938641887 877314040 877344313 938672161 877313308 877282301 938641155 877174513 938587261 876936050 876697585 938348797 876209213 938104611 875226748 874244281 937122145 872276488 870308693 935154351 866371675 933185842 858496925 929248467 842747068 826997209 913498609 795497314 763997417 881998713 700997536 637997653 818998831 511997845 755998927 259998208 7998569 503999289 503999289\nn", "286139206 572278410 286139206 893813204 892476876 893942466 891140546 810831121 842954929 248664898 409283822 124332450 124332450 204641912 606189219 803094614 286139206 794769310 397384656 698397982 23798486 312912560 349198995 674599502 156456281 541941711 770970860 885380843 887365763 876819218 697018031 739827846 798012025 157614426 899006017 78807214 78807214 54870884 191862278 369913927 684956968 95931140 95931140 880789058 400657551 841326266 920526049 960263029 960263029 486160488 525623354 130994708 65497355 420663143 710331576 262811678 894217522 262811681 631405845\n", "695943545 391887081 695943545 739858848 369929425 413844719 706922364 750837640 87830552 43915277 256326974 128163488 255975394 127987698 255239090 127619546 253749910 126874956 250763264 125381633 244785829 238808392 119404197 226851448 113425725 202936525 179021600 89510801 131191234 65595618 35530244 17765123 844208142 652886031 826443020 270241746 887597466 443798734 122308862 61154432 591731653 61154435 530577222 254165476 127082739 249836759 245508040 122754021 236847743 228187444 114093723 210865418 105432710 176220652 88110327 106930763 37640872 18820437 899060920 760480959 880240484 483320950 206160939 603080474 651840882 325920442 543200740 434560596 217280299 217280299\nn", "751315994 375657998 126973981 563486995 220888467 610444238 267845689 314802909 563486995 361760127 680880068 385238691 692619350 396977883 698488946 402847299 701423654 405781647 702890828 407248101 408714553 939143042 409200809 704600409 409439614 409678417 704839213 409789171 704894590 409827253 704913631 409811704 409796153 704898081 409719196 409642237 704821123 409465393 704732701 409100242 408735089 704367549 407999053 703999531 406524116 405049177 469571522 403574236 402099293 701049651 399147979 699573994 393244637 696622323 381437596 369630553 684815281 346016290 322402025 661201017 275173408 227944789 613972399 133487509 566743759 944572935 755658352 377829177 377829177\nnn", "751982618 375991310 127973917 563986963 221971731 610985870 268970617 292470018 563986963 315969417 657984713 327719031 663859520 333593667 666796838 336530643 668265326 337998447 668999228 338730981 339463513 892975682 339702825 669851417 339814270 339925713 669962861 339965011 669982510 339951813 669975911 339879520 339807225 669903617 339639688 339472149 669736079 339125599 669562804 338426763 337727925 634485313 337029085 668514547 335628540 334227993 446487842 332827444 331426893 665713451 328624363 664312186 323018589 661509299 311806684 300594777 650297393 278170786 255746793 627873401 210898720 166050645 583025327 76354453 538177231 896962055 717569648 358784825 358784825\nn", "580617114 290308558 870925668 435462835 943502794 471751398 979791336 997935565 435462835 16079785 508039897 25151813 512575911 29687656 686458444 31198997 515599503 31953643 515976826 32328917 32704189 688469466 32821993 516411001 32868598 32915201 516457605 32913907 516456958 32864069 516432039 32740768 32617465 516308737 32359048 32100629 516050319 31577887 515788948 30529451 29481013 489895669 28432573 514216291 26334220 24235865 344234734 22137508 20039149 510019579 15841699 507920854 7446433 503723221 990655725 973865008 343229223 957074289 940283568 470141785 906702039 873120508 436560255 805957404 402978703 671631175 537304944 268652473 268652473\nn", "959353747 979676878 939030614 469515308 183949813 591974911 306409395 367639144 469515308 428868891 714434450 459483679 729741844 474790902 316527270 479892703 739946356 482442579 741221294 483715468 484988355 323325572 476940315 738470162 460843584 444746851 722373430 412553061 706276535 348165319 674082664 219389754 90614187 545307098 833063021 575511846 287755924 60409478 30204740 30204740 481440468 653204702 477892579 738946294 470795328 463698075 161662787 456600820 449503563 724751786 435308317 717654163 406917459 703458734 350135560 293353659 158263636 236571756 179789851 589894930 66225954 952662062 476331032 725534222 362767112 271278521 817022825 908511417 908511417\nn", "915182393 872773583 936386796 685496233 957591201 936386796 319520217 498218869 220243189 498218869 498218869 498218869 498218869 220243189 220243189 220243189 644963387 220243189 220243189 220243189 498218869 220243189 220243189 498218869 644963387 220243189 498218881 644963387 644963387 644963387 512992595 512992595 74730971 74730971 512992595 803992520 492905138 659760113 213013480 749109439 749109439 610121599 610121599 749109439 749109439 749109439 749109439 749109439 749109439 749109439 749109439 610121599 610121599 610121599 610121599 610121599 610121599 610121599 610121599 610121599 822481698 822481698 822481698 610121599 610121599 610121599 610121599 610121599 610121599 610121599 610121599 610121599 749109439 749109439 610121599 610121599 610121599 610121599 610121599 610121599 610121599 749109439 749109439 106506741 822481698 822481698 822481698 610121599 610121599 610121599 749109445 749109445 749109445 822481698 822481698 822481698 822481698 822481698 822481698 822481698 822481698 822481698 822481698 822481698 822481698 756496302 756496302 756496302 756496302 756496302 756496302 756496302 756496302 756496302 756496302 537365490 537365490 537365490 537365490 537365490 537365490 537365490 537365490 537365490 537365490 537365490 537365490 756496302 822481698 822481698 756496302 756496302 756496302 756496302 401996261 401996261 401996261 401996261 401996261 401996261 401996261 246452570 246452570 246452570 246452570 246452570 246452570 246452570 246452570 246452570\nnnnnnnnnn", "486654310 729981462 548059122 76589923 243327156 364990732 625698402 783985175 315539083 486654310 783985175 783985175 783985175 366136780 315539083 315539083 687041392 783985175 315539083 315539083 861271948 315539083 315539083 783985175 783985175 315539083 542672888 687041392 687041392 687041392 435133569 435133569 657212580 657212580 657212580 328973979 439203578 312849202 417132270 891992592 891992592 657769546 657769546 243327156 343520697 891992592 891992592 891992592 891992592 891992592 891992592 183068391 910757860 183068391 657769546 657769546 657769546 657769546 657769546 657769546 343520697 343520697 538294966 664486994 891992592 891992592 657769546 657769546 657769546 657769546 657769546 657769546 430635975 430635975 657769546 657769546 657769546 657769546 657769546 657769546 657769546 891992592 891992592 208566136 891992592 328606291 271336445 657769546 657769546 657769546 271336445 271336445 271336445 343520697 343520697 343520697 343520697 343520697 343520697 343520697 343520697 343520697 183068391 343520697 343520697 717566789 717566789 717566789 717566789 717566789 717566789 717566789 717566789 717566789 717566789 328606291 328606291 328606291 328606291 328606291 328606291 328606291 328606291 328606291 328606291 328606291 328606291 328606291 891992592 343520697 328606291 328606291 328606291 328606291 455378931 664486994 664486994 664486994 664486994 664486994 664486994 219601790 219601790 219601790 219601790 219601790 219601790 219601790 343520697 219601790\n", "691098623 845549316 536647928 268323965 959422578 479711290 170809884 382197195 691098602 487890825 743945417 540737589 770368799 567160869 783580439 580372305 790186157 586977615 793488812 590279454 593581291 593117814 585282459 792641234 568684144 552085827 776042918 518888869 759444439 452494791 726247400 319706554 186918315 593459162 921341805 655765286 327882644 124612230 62306116 62306116 592654335 796327172 591715935 795857972 589833414 587950891 793975450 584182986 580415079 790207544 572877837 786438923 557802639 778901324 527651886 497501131 748750570 437199444 376897755 688448882 256294290 135690823 567845416 894483854 447241928 412069881 929655913 964827961 964827961\nn", "863 1724 863 2150 1076 2354 1178 2438 2520 2166 1810 1452 1092 730 366 2366 2210 2052 1892 1730 1566 1400 1232 1062 890 716 540 362 182\n", "487063624 243531813 669588296 334794149 468810178 234405090 784340218 99870249 549935129 589473461 794736735 497951446 248975724 279543200 139771601 825044607 912522308 907206360 453603181 67109332 227012309 613506159 544608001 772304005 178694247 812780498 406390250 80400422 40200212 615364002 307682002 685153014 754942024 169961349 964186266 173430499 586715254 591895957 795947983 428815355 265734751 632867380 939567796 469783899 287230995 634894199 817447104 330219163 25544125 512772067 416193339 584980679 806842551 903421280 588140611 369438669 684719339 932034615 494630552 247315277 619822346 745014138 372507070 995397680 497698841 496164736 996931797 998465903 998465903 243531813 526863814 17909209 183135291 591567650 221341545 259547797 629773903 198791949 599395979 8696077 504348043 594212252 297106127 748098551 874049280 47298120 23649061 641410761 235523393 617761701 421605410 210802706 792697817 163790215 581895112 905439213 952719611 388469289 694234649 354395495 320321699 660160854 252107132 183892563 591946286 47429939 523714974 774487955 501545962 250772982 955653613 977826811 863864723 772075831 886037920 588495956 404916079 702458044 37755281 518877645 303433170 151716586 834788687 366144195 683072102 428855089 491565981 745782995 616987702 742409421 871204715 993252829 996626419 494939623 996626422 508954609 498313212\nn", "42611526 85223050 42611526 345875924 344793036 345977026 343710146 278607121 304648369 822885705 953091829 911442857 911442857 976545919 302061219 651030614 42611526 265586590 132793296 187462942 640597213 874968247 93731475 546865742 937484128 249978831 624989420 337415339 340645699 328853650 183300311 191862274 455533545 746640257 727766777 873320133 873320133 643896712 643896712 95931141 547965575 95931141 547965575 335314370 946095318 303323834 556876257 778438133 778438133 15408360 47398970 727492891 863746450 151661927 575830968 23699486 535549234 23699489 511849749\n", "403661277 807322552 403661277 9153178 4576590 610068489 805034249 410526123 210983755 605491882 611212537 805606273 610347045 805173527 608582917 804291463 605038089 802519049 597940147 798970078 583740120 569540091 784770050 541137963 770568986 484332672 427527379 713763694 313916277 656958143 86693815 543346912 632248769 177803714 88901858 268913548 360023380 180011691 542243014 271121508 906682267 271121511 635560760 609056283 804528146 604730188 600404091 800202050 591745105 89392701 544696355 84687840 42343921 75278088 37639045 56458569 37639048 18819525 253956451 916167802 458083902 240590403 565013009 782506509 213858172 106929087 511548484 809238794 404619398 404619398\n", "563507746 281753874 845261616 422630809 915700071 610466716 939179520 962658967 422630809 986138412 493069207 997878070 498939036 3747763 501873886 6682355 503341182 8149135 504074572 8881493 9613849 673075906 9854297 504927153 9968326 10082353 505041181 10126975 505063492 10124503 305233359 10122029 10119553 505059781 10068746 10017937 505008973 9893393 504946701 9632842 9372289 504686149 8845453 504422731 7788916 6732377 336537954 5675836 4619293 502309651 2504779 501252394 998275044 499137523 989815203 981355360 490677681 964435497 947515632 473757817 913675815 879835996 439917999 812156316 406078159 676796935 541437552 270718777 270718777\nnnnnnnn", "186044808 279067209 639533609 951160502 93022405 639533609 96343327 623253774 581393085 623253774 623253774 623253774 623253774 203827977 488369745 581393085 203827977 581393085 581393085 581393085 623253774 581393085 581393085 623253774 203827977 581393085 623253786 203827977 203827977 581393085 452428842 203827977 920927782 920927782 452428842 416438910 407178702 548171668 730895558 311626888 311626888 790696547 790696547 311626888 311626888 311626888 311626888 311626888 311626888 311626888 311626888 601913993 601913993 601913993 744184877 744184877 325579832 790696547 790696547 790696547 601913993 601913993 601913993 790696547 790696547 790696547 790696547 790696547 790696547 790696547 790696547 790696547 311626888 311626888 790696547 790696547 790696547 790696547 790696547 790696547 790696547 311626888 311626888 365447780 601913993 601913993 601913993 790696547 790696547 790696547 311626894 311626894 311626894 601913993 601913993 601913993 601913993 601913993 601913993 601913993 601913993 790696547 601913993 790696547 790696547 226214422 226214422 226214422 226214422 226214422 601913993 601913993 162789917 601913993 601913993 460463892 460463892 460463892 460463892 460463892 460463892 460463892 460463892 460463892 460463892 460463892 460463892 226214422 601913993 601913993 226214422 226214422 226214422 226214422 208219456 208219456 208219456 208219456 208219456 208219456 208219456 203589352 203589352 203589352 203589352 203589352 203589352 203589352 203589352 203589352\nnnnnn", "692959431 539439140 57153041 484233986 846479720 269719571 176662124 431551316 257279242 692959431 431551316 176662124 431551316 574866947 257279242 257279242 735213745 257279242 257279242 257279242 987387197 257279242 257279242 431551316 257279242 257279242 208207994 257279242 801825091 801825091 735213745 735213745 146524753 146524753 146524753 146524753 887534966 88331063 451108087 215775659 215775659 128639622 128639622 846479720 867606877 215775659 215775659 88331063 451108087 215775659 215775659 787433478 716577969 787433478 128639622 128639622 128639622 128639622 128639622 128639622 867606877 867606877 867606877 128639622 128639622 128639622 128639622 128639622 128639622 128639622 128639622 128639622 993693603 993693603 128639622 128639622 128639622 128639622 128639622 128639622 128639622 215775659 215775659 725554048 128639622 573262381 128639622 128639622 128639622 128639622 104103998 104103998 104103998 128639622 725554048 128639622 128639622 900912550 900912550 900912550 900912550 900912550 787433478 900912550 900912550 867606877 867606877 867606877 867606877 867606877 867606877 867606877 867606877 867606877 867606877 573262381 573262381 573262381 573262381 573262381 573262381 573262381 573262381 573262381 573262381 573262381 573262381 573262381 128639622 867606877 573262381 573262381 573262381 573262381 858288989 573262381 573262381 573262381 573262381 573262381 573262381 443767484 443767484 443767484 443767484 443767484 443767484 443767484 900912550 443767484\nnn"]}, "short_description": "1. One-sentence summary:  \n   The solution computes for every node in a rooted tree an aggregate value that combines contributions from both its subtree and the rest of the tree by performing a two-pass dynamic programming rerooting.\n\n2. Core algorithmic approach:  \n   Tree dynamic programming with the rerooting (also called \u201cDP on trees\u201d or \u201call-roots tree DP\u201d) technique.\n\n3. Reusable components:  \n   - Graph adjacency construction supporting directed/undirected and weighted/unweighted modes.  \n   - RootedTree utilities: parent array computation via DFS, children list extraction, and generation of a DFS traversal order.  \n   - A generic rerooting function parameterized by a `merge` operation, an `identity` element, and an optional `finalize` step to compute DP values for all possible roots."}
{"name": "1453_E. Dog Snacks", "description": "Gildong is playing with his dog, Badugi. They're at a park that has n intersections and n-1 bidirectional roads, each 1 meter in length and connecting two intersections with each other. The intersections are numbered from 1 to n, and for every a and b (1 \u2264 a, b \u2264 n), it is possible to get to the b-th intersection from the a-th intersection using some set of roads.\n\nGildong has put one snack at every intersection of the park. Now Gildong will give Badugi a mission to eat all of the snacks. Badugi starts at the 1-st intersection, and he will move by the following rules:\n\n  * Badugi looks for snacks that are as close to him as possible. Here, the distance is the length of the shortest path from Badugi's current location to the intersection with the snack. However, Badugi's sense of smell is limited to k meters, so he can only find snacks that are less than or equal to k meters away from himself. If he cannot find any such snack, he fails the mission. \n  * Among all the snacks that Badugi can smell from his current location, he chooses a snack that minimizes the distance he needs to travel from his current intersection. If there are multiple such snacks, Badugi will choose one arbitrarily. \n  * He repeats this process until he eats all n snacks. After that, he has to find the 1-st intersection again which also must be less than or equal to k meters away from the last snack he just ate. If he manages to find it, he completes the mission. Otherwise, he fails the mission. \n\n\n\nUnfortunately, Gildong doesn't know the value of k. So, he wants you to find the minimum value of k that makes it possible for Badugi to complete his mission, if Badugi moves optimally.\n\nInput\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4).\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of intersections of the park.\n\nThe next n-1 lines contain two integers u and v (1 \u2264 u,v \u2264 n, u \u2260 v) each, which means there is a road between intersection u and v. All roads are bidirectional and distinct.\n\nIt is guaranteed that: \n\n  * For each test case, for every a and b (1 \u2264 a, b \u2264 n), it is possible to get to the b-th intersection from the a-th intersection. \n  * The sum of n in all test cases doesn't exceed 2 \u22c5 10^5. \n\nOutput\n\nFor each test case, print one integer \u2014 the minimum possible value of k such that Badugi can complete the mission.\n\nExample\n\nInput\n\n\n3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n5 8\n\n\nOutput\n\n\n2\n3\n3\n\nNote\n\nIn the first case, Badugi can complete his mission with k=2 by moving as follows: \n\n  1. Initially, Badugi is at the 1-st intersection. The closest snack is obviously at the 1-st intersection, so he just eats it. \n  2. Next, he looks for the closest snack, which can be either the one at the 2-nd or the one at the 3-rd intersection. Assume that he chooses the 2-nd intersection. He moves to the 2-nd intersection, which is 1 meter away, and eats the snack. \n  3. Now the only remaining snack is on the 3-rd intersection, and he needs to move along 2 paths to get to it. \n  4. After eating the snack at the 3-rd intersection, he needs to find the 1-st intersection again, which is only 1 meter away. As he gets back to it, he completes the mission. \n\n\n\nIn the second case, the only possible sequence of moves he can make is 1 \u2013 2 \u2013 3 \u2013 4 \u2013 1. Since the distance between the 4-th intersection and the 1-st intersection is 3, k needs to be at least 3 for Badugi to complete his mission.\n\nIn the third case, Badugi can make his moves as follows: 1 \u2013 5 \u2013 6 \u2013 7 \u2013 8 \u2013 2 \u2013 3 \u2013 4 \u2013 1. It can be shown that this is the only possible sequence of moves for Badugi to complete his mission with k=3.\n\n<image>", "solution": "import os\nimport sys\nfrom io import BytesIO, IOBase\n# region fastio\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline()\n \n# ------------------------------\n\ndef RL(): return map(int, sys.stdin.readline().split())\ndef RLL(): return list(map(int, sys.stdin.readline().split()))\ndef N(): return int(input())\ndef print_list(l):\n    print(' '.join(map(str,l)))\n    \n# sys.setrecursionlimit(100000)\n# import random\n# from functools import reduce\n# from functools import lru_cache\n# from heapq import *\n# from collections import deque as dq\n# from math import ceil,floor,sqrt,pow,gcd,log\n# import bisect as bs\n# from collections import Counter\n# from collections import defaultdict as dc \n\nfor _ in range(N()):\n    n = N()\n    dic = [[] for _ in range(n + 1)]\n    gress = [0] * (n + 1)\n    gress[1] += 1\n    father = [0] * (n + 1)\n    for _ in range(n - 1):\n        u, v = RL()\n        dic[u].append(v)\n        dic[v].append(u)\n    now = [1]\n    s = [[] for _ in range(n + 1)]\n    leaf = []\n    while now:\n        node = now.pop()\n        for child in dic[node]:\n            if child != father[node]:\n                gress[node] += 1\n                father[child] = node\n                now.append(child)\n        if gress[node] == 0:\n            leaf.append(node)\n    while leaf:\n        node = leaf.pop()\n        f = father[node]\n        if not s[node]:\n            s[f].append((1, 0))\n        elif len(s[node]) == 1:\n            d, k = s[node][0]\n            s[f].append((d + 1, k))\n        else:\n            d = min(p[0] for p in s[node]) + 1\n            k = max(max(p[1] for p in s[node]), max(p[0] for p in s[node]) + 1)\n            s[f].append((d, k))\n        gress[f] -= 1\n        if gress[f] == 0:\n            leaf.append(f)\n    node = 1\n    if len(s[node]) == 1:\n        print(max(s[node][0]))\n    else:\n        k = max(p[1] for p in s[node])\n        tmp = [p[0] for p in s[node]]\n        m = max(tmp)\n        tmp.remove(m)\n        print(max(max(tmp)+1, m, k))\n\n    # print(s)", "difficulty": 11, "public_tests": {"input": ["3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n5 8\n"], "output": ["\n2\n3\n3\n"]}, "private_tests": {"input": [], "output": []}, "generated_tests": {"input": ["3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 7\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n1 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n1 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n6 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 4\n2 3\n3 4\n1 5\n2 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n5\n1 3\n2 3\n1 4\n1 5\n2 6\n8 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n3\n1 2\n2 3\n5 4\n2 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n1 3\n3 4\n2 7\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n2\n1 2\n2 3\n3 4\n1 5\n5 6\n2 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 7\n4 5\n5 6\n4 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 7\n4 5\n5 6\n4 7\n6 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n2 5\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n1 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n1 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n2 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n8 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n2 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n2 5\n1 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n5 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n6 4\n1 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n2 3\n3 4\n1 7\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n2 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 4\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n8 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n1 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n8 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n6 4\n4 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n1 6\n4 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n5 4\n1 5\n2 6\n8 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n3 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 2\n2 3\n6 4\n1 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n2 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n4 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n5 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n1 5\n2 6\n8 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n1 4\n8\n1 2\n2 3\n2 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n5 4\n2 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 4\n2 3\n3 4\n1 7\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n2 5\n2 6\n8 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n8 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n1 5\n2 6\n8 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n1 4\n1 5\n2 6\n8 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n1 4\n1 5\n2 6\n8 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n2 5\n3 6\n6 7\n1 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n5 4\n2 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 8\n1 6\n4 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n1 3\n3 4\n8\n1 2\n2 3\n5 4\n2 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 4\n2 3\n3 6\n1 7\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 1\n1 4\n1 5\n2 6\n8 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 6\n5 4\n2 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 3\n3 4\n8\n1 2\n2 6\n5 4\n2 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n1 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n1 3\n3 4\n8\n1 2\n1 3\n3 4\n1 5\n2 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n1 3\n3 4\n1 7\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n1 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n6 4\n7 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 2\n2 3\n6 4\n1 5\n2 6\n3 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n2 5\n2 6\n1 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n2 4\n1 5\n5 6\n4 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 2\n2 3\n1 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n1 5\n1 6\n8 7\n3 8\n", "3\n3\n1 3\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 4\n2 3\n3 4\n1 7\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 2\n2 3\n3 4\n4 5\n3 6\n3 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n2 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n2 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n2 4\n2 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n7\n1 2\n2 3\n3 4\n2 5\n3 6\n6 7\n5 8\n", "3\n3\n1 3\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n5 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n4 5\n3 6\n4 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n2 4\n2 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n3 5\n1 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n3 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n5 7\n6 8\n", "3\n3\n1 2\n2 3\n4\n1 3\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n2 5\n3 7\n6 7\n1 8\n", "3\n3\n1 2\n1 3\n4\n1 4\n2 3\n3 4\n8\n1 2\n2 6\n5 4\n2 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n1 3\n3 4\n1 7\n5 6\n5 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 2\n8\n1 4\n2 3\n3 4\n2 5\n2 6\n1 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 2\n2 3\n1 4\n1 5\n5 6\n2 7\n3 8\n", "3\n3\n1 3\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n2 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n4 5\n5 6\n4 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n2 5\n1 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n3 5\n2 6\n2 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 4\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n5 7\n6 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n1 3\n3 4\n1 7\n5 6\n5 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 4\n2 3\n3 4\n8\n1 2\n2 3\n2 4\n1 5\n2 6\n5 7\n6 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n1 6\n6 7\n7 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n1 5\n5 7\n6 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n1 3\n3 4\n8\n1 2\n2 3\n6 4\n1 5\n2 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 3\n2 3\n3 4\n3 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n2 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n2 4\n1 5\n2 6\n8 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 2\n2 3\n3 4\n2 5\n3 6\n6 7\n1 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 2\n2 3\n3 4\n4 5\n0 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n1 3\n3 4\n8\n1 4\n2 3\n5 4\n2 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n2 5\n4 6\n1 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 2\n2 3\n1 4\n1 5\n8 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n3 8\n", "3\n3\n1 3\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n4 6\n6 7\n2 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n1 3\n3 4\n1 7\n5 6\n5 7\n4 8\n", "3\n3\n1 2\n1 3\n4\n1 4\n2 3\n3 4\n8\n1 2\n2 3\n2 4\n1 5\n2 6\n6 7\n6 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n1 6\n6 7\n6 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 3\n2 3\n2 4\n1 5\n2 6\n8 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 3\n2 3\n3 4\n4 5\n0 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n1 3\n3 4\n8\n1 4\n2 3\n5 4\n2 5\n5 6\n1 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n2\n1 2\n2 3\n3 4\n1 5\n5 0\n2 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n1 3\n3 4\n1 7\n5 6\n5 7\n7 8\n", "3\n3\n1 2\n1 3\n4\n1 4\n2 3\n3 4\n8\n1 2\n2 3\n1 4\n1 5\n2 6\n6 7\n6 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n1 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 3\n2 3\n3 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n2 4\n1 5\n5 6\n3 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n6 4\n1 5\n2 6\n6 7\n1 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n2 4\n4 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n2 3\n3 4\n2 7\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 3\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n2 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n1 3\n3 4\n8\n1 2\n2 3\n3 4\n2 5\n2 6\n8 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 3\n2 4\n3 4\n8\n1 2\n2 3\n6 4\n1 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n2 4\n2 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n1 3\n3 4\n1 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n5 4\n3 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n6 4\n1 5\n5 6\n8 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 4\n2 3\n3 4\n2 5\n3 6\n6 7\n1 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n5 13\n", "3\n3\n1 2\n2 3\n4\n1 2\n1 3\n2 4\n8\n1 2\n2 3\n5 4\n2 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 1\n1 4\n1 5\n4 6\n8 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 6\n5 4\n2 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 2\n2 3\n6 4\n2 5\n2 6\n3 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n5\n1 4\n2 3\n3 4\n2 5\n2 6\n1 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n2 3\n3 4\n3 5\n1 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 3\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n1 5\n5 6\n5 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n5\n1 3\n2 3\n1 4\n1 5\n2 6\n4 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 2\n2 3\n1 4\n1 5\n5 6\n2 7\n1 8\n", "3\n3\n1 3\n2 3\n4\n1 2\n1 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n2 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n3 5\n2 6\n2 7\n6 8\n", "3\n3\n1 2\n2 3\n4\n1 3\n2 4\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n2 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n3\n1 2\n2 3\n5 4\n2 5\n8 6\n6 7\n3 8\n", "3\n3\n1 3\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n2 4\n1 5\n2 6\n8 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 3\n2 3\n3 4\n2 5\n3 6\n6 7\n1 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n1 3\n3 4\n1 7\n5 6\n5 7\n4 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 3\n2 3\n3 4\n1 5\n0 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n2 4\n8\n1 2\n1 3\n3 4\n1 7\n5 6\n5 7\n7 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n4 3\n2 4\n4 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n1 3\n3 4\n8\n1 2\n2 3\n3 4\n3 5\n2 6\n8 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n2 4\n2 5\n2 6\n6 7\n4 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n4\n1 2\n1 3\n3 4\n1 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n6 4\n2 5\n5 6\n8 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 4\n2 3\n6 4\n2 5\n3 6\n6 7\n1 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n2 5\n2 6\n6 7\n4 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n4\n1 2\n1 3\n3 4\n1 5\n3 8\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n4\n1 2\n1 3\n3 4\n1 5\n3 8\n6 13\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n4\n1 2\n1 3\n3 4\n1 5\n3 8\n5 13\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n4\n1 2\n1 3\n3 4\n1 5\n3 8\n0 13\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 7\n5 6\n6 1\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n5\n1 2\n2 3\n3 4\n1 5\n2 6\n6 7\n5 8\n", "3\n3\n1 3\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n2 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n3 4\n2 5\n2 6\n6 7\n2 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n1 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n1 6\n4 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 4\n3 4\n2 5\n2 6\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n2 4\n1 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n1 4\n1 5\n5 6\n4 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n5 7\n6 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n1 4\n8\n1 2\n2 3\n2 4\n1 5\n5 6\n2 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n1 4\n1 5\n2 6\n1 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 3\n2 3\n3 4\n4 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 8\n2 6\n4 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n3 4\n1 5\n4 6\n1 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n1 4\n8\n1 2\n2 3\n6 4\n7 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 3\n2 3\n2 4\n1 5\n5 6\n4 7\n5 8\n", "3\n3\n1 3\n2 3\n4\n1 2\n2 3\n3 4\n8\n1 4\n2 3\n3 4\n1 7\n5 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 2\n2 3\n3 4\n4 5\n3 6\n4 7\n5 8\n", "3\n3\n1 3\n2 3\n4\n1 2\n2 3\n3 4\n7\n1 2\n2 3\n3 4\n2 5\n3 6\n6 7\n5 8\n", "3\n3\n1 3\n2 3\n4\n1 2\n2 3\n3 4\n7\n1 2\n2 3\n5 4\n1 5\n5 6\n6 7\n3 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n1 3\n3 4\n1 5\n2 6\n5 7\n6 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 2\n2 3\n3 4\n2 5\n1 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 2\n1 3\n3 4\n1 5\n2 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n3\n1 2\n2 3\n5 4\n2 5\n5 6\n0 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n4\n1 2\n2 3\n3 4\n2 5\n3 6\n6 7\n1 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n1 3\n3 4\n8\n1 4\n2 3\n5 4\n2 5\n5 6\n8 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 4\n2 3\n5 4\n2 5\n4 6\n1 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n2\n1 2\n2 2\n3 4\n1 5\n5 6\n2 7\n5 8\n", "3\n3\n1 2\n1 3\n4\n1 4\n2 3\n3 4\n8\n1 3\n2 3\n2 4\n1 5\n2 6\n6 7\n6 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 4\n3 4\n8\n1 3\n2 3\n2 4\n1 5\n2 6\n8 7\n1 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 3\n2 3\n6 4\n1 5\n2 6\n1 7\n1 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 3\n2 4\n4 5\n3 6\n6 7\n5 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n1 3\n2 4\n8\n1 2\n2 3\n5 4\n2 5\n5 6\n6 7\n1 8\n", "3\n3\n1 2\n1 3\n4\n1 2\n2 3\n3 4\n8\n1 2\n2 6\n5 4\n2 5\n3 6\n6 7\n6 8\n", "3\n3\n1 2\n2 3\n4\n1 3\n2 4\n3 4\n8\n1 4\n2 3\n3 4\n1 5\n2 6\n5 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n4\n1 3\n2 3\n1 4\n1 5\n2 6\n4 7\n3 8\n", "3\n3\n1 2\n2 3\n4\n1 4\n2 4\n3 4\n8\n1 2\n2 3\n1 4\n1 5\n5 6\n2 7\n2 8\n", "3\n3\n1 2\n2 3\n4\n1 2\n2 3\n3 4\n5\n1 3\n2 3\n3 4\n2 5\n3 6\n6 7\n0 8\n"], "output": ["2\n3\n3\n", "2\n3\n4\n", "2\n2\n4\n", "2\n2\n3\n", "2\n3\n5\n", "2\n2\n2\n", "2\n3\n2\n", "2\n2\n5\n", "2\n3\n1\n", "2\n3\n6\n", "2\n3\n7\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n2\n4\n", "2\n3\n4\n", "2\n2\n4\n", "2\n3\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n2\n3\n", "2\n3\n4\n", "2\n3\n4\n", "2\n3\n3\n", "2\n3\n3\n", "2\n2\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n3\n", "2\n2\n4\n", "2\n2\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n2\n4\n", "2\n2\n3\n", "2\n3\n3\n", "2\n2\n4\n", "2\n2\n3\n", "2\n2\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n4\n", "2\n3\n4\n", "2\n2\n3\n", "2\n2\n4\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n2\n3\n", "2\n2\n4\n", "2\n3\n4\n", "2\n3\n4\n", "2\n2\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n2\n4\n", "2\n2\n3\n", "2\n2\n4\n", "2\n3\n4\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n2\n4\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n3\n", "2\n3\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n2\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n4\n", "2\n2\n4\n", "2\n2\n3\n", "2\n2\n5\n", "2\n3\n4\n", "2\n3\n5\n", "2\n2\n4\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n2\n4\n", "2\n3\n1\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n2\n4\n", "2\n3\n4\n", "2\n2\n5\n", "2\n3\n3\n", "2\n2\n4\n", "2\n3\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n4\n", "2\n2\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n2\n3\n", "2\n2\n4\n", "2\n2\n3\n", "2\n3\n3\n", "2\n2\n2\n", "2\n2\n3\n", "2\n2\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n2\n", "2\n2\n3\n", "2\n3\n3\n", "2\n2\n4\n", "2\n3\n2\n", "2\n2\n3\n", "2\n3\n4\n", "2\n2\n4\n", "2\n2\n3\n", "2\n3\n2\n", "2\n3\n4\n", "2\n3\n4\n", "2\n2\n4\n", "2\n3\n2\n", "2\n3\n2\n", "2\n3\n2\n", "2\n3\n2\n", "2\n3\n4\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n5\n", "2\n2\n3\n", "2\n2\n4\n", "2\n2\n3\n", "2\n3\n4\n", "2\n3\n3\n", "2\n2\n4\n", "2\n2\n3\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n4\n", "2\n3\n4\n", "2\n2\n4\n", "2\n3\n4\n", "2\n3\n4\n", "2\n3\n4\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n3\n2\n", "2\n3\n3\n", "2\n2\n5\n", "2\n2\n5\n", "2\n3\n1\n", "2\n3\n3\n", "2\n3\n3\n", "2\n2\n4\n", "2\n3\n4\n", "2\n2\n3\n", "2\n3\n3\n", "2\n3\n3\n", "2\n2\n2\n", "2\n2\n3\n", "2\n3\n3\n"]}, "short_description": "1. One-sentence summary:  \nThe solution computes two aggregated DP values for each node in an undirected tree by iteratively pruning leaves and propagating a pair of metrics upward to the root.\n\n2. Core algorithmic approach:  \nTree\u2010shaped DP using a leaf-removal (topological\u2010order) traversal of an undirected tree.\n\n3. Reusable components:  \n- Leaf\u2010pruning loop: maintain a degree count array, repeatedly remove zero\u2010degree \u201cleaves,\u201d and enqueue their parents.  \n- Bottom\u2010up DP propagation: store per-node lists of child DP tuples, then combine child tuples into a parent tuple using min/max reductions.  \n- Fast I/O template: custom FastIO and IOWrapper classes to accelerate reading and writing in Python."}
{"name": "697_D. Puzzles", "description": "Barney lives in country USC (United States of Charzeh). USC has n cities numbered from 1 through n and n - 1 roads between them. Cities and roads of USC form a rooted tree (Barney's not sure why it is rooted). Root of the tree is the city number 1. Thus if one will start his journey from city 1, he can visit any city he wants by following roads.\n\n<image>\n\nSome girl has stolen Barney's heart, and Barney wants to find her. He starts looking for in the root of the tree and (since he is Barney Stinson not a random guy), he uses a random DFS to search in the cities. A pseudo code of this algorithm is as follows:\n    \n    \n      \n    let starting_time be an array of length n  \n    current_time = 0  \n    dfs(v):  \n    \tcurrent_time = current_time + 1  \n    \tstarting_time[v] = current_time  \n    \tshuffle children[v] randomly (each permutation with equal possibility)  \n    \t// children[v] is vector of children cities of city v  \n    \tfor u in children[v]:  \n    \t\tdfs(u)  \n    \n\nAs told before, Barney will start his journey in the root of the tree (equivalent to call dfs(1)).\n\nNow Barney needs to pack a backpack and so he wants to know more about his upcoming journey: for every city i, Barney wants to know the expected value of starting_time[i]. He's a friend of Jon Snow and knows nothing, that's why he asked for your help.\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 105) \u2014 the number of cities in USC.\n\nThe second line contains n - 1 integers p2, p3, ..., pn (1 \u2264 pi < i), where pi is the number of the parent city of city number i in the tree, meaning there is a road between cities numbered pi and i in USC.\n\nOutput\n\nIn the first and only line of output print n numbers, where i-th number is the expected value of starting_time[i].\n\nYour answer for each city will be considered correct if its absolute or relative error does not exceed 10 - 6.\n\nExamples\n\nInput\n\n7\n1 2 1 1 4 4\n\n\nOutput\n\n1.0 4.0 5.0 3.5 4.5 5.0 5.0 \n\n\nInput\n\n12\n1 1 2 2 4 4 3 3 1 10 8\n\n\nOutput\n\n1.0 5.0 5.5 6.5 7.5 8.0 8.0 7.0 7.5 6.5 7.5 8.0 ", "solution": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\npar = [-1] + [int(i) - 1 for i in input().split()]\nchild = [[] for i in range(n)]\nfor i in range(1, n):\n    child[par[i]].append(i)\n\nsize = [1] * n\ndef dfs():\n    stack = [0]\n    visit = [False] * n\n    while stack:\n        u = stack[-1]\n        if not visit[u]:\n            for v in child[u]:\n                stack.append(v)\n            visit[u] = True\n        else:\n            for v in child[u]:\n                size[u] += size[v]\n            stack.pop()\n\nans = [0] * n\nans[0] = 1\ndef dfs2():\n    stack = [0]\n    while stack:\n        u = stack.pop()\n        sm = 0\n        for v in child[u]:\n            sm += size[v]\n        for v in child[u]:\n            ans[v] = (sm - size[v]) * 0.5 + 1 + ans[u]\n            stack.append(v)\n\ndfs()\ndfs2()\nprint(*ans)\n\n\n", "difficulty": 10, "public_tests": {"input": ["12\n1 1 2 2 4 4 3 3 1 10 8\n", "7\n1 2 1 1 4 4\n"], "output": ["1.000000 5.000000 5.500000 6.500000 7.500000 8.000000 8.000000 7.000000 7.500000 6.500000 7.500000 8.000000\n", "1.000000 4.000000 5.000000 3.500000 4.500000 5.000000 5.000000\n"]}, "private_tests": {"input": ["3\n1 2\n", "10\n1 2 2 2 5 4 6 5 6\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "8\n1 1 2 2 3 6 1\n", "2\n1\n", "1\n"], "output": ["1.000000 2.000000 3.000000\n", "1.000000 2.000000 6.500000 6.000000 4.500000 6.000000 7.000000 7.500000 7.000000 7.500000\n", "1.000000 28.500000 27.000000 38.000000 38.500000 39.500000 44.500000 40.000000 40.500000 45.000000 37.000000 40.500000 44.000000 42.500000 43.500000 43.000000 41.000000 43.000000 39.500000 44.000000 45.000000 44.000000 42.500000 42.500000 41.000000 42.500000 44.500000 44.500000 44.000000 45.000000 43.500000 44.000000 44.000000 45.000000 42.000000 43.000000 43.000000 45.000000 42.500000 44.500000 43.000000 45.500000 45.000000 44.500000 44.500000 43.500000 45.500000 45.000000 43.500000 44.500000 44.500000 44.000000 45.500000 43.500000 45.500000 45.000000 45.500000 44.000000 44.500000 44.500000 45.000000 44.000000 45.000000 45.500000 45.000000 45.500000 45.000000 46.000000 44.500000 44.500000 46.000000 47.000000 44.500000 44.000000 46.000000 46.500000 46.000000 45.500000 46.000000 45.000000 44.000000 45.500000 45.000000 44.500000 46.000000\n", "1.000000 4.000000 4.000000 5.500000 5.500000 5.000000 6.000000 5.000000\n", "1.000000 2.000000\n", "1.000000\n"]}, "generated_tests": {"input": ["10\n1 2 2 2 5 5 6 5 6\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "8\n1 1 2 2 1 6 1\n", "12\n1 1 2 1 4 4 3 3 1 10 8\n", "7\n1 2 1 2 4 4\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 24 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "12\n1 1 2 1 4 4 5 3 1 10 8\n", "7\n1 2 2 2 4 4\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 18 8 4 25 31 32 39 24 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "12\n1 2 2 1 4 4 5 3 1 10 8\n", "7\n1 2 2 2 3 4\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 18 11 4 25 31 32 39 24 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "12\n1 2 2 1 3 4 5 3 1 10 8\n", "7\n1 2 2 2 3 1\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 18 11 4 25 31 32 39 24 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "12\n1 2 2 1 3 2 5 3 1 10 8\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 18 11 4 25 31 32 39 2 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "12\n1 1 2 1 3 2 5 3 1 10 8\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 18 11 4 25 31 32 39 2 35 23 31 26 3 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "3\n1 1\n", "10\n1 2 2 2 3 4 6 5 6\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 7 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "8\n1 1 2 2 5 6 1\n", "12\n1 1 3 2 4 4 3 3 1 10 8\n", "10\n1 2 2 2 5 3 6 5 6\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 15 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "8\n1 2 2 2 1 6 1\n", "12\n1 1 2 1 4 4 3 3 1 5 8\n", "85\n1 1 2 2 4 6 1 3 6 3 4 2 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 24 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 4 19 1 24 6 2 6 6 24 3 20 1 1 1 18 8 4 25 31 32 39 24 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "7\n1 2 2 2 2 1\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 18 11 4 25 31 32 39 2 35 23 31 26 46 10 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "12\n1 1 2 1 3 2 5 5 1 10 8\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 4 6 2 6 6 24 3 20 1 1 1 18 11 4 25 31 32 39 2 35 23 31 26 3 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "10\n1 2 2 2 3 1 6 5 6\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 7 28 15 25 58 56 18 23 70 31 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "10\n1 2 2 2 5 3 6 7 6\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 15 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 35 22 35 25 13 49 34\n", "7\n1 2 2 2 2 2\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 18 11 4 25 31 32 39 2 35 23 31 26 46 10 37 7 8 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "12\n1 1 2 1 3 1 5 5 1 10 8\n", "85\n1 1 1 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 4 6 2 6 6 24 3 20 1 1 1 18 11 4 25 31 32 39 2 35 23 31 26 3 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "10\n1 2 2 2 3 1 4 5 6\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 7 28 15 25 58 56 18 23 70 31 18 3 48 57 70 20 65 22 35 25 13 49 34\n", "10\n1 2 2 2 5 3 6 7 1\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 13 35 23 31 15 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 35 22 35 25 13 49 34\n", "85\n1 1 1 2 2 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 4 6 2 6 6 24 3 20 1 1 1 18 11 4 25 31 32 39 2 35 23 31 26 3 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 13 35 23 31 15 46 9 37 7 5 23 41 41 39 9 11 54 57 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 35 22 35 25 13 49 34\n", "85\n1 1 1 2 2 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 4 6 2 6 6 24 3 20 2 1 1 18 11 4 25 31 32 39 2 35 23 31 26 3 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 13 35 23 31 15 46 9 37 7 6 23 41 41 39 9 11 54 57 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 35 22 35 25 13 49 34\n", "85\n1 1 1 2 2 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 12 17 2 19 1 4 6 2 6 6 24 5 20 2 1 1 18 11 4 25 31 32 39 2 35 23 31 26 3 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 5 14 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 13 35 23 31 15 46 9 37 7 6 23 41 41 39 9 11 54 57 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 35 22 35 25 13 49 34\n", "85\n1 1 1 2 2 6 1 3 6 3 4 11 9 14 12 5 8 11 16 19 7 17 2 19 1 4 6 2 6 6 24 5 20 2 1 1 18 11 4 25 31 32 39 2 35 23 31 26 3 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 4 11 9 14 12 4 14 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 13 35 23 31 15 46 9 37 7 6 23 41 41 39 9 11 54 57 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 35 22 35 25 13 49 34\n", "85\n1 1 1 2 2 6 1 3 6 3 4 11 9 14 12 5 9 11 16 19 7 17 2 19 1 4 6 2 6 6 24 5 20 2 1 1 18 11 4 25 31 32 39 2 35 23 31 26 3 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 1 2 2 6 1 3 6 3 4 11 9 14 12 5 9 11 16 19 7 17 2 19 1 4 6 2 6 7 24 5 20 2 1 1 18 11 4 25 31 32 39 2 35 23 31 26 3 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 1 2 2 6 1 3 6 3 4 11 9 14 12 5 9 11 16 19 7 17 2 19 1 4 6 2 6 7 24 5 20 2 1 1 18 11 4 25 31 32 39 2 35 23 31 26 3 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 17 18 3 48 57 70 15 65 22 35 25 13 49 4\n", "10\n1 1 2 2 5 4 6 5 6\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 2 25 13 49 34\n", "8\n1 1 2 2 3 6 2\n", "7\n1 2 2 2 4 3\n"], "output": ["1.0 2.0 6.5 6.5 4.0 6.0 7.0 7.5 7.0 7.5\n", "1.0 24.5 31.0 34.0 38.5 39.5 44.5 40.0 40.5 45.0 37.0 41.0 44.0 42.5 43.5 43.5 41.0 43.0 39.5 44.5 45.0 44.5 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 45.0 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 4.0 5.0 5.5 5.5 4.5 5.5 5.0\n", "1.0 5.5 5.5 6.5 7.0 8.0 8.0 7.0 7.5 6.5 7.5 8.0\n", "1.0 3.5 5.0 3.5 5.0 5.0 5.0\n", "1.0 24.5 31.0 34.5 38.5 39.5 44.5 40.0 40.5 45.0 37.0 41.5 44.0 42.5 43.5 43.5 41.0 43.0 39.5 44.5 45.0 44.5 42.5 42.0 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 5.5 6.5 6.5 6.0 8.0 8.0 7.0 7.5 6.5 7.5 8.0\n", "1.0 2.0 5.0 4.0 5.0 5.5 5.5\n", "1.0 25.0 31.0 34.5 39.0 39.5 44.5 39.5 40.5 45.0 37.0 41.5 44.0 42.5 43.5 43.5 41.5 42.5 39.5 44.5 45.0 44.5 42.5 42.0 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.0 43.0 43.0 44.5 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 4.5 7.0 6.5 6.0 8.0 8.0 7.0 8.0 6.5 7.5 8.0\n", "1.0 2.0 4.5 4.5 5.0 5.5 5.5\n", "1.0 25.0 29.0 34.5 39.0 39.5 44.5 41.5 40.5 45.0 35.0 41.5 44.0 42.5 43.5 43.5 41.5 42.5 39.5 44.5 45.0 44.5 42.5 42.0 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.0 43.0 43.0 44.5 43.0 44.5 43.0 45.5 45.0 45.0 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.5 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 4.5 6.5 7.0 6.0 8.0 8.0 7.0 8.0 6.5 7.5 8.0\n", "1.0 2.5 4.5 5.0 5.0 5.5 4.5\n", "1.0 24.5 29.5 34.5 38.5 39.5 44.5 41.5 40.5 45.0 35.5 41.5 44.0 42.5 43.5 43.5 41.0 42.5 40.0 44.5 45.0 44.5 42.5 42.0 41.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.0 43.0 43.0 44.5 43.0 44.5 43.5 45.5 45.0 45.0 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 4.5 6.5 7.5 6.0 8.0 7.5 7.0 8.0 6.5 7.5 8.0\n", "1.0 24.5 29.5 34.5 38.5 39.5 44.5 41.5 40.5 45.0 35.5 41.5 44.0 42.5 43.5 43.5 41.0 42.5 40.0 44.5 45.0 44.5 42.5 42.5 41.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.0 43.0 43.0 44.5 43.0 44.5 43.5 45.5 45.0 45.0 44.0 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 6.0 6.0 7.5 6.0 7.5 7.5 7.0 7.5 6.5 7.5 8.0\n", "1.0 24.5 29.0 34.5 38.5 39.5 44.5 41.5 40.5 45.0 35.5 41.5 44.0 42.5 43.5 43.5 41.0 42.5 40.0 44.5 45.0 44.5 42.5 42.5 41.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.5 43.0 43.0 44.5 43.0 44.5 43.5 45.5 45.0 45.0 44.0 44.0 45.5 45.0 43.5 44.0 44.5 44.0 45.5 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 2.5 2.5\n", "1.0 2.0 5.0 6.0 6.0 6.0 7.0 7.5 7.0 7.5\n", "1.0 28.5 27.0 37.5 39.0 39.0 44.0 40.0 40.5 45.0 37.0 40.5 44.0 42.5 43.5 43.0 41.0 43.0 39.5 44.0 45.0 44.0 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 44.0 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.5 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 3.0 5.0 5.5 4.5 5.5 6.5 5.0\n", "1.0 6.5 4.0 6.5 7.5 8.0 8.0 7.0 7.5 6.5 7.5 8.0\n", "1.0 2.0 6.0 6.5 4.5 6.0 7.0 7.5 7.0 7.5\n", "1.0 24.5 30.0 34.0 38.5 39.5 44.5 40.0 39.5 45.0 37.0 41.0 44.0 41.5 42.5 43.5 41.0 43.0 39.5 44.5 45.0 44.5 42.5 42.5 41.0 43.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 45.0 43.5 45.5 45.0 45.0 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 46.0 46.5\n", "1.0 3.5 5.5 5.5 5.5 4.5 5.5 5.0\n", "1.0 5.5 5.5 6.5 6.5 8.0 8.0 7.0 7.5 7.0 7.5 8.0\n", "1.0 23.5 32.0 34.5 38.5 39.5 44.5 40.0 40.5 45.0 38.0 41.5 43.5 42.5 43.5 43.5 41.0 43.0 39.5 44.5 45.0 44.5 42.5 42.0 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 44.5 44.5 46.5\n", "1.0 25.0 31.0 32.0 39.0 39.5 44.5 39.5 40.5 45.0 37.0 41.5 44.0 42.5 43.5 43.5 41.5 42.5 39.5 44.5 45.0 44.5 42.5 42.5 41.0 42.5 45.0 44.5 44.0 45.0 43.5 44.5 44.0 45.5 42.0 43.0 43.0 44.5 42.5 44.5 43.0 45.5 45.5 44.5 45.0 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 2.5 5.0 5.0 5.0 5.0 4.5\n", "1.0 24.0 30.0 34.0 38.5 39.0 44.5 41.5 41.0 44.5 35.5 41.5 44.0 42.5 43.5 43.5 41.0 42.5 40.0 44.5 45.0 44.5 42.5 42.5 41.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.0 43.0 43.0 44.5 43.0 44.5 43.5 45.5 45.0 45.0 44.0 43.5 45.5 45.0 43.5 44.5 45.5 44.0 45.5 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 6.0 6.5 7.5 5.5 7.5 7.5 7.0 7.5 6.5 7.5 8.0\n", "1.0 24.5 29.0 34.0 38.5 39.5 44.5 41.5 40.5 45.0 35.5 41.5 44.0 42.5 43.5 43.5 41.0 42.5 40.0 44.5 45.0 44.5 42.5 43.0 41.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.5 43.0 43.0 44.5 43.0 44.5 43.5 45.5 45.0 45.0 44.0 44.0 45.5 45.0 43.5 44.0 44.5 44.0 45.5 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 2.5 5.0 6.5 6.0 6.0 6.0 7.5 7.0 7.5\n", "1.0 28.0 27.5 37.0 39.0 38.5 44.0 40.0 40.5 45.0 37.5 40.5 44.0 42.5 43.5 43.0 41.0 43.0 40.0 44.0 45.0 44.0 42.5 42.5 41.5 42.5 44.5 44.5 44.0 45.0 43.0 44.0 44.0 45.0 42.0 43.0 43.0 45.0 42.5 44.5 43.5 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 44.0 45.5 45.5 45.5 44.0 44.5 44.5 45.0 44.0 45.5 45.5 45.0 45.5 45.0 46.5 44.5 44.5 46.0 45.5 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 2.0 5.5 6.5 5.0 6.0 6.5 7.5 7.5 7.5\n", "1.0 24.5 30.5 34.0 38.5 39.5 44.5 40.0 40.0 45.0 37.0 41.0 44.0 42.0 43.0 43.5 41.0 43.0 39.5 44.5 45.0 44.5 42.5 42.5 41.0 43.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 41.5 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 45.0 43.5 45.5 45.0 45.0 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.5 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 44.0 45.5 44.0 45.5 45.0 46.0 46.5\n", "1.0 2.0 5.0 5.0 5.0 5.0 5.0\n", "1.0 25.5 30.0 34.0 40.0 39.0 44.5 40.0 41.0 44.5 35.5 41.5 44.0 42.5 43.5 43.5 41.0 42.5 40.0 44.5 45.0 44.5 42.5 42.5 41.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 42.0 43.0 43.0 44.5 43.0 44.5 43.5 45.5 45.0 45.0 44.0 43.5 45.5 45.0 43.5 44.5 45.5 44.0 45.5 43.0 45.5 45.5 45.5 44.5 44.5 44.5 44.5 44.0 44.5 45.5 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 6.5 6.5 7.5 5.5 7.5 7.0 7.0 7.5 6.5 7.5 8.0\n", "1.0 35.0 29.0 33.5 38.5 39.0 44.0 41.5 40.5 44.5 35.5 41.0 44.0 42.5 43.5 43.0 41.0 42.5 40.0 44.0 45.0 44.0 42.5 43.0 41.5 42.5 44.0 44.0 44.0 44.5 43.0 44.0 44.0 45.0 42.5 43.0 43.0 44.5 43.0 44.0 43.5 45.0 45.0 45.0 44.0 44.0 45.5 44.5 43.5 44.0 44.5 44.0 45.0 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.0 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 45.5 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 2.5 5.5 6.0 6.0 6.5 6.0 7.0 7.0 7.5\n", "1.0 28.0 27.5 37.0 39.0 38.5 44.0 40.0 41.0 45.0 37.5 40.0 44.0 43.0 44.0 42.5 41.0 43.0 40.0 43.5 45.0 44.0 42.5 42.5 41.5 42.5 44.5 44.5 44.0 45.0 43.0 44.0 44.0 45.0 42.0 43.0 43.0 45.0 42.5 44.5 43.5 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 44.0 45.5 45.5 45.5 44.0 44.5 44.5 45.0 44.0 45.5 45.5 45.0 45.5 45.0 46.5 44.5 44.5 46.0 45.5 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 2.5 5.5 6.5 5.5 6.5 6.5 7.5 7.5 6.0\n", "1.0 25.0 30.0 34.5 38.5 39.5 44.5 40.0 40.0 45.0 36.5 41.5 43.5 42.0 43.0 43.5 41.0 43.0 39.5 44.5 45.0 44.5 42.5 42.5 41.0 43.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 41.5 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 45.0 43.5 45.5 45.0 45.0 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.5 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 44.0 45.5 44.0 45.5 45.0 46.0 46.5\n", "1.0 29.5 29.0 39.0 38.5 39.0 44.0 41.5 40.5 44.5 35.5 41.0 44.0 42.5 43.5 43.0 41.0 42.5 40.0 44.0 45.0 44.0 42.5 43.0 41.5 42.5 44.0 44.0 44.0 44.5 43.0 44.0 44.0 45.0 42.5 43.0 43.0 44.5 43.0 44.0 43.5 45.0 45.0 45.0 44.0 44.0 45.5 44.5 43.5 44.0 44.5 44.0 45.0 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.0 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 45.5 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 25.0 29.5 34.5 38.5 39.5 44.5 40.0 40.0 45.0 36.0 41.5 43.5 42.0 43.0 43.5 41.0 43.0 39.0 44.5 45.0 44.5 42.5 42.5 40.5 43.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 41.5 43.5 43.0 45.0 42.5 44.5 42.5 45.5 45.0 44.5 45.0 43.5 45.5 45.0 45.0 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.0 44.0 44.5 44.5 45.0 46.5 45.0 45.5 45.5 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 44.0 45.5 44.0 45.5 45.0 46.0 46.5\n", "1.0 28.0 29.0 39.0 38.5 39.0 44.0 41.5 40.5 44.5 35.5 41.0 44.0 42.5 43.5 43.0 41.0 42.5 40.0 44.0 45.0 44.0 42.5 43.0 41.5 42.5 44.0 44.0 44.0 44.5 43.0 44.0 44.0 45.0 43.0 43.0 43.0 44.5 43.0 44.0 43.5 45.0 45.0 45.0 44.0 44.5 45.5 44.5 43.5 44.0 44.5 44.0 45.0 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.0 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 45.5 46.5 46.0 45.5 46.0 45.0 44.5 45.5 45.0 44.5 46.0\n", "1.0 25.0 29.5 33.0 40.0 38.0 44.5 40.0 40.0 45.0 36.0 41.5 43.5 42.0 43.0 43.5 41.0 43.0 39.0 44.5 45.0 44.5 42.5 42.5 40.5 43.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 41.5 43.5 43.0 45.0 42.5 44.5 42.5 45.5 45.0 44.5 45.0 43.5 45.5 45.0 45.0 44.5 44.5 44.0 45.5 44.0 45.5 45.0 45.0 44.0 44.5 44.5 45.5 46.5 45.5 45.5 45.5 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 44.0 45.5 44.0 45.5 45.0 46.0 46.5\n", "1.0 27.5 29.5 39.0 38.0 39.0 44.0 41.5 40.5 44.5 35.5 41.0 44.0 42.5 43.5 43.0 41.0 42.5 40.0 44.0 45.0 44.0 42.5 43.0 41.5 42.5 44.0 44.0 44.0 44.5 43.0 44.0 44.5 45.0 43.0 43.0 43.0 44.5 43.0 44.0 43.5 45.0 45.0 45.0 44.0 44.5 45.5 44.5 43.5 44.0 44.5 44.0 45.0 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.0 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 45.5 46.5 46.0 45.5 46.0 45.0 44.5 45.5 45.0 44.5 46.0\n", "1.0 25.0 28.0 33.0 40.0 38.0 44.5 41.5 38.5 45.0 36.0 41.5 43.5 40.5 43.0 43.5 41.0 44.0 39.0 44.5 45.0 44.5 42.5 42.5 40.5 43.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 41.5 43.5 43.0 45.0 42.5 44.5 42.5 45.5 45.0 44.5 45.0 43.5 45.5 45.0 45.0 44.5 44.5 44.0 45.5 44.0 45.5 45.0 45.0 44.0 44.5 44.5 45.5 46.5 45.5 45.5 45.5 45.5 45.0 46.0 45.5 44.5 46.0 47.0 45.5 44.0 46.0 46.5 46.0 45.5 44.0 45.5 44.0 45.5 45.0 46.0 46.5\n", "1.0 26.5 29.5 40.0 38.0 38.0 43.0 41.5 40.5 44.5 35.5 42.0 44.0 42.5 43.5 43.0 41.0 42.5 40.0 44.0 45.0 44.5 42.5 43.0 41.5 42.5 44.0 44.0 44.0 44.5 43.0 44.0 44.5 45.0 43.0 43.0 43.0 44.5 43.0 44.0 43.5 45.0 45.0 45.0 44.0 44.5 45.5 44.5 43.5 44.0 44.5 44.0 45.0 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.0 45.0 45.5 45.5 46.5 44.5 44.5 46.0 45.0 44.5 44.0 45.5 46.5 46.0 45.5 46.0 45.5 44.5 45.5 45.0 44.5 46.0\n", "1.0 25.0 28.0 29.0 44.0 38.0 44.5 41.5 38.5 45.0 36.0 41.5 43.5 40.5 43.0 43.5 41.0 44.0 39.0 44.5 45.0 44.5 42.5 42.5 40.5 43.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.5 41.5 43.5 43.0 45.0 42.5 44.5 42.5 45.5 45.0 44.5 45.0 43.5 45.5 45.0 45.0 44.5 44.5 44.0 45.5 44.0 45.5 45.0 45.0 44.0 44.5 44.5 45.5 46.5 45.5 45.5 45.5 45.5 45.0 46.0 45.5 44.5 46.0 47.0 45.5 44.0 46.0 46.5 46.0 45.5 44.0 45.5 44.0 45.5 45.0 46.0 46.5\n", "1.0 26.5 27.5 40.0 38.0 38.0 43.0 43.5 38.5 44.5 35.5 42.0 44.0 42.5 43.5 43.0 41.0 43.0 40.0 44.0 45.0 44.5 42.5 43.0 41.5 42.5 44.0 44.0 44.0 44.5 43.0 44.0 44.5 45.0 43.0 43.0 43.0 45.0 43.0 44.0 43.5 45.0 45.0 45.0 44.0 44.5 45.5 44.5 43.5 44.0 44.5 44.0 45.0 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.0 45.0 45.5 45.5 46.5 45.0 44.5 46.0 45.0 45.0 44.0 45.5 46.5 46.0 45.5 46.0 45.5 44.5 45.5 45.0 44.5 46.0\n", "1.0 26.5 27.5 40.0 38.0 38.0 41.0 43.5 38.5 44.5 35.5 42.0 44.0 42.5 43.5 43.0 41.0 43.0 40.0 44.0 45.0 44.5 42.5 43.0 41.5 42.5 44.0 44.0 44.0 44.5 43.5 44.0 44.5 45.0 43.0 43.0 43.0 45.0 43.0 44.0 43.5 45.5 45.0 45.0 44.0 44.5 45.5 45.0 43.5 44.0 44.5 44.0 45.0 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.0 45.0 45.5 45.5 46.5 45.0 44.5 46.0 45.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.5 45.5 45.0 44.5 46.0\n", "1.0 26.5 27.5 40.0 38.0 38.0 41.0 43.5 38.5 44.5 35.5 42.5 44.0 42.5 43.5 43.5 41.0 43.0 40.0 44.5 45.0 44.5 42.5 43.0 41.5 42.5 44.0 44.0 44.0 44.5 43.5 44.0 44.5 45.5 43.0 43.0 43.0 45.0 43.0 44.0 43.5 45.5 45.0 45.0 44.0 44.5 45.5 45.0 43.5 44.0 44.5 44.0 45.0 43.5 45.5 45.5 45.5 44.5 44.5 44.5 45.0 44.0 45.0 45.0 45.0 45.5 45.5 46.5 45.0 44.5 46.0 45.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.5 45.5 45.0 44.5 44.0\n", "1.0 2.5 6.0 6.0 4.5 6.0 7.0 7.5 7.0 7.5\n", "1.0 28.0 27.0 38.0 38.5 39.5 44.5 40.0 40.5 45.0 37.0 40.5 44.0 42.5 43.5 43.0 41.0 43.0 39.5 44.0 45.0 44.0 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.5 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 3.5 4.0 5.5 5.5 5.0 6.0 5.5\n", "1.0 2.0 4.5 4.5 5.0 5.5 5.5\n"]}, "short_description": "1. One-sentence summary:  \n   Compute a numerical value for every node in a rooted tree that depends on both its subtree sizes and contributions from being \u201cre-rooted\u201d at different positions.  \n\n2. Core algorithmic approach:  \n   \u2013 Two-pass tree dynamic programming (DP) via iterative depth-first searches:  \n     \u2022 First pass (post-order) to compute subtree sizes.  \n     \u2022 Second pass (pre-order) to propagate and \u201creroot\u201d DP values to children.  \n\n3. Reusable components:  \n   \u2013 Tree construction from a parent array into adjacency lists.  \n   \u2013 Iterative DFS for post-order subtree accumulation (using a stack + visited flag).  \n   \u2013 Rerooting-DP template: computing child values from parent\u2019s result and precomputed subtree aggregates."}
{"name": "1092_F. Tree with Maximum Cost", "description": "You are given a tree consisting exactly of n vertices. Tree is a connected undirected graph with n-1 edges. Each vertex v of this tree has a value a_v assigned to it.\n\nLet dist(x, y) be the distance between the vertices x and y. The distance between the vertices is the number of edges on the simple path between them.\n\nLet's define the cost of the tree as the following value: firstly, let's fix some vertex of the tree. Let it be v. Then the cost of the tree is \u2211_{i = 1}^{n} dist(i, v) \u22c5 a_i.\n\nYour task is to calculate the maximum possible cost of the tree if you can choose v arbitrarily.\n\nInput\n\nThe first line contains one integer n, the number of vertices in the tree (1 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5), where a_i is the value of the vertex i.\n\nEach of the next n - 1 lines describes an edge of the tree. Edge i is denoted by two integers u_i and v_i, the labels of vertices it connects (1 \u2264 u_i, v_i \u2264 n, u_i \u2260 v_i).\n\nIt is guaranteed that the given edges form a tree.\n\nOutput\n\nPrint one integer \u2014 the maximum possible cost of the tree if you can choose any vertex as v.\n\nExamples\n\nInput\n\n\n8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n\n\nOutput\n\n\n121\n\n\nInput\n\n\n1\n1337\n\n\nOutput\n\n\n0\n\nNote\n\nPicture corresponding to the first example: <image>\n\nYou can choose the vertex 3 as a root, then the answer will be 2 \u22c5 9 + 1 \u22c5 4 + 0 \u22c5 1 + 3 \u22c5 7 + 3 \u22c5 10 + 4 \u22c5 1 + 4 \u22c5 6 + 4 \u22c5 5 = 18 + 4 + 0 + 21 + 30 + 4 + 24 + 20 = 121.\n\nIn the second example tree consists only of one vertex so the answer is always 0.", "solution": "import sys\nfrom collections import deque\nfrom types import GeneratorType\nsys.setrecursionlimit(200000)\ninput = sys.stdin.readline\ndef bootstrap(f, stack=[]):\n    def wrappedfunc(*args, **kwargs):\n        if stack:\n            return f(*args, **kwargs)\n        else:\n            to = f(*args, **kwargs)\n            while True:\n                if type(to) is GeneratorType:\n                    stack.append(to)\n                    to = next(to)\n                else:\n                    stack.pop()\n                    if not stack:\n                        break\n                    to = stack[-1].send(to)\n            return to\n \n    return wrappedfunc\n\nn = int(input())\nval = [int(i) for i in input().split()]\ntree = [[] for i in range(n + 1)]\ndp = [0 for i in range(n + 1)]\ns = [0 for i in range(n + 1)]\nans = [0 for i in range(n + 1)]\nfor i in range(n - 1):\n    a,b = map(int,input().split())\n    tree[a].append(b)\n    tree[b].append(a)\n@bootstrap\ndef dfs1(node,dist,pd):\n\n    for child in tree[node]:\n        if child == pd:\n            continue\n        yield dfs1(child,dist + 1, node)\n        dp[node] += dp[child]\n        s[node] += s[child]\n    dp[node] += val[node - 1] * dist\n    s[node] += val[node - 1]\n    yield dp[node]\ndfs1(1,0,1)\nq = deque(); ans[1] = dp[1]\nfor node in tree[1]:\n    q.append((node,1))\n\nwhile len(q) > 0:\n    node,pd = q.popleft()\n    sub_dp = ans[pd] - (dp[node] + s[node])\n    added = s[1] - s[node]\n    ans[node] = sub_dp + added + dp[node]\n    for child in tree[node]:\n        if child == pd:\n            continue\n        q.append((child,node))\nprint(max(ans))\n", "difficulty": 12, "public_tests": {"input": ["1\n1337\n", "8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n"], "output": ["0\n", "121\n"]}, "private_tests": {"input": ["2\n12345 65432\n2 1\n"], "output": ["65432\n"]}, "generated_tests": {"input": ["1\n617\n", "8\n9 4 1 7 10 1 1 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n", "8\n9 4 1 7 10 1 1 10\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n", "8\n9 4 1 8 10 1 1 10\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n", "8\n9 3 1 8 10 1 1 10\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n", "1\n662\n", "1\n678\n", "1\n623\n", "1\n146\n", "1\n47\n", "1\n39\n", "1\n11\n", "1\n10\n", "1\n2\n", "1\n3\n", "1\n6\n", "1\n0\n", "1\n-1\n", "1\n-2\n", "1\n-4\n", "1\n1\n", "1\n20\n", "1\n30\n", "1\n29\n", "1\n37\n", "1\n33\n", "1\n4\n", "1\n-3\n", "1\n5\n", "1\n-5\n", "1\n-9\n", "1\n-6\n", "1\n7\n", "1\n8\n", "1\n15\n", "1\n22\n", "1\n36\n", "1\n-8\n", "1\n-12\n", "1\n-15\n", "1\n-16\n", "1\n-7\n", "1\n-14\n", "1\n-21\n", "1\n-13\n", "1\n-24\n", "1\n-19\n", "1\n-10\n", "1\n9\n", "1\n14\n", "1\n26\n", "1\n27\n", "1\n12\n", "1\n24\n", "1\n-11\n", "1\n-20\n", "1\n-26\n", "1\n-18\n", "1\n-25\n"], "output": ["0\n", "101\n", "121\n", "124\n", "123\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:\nCompute, for each node in a tree with weighted nodes, the total weighted distance sum when the tree is rooted at that node and return the maximum over all nodes.\n\n2. Core algorithmic approach:\n\u2013 Tree DP with a two-phase rerooting technique.  \n\u2013 First DFS (using a recursion bootstrap) to compute for a fixed root:  \n   \u2022 dp[u] = sum of (weight[v] * dist(root,u)) over subtree  \n   \u2022 s[u] = sum of weights in subtree  \n\u2013 Second pass (BFS/queue) to \u201creroot\u201d these values in O(1) per edge, deriving the answer for every possible root.\n\n3. Reusable components:\n\u2013 Bootstrap decorator pattern to turn recursive generator functions into iterative recursion-safe traversals.  \n\u2013 Subtree-accumulation DP: computing (subtree sum of weights, subtree weighted\u2010distance sum) in one post-order pass.  \n\u2013 Rerooting transition formula: updating dp[rooted_at_v] from dp[rooted_at_u] using subtree sums in O(1) per edge."}
{"name": "1336_A. Linova and Kingdom", "description": "Writing light novels is the most important thing in Linova's life. Last night, Linova dreamed about a fantastic kingdom. She began to write a light novel for the kingdom as soon as she woke up, and of course, she is the queen of it.\n\n<image>\n\nThere are n cities and n-1 two-way roads connecting pairs of cities in the kingdom. From any city, you can reach any other city by walking through some roads. The cities are numbered from 1 to n, and the city 1 is the capital of the kingdom. So, the kingdom has a tree structure.\n\nAs the queen, Linova plans to choose exactly k cities developing industry, while the other cities will develop tourism. The capital also can be either industrial or tourism city.\n\nA meeting is held in the capital once a year. To attend the meeting, each industry city sends an envoy. All envoys will follow the shortest path from the departure city to the capital (which is unique).\n\nTraveling in tourism cities is pleasant. For each envoy, his happiness is equal to the number of tourism cities on his path.\n\nIn order to be a queen loved by people, Linova wants to choose k cities which can maximize the sum of happinesses of all envoys. Can you calculate the maximum sum for her?\n\nInput\n\nThe first line contains two integers n and k (2\u2264 n\u2264 2 \u22c5 10^5, 1\u2264 k< n) \u2014 the number of cities and industry cities respectively.\n\nEach of the next n-1 lines contains two integers u and v (1\u2264 u,v\u2264 n), denoting there is a road connecting city u and city v.\n\nIt is guaranteed that from any city, you can reach any other city by the roads.\n\nOutput\n\nPrint the only line containing a single integer \u2014 the maximum possible sum of happinesses of all envoys.\n\nExamples\n\nInput\n\n\n7 4\n1 2\n1 3\n1 4\n3 5\n3 6\n4 7\n\n\nOutput\n\n\n7\n\nInput\n\n\n4 1\n1 2\n1 3\n2 4\n\n\nOutput\n\n\n2\n\nInput\n\n\n8 5\n7 5\n1 7\n6 1\n3 7\n8 3\n2 1\n4 5\n\n\nOutput\n\n\n9\n\nNote\n\n<image>\n\nIn the first example, Linova can choose cities 2, 5, 6, 7 to develop industry, then the happiness of the envoy from city 2 is 1, the happiness of envoys from cities 5, 6, 7 is 2. The sum of happinesses is 7, and it can be proved to be the maximum one.\n\n<image>\n\nIn the second example, choosing cities 3, 4 developing industry can reach a sum of 3, but remember that Linova plans to choose exactly k cities developing industry, then the maximum sum is 2.", "solution": "import os\nimport sys\nfrom io import BytesIO, IOBase\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n##################################################\nimport threading\nsys.setrecursionlimit(200000)\nthreading.stack_size(10**8)\ndef dfs(x,a):\n    global v,d,l,adj\n    v[x]=1\n    d[x]=a\n    c=0\n    for i in adj[x]:\n        if not v[i]:\n            c+=dfs(i,a+1)+1\n    l[x]=c\n    return(l[x])\ndef main():\n    global v,d,l,adj\n    n,k=map(int,input().split())\n    v=[0]*(n+1)\n    l=[0]*(n+1)\n    d=[0]*(n+1)\n    adj=[]\n    for i in range(n+1):\n        adj.append([])\n    for i in range(n-1):\n        x,y=map(int,input().split())\n        adj[x].append(y)\n        adj[y].append(x)\n    dfs(1,0)\n    l1=[]\n    for i in range(1,n+1):\n        l1.append(l[i]-d[i])\n    l1.sort(reverse=True)\n    print(sum(l1[:n-k]))\n    \nt=threading.Thread(target=main)\nt.start()\nt.join()\n        \n    \n    \n        \n    \n    \n    \n", "difficulty": 7, "public_tests": {"input": ["7 4\n1 2\n1 3\n1 4\n3 5\n3 6\n4 7\n", "4 1\n1 2\n1 3\n2 4\n", "8 5\n7 5\n1 7\n6 1\n3 7\n8 3\n2 1\n4 5\n"], "output": ["7\n", "2\n", "9\n"]}, "private_tests": {"input": ["3 1\n1 2\n2 3\n", "2 1\n1 2\n", "20 7\n9 7\n3 7\n15 9\n1 3\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 1\n16 13\n", "3 2\n1 2\n1 3\n"], "output": ["2\n", "1\n", "38\n", "2\n"]}, "generated_tests": {"input": ["4 1\n1 2\n1 3\n3 4\n", "7 4\n1 2\n1 6\n1 4\n3 5\n3 6\n4 7\n", "7 4\n1 2\n2 6\n1 4\n3 5\n3 6\n4 7\n", "7 4\n1 2\n2 6\n2 4\n3 5\n3 6\n4 7\n", "8 5\n7 5\n1 7\n6 1\n3 7\n8 3\n2 1\n4 6\n", "4 2\n1 2\n1 3\n3 4\n", "20 7\n9 7\n3 11\n15 9\n1 3\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 1\n16 13\n", "7 4\n1 2\n1 6\n1 4\n2 5\n3 6\n4 7\n", "20 7\n9 7\n3 11\n15 9\n1 3\n11 5\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 2\n16 13\n", "20 7\n9 7\n3 7\n15 9\n1 3\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 4\n10 9\n6 13\n5 8\n14 1\n16 13\n", "8 5\n7 5\n1 4\n6 1\n3 7\n8 3\n2 1\n4 5\n", "20 7\n9 7\n3 11\n15 9\n1 5\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 1\n16 13\n", "20 7\n9 7\n3 11\n15 9\n1 5\n11 9\n18 7\n17 18\n20 1\n4 6\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 1\n16 13\n", "20 7\n9 7\n3 11\n15 5\n1 3\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 1\n16 13\n", "20 7\n9 7\n3 11\n15 9\n1 3\n11 5\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 12\n13 2\n19 2\n10 9\n6 13\n5 8\n14 2\n16 13\n", "20 7\n9 7\n3 11\n15 9\n1 5\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 3\n10 9\n6 13\n5 8\n14 1\n16 13\n", "20 7\n9 7\n3 7\n15 9\n1 3\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 15\n6 13\n5 8\n14 1\n16 13\n", "20 7\n9 7\n3 11\n15 9\n1 3\n11 9\n18 7\n17 18\n20 1\n4 11\n2 15\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 1\n16 13\n", "20 7\n9 7\n3 11\n15 5\n1 3\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 16\n6 13\n5 8\n14 1\n16 13\n", "20 7\n9 7\n3 11\n15 18\n1 5\n11 9\n18 7\n17 18\n20 1\n4 6\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 1\n16 18\n", "7 2\n1 2\n1 3\n1 4\n7 5\n3 6\n4 7\n", "20 7\n9 7\n3 11\n15 5\n1 6\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 16\n6 13\n5 8\n14 1\n16 13\n", "3 1\n1 2\n1 3\n", "4 2\n1 2\n2 3\n3 4\n", "7 4\n1 2\n2 6\n2 4\n4 5\n3 6\n4 7\n", "4 2\n1 2\n1 3\n2 4\n", "4 1\n1 2\n2 3\n3 4\n", "7 4\n1 2\n1 6\n2 4\n3 5\n3 6\n4 7\n", "7 4\n1 2\n2 6\n1 4\n3 5\n3 6\n3 7\n", "3 2\n3 2\n1 3\n", "4 1\n1 2\n2 3\n2 4\n", "3 1\n1 3\n2 3\n", "7 4\n1 2\n1 3\n1 4\n6 5\n3 6\n4 7\n", "8 5\n7 5\n1 7\n6 1\n3 4\n8 3\n2 1\n4 6\n", "20 7\n9 7\n3 11\n15 9\n1 3\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 2\n16 13\n", "3 1\n3 2\n1 3\n", "8 5\n7 5\n1 7\n6 1\n3 4\n8 2\n2 1\n4 6\n", "3 2\n1 3\n2 3\n", "3 2\n1 2\n2 3\n", "7 4\n1 2\n1 3\n1 4\n3 5\n3 6\n1 7\n", "7 4\n1 2\n2 6\n1 4\n3 5\n3 1\n4 7\n", "7 4\n1 2\n1 3\n2 4\n6 5\n3 6\n4 7\n", "7 4\n1 2\n1 3\n2 4\n6 5\n3 6\n5 7\n", "8 4\n7 5\n1 7\n6 1\n3 7\n8 3\n2 1\n4 5\n", "7 4\n1 4\n1 6\n2 4\n3 5\n3 6\n4 7\n", "8 5\n7 5\n1 7\n6 1\n3 4\n8 3\n2 1\n4 2\n", "7 4\n1 2\n1 3\n1 4\n3 5\n2 6\n1 7\n", "20 7\n9 7\n3 11\n15 9\n1 5\n11 9\n18 7\n17 18\n20 1\n4 6\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 1\n16 18\n", "8 5\n7 5\n1 7\n6 1\n3 1\n8 3\n2 1\n4 5\n", "7 4\n1 2\n2 6\n1 4\n3 5\n5 6\n4 7\n", "7 4\n1 2\n1 6\n2 4\n4 5\n3 6\n4 7\n", "8 5\n7 5\n1 7\n6 1\n3 6\n8 3\n2 1\n4 6\n", "7 4\n1 2\n1 6\n1 4\n3 5\n3 6\n3 7\n", "7 4\n1 2\n1 3\n1 4\n7 5\n3 6\n4 7\n", "8 5\n7 5\n2 7\n6 1\n3 4\n8 2\n2 1\n4 6\n", "20 7\n9 13\n3 11\n15 9\n1 3\n11 5\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 2\n16 13\n", "8 5\n7 6\n1 4\n6 1\n3 7\n8 3\n2 1\n4 5\n", "7 4\n1 2\n2 6\n1 4\n4 5\n3 1\n4 7\n", "20 7\n9 7\n3 11\n15 9\n1 5\n11 9\n18 7\n17 18\n20 1\n4 6\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 12\n14 1\n16 13\n", "8 5\n7 5\n2 7\n6 1\n3 4\n8 3\n2 1\n4 2\n", "20 7\n9 7\n3 11\n15 9\n1 3\n11 5\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 12\n13 2\n19 1\n10 9\n6 13\n5 8\n14 2\n16 13\n", "7 4\n1 2\n1 6\n1 4\n6 5\n3 6\n4 7\n", "7 4\n1 2\n2 6\n1 4\n4 5\n3 6\n4 7\n", "8 5\n7 5\n1 7\n6 1\n3 7\n8 2\n2 1\n4 6\n", "4 2\n1 4\n1 3\n2 4\n", "7 4\n1 2\n2 6\n1 4\n1 5\n3 6\n3 7\n", "4 2\n1 2\n2 3\n2 4\n", "7 3\n1 2\n1 3\n1 4\n6 5\n3 6\n4 7\n", "8 5\n7 5\n1 7\n6 1\n3 4\n8 4\n2 1\n4 6\n", "20 7\n9 7\n3 7\n15 9\n1 3\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 4\n10 2\n6 13\n5 8\n14 1\n16 13\n", "7 4\n1 2\n1 3\n1 4\n3 5\n3 6\n2 7\n", "7 4\n1 2\n1 3\n2 4\n6 5\n3 6\n2 7\n", "20 7\n9 7\n3 11\n15 9\n1 5\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 1\n10 9\n6 13\n5 8\n14 1\n16 13\n", "20 7\n9 7\n3 11\n15 9\n1 5\n11 9\n18 7\n17 18\n20 1\n4 6\n2 11\n12 18\n8 18\n13 2\n19 1\n10 9\n6 13\n5 8\n14 1\n16 13\n", "8 4\n7 5\n1 7\n6 1\n3 7\n8 3\n2 1\n4 8\n", "7 4\n1 4\n1 6\n2 4\n1 5\n3 6\n4 7\n"], "output": ["2\n", "7\n", "8\n", "10\n", "9\n", "3\n", "38\n", "6\n", "43\n", "37\n", "11\n", "52\n", "54\n", "40\n", "45\n", "51\n", "39\n", "44\n", "41\n", "49\n", "5\n", "50\n", "1\n", "4\n", "10\n", "3\n", "3\n", "8\n", "10\n", "2\n", "2\n", "2\n", "7\n", "9\n", "38\n", "2\n", "8\n", "2\n", "2\n", "6\n", "6\n", "8\n", "8\n", "8\n", "8\n", "9\n", "6\n", "51\n", "8\n", "8\n", "8\n", "9\n", "8\n", "7\n", "10\n", "40\n", "9\n", "7\n", "54\n", "11\n", "45\n", "7\n", "8\n", "8\n", "3\n", "8\n", "4\n", "6\n", "9\n", "39\n", "7\n", "8\n", "50\n", "51\n", "9\n", "7\n"]}, "short_description": "1. One-sentence summary  \nCompute for each node in an undirected tree a score based on its depth and subtree size, then select the top scores to maximize the total.\n\n2. Core algorithmic approach  \n- Depth-first search (DFS) on a tree to compute depths and subtree sizes in O(n).  \n- Greedy selection by sorting the derived scores in descending order and summing the largest n\u2212k values.\n\n3. Reusable components  \n- A DFS routine that simultaneously records node depths and subtree sizes in a single traversal.  \n- An adjacency-list representation of an undirected tree.  \n- A pattern for transforming per-node metrics into a one-dimensional array, sorting, and taking a prefix sum of the largest elements."}
{"name": "696_B. Puzzles", "description": "Barney lives in country USC (United States of Charzeh). USC has n cities numbered from 1 through n and n - 1 roads between them. Cities and roads of USC form a rooted tree (Barney's not sure why it is rooted). Root of the tree is the city number 1. Thus if one will start his journey from city 1, he can visit any city he wants by following roads.\n\n<image>\n\nSome girl has stolen Barney's heart, and Barney wants to find her. He starts looking for in the root of the tree and (since he is Barney Stinson not a random guy), he uses a random DFS to search in the cities. A pseudo code of this algorithm is as follows:\n    \n    \n      \n    let starting_time be an array of length n  \n    current_time = 0  \n    dfs(v):  \n    \tcurrent_time = current_time + 1  \n    \tstarting_time[v] = current_time  \n    \tshuffle children[v] randomly (each permutation with equal possibility)  \n    \t// children[v] is vector of children cities of city v  \n    \tfor u in children[v]:  \n    \t\tdfs(u)  \n    \n\nAs told before, Barney will start his journey in the root of the tree (equivalent to call dfs(1)).\n\nNow Barney needs to pack a backpack and so he wants to know more about his upcoming journey: for every city i, Barney wants to know the expected value of starting_time[i]. He's a friend of Jon Snow and knows nothing, that's why he asked for your help.\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 105) \u2014 the number of cities in USC.\n\nThe second line contains n - 1 integers p2, p3, ..., pn (1 \u2264 pi < i), where pi is the number of the parent city of city number i in the tree, meaning there is a road between cities numbered pi and i in USC.\n\nOutput\n\nIn the first and only line of output print n numbers, where i-th number is the expected value of starting_time[i].\n\nYour answer for each city will be considered correct if its absolute or relative error does not exceed 10 - 6.\n\nExamples\n\nInput\n\n7\n1 2 1 1 4 4\n\n\nOutput\n\n1.0 4.0 5.0 3.5 4.5 5.0 5.0 \n\n\nInput\n\n12\n1 1 2 2 4 4 3 3 1 10 8\n\n\nOutput\n\n1.0 5.0 5.5 6.5 7.5 8.0 8.0 7.0 7.5 6.5 7.5 8.0 ", "solution": "n = int(input())\nif n ==1:\n    print(1)\n    exit(0)\nl = list(map(int,input().split()))\nw = [[]for i in range(n)]\nsz = [1]*n\nfor i in range(n-1):\n    w[l[i]-1].append(i+1)\nfor i in range(n-1,-1,-1):\n    for j in range(len(w[i])):\n        sz[i]+=sz[w[i][j]]\nans = [0]*n\nfor i in range(n):\n    for j in range(len(w[i])):\n        ans[w[i][j]] = ans[i]+1+(sz[i]-1-sz[w[i][j]])/2\nfor i in range(n):\n    print(ans[i]+1,end = \" \")", "difficulty": 8, "public_tests": {"input": ["7\n1 2 1 1 4 4\n", "12\n1 1 2 2 4 4 3 3 1 10 8\n"], "output": ["1.00000000 4.00000000 5.00000000 3.50000000 4.50000000 5.00000000 5.00000000 ", "1.00000000 5.00000000 5.50000000 6.50000000 7.50000000 8.00000000 8.00000000 7.00000000 7.50000000 6.50000000 7.50000000 8.00000000 "]}, "private_tests": {"input": ["10\n1 2 2 2 5 4 6 5 6\n", "2\n1\n", "8\n1 1 2 2 3 6 1\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "3\n1 2\n", "1\n"], "output": ["1.00000000 2.00000000 6.50000000 6.00000000 4.50000000 6.00000000 7.00000000 7.50000000 7.00000000 7.50000000 ", "1.00000000 2.00000000 ", "1.00000000 4.00000000 4.00000000 5.50000000 5.50000000 5.00000000 6.00000000 5.00000000 ", "1.00000000 28.50000000 27.00000000 38.00000000 38.50000000 39.50000000 44.50000000 40.00000000 40.50000000 45.00000000 37.00000000 40.50000000 44.00000000 42.50000000 43.50000000 43.00000000 41.00000000 43.00000000 39.50000000 44.00000000 45.00000000 44.00000000 42.50000000 42.50000000 41.00000000 42.50000000 44.50000000 44.50000000 44.00000000 45.00000000 43.50000000 44.00000000 44.00000000 45.00000000 42.00000000 43.00000000 43.00000000 45.00000000 42.50000000 44.50000000 43.00000000 45.50000000 45.00000000 44.50000000 44.50000000 43.50000000 45.50000000 45.00000000 43.50000000 44.50000000 44.50000000 44.00000000 45.50000000 43.50000000 45.50000000 45.00000000 45.50000000 44.00000000 44.50000000 44.50000000 45.00000000 44.00000000 45.00000000 45.50000000 45.00000000 45.50000000 45.00000000 46.00000000 44.50000000 44.50000000 46.00000000 47.00000000 44.50000000 44.00000000 46.00000000 46.50000000 46.00000000 45.50000000 46.00000000 45.00000000 44.00000000 45.50000000 45.00000000 44.50000000 46.00000000 ", "1.00000000 2.00000000 3.00000000 ", "1.00000000 "]}, "generated_tests": {"input": ["10\n1 2 2 2 5 4 6 5 1\n", "8\n1 1 2 1 3 6 1\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 9 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "12\n1 1 2 2 4 4 3 4 1 10 8\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 25 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 25 65 22 35 25 13 49 34\n", "8\n1 1 2 4 3 6 1\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 3 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "12\n1 1 2 3 4 4 3 3 1 10 8\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 19 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 31 23 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 1 15 25 58 56 18 23 70 68 19 3 48 57 70 25 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 32 65 22 35 25 13 49 34\n", "8\n1 1 3 4 3 6 1\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 19 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 15 65 22 35 31 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 31 4 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 30 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 31 4 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "10\n1 2 3 2 5 4 6 5 6\n", "12\n1 2 2 2 4 4 3 3 1 10 8\n", "10\n1 2 2 2 1 4 6 5 1\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 9 28 15 25 58 56 18 28 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "12\n1 1 2 2 4 4 3 4 2 10 8\n", "85\n1 1 2 2 4 6 1 3 6 3 3 2 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 1 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 25 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 14 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 25 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 3 5 8 11 16 19 12 17 2 4 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 5 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 31 23 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 19 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 32 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 31 4 70 68 19 3 48 57 70 15 65 22 35 25 8 49 34\n", "12\n1 1 2 2 4 4 3 4 2 10 2\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 14 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 25 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 25 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 5 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 2 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 31 23 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 13 19 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 32 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 6 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 31 4 70 68 19 3 48 57 70 15 65 22 35 25 8 49 34\n", "12\n1 1 2 1 4 4 3 4 2 10 2\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 9 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 25 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 25 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 5 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 2 3 20 1 1 1 17 8 4 25 31 32 39 12 35 2 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 31 23 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 14 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 13 19 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 32 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 9 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 25 23 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 25 65 42 35 25 13 49 34\n", "85\n1 1 2 2 4 6 1 3 6 3 5 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 2 3 20 1 2 1 17 8 4 25 31 32 39 12 35 2 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 31 23 70 68 19 3 48 57 70 15 65 22 35 25 13 49 34\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 14 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 13 19 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 32 65 22 9 25 13 49 34\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 14 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 5 32 39 12 13 19 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 32 65 22 9 25 13 49 34\n", "85\n1 1 2 2 4 3 1 3 6 3 3 11 9 14 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 5 32 39 12 13 19 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 32 65 22 9 25 13 49 58\n", "85\n1 1 2 2 3 3 1 3 6 3 3 11 9 14 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 5 32 39 12 13 19 31 26 46 9 37 7 5 23 41 41 54 9 11 54 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 32 65 22 9 25 13 49 58\n", "85\n1 1 2 2 3 3 1 3 6 3 3 11 9 14 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 5 32 39 12 13 19 31 26 46 9 37 7 5 23 41 41 54 9 11 50 36 9 28 15 25 58 56 18 23 70 68 19 3 48 57 70 32 65 22 9 25 13 49 58\n", "85\n1 1 2 2 3 3 1 3 6 3 3 11 9 14 12 5 8 8 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 5 32 39 12 13 19 31 26 46 9 37 7 5 23 41 41 54 9 11 50 36 9 28 15 48 58 56 18 23 70 68 19 3 48 57 70 32 65 22 9 25 13 49 58\n", "85\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 74 70 15 65 22 35 25 13 49 34\n", "7\n1 2 1 1 1 4\n", "12\n1 1 2 2 2 4 3 3 1 10 8\n"], "output": ["1.0 2.5 6.5 6.0 5.0 6.5 7.0 7.5 7.0 6.0\n", "1.0 4.5 4.0 5.5 5.0 5.0 6.0 5.0\n", "1.0 29.0 26.5 38.0 39.0 39.5 44.5 40.0 40.0 45.0 37.0 40.5 44.0 42.5 43.5 43.0 41.0 43.0 39.5 44.0 45.0 44.0 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 44.0 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 4.5 6.0 6.0 7.5 8.0 8.0 7.0 8.0 6.5 7.5 8.0\n", "1.0 29.0 26.0 38.0 39.0 39.5 44.5 40.5 40.0 45.0 36.5 40.5 44.0 42.5 43.5 43.0 41.0 43.5 39.0 44.0 45.0 44.0 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 44.0 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 28.0 26.0 38.0 38.0 39.5 44.5 41.5 40.0 45.0 36.5 40.5 44.0 42.5 43.5 43.0 41.0 43.5 39.0 44.0 45.0 44.0 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 28.0 26.0 38.0 38.0 39.5 44.5 41.5 40.5 45.0 36.0 40.5 44.0 43.0 44.0 43.0 41.0 43.5 38.5 44.0 45.0 44.0 42.5 42.5 40.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 29.0 25.0 39.0 38.0 40.5 43.5 41.5 40.5 45.0 36.0 40.5 44.0 43.0 44.0 43.0 41.0 43.5 38.5 44.0 45.0 44.0 42.5 42.5 40.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 44.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 4.0 4.0 5.0 6.0 5.0 6.0 5.0\n", "1.0 28.5 27.0 38.0 38.5 39.5 44.5 40.0 40.5 45.0 37.0 42.5 44.0 42.5 43.5 42.5 41.0 43.0 39.5 43.5 45.0 44.0 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 44.5 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 45.5\n", "1.0 5.5 5.0 6.5 7.5 8.0 8.0 7.0 7.5 6.5 7.5 8.0\n", "1.0 29.0 25.5 38.0 39.0 39.5 44.5 41.0 40.0 45.0 36.0 40.5 44.0 42.5 43.5 43.0 41.0 43.5 38.5 44.0 45.0 44.0 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.0 44.5 43.0 45.5 45.0 45.0 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 44.0 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 27.5 26.0 37.5 38.0 39.0 44.5 42.0 40.0 45.0 36.5 40.5 44.0 42.5 43.5 43.0 41.0 44.0 39.0 44.0 45.0 44.0 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.0 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 45.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 28.5 26.0 38.5 38.0 40.0 44.5 41.5 40.5 45.0 36.0 40.5 44.0 43.0 44.0 43.0 41.0 43.5 38.5 44.0 45.0 44.0 42.5 42.5 40.5 42.5 44.5 45.0 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 43.5 45.0 45.5 45.5 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 28.5 25.5 39.0 38.0 40.5 43.5 41.5 40.5 45.0 36.5 40.5 44.0 43.0 44.0 43.0 41.0 43.5 39.0 44.0 45.0 44.0 42.5 42.0 41.0 42.5 44.5 44.5 44.0 45.0 43.5 43.5 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 44.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.0 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 5.0 3.0 5.0 6.0 5.0 6.0 5.0\n", "1.0 28.5 26.0 37.5 39.0 39.0 44.5 41.0 40.0 45.0 36.5 40.5 44.0 42.5 43.5 43.0 41.0 43.5 39.0 44.0 45.0 44.0 42.5 42.5 41.5 42.5 44.5 44.5 44.0 45.0 43.0 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.0 44.5 43.0 45.5 45.0 45.0 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 44.0 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 27.5 26.0 36.0 39.5 39.0 44.5 42.0 40.0 45.0 36.5 40.5 44.0 42.5 43.5 43.0 42.5 44.0 39.0 44.0 45.0 44.0 44.0 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.0 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 45.5 43.5 45.0 47.0 45.0 44.0 46.0 46.5 45.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 26.5 27.0 35.0 39.5 38.0 44.5 42.0 40.0 45.0 36.5 41.5 44.0 42.5 43.5 44.0 42.5 44.0 39.0 45.0 45.0 44.0 44.0 42.5 41.0 42.5 44.5 44.5 44.0 44.0 43.0 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 45.5 43.5 45.0 47.0 45.0 44.0 46.0 46.5 45.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 2.0 5.5 6.5 4.5 6.0 7.5 7.5 7.0 7.5\n", "1.0 3.0 6.0 6.5 7.5 8.0 8.0 7.5 8.0 6.5 7.5 8.5\n", "1.0 3.5 6.5 6.0 6.0 5.5 7.0 6.5 7.0 6.0\n", "1.0 29.0 26.5 36.5 40.5 38.0 44.5 40.0 40.0 45.0 37.0 40.5 44.0 42.5 43.5 43.0 42.5 43.0 39.5 44.0 45.0 44.0 44.0 42.5 41.0 42.5 44.5 43.0 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 44.0 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 3.5 6.0 6.0 7.5 8.0 8.0 7.0 8.0 7.0 8.0 8.0\n", "1.0 28.0 27.0 38.0 39.0 39.5 44.5 40.5 40.0 45.0 37.5 40.5 43.5 42.5 43.5 43.0 41.0 43.5 39.0 44.0 45.0 44.0 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 44.0 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 44.5 44.5 46.0\n", "1.0 28.0 27.0 38.0 38.0 39.5 44.5 41.5 40.5 45.0 36.0 41.5 44.0 43.0 44.0 43.0 41.0 43.5 38.5 44.0 45.0 43.0 42.5 42.5 40.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 44.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 29.0 31.5 39.0 38.0 40.5 43.5 35.0 40.5 45.0 42.5 40.5 44.0 43.0 44.0 43.0 41.0 43.5 38.0 44.0 44.5 44.0 42.5 42.5 40.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 42.5 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 44.5 43.0 45.5 44.5 45.0 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.0 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 46.0 46.0 46.0 45.0 46.0 45.0 44.0 45.0 45.0 44.5 46.0\n", "1.0 24.0 31.5 33.5 38.5 39.5 44.5 40.0 40.5 45.0 41.5 42.5 44.0 42.5 43.5 42.5 41.0 43.0 44.0 43.5 45.0 44.0 42.5 42.5 40.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 44.5 42.0 43.0 43.0 45.0 42.5 44.5 42.5 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 44.5 45.0 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.0 45.0 45.5 44.5 44.5 46.0 46.5 44.5 44.0 46.0 46.0 46.0 45.5 46.0 45.0 44.0 45.0 45.0 44.5 45.5\n", "1.0 23.5 30.0 37.5 34.0 39.0 44.5 42.0 40.0 45.0 36.5 41.0 44.0 42.5 43.5 43.5 41.0 44.0 39.0 44.5 45.0 44.5 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.0 44.0 44.0 45.5 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 45.0 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 45.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 29.0 25.0 39.0 38.5 40.5 43.5 41.5 40.5 45.0 36.0 40.5 44.0 43.0 44.0 43.0 41.5 43.5 38.5 44.0 45.0 44.0 43.0 42.0 41.0 42.5 44.5 44.5 44.0 45.0 43.5 43.5 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.0 45.0 43.5 44.5 44.5 44.0 44.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.0 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 27.5 26.5 36.0 39.5 39.0 44.5 41.5 40.0 45.0 37.0 40.5 44.5 42.5 43.5 43.0 42.5 44.0 39.0 44.0 45.0 44.0 44.0 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.0 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 45.5 43.5 45.0 47.0 45.0 44.0 46.0 46.5 45.0 45.5 46.0 45.0 44.0 45.5 44.0 44.5 46.0\n", "1.0 3.0 6.5 6.0 7.5 8.0 8.0 7.5 8.0 7.0 8.0 7.5\n", "1.0 29.0 31.5 39.0 38.0 40.5 43.5 34.0 40.5 45.0 42.5 40.5 44.0 43.0 44.0 43.0 41.0 43.5 37.0 44.0 44.5 44.0 42.5 42.5 39.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 43.0 43.0 43.0 45.0 43.5 44.5 42.5 45.5 45.0 44.5 44.5 44.5 45.5 45.0 43.5 45.5 44.5 44.0 44.5 43.0 45.5 44.5 45.0 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.0 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 46.0 46.0 46.0 45.0 46.0 45.0 44.0 45.0 45.0 44.5 46.0\n", "1.0 23.5 30.0 37.5 34.0 39.0 44.5 42.0 40.0 45.0 36.5 41.0 44.0 42.5 43.5 43.5 41.0 44.0 39.0 44.5 45.0 44.5 42.5 43.5 41.0 42.5 44.5 44.5 44.0 45.0 43.0 43.5 44.0 45.5 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 44.5 44.5 45.0 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 45.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 29.0 24.0 39.0 38.5 40.5 43.5 41.5 40.5 45.0 35.0 40.5 43.0 43.0 44.0 43.0 41.5 43.5 38.5 44.0 45.0 44.0 43.0 42.0 41.0 42.5 44.5 44.5 44.0 45.0 43.5 43.5 44.0 45.0 43.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 44.5 45.0 45.0 43.5 45.5 44.5 44.0 44.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 44.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.0 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 26.5 26.5 35.0 39.5 38.0 44.5 41.5 40.0 45.0 37.0 40.5 44.5 42.5 43.5 43.0 42.5 44.0 39.0 44.0 45.0 44.0 44.0 42.5 41.0 43.5 44.5 44.5 44.0 45.0 43.0 44.0 44.0 45.0 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 44.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 45.5 43.5 45.0 47.0 45.0 44.0 46.0 46.5 45.0 45.5 46.0 45.0 44.0 45.5 44.0 45.5 46.0\n", "1.0 3.5 6.5 6.0 7.0 8.0 8.0 7.5 8.0 7.0 8.0 7.5\n", "1.0 29.0 31.5 39.0 38.0 40.5 43.5 34.0 40.5 45.0 42.5 40.5 44.0 44.5 43.5 43.0 41.0 43.5 37.0 44.0 44.5 44.0 42.5 42.5 39.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 43.0 43.0 43.0 45.0 43.5 44.5 42.5 45.5 45.0 44.5 44.5 44.5 45.5 45.0 43.5 45.5 44.5 44.0 44.5 43.0 45.5 44.5 45.0 44.5 44.5 44.5 45.0 44.0 44.5 45.5 44.5 45.0 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 46.0 46.0 46.0 45.0 45.5 45.0 44.0 45.0 45.0 44.5 46.0\n", "1.0 23.5 30.0 37.5 34.5 39.0 44.5 42.0 40.0 45.0 36.5 41.0 44.0 42.5 43.5 43.5 41.5 44.0 39.0 44.5 45.0 44.5 43.0 43.5 41.0 42.5 44.5 44.5 44.0 45.0 43.0 43.5 44.0 45.5 42.0 43.0 43.0 45.0 43.5 44.5 43.0 45.5 44.5 44.5 45.0 43.5 44.0 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.5 45.5 46.0 45.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 29.0 30.5 39.0 38.5 40.5 43.5 35.0 40.5 45.0 41.5 40.5 43.0 43.0 44.0 43.0 41.5 43.5 38.0 44.0 44.5 44.0 43.0 42.0 40.5 42.5 44.5 44.5 44.0 45.0 43.5 43.5 44.0 45.0 43.0 43.0 43.0 45.0 43.5 44.5 42.5 45.5 45.0 44.5 44.5 44.5 44.5 45.0 43.5 45.5 44.5 44.0 44.5 43.0 45.5 44.5 45.0 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.0 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 46.0 46.0 46.0 45.0 46.0 45.0 44.0 45.0 45.0 44.5 46.0\n", "1.0 28.5 32.0 38.5 38.0 40.0 43.5 34.0 40.5 45.0 42.5 41.0 44.0 44.5 43.5 43.0 41.0 43.5 37.0 44.0 44.5 44.5 42.5 42.5 39.0 42.5 44.5 44.5 44.0 45.0 43.0 44.0 44.0 45.0 43.0 43.0 43.0 45.0 43.5 44.5 42.5 45.0 45.0 44.5 44.5 44.5 45.5 45.0 43.5 45.5 44.5 44.0 44.5 43.0 45.5 44.5 45.0 44.5 44.5 44.5 45.0 44.0 44.5 45.5 44.5 45.0 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 46.0 46.0 46.0 45.0 45.5 46.0 44.0 45.0 45.0 44.5 46.0\n", "1.0 22.5 30.0 37.5 34.5 39.0 44.5 42.0 40.0 45.0 36.5 41.0 44.0 42.5 43.5 43.5 41.5 44.0 39.0 44.5 45.0 44.5 43.0 43.5 41.0 42.5 44.5 44.5 44.0 45.0 43.0 43.5 44.0 45.5 42.0 43.5 43.0 45.0 43.5 44.5 43.0 45.5 44.5 44.5 45.0 43.5 44.0 45.0 43.5 44.5 44.5 44.0 45.5 43.0 45.5 45.0 45.5 44.5 44.5 44.5 45.0 44.5 44.5 45.5 45.0 45.5 45.5 46.0 45.5 44.5 46.0 47.0 45.0 44.0 46.0 46.5 46.0 45.5 46.0 45.5 44.0 45.5 45.0 44.5 46.5\n", "1.0 29.0 30.0 39.0 38.5 40.5 43.5 35.0 40.0 45.0 41.5 40.5 43.0 43.0 44.0 43.0 41.5 43.5 38.0 44.0 44.5 44.0 43.0 42.0 40.5 42.5 44.5 44.5 44.0 45.0 43.5 43.5 44.0 45.0 43.5 43.0 43.0 45.0 43.5 44.5 42.5 45.5 45.0 44.5 44.5 44.5 44.5 45.0 43.5 45.5 44.5 44.0 44.5 43.0 45.5 44.5 45.0 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.0 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 46.0 46.0 46.0 45.0 46.0 45.0 44.5 45.0 45.0 44.5 46.0\n", "1.0 29.0 30.0 39.5 38.0 41.0 43.5 35.0 40.0 45.0 41.5 40.5 43.0 43.0 44.0 43.0 41.5 43.5 38.0 44.0 44.5 44.0 43.0 42.0 40.5 42.5 44.5 44.5 44.0 45.0 44.0 43.5 44.0 45.0 43.5 43.0 43.0 45.0 43.5 44.5 42.5 44.5 45.0 44.5 44.5 44.5 44.5 45.0 43.5 45.5 44.5 44.0 44.5 43.0 45.5 44.5 45.0 44.5 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.0 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 46.0 46.0 46.0 45.0 46.0 45.0 44.5 45.0 45.0 44.5 46.0\n", "1.0 28.5 30.5 39.5 37.5 41.0 43.5 35.0 40.0 45.0 41.5 41.0 43.0 43.0 44.0 43.5 41.5 43.5 38.0 44.5 44.5 44.0 43.0 42.0 40.5 42.5 44.5 44.5 44.0 45.0 44.0 43.5 44.0 45.5 43.5 43.0 43.0 45.0 43.5 44.5 42.5 44.5 45.0 44.5 44.5 44.5 44.5 45.0 43.5 45.5 44.5 44.0 44.5 42.5 45.5 44.5 45.0 44.0 44.5 44.5 45.0 44.0 44.5 45.5 45.0 45.0 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 46.0 46.0 46.0 45.0 46.0 45.0 44.5 45.0 45.0 44.5 45.5\n", "1.0 32.5 26.5 43.5 37.5 40.5 43.5 35.0 40.0 44.5 41.5 41.0 43.0 43.0 44.0 43.5 41.5 43.5 38.0 44.5 44.5 44.0 43.0 42.0 40.5 42.5 44.5 44.0 44.0 44.5 43.5 43.5 44.0 45.5 43.5 43.0 43.0 45.0 43.5 44.5 42.5 44.5 45.0 44.5 44.5 44.5 44.5 44.5 43.5 45.5 44.5 44.0 44.5 42.5 45.5 44.5 45.0 44.0 44.5 44.5 45.0 44.0 44.5 45.0 45.0 45.0 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 45.5 46.0 46.0 45.0 46.0 45.0 44.5 45.0 45.0 44.5 45.5\n", "1.0 33.0 26.0 43.5 38.0 40.5 43.5 35.0 40.0 44.5 41.0 41.0 42.5 43.0 44.0 43.5 41.5 43.5 38.0 44.5 44.5 44.0 43.0 42.0 40.5 42.5 44.5 44.0 44.0 44.5 43.5 43.5 44.0 45.5 43.5 43.0 43.0 45.0 43.5 44.5 42.5 44.5 45.0 44.5 44.5 44.0 44.5 44.5 43.5 45.0 44.5 44.0 44.5 43.0 45.5 44.5 45.0 44.0 44.5 44.5 46.0 44.0 44.5 45.0 45.0 45.0 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 45.5 46.0 46.0 45.0 46.0 45.0 44.5 45.0 45.0 44.5 45.5\n", "1.0 33.0 25.5 43.5 38.0 40.0 43.5 35.5 40.0 44.5 41.0 41.0 42.5 43.0 44.0 43.5 41.5 43.5 38.5 44.5 44.5 44.0 43.0 42.0 41.0 42.5 44.5 44.0 44.0 44.5 43.0 43.5 44.0 45.5 43.5 43.0 43.0 45.0 43.5 44.5 42.5 44.5 45.0 44.5 44.5 44.0 44.5 44.0 43.5 45.0 44.5 44.0 44.5 43.0 45.5 44.5 45.0 44.0 44.5 44.5 46.0 44.0 44.5 45.0 45.0 45.5 45.5 45.5 44.5 44.5 46.0 46.5 44.5 44.0 45.5 46.0 46.0 45.0 46.0 45.0 44.5 45.0 45.0 44.5 45.5\n", "1.0 28.5 27.0 38.0 38.5 39.5 44.5 40.0 40.5 45.0 37.5 40.5 44.0 42.5 43.5 43.0 41.0 43.0 40.0 44.0 45.0 44.0 42.5 42.5 41.5 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 42.5 44.5 43.5 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.0 46.0 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 43.5 46.0 44.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0\n", "1.0 4.0 5.0 4.0 4.5 4.5 5.0\n", "1.0 5.0 5.5 7.0 7.5 7.5 8.0 7.0 7.5 6.5 7.5 8.0\n"]}, "short_description": "1. One-sentence summary:\nCompute a numeric value for each node in a rooted tree by first aggregating subtree sizes in a bottom\u2010up pass and then propagating a DP formula in a top\u2010down pass.\n\n2. Core algorithmic approach:\nTree DP with two DFS\u2010like traversals: a post\u2010order pass to compute subtree sizes and a pre\u2010order pass (re\u2010rooting style) to compute each node\u2019s value using its parent\u2019s value and size information.\n\n3. Reusable components:\n- Building an adjacency list (children list) from a parent\u2010array representation.\n- Post\u2010order traversal to compute subtree sizes.\n- Pre\u2010order (re\u2010rooting) traversal to propagate DP values from parent to child."}
{"name": "1281_E. Jeremy Bearimy", "description": "Welcome! Everything is fine.\n\nYou have arrived in The Medium Place, the place between The Good Place and The Bad Place. You are assigned a task that will either make people happier or torture them for eternity.\n\nYou have a list of k pairs of people who have arrived in a new inhabited neighborhood. You need to assign each of the 2k people into one of the 2k houses. Each person will be the resident of exactly one house, and each house will have exactly one resident.\n\nOf course, in the neighborhood, it is possible to visit friends. There are 2k - 1 roads, each of which connects two houses. It takes some time to traverse a road. We will specify the amount of time it takes in the input. The neighborhood is designed in such a way that from anyone's house, there is exactly one sequence of distinct roads you can take to any other house. In other words, the graph with the houses as vertices and the roads as edges is a tree.\n\nThe truth is, these k pairs of people are actually soulmates. We index them from 1 to k. We denote by f(i) the amount of time it takes for the i-th pair of soulmates to go to each other's houses.\n\nAs we have said before, you will need to assign each of the 2k people into one of the 2k houses. You have two missions, one from the entities in The Good Place and one from the entities of The Bad Place. Here they are:\n\n  * The first mission, from The Good Place, is to assign the people into the houses such that the sum of f(i) over all pairs i is minimized. Let's define this minimized sum as G. This makes sure that soulmates can easily and efficiently visit each other; \n  * The second mission, from The Bad Place, is to assign the people into the houses such that the sum of f(i) over all pairs i is maximized. Let's define this maximized sum as B. This makes sure that soulmates will have a difficult time to visit each other. \n\n\n\nWhat are the values of G and B?\n\nInput\n\nThe first line of input contains a single integer t (1 \u2264 t \u2264 500) denoting the number of test cases. The next lines contain descriptions of the test cases.\n\nThe first line of each test case contains a single integer k denoting the number of pairs of people (1 \u2264 k \u2264 10^5). The next 2k - 1 lines describe the roads; the i-th of them contains three space-separated integers a_i, b_i, t_i which means that the i-th road connects the a_i-th and b_i-th houses with a road that takes t_i units of time to traverse (1 \u2264 a_i, b_i \u2264 2k, a_i \u2260 b_i, 1 \u2264 t_i \u2264 10^6). It is guaranteed that the given roads define a tree structure.\n\nIt is guaranteed that the sum of the k in a single file is at most 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single line containing two space-separated integers G and B. \n\nExample\n\nInput\n\n\n2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 3\n\n\nOutput\n\n\n15 33\n6 6\n\nNote\n\nFor the sample test case, we have a minimum sum equal to G = 15. One way this can be achieved is with the following assignment:\n\n  * The first pair of people get assigned to houses 5 and 6, giving us f(1) = 5; \n  * The second pair of people get assigned to houses 1 and 4, giving us f(2) = 6; \n  * The third pair of people get assigned to houses 3 and 2, giving us f(3) = 4. \n\n\n\nNote that the sum of the f(i) is 5 + 6 + 4 = 15. \n\nWe also have a maximum sum equal to B = 33. One way this can be achieved is with the following assignment:\n\n  * The first pair of people get assigned to houses 1 and 4, giving us f(1) = 6; \n  * The second pair of people get assigned to houses 6 and 2, giving us f(2) = 14; \n  * The third pair of people get assigned to houses 3 and 5, giving us f(3) = 13. \n\n\n\nNote that the sum of the f(i) is 6 + 14 + 13 = 33. ", "solution": "import sys\n\ndef input():\n\treturn sys.stdin.readline().strip()\n\ndef solve():\n\tk = int(input())\n\tn = 2*k\n\te = [[] for i in range(n)]\n\tp = [None]*(n)\n\tfor i in range(n-1):\n\t\ta, b, t = map(int, input().split())\n\t\ta -= 1\n\t\tb -= 1\n\t\te[a].append((b,t))\n\t\te[b].append((a,t))\n\tq = [0]\n\tqi = 0\n\twhile qi < len(q):\n\t\tx = q[qi]\n\t\tqi += 1\n\t\tpx = p[x]\n\t\tfor v, w in e[x]:\n\t\t\tif v != px:\n\t\t\t\tq.append(v)\n\t\t\t\tp[v] = x\n\td1 = [False] * n\n\td2 = [0] * n\n\tm = 0\n\tM = 0\n\tfor qi in range(len(q)-1,-1,-1):\n\t\tx = q[qi]\n\t\tpx = p[x]\n\t\tcnt = 1\n\t\tc1 = 1\n\t\tfor v, w in e[x]:\n\t\t\tif v != px:\n\t\t\t\tif d1[v]:\n\t\t\t\t\tm += w\n\t\t\t\t\tcnt += 1\n\t\t\t\tdv = d2[v]\n\t\t\t\tM += w * min(dv, n - dv)\n\t\t\t\tc1 += dv\n\t\td1[x] = cnt % 2\n\t\td2[x] = c1\n\tprint(m, M)\n\nfor i in range(int(input())):\n\tsolve()\n", "difficulty": 11, "public_tests": {"input": ["2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 3\n"], "output": ["15 33\n6 6\n"]}, "private_tests": {"input": ["1\n1\n2 1 4\n"], "output": ["4 4\n"]}, "generated_tests": {"input": ["2\n3\n1 2 0\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 3\n", "1\n1\n2 1 5\n", "1\n1\n2 1 6\n", "2\n3\n1 2 0\n3 1 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 3\n4 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 2\n4 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n3 4 3\n4 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 2\n3 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n1 4 2\n", "1\n1\n2 1 0\n", "2\n3\n1 2 0\n3 1 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 2\n1 4 2\n", "2\n3\n1 4 0\n3 1 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 2\n1 4 2\n", "2\n3\n1 4 0\n3 1 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 4\n1 4 2\n", "1\n1\n2 1 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 5\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 1\n4 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n3 4 3\n4 5 6\n5 6 1\n1\n1 2 1\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 6\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 2\n4 5 6\n5 6 5\n1\n1 2 2\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 5\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 3\n4 5 6\n4 6 5\n2\n1 2 1\n1 3 2\n1 4 3\n", "2\n3\n1 4 0\n3 1 4\n2 6 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 4\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 5\n4 5 0\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n1 4 2\n3 5 6\n5 6 5\n1\n1 2 2\n1 3 2\n1 4 0\n", "2\n3\n1 4 0\n3 1 4\n2 6 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 3\n1 4 2\n", "2\n3\n1 4 0\n3 1 4\n2 6 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 3\n1 4 1\n", "1\n1\n2 1 3\n", "2\n3\n1 2 3\n3 1 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 3\n", "2\n3\n1 2 0\n3 1 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 2\n1 3 2\n1 4 3\n", "2\n3\n1 2 0\n3 1 4\n2 4 5\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 4\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n3 4 3\n4 5 6\n5 6 1\n2\n1 2 1\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 3\n", "2\n3\n1 2 0\n3 1 4\n1 4 2\n3 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n3 4 3\n4 5 6\n5 6 1\n1\n1 2 1\n0 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n1 4 2\n3 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n1 4 0\n", "2\n3\n1 2 0\n3 1 4\n2 4 3\n4 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n2 4 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 2\n3 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n2 4 2\n", "2\n3\n1 2 0\n3 1 4\n3 4 3\n4 5 6\n5 6 1\n1\n1 2 1\n2 3 2\n1 4 2\n", "2\n3\n1 2 0\n3 1 4\n2 4 2\n3 5 6\n5 6 5\n1\n1 2 1\n0 3 2\n2 4 2\n", "2\n3\n1 2 0\n3 1 4\n1 4 2\n3 5 6\n5 6 5\n1\n1 2 2\n1 3 2\n1 3 0\n", "2\n3\n1 2 0\n3 1 4\n3 4 3\n4 5 6\n5 6 5\n1\n1 2 1\n1 3 0\n1 4 2\n", "2\n3\n1 5 0\n3 1 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 2\n1 4 2\n"], "output": ["12 30\n6 6\n", "5 5\n", "6 6\n", "12 30\n5 5\n", "12 30\n1 1\n", "11 27\n1 1\n", "8 34\n1 1\n", "11 31\n1 1\n", "0 0\n", "12 30\n4 4\n", "12 24\n4 4\n", "12 24\n6 6\n", "2 2\n", "14 36\n5 5\n", "10 24\n1 1\n", "4 30\n1 1\n", "14 32\n4 4\n", "11 27\n2 2\n", "13 31\n4 4\n", "18 24\n6 6\n", "13 35\n6 6\n", "14 24\n5 5\n", "11 31\n2 2\n", "13 35\n5 5\n", "13 35\n4 4\n", "3 3\n", "12 36\n6 6\n", "12 30\n7 7\n", "14 36\n7 7\n", "4 30\n5 5\n", "12 30\n6 6\n", "11 31\n1 1\n", "4 30\n1 1\n", "11 31\n1 1\n", "12 30\n1 1\n", "11 31\n1 1\n", "4 30\n1 1\n", "11 31\n1 1\n", "11 31\n2 2\n", "8 34\n1 1\n", "12 24\n4 4\n"]}, "short_description": "1. One-sentence summary  \nCompute two aggregate metrics over all edges of a tree based on subtree parities and pair counts by performing a bottom-up traversal of the tree.  \n\n2. Core algorithmic approach  \nA single-pass tree dynamic programming:  \n- First do a BFS/DFS to establish a parent array and node ordering.  \n- Then process nodes in reverse order (post-order) to compute for each subtree its size and parity indicator, accumulating contributions to the two desired sums along the way.  \n\n3. Reusable components  \n- Tree traversal to establish parent pointers and a node list in BFS (or DFS) order.  \n- Post-order DP on trees to compute subtree properties (e.g., size, parity) and accumulate edge-based metrics.  \n- Pattern for accumulating global metrics while propagating subtree information (e.g., summing weights times subtree sizes or parity flags)."}
{"name": "1528_A. Parsa's Humongous Tree", "description": "Parsa has a humongous tree on n vertices.\n\nOn each vertex v he has written two integers l_v and r_v.\n\nTo make Parsa's tree look even more majestic, Nima wants to assign a number a_v (l_v \u2264 a_v \u2264 r_v) to each vertex v such that the beauty of Parsa's tree is maximized.\n\nNima's sense of the beauty is rather bizarre. He defines the beauty of the tree as the sum of |a_u - a_v| over all edges (u, v) of the tree.\n\nSince Parsa's tree is too large, Nima can't maximize its beauty on his own. Your task is to find the maximum possible beauty for Parsa's tree.\n\nInput\n\nThe first line contains an integer t (1\u2264 t\u2264 250) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (2\u2264 n\u2264 10^5) \u2014 the number of vertices in Parsa's tree.\n\nThe i-th of the following n lines contains two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 10^9).\n\nEach of the next n-1 lines contains two integers u and v (1 \u2264 u , v \u2264 n, u\u2260 v) meaning that there is an edge between the vertices u and v in Parsa's tree.\n\nIt is guaranteed that the given graph is a tree.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print the maximum possible beauty for Parsa's tree.\n\nExample\n\nInput\n\n\n3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n\n\nOutput\n\n\n7\n8\n62\n\nNote\n\nThe trees in the example:\n\n<image>\n\nIn the first test case, one possible assignment is a = \\{1, 8\\} which results in |1 - 8| = 7.\n\nIn the second test case, one of the possible assignments is a = \\{1, 5, 9\\} which results in a beauty of |1 - 5| + |5 - 9| = 8", "solution": "import sys\ninput = sys.stdin.buffer.readline\n\ndef main():\n    t = int(input()); INF = float(\"inf\")\n    for _ in range(t):\n        n = int(input())\n        L = []; R = []\n        for i in range(n):\n            l,r = map(int,input().split())\n            L.append(l); R.append(r)\n        G = [[] for _ in range(n)]\n        for i in range(n-1):\n            a,b = map(int,input().split())\n            a-=1;b-=1 #0-index\n            G[a].append(b)\n            G[b].append(a)\n\n        root = 0\n        #depth = [-1]*n\n        #depth[0] = 0\n        par = [-1]*n\n        #depth_list = defaultdict(list)\n        #depth_list[0].append(root)\n        stack = []\n        stack.append(~0)\n        stack.append(0)\n        dp = [[0, 0] for _ in range(n)]\n        #cnt = 0\n        while stack:\n            #cnt += 1\n            v = stack.pop()\n            if v >= 0:\n                for u in G[v]:\n                    if u == par[v]: continue\n                    par[u] = v\n                    stack.append(~u)\n                    stack.append(u)\n            \n            else:\n                u = ~v #child\n                v = par[u] #parent\n                if v == -1: continue\n                zero = max(dp[u][0] + abs(L[v] - L[u]), dp[u][1] + abs(L[v] - R[u]))\n                one = max(dp[u][0] + abs(R[v] - L[u]), dp[u][1] + abs(R[v] - R[u]))\n                dp[v][0] += zero\n                dp[v][1] += one\n        ans = max(dp[0])\n        #print(\"CNT\",cnt)\n        #print(dp)\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()", "difficulty": 7, "public_tests": {"input": ["3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n"], "output": ["\n7\n8\n62\n"]}, "private_tests": {"input": [], "output": []}, "generated_tests": {"input": ["3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n21 32\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n0 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 2\n1 2\n2 3\n6\n4 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n21 32\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n3 16\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n5 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 11\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 3\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 29\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n21 32\n2 12\n10 21\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 7\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n0 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 0\n4 6\n7 2\n1 2\n2 3\n6\n4 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n5 19\n2 12\n10 17\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 3\n2 3\n6\n1 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n21 32\n2 12\n10 21\n3 17\n3 1\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n1 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 5\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 0\n12 29\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 0\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n1 3\n4 10\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 0\n3 8\n1 2\n3\n1 3\n4 1\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n1 3\n4 10\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 8\n3 4\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 0\n3 8\n1 2\n3\n1 3\n4 1\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 17\n3 5\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n1 0\n3 8\n1 2\n3\n1 3\n4 1\n7 5\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 17\n3 5\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n1 12\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n8 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 2\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n0 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n5 6\n7 9\n1 2\n2 3\n6\n1 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n0 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 3\n2 3\n6\n4 14\n12 15\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 2\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n0 9\n1 2\n2 3\n6\n4 14\n12 20\n21 32\n2 12\n10 21\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 2\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n3 12\n6 17\n3 17\n2 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 8\n3 2\n6 5\n1 5\n2 4\n4 6\n", "3\n2\n1 6\n3 7\n1 2\n3\n0 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n0 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 0\n4 6\n7 2\n1 2\n2 3\n6\n4 14\n12 20\n21 33\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n1 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n5 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 11\n1 3\n2 1\n6\n1 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 7\n3 8\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n3 1\n12 20\n6 19\n3 16\n5 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 0\n3 8\n1 2\n3\n1 3\n4 1\n7 5\n1 2\n2 3\n6\n3 14\n12 21\n12 26\n3 12\n11 0\n3 17\n3 5\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 16\n2 12\n10 30\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 6\n4 6\n7 9\n1 2\n2 3\n6\n5 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 13\n1 2\n2 3\n6\n8 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n12 9\n1 2\n2 3\n6\n3 14\n17 20\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 7\n1 2\n3\n0 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n0 9\n1 2\n2 3\n6\n4 14\n12 20\n21 32\n2 12\n10 21\n5 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n5 32\n2 19\n10 17\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 13\n1 2\n3\n1 5\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n16 17\n0 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 0\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n2 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 16\n2 12\n10 30\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 6\n4 6\n7 2\n1 2\n2 3\n6\n5 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n8 20\n12 19\n2 2\n10 17\n3 17\n3 2\n6 5\n1 6\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 11\n10 17\n-1 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n4 8\n1 2\n3\n1 3\n4 6\n14 9\n1 2\n2 3\n6\n3 14\n9 20\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 7\n1 2\n3\n0 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 30\n12 19\n2 12\n10 17\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 0\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n5 32\n2 19\n10 17\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n7 17\n1 2\n2 3\n6\n3 16\n12 20\n6 19\n5 16\n5 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 10\n1 2\n3\n1 3\n4 6\n0 11\n1 3\n2 1\n6\n1 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 10\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 0\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n7 6\n7 9\n1 2\n2 3\n6\n2 28\n12 38\n12 19\n3 12\n6 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 8\n1 2\n3\n1 3\n10 6\n12 9\n1 2\n2 3\n6\n3 14\n19 20\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 11\n10 1\n-1 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n0 9\n1 2\n2 3\n6\n4 11\n12 20\n21 32\n2 15\n10 21\n5 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 10\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 22\n11 0\n3 0\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 8\n1 2\n3\n1 3\n10 6\n12 9\n1 2\n2 3\n6\n3 14\n19 20\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n14 17\n1 2\n2 3\n6\n3 16\n12 20\n6 19\n5 16\n5 17\n3 17\n3 3\n6 5\n1 5\n2 5\n4 6\n", "3\n2\n2 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 16\n0 12\n13 30\n3 17\n5 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n2 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 4\n12 16\n0 12\n13 30\n3 17\n5 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 3\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n2 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n21 41\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n9 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 14\n12 19\n2 12\n10 17\n3 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 0\n4 6\n7 2\n1 2\n2 3\n6\n4 14\n4 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 7\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n3 16\n5 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n1 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 30\n2 12\n10 17\n3 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 8\n3 2\n6 1\n1 5\n2 6\n4 6\n", "3\n2\n1 7\n3 8\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n3 14\n12 34\n6 19\n3 16\n5 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 0\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 38\n3 12\n11 0\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n1 3\n4 10\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n6 8\n3 4\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 6\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n1 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 1\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n3 12\n11 17\n0 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n3 14\n17 15\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n22 20\n12 19\n2 12\n10 17\n0 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n0 9\n1 2\n2 3\n6\n4 14\n12 20\n21 32\n2 12\n10 31\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n2 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 8\n3 2\n6 5\n1 5\n2 4\n4 6\n", "3\n2\n1 6\n1 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 38\n12 19\n2 12\n10 17\n5 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 7\n1 2\n3\n1 5\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n20 19\n2 12\n16 17\n0 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 10\n7 11\n1 3\n2 1\n6\n1 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 0\n3 3\n1 2\n3\n1 3\n4 1\n6 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 17\n3 5\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n1 12\n3 8\n1 2\n3\n1 3\n4 2\n7 9\n1 2\n2 3\n6\n2 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 12\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 11\n10 17\n-1 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n4 10\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n9 20\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n0 9\n1 2\n2 3\n6\n4 0\n12 20\n21 32\n2 12\n10 21\n5 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n13 6\n12 9\n1 2\n2 3\n6\n3 14\n19 20\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 0\n4 6\n7 9\n1 2\n2 3\n6\n0 14\n12 20\n5 32\n2 19\n10 17\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 10\n1 2\n3\n1 3\n4 6\n0 11\n1 3\n2 1\n6\n1 14\n12 20\n8 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n2 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 16\n2 12\n13 23\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n7 6\n3 9\n1 2\n2 3\n6\n2 28\n12 38\n12 19\n3 12\n6 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 8\n14 17\n1 2\n2 3\n6\n3 16\n12 20\n6 19\n5 16\n5 17\n3 17\n3 3\n6 5\n1 6\n2 5\n4 6\n", "3\n2\n2 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 4\n12 16\n0 22\n13 30\n3 17\n5 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 11\n3 15\n1 2\n3\n1 3\n5 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n2 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 11\n12 21\n12 19\n3 12\n11 0\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n12 17\n3 8\n3 2\n6 1\n1 5\n2 6\n4 6\n", "3\n2\n1 7\n3 8\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n3 14\n12 34\n6 19\n3 16\n5 17\n3 17\n6 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n2 3\n4 10\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n3 17\n3 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n2 3\n4 10\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n6 8\n3 4\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n6 8\n1 2\n3\n1 3\n5 6\n7 9\n1 2\n2 3\n6\n1 14\n12 20\n12 19\n2 13\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n0 9\n1 2\n2 3\n6\n4 14\n12 20\n21 32\n2 12\n10 31\n3 17\n3 2\n6 5\n1 5\n2 6\n4 3\n", "3\n2\n1 6\n3 7\n1 2\n3\n1 5\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n20 19\n2 12\n16 17\n0 17\n3 2\n4 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n4 10\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n9 24\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n2 6\n3 13\n1 2\n3\n1 5\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n16 17\n0 4\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 9\n3 6\n1 2\n3\n1 3\n4 6\n0 11\n1 3\n2 1\n6\n1 22\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 5\n1 2\n3\n1 6\n4 6\n7 2\n1 2\n2 3\n6\n5 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n4 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n13 6\n12 9\n1 2\n2 3\n6\n3 14\n19 20\n12 19\n3 12\n11 17\n3 30\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 10\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n18 19\n3 22\n21 0\n3 0\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 8\n1 2\n3\n1 4\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 11\n10 1\n-1 17\n3 2\n6 5\n1 5\n2 6\n4 2\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 8\n14 17\n1 2\n2 3\n6\n3 16\n12 20\n6 19\n5 16\n5 17\n3 17\n3 2\n6 5\n1 6\n2 5\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 7\n12 20\n12 19\n2 12\n11 3\n0 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 11\n12 14\n12 19\n2 12\n20 17\n3 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 0\n4 6\n7 2\n1 2\n2 3\n6\n4 14\n4 20\n21 19\n2 14\n10 17\n3 17\n3 1\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n2 3\n4 10\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n3 27\n3 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n2 0\n3 1\n1 2\n3\n1 3\n4 1\n7 5\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 14\n11 0\n3 17\n3 5\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n2 6\n3 8\n1 2\n3\n1 3\n7 6\n7 9\n1 2\n2 3\n6\n2 14\n12 20\n12 19\n3 12\n11 17\n3 3\n3 1\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n3 14\n12 29\n6 19\n5 20\n5 17\n3 19\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 12\n3 8\n1 2\n3\n1 3\n4 2\n7 9\n1 2\n2 3\n6\n2 14\n12 20\n12 19\n2 14\n10 17\n3 18\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n4 10\n1 2\n3\n1 3\n4 6\n7 9\n1 3\n2 3\n6\n3 14\n9 24\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 5\n4 6\n2 9\n1 2\n2 3\n6\n3 14\n12 20\n5 32\n2 19\n10 17\n3 17\n3 5\n6 5\n1 6\n2 6\n4 6\n", "3\n2\n1 5\n3 8\n1 2\n3\n1 0\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n0 11\n10 1\n-1 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 13\n1 2\n3\n1 3\n10 6\n12 9\n1 2\n2 3\n6\n3 14\n9 20\n12 19\n1 12\n11 17\n3 17\n3 3\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n0 3\n10 8\n14 17\n1 2\n2 3\n6\n3 16\n12 20\n6 19\n5 16\n5 17\n3 17\n3 2\n6 5\n1 6\n2 5\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 11\n12 14\n12 19\n2 12\n20 17\n0 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 7\n1 2\n3\n1 3\n10 6\n13 9\n1 2\n2 3\n6\n3 16\n12 20\n12 19\n3 16\n5 17\n6 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n2 3\n4 10\n9 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n3 27\n3 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 10\n6 6\n1 2\n3\n1 3\n8 6\n7 15\n1 2\n2 3\n6\n8 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n0 6\n1 2\n3\n1 3\n4 10\n7 7\n1 3\n2 1\n6\n1 14\n12 20\n12 19\n2 12\n10 23\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 12\n3 8\n1 2\n3\n1 3\n4 2\n7 9\n1 2\n2 3\n6\n2 0\n12 20\n12 19\n2 14\n10 17\n3 18\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 1\n3 8\n1 2\n3\n1 3\n4 12\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 26\n2 11\n10 17\n-1 17\n3 2\n3 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n4 15\n1 2\n3\n1 3\n4 6\n7 9\n1 3\n2 3\n6\n3 14\n9 24\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 5\n4 6\n2 9\n1 2\n2 3\n6\n3 14\n12 20\n5 5\n2 19\n10 17\n3 17\n3 5\n6 5\n1 6\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n13 6\n12 9\n1 2\n2 3\n6\n3 14\n19 20\n12 19\n3 9\n11 17\n3 30\n4 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 13\n1 2\n3\n1 3\n10 6\n12 9\n1 2\n2 3\n6\n3 14\n9 20\n12 19\n1 7\n11 17\n3 17\n3 3\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n0 11\n12 14\n12 19\n2 12\n20 17\n0 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 0\n4 6\n7 2\n1 2\n2 3\n6\n4 20\n4 20\n21 32\n2 14\n10 17\n3 17\n3 1\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n2 3\n4 10\n9 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n3 27\n6 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n1 2\n1 2\n3\n2 3\n4 10\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n1 12\n10 17\n4 8\n3 4\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n2 0\n3 1\n1 2\n3\n1 3\n4 1\n7 5\n1 3\n2 3\n6\n3 14\n12 21\n12 19\n3 14\n11 0\n4 17\n3 5\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n2 10\n6 6\n1 2\n3\n1 3\n8 6\n7 15\n1 2\n2 3\n6\n8 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n4 14\n9 29\n6 19\n5 20\n5 17\n3 19\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n0 6\n1 2\n3\n1 3\n4 10\n7 7\n1 3\n2 1\n6\n1 14\n12 12\n12 19\n2 12\n10 23\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n13 6\n12 9\n1 2\n2 3\n6\n3 14\n19 20\n12 33\n3 9\n11 17\n3 30\n4 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n3 13\n1 2\n3\n1 3\n10 6\n12 9\n1 2\n2 3\n6\n3 14\n9 20\n12 19\n1 7\n11 28\n3 17\n3 3\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n0 11\n12 14\n12 19\n2 21\n20 17\n0 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 0\n4 6\n7 2\n1 2\n2 3\n6\n4 2\n4 20\n21 32\n2 14\n10 17\n3 17\n3 1\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n2 3\n4 10\n9 9\n1 2\n2 3\n6\n3 14\n24 20\n12 19\n2 12\n3 27\n6 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n1 2\n1 2\n3\n2 3\n4 10\n7 14\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n1 12\n10 17\n4 8\n3 4\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n2 10\n6 6\n1 2\n3\n1 3\n13 6\n7 15\n1 2\n2 3\n6\n8 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n0 6\n1 2\n3\n1 3\n4 10\n7 7\n1 3\n2 1\n6\n1 14\n12 12\n12 19\n2 12\n10 23\n3 17\n3 2\n6 5\n1 5\n2 6\n4 5\n", "3\n2\n0 6\n3 13\n1 2\n3\n1 3\n10 6\n12 9\n1 2\n2 3\n6\n1 14\n9 20\n12 19\n1 7\n11 28\n3 17\n3 3\n6 5\n1 2\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 3\n2 3\n6\n0 11\n12 14\n12 19\n2 21\n20 17\n0 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 0\n4 6\n7 2\n1 2\n2 3\n6\n4 2\n4 20\n21 32\n2 14\n10 10\n3 17\n3 1\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n2 3\n4 10\n9 9\n1 2\n2 3\n6\n5 14\n24 20\n12 19\n2 12\n3 27\n6 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n2 10\n6 6\n1 2\n3\n1 3\n13 6\n7 15\n1 2\n2 3\n6\n10 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n0 6\n1 2\n3\n1 3\n4 10\n7 7\n1 3\n2 1\n6\n2 14\n12 12\n12 19\n2 12\n10 23\n3 17\n3 2\n6 5\n1 5\n2 6\n4 5\n", "3\n2\n1 1\n0 8\n1 2\n3\n1 3\n4 12\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 26\n2 1\n10 17\n-1 9\n3 2\n3 5\n1 5\n2 6\n4 6\n", "3\n2\n2 10\n6 6\n1 2\n3\n1 3\n13 6\n7 15\n1 2\n2 3\n6\n10 14\n12 20\n21 19\n2 0\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 1\n0 8\n1 2\n3\n2 3\n4 12\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 26\n2 1\n10 17\n-1 9\n3 2\n3 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 13\n1 2\n3\n1 3\n10 6\n12 9\n1 2\n2 3\n6\n1 14\n9 20\n12 19\n1 7\n11 28\n3 17\n3 3\n6 5\n1 4\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n2 3\n4 10\n9 9\n1 2\n2 3\n6\n5 14\n43 20\n12 19\n2 12\n6 27\n6 8\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 1\n0 8\n1 2\n3\n2 3\n4 12\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 26\n2 1\n10 17\n-1 9\n3 2\n3 5\n1 5\n2 6\n4 5\n", "3\n2\n1 6\n3 13\n1 2\n3\n1 3\n10 6\n12 9\n1 2\n2 3\n6\n1 14\n9 20\n12 19\n1 13\n11 28\n3 17\n3 3\n6 5\n1 4\n2 6\n4 6\n", "3\n2\n1 6\n3 13\n1 2\n3\n1 3\n10 6\n12 9\n1 2\n2 3\n6\n1 14\n9 20\n12 19\n1 13\n11 28\n3 1\n3 3\n6 5\n1 4\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n2 3\n3 10\n9 9\n1 2\n2 3\n6\n5 14\n43 20\n12 19\n2 12\n6 27\n6 8\n3 2\n6 5\n1 4\n2 6\n4 6\n", "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n3 12\n11 17\n5 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 36\n21 32\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 2\n1 2\n2 3\n6\n4 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 4\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 0\n4 6\n14 2\n1 2\n2 3\n6\n4 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n5 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n3 19\n3 12\n11 17\n3 17\n5 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 3\n2 3\n6\n1 14\n12 20\n12 19\n2 12\n10 24\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 5\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 29\n4 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 11\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n21 25\n2 12\n10 21\n3 17\n3 1\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 7\n1 2\n3\n1 3\n4 11\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n16 17\n0 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n7 2\n1 2\n2 3\n6\n3 14\n12 20\n6 19\n3 16\n5 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 14\n1 3\n2 1\n6\n1 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 7\n3 8\n1 2\n3\n1 3\n10 6\n9 9\n1 2\n2 3\n6\n3 14\n12 20\n6 19\n3 16\n5 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 0\n3 8\n1 2\n3\n1 0\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 21\n12 19\n3 12\n11 0\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n0 6\n1 2\n1 2\n3\n1 3\n4 10\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 18\n3 8\n3 4\n6 5\n1 5\n2 6\n4 6\n", "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n8 14\n12 20\n21 22\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n"], "output": ["7\n8\n61\n", "7\n8\n54\n", "5\n8\n61\n", "5\n8\n54\n", "5\n8\n65\n", "7\n12\n54\n", "4\n8\n62\n", "5\n8\n70\n", "5\n9\n54\n", "6\n8\n65\n", "7\n12\n58\n", "7\n8\n62\n", "8\n8\n61\n", "7\n8\n59\n", "5\n13\n61\n", "5\n8\n72\n", "7\n8\n55\n", "5\n8\n73\n", "6\n8\n70\n", "5\n10\n54\n", "7\n8\n66\n", "5\n13\n64\n", "7\n8\n50\n", "5\n8\n89\n", "5\n8\n62\n", "5\n8\n76\n", "7\n8\n69\n", "8\n8\n69\n", "5\n12\n62\n", "8\n10\n69\n", "5\n12\n63\n", "8\n10\n72\n", "8\n8\n72\n", "9\n8\n62\n", "5\n8\n50\n", "4\n8\n54\n", "7\n8\n70\n", "7\n8\n64\n", "7\n9\n59\n", "5\n13\n52\n", "7\n8\n47\n", "5\n11\n73\n", "7\n12\n62\n", "4\n8\n55\n", "6\n9\n70\n", "5\n10\n66\n", "5\n8\n56\n", "5\n15\n64\n", "7\n12\n60\n", "8\n8\n79\n", "7\n8\n80\n", "5\n8\n60\n", "5\n12\n50\n", "7\n11\n54\n", "6\n9\n59\n", "5\n11\n67\n", "7\n8\n76\n", "12\n8\n70\n", "8\n8\n66\n", "6\n8\n80\n", "5\n9\n60\n", "4\n8\n56\n", "7\n8\n72\n", "7\n13\n54\n", "6\n9\n69\n", "7\n9\n76\n", "7\n16\n58\n", "9\n15\n64\n", "10\n8\n66\n", "7\n8\n73\n", "8\n11\n54\n", "7\n8\n58\n", "5\n11\n70\n", "10\n8\n76\n", "8\n11\n57\n", "7\n16\n50\n", "6\n8\n98\n", "6\n8\n90\n", "7\n13\n62\n", "7\n7\n54\n", "5\n8\n74\n", "4\n8\n65\n", "4\n8\n53\n", "5\n10\n58\n", "6\n12\n58\n", "5\n8\n64\n", "5\n8\n49\n", "7\n12\n72\n", "8\n8\n88\n", "5\n12\n60\n", "5\n8\n67\n", "7\n8\n63\n", "7\n12\n51\n", "7\n8\n74\n", "5\n11\n93\n", "4\n7\n55\n", "5\n8\n92\n", "6\n8\n63\n", "5\n19\n64\n", "3\n10\n72\n", "9\n8\n63\n", "7\n16\n72\n", "9\n8\n54\n", "5\n11\n71\n", "7\n16\n54\n", "7\n9\n79\n", "9\n15\n68\n", "6\n8\n66\n", "7\n10\n73\n", "7\n16\n53\n", "6\n8\n100\n", "14\n8\n61\n", "6\n8\n47\n", "5\n8\n48\n", "7\n12\n88\n", "5\n11\n62\n", "5\n11\n60\n", "7\n8\n65\n", "5\n11\n114\n", "6\n8\n56\n", "9\n8\n58\n", "11\n8\n70\n", "6\n15\n64\n", "4\n9\n54\n", "7\n16\n65\n", "10\n8\n85\n", "8\n8\n64\n", "7\n16\n67\n", "5\n8\n58\n", "4\n8\n59\n", "5\n10\n72\n", "5\n11\n82\n", "3\n8\n72\n", "6\n8\n72\n", "7\n12\n71\n", "9\n8\n65\n", "9\n13\n58\n", "7\n9\n73\n", "7\n9\n58\n", "13\n11\n57\n", "7\n17\n67\n", "4\n8\n68\n", "6\n12\n49\n", "5\n9\n82\n", "5\n14\n50\n", "6\n15\n76\n", "9\n8\n67\n", "7\n16\n61\n", "14\n13\n58\n", "7\n9\n70\n", "7\n16\n81\n", "13\n11\n52\n", "4\n8\n71\n", "5\n10\n83\n", "5\n9\n73\n", "5\n11\n64\n", "3\n12\n72\n", "4\n14\n50\n", "7\n12\n70\n", "6\n15\n67\n", "7\n16\n95\n", "13\n11\n63\n", "4\n8\n80\n", "5\n10\n87\n", "5\n9\n81\n", "5\n12\n64\n", "4\n18\n50\n", "6\n15\n79\n", "13\n11\n65\n", "4\n13\n80\n", "5\n10\n73\n", "5\n9\n79\n", "4\n18\n48\n", "6\n15\n78\n", "7\n16\n52\n", "4\n18\n42\n", "7\n15\n52\n", "12\n11\n57\n", "5\n9\n117\n", "7\n15\n65\n", "12\n11\n64\n", "12\n11\n70\n", "5\n9\n105\n", "4\n8\n61\n", "7\n8\n48\n", "5\n8\n84\n", "5\n9\n47\n", "5\n14\n54\n", "7\n8\n68\n", "5\n13\n78\n", "5\n8\n87\n", "7\n14\n50\n", "5\n8\n82\n", "6\n14\n70\n", "7\n17\n58\n", "5\n18\n64\n", "7\n10\n58\n", "8\n9\n69\n", "5\n12\n65\n", "5\n8\n51\n"]}, "short_description": "1. One-sentence summary:\nGiven a tree where each node has two candidate values, choose one value per node to maximize the sum of absolute differences across every edge.\n\n2. Core algorithmic approach:\nA post-order (bottom-up) tree dynamic programming using an explicit stack for DFS. For each node, maintain dp[node][0 or 1] as the best total when selecting its first or second candidate, and combine children contributions greedily via max over the two choices of each child.\n\n3. Reusable components:\n- Iterative post-order DFS on a tree using a stack with \u201cpush then push-negated\u201d marker trick to process children before their parent.\n- A two-state DP array per node (dp[n][2]) to represent best scores for two local choices.\n- A merge operation that, for a parent-child edge, computes four candidate contributions (parent\u2010choice vs child\u2010choice) and adds the maximum to the parent\u2019s DP state."}
{"name": "1280_C. Jeremy Bearimy", "description": "Welcome! Everything is fine.\n\nYou have arrived in The Medium Place, the place between The Good Place and The Bad Place. You are assigned a task that will either make people happier or torture them for eternity.\n\nYou have a list of k pairs of people who have arrived in a new inhabited neighborhood. You need to assign each of the 2k people into one of the 2k houses. Each person will be the resident of exactly one house, and each house will have exactly one resident.\n\nOf course, in the neighborhood, it is possible to visit friends. There are 2k - 1 roads, each of which connects two houses. It takes some time to traverse a road. We will specify the amount of time it takes in the input. The neighborhood is designed in such a way that from anyone's house, there is exactly one sequence of distinct roads you can take to any other house. In other words, the graph with the houses as vertices and the roads as edges is a tree.\n\nThe truth is, these k pairs of people are actually soulmates. We index them from 1 to k. We denote by f(i) the amount of time it takes for the i-th pair of soulmates to go to each other's houses.\n\nAs we have said before, you will need to assign each of the 2k people into one of the 2k houses. You have two missions, one from the entities in The Good Place and one from the entities of The Bad Place. Here they are:\n\n  * The first mission, from The Good Place, is to assign the people into the houses such that the sum of f(i) over all pairs i is minimized. Let's define this minimized sum as G. This makes sure that soulmates can easily and efficiently visit each other; \n  * The second mission, from The Bad Place, is to assign the people into the houses such that the sum of f(i) over all pairs i is maximized. Let's define this maximized sum as B. This makes sure that soulmates will have a difficult time to visit each other. \n\n\n\nWhat are the values of G and B?\n\nInput\n\nThe first line of input contains a single integer t (1 \u2264 t \u2264 500) denoting the number of test cases. The next lines contain descriptions of the test cases.\n\nThe first line of each test case contains a single integer k denoting the number of pairs of people (1 \u2264 k \u2264 10^5). The next 2k - 1 lines describe the roads; the i-th of them contains three space-separated integers a_i, b_i, t_i which means that the i-th road connects the a_i-th and b_i-th houses with a road that takes t_i units of time to traverse (1 \u2264 a_i, b_i \u2264 2k, a_i \u2260 b_i, 1 \u2264 t_i \u2264 10^6). It is guaranteed that the given roads define a tree structure.\n\nIt is guaranteed that the sum of the k in a single file is at most 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single line containing two space-separated integers G and B. \n\nExample\n\nInput\n\n\n2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 3\n\n\nOutput\n\n\n15 33\n6 6\n\nNote\n\nFor the sample test case, we have a minimum sum equal to G = 15. One way this can be achieved is with the following assignment:\n\n  * The first pair of people get assigned to houses 5 and 6, giving us f(1) = 5; \n  * The second pair of people get assigned to houses 1 and 4, giving us f(2) = 6; \n  * The third pair of people get assigned to houses 3 and 2, giving us f(3) = 4. \n\n\n\nNote that the sum of the f(i) is 5 + 6 + 4 = 15. \n\nWe also have a maximum sum equal to B = 33. One way this can be achieved is with the following assignment:\n\n  * The first pair of people get assigned to houses 1 and 4, giving us f(1) = 6; \n  * The second pair of people get assigned to houses 6 and 2, giving us f(2) = 14; \n  * The third pair of people get assigned to houses 3 and 5, giving us f(3) = 13. \n\n\n\nNote that the sum of the f(i) is 6 + 14 + 13 = 33. ", "solution": "import sys\ninput = sys.stdin.buffer.readline\n\nfor T in range(int(input())):\n    k = int(input())\n    counts = [0] * (2 * k + 1)\n    adjacencies = [list() for i in range(2 * k + 1)]\n    for _ in range(2 * k - 1):\n        a, b, weight = map(int, input().split())\n        counts[a] += 1; counts[b] += 1\n        adjacencies[a].append((b, weight))\n        adjacencies[b].append((a, weight))\n\n    parents = [0] * (2 * k + 1)\n    weights = [0] * (2 * k + 1)\n\n    root = 1 # arbitrary\n    parents[root] = root\n    queue = [0] * (2 * k)\n    head, tail = 0, 0\n    queue[tail] = root\n    tail += 1\n    while head < tail:\n        node = queue[head]\n        for child, weight in adjacencies[node]:\n            if parents[child] < 1:\n                parents[child] = node\n                weights[child] = weight\n                queue[tail] = child\n                tail += 1\n        head += 1\n\n    subtree_sizes = [1] * (2 * k + 1)\n    maximum = minimum = 0\n    index = len(queue) - 1\n    while index >= 0: # build up the tree\n        node = queue[index]\n        subtree_sizes[parents[node]] += subtree_sizes[node]\n        if subtree_sizes[node] & 1:\n            minimum += weights[node]\n        maximum += weights[node] * min(subtree_sizes[node], 2 * k - subtree_sizes[node])\n        index -= 1\n    print(minimum, maximum)\n", "difficulty": 9, "public_tests": {"input": ["2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 3\n"], "output": ["15 33\n6 6\n"]}, "private_tests": {"input": ["1\n1\n2 1 4\n"], "output": ["4 4\n"]}, "generated_tests": {"input": ["1\n1\n2 1 1\n", "1\n1\n2 1 0\n", "1\n1\n2 1 2\n", "2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 0\n1 4 3\n", "1\n1\n2 1 3\n", "1\n1\n1 2 5\n", "2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n2 3 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 3\n2 4 3\n4 5 6\n5 6 5\n1\n1 2 1\n1 3 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 2\n1 5 2\n1 4 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 2\n4 5 6\n5 6 5\n2\n1 2 1\n2 3 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 3\n1 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 3\n", "1\n1\n1 2 10\n", "2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 0\n1 3 2\n1 4 0\n", "2\n3\n1 2 3\n3 2 6\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 1\n1 5 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n4 6 5\n1\n1 2 1\n1 5 2\n1 4 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n5 6 2\n1\n1 2 1\n1 5 1\n1 4 6\n", "2\n3\n1 2 3\n3 2 5\n2 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n1 5 1\n1 4 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n1 6 5\n1\n1 2 1\n1 6 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 1\n4 5 6\n5 6 5\n1\n1 2 2\n1 5 2\n1 4 2\n", "2\n3\n1 2 3\n3 2 4\n1 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n0 7 1\n1 3 5\n", "1\n1\n1 2 16\n", "2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 1\n5 6 5\n2\n1 2 0\n1 3 2\n1 4 0\n", "2\n3\n1 2 3\n3 2 6\n1 4 0\n4 5 6\n5 6 5\n1\n1 2 1\n1 5 2\n1 4 3\n", "1\n1\n1 2 32\n", "2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 0\n5 6 5\n2\n1 2 0\n1 3 2\n1 4 0\n", "2\n3\n1 2 3\n3 2 4\n2 4 1\n2 5 6\n5 6 5\n1\n1 2 2\n1 2 2\n1 4 2\n", "2\n3\n1 2 3\n3 2 4\n2 4 4\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 0\n1 4 3\n", "1\n1\n1 2 4\n", "2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 2\n2 3 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 8\n5 6 5\n1\n1 2 2\n1 5 2\n1 4 6\n", "2\n3\n1 2 3\n3 2 1\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 2\n1 5 2\n1 4 2\n", "1\n1\n1 2 15\n", "2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n2 6 5\n2\n1 2 0\n1 3 2\n1 4 0\n", "2\n3\n1 2 5\n3 2 6\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 1\n1 5 2\n1 4 3\n", "1\n1\n1 2 21\n", "2\n3\n1 2 3\n3 2 6\n1 4 0\n4 5 6\n4 6 5\n1\n1 2 1\n1 5 2\n1 4 3\n", "2\n3\n1 2 4\n3 2 4\n2 4 0\n4 5 6\n5 6 2\n1\n1 2 1\n1 8 1\n1 4 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 10\n5 6 5\n1\n1 2 2\n1 5 2\n1 4 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n1 6 6\n5 6 5\n1\n1 2 1\n1 5 0\n1 4 6\n", "1\n1\n1 2 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 1\n1 5 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 1\n1 5 2\n1 4 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 1\n1 5 1\n1 4 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n1 5 1\n1 4 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 1\n1 6 2\n1 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 2\n1 5 2\n1 4 2\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n1 5 1\n1 3 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n1 5 1\n1 3 5\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n0 5 1\n1 3 5\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n0 7 1\n1 3 5\n", "1\n1\n1 2 2\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n5 6 2\n1\n1 2 1\n1 8 1\n1 4 6\n", "2\n3\n1 2 3\n3 2 5\n2 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n1 5 1\n1 2 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 1\n4 5 6\n5 6 5\n1\n1 2 2\n1 2 2\n1 4 2\n", "2\n3\n1 2 3\n3 2 4\n2 4 1\n2 5 6\n5 6 5\n1\n1 2 2\n1 4 2\n1 4 2\n", "2\n3\n1 4 3\n3 2 4\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 1\n1 5 1\n1 4 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n1 5 0\n1 4 6\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 5 6\n5 6 5\n1\n1 2 1\n1 6 2\n2 4 3\n", "2\n3\n1 2 3\n3 2 4\n2 4 0\n4 6 6\n5 6 5\n1\n1 2 2\n1 5 1\n1 3 5\n", "1\n1\n1 2 0\n", "2\n3\n1 2 3\n3 2 5\n2 4 0\n4 6 6\n5 6 1\n1\n1 2 1\n1 5 1\n1 4 6\n", "2\n3\n1 3 3\n3 2 4\n1 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n0 7 1\n1 3 5\n", "2\n3\n1 2 3\n3 2 5\n2 4 0\n4 6 6\n5 6 5\n1\n1 2 1\n2 5 1\n1 2 6\n", "2\n3\n1 4 3\n3 2 4\n2 4 0\n4 5 6\n5 6 2\n1\n1 2 1\n1 5 1\n1 4 6\n"], "output": ["1 1\n", "0 0\n", "2 2\n", "15 33\n4 4\n", "3 3\n", "5 5\n", "15 33\n5 5\n", "15 33\n1 1\n", "12 24\n1 1\n", "15 33\n5 7\n", "14 32\n1 1\n", "12 24\n2 2\n", "14 30\n5 7\n", "15 33\n6 6\n", "10 10\n", "15 33\n2 2\n", "14 26\n1 1\n", "18 18\n1 1\n", "9 21\n1 1\n", "13 25\n1 1\n", "15 21\n1 1\n", "13 27\n2 2\n", "9 27\n1 1\n", "16 16\n", "15 23\n2 2\n", "11 29\n1 1\n", "32 32\n", "15 21\n2 2\n", "13 25\n2 2\n", "16 36\n4 4\n", "4 4\n", "15 33\n5 9\n", "12 28\n2 2\n", "9 21\n2 2\n", "15 15\n", "18 24\n2 2\n", "16 28\n1 1\n", "21 21\n", "17 23\n1 1\n", "10 22\n1 1\n", "12 32\n2 2\n", "12 30\n1 1\n", "3 3\n", "12 24\n1 1\n", "12 24\n1 1\n", "12 24\n1 1\n", "12 24\n1 1\n", "12 24\n1 1\n", "12 24\n2 2\n", "12 24\n1 1\n", "12 24\n1 1\n", "12 24\n1 1\n", "12 24\n1 1\n", "2 2\n", "9 21\n1 1\n", "13 25\n1 1\n", "13 27\n2 2\n", "13 25\n2 2\n", "12 24\n1 1\n", "12 24\n1 1\n", "12 24\n1 1\n", "12 24\n2 2\n", "0 0\n", "9 21\n1 1\n", "9 27\n1 1\n", "13 25\n1 1\n", "9 21\n1 1\n"]}, "short_description": "1. One-sentence summary:\nCompute aggregate values over edges of an undirected tree by rooting it, determining subtree sizes, and combining edge weights according to parity and size-based formulas.\n\n2. Core algorithmic approach:\nTree traversal and dynamic programming on trees:  \n- BFS (or any traversal) to establish parent\u2013child relationships and edge weights in a rooted tree.  \n- Post-order tree DP to compute subtree sizes and accumulate global metrics (minimum via odd\u2010subtree contributions, maximum via size\u2010based contributions).\n\n3. Reusable components:\n- BFS (or queue-based) routine to root an undirected tree and record parent pointers and edge weights.\n- Post-order (bottom-up) traversal using a stored queue or stack of nodes to compute subtree sizes.\n- Accumulation patterns for edge-based metrics:  \n  a. Summing weights for edges crossing odd-sized subtrees.  \n  b. Summing weight \u00d7 min(subtree_size, total_size \u2212 subtree_size) for all edges."}
{"name": "80_E. Beavermuncher-0xFF", "description": "\"Eat a beaver, save a tree!\" \u2014 That will be the motto of ecologists' urgent meeting in Beaverley Hills.\n\nAnd the whole point is that the population of beavers on the Earth has reached incredible sizes! Each day their number increases in several times and they don't even realize how much their unhealthy obsession with trees harms the nature and the humankind. The amount of oxygen in the atmosphere has dropped to 17 per cent and, as the best minds of the world think, that is not the end.\n\nIn the middle of the 50-s of the previous century a group of soviet scientists succeed in foreseeing the situation with beavers and worked out a secret technology to clean territory. The technology bears a mysterious title \"Beavermuncher-0xFF\". Now the fate of the planet lies on the fragile shoulders of a small group of people who has dedicated their lives to science.\n\nThe prototype is ready, you now need to urgently carry out its experiments in practice.\n\nYou are given a tree, completely occupied by beavers. A tree is a connected undirected graph without cycles. The tree consists of n vertices, the i-th vertex contains ki beavers. \n\n\"Beavermuncher-0xFF\" works by the following principle: being at some vertex u, it can go to the vertex v, if they are connected by an edge, and eat exactly one beaver located at the vertex v. It is impossible to move to the vertex v if there are no beavers left in v. \"Beavermuncher-0xFF\" cannot just stand at some vertex and eat beavers in it. \"Beavermuncher-0xFF\" must move without stops.\n\nWhy does the \"Beavermuncher-0xFF\" works like this? Because the developers have not provided place for the battery in it and eating beavers is necessary for converting their mass into pure energy.\n\nIt is guaranteed that the beavers will be shocked by what is happening, which is why they will not be able to move from a vertex of the tree to another one. As for the \"Beavermuncher-0xFF\", it can move along each edge in both directions while conditions described above are fulfilled.\n\nThe root of the tree is located at the vertex s. This means that the \"Beavermuncher-0xFF\" begins its mission at the vertex s and it must return there at the end of experiment, because no one is going to take it down from a high place. \n\nDetermine the maximum number of beavers \"Beavermuncher-0xFF\" can eat and return to the starting vertex.\n\nInput\n\nThe first line contains integer n \u2014 the number of vertices in the tree (1 \u2264 n \u2264 105). The second line contains n integers ki (1 \u2264 ki \u2264 105) \u2014 amounts of beavers on corresponding vertices. Following n - 1 lines describe the tree. Each line contains two integers separated by space. These integers represent two vertices connected by an edge. Vertices are numbered from 1 to n. The last line contains integer s \u2014 the number of the starting vertex (1 \u2264 s \u2264 n).\n\nOutput\n\nPrint the maximum number of beavers munched by the \"Beavermuncher-0xFF\".\n\nPlease, do not use %lld specificator to write 64-bit integers in C++. It is preferred to use cout (also you may use %I64d).\n\nExamples\n\nInput\n\n5\n1 3 1 3 2\n2 5\n3 4\n4 5\n1 5\n4\n\n\nOutput\n\n6\n\n\nInput\n\n3\n2 1 1\n3 2\n1 2\n3\n\n\nOutput\n\n2", "solution": "import sys\nfrom array import array  # noqa: F401\n\n\ndef input():\n    return sys.stdin.buffer.readline().decode('utf-8')\n\n\nn = int(input())\nbeaver = list(map(int, input().split()))\nadj = [[] for _ in range(n)]\ndeg = [0] * n\n\nfor u, v in (map(int, input().split()) for _ in range(n - 1)):\n    adj[u - 1].append(v - 1)\n    adj[v - 1].append(u - 1)\n    deg[u - 1] += 1\n    deg[v - 1] += 1\n\nstart = int(input()) - 1\ndeg[start] += 1000000\n\nif n == 1:\n    print(0)\n    exit()\n\ndp = [0] * n\nstack = [i for i in range(n) if i != start and deg[i] == 1]\nwhile stack:\n    v = stack.pop()\n    deg[v] = 0\n    child = []\n    child_dp = []\n\n    for dest in adj[v]:\n        if deg[dest] == 0:\n            child.append(dest)\n            child_dp.append(dp[dest])\n\n        else:\n            deg[dest] -= 1\n            if deg[dest] == 1:\n                stack.append(dest)\n\n    child_dp.sort(reverse=True)\n    x = min(beaver[v] - 1, len(child))\n    dp[v] = 1 + sum(child_dp[:x]) + x\n    beaver[v] -= x + 1\n    for c in child:\n        x = min(beaver[v], beaver[c])\n        beaver[v] -= x\n        dp[v] += 2 * x\n\n\nx = min(beaver[start], len(adj[start]))\nchild_dp = sorted((dp[v] for v in adj[start]), reverse=True)\nans = sum(child_dp[:x]) + x\nbeaver[start] -= x\n\nfor c in adj[start]:\n    x = min(beaver[start], beaver[c])\n    beaver[start] -= x\n    ans += 2 * x\n\nprint(ans)\n", "difficulty": 11, "public_tests": {"input": ["5\n1 3 1 3 2\n2 5\n3 4\n4 5\n1 5\n4\n", "3\n2 1 1\n3 2\n1 2\n3\n"], "output": ["6\n", "2\n"]}, "private_tests": {"input": ["5\n1 3 1 1 2\n2 5\n4 5\n3 4\n1 5\n4\n", "1\n6\n1\n", "15\n7 5 4 1 2 4 2 8 1 7 1 3 8 2 7\n2 3\n8 5\n14 5\n4 14\n1 5\n10 12\n11 8\n15 13\n7 5\n13 5\n9 8\n3 12\n6 12\n5 12\n6\n", "4\n1 1 1 1\n4 1\n2 1\n3 4\n2\n", "3\n91 72 109\n1 3\n3 2\n2\n", "5\n1 1 1 5 5\n1 2\n1 4\n4 5\n1 3\n1\n", "3\n98400 93909 99994\n1 2\n3 2\n2\n", "7\n1 1 1 100 1 1 100\n1 2\n1 3\n1 4\n1 5\n1 6\n4 7\n1\n", "10\n91739 91402 94944 92279 91149 91709 96966 91401 97398 98822\n3 6\n9 6\n5 6\n1 6\n8 6\n7 6\n10 6\n4 6\n2 6\n2\n", "15\n1 2 1 2 3 3 1 1 2 1 1 1 1 2 2\n15 2\n13 5\n7 12\n6 7\n1 3\n10 1\n2 11\n9 10\n12 3\n11 1\n8 11\n14 5\n4 14\n5 7\n7\n", "2\n5 6\n2 1\n2\n", "5\n97215 99026 95812 92076 91892\n2 4\n5 4\n1 4\n3 4\n1\n", "7\n1 1 1 5 5 5 5\n1 2\n1 4\n4 5\n1 3\n2 6\n6 7\n1\n", "1\n96389\n1\n", "2\n1 1\n1 2\n2\n", "6\n3 3 1 2 3 5\n2 6\n1 6\n4 5\n5 1\n3 4\n5\n"], "output": ["4\n", "0\n", "28\n", "2\n", "218\n", "10\n", "187818\n", "200\n", "183418\n", "8\n", "10\n", "184152\n", "10\n", "0\n", "2\n", "16\n"]}, "generated_tests": {"input": ["5\n1 3 1 1 2\n2 5\n4 5\n3 4\n1 5\n3\n", "15\n7 5 4 1 2 4 2 8 1 7 1 3 8 2 7\n2 3\n8 5\n14 5\n4 14\n1 5\n10 12\n11 8\n15 13\n7 3\n13 5\n9 8\n3 12\n6 12\n5 12\n6\n", "3\n98400 12931 99994\n1 2\n3 2\n2\n", "2\n5 10\n2 1\n2\n", "5\n1 3 1 3 2\n2 2\n3 4\n4 5\n1 5\n4\n", "2\n6 10\n2 1\n2\n", "15\n7 5 4 1 2 4 2 12 1 7 1 3 8 2 7\n2 3\n8 5\n14 5\n4 14\n1 5\n10 12\n11 8\n15 13\n7 3\n13 5\n9 8\n3 12\n6 8\n5 12\n6\n", "1\n11\n1\n", "3\n91 72 131\n1 3\n3 2\n2\n", "3\n103342 93909 99994\n1 2\n3 2\n2\n", "7\n1 1 1 100 1 1 100\n1 2\n2 3\n1 4\n1 5\n1 6\n4 7\n1\n", "2\n5 2\n2 1\n2\n", "5\n97215 99026 62965 92076 91892\n2 4\n5 4\n1 4\n3 4\n1\n", "6\n3 3 1 2 3 3\n2 6\n1 6\n4 5\n5 1\n3 4\n5\n", "5\n1 3 2 3 2\n2 2\n3 4\n4 5\n1 5\n4\n", "15\n7 5 4 1 2 4 2 12 1 7 1 3 14 2 11\n2 3\n8 5\n14 5\n4 14\n1 5\n10 12\n11 8\n15 13\n7 3\n13 5\n9 8\n3 12\n6 8\n5 12\n6\n", "3\n103342 39623 160472\n1 2\n3 2\n3\n", "3\n103342 62144 160472\n1 2\n3 2\n3\n", "3\n135 72 109\n1 3\n3 2\n2\n", "10\n91739 91402 94944 92279 91149 91709 96966 91401 97398 98822\n3 6\n9 6\n5 6\n1 6\n8 6\n7 6\n10 6\n4 6\n2 6\n4\n", "4\n1 2 1 1\n4 1\n2 1\n3 4\n2\n", "5\n1 1 1 5 5\n1 2\n2 4\n4 5\n1 3\n1\n", "15\n1 2 1 2 3 3 1 1 2 1 1 1 1 2 2\n15 2\n13 5\n7 12\n6 7\n1 3\n10 1\n2 11\n9 10\n12 3\n11 1\n8 11\n14 5\n4 14\n5 8\n7\n", "2\n1 1\n1 2\n1\n", "15\n7 5 4 1 2 4 2 12 1 7 1 3 8 2 7\n2 3\n8 5\n14 5\n4 14\n1 5\n10 12\n11 8\n15 13\n7 3\n13 5\n9 8\n3 12\n6 12\n5 12\n6\n", "4\n1 2 1 1\n3 1\n2 1\n3 4\n2\n", "2\n1 2\n1 2\n1\n", "15\n7 5 4 2 2 4 2 8 1 7 1 3 8 2 7\n2 3\n8 5\n14 5\n4 14\n1 5\n10 12\n11 8\n15 13\n7 5\n13 5\n9 8\n3 12\n6 12\n5 12\n6\n", "7\n1 1 1 1 5 5 5\n1 2\n1 4\n4 5\n1 3\n2 6\n6 7\n1\n", "1\n96910\n1\n", "2\n1 0\n1 2\n2\n", "5\n1 3 0 1 2\n2 5\n4 5\n3 4\n1 5\n3\n", "15\n1 2 1 2 3 3 1 1 2 2 1 1 1 2 2\n15 2\n13 5\n7 12\n6 7\n1 3\n10 1\n2 11\n9 10\n12 3\n11 1\n8 11\n14 5\n4 14\n5 8\n7\n", "2\n5 10\n2 1\n1\n", "4\n1 2 1 2\n3 1\n2 1\n3 4\n2\n", "2\n6 9\n2 1\n2\n", "2\n2 2\n1 2\n1\n", "15\n7 5 4 1 2 4 2 12 1 7 1 3 14 2 7\n2 3\n8 5\n14 5\n4 14\n1 5\n10 12\n11 8\n15 13\n7 3\n13 5\n9 8\n3 12\n6 8\n5 12\n6\n", "1\n18\n1\n", "3\n103342 93909 160472\n1 2\n3 2\n2\n", "7\n1 1 1 100 1 1 100\n1 2\n2 3\n1 4\n1 5\n1 6\n4 7\n2\n", "5\n1 4 2 3 2\n2 2\n3 4\n4 5\n1 5\n4\n", "4\n1 1 1 2\n3 1\n2 1\n3 4\n2\n", "1\n21\n1\n", "3\n103342 93909 160472\n1 2\n3 2\n3\n", "7\n1 1 1 100 1 1 100\n1 4\n2 3\n1 4\n1 5\n1 6\n4 7\n2\n", "5\n1 4 2 3 2\n2 2\n3 4\n4 1\n1 5\n4\n", "1\n2\n1\n", "15\n7 5 4 1 2 4 2 8 1 7 1 3 8 2 7\n2 3\n8 5\n14 5\n4 14\n1 5\n10 12\n11 2\n15 13\n7 5\n13 5\n9 8\n3 12\n6 12\n5 12\n6\n", "3\n98400 93909 167109\n1 2\n3 2\n2\n", "15\n1 2 2 2 3 3 1 1 2 1 1 1 1 2 2\n15 2\n13 5\n7 12\n6 7\n1 3\n10 1\n2 11\n9 10\n12 3\n11 1\n8 11\n14 5\n4 14\n5 7\n7\n", "7\n1 1 1 5 5 5 5\n1 3\n1 4\n4 5\n1 3\n2 6\n6 7\n1\n", "5\n1 3 1 3 2\n2 5\n3 1\n4 5\n1 5\n4\n", "3\n1 1 1\n3 2\n1 2\n3\n", "5\n2 3 1 1 2\n2 5\n4 5\n3 4\n1 5\n3\n", "15\n7 5 4 1 2 4 2 8 1 7 1 3 14 2 7\n2 3\n8 5\n14 5\n4 14\n1 5\n10 12\n11 8\n15 13\n7 3\n13 5\n9 8\n3 12\n6 12\n5 12\n6\n"], "output": ["2\n", "28\n", "25862\n", "10\n", "6\n", "12\n", "30\n", "0\n", "262\n", "187818\n", "200\n", "4\n", "184152\n", "14\n", "8\n", "38\n", "79246\n", "124288\n", "218\n", "183418\n", "2\n", "2\n", "2\n", "2\n", "28\n", "2\n", "2\n", "28\n", "2\n", "0\n", "0\n", "0\n", "2\n", "10\n", "2\n", "12\n", "4\n", "30\n", "0\n", "187818\n", "2\n", "8\n", "2\n", "0\n", "187818\n", "2\n", "6\n", "0\n", "30\n", "187818\n", "8\n", "10\n", "4\n", "2\n", "2\n", "28\n"]}, "short_description": "1. One-sentence summary:  \nCompute the maximum cumulative score achievable on a tree by propagating and combining per-node values bottom-up, subject to per-node caps and pairwise interactions along edges.\n\n2. Core algorithmic approach:  \nA leaf-pruning (topological) tree DP that processes nodes in reverse BFS/DFS order: peel leaves into a stack, compute each node\u2019s DP from its children by sorting their DP values and greedily taking the top contributions under resource constraints.\n\n3. Reusable components:  \n- Leaf-pruning via a degree array and stack to establish a bottom-up processing order on a tree.  \n- Bottom-up DP merge: collecting child DP values, sorting in descending order, and taking the top k contributions.  \n- Greedy resource pairing loop that matches leftover capacity between parent and child nodes to add extra score."}
{"name": "461_B. Appleman and Tree", "description": "Appleman has a tree with n vertices. Some of the vertices (at least one) are colored black and other vertices are colored white.\n\nConsider a set consisting of k (0 \u2264 k < n) edges of Appleman's tree. If Appleman deletes these edges from the tree, then it will split into (k + 1) parts. Note, that each part will be a tree with colored vertices.\n\nNow Appleman wonders, what is the number of sets splitting the tree in such a way that each resulting part will have exactly one black vertex? Find this number modulo 1000000007 (109 + 7).\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 105) \u2014 the number of tree vertices. \n\nThe second line contains the description of the tree: n - 1 integers p0, p1, ..., pn - 2 (0 \u2264 pi \u2264 i). Where pi means that there is an edge connecting vertex (i + 1) of the tree and vertex pi. Consider tree vertices are numbered from 0 to n - 1.\n\nThe third line contains the description of the colors of the vertices: n integers x0, x1, ..., xn - 1 (xi is either 0 or 1). If xi is equal to 1, vertex i is colored black. Otherwise, vertex i is colored white.\n\nOutput\n\nOutput a single integer \u2014 the number of ways to split the tree modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n3\n0 0\n0 1 1\n\n\nOutput\n\n2\n\n\nInput\n\n6\n0 1 1 0 4\n1 1 0 0 1 0\n\n\nOutput\n\n1\n\n\nInput\n\n10\n0 1 2 1 4 4 4 0 8\n0 0 0 1 0 1 1 0 0 1\n\n\nOutput\n\n27", "solution": "from collections import UserDict\n\n\nclass Tree(UserDict):\n    def __init__(self, g):\n        super().__init__()\n        for name, value in enumerate(g, 1):\n            self[value] = name\n\n    def __setitem__(self, name, value):\n        if name in self:\n            if value is not None:\n                self[name].add(value)\n                self[value] = None\n        else:\n            if value is None:\n                super().__setitem__(name, set())\n            else:\n                super().__setitem__(name, {value})\n                self[value] = None\n\n\nif __name__ == '__main__':\n    n = int(input())\n\n    tree = Tree(int(i) for i in input().split())\n    colors = [int(i) for i in input().split()]\n    t = [()] * n\n\n    def dfs(v):\n        stack = [v]\n        visited = set()\n\n        while stack:\n            v = stack.pop()\n            if v not in visited:\n                visited.add(v)\n                stack.append(v)\n                stack.extend(tree[v])\n            else:\n                t[v] = (1, colors[v])\n                for u in tree[v]:\n                    t[v] = (\n                        (t[v][0] * t[u][1] + t[v][0] * t[u][0] * (not colors[u])) % (10**9 + 7),\n                        (t[v][1] * t[u][1] + t[v][0] * t[u][1] * (not colors[v])\n                                           + t[v][1] * t[u][0] * (not colors[u])) % (10**9 + 7)\n                    )\n\n                \n    dfs(0)\n\n    print(t[0][1])\n\n\n\n    \n\n\n\n\n# Made By Mostafa_Khaled", "difficulty": 8, "public_tests": {"input": ["10\n0 1 2 1 4 4 4 0 8\n0 0 0 1 0 1 1 0 0 1\n", "3\n0 0\n0 1 1\n", "6\n0 1 1 0 4\n1 1 0 0 1 0\n"], "output": ["27", "2", "1"]}, "private_tests": {"input": ["5\n0 1 1 3\n0 0 0 1 1\n", "100\n0 0 2 2 0 3 5 0 6 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 9 6 3 6 17 26 24 20 6 4 27 8 5 14 5 35 31 27 3 41 25 20 14 25 31 49 40 0 1 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 68 36 7 80 60 6 2 11 43 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1\n", "10\n0 1 1 2 4 3 3 3 2\n1 0 1 1 1 0 0 1 1 0\n", "2\n0\n1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"], "output": ["1", "9523200", "3", "1", "1"]}, "generated_tests": {"input": ["10\n0 1 1 2 4 3 3 3 3\n1 0 1 1 1 0 0 1 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "6\n0 1 1 0 4\n0 1 0 0 1 0\n", "100\n0 0 2 2 0 3 5 0 6 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 9 6 3 6 17 26 24 20 6 4 27 8 5 14 5 35 31 27 3 41 25 20 14 25 31 49 40 0 1 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 68 36 7 80 60 6 2 11 43 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 0 1\n", "10\n0 1 2 1 1 4 4 0 8\n0 0 0 1 0 1 1 0 0 1\n", "100\n0 0 2 2 0 3 5 0 6 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 9 6 3 6 17 26 24 20 6 4 27 8 5 14 5 35 31 27 3 41 25 20 14 25 31 49 40 0 1 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 68 36 12 80 60 6 2 11 43 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 0 1\n", "10\n0 1 1 2 4 3 5 3 0\n1 0 1 1 1 0 0 1 1 0\n", "10\n0 1 0 1 1 4 4 0 8\n0 0 0 1 0 1 1 0 0 1\n", "100\n0 0 2 2 0 3 5 0 6 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 9 6 3 6 17 26 24 20 4 4 27 8 5 14 5 35 31 27 3 41 25 20 14 25 31 49 40 0 1 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 68 36 12 80 60 6 2 11 43 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 0 1\n", "3\n0 0\n1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\n0 1 1 2 4 3 3 3 2\n1 0 1 1 1 0 0 0 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "6\n0 1 0 0 4\n1 1 0 0 1 0\n", "10\n0 0 1 2 4 3 3 3 3\n1 0 1 1 1 0 0 1 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 6 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 4 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\n0 1 1 2 4 0 3 3 2\n1 0 1 1 1 0 0 0 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 1 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "6\n0 1 0 0 4\n1 0 0 0 1 0\n", "10\n0 0 1 2 4 3 3 4 3\n1 0 1 1 1 0 0 1 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 6 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 0 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 4 4 4 5 2 5 1 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "6\n0 1 0 0 4\n1 0 0 1 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 1 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 6 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 0 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 4 4 4 5 2 5 1 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "6\n0 1 0 1 4\n1 0 0 1 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 1 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 6 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 0 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\n0 1 1 2 4 3 3 3 0\n1 0 1 1 1 0 0 1 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 1 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "3\n0 1\n0 1 1\n", "10\n0 1 1 2 4 2 3 3 3\n1 0 1 1 1 0 0 1 1 0\n", "6\n0 1 2 0 4\n0 1 0 0 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\n0 1 1 2 4 3 3 3 1\n1 0 1 1 1 0 0 0 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 1 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "6\n0 1 0 0 2\n1 1 0 0 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 5 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 0 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 4 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\n0 1 1 2 4 0 3 3 2\n1 0 1 1 1 0 1 0 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 1 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 6 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\n0 0 1 2 4 5 3 4 3\n1 0 1 1 1 0 0 1 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 6 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 0 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 6 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 4 4 4 5 2 5 1 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 1 5 1 3 4 0 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 6 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 0 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 4 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 4 4 4 5 2 5 1 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "6\n0 1 0 1 4\n1 0 0 1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 1 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 6 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 5 1 5 4 0 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\n0 1 1 2 4 2 3 3 3\n1 0 1 1 1 0 1 1 1 0\n", "6\n0 0 2 0 4\n0 1 0 0 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 1 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 0 0 0 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "6\n0 1 0 0 2\n1 1 0 1 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 8 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 0 1 5 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\n0 1 1 2 4 0 3 3 2\n1 0 1 1 1 1 1 0 1 0\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 1 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 6 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 6 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 4 5 0 4 5 1 3 0 0 1 3 0 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 2 2 1 1 2 3 4 3 1 5 0 4 4 4 5 2 5 1 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"], "output": ["3\n", "1\n", "2\n", "19046400\n", "28\n", "7936000\n", "6\n", "21\n", "10752000\n", "1\n", "1\n", "3\n", "1\n", "1\n", "2\n", "1\n", "1\n", "3\n", "1\n", "1\n", "2\n", "1\n", "1\n", "1\n", "1\n", "1\n", "2\n", "1\n", "3\n", "1\n", "1\n", "3\n", "2\n", "1\n", "3\n", "1\n", "1\n", "1\n", "1\n", "3\n", "1\n", "2\n", "1\n", "1\n", "1\n", "1\n", "2\n", "1\n", "3\n", "2\n", "1\n", "1\n", "1\n", "1\n", "3\n", "1\n", "1\n"]}, "short_description": "1. One-sentence summary  \nCompute aggregate values over a rooted tree by performing a post-order traversal and combining child contributions according to fixed local rules.  \n\n2. Core algorithmic approach  \nIterative depth-first search with explicit stack to realize a post-order traversal, coupled with tree-DP where each node\u2019s result is computed by folding in its children\u2019s results.  \n\n3. Reusable components  \n- Parent-list to adjacency-list conversion: building a bidirectional or child-only tree representation from a sequence of parent pointers.  \n- Iterative post-order DFS template: using a stack plus a visited set (or color marking) to ensure children are processed before their parent.  \n- Tree-DP combine step: a pattern for folding per-child contributions under modular arithmetic (or any associative combine), allowing you to compute subtree aggregates bottom-up."}
{"name": "1499_F. Diameter Cuts", "description": "You are given an integer k and an undirected tree, consisting of n vertices.\n\nThe length of a simple path (a path in which each vertex appears at most once) between some pair of vertices is the number of edges in this path. A diameter of a tree is the maximum length of a simple path between all pairs of vertices of this tree.\n\nYou are about to remove a set of edges from the tree. The tree splits into multiple smaller trees when the edges are removed. The set of edges is valid if all the resulting trees have diameter less than or equal to k.\n\nTwo sets of edges are different if there is an edge such that it appears in only one of the sets.\n\nCount the number of valid sets of edges modulo 998 244 353.\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 5000, 0 \u2264 k \u2264 n - 1) \u2014 the number of vertices of the tree and the maximum allowed diameter, respectively.\n\nEach of the next n-1 lines contains a description of an edge: two integers v and u (1 \u2264 v, u \u2264 n, v \u2260 u).\n\nThe given edges form a tree.\n\nOutput\n\nPrint a single integer \u2014 the number of valid sets of edges modulo 998 244 353.\n\nExamples\n\nInput\n\n\n4 3\n1 2\n1 3\n1 4\n\n\nOutput\n\n\n8\n\n\nInput\n\n\n2 0\n1 2\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n6 2\n1 6\n2 4\n2 6\n3 6\n5 6\n\n\nOutput\n\n\n25\n\n\nInput\n\n\n6 3\n1 2\n1 5\n2 3\n3 4\n5 6\n\n\nOutput\n\n\n29\n\nNote\n\nIn the first example the diameter of the given tree is already less than or equal to k. Thus, you can choose any set of edges to remove and the resulting trees will have diameter less than or equal to k. There are 2^3 sets, including the empty one.\n\nIn the second example you have to remove the only edge. Otherwise, the diameter will be 1, which is greater than 0.\n\nHere are the trees for the third and the fourth examples: \n\n<image>", "solution": "import sys\nfrom collections import deque\n\ninput = lambda :sys.stdin.buffer.readline()\nmi = lambda :map(int,input().split())\nli = lambda :list(mi())\n\nmod = 998244353\n\nN,K = mi()\nedge = [[] for i in range(N)]\nfor _ in range(N-1):\n    a,b = mi()\n    edge[a-1].append(b-1)\n    edge[b-1].append(a-1)\n\nparent = [-1 for i in range(N)]\ndeq = deque([0])\nres = []\nwhile deq:\n    v = deq.popleft()\n    res.append(v)\n    for nv in edge[v]:\n        if nv!=parent[v]:\n            parent[nv] = v\n            deq.append(nv)\n\ndp = [[1] for i in range(N)]\n\ndef merge(v,nv):\n    res_dp = [0 for i in range(max(len(dp[v]),len(dp[nv])+1))]\n\n    for i in range(len(dp[v])):\n        for j in range(len(dp[nv])):\n            if j+1+i <= K:\n                res_dp[max(j+1,i)] += dp[v][i] * dp[nv][j]\n                res_dp[max(j+1,i)] %= mod\n            res_dp[i] += dp[v][i] * dp[nv][j]\n            res_dp[i] %= mod\n\n    dp[v] = res_dp\n\nfor v in res[::-1]:\n    for nv in edge[v]:\n        if nv==parent[v]:\n            continue\n        merge(v,nv)\n\nprint(sum(dp[0][i] for i in range(min(K+1,len(dp[0])))) % mod)\n", "difficulty": 12, "public_tests": {"input": ["2 0\n1 2\n", "6 3\n1 2\n1 5\n2 3\n3 4\n5 6\n", "6 2\n1 6\n2 4\n2 6\n3 6\n5 6\n", "4 3\n1 2\n1 3\n1 4\n"], "output": ["\n1\n", "\n29\n", "\n25\n", "\n8\n"]}, "private_tests": {"input": ["20 3\n10 6\n2 6\n19 4\n15 6\n20 13\n9 11\n8 1\n12 4\n7 8\n16 3\n18 17\n8 16\n12 5\n13 7\n9 4\n14 16\n8 9\n10 18\n9 17\n", "10 0\n10 6\n6 5\n1 3\n6 1\n7 10\n2 8\n9 7\n3 4\n3 8\n", "20 2\n3 14\n13 1\n4 3\n13 5\n12 20\n19 12\n6 3\n12 15\n11 2\n11 17\n9 5\n19 7\n6 11\n17 5\n16 18\n16 7\n12 8\n19 11\n16 10\n", "20 1\n13 3\n12 5\n19 6\n14 17\n6 3\n7 9\n4 1\n6 18\n19 20\n15 11\n9 10\n17 15\n6 10\n17 16\n15 20\n4 19\n5 7\n15 8\n2 12\n", "10 1\n7 9\n9 3\n4 2\n8 7\n7 10\n8 5\n4 1\n8 2\n6 8\n", "20 4\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n", "10 2\n7 5\n4 8\n1 10\n8 7\n5 6\n3 1\n1 5\n10 9\n4 2\n", "2 1\n1 2\n"], "output": ["239092\n", "1\n", "122844\n", "5455\n", "61\n", "400096\n", "240\n", "2\n"]}, "generated_tests": {"input": ["20 3\n10 6\n2 2\n19 4\n15 6\n20 13\n9 11\n8 1\n12 4\n7 8\n16 3\n18 17\n8 16\n12 5\n13 7\n9 4\n14 16\n8 9\n10 18\n9 17\n", "20 2\n6 14\n13 1\n4 3\n13 5\n12 20\n19 12\n6 3\n12 15\n11 2\n11 17\n9 5\n19 7\n6 11\n17 5\n16 18\n16 7\n12 8\n19 11\n16 10\n", "10 1\n7 9\n9 3\n4 2\n8 7\n7 10\n8 5\n4 1\n8 2\n6 7\n", "10 2\n7 5\n4 8\n1 10\n8 7\n5 6\n3 1\n1 4\n10 9\n4 2\n", "2 0\n2 2\n", "4 1\n1 2\n1 3\n1 4\n", "10 3\n7 5\n4 8\n1 10\n8 7\n5 6\n3 1\n1 4\n10 9\n4 2\n", "6 1\n1 2\n1 5\n2 3\n3 4\n5 6\n", "4 1\n1 2\n2 3\n1 4\n", "20 2\n3 14\n13 1\n4 3\n13 5\n12 20\n19 12\n6 3\n12 15\n11 2\n11 17\n9 5\n19 7\n6 11\n17 5\n16 18\n16 7\n12 8\n19 10\n16 10\n", "20 3\n10 6\n2 6\n19 4\n15 6\n20 13\n9 11\n8 1\n12 4\n7 8\n16 3\n18 17\n8 16\n12 5\n13 7\n9 4\n14 16\n8 9\n10 7\n9 17\n", "20 2\n3 14\n13 1\n4 3\n13 5\n12 20\n19 12\n6 3\n12 15\n10 2\n11 17\n9 5\n19 7\n6 11\n17 5\n16 18\n16 7\n12 8\n19 11\n16 10\n", "20 1\n13 3\n12 5\n19 6\n14 17\n6 3\n7 9\n4 1\n6 18\n19 11\n15 11\n9 10\n17 15\n6 10\n17 16\n15 20\n4 19\n5 7\n15 8\n2 12\n", "10 2\n7 5\n4 7\n1 10\n8 7\n5 6\n3 1\n1 5\n10 9\n4 2\n", "6 2\n1 6\n1 4\n2 6\n3 6\n5 6\n", "20 3\n10 6\n2 2\n19 4\n15 6\n20 13\n9 11\n8 1\n12 4\n7 8\n16 3\n18 17\n15 16\n12 5\n13 7\n9 4\n14 16\n8 9\n10 18\n9 17\n", "20 2\n6 14\n13 1\n4 3\n13 5\n12 20\n19 12\n6 3\n12 15\n11 2\n11 17\n9 5\n19 7\n6 11\n17 5\n16 18\n16 7\n18 8\n19 11\n16 10\n", "6 1\n1 2\n1 5\n2 3\n1 4\n5 6\n", "20 2\n3 14\n13 1\n4 3\n13 5\n12 20\n19 12\n6 3\n12 15\n11 2\n11 17\n9 5\n19 9\n6 11\n17 5\n16 18\n16 7\n12 8\n19 10\n16 10\n", "20 3\n10 6\n2 6\n19 4\n15 6\n20 13\n9 11\n8 1\n12 4\n7 8\n16 3\n18 17\n8 16\n12 5\n13 7\n9 4\n14 16\n8 9\n10 7\n2 17\n", "20 3\n10 6\n2 6\n19 4\n15 6\n20 13\n9 11\n8 1\n12 4\n7 8\n16 3\n18 17\n8 16\n12 5\n13 7\n5 4\n14 16\n8 9\n10 7\n2 17\n", "20 2\n6 14\n13 1\n4 3\n13 5\n12 20\n19 12\n6 3\n12 15\n11 2\n11 17\n9 5\n19 7\n3 11\n17 5\n16 18\n16 7\n18 8\n19 16\n16 10\n", "6 0\n1 2\n1 5\n2 3\n3 4\n5 6\n", "20 0\n10 6\n2 6\n19 4\n15 6\n20 13\n9 11\n8 1\n12 4\n7 8\n16 3\n18 17\n8 16\n12 5\n13 7\n9 4\n14 16\n8 9\n10 18\n9 17\n", "1 0\n10 6\n6 5\n1 3\n6 1\n7 10\n2 8\n9 7\n3 4\n3 8\n", "1 0\n10 6\n6 5\n1 3\n6 1\n7 10\n2 8\n9 7\n6 4\n3 8\n", "1 0\n10 6\n6 5\n1 3\n6 1\n7 10\n2 11\n9 7\n6 4\n3 8\n", "1 0\n10 6\n6 5\n1 3\n6 1\n7 10\n0 11\n9 7\n6 4\n3 8\n", "1 0\n10 6\n6 5\n1 3\n6 1\n7 7\n0 11\n9 7\n6 4\n3 8\n", "1 0\n10 6\n6 5\n1 3\n6 1\n7 7\n0 11\n9 7\n6 1\n3 8\n", "1 0\n10 6\n6 5\n1 3\n6 1\n7 12\n0 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 3\n6 1\n7 12\n0 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 3\n11 1\n7 12\n0 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 3\n11 1\n7 12\n1 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 3\n11 1\n7 12\n1 11\n9 7\n6 0\n3 8\n", "1 0\n10 7\n6 5\n1 3\n11 1\n7 12\n1 11\n9 7\n6 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n11 1\n7 12\n1 11\n9 7\n6 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n11 1\n7 12\n1 11\n9 7\n4 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n11 1\n7 12\n1 5\n9 7\n4 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n11 1\n7 12\n1 2\n9 7\n4 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n11 1\n7 12\n1 3\n9 7\n4 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n15 1\n7 12\n1 3\n9 7\n4 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n15 1\n7 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 5\n0 3\n15 1\n7 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 7\n0 3\n15 1\n7 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 7\n0 3\n15 1\n0 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 7\n0 3\n15 1\n0 12\n1 3\n9 12\n4 1\n3 11\n", "1 0\n14 7\n5 7\n0 3\n15 1\n0 12\n1 3\n9 12\n4 1\n3 11\n", "1 1\n14 7\n5 7\n0 3\n15 1\n0 12\n1 3\n9 12\n4 1\n3 11\n", "1 1\n14 7\n5 7\n0 3\n16 1\n0 12\n1 3\n9 12\n4 1\n3 11\n", "1 1\n14 7\n5 7\n0 3\n16 1\n0 12\n1 3\n9 12\n4 0\n3 11\n", "1 1\n14 7\n5 6\n0 3\n16 1\n0 12\n1 3\n9 12\n4 0\n3 11\n", "1 1\n14 7\n5 6\n0 3\n16 1\n0 12\n1 3\n9 12\n6 0\n3 11\n", "1 1\n14 7\n5 11\n0 3\n16 1\n0 12\n1 3\n9 12\n6 0\n3 11\n", "1 1\n14 7\n5 11\n0 3\n16 1\n0 5\n1 3\n9 12\n6 0\n3 11\n", "1 0\n14 7\n5 11\n0 3\n16 1\n0 5\n1 3\n9 12\n6 0\n3 11\n", "1 0\n14 7\n5 11\n0 3\n16 1\n0 5\n1 6\n9 12\n6 0\n3 11\n", "1 0\n14 7\n5 11\n0 1\n16 1\n0 5\n1 6\n9 12\n6 0\n3 11\n", "1 0\n14 7\n5 11\n0 1\n16 1\n0 5\n1 6\n8 12\n6 0\n3 11\n", "1 0\n14 7\n5 0\n0 1\n16 1\n0 5\n1 6\n8 12\n6 0\n3 11\n", "1 0\n14 7\n5 0\n0 1\n16 1\n0 5\n1 3\n8 12\n6 0\n3 11\n", "1 1\n14 7\n5 0\n0 1\n16 1\n0 5\n1 3\n8 12\n6 0\n3 11\n", "1 1\n14 7\n5 0\n0 1\n16 1\n0 5\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 7\n5 0\n0 1\n16 1\n0 5\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 7\n2 0\n0 1\n16 1\n0 5\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 7\n2 -1\n0 1\n16 1\n0 5\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 7\n2 -1\n0 1\n16 1\n0 2\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 9\n2 -1\n0 1\n16 1\n0 2\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 9\n2 -1\n0 1\n16 1\n0 2\n1 3\n8 4\n6 1\n3 11\n", "1 1\n16 9\n2 -1\n0 2\n16 1\n0 2\n1 3\n8 4\n6 1\n3 11\n", "1 1\n16 9\n2 -1\n0 2\n16 1\n0 0\n1 3\n8 4\n6 1\n3 11\n", "1 1\n16 9\n2 -1\n0 2\n16 1\n0 0\n1 6\n8 4\n6 1\n3 11\n", "10 0\n10 6\n6 5\n1 2\n6 1\n7 10\n2 8\n9 7\n3 4\n3 8\n", "20 0\n10 6\n2 6\n19 4\n15 6\n20 13\n9 11\n8 1\n12 4\n7 8\n16 3\n18 17\n8 16\n12 5\n13 7\n16 4\n14 16\n8 9\n10 18\n9 17\n", "1 0\n10 6\n5 5\n1 3\n6 1\n7 10\n2 8\n9 7\n3 4\n3 8\n", "1 0\n10 9\n6 5\n1 3\n6 1\n7 10\n2 8\n9 7\n6 4\n3 8\n", "1 0\n10 6\n6 5\n1 3\n6 1\n7 10\n2 11\n12 7\n6 4\n3 8\n", "1 0\n10 6\n6 5\n1 3\n6 0\n7 7\n0 11\n9 7\n6 4\n3 8\n", "1 0\n10 5\n6 5\n1 3\n6 1\n7 12\n0 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 3\n6 1\n2 12\n0 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 3\n11 1\n7 12\n0 11\n14 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 2\n11 1\n7 12\n1 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 3\n11 1\n7 12\n1 11\n9 10\n6 0\n3 8\n", "1 0\n10 7\n6 5\n1 3\n11 1\n7 12\n1 11\n9 7\n6 0\n3 16\n", "1 0\n10 7\n6 5\n0 3\n4 1\n7 12\n1 11\n9 7\n6 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n11 1\n7 12\n1 11\n9 7\n4 0\n3 8\n", "1 0\n10 7\n6 5\n0 3\n11 1\n14 12\n1 5\n9 7\n4 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n11 0\n7 12\n1 2\n9 7\n4 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n15 1\n7 21\n1 3\n9 7\n4 0\n3 11\n", "1 0\n10 7\n5 5\n0 3\n15 1\n7 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 5\n0 3\n13 1\n7 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 7\n0 3\n15 1\n12 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n2 7\n6 7\n0 3\n15 1\n0 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 7\n0 3\n9 1\n0 12\n1 3\n9 12\n4 1\n3 11\n", "1 2\n14 7\n5 7\n0 3\n15 1\n0 12\n1 3\n9 12\n4 1\n3 11\n", "1 1\n14 7\n5 11\n0 3\n15 1\n0 12\n1 3\n9 12\n4 1\n3 11\n", "1 1\n14 7\n5 7\n0 3\n16 1\n0 17\n1 3\n9 12\n4 1\n3 11\n", "1 1\n14 7\n5 7\n0 3\n16 1\n0 12\n1 3\n4 12\n4 0\n3 11\n", "1 2\n14 7\n5 6\n0 3\n16 1\n0 12\n1 3\n9 12\n4 0\n3 11\n", "1 1\n14 7\n5 6\n0 3\n16 1\n0 12\n1 3\n9 12\n2 0\n3 11\n", "1 1\n14 7\n5 11\n0 3\n16 1\n0 12\n1 3\n9 12\n6 0\n3 20\n", "1 1\n14 7\n5 13\n0 3\n16 1\n0 5\n1 3\n9 12\n6 0\n3 11\n", "1 0\n14 7\n5 11\n0 6\n16 1\n0 5\n1 3\n9 12\n6 0\n3 11\n", "1 0\n2 7\n5 11\n0 3\n16 1\n0 5\n1 6\n9 12\n6 0\n3 11\n", "1 0\n14 7\n5 11\n0 1\n16 1\n0 5\n1 6\n9 12\n6 -1\n3 11\n", "1 0\n14 5\n5 11\n0 1\n16 1\n0 5\n1 6\n8 12\n6 0\n3 11\n", "1 0\n14 7\n5 0\n0 1\n16 1\n0 5\n1 6\n8 12\n6 0\n3 17\n", "1 0\n14 7\n5 0\n0 1\n16 1\n0 5\n1 3\n12 12\n6 0\n3 11\n", "1 0\n14 7\n5 0\n0 1\n16 1\n1 5\n1 3\n8 12\n6 0\n3 11\n", "1 1\n2 7\n5 0\n0 1\n16 1\n0 5\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 7\n5 0\n0 1\n16 1\n0 9\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 7\n2 0\n0 1\n16 1\n0 5\n1 3\n8 12\n11 1\n3 11\n", "1 1\n22 7\n2 -1\n0 1\n16 1\n0 5\n1 3\n8 12\n6 1\n3 11\n", "1 0\n16 7\n2 -1\n0 1\n16 1\n0 2\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 9\n2 -1\n0 1\n16 1\n0 2\n1 3\n8 12\n6 1\n4 11\n", "1 1\n16 9\n2 -1\n0 1\n16 1\n0 2\n1 2\n8 4\n6 1\n3 11\n", "1 1\n16 9\n2 -1\n-1 2\n16 1\n0 2\n1 3\n8 4\n6 1\n3 11\n", "1 1\n16 9\n2 -1\n0 2\n16 1\n0 0\n1 5\n8 4\n6 1\n3 11\n", "1 1\n13 9\n2 -1\n0 2\n16 1\n0 0\n1 6\n8 4\n6 1\n3 11\n", "20 2\n6 14\n13 1\n4 3\n13 5\n12 20\n19 12\n6 3\n12 15\n11 2\n11 17\n9 5\n19 7\n3 11\n17 5\n16 18\n16 7\n18 8\n19 11\n16 10\n", "1 0\n10 6\n5 5\n1 3\n6 1\n7 10\n2 8\n9 7\n3 4\n3 4\n", "1 0\n10 9\n6 5\n1 3\n6 1\n7 10\n2 8\n9 7\n3 4\n3 8\n", "1 0\n10 6\n6 5\n1 3\n6 1\n12 10\n2 11\n12 7\n6 4\n3 8\n", "1 0\n10 6\n11 5\n1 3\n6 0\n7 7\n0 11\n9 7\n6 4\n3 8\n", "1 0\n10 5\n6 5\n1 3\n6 1\n7 12\n0 13\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 4\n6 1\n2 12\n0 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 3\n11 1\n7 12\n0 11\n14 10\n6 1\n3 8\n", "1 0\n10 7\n8 5\n1 2\n11 1\n7 12\n1 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 3\n11 1\n7 12\n1 11\n9 10\n6 -1\n3 8\n", "1 0\n2 7\n6 5\n1 3\n11 1\n7 12\n1 11\n9 7\n6 0\n3 16\n", "1 0\n10 7\n6 5\n0 3\n4 1\n7 24\n1 11\n9 7\n6 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n11 1\n7 12\n1 11\n10 7\n4 0\n3 8\n", "1 0\n4 7\n6 5\n0 3\n11 1\n14 12\n1 5\n9 7\n4 0\n3 11\n", "1 0\n10 7\n6 5\n0 3\n16 0\n7 12\n1 2\n9 7\n4 0\n3 11\n", "1 0\n10 7\n12 5\n0 3\n15 1\n7 21\n1 3\n9 7\n4 0\n3 11\n", "1 0\n10 7\n5 5\n0 3\n15 1\n8 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 5\n0 3\n13 1\n7 12\n1 3\n9 5\n4 1\n3 11\n", "1 0\n14 7\n6 7\n0 3\n15 1\n12 12\n1 3\n9 7\n8 1\n3 11\n", "1 0\n2 7\n6 7\n0 3\n15 1\n1 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 7\n0 3\n9 1\n0 12\n1 5\n9 12\n4 1\n3 11\n", "1 2\n14 7\n5 7\n0 3\n15 1\n0 9\n1 3\n9 12\n4 1\n3 11\n", "1 1\n14 7\n5 11\n0 3\n25 1\n0 12\n1 3\n9 12\n4 1\n3 11\n", "1 1\n14 7\n5 7\n0 3\n16 1\n0 17\n1 3\n9 18\n4 1\n3 11\n", "1 1\n14 7\n5 7\n0 3\n6 1\n0 12\n1 3\n4 12\n4 0\n3 11\n", "1 2\n14 7\n5 6\n0 3\n16 1\n0 10\n1 3\n9 12\n4 0\n3 11\n", "1 1\n14 7\n5 6\n0 3\n16 1\n1 12\n1 3\n9 12\n2 0\n3 11\n", "1 1\n14 7\n5 14\n0 3\n16 1\n0 12\n1 3\n9 12\n6 0\n3 20\n", "1 1\n14 7\n5 13\n0 3\n16 1\n0 5\n1 5\n9 12\n6 0\n3 11\n", "1 0\n14 7\n9 11\n0 6\n16 1\n0 5\n1 3\n9 12\n6 0\n3 11\n", "1 0\n2 7\n5 11\n0 3\n16 1\n0 5\n1 6\n9 12\n6 0\n0 11\n", "1 0\n14 7\n5 11\n0 1\n16 1\n0 5\n1 6\n15 12\n6 -1\n3 11\n", "1 0\n14 7\n5 0\n0 1\n16 0\n0 5\n1 6\n8 12\n6 0\n3 17\n", "1 0\n14 7\n10 0\n0 1\n16 1\n0 5\n1 3\n12 12\n6 0\n3 11\n", "1 0\n14 7\n4 0\n0 1\n16 1\n1 5\n1 3\n8 12\n6 0\n3 11\n", "1 1\n2 7\n5 0\n0 1\n16 1\n1 5\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 7\n5 0\n0 1\n16 0\n0 9\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 7\n2 0\n0 1\n16 1\n0 5\n1 3\n8 12\n11 1\n3 15\n", "1 1\n10 7\n2 -1\n0 1\n16 1\n0 5\n1 3\n8 12\n6 1\n3 11\n", "1 0\n16 7\n2 0\n0 1\n16 1\n0 2\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 9\n2 -1\n0 0\n16 1\n0 2\n1 3\n8 12\n6 1\n4 11\n", "1 1\n16 9\n2 -1\n0 1\n16 1\n0 2\n1 2\n12 4\n6 1\n3 11\n", "1 1\n16 9\n2 -1\n-1 2\n16 1\n0 2\n1 3\n8 4\n6 1\n3 10\n", "1 1\n16 9\n2 -1\n0 2\n16 1\n0 0\n2 5\n8 4\n6 1\n3 11\n", "1 1\n13 9\n2 -1\n0 0\n16 1\n0 0\n1 6\n8 4\n6 1\n3 11\n", "1 0\n10 6\n5 5\n1 3\n6 1\n7 10\n2 8\n9 7\n0 4\n3 4\n", "1 0\n10 9\n6 5\n1 6\n6 1\n7 10\n2 8\n9 7\n3 4\n3 8\n", "1 0\n10 6\n6 5\n1 3\n6 1\n12 10\n2 11\n12 7\n5 4\n3 8\n", "1 0\n10 6\n11 5\n1 3\n5 0\n7 7\n0 11\n9 7\n6 4\n3 8\n", "1 0\n10 5\n6 5\n1 3\n6 1\n7 12\n0 13\n12 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 4\n6 1\n0 12\n0 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 3\n11 1\n7 12\n0 11\n14 8\n6 1\n3 8\n", "1 0\n10 7\n8 5\n1 2\n11 1\n7 12\n0 11\n9 7\n6 1\n3 8\n", "1 0\n10 7\n6 5\n1 2\n11 1\n7 12\n1 11\n9 10\n6 -1\n3 8\n", "1 0\n2 7\n6 2\n1 3\n11 1\n7 12\n1 11\n9 7\n6 0\n3 16\n", "1 0\n10 7\n6 5\n0 3\n4 1\n7 24\n1 11\n9 7\n1 0\n3 11\n", "1 0\n10 9\n6 5\n0 3\n11 1\n7 12\n1 11\n10 7\n4 0\n3 8\n", "1 0\n4 7\n6 5\n0 3\n11 1\n14 12\n1 5\n2 7\n4 0\n3 11\n", "1 0\n1 7\n6 5\n0 3\n16 0\n7 12\n1 2\n9 7\n4 0\n3 11\n", "1 1\n10 7\n12 5\n0 3\n15 1\n7 21\n1 3\n9 7\n4 0\n3 11\n", "1 0\n10 7\n5 5\n0 3\n15 2\n8 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 5\n0 3\n13 1\n9 12\n1 3\n9 5\n4 1\n3 11\n", "1 0\n14 7\n6 7\n0 3\n15 1\n12 12\n1 3\n9 7\n8 2\n3 11\n", "1 0\n2 7\n2 7\n0 3\n15 1\n1 12\n1 3\n9 7\n4 1\n3 11\n", "1 0\n14 7\n6 7\n1 3\n9 1\n0 12\n1 5\n9 12\n4 1\n3 11\n", "1 2\n14 7\n5 7\n0 3\n15 0\n0 9\n1 3\n9 12\n4 1\n3 11\n", "1 1\n14 7\n5 11\n0 3\n25 1\n0 12\n1 3\n9 23\n4 1\n3 11\n", "1 1\n14 7\n5 7\n0 3\n16 1\n0 17\n1 3\n9 18\n2 1\n3 11\n", "1 1\n14 7\n5 7\n0 3\n6 1\n0 12\n1 3\n4 12\n8 0\n3 11\n", "1 2\n14 7\n5 6\n0 3\n16 1\n1 10\n1 3\n9 12\n4 0\n3 11\n", "1 1\n14 7\n5 6\n0 3\n16 1\n1 12\n1 3\n9 12\n1 0\n3 11\n", "1 1\n14 7\n5 14\n0 3\n16 1\n0 12\n1 1\n9 12\n6 0\n3 20\n", "1 0\n14 7\n9 11\n0 6\n16 1\n0 5\n1 3\n9 12\n10 0\n3 11\n", "1 0\n2 7\n5 11\n0 3\n19 1\n0 5\n1 6\n9 12\n6 0\n0 11\n", "1 0\n14 7\n5 11\n0 1\n16 1\n0 0\n1 6\n15 12\n6 -1\n3 11\n", "1 0\n14 7\n5 0\n0 1\n16 1\n0 5\n1 6\n8 12\n6 0\n3 31\n", "1 0\n14 7\n10 0\n0 1\n16 1\n0 5\n1 1\n12 12\n6 0\n3 11\n", "1 0\n14 7\n4 0\n0 1\n16 1\n1 5\n0 3\n8 12\n6 0\n3 11\n", "1 1\n2 7\n5 0\n0 1\n16 1\n1 5\n1 3\n8 16\n6 1\n3 11\n", "1 1\n16 7\n5 0\n0 1\n16 -1\n0 9\n1 3\n8 12\n6 1\n3 11\n", "1 1\n16 7\n2 0\n0 1\n16 1\n0 6\n1 3\n8 12\n11 1\n3 15\n"], "output": ["122044\n", "100316\n", "62\n", "240\n", "1\n", "4\n", "400\n", "13\n", "5\n", "509\n", "218264\n", "110067\n", "5455\n", "218\n", "25\n", "133564\n", "85710\n", "12\n", "124816\n", "232104\n", "17864\n", "426\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "85710\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n"]}, "short_description": "1. One-sentence summary:\nThis solution counts the number of valid configurations on a tree under a global size/height constraint K by performing a bottom-up dynamic-programming merge of child subtrees.\n\n2. Core algorithmic approach:\nTree dynamic programming (tree DP) with post-order traversal, merging child-subtree DP arrays via constrained convolution.\n\n3. Reusable components:\n- Tree traversal ordering: BFS/DFS to compute a parent array and a linearized post-order list for bottom-up DP.\n- Subtree-DP merge routine: pairwise convolution of two DP arrays with custom combination rules and constraint checking (here \u201cif j+1+i \u2264 K\u201d).\n- Adjacency-list representation plus parent tracking to navigate and process a rooted tree without recursion."}
{"name": "1076_E. Vasya and a Tree", "description": "Vasya has a tree consisting of n vertices with root in vertex 1. At first all vertices has 0 written on it.\n\nLet d(i, j) be the distance between vertices i and j, i.e. number of edges in the shortest path from i to j. Also, let's denote k-subtree of vertex x \u2014 set of vertices y such that next two conditions are met: \n\n  * x is the ancestor of y (each vertex is the ancestor of itself); \n  * d(x, y) \u2264 k. \n\n\n\nVasya needs you to process m queries. The i-th query is a triple v_i, d_i and x_i. For each query Vasya adds value x_i to each vertex from d_i-subtree of v_i.\n\nReport to Vasya all values, written on vertices of the tree after processing all queries.\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 3 \u22c5 10^5) \u2014 number of vertices in the tree.\n\nEach of next n - 1 lines contains two integers x and y (1 \u2264 x, y \u2264 n) \u2014 edge between vertices x and y. It is guarantied that given graph is a tree.\n\nNext line contains single integer m (1 \u2264 m \u2264 3 \u22c5 10^5) \u2014 number of queries.\n\nEach of next m lines contains three integers v_i, d_i, x_i (1 \u2264 v_i \u2264 n, 0 \u2264 d_i \u2264 10^9, 1 \u2264 x_i \u2264 10^9) \u2014 description of the i-th query.\n\nOutput\n\nPrint n integers. The i-th integers is the value, written in the i-th vertex after processing all queries.\n\nExamples\n\nInput\n\n\n5\n1 2\n1 3\n2 4\n2 5\n3\n1 1 1\n2 0 10\n4 10 100\n\n\nOutput\n\n\n1 11 1 100 0 \n\n\nInput\n\n\n5\n2 3\n2 1\n5 4\n3 4\n5\n2 0 4\n3 10 1\n1 2 3\n2 3 10\n1 1 7\n\n\nOutput\n\n\n10 24 14 11 11 \n\nNote\n\nIn the first exapmle initial values in vertices are 0, 0, 0, 0, 0. After the first query values will be equal to 1, 1, 1, 0, 0. After the second query values will be equal to 1, 11, 1, 0, 0. After the third query values will be equal to 1, 11, 1, 100, 0.", "solution": "import math\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\nfrom types import GeneratorType\nfrom collections import defaultdict\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(10**5)\n\n\ndef bootstrap(f, stack=[]):\n    def wrappedfunc(*args, **kwargs):\n        if stack:\n            return f(*args, **kwargs)\n        else:\n            to = f(*args, **kwargs)\n            while True:\n                if type(to) is GeneratorType:\n                    stack.append(to)\n                    to = next(to)\n                else:\n                    stack.pop()\n                    if not stack:\n                        break\n                    to = stack[-1].send(to)\n            return to\n    return wrappedfunc\n\n@bootstrap\ndef dfs(u,i,p):\n    global d\n    global s\n    s+=-d[i-1]\n\n    for j in val[u]:\n        d[i+j[0]]+=j[1]\n        s+=j[1]\n\n    ans[u]=s\n    for j in adj[u]:\n        if j!=p:\n            yield dfs(j,i+1,u)\n    for j in val[u]:\n        d[i + j[0]] += -j[1]\n        s += -j[1]\n    s+=d[i-1]\n\n    yield\n\n\n\n\nn=int(input())\nadj=[[] for i in range(n+1)]\nfor j in range(n-1):\n    u,v=map(int,input().split())\n    adj[u].append(v)\n    adj[v].append(u)\n\n\nval=[[] for i in range(n+1)]\nm=int(input())\nfor j in range(m):\n    v,d,va=map(int,input().split())\n    val[v].append([d,va])\n\n\ns=0\nd=defaultdict(lambda:0)\nans=[0 for i in range(n+1)]\ndfs(1,0,0)\nprint(*ans[1:])\n", "difficulty": 11, "public_tests": {"input": ["5\n1 2\n1 3\n2 4\n2 5\n3\n1 1 1\n2 0 10\n4 10 100\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 0 4\n3 10 1\n1 2 3\n2 3 10\n1 1 7\n"], "output": ["1 11 1 100 0 \n", "10 24 14 11 11 \n"]}, "private_tests": {"input": ["1\n3\n1 1000000000 1000000000\n1 1000000000 1000000000\n1 1000000000 1000000000\n", "5\n1 2\n1 3\n2 4\n2 5\n3\n1 1000000000 1\n2 1000000000 10\n4 1000000000 100\n", "2\n1 2\n1\n1 500000000 1\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 10000000 4\n3 10 1\n1 2 3\n2 3 10\n1 1 7\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 1000000000 4\n3 10 1\n1 2 3\n2 3 10\n1 1 7\n", "19\n2 1\n3 2\n4 1\n5 1\n6 5\n7 4\n8 1\n9 2\n10 9\n11 9\n12 4\n13 10\n14 2\n15 9\n16 6\n17 13\n18 16\n19 8\n23\n16 259531913 13\n9 484727538 7\n2 174952922 9\n16 555559835 9\n4 835692337 2\n5 656716001 1\n11 981357393 3\n1 281380171 17\n6 150928639 18\n19 431687604 19\n9 609377645 1\n7 847715542 3\n17 595731628 2\n7 517431564 16\n18 355991047 11\n1 675637133 3\n15 792805835 18\n7 28098468 18\n15 67800207 13\n8 761233731 6\n9 220349684 10\n18 17583445 5\n18 666731721 9\n", "2\n1 2\n1\n1 1000000000 1\n", "5\n1 2\n1 3\n2 4\n2 5\n3\n1 100000000 1\n2 100000000 10\n4 100000000 100\n", "7\n6 7\n7 5\n3 2\n7 2\n2 1\n1 4\n3\n5 3 1\n7 6 4\n4 3 2\n", "11\n4 9\n3 8\n10 7\n10 2\n8 10\n6 4\n5 1\n8 6\n11 1\n1 4\n5\n1 7 73\n11 9 76\n1 8 60\n2 8 43\n4 10 97\n"], "output": ["3000000000 \n", "1 11 1 111 11 \n", "1 1 \n", "10 24 18 15 15 \n", "10 24 18 15 15 \n", "20 29 29 22 21 39 59 26 47 47 50 22 47 29 78 61 49 86 45 \n", "1 1 \n", "1 11 1 111 11 \n", "0 0 0 2 5 4 4 \n", "133 273 230 230 133 230 230 230 230 230 209 "]}, "generated_tests": {"input": ["1\n3\n1 1000000000 1000000000\n1 1000010000 1000000000\n1 1000000000 1000000000\n", "2\n1 2\n1\n1 807983580 1\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 10000000 4\n3 10 1\n1 2 3\n2 3 7\n1 1 7\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 1000010000 4\n3 10 1\n1 2 3\n2 3 10\n1 1 7\n", "5\n1 2\n1 3\n2 4\n2 5\n3\n1 100000000 1\n2 100000000 14\n4 100000000 100\n", "7\n6 7\n7 5\n3 2\n7 2\n2 1\n1 4\n3\n5 3 2\n7 6 4\n4 3 2\n", "5\n1 2\n2 3\n2 4\n2 5\n3\n1 1 1\n2 0 10\n4 10 100\n", "1\n3\n1 1000000000 1000000001\n1 1000010000 1000000000\n1 1000000000 1000000000\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 10000000 4\n3 10 1\n1 2 3\n2 3 7\n1 1 0\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 1000010000 0\n3 10 1\n1 2 3\n2 3 10\n1 1 7\n", "2\n1 2\n1\n2 1000000101 1\n", "1\n3\n1 1000000100 1000000001\n1 1000010000 1000000000\n1 1000000000 1000100000\n", "1\n3\n1 1000000000 1000000000\n1 1000000000 1000000000\n1 1000000000 1000000010\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 1000000000 4\n3 10 1\n1 2 3\n2 3 10\n1 0 7\n", "19\n2 1\n3 2\n4 1\n5 1\n6 5\n7 4\n8 1\n9 2\n10 9\n11 9\n12 4\n13 10\n14 2\n15 9\n16 6\n17 13\n18 16\n19 8\n23\n16 259531913 13\n9 484727538 7\n2 174952922 9\n16 555559835 9\n4 835692337 2\n5 656716001 1\n11 981357393 3\n1 281380171 17\n6 150928639 18\n19 431687604 19\n9 609377645 1\n7 847715542 3\n10 595731628 2\n7 517431564 16\n18 355991047 11\n1 675637133 3\n15 792805835 18\n7 28098468 18\n15 67800207 13\n8 761233731 6\n9 220349684 10\n18 17583445 5\n18 666731721 9\n", "5\n1 2\n1 3\n1 4\n2 5\n3\n1 100000000 1\n2 100000000 10\n4 100000000 100\n", "7\n6 7\n7 5\n3 2\n7 2\n2 1\n1 4\n3\n5 3 1\n7 6 4\n4 2 2\n", "11\n4 9\n3 8\n10 7\n10 2\n8 10\n6 4\n5 1\n8 6\n11 1\n1 4\n5\n1 13 73\n11 9 76\n1 8 60\n2 8 43\n4 10 97\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 10000000 4\n3 10 1\n1 2 3\n2 3 7\n1 1 5\n", "5\n1 2\n1 3\n2 4\n3 5\n3\n1 100000000 1\n2 100000000 14\n4 100000000 100\n", "7\n6 7\n7 5\n3 2\n7 2\n2 1\n1 4\n3\n5 3 2\n7 6 2\n4 3 2\n", "1\n3\n1 1000000100 1000000001\n1 1000010000 1000010000\n1 1000000000 1000000000\n", "1\n3\n1 1000000100 1000000011\n1 1000010000 1000000000\n1 1000000000 1000100000\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 1000000000 4\n3 10 2\n1 2 3\n2 3 10\n1 0 7\n", "7\n6 7\n7 5\n3 2\n7 2\n2 1\n1 4\n3\n5 3 1\n7 6 4\n4 2 1\n", "11\n4 9\n3 8\n10 7\n1 2\n8 10\n6 4\n5 1\n8 6\n11 1\n1 4\n5\n1 13 73\n11 9 76\n1 8 60\n2 8 43\n4 10 97\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 10000000 4\n3 10 1\n1 2 3\n2 3 1\n1 1 5\n", "5\n1 2\n1 3\n2 4\n3 5\n3\n1 100000000 1\n1 100000000 14\n4 100000000 100\n", "7\n6 7\n7 5\n3 2\n7 2\n2 1\n1 4\n3\n2 3 2\n7 6 2\n4 3 2\n", "1\n3\n1 1000000100 1000000001\n1 1000010000 0000010000\n1 1000000000 1000000000\n", "1\n3\n1 1000000100 1000010011\n1 1000010000 1000000000\n1 1000000000 1000100000\n", "1\n3\n1 1000000001 1000000000\n1 1000010000 1000000000\n1 1010000000 1000100000\n", "5\n2 3\n2 1\n5 4\n3 4\n5\n2 10000000 4\n3 10 1\n1 2 3\n2 3 2\n1 1 5\n", "5\n1 2\n1 3\n2 4\n3 5\n3\n1 100000000 1\n1 100000000 14\n5 100000000 100\n", "1\n3\n1 1000000100 1000010011\n1 1000010000 1010000000\n1 1000000000 1000100000\n", "1\n3\n1 1100000000 1000000000\n1 1010000000 1000000000\n1 1000000000 1000100010\n", "2\n1 2\n1\n2 41018848 0\n", "2\n1 2\n1\n1 1000000100 1\n", "2\n1 2\n1\n1 1000000101 1\n", "1\n3\n1 1000000100 1000000001\n1 1000010000 1000000000\n1 1000000000 1000000000\n", "2\n1 2\n1\n2 500000000 1\n", "2\n1 2\n1\n1 1010000000 1\n", "1\n3\n1 1000000001 1000000000\n1 1000010000 1000000000\n1 1000000000 1000000000\n", "5\n1 2\n2 3\n2 4\n3 5\n3\n1 1 1\n2 0 10\n4 10 100\n", "1\n3\n1 1100000000 1000000000\n1 1000000000 1000000000\n1 1000000000 1000000010\n", "2\n1 2\n1\n2 53658551 1\n", "1\n3\n1 1000000001 1000000000\n1 1000010000 1000000000\n1 1010000000 1000000000\n", "1\n3\n1 1100000000 1000000000\n1 1010000000 1000000000\n1 1000000000 1000000010\n", "2\n1 2\n1\n2 41018848 1\n", "11\n4 9\n3 8\n10 7\n1 2\n8 10\n6 4\n5 1\n8 6\n11 1\n1 4\n5\n1 17 73\n11 9 76\n1 8 60\n2 8 43\n4 10 97\n", "7\n6 7\n7 5\n3 4\n7 2\n2 1\n1 4\n3\n2 3 2\n7 6 2\n4 3 2\n", "1\n3\n1 0000000100 1000000001\n1 1000010000 0000010000\n1 1000000000 1000000000\n", "11\n4 9\n3 8\n10 7\n1 2\n8 10\n6 4\n5 1\n8 6\n11 1\n1 4\n5\n1 21 73\n11 9 76\n1 8 60\n2 8 43\n4 10 97\n"], "output": ["3000000000\n", "1 1\n", "10 21 15 12 12\n", "10 24 18 15 15\n", "1 15 1 115 15\n", "0 0 0 2 6 4 4\n", "1 11 0 100 0\n", "3000000001\n", "3 14 15 12 12\n", "10 20 14 11 11\n", "0 1\n", "3000100001\n", "3000000010\n", "10 17 18 15 15\n", "20 29 29 22 21 39 59 26 47 49 50 22 49 29 78 61 49 86 45\n", "1 11 1 101 11\n", "0 0 0 2 5 4 4\n", "133 273 230 230 133 230 230 230 230 230 209\n", "8 19 15 12 12\n", "1 15 1 115 1\n", "0 0 0 2 4 2 2\n", "3000010001\n", "3000100011\n", "10 17 19 16 16\n", "0 0 0 1 5 4 4\n", "133 176 230 230 133 230 230 230 230 230 209\n", "8 13 9 6 6\n", "15 15 15 115 15\n", "0 2 2 2 4 4 4\n", "2000010001\n", "3000110011\n", "3000100000\n", "8 14 10 7 7\n", "15 15 15 15 115\n", "3010110011\n", "3000100010\n", "0 0\n", "1 1\n", "1 1\n", "3000000001\n", "0 1\n", "1 1\n", "3000000000\n", "1 11 0 100 0\n", "3000000010\n", "0 1\n", "3000000000\n", "3000000010\n", "0 1\n", "133 176 230 230 133 230 230 230 230 230 209\n", "0 2 2 2 4 4 4\n", "2000010001\n", "133 176 230 230 133 230 230 230 230 230 209\n"]}, "short_description": "1. One-sentence summary:\nCompute, for each node in a rooted tree, the sum of values \u201coriginating\u201d at various ancestor nodes where each value applies to descendants within a given depth\u2010distance.\n\n2. Core algorithmic approach:\nA single DFS traversal on the tree combined with a depth-indexed difference array (implemented with a hash map) to apply and revoke range updates in O(1) per event, yielding an overall O(n + m) time complexity.\n\n3. Reusable components:\n- DFS with explicit \u201capply-before, undo-after\u201d logic for maintaining state along the recursion (backtracking pattern).\n- Depth-indexed difference array: range update via adding at entry depth and subtracting at exit depth + 1, stored in a map/array.\n- Recursive-to-iterative decorator (`bootstrap`) that turns a generator-based DFS into a safe recursive routine without blowing the call stack."}
{"name": "538_E. Demiurges Play Again", "description": "Demiurges Shambambukli and Mazukta love to watch the games of ordinary people. Today, they noticed two men who play the following game.\n\nThere is a rooted tree on n nodes, m of which are leaves (a leaf is a nodes that does not have any children), edges of the tree are directed from parent to children. In the leaves of the tree integers from 1 to m are placed in such a way that each number appears exactly in one leaf.\n\nInitially, the root of the tree contains a piece. Two players move this piece in turns, during a move a player moves the piece from its current nodes to one of its children; if the player can not make a move, the game ends immediately. The result of the game is the number placed in the leaf where a piece has completed its movement. The player who makes the first move tries to maximize the result of the game and the second player, on the contrary, tries to minimize the result. We can assume that both players move optimally well.\n\nDemiurges are omnipotent, so before the game they can arbitrarily rearrange the numbers placed in the leaves. Shambambukli wants to rearrange numbers so that the result of the game when both players play optimally well is as large as possible, and Mazukta wants the result to be as small as possible. What will be the outcome of the game, if the numbers are rearranged by Shambambukli, and what will it be if the numbers are rearranged by Mazukta? Of course, the Demiurges choose the best possible option of arranging numbers.\n\nInput\n\nThe first line contains a single integer n \u2014 the number of nodes in the tree (1 \u2264 n \u2264 2\u00b7105).\n\nEach of the next n - 1 lines contains two integers ui and vi (1 \u2264 ui, vi \u2264 n) \u2014 the ends of the edge of the tree; the edge leads from node ui to node vi. It is guaranteed that the described graph is a rooted tree, and the root is the node 1.\n\nOutput\n\nPrint two space-separated integers \u2014 the maximum possible and the minimum possible result of the game.\n\nExamples\n\nInput\n\n5\n1 2\n1 3\n2 4\n2 5\n\n\nOutput\n\n3 2\n\n\nInput\n\n6\n1 2\n1 3\n3 4\n1 5\n5 6\n\n\nOutput\n\n3 3\n\nNote\n\nConsider the first sample. The tree contains three leaves: 3, 4 and 5. If we put the maximum number 3 at node 3, then the first player moves there and the result will be 3. On the other hand, it is easy to see that for any rearrangement the first player can guarantee the result of at least 2.\n\nIn the second sample no matter what the arragment is the first player can go along the path that ends with a leaf with number 3.", "solution": "import sys\n\ninput = sys.stdin.readline\n\ndef solve():\n\tn = int(input())\n\tg = [[] for i in range(n+1)]\n\tfor i in range(1, n):\n\t\tu, v = map(int, input().split())\n\t\tg[u].append(v)\n\t\tg[v].append(u)\n\tq = [1]\n\td = [None]*(n+1)\n\td[1] = 0\n\ti = 0\n\twhile i < len(q):\n\t\tx = q[i]\n\t\t#print(x)\n\t\ti += 1\n\t\tfor v in g[x]:\n\t\t\tif d[v] is None:\n\t\t\t\tq.append(v)\n\t\t\t\td[v] = d[x] + 1\n\t\t\t\tg[v].remove(x)\n\tm = [0]*(n+1)\n\tM = [0]*(n+1)\n\tcnt = 0\n\tfor i in range(len(q)-1,-1,-1):\n\t\tx = q[i]\n\t\tif len(g[x]) == 0:\n\t\t\tm[x] = 1\n\t\t\tM[x] = 1\n\t\t\tcnt += 1\n\t\telif d[x] % 2 == 0:\n\t\t\tc = 0\n\t\t\tC = int(1e9)\n\t\t\tfor v in g[x]:\n\t\t\t\tc += m[v]\n\t\t\tfor v in g[x]:\n\t\t\t\tC = min(C, M[v])\n\t\t\tm[x] = c\n\t\t\tM[x] = C\n\t\telse:\n\t\t\tc = int(1e9)\n\t\t\tC = 0\n\t\t\tfor v in g[x]:\n\t\t\t\tc = min(c, m[v])\n\t\t\tfor v in g[x]:\n\t\t\t\tC += M[v]\n\t\t\tm[x] = c\n\t\t\tM[x] = C\n\tprint(cnt + 1 - M[x], m[1])\n\nsolve()\n", "difficulty": 11, "public_tests": {"input": ["5\n1 2\n1 3\n2 4\n2 5\n", "6\n1 2\n1 3\n3 4\n1 5\n5 6\n"], "output": ["3 2", "3 3"]}, "private_tests": {"input": ["3\n1 2\n1 3\n", "10\n1 2\n1 3\n3 4\n3 5\n4 6\n1 7\n3 8\n2 9\n6 10\n", "2\n1 2\n", "1\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "22\n1 2\n2 3\n3 4\n1 5\n1 6\n1 7\n7 8\n8 9\n9 10\n10 11\n1 12\n12 13\n12 14\n14 15\n1 16\n16 17\n1 18\n18 19\n1 20\n20 21\n1 22\n"], "output": ["2 2", "5 3", "1 1", "1 1", "1 1", "10 9"]}, "generated_tests": {"input": ["10\n1 2\n1 3\n3 4\n4 5\n4 6\n1 7\n3 8\n2 9\n6 10\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n1 7\n3 8\n2 9\n6 10\n", "10\n1 2\n1 3\n3 4\n4 5\n4 6\n1 7\n3 8\n4 9\n6 10\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n1 7\n3 8\n1 9\n6 10\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "6\n1 2\n1 3\n6 4\n1 5\n5 6\n", "10\n1 2\n1 3\n3 4\n3 5\n4 6\n1 7\n5 8\n2 9\n6 10\n", "10\n1 2\n1 3\n3 4\n2 5\n4 6\n1 7\n4 8\n2 9\n6 10\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n1 7\n3 8\n2 9\n4 10\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n22 24\n24 25\n25 26\n26 27\n15 28\n28 29\n29 30\n30 31\n31 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "10\n1 2\n1 3\n3 4\n3 5\n4 6\n2 7\n5 8\n2 9\n6 10\n", "10\n1 2\n1 3\n3 4\n2 5\n4 6\n1 7\n5 8\n1 9\n6 10\n", "22\n1 2\n2 3\n6 4\n1 5\n1 6\n1 7\n7 8\n8 9\n9 10\n10 11\n1 12\n12 13\n12 14\n14 15\n1 16\n16 17\n1 18\n18 19\n1 20\n20 21\n1 22\n", "22\n1 2\n2 3\n6 4\n1 5\n1 6\n2 7\n7 8\n8 9\n9 10\n10 11\n1 12\n12 13\n12 14\n14 15\n1 16\n16 17\n1 18\n18 19\n1 20\n20 21\n1 22\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n2 7\n3 8\n2 9\n6 10\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n1 7\n3 8\n1 9\n4 10\n", "22\n1 2\n2 3\n6 4\n1 5\n1 6\n2 7\n7 8\n8 9\n6 10\n10 11\n1 12\n12 13\n12 14\n14 15\n1 16\n16 17\n1 18\n18 19\n1 20\n20 21\n1 22\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n14 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n22 24\n24 25\n25 26\n26 27\n15 28\n28 29\n29 30\n30 31\n46 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n3 48\n48 49\n49 50\n", "10\n1 2\n1 3\n3 4\n3 5\n4 6\n1 7\n3 8\n1 9\n4 10\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n22 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "10\n1 2\n1 3\n3 4\n2 5\n4 6\n1 7\n5 8\n2 9\n6 10\n", "10\n1 2\n1 3\n2 4\n2 5\n4 6\n1 7\n4 8\n2 9\n6 10\n", "3\n1 2\n2 3\n", "10\n1 2\n1 3\n3 4\n8 5\n4 6\n1 7\n3 8\n4 9\n6 10\n", "10\n1 2\n1 3\n2 4\n3 5\n4 6\n1 7\n4 8\n2 9\n6 10\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n1 7\n3 8\n2 9\n8 10\n", "10\n1 2\n2 3\n3 4\n3 5\n7 6\n1 7\n3 8\n2 9\n4 10\n", "10\n1 2\n1 3\n2 4\n3 5\n4 6\n1 7\n1 8\n2 9\n6 10\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n17 20\n20 21\n21 22\n22 23\n22 24\n24 25\n25 26\n26 27\n15 28\n28 29\n29 30\n30 31\n31 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "10\n1 2\n1 3\n3 4\n3 5\n4 6\n2 7\n6 8\n2 9\n6 10\n", "10\n1 2\n1 3\n3 4\n4 5\n4 6\n1 7\n2 8\n2 9\n6 10\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n6 28\n28 29\n29 30\n30 31\n31 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n1 7\n3 8\n2 9\n3 10\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n22 24\n24 25\n25 26\n26 27\n15 28\n28 29\n29 30\n30 31\n46 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "10\n1 2\n1 3\n3 4\n2 5\n3 6\n1 7\n5 8\n1 9\n6 10\n", "10\n1 2\n1 3\n1 4\n3 5\n4 6\n1 7\n1 8\n2 9\n6 10\n", "10\n1 2\n2 3\n3 4\n4 5\n4 6\n1 7\n2 8\n2 9\n6 10\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n1 7\n3 8\n2 9\n7 10\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n21 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "10\n1 2\n1 3\n2 4\n2 5\n4 6\n1 7\n3 8\n2 9\n6 10\n", "10\n1 2\n2 3\n3 4\n3 5\n7 6\n1 7\n3 8\n2 9\n5 10\n", "10\n1 2\n1 3\n3 4\n6 5\n4 6\n1 7\n2 8\n2 9\n6 10\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n1 7\n2 8\n2 9\n3 10\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n22 24\n24 25\n25 26\n26 27\n15 28\n28 29\n29 30\n30 31\n46 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n3 48\n48 49\n49 50\n", "50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n3 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n21 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "10\n1 2\n2 3\n3 4\n3 5\n5 6\n1 7\n3 8\n2 9\n5 10\n", "10\n1 2\n1 3\n2 4\n3 5\n4 6\n1 7\n4 8\n2 9\n3 10\n", "10\n1 2\n2 3\n3 4\n6 5\n4 6\n1 7\n3 8\n2 9\n8 10\n", "10\n1 2\n2 3\n2 4\n3 5\n7 6\n1 7\n3 8\n2 9\n4 10\n", "10\n1 2\n1 3\n2 4\n3 5\n4 6\n1 7\n1 8\n2 9\n1 10\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n2 7\n6 8\n2 9\n6 10\n", "22\n1 2\n2 3\n6 4\n1 5\n2 6\n1 7\n7 8\n8 9\n9 10\n10 11\n1 12\n12 13\n12 14\n14 15\n1 16\n16 17\n1 18\n18 19\n1 20\n20 21\n1 22\n", "10\n1 2\n1 3\n3 4\n2 5\n3 6\n1 7\n5 8\n1 9\n9 10\n", "10\n1 2\n1 3\n1 4\n3 5\n5 6\n1 7\n1 8\n2 9\n6 10\n", "10\n1 2\n2 3\n3 4\n4 5\n7 6\n1 7\n2 8\n2 9\n6 10\n", "50\n1 2\n2 3\n1 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n21 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n22 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "10\n1 2\n2 3\n3 4\n3 5\n4 6\n1 7\n2 8\n2 9\n2 10\n", "10\n1 2\n1 3\n2 4\n3 5\n4 6\n1 7\n5 8\n2 9\n3 10\n"], "output": ["5 3\n", "5 2\n", "6 3\n", "5 5\n", "1 1\n", "3 3\n", "4 3\n", "5 4\n", "6 2\n", "4 2\n", "3 2\n", "4 4\n", "10 9\n", "10 8\n", "3 1\n", "6 5\n", "11 8\n", "7 2\n", "7 4\n", "1 1\n", "4 3\n", "6 3\n", "1 1\n", "5 3\n", "5 3\n", "5 2\n", "5 2\n", "5 4\n", "5 3\n", "4 2\n", "5 4\n", "1 1\n", "6 2\n", "5 2\n", "5 4\n", "5 5\n", "5 2\n", "5 2\n", "3 2\n", "5 3\n", "5 2\n", "5 3\n", "6 2\n", "6 3\n", "4 3\n", "6 2\n", "6 3\n", "4 2\n", "5 2\n", "6 5\n", "3 1\n", "10 8\n", "5 4\n", "5 5\n", "4 2\n", "4 3\n", "6 2\n", "5 3\n"]}, "short_description": "1. One-sentence summary:  \nCompute two complementary aggregate values over a rooted tree by first determining node depths via breadth-first search and then performing a bottom-up dynamic-programming pass that alternates between sum and min operations based on depth parity.\n\n2. Core algorithmic approach:  \n- Breadth-First Search (BFS) to establish a root-based ordering and node depths.  \n- Tree DP (post-order traversal) with alternating \u201cmin\u201d and \u201csum\u201d operations depending on whether the depth is even or odd.\n\n3. Reusable components:  \n- BFS order + depth assignment: using a queue to produce a parent-aware list of nodes in topological (root-to-leaf) order.  \n- Tree pruning via parent removal: in-place removal of the parent from each child\u2019s adjacency list to simplify child-only iteration.  \n- Bottom-up DP on trees: processing nodes in reverse BFS order to combine children\u2019s DP values, parameterized by depth parity to switch between min and sum aggregates."}
{"name": "1332_F. Independent Set", "description": "Eric is the teacher of graph theory class. Today, Eric teaches independent set and edge-induced subgraph.\n\nGiven a graph G=(V,E), an independent set is a subset of vertices V' \u2282 V such that for every pair u,v \u2208 V', (u,v) not \u2208 E (i.e. no edge in E connects two vertices from V').\n\nAn edge-induced subgraph consists of a subset of edges E' \u2282 E and all the vertices in the original graph that are incident on at least one edge in the subgraph.\n\nGiven E' \u2282 E, denote G[E'] the edge-induced subgraph such that E' is the edge set of the subgraph. Here is an illustration of those definitions:\n\n<image>\n\nIn order to help his students get familiar with those definitions, he leaves the following problem as an exercise:\n\nGiven a tree G=(V,E), calculate the sum of w(H) over all except null edge-induced subgraph H of G, where w(H) is the number of independent sets in H. Formally, calculate \u2211 _{\u2205 not= E' \u2282 E} w(G[E']).\n\nShow Eric that you are smarter than his students by providing the correct answer as quickly as possible. Note that the answer might be large, you should output the answer modulo 998,244,353.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 3 \u22c5 10^5), representing the number of vertices of the graph G.\n\nEach of the following n-1 lines contains two integers u and v (1 \u2264 u,v \u2264 n, u not= v), describing edges of the given tree.\n\nIt is guaranteed that the given edges form a tree.\n\nOutput\n\nOutput one integer, representing the desired value modulo 998,244,353.\n\nExamples\n\nInput\n\n\n2\n2 1\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n3\n1 2\n3 2\n\n\nOutput\n\n\n11\n\nNote\n\nFor the second example, all independent sets are listed below.\n\n<image>", "solution": "import sys\nreadline = sys.stdin.readline\n\ndef parorder(Edge, p):\n    N = len(Edge)\n    par = [0]*N\n    par[p] = -1\n    stack = [p]\n    order = []\n    visited = set([p])\n    ast = stack.append\n    apo = order.append\n    while stack:\n        vn = stack.pop()\n        apo(vn)\n        for vf in Edge[vn]:\n            if vf in visited:\n                continue\n            visited.add(vf)\n            par[vf] = vn\n            ast(vf)\n    return par, order\n\ndef getcld(p):\n    res = [[] for _ in range(len(p))]\n    for i, v in enumerate(p[1:], 1):\n        res[v].append(i)\n    return res\n\n\nN = int(readline())\nMOD = 998244353\nEdge = [[] for _ in range(N)]\nfor _ in range(N-1):\n    a, b = map(int, readline().split())\n    a -= 1\n    b -= 1\n    Edge[a].append(b)\n    Edge[b].append(a)\n\nP, L = parorder(Edge, 0)\nC = getcld(P)\n\ndp = [[1, 1, 0, 0, 1] for _ in range(N)]\nfor p in L[::-1]:\n    if not C[p]:\n        continue\n    res = 1\n    res2 = 1\n    res3 = 1\n    for ci in C[p]:\n        res = (res*(dp[ci][2] + dp[ci][3] + dp[ci][4])) % MOD\n        res2 = (res2*(dp[ci][1] + dp[ci][2] + 2*dp[ci][3] + dp[ci][4])) % MOD\n        res3 = (res3*(sum(dp[ci]) + dp[ci][2] + dp[ci][3])) % MOD\n    dp[p][0] = res\n    dp[p][1] = res\n    dp[p][2] = (res2 - res)%MOD\n    dp[p][3] = (res3 - res)%MOD\n    dp[p][4] = res\nprint((dp[0][2] + dp[0][3] + dp[0][4] - 1) %MOD)", "difficulty": 12, "public_tests": {"input": ["2\n2 1\n", "3\n1 2\n3 2\n"], "output": ["3\n", "11\n"]}, "private_tests": {"input": ["10\n2 8\n5 10\n3 4\n1 6\n3 9\n1 7\n4 8\n10 8\n1 8\n", "12\n8 12\n2 4\n10 11\n6 9\n1 3\n7 12\n11 12\n8 4\n7 9\n5 3\n5 6\n", "15\n1 8\n11 4\n1 12\n1 14\n12 2\n4 13\n4 10\n4 1\n1 9\n15 1\n1 7\n1 5\n4 6\n4 3\n", "4\n4 3\n4 1\n4 2\n", "4\n1 2\n2 3\n3 4\n", "9\n8 1\n1 4\n1 5\n6 1\n2 1\n3 1\n9 1\n7 1\n", "11\n1 2\n7 3\n1 6\n11 3\n8 1\n9 1\n5 1\n3 4\n1 3\n3 10\n", "8\n8 6\n7 4\n8 5\n2 7\n3 2\n5 2\n1 2\n", "10\n4 3\n2 6\n10 1\n5 7\n5 8\n10 6\n5 9\n9 3\n2 9\n", "17\n17 1\n7 1\n16 1\n5 1\n9 1\n7 4\n14 1\n6 1\n11 1\n2 1\n7 12\n10 1\n3 1\n1 13\n15 1\n1 8\n", "11\n1 3\n1 8\n1 10\n9 2\n1 11\n1 4\n2 6\n5 1\n7 1\n1 2\n", "13\n3 6\n1 5\n3 2\n1 11\n1 7\n1 8\n1 9\n1 12\n9 4\n3 1\n13 1\n10 1\n", "11\n1 9\n2 3\n8 7\n2 11\n2 6\n1 5\n2 4\n7 10\n9 7\n3 10\n", "7\n5 7\n2 5\n2 1\n1 6\n3 6\n4 1\n", "16\n4 10\n13 3\n14 3\n5 11\n6 16\n1 4\n8 10\n16 7\n8 9\n3 11\n9 2\n15 9\n15 12\n12 7\n13 7\n", "11\n1 6\n7 10\n7 2\n1 5\n9 8\n3 7\n1 7\n8 1\n1 4\n11 8\n", "10\n1 10\n7 1\n6 2\n1 3\n8 4\n1 9\n1 4\n1 6\n5 1\n", "9\n3 6\n5 2\n5 8\n9 5\n1 3\n4 9\n7 4\n2 3\n", "9\n3 1\n2 7\n9 2\n2 1\n6 9\n8 9\n9 5\n2 4\n", "14\n9 2\n12 14\n3 14\n9 3\n5 14\n5 13\n7 10\n8 11\n13 7\n12 6\n8 6\n4 8\n1 4\n", "12\n12 6\n6 10\n2 12\n7 6\n11 5\n5 6\n11 8\n3 11\n4 7\n3 1\n7 9\n", "6\n1 5\n3 4\n6 1\n3 2\n3 1\n", "50\n21 10\n30 22\n3 37\n37 32\n4 27\n18 7\n2 30\n29 19\n6 37\n12 39\n47 25\n41 49\n45 9\n25 48\n16 14\n9 7\n33 28\n3 31\n34 16\n35 37\n27 40\n45 16\n29 44\n16 15\n26 15\n1 12\n2 13\n15 21\n43 14\n9 33\n44 15\n46 1\n38 5\n15 5\n1 32\n42 35\n20 27\n23 8\n1 16\n15 17\n36 50\n13 8\n49 45\n11 2\n24 4\n36 15\n15 30\n16 4\n25 37\n", "12\n1 9\n11 1\n1 7\n8 1\n2 1\n5 12\n1 6\n1 12\n3 12\n4 12\n12 10\n", "5\n4 1\n4 5\n1 2\n1 3\n", "20\n10 20\n11 8\n1 11\n10 7\n6 14\n17 15\n17 13\n10 1\n5 1\n19 13\n19 3\n17 1\n17 12\n16 18\n6 11\n18 8\n9 6\n4 13\n2 1\n", "11\n9 7\n8 4\n9 3\n6 3\n7 11\n4 2\n9 5\n1 9\n4 5\n4 10\n", "11\n5 1\n4 7\n8 11\n2 6\n3 6\n2 10\n4 10\n5 4\n11 9\n6 11\n"], "output": ["24497\n", "279335\n", "3832508\n", "33\n", "36\n", "6815\n", "52466\n", "2807\n", "27128\n", "40030094\n", "57350\n", "510842\n", "75965\n", "1001\n", "21587063\n", "56414\n", "21234\n", "8789\n", "7160\n", "2454519\n", "215486\n", "296\n", "120680112\n", "151928\n", "104\n", "125985156\n", "69551\n", "76748\n"]}, "generated_tests": {"input": ["12\n8 3\n2 4\n10 11\n6 9\n1 3\n7 12\n11 12\n8 4\n7 9\n5 3\n5 6\n", "11\n1 2\n7 3\n1 6\n11 3\n8 1\n9 1\n5 1\n3 4\n1 3\n2 10\n", "10\n4 3\n2 6\n10 1\n5 7\n5 8\n10 6\n5 9\n9 4\n2 9\n", "13\n4 6\n1 5\n3 2\n1 11\n1 7\n1 8\n1 9\n1 12\n9 4\n3 1\n13 1\n10 1\n", "11\n1 6\n7 10\n7 2\n2 5\n9 8\n3 7\n1 7\n8 1\n1 4\n11 8\n", "20\n10 20\n11 8\n2 11\n10 7\n6 14\n17 15\n17 13\n10 1\n5 1\n19 13\n19 3\n17 1\n17 12\n16 18\n6 11\n18 8\n9 6\n4 13\n2 1\n", "11\n9 7\n8 3\n9 3\n6 3\n7 11\n4 2\n9 5\n1 9\n4 5\n4 10\n", "3\n1 2\n3 1\n", "11\n1 2\n7 3\n1 6\n11 3\n8 1\n9 1\n5 1\n3 4\n1 4\n2 10\n", "8\n8 6\n7 4\n8 5\n2 7\n3 2\n5 4\n1 2\n", "10\n4 3\n2 6\n10 1\n5 7\n5 8\n10 3\n5 9\n9 3\n2 9\n", "17\n17 1\n7 1\n16 1\n5 1\n9 1\n7 4\n14 1\n6 1\n11 1\n2 1\n7 12\n10 1\n3 2\n1 13\n15 1\n1 8\n", "16\n4 10\n13 3\n14 1\n5 11\n6 16\n1 4\n8 10\n16 7\n8 9\n3 11\n9 2\n15 9\n15 12\n12 7\n13 7\n", "10\n2 10\n7 1\n6 2\n1 3\n8 4\n1 9\n1 4\n1 6\n5 1\n", "14\n9 2\n12 14\n3 14\n9 3\n5 14\n5 13\n7 10\n8 11\n13 7\n12 6\n8 5\n4 8\n1 4\n", "5\n4 1\n3 5\n1 2\n1 3\n", "20\n10 20\n11 8\n1 11\n10 7\n6 14\n17 15\n17 3\n10 1\n5 1\n19 13\n19 3\n17 1\n17 12\n16 18\n6 11\n18 8\n9 6\n4 13\n2 1\n", "13\n4 6\n1 5\n1 2\n1 11\n1 7\n1 8\n1 9\n1 12\n9 4\n3 1\n13 1\n10 1\n", "20\n5 20\n11 8\n2 11\n10 7\n6 14\n17 15\n17 13\n10 1\n5 1\n19 13\n19 3\n17 1\n17 12\n16 18\n6 11\n18 8\n9 6\n4 13\n2 1\n", "11\n4 7\n8 3\n9 3\n6 3\n7 11\n4 2\n9 5\n1 9\n4 5\n4 10\n", "8\n8 6\n7 4\n8 5\n2 4\n3 2\n5 2\n1 2\n", "20\n10 20\n11 8\n1 11\n10 7\n12 14\n17 15\n17 3\n10 1\n5 1\n19 13\n19 3\n17 1\n17 12\n16 18\n6 11\n18 8\n9 6\n4 13\n2 1\n", "10\n4 3\n2 6\n10 1\n5 7\n7 8\n10 6\n5 9\n9 4\n1 9\n", "20\n5 20\n11 8\n2 11\n10 7\n6 14\n17 15\n17 13\n10 1\n5 1\n19 13\n19 3\n17 1\n17 12\n16 18\n6 11\n18 8\n9 4\n4 13\n2 1\n", "20\n5 20\n11 8\n3 11\n10 7\n6 14\n17 15\n17 13\n10 1\n5 1\n19 13\n19 3\n17 1\n17 12\n16 18\n6 11\n18 8\n9 4\n4 13\n2 1\n", "12\n8 12\n2 4\n10 7\n6 9\n1 3\n7 12\n11 12\n8 4\n7 9\n5 3\n5 6\n", "15\n1 8\n11 4\n1 12\n1 14\n12 2\n4 13\n5 10\n4 1\n1 9\n15 1\n1 7\n1 5\n4 6\n4 3\n", "4\n1 3\n4 1\n4 2\n", "8\n8 6\n7 4\n8 5\n2 7\n3 2\n5 1\n1 2\n", "10\n4 3\n2 6\n9 1\n5 7\n5 8\n10 6\n5 9\n9 3\n2 9\n", "13\n3 6\n1 5\n3 2\n1 11\n1 7\n1 8\n1 9\n1 12\n3 4\n3 1\n13 1\n10 1\n", "11\n1 9\n2 3\n8 7\n3 11\n2 6\n1 5\n2 4\n7 10\n9 7\n3 10\n", "16\n4 10\n13 3\n14 3\n5 11\n6 16\n1 4\n8 10\n16 4\n8 9\n3 11\n9 2\n15 9\n15 12\n12 7\n13 7\n", "11\n1 6\n7 10\n7 2\n1 5\n9 8\n3 7\n1 7\n9 1\n1 4\n11 8\n", "9\n3 6\n5 1\n5 8\n9 5\n1 3\n4 9\n7 4\n2 3\n", "20\n7 20\n11 8\n1 11\n10 7\n6 14\n17 15\n17 13\n10 1\n5 1\n19 13\n19 3\n17 1\n17 12\n16 18\n6 11\n18 8\n9 6\n4 13\n2 1\n", "11\n9 7\n8 4\n9 6\n6 3\n7 11\n4 2\n9 5\n1 9\n4 5\n4 10\n", "11\n5 1\n4 7\n8 11\n2 6\n3 8\n2 10\n4 10\n5 4\n11 9\n6 11\n", "12\n8 3\n2 4\n10 11\n6 9\n1 3\n7 12\n11 9\n8 4\n7 9\n5 3\n5 6\n", "11\n1 6\n7 10\n7 2\n2 5\n9 8\n3 7\n1 7\n11 1\n1 4\n11 8\n", "10\n7 3\n2 6\n10 1\n5 7\n5 8\n10 6\n5 9\n9 4\n1 9\n", "11\n1 6\n4 10\n7 2\n3 5\n9 8\n3 7\n1 7\n8 1\n1 4\n11 8\n", "10\n4 3\n2 9\n10 1\n5 7\n7 8\n10 6\n5 9\n9 4\n1 9\n", "20\n5 20\n11 8\n2 11\n10 7\n6 14\n2 15\n17 13\n10 1\n5 1\n19 13\n19 3\n17 1\n17 12\n16 18\n6 11\n18 8\n9 4\n4 13\n2 1\n", "11\n1 2\n7 3\n1 6\n11 3\n8 1\n9 1\n5 1\n2 4\n1 3\n1 10\n", "10\n4 3\n2 6\n9 1\n2 7\n5 8\n10 6\n5 9\n9 3\n2 9\n", "11\n1 9\n2 3\n8 1\n3 11\n2 6\n1 5\n2 4\n7 10\n9 7\n3 10\n", "11\n1 2\n7 3\n1 6\n11 3\n8 1\n9 1\n5 1\n3 4\n1 3\n5 10\n", "10\n4 3\n2 6\n10 1\n5 7\n5 8\n10 6\n5 9\n9 4\n1 9\n", "11\n1 6\n7 10\n7 2\n3 5\n9 8\n3 7\n1 7\n8 1\n1 4\n11 8\n", "11\n1 2\n7 3\n1 6\n11 3\n8 1\n9 1\n5 1\n2 4\n1 3\n3 10\n", "10\n7 3\n2 6\n10 1\n5 7\n5 8\n10 6\n5 9\n9 4\n2 9\n"], "output": ["277793\n", "56996\n", "27128\n", "569891\n", "62513\n", "249976611\n", "69713\n", "11\n", "64791\n", "3070\n", "25181\n", "40159082\n", "23284063\n", "22715\n", "2292587\n", "104\n", "219292596\n", "561863\n", "371285157\n", "69962\n", "2807\n", "328415550\n", "29450\n", "503718936\n", "487688082\n", "257003\n", "4074818\n", "36\n", "3083\n", "24497\n", "468290\n", "76949\n", "21430221\n", "62003\n", "8789\n", "234452310\n", "69551\n", "83472\n", "258971\n", "68291\n", "27074\n", "69689\n", "26765\n", "540214836\n", "59330\n", "24633\n", "76442\n", "56996\n", "27128\n", "62513\n", "56996\n", "27074\n"]}, "short_description": "1. One-sentence summary:  \nCompute the number of valid configurations on a tree by rooting it, performing a post-order traversal, and aggregating combinatorial counts for each node from its children.\n\n2. Core algorithmic approach:  \nTree dynamic programming (DP) over a rooted tree, using a depth-first search to obtain a parent/child order and then performing bottom-up DP with modular arithmetic.\n\n3. Reusable components:  \n- Tree rooting and traversal (parorder): a function that, given an undirected adjacency list and a root, returns the parent array and a DFS/post-order list.  \n- Child-list construction (getcld): building a list of children for each node from the parent array.  \n- Bottom-up DP pattern: iterating nodes in reverse DFS order and maintaining multiple DP states per node by accumulating products/sums over children with modular reductions."}
{"name": "1187_E. Tree Painting", "description": "You are given a tree (an undirected connected acyclic graph) consisting of n vertices. You are playing a game on this tree.\n\nInitially all vertices are white. On the first turn of the game you choose one vertex and paint it black. Then on each turn you choose a white vertex adjacent (connected by an edge) to any black vertex and paint it black.\n\nEach time when you choose a vertex (even during the first turn), you gain the number of points equal to the size of the connected component consisting only of white vertices that contains the chosen vertex. The game ends when all vertices are painted black.\n\nLet's see the following example:\n\n<image>\n\nVertices 1 and 4 are painted black already. If you choose the vertex 2, you will gain 4 points for the connected component consisting of vertices 2, 3, 5 and 6. If you choose the vertex 9, you will gain 3 points for the connected component consisting of vertices 7, 8 and 9.\n\nYour task is to maximize the number of points you gain.\n\nInput\n\nThe first line contains an integer n \u2014 the number of vertices in the tree (2 \u2264 n \u2264 2 \u22c5 10^5).\n\nEach of the next n - 1 lines describes an edge of the tree. Edge i is denoted by two integers u_i and v_i, the indices of vertices it connects (1 \u2264 u_i, v_i \u2264 n, u_i \u2260 v_i).\n\nIt is guaranteed that the given edges form a tree.\n\nOutput\n\nPrint one integer \u2014 the maximum number of points you gain if you will play optimally.\n\nExamples\n\nInput\n\n\n9\n1 2\n2 3\n2 5\n2 6\n1 4\n4 9\n9 7\n9 8\n\n\nOutput\n\n\n36\n\n\nInput\n\n\n5\n1 2\n1 3\n2 4\n2 5\n\n\nOutput\n\n\n14\n\nNote\n\nThe first example tree is shown in the problem statement.", "solution": "import sys\n\ninput = sys.stdin.readline\n\nn = int(input())\nG = [[] for _ in range(n)]\n\nfor _ in range(n-1):\n    a,b = map(int,input().split())\n    G[a-1].append(b-1)\n    G[b-1].append(a-1)\n\nF = [0]*n\nstk = [0]\nvisited = [0]*n\n\nwhile stk:\n    x = stk[-1]\n    if not visited[x]:\n        visited[x] = 1\n        for y in G[x]:\n            if not visited[y]:\n                stk.append(y)\n    else:\n        x = stk.pop()\n        F[x] = 1\n        for y in G[x]:                \n            F[x] += F[y]\n\nDP = [0]*n\nstk = [0]\nvisited = [0]*n\n\nwhile stk:\n    x = stk[-1]\n    if not visited[x]:\n        visited[x] = 1\n        for y in G[x]:\n            if not visited[y]:\n                stk.append(y)\n    else:\n        x = stk.pop()\n        DP[x] = F[x]\n        for y in G[x]:\n            DP[x] += DP[y]\n\nans = [0]*n\nans[0] = DP[0]\nstk = [0]\nZ = DP[0]\n\nwhile stk:\n    x = stk.pop()\n    for y in G[x]:\n        if not ans[y]:\n            ay = ans[x] + n - 2 * F[y]\n            ans[y] = ay \n            Z = max(Z,ay)\n            stk.append(y)\n\nprint(Z)\n\n", "difficulty": 11, "public_tests": {"input": ["5\n1 2\n1 3\n2 4\n2 5\n", "9\n1 2\n2 3\n2 5\n2 6\n1 4\n4 9\n9 7\n9 8\n"], "output": ["14", "36"]}, "private_tests": {"input": ["2\n1 2\n", "6\n5 3\n5 6\n5 1\n5 4\n5 2\n", "7\n7 5\n7 3\n7 6\n7 4\n7 1\n7 2\n", "4\n4 3\n3 2\n2 1\n", "4\n2 1\n1 3\n3 4\n", "10\n7 10\n10 6\n6 4\n4 5\n5 8\n8 2\n2 1\n1 3\n3 9\n", "9\n9 4\n4 6\n6 2\n2 1\n1 3\n3 5\n5 8\n8 7\n", "6\n5 3\n3 6\n6 1\n1 4\n4 2\n", "5\n2 1\n2 3\n2 4\n2 5\n", "52\n1 52\n2 52\n3 52\n4 52\n5 52\n6 52\n7 52\n8 52\n9 52\n10 52\n11 52\n12 52\n13 52\n14 52\n15 52\n16 52\n17 52\n18 52\n19 52\n20 52\n21 52\n22 52\n23 52\n24 52\n25 52\n26 52\n27 52\n28 52\n29 52\n30 52\n31 52\n32 52\n33 52\n34 52\n35 52\n36 52\n37 52\n38 52\n39 52\n40 52\n41 52\n42 52\n43 52\n44 52\n45 52\n46 52\n47 52\n48 52\n49 52\n50 52\n51 52\n", "4\n1 3\n1 4\n1 2\n", "7\n1 2\n1 3\n1 6\n1 7\n1 4\n1 5\n", "6\n1 5\n5 4\n4 2\n2 6\n6 3\n", "8\n8 6\n8 7\n8 2\n8 5\n8 1\n8 4\n8 3\n", "10\n5 6\n6 7\n7 3\n7 8\n7 4\n7 2\n7 1\n7 10\n7 9\n", "10\n3 2\n3 7\n3 6\n3 8\n3 1\n3 5\n3 9\n3 4\n3 10\n", "5\n1 4\n4 2\n2 3\n3 5\n", "5\n4 5\n4 1\n1 2\n2 3\n", "8\n6 2\n2 1\n1 8\n8 5\n5 7\n7 3\n3 4\n", "10\n5 8\n8 4\n4 9\n9 6\n6 1\n6 2\n6 7\n6 3\n6 10\n", "9\n3 2\n3 1\n3 8\n3 5\n3 6\n3 9\n3 4\n3 7\n", "4\n3 4\n3 1\n3 2\n", "8\n6 2\n6 1\n6 8\n6 5\n6 7\n6 3\n6 4\n", "10\n5 1\n1 6\n6 2\n2 8\n8 3\n3 4\n4 10\n10 9\n9 7\n", "6\n4 5\n4 1\n4 6\n4 2\n4 3\n", "10\n5 1\n5 6\n5 2\n5 8\n5 3\n5 4\n5 10\n5 9\n5 7\n", "10\n8 2\n8 10\n10 3\n2 4\n3 6\n8 1\n2 7\n10 9\n4 5\n", "9\n2 6\n6 1\n2 8\n6 7\n1 5\n7 3\n8 9\n5 4\n", "7\n7 6\n7 5\n7 2\n7 1\n5 4\n5 3\n", "6\n6 5\n6 2\n2 3\n5 4\n4 1\n", "8\n6 3\n3 7\n6 1\n1 2\n3 5\n5 4\n2 8\n", "4\n3 4\n4 1\n1 2\n", "9\n1 6\n6 4\n4 5\n5 9\n9 8\n8 7\n7 3\n3 2\n", "7\n2 7\n7 6\n6 5\n5 4\n4 1\n1 3\n", "10\n4 10\n10 5\n5 1\n1 6\n6 8\n8 9\n9 2\n9 3\n9 7\n", "9\n1 6\n1 4\n1 5\n1 9\n1 8\n1 7\n1 3\n1 2\n", "7\n1 2\n2 3\n3 6\n6 7\n7 4\n4 5\n", "8\n4 1\n1 3\n3 6\n6 2\n2 7\n7 5\n5 8\n", "5\n1 4\n4 3\n3 2\n2 5\n", "5\n1 4\n1 2\n1 3\n1 5\n"], "output": ["3", "15", "18", "10", "10", "55", "45", "21", "12", "153", "9", "18", "21", "21", "34", "27", "15", "15", "36", "45", "24", "9", "21", "55", "15", "27", "43", "39", "21", "21", "34", "10", "45", "28", "52", "24", "28", "36", "15", "12"]}, "generated_tests": {"input": ["4\n2 1\n2 3\n3 4\n", "9\n9 4\n4 6\n6 2\n2 1\n1 3\n1 5\n5 8\n8 7\n", "52\n1 52\n2 52\n3 18\n4 52\n5 52\n6 52\n7 52\n8 52\n9 52\n10 52\n11 52\n12 52\n13 52\n14 52\n15 52\n16 52\n17 52\n18 52\n19 52\n20 52\n21 52\n22 52\n23 52\n24 52\n25 52\n26 52\n27 52\n28 52\n29 52\n30 52\n31 52\n32 52\n33 52\n34 52\n35 52\n36 52\n37 52\n38 52\n39 52\n40 52\n41 52\n42 52\n43 52\n44 52\n45 52\n46 52\n47 52\n48 52\n49 52\n50 52\n51 52\n", "10\n5 8\n8 4\n4 6\n9 6\n6 1\n6 2\n6 7\n6 3\n6 10\n", "10\n5 1\n1 10\n6 2\n2 8\n8 3\n3 4\n4 10\n10 9\n9 7\n", "10\n5 1\n5 6\n4 2\n5 8\n5 3\n5 4\n5 10\n5 9\n5 7\n", "8\n6 3\n3 7\n6 1\n1 2\n3 5\n6 4\n2 8\n", "9\n1 6\n6 4\n4 5\n5 9\n9 8\n4 7\n7 3\n3 2\n", "10\n4 10\n10 5\n5 1\n1 6\n6 8\n8 9\n9 2\n2 3\n9 7\n", "7\n1 2\n2 3\n3 6\n6 7\n7 4\n1 5\n", "8\n4 2\n1 3\n3 6\n6 2\n2 7\n7 5\n5 8\n", "5\n1 2\n1 3\n2 4\n4 5\n", "10\n4 10\n10 5\n5 2\n1 6\n6 8\n8 9\n9 2\n2 3\n9 7\n", "7\n1 2\n2 6\n3 6\n6 7\n7 4\n1 5\n", "10\n4 10\n10 8\n5 2\n1 6\n6 8\n8 9\n9 2\n2 3\n9 7\n", "10\n4 10\n10 8\n5 2\n1 6\n6 2\n8 9\n9 2\n2 3\n9 7\n", "6\n5 3\n5 6\n5 1\n3 4\n5 2\n", "10\n5 8\n8 4\n4 9\n9 6\n6 1\n6 2\n2 7\n6 3\n6 10\n", "9\n3 2\n3 1\n3 8\n3 5\n1 6\n3 9\n3 4\n3 7\n", "6\n6 5\n5 2\n2 3\n5 4\n4 1\n", "7\n1 4\n2 6\n3 6\n6 7\n7 4\n1 5\n", "10\n4 10\n10 8\n5 4\n1 6\n6 2\n8 9\n9 2\n2 3\n9 7\n", "10\n5 1\n8 4\n4 9\n9 6\n8 1\n6 2\n2 7\n6 3\n6 10\n", "10\n7 10\n10 6\n6 4\n4 5\n5 3\n8 2\n2 1\n1 3\n3 9\n", "5\n2 1\n4 3\n2 4\n2 5\n", "4\n3 1\n2 3\n3 4\n", "10\n5 1\n5 6\n4 2\n5 8\n5 3\n5 4\n5 10\n5 9\n10 7\n", "9\n1 6\n6 4\n4 5\n2 9\n9 8\n4 7\n7 3\n3 2\n", "10\n5 1\n5 6\n4 2\n5 8\n5 3\n5 4\n5 10\n4 9\n10 7\n", "10\n5 1\n8 4\n4 9\n9 6\n6 1\n10 2\n2 7\n6 3\n6 10\n", "4\n1 3\n2 4\n1 2\n", "5\n1 4\n4 2\n2 3\n1 5\n", "8\n6 2\n2 1\n1 8\n8 5\n8 7\n7 3\n3 4\n", "10\n5 1\n7 6\n5 2\n5 8\n5 3\n5 4\n5 10\n5 9\n5 7\n", "10\n8 2\n8 10\n10 3\n2 4\n5 6\n8 1\n2 7\n10 9\n4 5\n", "9\n1 2\n2 3\n2 5\n3 6\n1 4\n4 9\n9 7\n9 8\n", "6\n5 4\n5 6\n5 1\n3 4\n5 2\n", "10\n5 1\n8 4\n4 9\n9 6\n6 1\n6 2\n2 7\n6 3\n6 10\n", "6\n5 4\n5 6\n5 1\n3 5\n5 2\n", "4\n2 3\n1 4\n1 2\n", "9\n3 2\n3 1\n3 8\n3 5\n4 6\n3 9\n3 4\n3 7\n", "8\n6 2\n6 1\n6 8\n6 5\n3 7\n6 3\n6 4\n", "10\n8 2\n8 10\n10 3\n2 4\n3 6\n8 1\n2 7\n10 9\n1 5\n", "5\n1 2\n1 3\n1 4\n2 5\n", "10\n5 8\n8 4\n4 1\n9 6\n6 1\n6 2\n6 7\n6 3\n6 10\n", "7\n1 2\n2 4\n3 6\n6 7\n7 4\n1 5\n", "8\n4 2\n1 3\n3 6\n6 2\n2 7\n7 5\n1 8\n", "5\n1 2\n1 3\n1 4\n4 5\n", "6\n5 3\n5 6\n5 1\n2 4\n5 2\n", "4\n2 3\n2 4\n1 2\n", "10\n5 8\n8 4\n4 9\n9 6\n6 1\n5 2\n2 7\n6 3\n6 10\n", "10\n9 1\n7 6\n5 2\n5 8\n5 3\n5 4\n5 10\n5 9\n5 7\n", "9\n1 2\n2 3\n1 5\n3 6\n1 4\n4 9\n9 7\n9 8\n", "10\n5 1\n8 4\n4 9\n9 6\n6 1\n8 2\n2 7\n6 3\n6 10\n", "8\n4 2\n1 3\n3 6\n6 2\n4 7\n7 5\n1 8\n", "6\n5 3\n5 6\n5 1\n5 4\n4 2\n", "10\n7 10\n10 6\n6 4\n4 5\n5 8\n8 2\n2 1\n1 3\n6 9\n"], "output": ["10\n", "42\n", "202\n", "40\n", "51\n", "34\n", "32\n", "39\n", "53\n", "28\n", "33\n", "15\n", "47\n", "26\n", "41\n", "45\n", "18\n", "46\n", "30\n", "19\n", "27\n", "49\n", "50\n", "52\n", "14\n", "9\n", "35\n", "43\n", "36\n", "44\n", "10\n", "15\n", "33\n", "34\n", "46\n", "39\n", "18\n", "42\n", "15\n", "10\n", "30\n", "26\n", "42\n", "14\n", "45\n", "28\n", "34\n", "14\n", "18\n", "9\n", "52\n", "35\n", "40\n", "50\n", "36\n", "18\n", "53\n"]}, "short_description": "1. One-sentence summary:  \nCompute, for every node in an undirected tree, the total sum of distances from that node to all other nodes and report the maximum such sum.\n\n2. Core algorithmic approach:  \nA two-pass tree-DP (often called \u201crerooting DP\u201d):  \n- First DFS (post-order) to compute subtree sizes.  \n- Second DFS (post-order) to compute the total distance sum when the tree is rooted at node 0.  \n- Third pass (pre-order) to \u201creroot\u201d and propagate the distance sums to every node in O(1) per edge.\n\n3. Reusable components:  \n- Iterative DFS post-order template using a stack and a visited flag to compute subtree aggregates.  \n- Rerooting formula pattern: ans[child] = ans[parent] + N \u2013 2 * size[subtree_at_child].  \n- Adjacency-list representation of a tree for efficient neighbor iteration."}
{"name": "1083_A. The Fair Nut and the Best Path", "description": "The Fair Nut is going to travel to the Tree Country, in which there are n cities. Most of the land of this country is covered by forest. Furthermore, the local road system forms a tree (connected graph without cycles). Nut wants to rent a car in the city u and go by a simple path to city v. He hasn't determined the path, so it's time to do it. Note that chosen path can consist of only one vertex.\n\nA filling station is located in every city. Because of strange law, Nut can buy only w_i liters of gasoline in the i-th city. We can assume, that he has infinite money. Each road has a length, and as soon as Nut drives through this road, the amount of gasoline decreases by length. Of course, Nut can't choose a path, which consists of roads, where he runs out of gasoline. He can buy gasoline in every visited city, even in the first and the last.\n\nHe also wants to find the maximum amount of gasoline that he can have at the end of the path. Help him: count it.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the number of cities.\n\nThe second line contains n integers w_1, w_2, \u2026, w_n (0 \u2264 w_{i} \u2264 10^9) \u2014 the maximum amounts of liters of gasoline that Nut can buy in cities.\n\nEach of the next n - 1 lines describes road and contains three integers u, v, c (1 \u2264 u, v \u2264 n, 1 \u2264 c \u2264 10^9, u \u2260 v), where u and v \u2014 cities that are connected by this road and c \u2014 its length.\n\nIt is guaranteed that graph of road connectivity is a tree.\n\nOutput\n\nPrint one number \u2014 the maximum amount of gasoline that he can have at the end of the path.\n\nExamples\n\nInput\n\n3\n1 3 3\n1 2 2\n1 3 2\n\n\nOutput\n\n3\n\n\nInput\n\n5\n6 3 2 5 0\n1 2 10\n2 3 3\n2 4 1\n1 5 1\n\n\nOutput\n\n7\n\nNote\n\nThe optimal way in the first example is 2 \u2192 1 \u2192 3. \n\n<image>\n\nThe optimal way in the second example is 2 \u2192 4. \n\n<image>", "solution": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\nadj = [[] for i in range(n)]\nfor i in range(n-1):\n    u, v, w = map(int, input().split())\n    u -= 1\n    v -= 1\n    adj[u].append((v, w))\n    adj[v].append((u, w))\nbest = [0] * n\nans = 0\n\ndef dfs(u):\n    stack = list()\n    visit = [False] * n\n    stack.append((u, -1))\n    while stack:\n        u, par = stack[-1]\n        if not visit[u]:\n            visit[u] = True\n            for v, w in adj[u]:\n                if v != par:\n                    stack.append((v, u))\n        else:\n            cand = []\n            for v, w in adj[u]:\n                if v != par:\n                    cand.append(best[v] + a[v] - w)\n            cand.sort(reverse=True)\n            cur = a[u]\n            for i in range(2):\n                if i < len(cand) and cand[i] > 0:\n                    cur += cand[i]\n            global ans\n            ans = max(ans, cur)\n            best[u] = cand[0] if len(cand) > 0 and cand[0] > 0 else 0\n            stack.pop()\n\ndfs(0)\nprint(ans)", "difficulty": 7, "public_tests": {"input": ["3\n1 3 3\n1 2 2\n1 3 2\n", "5\n6 3 2 5 0\n1 2 10\n2 3 3\n2 4 1\n1 5 1\n"], "output": ["                                                               3\n", "                                                               7\n"]}, "private_tests": {"input": ["10\n81 34 31 38 69 62 54 18 72 29\n4 8 12\n2 9 25\n4 5 17\n5 7 35\n10 1 13\n9 3 53\n7 6 22\n1 6 82\n3 10 42\n", "10\n11 43 11 96 18 53 25 89 31 41\n2 4 41\n7 1 88\n3 2 19\n10 3 38\n8 4 97\n7 5 21\n7 2 71\n3 6 69\n9 5 19\n", "10\n96 72 39 45 93 64 13 7 3 28\n9 1 18\n1 7 15\n1 10 52\n4 1 93\n1 6 94\n1 5 23\n1 2 20\n8 1 13\n3 1 34\n", "10\n67 9 7 2 33 5 1 7 43 55\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 13\n", "10\n28 8 0 1 5 2 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 30\n", "10\n8 63 0 10 86 14 5 49 13 5\n1 9 48\n6 9 5\n3 7 35\n9 5 3\n10 9 43\n2 6 4\n9 4 36\n8 7 10\n7 2 6\n", "4\n10408 544831 53650 494619\n1 4 682017\n4 3 46433\n4 2 98094\n", "10\n4 85 87 24 19 100 27 73 89 46\n5 4 63\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 39\n10 8 57\n1 4 80\n6 1 10\n", "10\n80 63 78 18 65 77 24 83 79 48\n5 3 67\n1 8 4\n1 2 83\n7 4 16\n6 7 50\n3 9 27\n10 7 74\n2 3 21\n10 2 47\n", "1\n42\n", "10\n46 76 45 9 4 58 28 7 40 100\n10 2 8\n3 9 6\n6 1 9\n2 7 10\n4 6 31\n10 1 1\n8 4 29\n5 9 9\n7 5 3\n", "10\n19 48 77 50 74 26 8 10 47 7\n6 9 95\n3 9 94\n9 7 76\n5 9 95\n8 9 4\n2 4 85\n1 2 77\n4 10 29\n1 9 60\n"], "output": ["                                                             187\n", "                                                              98\n", "                                                             218\n", "                                                             181\n", "                                                             100\n", "                                                             202\n", "                                                          948573\n", "                                                             225\n", "                                                             248\n", "                                                              42\n", "                                                             351\n", "                                                              77\n"]}, "generated_tests": {"input": ["10\n81 34 31 38 92 62 54 18 72 29\n4 8 12\n2 9 25\n4 5 17\n5 7 35\n10 1 13\n9 3 53\n7 6 22\n1 6 82\n3 10 42\n", "10\n11 43 11 96 18 53 25 42 31 41\n2 4 41\n7 1 88\n3 2 19\n10 3 38\n8 4 97\n7 5 21\n7 2 71\n3 6 69\n9 5 19\n", "10\n67 9 7 2 33 5 1 7 43 55\n2 4 38\n2 5 77\n2 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 13\n", "10\n28 8 0 1 5 2 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 39\n", "10\n8 63 0 10 86 14 5 49 13 5\n1 9 48\n6 9 5\n3 7 35\n9 5 3\n10 9 43\n2 6 4\n9 4 36\n8 7 1\n7 2 6\n", "4\n10408 544831 53650 494619\n1 4 682017\n4 3 65934\n4 2 98094\n", "10\n80 63 78 18 65 77 24 83 79 48\n5 3 67\n1 8 4\n1 2 83\n7 4 16\n6 7 50\n3 9 27\n10 7 74\n1 3 21\n10 2 47\n", "1\n55\n", "10\n46 76 45 9 4 58 28 7 40 100\n10 2 8\n3 9 6\n6 1 9\n2 7 10\n4 6 31\n10 1 1\n8 3 29\n5 9 9\n7 5 3\n", "10\n19 48 77 50 74 26 8 10 82 7\n6 9 95\n3 9 94\n9 7 76\n5 9 95\n8 9 4\n2 4 85\n1 2 77\n4 10 29\n1 9 60\n", "5\n6 3 2 5 0\n1 2 10\n2 3 6\n2 4 1\n1 5 1\n", "10\n81 63 31 38 92 62 54 18 72 29\n4 8 12\n2 9 25\n4 5 17\n5 7 35\n10 1 13\n9 3 53\n7 6 22\n1 6 82\n3 10 42\n", "1\n33\n", "10\n46 76 45 9 4 58 28 7 40 100\n10 2 8\n3 9 6\n6 1 9\n2 7 10\n4 6 31\n10 1 1\n8 3 29\n5 9 9\n7 5 6\n", "10\n81 63 31 38 92 62 54 18 66 29\n4 8 12\n2 9 25\n4 5 17\n5 7 35\n10 1 13\n9 3 53\n7 6 22\n1 6 82\n3 10 42\n", "4\n10408 154571 53650 494619\n1 4 1032269\n4 3 65934\n4 2 98094\n", "1\n23\n", "1\n5\n", "1\n10\n", "1\n12\n", "1\n8\n", "1\n1\n", "1\n0\n", "10\n67 9 7 2 33 5 1 7 48 55\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 13\n", "10\n28 8 0 1 5 2 9 1 2 95\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 30\n", "10\n8 63 0 10 86 14 5 49 13 5\n1 9 48\n6 9 5\n3 7 35\n9 5 3\n10 9 43\n2 6 5\n9 4 36\n8 7 10\n7 2 6\n", "4\n10408 544831 53650 205290\n1 4 682017\n4 3 46433\n4 2 98094\n", "10\n4 85 87 24 19 100 27 73 89 46\n5 4 63\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 39\n10 8 57\n1 4 80\n6 1 1\n", "10\n80 63 78 8 65 77 24 83 79 48\n5 3 67\n1 8 4\n1 2 83\n7 4 16\n6 7 50\n3 9 27\n10 7 74\n2 3 21\n10 2 47\n", "1\n27\n", "10\n19 48 77 50 74 26 8 10 47 7\n6 9 95\n3 9 66\n9 7 76\n5 9 95\n8 9 4\n2 4 85\n1 2 77\n4 10 29\n1 9 60\n", "10\n81 34 31 38 92 62 54 18 72 29\n4 8 12\n2 9 25\n4 5 17\n5 7 35\n10 1 13\n9 3 53\n7 6 22\n1 6 82\n2 10 42\n", "10\n8 63 0 10 86 14 5 49 13 5\n1 9 48\n6 9 5\n3 7 35\n9 5 1\n10 9 43\n2 6 4\n9 4 36\n8 7 1\n7 2 6\n", "4\n10408 544831 53650 494619\n1 4 682017\n4 3 14800\n4 2 98094\n", "1\n101\n", "10\n46 76 45 9 4 58 28 7 40 100\n10 2 8\n3 9 6\n6 1 9\n2 7 10\n4 6 31\n10 1 1\n8 3 4\n5 9 9\n7 5 3\n", "10\n81 63 31 38 92 80 54 18 72 29\n4 8 12\n2 9 25\n4 5 17\n5 7 35\n10 1 13\n9 3 53\n7 6 22\n1 6 82\n3 10 42\n", "1\n35\n", "10\n81 63 31 38 92 62 54 18 66 29\n4 8 12\n2 9 25\n4 5 17\n5 7 35\n10 1 13\n9 6 53\n7 6 22\n1 6 82\n3 10 42\n", "1\n11\n", "1\n6\n", "1\n19\n", "1\n2\n", "10\n28 8 0 1 5 0 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 39\n", "4\n10408 544831 53650 494619\n1 4 1032269\n4 3 65934\n4 2 98094\n", "10\n28 8 0 1 5 0 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n4 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 39\n", "10\n28 8 0 1 5 0 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 142\n4 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 39\n", "4\n10408 154571 53650 494619\n1 4 1032269\n4 3 95096\n4 2 98094\n", "10\n28 8 0 1 9 0 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 142\n4 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 39\n", "10\n28 8 0 1 9 0 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 142\n4 6 41\n7 2 21\n9 2 54\n2 4 90\n4 1 39\n", "1\n7\n", "10\n11 43 11 96 18 53 25 89 33 41\n2 4 41\n7 1 88\n3 2 19\n10 3 38\n8 4 97\n7 5 21\n7 2 71\n3 6 69\n9 5 19\n", "5\n6 3 1 5 0\n1 2 10\n2 3 3\n2 4 1\n1 5 1\n", "10\n67 9 7 4 33 5 1 7 43 55\n2 4 38\n2 5 77\n2 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 13\n", "10\n80 63 78 18 65 0 24 83 79 48\n5 3 67\n1 8 4\n1 2 83\n7 4 16\n6 7 50\n3 9 27\n10 7 74\n1 3 21\n10 2 47\n", "10\n19 48 77 50 74 26 8 10 82 7\n6 9 95\n3 9 94\n9 7 76\n5 9 95\n8 9 4\n3 4 85\n1 2 77\n4 10 29\n1 9 60\n", "10\n28 8 0 1 5 0 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 3 54\n2 6 90\n4 1 39\n", "10\n28 8 0 1 5 0 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n4 6 24\n7 2 21\n9 2 54\n2 6 90\n4 1 39\n", "4\n10408 154571 2215 494619\n1 4 1032269\n4 3 65934\n4 2 98094\n", "10\n28 8 0 1 5 0 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 142\n4 6 41\n7 2 21\n9 2 54\n2 6 40\n4 1 39\n", "4\n10408 154571 53650 494619\n1 4 1032269\n4 3 79823\n4 2 98094\n", "10\n28 8 0 1 9 0 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 142\n4 6 41\n7 2 21\n9 3 54\n2 4 90\n4 1 39\n"], "output": ["210\n", "98\n", "181\n", "100\n", "211\n", "941356\n", "268\n", "55\n", "351\n", "88\n", "7\n", "239\n", "33\n", "348\n", "233\n", "551096\n", "23\n", "5\n", "10\n", "12\n", "8\n", "1\n", "0\n", "186\n", "114\n", "201\n", "659244\n", "234\n", "248\n", "27\n", "77\n", "232\n", "213\n", "980206\n", "101\n", "354\n", "257\n", "35\n", "229\n", "11\n", "6\n", "19\n", "2\n", "100\n", "941356\n", "100\n", "100\n", "551096\n", "100\n", "100\n", "7\n", "98\n", "7\n", "181\n", "268\n", "88\n", "100\n", "100\n", "551096\n", "100\n", "551096\n", "100\n"]}, "short_description": "1. One-sentence summary:  \nCompute the maximum total of node values minus edge costs on any simple path through a tree, where at each node you may extend the path along up to two best children.\n\n2. Core algorithmic approach:  \nTree\u2010DP via a post-order depth-first traversal (iterative DFS) that computes for each node the best downward path sum and simultaneously tracks the global maximum by combining up to two child contributions.\n\n3. Reusable components:  \n- Iterative post-order DFS on a tree using an explicit stack with visit\u2010flags and parent tracking.  \n- DP merging pattern: collect child contributions (best[child] + node_value[child] \u2212 edge_cost), sort or scan for the top two positive values, and update both \u201cbest downward\u201d and \u201cglobal maximum\u201d aggregates.  \n- Adjacency\u2010list representation for undirected weighted trees."}
{"name": "275_D. Zero Tree", "description": "A tree is a graph with n vertices and exactly n - 1 edges; this graph should meet the following condition: there exists exactly one shortest (by number of edges) path between any pair of its vertices.\n\nA subtree of a tree T is a tree with both vertices and edges as subsets of vertices and edges of T.\n\nYou're given a tree with n vertices. Consider its vertices numbered with integers from 1 to n. Additionally an integer is written on every vertex of this tree. Initially the integer written on the i-th vertex is equal to vi. In one move you can apply the following operation:\n\n  1. Select the subtree of the given tree that includes the vertex with number 1. \n  2. Increase (or decrease) by one all the integers which are written on the vertices of that subtree. \n\n\n\nCalculate the minimum number of moves that is required to make all the integers written on the vertices of the given tree equal to zero.\n\nInput\n\nThe first line of the input contains n (1 \u2264 n \u2264 105). Each of the next n - 1 lines contains two integers ai and bi (1 \u2264 ai, bi \u2264 n; ai \u2260 bi) indicating there's an edge between vertices ai and bi. It's guaranteed that the input graph is a tree. \n\nThe last line of the input contains a list of n space-separated integers v1, v2, ..., vn (|vi| \u2264 109).\n\nOutput\n\nPrint the minimum number of operations needed to solve the task.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n3\n1 2\n1 3\n1 -1 1\n\n\nOutput\n\n3", "solution": "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\nn = int(minp())\ne = [0]\np = [None]*(n+1)\nfor i in range(n):\n\te.append([])\nfor i in range(n-1):\n\ta, b = map(int,minp().split())\n\te[a].append(b)\n\te[b].append(a)\nv = list(map(int,minp().split()))\nplus = [0]*(n+1)\nminus = [0]*(n+1)\n\nwas = [False]*(n+1)\nwas[1] = True\ni = 0\nj = 1\nq = [0]*(n+100)\nq[0] = 1\np[1] = 0\nwhile i < j:\n\tx = q[i]\n\ti += 1\n\tfor y in e[x]:\n\t\tif not was[y]:\n\t\t\twas[y] = True\n\t\t\tp[y] = x\n\t\t\tq[j] = y\n\t\t\tj += 1\n\ni = j-1\nwhile i >= 0:\n\tx = q[i]\n\ti -= 1\n\ts = minus[x] - plus[x]\n\tz = v[x-1] + s\n\tpp = p[x]\n\t#print(x, p[x], plus[x], minus[x], '-', s[x], v[x-1]+s[x], v[0]+s[1])\n\t#print(-(plus[x]-minus[x]),s[x])\n\tminus[pp] = max(minus[x],minus[pp])\n\tplus[pp] = max(plus[x],plus[pp])\n\tif z > 0:\n\t\tplus[pp] = max(plus[pp],plus[x]+z)\n\telif z < 0:\n\t\tminus[pp] = max(minus[pp],minus[x]-z)\n#print(v[0])\n#print(plus[0], minus[0])\nprint(plus[0] + minus[0])", "difficulty": 10, "public_tests": {"input": ["3\n1 2\n1 3\n1 -1 1\n"], "output": ["3"]}, "private_tests": {"input": ["5\n2 3\n4 5\n2 5\n1 3\n0 2 1 4 3\n", "5\n3 1\n2 4\n3 4\n2 5\n0 -3 -1 2 4\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 488291045 253254575 -974301934 709266786 926718320 87511873 514836444 -702876508 848928657\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\n"], "output": ["8", "20", "2529263875", "18"]}, "generated_tests": {"input": ["5\n2 3\n4 5\n2 5\n1 4\n0 2 1 4 3\n", "5\n3 1\n2 4\n3 4\n2 5\n0 -3 -1 2 1\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -10 -4 -2 -7 -8 -3\n", "5\n2 3\n4 3\n2 5\n1 4\n0 2 1 4 3\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n7 4\n5 2\n-1 -6 -9 -1 -10 -4 -2 -7 -8 -3\n", "5\n3 1\n2 4\n1 4\n2 5\n0 -2 -1 2 1\n", "5\n3 2\n2 4\n3 4\n2 5\n0 -3 -1 2 4\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n4 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 488291045 253254575 -974301934 709266786 926718320 87511873 514836444 -702876508 848928657\n", "10\n5 6\n8 2\n10 3\n4 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\n", "5\n3 1\n2 4\n3 5\n2 5\n0 -3 -1 2 4\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n10 10\n7 4\n5 2\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\n", "3\n1 2\n1 3\n1 -1 0\n", "5\n3 1\n2 4\n3 5\n4 5\n0 -3 -1 2 4\n", "5\n2 3\n4 5\n2 4\n1 5\n0 -6 -1 2 6\n", "5\n2 3\n4 3\n2 5\n1 4\n1 2 1 4 3\n", "10\n5 6\n8 2\n9 3\n4 1\n6 6\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -10 -8 -2 -7 -8 -3\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -10 -8 -3 0 -8 -3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -470133967 488291045 253254575 -974301934 709266786 926718320 87511873 514836444 -1167698791 848928657\n", "3\n1 3\n1 3\n1 -1 0\n", "5\n3 1\n2 4\n1 4\n2 5\n0 -3 -1 2 1\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -10 -8 -2 -7 -8 -3\n", "5\n2 3\n4 3\n4 5\n1 4\n0 2 1 4 3\n", "5\n3 2\n4 4\n3 4\n2 5\n0 -3 -1 2 4\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -10 -8 -3 -7 -8 -3\n", "5\n2 3\n4 5\n2 5\n1 3\n0 4 1 4 3\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -470133967 488291045 253254575 -974301934 709266786 926718320 87511873 514836444 -702876508 848928657\n", "5\n2 3\n4 5\n2 5\n1 4\n0 1 1 4 3\n", "5\n3 1\n2 5\n1 4\n2 5\n0 -3 -1 2 1\n", "5\n2 3\n4 3\n4 5\n1 4\n0 0 1 4 3\n", "5\n2 2\n4 4\n3 4\n2 5\n0 -3 -1 2 4\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -470133967 488291045 253254575 -974301934 709266786 778803676 87511873 514836444 -702876508 848928657\n", "5\n2 3\n4 3\n4 5\n1 4\n0 0 1 4 4\n", "5\n2 2\n4 4\n2 4\n2 5\n0 -3 -1 2 4\n", "12\n1 6\n9 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -470133967 488291045 253254575 -974301934 709266786 778803676 87511873 514836444 -702876508 848928657\n", "5\n2 2\n4 4\n2 4\n2 5\n0 -6 -1 2 4\n", "12\n1 6\n9 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -470133967 488291045 253254575 -974301934 709266786 27173431 87511873 514836444 -702876508 848928657\n", "5\n2 2\n4 4\n2 4\n2 5\n0 -6 -2 2 4\n", "5\n2 2\n4 4\n2 4\n2 5\n0 -6 -2 2 6\n", "5\n2 2\n4 5\n2 4\n2 5\n0 -6 -2 2 6\n", "5\n2 2\n4 5\n2 4\n2 5\n0 -6 -1 2 6\n", "5\n2 3\n4 5\n2 4\n2 5\n0 -6 -1 2 6\n", "5\n2 3\n4 5\n2 5\n1 5\n0 -6 -1 2 6\n", "5\n2 3\n4 5\n2 2\n1 5\n0 -6 -1 2 6\n", "5\n2 3\n4 5\n2 2\n1 5\n0 -6 -1 2 10\n", "5\n2 3\n4 5\n2 2\n2 5\n0 -6 -1 2 10\n", "5\n2 3\n4 1\n2 5\n1 3\n0 2 1 4 3\n", "5\n5 1\n2 4\n3 4\n2 5\n0 -3 -1 2 4\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 488291045 246385497 -974301934 709266786 926718320 87511873 514836444 -702876508 848928657\n", "5\n2 3\n4 5\n2 5\n1 4\n0 2 0 4 3\n", "5\n2 1\n2 4\n3 4\n2 5\n0 -3 -1 2 1\n", "5\n3 1\n2 4\n1 4\n2 5\n0 -3 -1 2 0\n", "10\n5 6\n8 2\n9 3\n4 1\n6 10\n9 8\n7 10\n7 4\n5 2\n-1 -6 -9 -1 -10 -5 -2 -7 -8 -3\n", "5\n3 1\n2 4\n1 4\n2 5\n-1 -2 -1 2 1\n", "5\n3 2\n2 4\n4 4\n2 5\n0 -3 -1 2 4\n", "12\n1 6\n10 1\n4 1\n7 1\n1 2\n4 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -264928594 177712147 253254575 -974301934 709266786 926718320 87511873 514836444 -702876508 848928657\n", "10\n5 3\n8 2\n10 3\n4 1\n6 10\n9 8\n7 10\n7 4\n5 2\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\n", "5\n3 2\n4 4\n3 4\n2 5\n0 -3 -2 2 4\n", "5\n2 2\n4 4\n3 2\n2 5\n0 -3 -1 2 4\n", "5\n2 2\n4 4\n2 2\n2 5\n0 -3 -1 2 4\n", "12\n1 6\n9 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -470133967 488291045 387871965 -974301934 709266786 778803676 87511873 514836444 -702876508 848928657\n", "5\n2 2\n4 4\n2 4\n2 5\n0 -5 -1 2 4\n", "12\n1 6\n9 1\n4 1\n7 1\n1 2\n5 1\n1 8\n1 11\n3 1\n12 1\n9 1\n580660007 861441526 -706791824 488291045 253254575 -974301934 709266786 27173431 87511873 514836444 -702876508 848928657\n", "5\n2 2\n4 4\n2 4\n2 5\n0 -6 -2 0 4\n", "5\n2 2\n4 4\n2 4\n2 5\n0 -6 -2 2 10\n", "5\n2 2\n4 5\n2 4\n2 5\n0 -10 -1 2 6\n", "5\n2 3\n4 5\n2 4\n2 5\n0 -6 -1 2 4\n", "5\n2 3\n4 5\n2 4\n1 5\n0 -2 -1 2 6\n"], "output": ["8\n", "14\n", "26\n", "12\n", "25\n", "10\n", "0\n", "2529263875\n", "18\n", "20\n", "4\n", "3\n", "16\n", "24\n", "11\n", "6\n", "38\n", "2916057589\n", "1\n", "12\n", "26\n", "10\n", "0\n", "26\n", "10\n", "2529263875\n", "8\n", "4\n", "8\n", "0\n", "2529263875\n", "8\n", "0\n", "2529263875\n", "0\n", "2529263875\n", "0\n", "0\n", "0\n", "0\n", "0\n", "24\n", "12\n", "20\n", "0\n", "8\n", "20\n", "2529263875\n", "8\n", "12\n", "10\n", "25\n", "11\n", "0\n", "2529263875\n", "24\n", "0\n", "0\n", "0\n", "2529263875\n", "0\n", "2529263875\n", "0\n", "0\n", "0\n", "0\n", "16\n"]}, "short_description": "1. One-sentence summary  \nCompute the minimum total adjustment needed so that, in a rooted tree with initial node weights, every root\u2010to\u2010node prefix sum stays nonnegative.  \n\n2. Core algorithmic approach  \n\u2013 Perform a BFS to root the tree at node 1 and record a parent array and BFS order.  \n\u2013 Traverse the nodes in reverse BFS order (post-order) and do a bottom-up DP that tracks two values at each node: the maximum positive \u201csurplus\u201d and the maximum negative \u201cdeficit\u201d needed in its subtree to enforce nonnegativity of all prefix sums.  \n\u2013 Merge each child\u2019s surplus/deficit into its parent, adjusting for the child\u2019s own weight, so that at the root you end up with the total surplus plus deficit.\n\n3. Reusable components  \n\u2013 Tree rooting via BFS (build parent array and node order)  \n\u2013 Post-order traversal using a reversed BFS/DFS order array  \n\u2013 Two-value DP merge pattern (tracking both a \u201cplus\u201d and a \u201cminus\u201d adjustment) for balancing prefix-sum constraints in trees"}
