{"name": "306_C. White, Black and White Again", "description": "Polycarpus is sure that his life fits the description: \"first there is a white stripe, then a black one, then a white one again\". So, Polycarpus is sure that this rule is going to fulfill during the next n days. Polycarpus knows that he is in for w good events and b not-so-good events. At least one event is going to take place during each day. As each day is unequivocally characterizes as a part of a white or a black stripe, then each day is going to have events of the same type only (ether good or not-so-good).\n\nWhat is the number of distinct ways this scenario can develop over the next n days if Polycarpus is in for a white stripe (a stripe that has good events only, the stripe's length is at least 1 day), the a black stripe (a stripe that has not-so-good events only, the stripe's length is at least 1 day) and a white stripe again (a stripe that has good events only, the stripe's length is at least 1 day). Each of n days will belong to one of the three stripes only.\n\nNote that even the events of the same type are distinct from each other. Even if some events occur on the same day, they go in some order (there are no simultaneous events).\n\nWrite a code that prints the number of possible configurations to sort the events into days. See the samples for clarifications on which scenarios should be considered distinct. Print the answer modulo 1000000009 (109 + 9).\n\nInput\n\nThe single line of the input contains integers n, w and b (3 \u2264 n \u2264 4000, 2 \u2264 w \u2264 4000, 1 \u2264 b \u2264 4000) \u2014 the number of days, the number of good events and the number of not-so-good events. It is guaranteed that w + b \u2265 n.\n\nOutput\n\nPrint the required number of ways modulo 1000000009 (109 + 9).\n\nExamples\n\nInput\n\n3 2 1\n\n\nOutput\n\n2\n\n\nInput\n\n4 2 2\n\n\nOutput\n\n4\n\n\nInput\n\n3 2 2\n\n\nOutput\n\n4\n\nNote\n\nWe'll represent the good events by numbers starting from 1 and the not-so-good events \u2014 by letters starting from 'a'. Vertical lines separate days.\n\nIn the first sample the possible ways are: \"1|a|2\" and \"2|a|1\". In the second sample the possible ways are: \"1|a|b|2\", \"2|a|b|1\", \"1|b|a|2\" and \"2|b|a|1\". In the third sample the possible ways are: \"1|ab|2\", \"2|ab|1\", \"1|ba|2\" and \"2|ba|1\".", "solution": "import sys\n\nMOD = int(1e9) + 9\n\ndef inv(n):\n    return pow(n, MOD - 2, MOD)\n\ndef combo(n):\n    rv = [0 for __ in range(n + 1)]\n    rv[0] = 1\n    for k in range(n):\n        rv[k + 1] = rv[k] * (n - k) %  MOD * inv(k + 1) % MOD\n    return rv\n\nwith sys.stdin as fin, sys.stdout as fout:\n    n, w, b = map(int, next(fin).split())\n\n    combw = combo(w - 1)\n    combb = combo(b - 1)\n\n    ans = 0\n    for black in range(max(1, n - w), min(n - 2, b) + 1):\n        ans = (ans + (n - 1 - black) * combw[n - black - 1] % MOD * combb[black - 1]) % MOD\n\n    for f in w, b:\n        for k in range(1, f + 1):\n            ans = k * ans % MOD\n\n    print(ans, file=fout)\n", "difficulty": 9, "public_tests": {"input": ["3 2 1\n", "3 2 2\n", "4 2 2\n"], "output": ["2\n", "4\n", "4\n"]}, "private_tests": {"input": ["3 3 1\n", "300 2 300\n", "4000 4000 1\n", "4000 4000 100\n", "4 2 3\n", "3 300 300\n", "4000 100 4000\n", "3 300 1\n", "300 300 1\n", "4000 1000 3000\n", "3 2 4000\n", "4 3 2\n", "3 2 300\n", "4000 3998 2\n", "100 200 300\n", "300 300 300\n", "3 3 3\n", "10 10 10\n", "10 4 9\n", "239 300 231\n", "4000 2 3998\n", "200 100 300\n", "4000 2000 2000\n", "4000 4000 4000\n", "10 7 5\n", "4000 100 3900\n", "3 4000 4000\n"], "output": ["12\n", "775907030\n", "63263244\n", "994443885\n", "24\n", "496527918\n", "908339579\n", "828107078\n", "775907030\n", "876839920\n", "938379934\n", "48\n", "196174631\n", "296557186\n", "316471646\n", "375912430\n", "72\n", "318389383\n", "135283173\n", "774612666\n", "686088712\n", "949581532\n", "310481606\n", "997463324\n", "130636800\n", "221262673\n", "680114446\n"]}, "generated_tests": {"input": ["4000 4000 2\n", "3 300 167\n", "3 300 2\n", "4 4 2\n", "3 2 70\n", "1625 3998 2\n", "300 403 300\n", "15 10 10\n", "224 300 231\n", "4000 2000 2219\n", "4000 1244 4000\n", "10 7 4\n", "3 4000 759\n", "3 4 1\n", "3 33 167\n", "3 499 2\n", "4 4 4\n", "3 2 107\n", "387 403 300\n", "15 10 13\n", "224 363 231\n", "4000 1244 2881\n", "10 11 4\n", "3 4000 208\n", "3 5 1\n", "3 19 167\n", "5 499 2\n", "387 167 300\n", "15 11 13\n", "224 227 231\n", "2392 1244 2881\n", "10 19 4\n", "41 167 300\n", "15 11 5\n", "9 227 231\n", "2392 1244 2281\n", "41 167 63\n", "15 21 5\n", "9 381 231\n", "41 140 63\n", "9 86 231\n", "40 140 63\n", "9 69 231\n", "37 140 63\n", "9 132 231\n", "37 172 63\n", "9 18 231\n", "33 172 63\n", "9 10 231\n", "64 172 63\n", "10 10 231\n", "64 172 80\n", "10 15 231\n", "64 99 80\n", "10 15 375\n", "64 141 80\n", "7 15 375\n", "64 11 80\n"], "output": ["                                                       989710488", "                                                       285373202", "                                                       656214147", "                                                             432", "                                                       770649180", "                                                       542670938", "                                                       571507970", "                                                       692214809", "                                                        70822615", "                                                       865711019", "                                                       344837886", "                                                         5806080", "                                                       206083604", "                                                              72", "                                                       593306692", "                                                       254427357", "                                                            8640", "                                                       459376040", "                                                       589488519", "                                                       897960203", "                                                       169177979", "                                                        89050805", "                                                       385275717", "                                                        18679989", "                                                             480", "                                                       723951239", "                                                       148427447", "                                                       767623025", "                                                       793679640", "                                                       325982463", "                                                       810883942", "                                                       220254997", "                                                       110267484", "                                                       702074402", "                                                       898722770", "                                                       359107947", "                                                       783437267", "                                                       877588909", "                                                       117543093", "                                                        48876672", "                                                       957006791", "                                                       502192112", "                                                       811187879", "                                                       377851141", "                                                       509748577", "                                                         7314041", "                                                       618327329", "                                                       995742950", "                                                        93370345", "                                                       783413855", "                                                       380274267", "                                                       827689309", "                                                       339087236", "                                                       606904887", "                                                       855951254", "                                                       297036587", "                                                       919984448", "                                                       577752521"]}, "short_description": "1. One-sentence summary:  \nComputes a weighted sum of binomial-coefficient products under modular arithmetic to count configurations satisfying given size and color constraints.\n\n2. Core algorithmic approach:  \nModular combinatorics via precomputed row of \u201cn choose k\u201d values (using multiplicative formula and modular inverses) followed by an explicit summation loop.\n\n3. Reusable components:  \n- Modular inverse function using fast exponentiation (Fermat\u2019s little theorem).  \n- Function to build combinations C(n, k) for all k in O(n) via the recurrence C(n, k+1) = C(n, k)\u00b7(n\u2013k)/(k+1) mod M.  \n- Structured looping over valid parameter ranges to accumulate weighted combinatorial counts."}
{"name": "521_C. Pluses everywhere", "description": "Vasya is sitting on an extremely boring math class. To have fun, he took a piece of paper and wrote out n numbers on a single line. After that, Vasya began to write out different ways to put pluses (\"+\") in the line between certain digits in the line so that the result was a correct arithmetic expression; formally, no two pluses in such a partition can stand together (between any two adjacent pluses there must be at least one digit), and no plus can stand at the beginning or the end of a line. For example, in the string 100500, ways 100500 (add no pluses), 1+00+500 or 10050+0 are correct, and ways 100++500, +1+0+0+5+0+0 or 100500+ are incorrect.\n\nThe lesson was long, and Vasya has written all the correct ways to place exactly k pluses in a string of digits. At this point, he got caught having fun by a teacher and he was given the task to calculate the sum of all the resulting arithmetic expressions by the end of the lesson (when calculating the value of an expression the leading zeros should be ignored). As the answer can be large, Vasya is allowed to get only its remainder modulo 109 + 7. Help him!\n\nInput\n\nThe first line contains two integers, n and k (0 \u2264 k < n \u2264 105).\n\nThe second line contains a string consisting of n digits.\n\nOutput\n\nPrint the answer to the problem modulo 109 + 7.\n\nExamples\n\nInput\n\n3 1\n108\n\n\nOutput\n\n27\n\nInput\n\n3 2\n108\n\n\nOutput\n\n9\n\nNote\n\nIn the first sample the result equals (1 + 08) + (10 + 8) = 27.\n\nIn the second sample the result equals 1 + 0 + 8 = 9.", "solution": "n, k = map(int, input().split())\n\nt = list(map(int, input()))\n\np, d = 1, 10 ** 9 + 7\n\ns, f = 0, [1] * n\n\nfor i in range(2, n): f[i] = (i * f[i - 1]) % d\n\nc = lambda a, b: 0 if a > b else (f[b] * pow(f[a] * f[b - a], d - 2, d)) % d\n\nif k:\n\n    u = [0] * (n + 1)\n\n    p = [1] * (n + 1)\n\n    for i in range(n):\n\n        u[i] = (p[i] * c(k - 1, n - 2 - i) + u[i - 1]) % d\n\n        p[i + 1] = (10 * p[i]) % d\n\n    for i in range(n): \n\n        v = u[n - 2 - i] + p[n - 1 - i] * c(k, i)\n\n        s = (s + t[i] * v) % d\n\nelse:\n\n    for i in t: s = (s * 10 + i) % d\n\nprint(s)\n\n\n\n\n# Made By Mostafa_Khaled", "difficulty": 9, "public_tests": {"input": ["3 1\n108\n", "3 2\n108\n"], "output": ["27\n", "9\n"]}, "private_tests": {"input": ["57 13\n177946005798852216692528643323484389368821547834013121843\n", "16 15\n8086179429588546\n", "14 6\n00000000000001\n", "200 100\n56988719755815575893282254081467698462485803782142631369385180999746639622554559884281193367342283559238834106917388166048020056852911293394377949964185368886333934084399980368238188117302968424219707\n", "5 2\n39923\n", "69 42\n702219529742805879674066565317944328886138640496101944672203835664744\n", "132 104\n558881515858815818855111851188551181818185155585188885588555158518555118155511851558151188115518858811551515158155181855155181588185\n", "1 0\n5\n", "20 19\n33137197659033083606\n", "169 79\n4127820680853085792029730656808609037371898882875765629277699584259523684674321307751545375311931127593565910629995605232615333335597916968134403869036676265945118713450\n", "18 15\n703140050361297985\n", "100 10\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n", "7 1\n2178766\n", "100 50\n0009909900909009999909009909900090000990999909009909099990099990909000999009009000090099009009009900\n", "20 9\n34540451546587567970\n", "10 0\n3448688665\n", "89 29\n77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n", "200 99\n99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n", "6 3\n967181\n", "20 8\n99999999999999999999\n"], "output": ["734611754\n", "90\n", "1716\n", "295455656\n", "2667\n", "94769311\n", "999404541\n", "5\n", "83\n", "750991187\n", "24010\n", "993802401\n", "509217\n", "32857902\n", "64877692\n", "448688644\n", "206099915\n", "988919917\n", "3506\n", "514450773\n"]}, "generated_tests": {"input": ["57 26\n177946005798852216692528643323484389368821547834013121843\n", "14 4\n00000000000001\n", "5 2\n20409\n", "132 109\n558881515858815818855111851188551181818185155585188885588555158518555118155511851558151188115518858811551515158155181855155181588185\n", "1 0\n8\n", "169 149\n4127820680853085792029730656808609037371898882875765629277699584259523684674321307751545375311931127593565910629995605232615333335597916968134403869036676265945118713450\n", "18 12\n703140050361297985\n", "100 7\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n", "7 0\n2178766\n", "100 51\n0009909900909009999909009909900090000990999909009909099990099990909000999009009000090099009009009900\n", "20 9\n35479551827578201548\n", "6 2\n967181\n", "18 12\n635932984676923184\n", "100 14\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n", "100 54\n0009909900909009999909009909900090000990999909009909099990099990909000999009009000090099009009009900\n", "20 10\n35479551827578201548\n", "6 1\n967181\n", "18 12\n966931982059278431\n", "100 12\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n", "100 37\n0009909900909009999909009909900090000990999909009909099990099990909000999009009000090099009009009900\n", "6 1\n981218\n", "57 13\n194541055484821845535625667390355074960201218054211814589\n", "16 15\n6265128989401659\n", "5 2\n59455\n", "69 42\n183297945360072530910794107549343889209954712421520869219026129138462\n", "1 0\n3\n", "20 13\n34540451546587567970\n", "6 0\n967181\n", "5 2\n11535\n", "169 149\n7489003238349326218261288374069313937027111327405698889787427165520951921140680474748187484139530772935371297502727071978164303758780253615965325590843850757643204442424\n", "100 29\n0009909900909009999909009909900090000990999909009909099990099990909000999009009000090099009009009900\n", "20 11\n35479551827578201548\n", "100 14\n7036913235745778377989838844193205303800118865659481333703309800773456859109497656163765558683916999\n", "18 16\n966931982059278431\n", "6 0\n981218\n", "20 13\n34649144920142746909\n", "6 0\n517079\n", "5 2\n16899\n", "169 149\n4169985358182081879306114422212837505748682815396274540821624961916454905664484456739061213272883724426444019950910906573869706559540268693992480315018611423880828215358\n", "20 11\n28827323325511873534\n", "100 27\n7036913235745778377989838844193205303800118865659481333703309800773456859109497656163765558683916999\n", "20 10\n34649144920142746909\n", "5 2\n33330\n", "20 20\n28827323325511873534\n", "100 25\n7036913235745778377989838844193205303800118865659481333703309800773456859109497656163765558683916999\n", "20 15\n34649144920142746909\n", "100 9\n7036913235745778377989838844193205303800118865659481333703309800773456859109497656163765558683916999\n", "20 15\n46674109390970470391\n", "20 3\n46674109390970470391\n", "20 6\n46674109390970470391\n", "20 1\n46674109390970470391\n", "57 13\n162992426649275510082580373966381591741148940350088704639\n"], "output": ["972256687\n", "715\n", "792\n", "468878506\n", "8\n", "222911735\n", "15440210\n", "198025416\n", "2178766\n", "519561298\n", "108082785\n", "28004\n", "28366090\n", "104851629\n", "259538165\n", "639445044\n", "182086\n", "27645076\n", "133355044\n", "186177649\n", "191701\n", "941249806\n", "81\n", "2409\n", "184123843\n", "3\n", "274668780\n", "967181\n", "990\n", "904008978\n", "29790582\n", "119297686\n", "723862376\n", "2383\n", "981218\n", "244461264\n", "517079\n", "2196\n", "892285796\n", "834355060\n", "909499386\n", "683347509\n", "1206\n", "0\n", "528446177\n", "3472224\n", "596029857\n", "3736596\n", "995578219\n", "286461036\n", "10883208\n", "225970519\n"]}, "short_description": "1. One-sentence summary  \nCompute the sum of an array\u2019s elements each multiplied by a position-dependent combinatorial weight, all taken modulo a large prime.  \n\n2. Core algorithmic approach  \n\u2013 Precompute factorials and inverse factorials to answer binomial-coefficient queries in O(1) after O(n) setup.  \n\u2013 Use prefix sums (and a rolling power-of-10 array) to accumulate weights for each position efficiently rather than recomputing combinations from scratch.  \n\n3. Reusable components  \n\u2013 Factorial + inverse-factorial precomputation for fast nCr under a modulus.  \n\u2013 A binomial-coefficient function using precomputed factorials and Fermat\u2019s little theorem.  \n\u2013 Prefix-sum pattern to accumulate position-based contributions (and a parallel rolling multiplier array for geometric sequences)."}
{"name": "712_D. Memory and Scores", "description": "Memory and his friend Lexa are competing to get higher score in one popular computer game. Memory starts with score a and Lexa starts with score b. In a single turn, both Memory and Lexa get some integer in the range [ - k;k] (i.e. one integer among  - k, - k + 1, - k + 2, ..., - 2, - 1, 0, 1, 2, ..., k - 1, k) and add them to their current scores. The game has exactly t turns. Memory and Lexa, however, are not good at this game, so they both always get a random integer at their turn.\n\nMemory wonders how many possible games exist such that he ends with a strictly higher score than Lexa. Two games are considered to be different if in at least one turn at least one player gets different score. There are (2k + 1)2t games in total. Since the answer can be very large, you should print it modulo 109 + 7. Please solve this problem for Memory.\n\nInput\n\nThe first and only line of input contains the four integers a, b, k, and t (1 \u2264 a, b \u2264 100, 1 \u2264 k \u2264 1000, 1 \u2264 t \u2264 100) \u2014 the amount Memory and Lexa start with, the number k, and the number of turns respectively.\n\nOutput\n\nPrint the number of possible games satisfying the conditions modulo 1 000 000 007 (109 + 7) in one line.\n\nExamples\n\nInput\n\n1 2 2 1\n\n\nOutput\n\n6\n\n\nInput\n\n1 1 1 2\n\n\nOutput\n\n31\n\n\nInput\n\n2 12 3 1\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample test, Memory starts with 1 and Lexa starts with 2. If Lexa picks  - 2, Memory can pick 0, 1, or 2 to win. If Lexa picks  - 1, Memory can pick 1 or 2 to win. If Lexa picks 0, Memory can pick 2 to win. If Lexa picks 1 or 2, Memory cannot win. Thus, there are 3 + 2 + 1 = 6 possible games in which Memory wins.", "solution": "mod=10**9+7\nf=[0]*500000\n\ndef POW(a,b):\n\tif(b==0):\n\t\treturn 1\n\tif(b&1):\n\t\treturn POW(a,b//2)**2*a%mod\n\telse:\n\t\treturn POW(a,b//2)**2\n\ndef C(n,m):\n\tif(m>n):\n\t\treturn 0\n\tt=f[n]*POW(f[m],mod-2)%mod*POW(f[n-m],mod-2)%mod\n\treturn t\n\n\nf[0]=1\nfor i in range(1,500000):\n\tf[i]=f[i-1]*i%mod\na,b,k,t=map(int,input().split(' '))\n\nans=0\nfor i in range(0,2*t+1):\n\tt1=POW(-1,i)*C(2*t,i)%mod\n\tt2=(C(210000+2*k*t-a+b+2*t-1-(2*k+1)*i+1,2*t)-C(1+2*k*t-a+b+2*t-1-(2*k+1)*i,2*t))%mod\n\tans=(ans+t1*t2)%mod\nprint(ans)\n", "difficulty": 10, "public_tests": {"input": ["1 2 2 1\n", "1 1 1 2\n", "2 12 3 1\n"], "output": ["                                                               6\n", "                                                              31\n", "0\n"]}, "private_tests": {"input": ["38 38 701 74\n", "10 10 1000 100\n", "2 56 438 41\n", "40 94 510 53\n", "69 69 443 53\n", "60 60 86 51\n", "40 40 955 95\n", "14 47 184 49\n", "3 7 8 6\n", "81 13 607 21\n", "1 8 1 4\n", "45 54 4 5\n", "5 3 1 1\n", "99 99 913 42\n", "44 80 814 26\n", "35 79 128 21\n", "57 57 896 52\n", "69 69 803 81\n", "1 3 1000 100\n", "66 90 805 16\n", "71 71 891 31\n", "44 85 206 80\n", "70 70 176 56\n", "52 34 89 41\n", "7 8 5 9\n", "6 5 4 3\n", "42 42 2 3\n", "27 27 296 97\n", "6 20 1 1\n", "74 74 791 51\n", "4 6 2 2\n", "79 99 506 18\n", "50 22 5 5\n", "4 6 2 1\n", "65 65 803 79\n", "35 35 353 21\n", "67 67 871 88\n", "100 1 1000 100\n", "100 100 1000 100\n", "87 100 200 80\n", "49 49 631 34\n", "2 6 6 2\n", "49 49 163 15\n", "74 33 868 5\n", "1 1 1000 100\n", "97 22 29 8\n", "59 19 370 48\n", "1 100 42 42\n", "83 83 770 49\n", "10 1 3 3\n", "93 25 958 20\n", "53 79 823 11\n", "42 42 42 42\n", "32 32 44 79\n", "56 56 725 64\n", "6 68 958 41\n", "60 61 772 19\n", "9 4 5 2\n", "42 42 3 2\n", "86 86 373 19\n", "6 4 2 2\n", "78 82 511 33\n", "34 34 706 59\n", "1 100 1000 100\n"], "output": ["                                                       496603581\n", "922257788\n", "                                                       500592304\n", "                                                       233079261\n", "                                                       385620893\n", "                                                       277883413\n", "                                                       600387428\n", "                                                       726421144\n", "                                                       510324293\n", "                                                       762608093\n", "                                                               1\n", "                                                       433203628\n", "                                                               8\n", "                                                       446683872\n", "                                                       414148151\n", "                                                       177972209\n", "                                                       271910130\n", "                                                        74925054\n", "604187087\n", "                                                       593436252\n", "                                                       790044038\n", "                                                       170080402\n", "                                                       990579000\n", "                                                       905639400\n", "                                                       860378382\n", "                                                          282051\n", "                                                            6937\n", "                                                       394599845\n", "                                                               0\n", "                                                       367968499\n", "                                                             122\n", "                                                       486170430\n", "                                                       876439301\n", "                                                               3\n", "                                                       253679300\n", "                                                       149936279\n", "                                                       123371511\n", "603336175\n", "922257788\n", "                                                       913761305\n", "                                                       764129060\n", "                                                            8015\n", "                                                       458364105\n", "                                                       826980486\n", "922257788\n", "                                                       471632954\n", "                                                       125206836\n", "                                                        58785421\n", "                                                       761730117\n", "                                                          112812\n", "                                                       873170266\n", "                                                       526626321\n", "                                                       284470145\n", "                                                        20803934\n", "                                                       338598412\n", "                                                       719351710\n", "                                                       931528755\n", "                                                           11045\n", "                                                            1085\n", "                                                       940701970\n", "                                                             435\n", "                                                       375900871\n", "                                                       274236101\n", "542673827\n"]}, "generated_tests": {"input": ["38 38 701 26\n", "10 18 1000 100\n", "2 56 438 22\n", "40 94 400 53\n", "69 69 873 53\n", "60 86 86 51\n", "40 40 955 60\n", "14 47 184 76\n", "3 7 15 6\n", "9 13 607 21\n", "1 8 1 2\n", "53 54 4 5\n", "5 5 1 1\n", "150 99 913 42\n", "44 89 814 26\n", "35 91 128 21\n", "92 57 896 52\n", "69 133 803 81\n", "1 4 1000 100\n", "66 90 805 12\n", "71 71 891 24\n", "44 85 252 80\n", "70 70 176 15\n", "52 41 89 41\n", "2 8 5 9\n", "1 5 4 3\n", "42 41 2 3\n", "46 27 296 97\n", "4 6 1 2\n", "79 99 290 18\n", "50 22 5 8\n", "6 6 2 1\n", "21 65 803 79\n", "35 19 353 21\n", "67 108 871 88\n", "87 110 200 80\n", "49 49 631 48\n", "2 6 3 2\n", "58 49 163 15\n", "51 33 868 5\n", "97 22 29 5\n", "59 19 370 75\n", "1 100 60 42\n", "83 83 770 55\n", "93 25 958 16\n", "42 42 42 22\n", "32 32 44 17\n", "24 56 725 64\n", "6 68 703 41\n", "60 61 772 5\n", "9 4 7 2\n", "86 86 373 21\n", "6 4 2 3\n", "44 82 511 33\n", "34 34 68 59\n", "6 20 1 2\n", "42 76 3 2\n"], "output": ["559877518\n", "980802515\n", "165184096\n", "313465154\n", "513864777\n", "657850814\n", "196415655\n", "288441949\n", "555239819\n", "71985580\n", "0\n", "492975544\n", "3\n", "784147128\n", "171447990\n", "48835627\n", "775268428\n", "777343700\n", "393144080\n", "639712330\n", "77119568\n", "554805033\n", "166030282\n", "636338904\n", "878105365\n", "129157\n", "8688\n", "438207949\n", "5\n", "211195873\n", "941558417\n", "10\n", "61897025\n", "325441607\n", "465443431\n", "55903100\n", "896051344\n", "326\n", "363647801\n", "268614152\n", "937343492\n", "808625141\n", "643119903\n", "98316896\n", "211365212\n", "125299941\n", "107103468\n", "643951420\n", "714960490\n", "890453222\n", "35055\n", "934777871\n", "10374\n", "852055639\n", "159834842\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:  \nThe code computes a sum of weighted binomial-coefficient terms under modular arithmetic using inclusion\u2013exclusion principles.\n\n2. Core algorithmic approach:  \n- Precompute factorials and inverse factorials for O(1) binomial (\u201cn choose k\u201d) queries.  \n- Fast modular exponentiation (binary exponentiation) for computing inverses and powers.  \n- A single loop applying inclusion\u2013exclusion (alternating sign) to accumulate the final combinatorial sum.\n\n3. Reusable components:  \n- Fast modular exponentiation function (POW) for a^b mod m and inverses via Fermat\u2019s little theorem.  \n- Factorial table buildup plus modular-inverse factorial (via POW) to implement constant-time C(n,k).  \n- Inclusion\u2013exclusion summation pattern (alternating-sign loop summing products of combinatorial terms)."}
{"name": "815_B. Karen and Test", "description": "Karen has just arrived at school, and she has a math test today!\n\n<image>\n\nThe test is about basic addition and subtraction. Unfortunately, the teachers were too busy writing tasks for Codeforces rounds, and had no time to make an actual test. So, they just put one question in the test that is worth all the points.\n\nThere are n integers written on a row. Karen must alternately add and subtract each pair of adjacent integers, and write down the sums or differences on the next row. She must repeat this process on the values on the next row, and so on, until only one integer remains. The first operation should be addition.\n\nNote that, if she ended the previous row by adding the integers, she should start the next row by subtracting, and vice versa.\n\nThe teachers will simply look at the last integer, and then if it is correct, Karen gets a perfect score, otherwise, she gets a zero for the test.\n\nKaren has studied well for this test, but she is scared that she might make a mistake somewhere and it will cause her final answer to be wrong. If the process is followed, what number can she expect to be written on the last row?\n\nSince this number can be quite large, output only the non-negative remainder after dividing it by 109 + 7.\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 200000), the number of numbers written on the first row.\n\nThe next line contains n integers. Specifically, the i-th one among these is ai (1 \u2264 ai \u2264 109), the i-th number on the first row.\n\nOutput\n\nOutput a single integer on a line by itself, the number on the final row after performing the process above.\n\nSince this number can be quite large, print only the non-negative remainder after dividing it by 109 + 7.\n\nExamples\n\nInput\n\n5\n3 6 9 12 15\n\n\nOutput\n\n36\n\n\nInput\n\n4\n3 7 5 2\n\n\nOutput\n\n1000000006\n\nNote\n\nIn the first test case, the numbers written on the first row are 3, 6, 9, 12 and 15.\n\nKaren performs the operations as follows:\n\n<image>\n\nThe non-negative remainder after dividing the final number by 109 + 7 is still 36, so this is the correct output.\n\nIn the second test case, the numbers written on the first row are 3, 7, 5 and 2.\n\nKaren performs the operations as follows:\n\n<image>\n\nThe non-negative remainder after dividing the final number by 109 + 7 is 109 + 6, so this is the correct output.", "solution": "from sys import exit, stdin, stdout\nn = int(stdin.readline())\na = [int(i) for i in stdin.readline().split()]\nif n == 1:\n    print(a[0])\n    exit(0)\nmod = 1000000007\nf = [0] * (n + 1)\nf[0] = 1\nfor i in range(1, n + 1):\n    f[i] = (f[i-1] * i) % mod\n\ndef f_pow(a, k):\n    if k == 0:\n        return 1\n    if k % 2 == 1:\n        return f_pow(a, k - 1) * a % mod\n    else:\n        return f_pow(a * a % mod, k // 2) % mod\n\ndef c(n, k):\n    d = f[k] * f[n - k] % mod\n    return f[n] * f_pow(d, mod - 2) % mod\n     \noper = 1\nwhile not (oper and n % 2 == 0):\n    for i in range(n - 1):\n        a[i] = a[i] + oper * a[i + 1]\n        oper *= -1\n    n -= 1\noper *= 1 if (n//2 % 2) != 0 else -1\n\nsm1 = 0\nsm2 = 0\nfor i in range(n):\n    if i % 2 == 0:\n        sm1 = (sm1 + c(n // 2 - 1, i // 2) * a[i]) % mod\n    else:\n        sm2 = (sm2 + c(n // 2 - 1, i // 2) * a[i]) % mod\nstdout.write(str((sm1 + oper * sm2) % mod))\n", "difficulty": 8, "public_tests": {"input": ["4\n3 7 5 2\n", "5\n3 6 9 12 15\n"], "output": ["\n1000000006\n", "\n36\n"]}, "private_tests": {"input": ["6\n58376259 643910770 5887448 757703054 544067926 902981667\n", "5\n585325539 365329221 412106895 291882089 564718673\n", "7\n941492387 72235422 449924898 783332532 378192988 592684636 147499872\n", "1\n1\n", "16\n985629174 189232688 48695377 692426437 952164554 243460498 173956955 210310239 237322183 96515847 678847559 682240199 498792552 208770488 736004147 176573082\n", "1\n1000000000\n", "19\n519879446 764655030 680293934 914539062 744988123 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 408916833 829654733 223751525 672158759\n", "17\n458679894 912524637 347508634 863280107 226481104 787939275 48953130 553494227 458256339 673787326 353107999 298575751 436592642 233596921 957974470 254020999 707869688\n", "2\n500000004 500000003\n", "4\n702209411 496813081 673102149 561219907\n", "18\n341796022 486073481 86513380 593942288 60606166 627385348 778725113 896678215 384223198 661124212 882144246 60135494 374392733 408166459 179944793 331468916 401182818 69503967\n", "3\n524125987 923264237 374288891\n"], "output": ["\n676517605\n", "\n974257995\n", "\n328894634\n", "\n1\n", "\n347261016\n", "\n1000000000\n", "\n265109293\n", "\n769845668\n", "\n0\n", "\n317278572\n", "\n773499683\n", "\n996365563\n"]}, "generated_tests": {"input": ["5\n1009187738 365329221 412106895 291882089 564718673\n", "7\n941492387 72235422 449924898 783332532 378192988 785847306 147499872\n", "1\n2\n", "16\n985629174 189232688 48695377 692426437 632347651 243460498 173956955 210310239 237322183 96515847 678847559 682240199 498792552 208770488 736004147 176573082\n", "19\n519879446 764655030 680293934 914539062 744988123 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 408916833 829654733 250906024 672158759\n", "2\n407728991 500000003\n", "4\n702209411 496813081 673102149 816141211\n", "18\n341796022 751984387 86513380 593942288 60606166 627385348 778725113 896678215 384223198 661124212 882144246 60135494 374392733 408166459 179944793 331468916 401182818 69503967\n", "3\n524125987 923264237 648553109\n", "4\n3 7 5 0\n", "5\n3 6 9 12 23\n", "5\n1009187738 365329221 337523407 291882089 564718673\n", "7\n941492387 72235422 449924898 508549203 378192988 785847306 147499872\n", "1\n4\n", "16\n985629174 189232688 48695377 692426437 632347651 243460498 79338975 210310239 237322183 96515847 678847559 682240199 498792552 208770488 736004147 176573082\n", "2\n402863513 500000003\n", "4\n702209411 532134360 673102149 816141211\n", "3\n106911375 923264237 648553109\n", "4\n3 7 2 0\n", "5\n443128449 365329221 337523407 291882089 564718673\n", "7\n941492387 72235422 449924898 508549203 378192988 836405597 147499872\n", "1\n8\n", "16\n985629174 189232688 48695377 692426437 632347651 243460498 79338975 210310239 237322183 96515847 678847559 682240199 498792552 208770488 736004147 263328967\n", "2\n402863513 795052181\n", "4\n702209411 52793136 673102149 816141211\n", "3\n182065195 923264237 648553109\n", "5\n5 6 9 7 23\n", "5\n364246207 365329221 337523407 291882089 564718673\n", "7\n941492387 72235422 449924898 508549203 614166628 836405597 147499872\n", "1\n0\n", "16\n985629174 189232688 48695377 692426437 632347651 84418761 79338975 210310239 237322183 96515847 678847559 682240199 498792552 208770488 736004147 263328967\n", "2\n402863513 30848800\n", "4\n702209411 44343710 673102149 816141211\n", "3\n31553688 923264237 648553109\n", "5\n5 6 17 7 23\n", "5\n364246207 365329221 337523407 291882089 938186731\n", "7\n909477052 72235422 449924898 508549203 614166628 836405597 147499872\n", "16\n985629174 189232688 48695377 692426437 632347651 84418761 79338975 210310239 237322183 96515847 678847559 682240199 498792552 208770488 197289383 263328967\n", "2\n402863513 19365127\n", "4\n702209411 44343710 673102149 502163887\n", "3\n31553688 923264237 1004891379\n", "4\n6 2 3 0\n", "5\n5 6 17 7 39\n", "7\n909477052 72235422 491411672 508549203 614166628 836405597 147499872\n", "16\n999398008 189232688 48695377 692426437 632347651 84418761 79338975 210310239 237322183 96515847 678847559 682240199 498792552 208770488 197289383 263328967\n", "2\n402863513 30174005\n", "4\n323946631 44343710 673102149 502163887\n", "3\n31553688 1068026867 1004891379\n", "4\n6 2 1 0\n", "5\n364246207 365329221 405727045 386979084 938186731\n", "7\n909477052 72235422 491411672 875801315 614166628 836405597 147499872\n", "16\n999398008 189232688 48695377 692426437 632347651 84418761 79338975 210310239 237322183 96515847 678847559 682240199 498792552 286178843 197289383 263328967\n", "2\n402863513 22591375\n", "4\n323946631 44343710 673102149 823893227\n", "5\n3 6 9 7 23\n", "4\n6 7 2 0\n", "4\n6 7 3 0\n", "5\n364246207 365329221 337523407 386979084 938186731\n", "5\n5 6 17 0 39\n"], "output": ["398120187\n", "715219974\n", "2\n", "631106102\n", "319418291\n", "907728994\n", "62357268\n", "39410582\n", "722101345\n", "1\n", "44\n", "248953211\n", "616086665\n", "4\n", "319476823\n", "902863516\n", "27035989\n", "304886733\n", "1000000005\n", "682893929\n", "717203247\n", "8\n", "232720938\n", "197915687\n", "506377213\n", "380040553\n", "46\n", "604011687\n", "481229607\n", "0\n", "572597394\n", "433712313\n", "514826639\n", "229529046\n", "62\n", "977479745\n", "449214272\n", "33882630\n", "422228640\n", "828803963\n", "873190783\n", "7\n", "78\n", "490701046\n", "47651464\n", "433037518\n", "450541183\n", "162716036\n", "5\n", "113887014\n", "959709487\n", "505792986\n", "425454888\n", "128811843\n", "44\n", "1\n", "2\n", "977479745\n", "78\n"]}, "short_description": "1. One-sentence summary  \nCompute a single number by repeatedly combining adjacent elements with alternating signs and then collapsing the resulting sequence into a weighted sum using binomial coefficients under a prime modulus.\n\n2. Core algorithmic approach  \n- Precompute factorials and use modular exponentiation (binary\u2010power) to support combinations (n choose k) mod a prime via Fermat\u2019s little theorem.  \n- Apply an in-place, greedy reduction of the array until its length is even, flipping a sign multiplier (\u201coper\u201d) each step.  \n- Finally compute two accumulating sums over even and odd positions weighted by binomial coefficients and combine them with the final sign.\n\n3. Reusable components  \n- Factorial table construction and modular inverse via binary exponentiation (for nCk under a prime)  \n- A function for fast exponentiation (a^k mod m) by exponentiation by squaring  \n- Pattern for in-place adjacent-pair reduction of an array with an alternating sign factor"}
{"name": "1342_E. Placing Rooks", "description": "Calculate the number of ways to place n rooks on n \u00d7 n chessboard so that both following conditions are met:\n\n  * each empty cell is under attack; \n  * exactly k pairs of rooks attack each other. \n\n\n\nAn empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:\n\n<image> One of the ways to place the rooks for n = 3 and k = 2\n\nTwo ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.\n\nThe answer might be large, so print it modulo 998244353.\n\nInput\n\nThe only line of the input contains two integers n and k (1 \u2264 n \u2264 200000; 0 \u2264 k \u2264 (n(n - 1))/(2)).\n\nOutput\n\nPrint one integer \u2014 the number of ways to place the rooks, taken modulo 998244353.\n\nExamples\n\nInput\n\n\n3 2\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n3 3\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n4 0\n\n\nOutput\n\n\n24\n\n\nInput\n\n\n1337 42\n\n\nOutput\n\n\n807905441", "solution": "import io,os\ninput=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nimport sys\ndef solve(n,k):\n    mod=998244353\n    if k==0:\n        ans=1\n        for i in range(1,n+1):\n            ans*=i\n            ans%=mod\n        return ans\n    if k>=n:\n        return 0\n    \n    inv=lambda x: pow(x,mod-2,mod)\n    Fact=[1] #\u968e\u4e57\n    for i in range(1,n+1):\n        Fact.append(Fact[i-1]*i%mod)\n    Finv=[0]*(n+1) #\u968e\u4e57\u306e\u9006\u5143\n    Finv[-1]=inv(Fact[-1])\n    for i in range(n-1,-1,-1):\n        Finv[i]=Finv[i+1]*(i+1)%mod\n    def comb(n,r):\n        if n<r:\n            return 0\n        return Fact[n]*Finv[r]*Finv[n-r]%mod\n    \n    m=n-k\n    t=1\n    ans=0\n    for r in range(m,0,-1):\n        ans+=t*comb(m,r)*pow(r,n,mod)\n        ans%=mod\n        t*=-1\n    ans*=comb(n,m)*2\n    ans%=mod\n    return ans\n\ndef main():\n    n,k=map(int,input().split())\n    ans=solve(n,k)\n    sys.stdout.write(str(ans)+'\\n')\n    \nif __name__=='__main__':\n    main()", "difficulty": 11, "public_tests": {"input": ["4 0\n", "3 2\n", "1337 42\n", "3 3\n"], "output": ["24\n", "6\n", "807905441\n", "0\n"]}, "private_tests": {"input": ["4 5\n", "4 3\n", "3000 3000\n", "200000 200000\n", "200000 1000\n", "3000 0\n", "2 1\n", "3 0\n", "4 4\n", "3000 42\n", "4 1\n", "200000 199999\n", "4 6\n", "200000 199998\n", "200000 3393\n", "1 0\n", "3 1\n", "1500 1000\n", "2 0\n", "200000 19999900000\n", "3000 4498500\n", "4 2\n", "3000 3713\n", "3000 2999\n", "200000 0\n", "200000 800000\n", "3000 1337\n", "200000 100000\n", "200000 1\n", "200000 100\n"], "output": ["0\n", "8\n", "0\n", "0\n", "13181387\n", "201761277\n", "4\n", "6\n", "0\n", "281860640\n", "288\n", "400000\n", "0\n", "508670650\n", "259194802\n", "1\n", "36\n", "229881914\n", "2\n", "0\n", "0\n", "168\n", "0\n", "6000\n", "638474417\n", "0\n", "729468301\n", "668585001\n", "466559115\n", "431967939\n"]}, "generated_tests": {"input": ["4 7\n", "200000 132521\n", "30875 1000\n", "2094 0\n", "6 0\n", "7 4\n", "3000 78\n", "5 0\n", "200000 89177\n", "200000 3093\n", "7 0\n", "5764 3713\n", "4632 2999\n", "2591 1337\n", "200000 110\n", "6 1\n", "2488 42\n", "8 7\n", "4307 1000\n", "4001 0\n", "11 4\n", "3000 92\n", "10 0\n", "124271 89177\n", "200000 3883\n", "9 0\n", "4632 4364\n", "2591 2525\n", "11 1\n", "3543 42\n", "8 2\n", "4307 0000\n", "945 0\n", "15 4\n", "5213 92\n", "42569 3883\n", "12 0\n", "2591 1733\n", "436 3000\n", "49226 199999\n", "3 4\n", "354 1000\n", "200000 26492691161\n", "1179 4498500\n", "200000 666153\n", "3 6\n", "436 4882\n", "114218 132521\n", "49226 334171\n", "354 1100\n", "1179 2209383\n", "1097 3713\n", "200000 1275699\n", "0 2\n", "230 4882\n", "71056 132521\n", "6365 334171\n", "36980 89177\n", "99 1100\n", "1179 1231488\n", "404 3713\n", "4632 5442\n"], "output": ["0\n", "660798392\n", "45848221\n", "552437276\n", "720\n", "126420\n", "784900207\n", "120\n", "773611800\n", "395522989\n", "5040\n", "709890387\n", "654932331\n", "320382228\n", "824308468\n", "21600\n", "329482299\n", "16\n", "261523254\n", "846183233\n", "220309611\n", "748741394\n", "3628800\n", "535280058\n", "959684298\n", "362880\n", "39004266\n", "536532666\n", "397870588\n", "128587371\n", "10725120\n", "406193428\n", "32030240\n", "292464441\n", "728186961\n", "175008997\n", "479001600\n", "865597061\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:\n   Compute a combinatorial count expressed via an inclusion\u2013exclusion sum and binomial coefficients under a prime modulus.\n\n2. Core algorithmic approach:\n   \u2013 Precompute factorials and inverse factorials (O(n)) for fast nCr queries.  \n   \u2013 Use modular exponentiation for r\u207f.  \n   \u2013 Apply inclusion\u2013exclusion over r=1\u2026m to accumulate the desired sum.\n\n3. Reusable components:\n   \u2013 Factorial & inverse\u2010factorial precomputation for O(1) binomial coefficients (nCr mod p).  \n   \u2013 Modular exponentiation function (pow with modulus).  \n   \u2013 Inclusion\u2013exclusion accumulation pattern (alternating signs over subsets)."}
{"name": "1194_F. Crossword Expert", "description": "Today Adilbek is taking his probability theory test. Unfortunately, when Adilbek arrived at the university, there had already been a long queue of students wanting to take the same test. Adilbek has estimated that he will be able to start the test only T seconds after coming. \n\nFortunately, Adilbek can spend time without revising any boring theorems or formulas. He has an app on this smartphone which contains n Japanese crosswords to solve. Adilbek has decided to solve them all one by one in the order they are listed in the app, without skipping any crossword. For each crossword, a number t_i is given that represents the time it takes an average crossword expert to solve this crossword (the time is given in seconds).\n\nAdilbek is a true crossword expert, but, unfortunately, he is sometimes unlucky in choosing the way to solve the crossword. So, it takes him either t_i seconds or t_i + 1 seconds to solve the i-th crossword, equiprobably (with probability 1/2 he solves the crossword in exactly t_i seconds, and with probability 1/2 he has to spend an additional second to finish the crossword). All these events are independent.\n\nAfter T seconds pass (or after solving the last crossword, if he manages to do it in less than T seconds), Adilbek closes the app (if he finishes some crossword at the same moment, that crossword is considered solved; otherwise Adilbek does not finish solving the current crossword at all). He thinks it would be an interesting probability theory problem to calculate E \u2014 the expected number of crosswords he will be able to solve completely. Can you calculate it? \n\nRecall that the expected value of a discrete random variable is the probability-weighted average of all possible values \u2014 in this problem it means that the expected value of the number of solved crosswords can be calculated as E = \u2211 _{i = 0}^{n} i p_i, where p_i is the probability that Adilbek will solve exactly i crosswords. \n\nWe can represent E as rational fraction P/Q with Q > 0. To give the answer, you should print P \u22c5 Q^{-1} mod (10^9 + 7).\n\nInput\n\nThe first line contains two integers n and T (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 T \u2264 2 \u22c5 10^{14}) \u2014 the number of crosswords and the time Adilbek has to spend, respectively.\n\nThe second line contains n integers t_1, t_2, ..., t_n (1 \u2264 t_i \u2264 10^9), where t_i is the time it takes a crossword expert to solve the i-th crossword.\n\nNote that Adilbek solves the crosswords in the order they are given in the input without skipping any of them.\n\nOutput\n\nPrint one integer \u2014 the expected value of the number of crosswords Adilbek solves in T seconds, expressed in the form of P \u22c5 Q^{-1} mod (10^9 + 7).\n\nExamples\n\nInput\n\n\n3 5\n2 2 2\n\n\nOutput\n\n\n750000007\n\n\nInput\n\n\n3 5\n2 1 2\n\n\nOutput\n\n\n125000003\n\nNote\n\nThe answer for the first sample is equal to 14/8.\n\nThe answer for the second sample is equal to 17/8.", "solution": "mod = 10 ** 9 + 7\nMAX = 2 * 10 ** 5+2\n \nr = [1] * MAX  \nfactorial = [1] * MAX\nrfactorial = [1] * MAX\nrp = [1] * MAX \n\n#Permite precalcular factorial hasta \"MAX\", para evitar tener que calcularlo varias veces\n#dentro de la ejecucion del programa.\nfor i in range(2, MAX):\n    factorial[i]   = i * factorial[i - 1] % mod\n    \n    r[i] = mod - (mod // i) * r[mod%i] % mod\n\n    rfactorial[i] = rfactorial[i-1] * r[i] % mod\n\n#Calcula el inverso de \"p\" para evitar usar fracciones racionales.    \nfor i in range(1, MAX):\n    rp[i] = rp[i - 1] * (mod + 1) // 2 % mod\n    \nn, T = list(map(int, input().split()))\nt = list(map(int, input().split()))\nt.append(10**10+1)\n\n#Permite calcular las Combinacione de n en k.\ndef Combination(n,k):\n    return factorial[n]*rfactorial[k]*rfactorial[n-k]\n \nS=0\nE=0\n\nfor i in range(0,n+1):\n    sim = 0\n    for add in range(2):\n        l_, r_ =  max(0, T-S-t[i] + add), min(i, T-S)\n        \n        for x in range(l_, r_+1):\n            sim += Combination(i,x) * rp[i+1]    \n    E = (E + i * sim) % mod\n    S += t[i]   \n    \nprint(E)\n", "difficulty": 12, "public_tests": {"input": ["3 5\n2 2 2\n", "3 5\n2 1 2\n"], "output": ["750000007\n", "125000003\n"]}, "private_tests": {"input": ["20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "20 31\n2 2 1 2 1 1 2 1 2 2 1 2 1 2 1 1 1 2 1 2\n", "20 26\n1 2 1 1 1 2 1 1 2 2 2 1 2 1 2 1 1 2 2 1\n", "20 28\n2 1 1 2 2 1 2 2 2 1 2 1 1 1 1 2 1 1 2 1\n", "5 10\n2 2 2 2 1\n", "20 25\n1 1 1 1 1 1 2 2 1 1 2 1 2 2 1 2 1 1 2 2\n", "20 29\n2 2 1 2 2 1 1 1 2 2 2 2 2 2 1 1 2 2 2 2\n", "20 30\n2 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2 1 1 1 2\n", "1 1\n1\n", "20 33\n1 1 1 1 1 2 1 1 1 2 1 1 1 2 2 2 2 1 2 1\n", "20 32\n2 1 1 1 1 2 2 2 1 1 1 1 2 1 2 1 2 2 2 1\n", "20 27\n1 2 1 2 1 2 1 2 2 1 2 2 1 2 2 2 1 1 2 1\n", "20 31\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "20 34\n2 2 2 1 2 1 2 2 2 2 1 2 2 2 2 1 1 1 2 2\n", "5 5\n1 1 1 2 2\n", "20 29\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"], "output": ["310937903\n", "153515832\n", "509799974\n", "81361785\n", "875000010\n", "846324940\n", "468261735\n", "888820671\n", "500000004\n", "165332813\n", "240958232\n", "867942829\n", "333612464\n", "676596661\n", "437500006\n", "356287024\n"]}, "generated_tests": {"input": ["20 30\n1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "20 31\n2 1 1 2 1 1 2 1 2 2 1 2 1 2 1 1 1 2 1 2\n", "20 26\n1 2 1 1 1 2 1 1 2 2 2 1 2 1 2 1 1 4 2 1\n", "5 10\n0 2 2 2 1\n", "20 25\n1 1 1 1 1 2 2 2 1 1 2 1 2 2 1 2 1 1 2 2\n", "20 29\n2 2 1 2 2 1 1 1 2 2 2 2 1 2 1 1 2 2 2 2\n", "20 30\n2 2 1 2 1 1 1 1 2 1 1 1 1 1 2 2 1 1 1 2\n", "20 33\n1 1 1 1 1 2 1 1 1 2 1 1 1 0 2 2 2 1 2 1\n", "20 32\n2 1 1 0 1 2 2 2 1 1 1 1 2 1 2 1 2 2 2 1\n", "20 31\n1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1\n", "20 34\n2 2 2 1 2 1 2 3 2 2 1 2 2 2 2 1 1 1 2 2\n", "5 5\n1 1 1 3 2\n", "20 29\n1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1\n", "3 5\n3 2 2\n", "20 31\n2 1 1 2 1 1 2 1 2 2 1 2 1 2 1 1 1 3 1 2\n", "20 26\n1 2 1 1 1 2 1 1 2 2 2 1 2 2 2 1 1 4 2 1\n", "20 25\n1 1 1 1 0 2 2 2 1 1 2 1 2 2 1 2 1 1 2 2\n", "20 29\n2 2 1 2 2 1 0 1 2 2 2 2 1 2 1 1 2 2 2 2\n", "20 30\n2 2 1 2 1 1 1 1 2 1 0 1 1 1 2 2 1 1 1 2\n", "20 33\n1 2 1 1 1 2 1 1 1 2 1 1 1 0 2 2 2 1 2 1\n", "20 32\n2 0 1 0 1 2 2 2 1 1 1 1 2 1 2 1 2 2 2 1\n", "20 34\n2 2 2 1 2 1 2 3 2 3 1 2 2 2 2 1 1 1 2 2\n", "5 5\n0 1 1 3 2\n", "20 29\n1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1\n", "20 31\n2 1 1 2 1 1 2 2 2 2 1 2 1 2 1 1 1 3 1 2\n", "20 26\n1 2 1 1 1 2 1 1 2 2 4 1 2 2 2 1 1 4 2 1\n", "20 29\n1 2 1 2 2 1 0 1 2 2 2 2 1 2 1 1 2 2 2 2\n", "20 30\n2 2 1 2 1 1 1 1 2 0 0 1 1 1 2 2 1 1 1 2\n", "20 33\n1 2 2 1 1 2 1 1 1 2 1 1 1 0 2 2 2 1 2 1\n", "20 32\n2 0 1 0 1 2 2 2 1 1 1 1 2 1 2 2 2 2 2 1\n", "20 29\n1 1 1 1 1 1 1 1 1 1 1 4 1 1 1 2 1 1 1 1\n", "3 4\n3 2 2\n", "20 26\n1 3 1 1 1 2 1 1 2 2 4 1 2 2 2 1 1 4 2 1\n", "20 29\n1 2 1 2 2 1 0 1 2 2 2 2 1 2 1 1 2 4 2 2\n", "20 33\n1 2 2 1 1 2 1 1 1 2 1 2 1 0 2 2 2 1 2 1\n", "20 32\n2 0 1 0 1 2 2 2 1 1 1 1 2 1 2 4 2 2 2 1\n", "20 34\n2 2 2 1 2 1 2 1 2 3 1 2 2 2 2 1 1 1 2 4\n", "20 31\n2 1 1 2 1 0 2 2 2 2 1 2 1 2 1 1 1 5 1 2\n", "20 29\n1 2 1 2 2 1 0 1 2 2 2 2 1 2 1 1 2 3 2 2\n", "20 32\n2 0 1 0 1 2 2 2 1 1 1 1 2 1 2 4 2 2 4 1\n", "20 31\n4 1 1 2 1 0 2 2 2 2 1 2 1 2 1 1 1 5 1 2\n", "20 26\n1 3 1 1 0 2 1 1 2 2 4 1 2 2 2 2 1 4 2 1\n", "20 29\n1 2 1 2 1 1 0 1 2 2 2 2 1 2 1 1 2 3 2 2\n", "20 31\n4 1 1 2 1 0 2 2 2 2 1 3 1 2 1 1 1 5 1 2\n", "3 5\n3 2 1\n", "20 34\n2 2 2 1 2 1 2 3 2 3 1 2 2 2 2 1 1 1 2 4\n", "20 31\n2 1 1 2 1 0 2 2 2 2 1 2 1 2 1 1 1 3 1 2\n", "3 4\n3 2 0\n", "20 26\n1 3 1 1 0 2 1 1 2 2 4 1 2 2 2 1 1 4 2 1\n", "20 33\n1 2 2 1 1 2 1 1 1 2 0 2 1 0 2 2 2 1 2 1\n", "20 34\n2 2 3 1 2 1 2 1 2 3 1 2 2 2 2 1 1 1 2 4\n", "20 33\n1 2 2 1 1 0 1 1 1 2 0 2 1 0 2 2 2 1 2 1\n", "20 26\n1 3 1 1 0 2 1 1 2 2 4 1 2 2 2 2 1 0 2 1\n", "20 29\n1 2 1 2 1 1 0 2 2 2 2 2 1 2 1 1 2 3 2 2\n"], "output": ["333612464\n", "948458694\n", "638427752\n", "312500007\n", "930210133\n", "75138106\n", "921568893\n", "854688669\n", "118091601\n", "310937903\n", "927604696\n", "875000009\n", "534345649\n", "250000003\n", "421704311\n", "674163836\n", "846324940\n", "649578113\n", "888820671\n", "942436243\n", "534564993\n", "759798069\n", "562500007\n", "232238789\n", "717810651\n", "909683246\n", "379091280\n", "834438347\n", "165332813\n", "70758837\n", "140178698\n", "1\n", "897491473\n", "438755053\n", "50800341\n", "803553603\n", "208753602\n", "476097126\n", "123455063\n", "874344848\n", "541385669\n", "424194351\n", "224611299\n", "825286885\n", "250000003\n", "759798069\n", "421704311\n", "1\n", "909683246\n", "165332813\n", "927604696\n", "854688669\n", "424194351\n", "123455063\n"]}, "short_description": "1. One-sentence summary:  \nCompute the sum of weighted counts of ways to choose a subset of prefix elements that satisfy a running\u2010sum constraint, all done under a large prime modulus.\n\n2. Core algorithmic approach:  \n- Precompute factorials and modular inverses (O(MAX)) for fast nCr in O(1).  \n- Iterate over prefixes, turning the \u201csum \u2264 T\u201d constraint into bounds on the subset size x and accumulating combination values multiplied by precomputed inverse powers (effectively a sliding\u2010window count of valid subsets).  \n\n3. Reusable components:  \n- Factorial + modular\u2010inverse precomputation (arrays factorial[i], rfactorial[i], modular inverses r[i]) for O(1) binomial coefficients.  \n- Combination(n, k) wrapper: factorial[n] * rfactorial[k] * rfactorial[n\u2013k] % mod.  \n- Prefix\u2010sum scan with dynamic window bounds to count valid subset sizes, using precomputed inverse powers for probability weights."}
{"name": "690_D2. The Wall (medium)", "description": "Heidi the Cow is aghast: cracks in the northern Wall? Zombies gathering outside, forming groups, preparing their assault? This must not happen! Quickly, she fetches her HC2 (Handbook of Crazy Constructions) and looks for the right chapter:\n\nHow to build a wall:\n\n  1. Take a set of bricks.\n  2. Select one of the possible wall designs. Computing the number of possible designs is left as an exercise to the reader.\n  3. Place bricks on top of each other, according to the chosen design.\n\n\n\nThis seems easy enough. But Heidi is a Coding Cow, not a Constructing Cow. Her mind keeps coming back to point 2b. Despite the imminent danger of a zombie onslaught, she wonders just how many possible walls she could build with up to n bricks.\n\nA wall is a set of wall segments as defined in the easy version. How many different walls can be constructed such that the wall consists of at least 1 and at most n bricks? Two walls are different if there exist a column c and a row r such that one wall has a brick in this spot, and the other does not.\n\nAlong with n, you will be given C, the width of the wall (as defined in the easy version). Return the number of different walls modulo 106 + 3.\n\nInput\n\nThe first line contains two space-separated integers n and C, 1 \u2264 n \u2264 500000, 1 \u2264 C \u2264 200000.\n\nOutput\n\nPrint the number of different walls that Heidi could build, modulo 106 + 3.\n\nExamples\n\nInput\n\n5 1\n\n\nOutput\n\n5\n\n\nInput\n\n2 2\n\n\nOutput\n\n5\n\n\nInput\n\n3 2\n\n\nOutput\n\n9\n\n\nInput\n\n11 5\n\n\nOutput\n\n4367\n\n\nInput\n\n37 63\n\n\nOutput\n\n230574\n\nNote\n\nThe number 106 + 3 is prime.\n\nIn the second sample case, the five walls are: \n    \n    \n      \n                B        B  \n    B., .B, BB, B., and .B  \n    \n\nIn the third sample case, the nine walls are the five as in the second sample case and in addition the following four: \n    \n    \n      \n    B    B  \n    B    B  B        B  \n    B., .B, BB, and BB  \n    ", "solution": "result=0\nmod=10**6 +3\nn,C=map(int,input().split()) #recibimos la entrada \n#calc n!\ndef fact(n):\n    fact=1\n    for i in range(1,n+1): #1*2*3*...*n = n*(n-1)*(n-2)...*1\n        fact=(fact*i)%mod #\n    return fact\n\ndef pow(a,b): #Algoritmo de Exponenciacion binaria\n    exp=1 # Caso base a^1=a\n    x=a % mod\n    b=b%(mod-1)\n    while b > 0: \n        if b % 2 == 1:# En caso que b sea impar\n            exp=(exp*x)%mod\n            # En caso que b sea impar\n        x=(x*x)%mod\n        b=b//2\n    return exp    \n\n#cacl (n+C)!/(n!*C!) , usamos el pequenno teorema de Fermat a^{p-1}congruente 1(p) a^{p-2}congruente a^{-1}(p)\n# de esta forma en vez de 1/n! y 1/C! usamos n!**p-2 C!**p-2 en este caso p=mod \nresult=fact(n+C)*pow(fact(n),mod-2)*pow(fact(C),mod-2)-1 # C(n+C,C)= n+C!\n\nprint(int(result%mod))", "difficulty": 10, "public_tests": {"input": ["37 63\n", "11 5\n", "3 2\n", "2 2\n", "5 1\n"], "output": ["230574\n", "4367\n", "9\n", "5\n", "5\n"]}, "private_tests": {"input": ["350000 180000\n", "400000 140000\n", "350000 140000\n", "450000 160000\n", "400000 180000\n", "450000 200000\n", "450000 180000\n", "500000 140000\n", "500000 160000\n", "350000 160000\n", "450000 140000\n", "400000 160000\n", "1 1\n", "400000 200000\n", "500000 180000\n", "500000 200000\n", "350000 200000\n"], "output": ["708073\n", "956370\n", "453366\n", "926957\n", "376155\n", "997315\n", "135727\n", "775486\n", "298591\n", "155549\n", "175993\n", "480365\n", "1\n", "388234\n", "901135\n", "781209\n", "504934\n"]}, "generated_tests": {"input": ["327872 140000\n", "350000 131476\n", "450000 62389\n", "187667 140000\n", "2 1\n", "400000 167815\n", "500000 56617\n", "3 4\n", "327872 51860\n", "350000 217889\n", "450000 106267\n", "187667 45002\n", "400000 194560\n", "500000 44685\n", "3 1\n", "26610 51860\n", "142843 217889\n", "450000 48691\n", "187667 31324\n", "215447 194560\n", "500000 51885\n", "237243 48691\n", "187667 17129\n", "215447 204395\n", "391971 51885\n", "394716 48691\n", "187667 21401\n", "411515 204395\n", "391971 12368\n", "187667 39732\n", "411515 114829\n", "391971 15048\n", "187667 2938\n", "411515 158556\n", "359351 2938\n", "492412 158556\n", "280426 2938\n", "452659 2938\n", "452659 5027\n", "452659 8450\n", "275915 8450\n", "275915 12510\n", "64607 12510\n", "88235 12510\n", "96477 12510\n", "170623 12510\n", "99277 12510\n", "99277 22558\n", "107485 22558\n", "107485 4597\n", "87953 4597\n", "168457 4597\n", "168457 110\n", "168457 100\n", "322972 100\n", "290880 100\n", "290880 110\n"], "output": ["931863\n", "280928\n", "398446\n", "326733\n", "2\n", "108918\n", "392973\n", "34\n", "822518\n", "309856\n", "903894\n", "277959\n", "626568\n", "113264\n", "3\n", "361531\n", "621265\n", "853011\n", "681639\n", "933413\n", "519527\n", "624707\n", "624749\n", "191311\n", "547562\n", "285164\n", "74218\n", "117740\n", "407804\n", "740237\n", "729169\n", "809655\n", "947262\n", "323769\n", "705874\n", "320881\n", "195833\n", "426617\n", "211660\n", "9384\n", "42474\n", "949637\n", "321544\n", "194248\n", "549261\n", "825346\n", "484414\n", "695487\n", "668000\n", "479103\n", "504400\n", "212732\n", "524071\n", "343380\n", "27890\n", "148186\n", "156187\n"]}, "short_description": "1. One-sentence summary  \nCompute a binomial\u2010coefficient\u2013based value modulo a prime by precomputing factorials and using Fermat\u2019s little theorem for inverses.\n\n2. Core algorithmic approach  \nPrecompute factorials in O(n+C), then apply binary-exponentiation to compute modular inverses via Fermat\u2019s little theorem, yielding the desired binomial coefficient mod p.\n\n3. Reusable components  \n- factorial_mod(n, mod): iterative computation of n! % mod  \n- mod_pow(base, exponent, mod): fast exponentiation to compute base^exponent % mod  \n- binomial_mod(n, k, mod): combine factorial_mod and mod_pow to compute C(n, k) % mod under a prime modulus"}
{"name": "1523_E. Crypto Lights", "description": "<image>\n\nTo monitor cryptocurrency exchange rates trader William invented a wonderful device consisting of n lights arranged in a row. The device functions in the following way:\n\nInitially, all lights on William's device are turned off. At the beginning of a new iteration the device randomly, with a uniform distribution, picks a light that is turned off and turns it on, telling William which cryptocurrency he should invest in. After this iteration if any k consecutive lights contain more than one turned on light, then the device finishes working.\n\nWilliam doesn't like uncertainty, so he wants you to calculate the expected value of the number of lights that are turned on in the device after it finishes working.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10). Description of the test cases follows.\n\nThe only line for each test case contains two integers n and k (2 \u2264 k \u2264 n \u2264 10^5), which are the total number of lights and the length of subsegment of lights that are being checked, respectively.\n\nOutput\n\nFor each test case print the answer, modulo 10^9+7. \n\nFormally, let M = 10^9+7. It can be shown that the answer can be expressed as an irreducible fraction p/q, where p and q are integers and q not \u2261 0 \\pmod{M}. Output the integer equal to p \u22c5 q^{-1} mod M. In other words, output such an integer x that 0 \u2264 x < M and x \u22c5 q \u2261 p \\pmod{M}.\n\nExample\n\nInput\n\n\n3\n3 2\n15 2\n40 15\n\n\nOutput\n\n\n333333338\n141946947\n329622137\n\nNote\n\nExplanation of the first sample test case:\n\nLet's write out all possible sequences of light toggles, which will make the device complete its operation:\n\n  1. (1, 2) \u2014 2 lights are turned on \n  2. (1, 3, 2) \u2014 3 lights are turned on \n  3. (2, 1) \u2014 2 lights are turned on \n  4. (2, 3) \u2014 2 lights are turned on \n  5. (3, 2) \u2014 2 lights are turned on \n  6. (3, 1, 2) \u2014 3 lights are turned on \n\n\n\nThen the final expected value will be equal to 2/6 + 3/6 + 2/6 + 2/6 + 2/6 + 3/6 = 14/6 = 7/3. \n\nThen the required output will be 333333338, since 333333338 \u22c5 3 \u2261 7 \\pmod{10^9+7}.", "solution": "\ndef divisors(M):\n    d=[]\n    i=1\n    while M>=i**2:\n        if M%i==0:\n            d.append(i)\n            if i**2!=M:\n                d.append(M//i)\n        i=i+1\n    return d\n\ndef popcount(x):\n    x = x - ((x >> 1) & 0x55555555)\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n    x = (x + (x >> 4)) & 0x0f0f0f0f\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 0x0000007f\n\ndef eratosthenes(n):\n    res=[0 for i in range(n+1)]\n    prime=set([])\n    for i in range(2,n+1):\n        if not res[i]:\n            prime.add(i)\n            for j in range(1,n//i+1):\n                res[i*j]=1\n    return prime\n\ndef factorization(n):\n    res=[]\n    for p in prime:\n        if n%p==0:\n            while n%p==0:\n                n//=p\n            res.append(p)\n    if n!=1:\n        res.append(n)\n    return res\n\ndef euler_phi(n):\n    res = n\n    for x in range(2,n+1):\n        if x ** 2 > n:\n            break\n        if n%x==0:\n            res = res//x * (x-1)\n            while n%x==0:\n                n //= x\n    if n!=1:\n        res = res//n * (n-1)\n    return res\n\ndef ind(b,n):\n    res=0\n    while n%b==0:\n        res+=1\n        n//=b\n    return res\n\ndef isPrimeMR(n):\n    d = n - 1\n    d = d // (d & -d)\n    L = [2, 3, 5, 7, 11, 13, 17]\n    for a in L:\n        t = d\n        y = pow(a, t, n)\n        if y == 1: continue\n        while y != n - 1:\n            y = (y * y) % n\n            if y == 1 or t == n - 1: return 0\n            t <<= 1\n    return 1\ndef findFactorRho(n):\n    from math import gcd\n    m = 1 << n.bit_length() // 8\n    for c in range(1, 99):\n        f = lambda x: (x * x + c) % n\n        y, r, q, g = 2, 1, 1, 1\n        while g == 1:\n            x = y\n            for i in range(r):\n                y = f(y)\n            k = 0\n            while k < r and g == 1:\n                ys = y\n                for i in range(min(m, r - k)):\n                    y = f(y)\n                    q = q * abs(x - y) % n\n                g = gcd(q, n)\n                k += m\n            r <<= 1\n        if g == n:\n            g = 1\n            while g == 1:\n                ys = f(ys)\n                g = gcd(abs(x - ys), n)\n        if g < n:\n            if isPrimeMR(g): return g\n            elif isPrimeMR(n // g): return n // g\n            return findFactorRho(g)\ndef primeFactor(n):\n    i = 2\n    ret = {}\n    rhoFlg = 0\n    while i*i <= n:\n        k = 0\n        while n % i == 0:\n            n //= i\n            k += 1\n        if k: ret[i] = k\n        i += 1 + i % 2\n        if i == 101 and n >= 2 ** 20:\n            while n > 1:\n                if isPrimeMR(n):\n                    ret[n], n = 1, 1\n                else:\n                    rhoFlg = 1\n                    j = findFactorRho(n)\n                    k = 0\n                    while n % j == 0:\n                        n //= j\n                        k += 1\n                    ret[j] = k\n\n    if n > 1: ret[n] = 1\n    if rhoFlg: ret = {x: ret[x] for x in sorted(ret)}\n    return ret\n\ndef divisors(n):\n    res = [1]\n    prime = primeFactor(n)\n    for p in prime:\n        newres = []\n        for d in res:\n            for j in range(prime[p]+1):\n                newres.append(d*p**j)\n        res = newres\n    res.sort()\n    return res\n\ndef xorfactorial(num):\n    if num==0:\n        return 0\n    elif num==1:\n        return 1\n    elif num==2:\n        return 3\n    elif num==3:\n        return 0\n    else:\n        x=baseorder(num)\n        return (2**x)*((num-2**x+1)%2)+function(num-2**x)\n\ndef xorconv(n,X,Y):\n    if n==0:\n        res=[(X[0]*Y[0])%mod]\n        return res\n    x=[X[i]+X[i+2**(n-1)] for i in range(2**(n-1))]\n    y=[Y[i]+Y[i+2**(n-1)] for i in range(2**(n-1))]\n    z=[X[i]-X[i+2**(n-1)] for i in range(2**(n-1))]\n    w=[Y[i]-Y[i+2**(n-1)] for i in range(2**(n-1))]\n    res1=xorconv(n-1,x,y)\n    res2=xorconv(n-1,z,w)\n    former=[(res1[i]+res2[i])*inv for i in range(2**(n-1))]\n    latter=[(res1[i]-res2[i])*inv for i in range(2**(n-1))]\n    former=list(map(lambda x:x%mod,former))\n    latter=list(map(lambda x:x%mod,latter))\n    return former+latter\n\ndef merge_sort(A,B):\n    pos_A,pos_B = 0,0\n    n,m = len(A),len(B)\n    res = []\n    while pos_A < n and pos_B < m:\n        a,b = A[pos_A],B[pos_B]\n        if a < b:\n            res.append(a)\n            pos_A += 1\n        else:\n            res.append(b)\n            pos_B += 1\n    res += A[pos_A:]\n    res += B[pos_B:]\n    return res\n\nclass UnionFindVerSize():\n    def __init__(self, N):\n        self._parent = [n for n in range(0, N)]\n        self._size = [1] * N\n        self.group = N\n\n    def find_root(self, x):\n        if self._parent[x] == x: return x\n        self._parent[x] = self.find_root(self._parent[x])\n        stack = [x]\n        while self._parent[stack[-1]]!=stack[-1]:\n            stack.append(self._parent[stack[-1]])\n        for v in stack:\n            self._parent[v] = stack[-1]\n        return self._parent[x]\n\n    def unite(self, x, y):\n        gx = self.find_root(x)\n        gy = self.find_root(y)\n        if gx == gy: return\n\n        self.group -= 1\n\n        if self._size[gx] < self._size[gy]:\n            self._parent[gx] = gy\n            self._size[gy] += self._size[gx]\n        else:\n            self._parent[gy] = gx\n            self._size[gx] += self._size[gy]\n\n    def get_size(self, x):\n        return self._size[self.find_root(x)]\n\n    def is_same_group(self, x, y):\n        return self.find_root(x) == self.find_root(y)\n\nclass WeightedUnionFind():\n    def __init__(self,N):\n        self.parent = [i for i in range(N)]\n        self.size = [1 for i in range(N)]\n        self.val = [0 for i in range(N)]\n        self.flag = True\n        self.edge = [[] for i in range(N)]\n\n    def dfs(self,v,pv):\n        stack = [(v,pv)]\n        new_parent = self.parent[pv]\n        while stack:\n            v,pv = stack.pop()\n            self.parent[v] = new_parent\n            for nv,w in self.edge[v]:\n                if nv!=pv:\n                    self.val[nv] = self.val[v] + w\n                    stack.append((nv,v))\n\n    def unite(self,x,y,w):\n        if not self.flag:\n            return\n        if self.parent[x]==self.parent[y]:\n            self.flag = (self.val[x] - self.val[y] == w)\n            return\n\n        if self.size[self.parent[x]]>self.size[self.parent[y]]:\n            self.edge[x].append((y,-w))\n            self.edge[y].append((x,w))\n            self.size[x] += self.size[y]\n            self.val[y] = self.val[x] - w\n            self.dfs(y,x)\n        else:\n            self.edge[x].append((y,-w))\n            self.edge[y].append((x,w))\n            self.size[y] += self.size[x]\n            self.val[x] = self.val[y] + w\n            self.dfs(x,y)\n\nclass Dijkstra():\n    class Edge():\n        def __init__(self, _to, _cost):\n            self.to = _to\n            self.cost = _cost\n\n    def __init__(self, V):\n        self.G = [[] for i in range(V)]\n        self._E = 0\n        self._V = V\n\n    @property\n    def E(self):\n        return self._E\n\n    @property\n    def V(self):\n        return self._V\n\n    def add_edge(self, _from, _to, _cost):\n        self.G[_from].append(self.Edge(_to, _cost))\n        self._E += 1\n\n    def shortest_path(self, s):\n        import heapq\n        que = []\n        d = [10**15] * self.V\n        d[s] = 0\n        heapq.heappush(que, (0, s))\n\n        while len(que) != 0:\n            cost, v = heapq.heappop(que)\n            if d[v] < cost: continue\n\n            for i in range(len(self.G[v])):\n                e = self.G[v][i]\n                if d[e.to] > d[v] + e.cost:\n                    d[e.to] = d[v] + e.cost\n                    heapq.heappush(que, (d[e.to], e.to))\n        return d\n\n#Z[i]:length of the longest list starting from S[i] which is also a prefix of S\n#O(|S|)\ndef Z_algorithm(s):\n    N = len(s)\n    Z_alg = [0]*N\n\n    Z_alg[0] = N\n    i = 1\n    j = 0\n    while i < N:\n        while i+j < N and s[j] == s[i+j]:\n            j += 1\n        Z_alg[i] = j\n        if j == 0:\n            i += 1\n            continue\n        k = 1\n        while i+k < N and k + Z_alg[k]<j:\n            Z_alg[i+k] = Z_alg[k]\n            k += 1\n        i += k\n        j -= k\n    return Z_alg\n\nclass BIT():\n    def __init__(self,n,mod=0):\n        self.BIT = [0]*(n+1)\n        self.num = n\n        self.mod = mod\n\n    def query(self,idx):\n        res_sum = 0\n        mod = self.mod\n        while idx > 0:\n            res_sum += self.BIT[idx]\n            if mod:\n                res_sum %= mod\n            idx -= idx&(-idx)\n        return res_sum\n\n    #Ai += x O(logN)\n    def update(self,idx,x):\n        mod = self.mod\n        while idx <= self.num:\n            self.BIT[idx] += x\n            if mod:\n                self.BIT[idx] %= mod\n            idx += idx&(-idx)\n        return\n\nclass dancinglink():\n    def __init__(self,n,debug=False):\n        self.n = n\n        self.debug = debug\n        self._left = [i-1 for i in range(n)]\n        self._right = [i+1 for i in range(n)]\n        self.exist = [True for i in range(n)]\n\n    def pop(self,k):\n        if self.debug:\n            assert self.exist[k]\n        L = self._left[k]\n        R = self._right[k]\n        if L!=-1:\n            if R!=self.n:\n                self._right[L],self._left[R] = R,L\n            else:\n                self._right[L] = self.n\n        elif R!=self.n:\n            self._left[R] = -1\n        self.exist[k] = False\n\n    def left(self,idx,k=1):\n        if self.debug:\n            assert self.exist[idx]\n        res = idx\n        while k:\n            res = self._left[res]\n            if res==-1:\n                break\n            k -= 1\n        return res\n\n    def right(self,idx,k=1):\n        if self.debug:\n            assert self.exist[idx]\n        res = idx\n        while k:\n            res = self._right[res]\n            if res==self.n:\n                break\n            k -= 1\n        return res\n\nclass SparseTable():\n    def __init__(self,A,merge_func,ide_ele):\n        N=len(A)\n        n=N.bit_length()\n        self.table=[[ide_ele for i in range(n)] for i in range(N)]\n        self.merge_func=merge_func\n\n        for i in range(N):\n            self.table[i][0]=A[i]\n\n        for j in range(1,n):\n            for i in range(0,N-2**j+1):\n                f=self.table[i][j-1]\n                s=self.table[i+2**(j-1)][j-1]\n                self.table[i][j]=self.merge_func(f,s)\n\n    def query(self,s,t):\n        b=t-s+1\n        m=b.bit_length()-1\n        return self.merge_func(self.table[s][m],self.table[t-2**m+1][m])\n\nclass BinaryTrie:\n    class node:\n        def __init__(self,val):\n            self.left = None\n            self.right = None\n            self.max = val\n\n    def __init__(self):\n        self.root = self.node(-10**15)\n\n    def append(self,key,val):\n        pos = self.root\n        for i in range(29,-1,-1):\n            pos.max = max(pos.max,val)\n            if key>>i & 1:\n                if pos.right is None:\n                    pos.right = self.node(val)\n                    pos = pos.right\n                else:\n                    pos = pos.right\n            else:\n                if pos.left is None:\n                    pos.left = self.node(val)\n                    pos = pos.left\n                else:\n                    pos = pos.left\n        pos.max = max(pos.max,val)\n\n    def search(self,M,xor):\n        res = -10**15\n        pos = self.root\n        for i in range(29,-1,-1):\n            if pos is None:\n                break\n\n            if M>>i & 1:\n                if xor>>i & 1:\n                    if pos.right:\n                        res = max(res,pos.right.max)\n                    pos = pos.left\n                else:\n                    if pos.left:\n                        res = max(res,pos.left.max)\n                    pos = pos.right\n            else:\n                if xor>>i & 1:\n                    pos = pos.right\n                else:\n                    pos = pos.left\n\n        if pos:\n            res = max(res,pos.max)\n        return res\n\ndef solveequation(edge,ans,n,m):\n    #edge=[[to,dire,id]...]\n    x=[0]*m\n    used=[False]*n\n    for v in range(n):\n        if used[v]:\n            continue\n        y = dfs(v)\n        if y!=0:\n            return False\n    return x\n\n    def dfs(v):\n        used[v]=True\n        r=ans[v]\n        for to,dire,id in edge[v]:\n            if used[to]:\n                continue\n            y=dfs(to)\n            if dire==-1:\n                x[id]=y\n            else:\n                x[id]=-y\n            r+=y\n        return r\n\nclass SegmentTree:\n    def __init__(self, init_val, segfunc, ide_ele):\n        n = len(init_val)\n        self.segfunc = segfunc\n        self.ide_ele = ide_ele\n        self.num = 1 << (n - 1).bit_length()\n        self.tree = [ide_ele] * 2 * self.num\n        self.size = n\n        for i in range(n):\n            self.tree[self.num + i] = init_val[i]\n        for i in range(self.num - 1, 0, -1):\n            self.tree[i] = self.segfunc(self.tree[2 * i], self.tree[2 * i + 1])\n\n    def update(self, k, x):\n        k += self.num\n        self.tree[k] = x\n        while k > 1:\n            self.tree[k >> 1] = self.segfunc(self.tree[k], self.tree[k ^ 1])\n            k >>= 1\n\n    def query(self, l, r):\n        if r==self.size:\n            r = self.num\n\n        res = self.ide_ele\n\n        l += self.num\n        r += self.num\n        while l < r:\n            if l & 1:\n                res = self.segfunc(res, self.tree[l])\n                l += 1\n            if r & 1:\n                res = self.segfunc(res, self.tree[r - 1])\n            l >>= 1\n            r >>= 1\n        return res\n\n    def bisect_l(self,l,r,x):\n        l += self.num\n        r += self.num\n        Lmin = -1\n        Rmin = -1\n        while l<r:\n            if l & 1:\n                if self.tree[l] <= x and Lmin==-1:\n                    Lmin = l\n                l += 1\n            if r & 1:\n                if self.tree[r-1] <=x:\n                    Rmin = r-1\n            l >>= 1\n            r >>= 1\n\n        if Lmin != -1:\n            pos = Lmin\n            while pos<self.num:\n                if self.tree[2 * pos] <=x:\n                    pos = 2 * pos\n                else:\n                    pos = 2 * pos +1\n            return pos-self.num\n        elif Rmin != -1:\n            pos = Rmin\n            while pos<self.num:\n                if self.tree[2 * pos] <=x:\n                    pos = 2 * pos\n                else:\n                    pos = 2 * pos +1\n            return pos-self.num\n        else:\n            return -1\n\nimport sys,random,bisect\nfrom collections import deque,defaultdict\nfrom heapq import heapify,heappop,heappush\nfrom itertools import permutations\nfrom math import gcd,log\n\ninput = lambda :sys.stdin.readline().rstrip()\nmi = lambda :map(int,input().split())\nli = lambda :list(mi())\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return (g1[n] * g2[r] % mod) * g2[n-r] % mod\n\nmod = 10**9 + 7\nN = 10**5 + 100\ng1 = [1]*(N+1)\ng2 = [1]*(N+1)\ninverse = [1]*(N+1)\n\nfor i in range( 2, N + 1 ):\n    g1[i]=( ( g1[i-1] * i ) % mod )\n    inverse[i]=( ( -inverse[mod % i] * (mod//i) ) % mod )\n    g2[i]=( (g2[i-1] * inverse[i]) % mod )\ninverse[0]=0\n\ndef solve(N,K):\n    res = 0\n    pre = 1\n\n    for i in range(1,N+1):\n        pre = (pre * (N-i+1))\n        pre %= mod\n\n        tmp = cmb(N-(i-1)*(K-1),i,mod) * g1[i] % mod\n        prop = g2[N] * g1[N-i] % mod\n\n\n        res += (tmp * prop % mod)\n        res %= mod\n\n        end = (pre-tmp)\n        res += end  * prop % mod\n        res %= mod\n\n        pre = tmp\n\n    return res % mod\n\nfor _ in range(int(input())):\n    N,K = mi()\n    print(solve(N,K))\n", "difficulty": 11, "public_tests": {"input": ["3\n3 2\n15 2\n40 15\n"], "output": ["\n333333338\n141946947\n329622137\n"]}, "private_tests": {"input": ["10\n100000 99995\n100000 100000\n100000 99998\n100000 99997\n100000 99997\n100000 99997\n100000 100000\n100000 99997\n100000 99999\n100000 99998\n", "10\n91147 3\n60637 60633\n58274 58270\n81624 62\n59542 17\n76280 76277\n78239 3\n84713 84710\n58143 58143\n85720 5\n", "10\n71414 65271\n72899 65842\n55412 47808\n74943 73181\n61199 58741\n98215 96601\n85943 83731\n93437 87235\n76925 73203\n61125 56705\n", "10\n52962 52952\n85081 85073\n84189 84183\n58931 58927\n98086 98076\n75255 75253\n88184 88177\n74058 74054\n98676 98670\n51173 51167\n", "10\n69102 55234\n81854 78615\n87158 65975\n67111 55448\n52268 47339\n84999 82633\n81913 66298\n71975 64953\n78938 54548\n98118 96681\n", "9\n775 189\n767 339\n576 121\n726 145\n529 176\n731 77\n577 95\n831 59\n709 244\n", "10\n99989 99899\n99894 99818\n99994 99978\n99902 99864\n99929 99827\n99971 99939\n99915 99835\n99962 99938\n99895 99851\n99980 99967\n", "10\n100000 4446\n100000 15796\n100000 9754\n100000 9485\n100000 3709\n100000 22205\n100000 33865\n100000 27643\n100000 2251\n100000 25462\n", "10\n55273 449\n93421 9599\n59339 2714\n90955 6048\n89721 567\n88472 3699\n59510 6441\n71328 5778\n96663 7566\n64180 64\n", "10\n25 2\n25 3\n25 4\n25 5\n25 6\n25 7\n25 8\n25 9\n25 10\n25 11\n", "10\n99994 99987\n99994 99992\n99993 99982\n99996 99989\n99992 99986\n99994 99991\n99994 99987\n99996 99987\n99993 99983\n99992 99986\n", "10\n99902 99835\n99893 99852\n99959 99953\n99993 99980\n99911 99882\n99943 99855\n99935 99909\n99952 99932\n99910 99819\n99997 99991\n", "10\n100000 99990\n100000 99997\n100000 99995\n100000 99993\n100000 99990\n100000 99992\n100000 99999\n100000 99992\n100000 99994\n100000 99992\n", "10\n99914 99821\n99902 99867\n99947 99846\n99934 99890\n99940 99899\n99967 99914\n99947 99921\n99971 99890\n99939 99934\n99944 99924\n", "10\n99989 99985\n99996 99986\n99993 99982\n99991 99979\n99998 99994\n99995 99989\n99989 99981\n99998 99991\n99991 99982\n99991 99981\n", "10\n9 4\n8 4\n10 5\n8 4\n7 3\n7 2\n6 3\n10 4\n6 3\n7 3\n", "8\n762 491\n932 696\n703 429\n809 746\n703 490\n591 358\n994 914\n810 439\n", "10\n99999 2\n99999 3\n99999 4\n99999 5\n99999 6\n99999 7\n99999 8\n99999 9\n99999 10\n99999 11\n", "10\n93458 49311\n74746 47207\n55866 29608\n70597 65576\n55963 52698\n95284 59924\n50684 25417\n71838 59008\n78580 39594\n68509 37009\n", "10\n99989 99984\n99998 99994\n99998 99986\n99989 99984\n99997 99995\n99997 99987\n99989 99985\n99995 99986\n99993 99987\n99995 99987\n", "10\n99021 97952\n99183 98677\n99538 98513\n99467 98446\n99531 98554\n99452 98965\n99624 98530\n99141 98327\n99031 98582\n99413 98842\n", "10\n100000 3\n100000 21\n100000 11\n100000 13\n100000 130\n100000 5\n100000 25\n100000 45\n100000 130\n100000 36\n", "10\n9 7\n6 3\n10 8\n6 6\n10 6\n10 10\n7 3\n7 3\n8 4\n7 7\n", "10\n1000 2\n1000 3\n1000 4\n1000 5\n1000 6\n1000 7\n1000 8\n1000 9\n1000 10\n1000 11\n", "10\n99662 99510\n99587 98955\n99998 99413\n99350 98516\n99964 99431\n99035 98767\n99209 99196\n99341 98603\n99798 99632\n99086 98366\n", "10\n10000 1622\n10000 2113\n10000 1063\n10000 3558\n10000 4492\n10000 1284\n10000 447\n10000 2249\n10000 3878\n10000 1081\n", "10\n100000 99641\n100000 99422\n100000 99162\n100000 99047\n100000 99804\n100000 99204\n100000 99677\n100000 99775\n100000 99837\n100000 99502\n", "10\n100000 362\n100000 100\n100000 636\n100000 665\n100000 308\n100000 516\n100000 667\n100000 906\n100000 187\n100000 898\n", "10\n89991 101\n99880 2\n85047 3\n51361 51361\n63016 4\n58053 58052\n52643 52642\n89464 210\n62022 6\n52205 52204\n", "10\n54976 9\n79030 9\n65430 4\n55945 9\n94171 5\n54402 8\n69058 4\n68319 10\n54355 2\n56737 8\n", "10\n100000 90585\n100000 91661\n100000 93589\n100000 93236\n100000 98039\n100000 97626\n100000 93031\n100000 95058\n100000 90432\n100000 93389\n", "10\n90288 90285\n84245 2\n85767 2\n99704 3\n73854 73853\n65000 3\n89401 2\n52070 2\n98235 98232\n84209 84206\n", "10\n56429 55496\n81240 80702\n56370 55429\n56967 56579\n85539 84567\n61432 60442\n57268 56826\n73411 72999\n74913 74662\n99939 99437\n", "10\n100000 96\n100000 13\n100000 3\n100000 49\n100000 2\n100000 20\n100000 79\n100000 99995\n100000 14\n100000 199\n", "10\n100000 159\n100000 99999\n100000 161\n100000 9\n100000 251\n100000 6\n100000 161\n100000 125\n100000 200\n100000 39\n", "10\n100000 2\n100000 3\n100000 4\n100000 5\n100000 6\n100000 7\n100000 8\n100000 9\n100000 10\n100000 11\n", "10\n100000 250\n100000 100\n100000 4\n100000 100\n100000 25\n100000 100\n100000 2\n100000 8\n100000 16\n100000 32\n", "10\n100000 60745\n100000 72739\n100000 60974\n100000 56337\n100000 56104\n100000 77234\n100000 65811\n100000 60163\n100000 81152\n100000 88955\n", "9\n100000 69603\n100000 80697\n100000 94574\n100000 73239\n100000 75954\n100000 64132\n100000 98605\n100000 81130\n100000 99960\n", "10\n12 2\n12 3\n12 4\n12 5\n12 6\n12 7\n12 8\n12 9\n12 10\n12 11\n", "10\n78473 730\n70689 119\n90280 864\n91217 998\n85239 460\n73889 823\n97732 598\n88345 356\n82176 425\n93731 234\n", "10\n56132 56129\n99552 99549\n62461 62456\n89253 89250\n89989 89986\n77362 77362\n92625 92624\n87698 87698\n99901 99901\n92497 92493\n", "10\n2 2\n3 2\n3 3\n4 2\n4 3\n4 4\n5 2\n5 3\n5 4\n5 5\n", "10\n100 2\n100 3\n100 4\n100 5\n100 6\n100 7\n100 8\n100 9\n100 10\n100 11\n", "10\n100000 99998\n100000 2\n100000 2\n100000 99997\n100000 100000\n100000 99999\n100000 3\n100000 2\n100000 3\n100000 3\n", "10\n100000 3\n100000 2\n100000 99999\n100000 3\n100000 2\n100000 2\n100000 3\n100000 100000\n100000 3\n100000 3\n", "10\n100000 7\n100000 4\n100000 7\n100000 6\n100000 8\n100000 7\n100000 3\n100000 2\n100000 4\n100000 7\n", "10\n68806 34218\n88372 10171\n77089 62\n69313 2081\n51781 20864\n68244 22868\n81146 17437\n73921 30005\n81022 23052\n71565 3936\n", "10\n100000 93369\n100000 94725\n100000 96929\n100000 78127\n100000 64434\n100000 97523\n100000 96498\n100000 87986\n100000 77217\n100000 83609\n", "10\n77777 2\n77777 3\n77777 4\n77777 5\n77777 6\n77777 7\n77777 8\n77777 9\n77777 10\n77777 11\n", "10\n100000 99991\n100000 99995\n100000 99996\n100000 99998\n100000 99997\n100000 99996\n100000 99993\n100000 99994\n100000 99996\n100000 99996\n", "10\n100000 2\n100000 4\n100000 3\n100000 100000\n100000 99999\n100000 99998\n100000 99997\n100000 99996\n100000 99995\n100000 99994\n", "10\n92303 92303\n97356 21\n93947 93947\n80390 2\n58558 38\n94347 94347\n85037 85037\n76485 3\n94185 23\n88296 12\n", "10\n100000 8770\n100000 9328\n100000 3784\n100000 7258\n100000 4680\n100000 405\n100000 3106\n100000 8477\n100000 1292\n100000 2637\n", "10\n62332 62328\n58507 58502\n61503 61499\n57229 57220\n81057 81051\n96850 96846\n71299 71291\n66236 66229\n51913 51904\n96786 96781\n", "10\n100000 15451\n100000 49492\n100000 11551\n100000 38380\n100000 5426\n100000 32095\n100000 3722\n100000 8641\n100000 35962\n100000 45598\n"], "output": ["537223949\n2\n907444797\n814889585\n814889585\n814889585\n2\n814889585\n635814936\n907444797\n", "623680566\n119279988\n824480296\n763186315\n30533224\n302872289\n396710457\n752099342\n2\n175711061\n", "297186641\n615808020\n506280887\n115162909\n327641521\n294993427\n685080452\n895438097\n829931383\n265256828\n", "276240302\n342119056\n63704656\n123585253\n461525974\n637993962\n460606037\n136468267\n186328425\n709487042\n", "689135754\n269316566\n50810476\n627254699\n430433188\n355961097\n726816331\n629275244\n642843449\n180153851\n", "141030068\n908788005\n649440167\n958622509\n352108572\n689266596\n718454365\n157995674\n448148491\n", "63043441\n240645100\n80890568\n877494121\n167480873\n78486577\n451765548\n271940261\n438315065\n295543770\n", "375912911\n125295590\n140825456\n946694299\n127853262\n457077198\n760101530\n116281442\n316985197\n710537201\n", "615651341\n111082575\n227249393\n813314652\n315669013\n935692901\n192778591\n433573131\n843015669\n85265851\n", "259226284\n223171932\n133162654\n290909096\n420901568\n541857714\n436363642\n994202908\n58695655\n23913046\n", "369595121\n75313765\n872833195\n75893564\n70182438\n150627528\n369595121\n193400370\n894027664\n70182438\n", "902741694\n118365377\n965276230\n279209398\n247220838\n896251510\n704242595\n813583162\n541831811\n662942220\n", "969821134\n814889585\n537223949\n802818035\n969821134\n889337472\n635814936\n889337472\n352113525\n889337472\n", "554619939\n822970711\n141530952\n756655719\n966615393\n741517332\n49248180\n522071812\n563722814\n76083501\n", "924451885\n791933789\n872833195\n315165427\n611017796\n153927133\n928026764\n110849814\n143364670\n286334597\n", "428571434\n357142862\n333333338\n357142862\n104761908\n628571436\n800000008\n500000006\n800000008\n104761908\n", "47081995\n431010087\n736481428\n393151310\n729851316\n953351123\n376123817\n199322441\n", "424548535\n817606323\n649851464\n809700114\n474739859\n400684027\n600841267\n587618843\n721748947\n993369830\n", "347062743\n345855484\n488205596\n919052136\n758690138\n945585493\n915472598\n903645638\n642416425\n351828744\n", "886677823\n611017796\n165938763\n886677823\n237563177\n355324849\n924451885\n472700998\n141356017\n978160803\n", "524401612\n74209860\n714413990\n217630004\n623437479\n364209884\n483184182\n994114509\n437566489\n260780290\n", "342608435\n74604180\n930688122\n425113627\n659152178\n397013923\n540574441\n736745241\n659152178\n519738553\n", "83333336\n800000008\n466666672\n2\n222222226\n2\n104761908\n104761908\n357142862\n2\n", "620450027\n662400424\n731220070\n922927150\n500042262\n195420842\n148583430\n725421199\n187852169\n502548989\n", "917435420\n300611105\n150424748\n851883057\n206540915\n966994264\n807744282\n562306041\n717184715\n8335104\n", "157646457\n115343550\n123307286\n665230050\n261652114\n67712729\n86815467\n530079704\n507371118\n70693825\n", "360747480\n547976419\n16148691\n386489453\n43029881\n310542618\n652003603\n594583797\n302348360\n640811436\n", "962366775\n943817448\n229618032\n80092131\n112919252\n233290793\n925329935\n785285973\n917347544\n407972010\n", "762544444\n86963219\n837340134\n2\n666124219\n148440985\n889284148\n694764291\n249272982\n740350847\n", "439349465\n646884513\n867360887\n251199993\n91306315\n939397183\n332501717\n303336080\n164215185\n105033760\n", "120514756\n108623271\n699769757\n10592130\n248386095\n763265665\n940441214\n829199324\n883140894\n482521803\n", "213319699\n308352585\n708871594\n294078554\n374246035\n545516410\n514158787\n686108465\n427612437\n300258846\n", "519324833\n52604913\n915017698\n584163970\n414056008\n970771174\n150668741\n482876399\n758347916\n579712355\n", "750521449\n425113627\n342608435\n843057147\n120796544\n915158084\n252081033\n537223949\n407611539\n573664831\n", "301999672\n635814936\n959215920\n794057598\n483622605\n360451265\n959215920\n984465317\n497927530\n302302050\n", "120796544\n342608435\n85865463\n397013923\n360451265\n254503936\n241534974\n794057598\n330599915\n930688122\n", "741437665\n943817448\n85865463\n943817448\n540574441\n943817448\n120796544\n241534974\n12363791\n516029676\n", "787033674\n279057232\n822968699\n254862535\n39313214\n737438617\n927638972\n261880817\n121071700\n678423890\n", "618937510\n667289178\n960287513\n794296838\n487512964\n727338005\n355051449\n457676071\n368242235\n", "693434352\n766666675\n727272735\n915151524\n863636372\n45454548\n696969704\n818181826\n409090914\n469696975\n", "707998873\n117937668\n774060241\n117071462\n969962925\n441755268\n637907089\n715308167\n788109704\n128014112\n", "282750771\n483834458\n196602645\n674808443\n597720445\n2\n520339049\n2\n2\n47778920\n", "2\n333333338\n2\n500000006\n166666670\n2\n900000009\n100000003\n700000007\n2\n", "170730234\n260055745\n278751219\n266857973\n528113361\n923053524\n78500036\n820831600\n761488986\n217881918\n", "907444797\n120796544\n120796544\n814889585\n2\n635814936\n342608435\n120796544\n342608435\n342608435\n", "342608435\n120796544\n635814936\n342608435\n120796544\n120796544\n342608435\n2\n342608435\n342608435\n", "254503936\n85865463\n254503936\n360451265\n241534974\n254503936\n342608435\n120796544\n85865463\n254503936\n", "449279237\n154429376\n12247194\n334808015\n681394244\n915092506\n45710497\n19926705\n53669404\n333941777\n", "453642016\n861396752\n628320088\n157245147\n363992560\n926231585\n731567787\n485858461\n382786863\n13947552\n", "915038280\n35081318\n187034535\n216387964\n269766158\n942246484\n291388341\n175375316\n170333817\n347338923\n", "611671836\n537223949\n358149300\n907444797\n814889585\n358149300\n802818035\n352113525\n358149300\n358149300\n", "120796544\n85865463\n342608435\n2\n635814936\n907444797\n814889585\n358149300\n537223949\n352113525\n", "2\n644681692\n2\n270520996\n224079464\n2\n2\n865631619\n399547164\n277190837\n", "562804208\n224409350\n201794573\n423678890\n135969888\n696014465\n537813382\n636784364\n175848970\n133066302\n", "559130407\n125455613\n462186256\n588483249\n84685740\n868756059\n698673580\n984974451\n834415874\n178820712\n", "588572887\n227884864\n429846399\n140336029\n518534868\n62028571\n218359619\n208992791\n660656829\n522256441\n"]}, "generated_tests": {"input": ["10\n91147 3\n60637 60633\n1778 58270\n81624 62\n59542 17\n76280 76277\n78239 3\n84713 84710\n58143 58143\n85720 5\n", "10\n71414 65271\n72899 65842\n55412 16458\n74943 73181\n61199 58741\n98215 96601\n85943 83731\n93437 87235\n76925 73203\n61125 56705\n", "10\n52962 52952\n85081 85073\n84189 84183\n58931 58927\n98086 98076\n75255 75253\n88184 88177\n74058 124170\n98676 98670\n51173 51167\n", "10\n69102 55234\n81854 78615\n87158 65975\n67111 55448\n52268 47339\n84999 18942\n81913 66298\n71975 64953\n78938 54548\n98118 96681\n", "9\n775 189\n767 339\n78 121\n726 145\n529 176\n731 77\n577 95\n831 59\n709 244\n", "10\n48505 99899\n99894 99818\n99994 99978\n99902 99864\n99929 99827\n99971 99939\n99915 99835\n99962 99938\n99895 99851\n99980 99967\n", "10\n100000 4446\n100000 15796\n100000 9754\n100000 9485\n100000 3709\n100000 22205\n100000 33865\n100000 27643\n100000 2251\n100000 16155\n", "10\n55273 449\n93421 9599\n59339 2714\n90955 6048\n89721 567\n88472 3699\n59510 6441\n7927 5778\n96663 7566\n64180 64\n", "10\n99994 99987\n99994 99992\n99993 99982\n24542 99989\n99992 99986\n99994 99991\n99994 99987\n99996 99987\n99993 99983\n99992 99986\n", "10\n52123 99835\n99893 99852\n99959 99953\n99993 99980\n99911 99882\n99943 99855\n99935 99909\n99952 99932\n99910 99819\n99997 99991\n", "10\n99914 99821\n99902 99867\n99947 99846\n99934 99890\n99940 99899\n99967 99914\n99947 99921\n99971 99890\n99939 12278\n99944 99924\n", "8\n762 491\n932 696\n1010 429\n809 746\n703 490\n591 358\n994 914\n810 439\n", "10\n99999 2\n99999 3\n99999 4\n99999 5\n65967 6\n99999 7\n99999 8\n99999 9\n99999 10\n99999 11\n", "10\n93458 49311\n74746 47207\n55866 29608\n70597 65576\n55963 52698\n95284 59924\n50684 25417\n71838 59008\n35319 39594\n68509 37009\n", "10\n99021 97952\n99183 98677\n99538 98513\n99467 98446\n99531 98554\n99452 98965\n99624 98530\n89674 98327\n99031 98582\n99413 98842\n", "10\n9 7\n6 3\n10 8\n6 6\n10 6\n10 10\n7 3\n7 3\n8 4\n5 7\n", "10\n1000 2\n1000 3\n1000 4\n1000 5\n1000 6\n1000 7\n1100 8\n1000 9\n1000 10\n1000 11\n", "10\n99662 99510\n99587 98955\n99998 99413\n99350 98516\n99964 99431\n99035 98767\n99209 89741\n99341 98603\n99798 99632\n99086 98366\n", "10\n10000 1622\n10000 2113\n10000 1063\n10000 3558\n10010 4492\n10000 1284\n10000 447\n10000 2249\n10000 3878\n10000 1081\n", "10\n89991 101\n99880 2\n85047 3\n51361 51361\n63016 8\n58053 58052\n52643 52642\n89464 210\n62022 6\n52205 52204\n", "10\n56429 55496\n81240 80702\n56370 55429\n56967 56579\n85539 97572\n61432 60442\n57268 56826\n73411 72999\n74913 74662\n99939 99437\n", "10\n100000 159\n100000 99999\n100000 161\n100000 9\n100000 251\n100000 6\n100000 161\n100000 125\n100000 200\n100000 49\n", "10\n100000 250\n100000 100\n100000 4\n100000 100\n100000 25\n100000 100\n100000 2\n100000 8\n100000 16\n100000 35\n", "10\n100000 60745\n100000 72739\n100000 60974\n100000 56337\n100000 41389\n100000 77234\n100000 65811\n100000 60163\n100000 81152\n100000 88955\n", "10\n12 2\n12 3\n12 3\n12 5\n12 6\n12 7\n12 8\n12 9\n12 10\n12 11\n", "10\n78473 730\n70689 119\n90280 864\n91217 998\n85239 460\n73889 823\n97732 598\n88345 356\n88710 425\n93731 234\n", "10\n2 2\n3 2\n6 3\n4 2\n4 3\n4 4\n5 2\n5 3\n5 4\n5 5\n", "10\n100 2\n100 3\n100 4\n100 5\n100 6\n100 5\n100 8\n100 9\n100 10\n100 11\n", "10\n100000 3\n100000 2\n100000 99999\n100000 3\n100000 2\n100000 2\n100000 3\n100000 100001\n100000 3\n100000 3\n", "10\n100000 93369\n100000 94725\n100000 96929\n100000 78127\n100000 64434\n100000 97523\n100000 96498\n100000 87986\n100000 77217\n100000 8026\n", "10\n77777 2\n77777 3\n77777 4\n77777 5\n77777 6\n77777 7\n77777 8\n54819 9\n77777 10\n77777 11\n", "10\n29193 92303\n97356 21\n93947 93947\n80390 2\n58558 38\n94347 94347\n85037 85037\n76485 3\n94185 23\n88296 12\n", "10\n100000 8770\n100000 9328\n100000 3784\n100000 7258\n100000 4680\n100000 405\n100000 3106\n100000 8477\n100000 732\n100000 2637\n", "10\n62332 62328\n58507 58502\n61503 61499\n57229 57220\n81057 81051\n96850 96846\n71299 71291\n66236 94819\n51913 51904\n96786 96781\n", "3\n3 2\n15 2\n19 15\n", "10\n91147 3\n60637 60633\n1778 58270\n81624 50\n59542 17\n76280 76277\n78239 3\n84713 84710\n58143 58143\n85720 5\n", "10\n52962 52952\n85081 85073\n84189 84183\n58931 43745\n98086 98076\n75255 75253\n88184 88177\n74058 124170\n98676 98670\n51173 51167\n", "10\n69102 55234\n81854 78615\n87158 65975\n67111 55448\n52268 47339\n84999 18942\n81913 66298\n71975 64953\n78938 94178\n98118 96681\n", "9\n775 189\n767 339\n78 121\n726 145\n529 176\n731 77\n810 95\n831 59\n709 244\n", "10\n100000 4446\n100000 15796\n100000 9754\n100000 9485\n100000 3709\n100000 22205\n100000 33865\n100000 27643\n100000 2251\n100000 575\n", "10\n55273 449\n93421 9599\n59339 2714\n90955 10095\n89721 567\n88472 3699\n59510 6441\n7927 5778\n96663 7566\n64180 64\n", "10\n99914 99821\n99902 99867\n99947 99846\n99934 99890\n99940 99899\n98886 99914\n99947 99921\n99971 99890\n99939 12278\n99944 99924\n", "8\n762 491\n932 696\n1010 429\n809 746\n703 490\n591 358\n1947 914\n810 439\n", "10\n99999 2\n99999 3\n54119 4\n99999 5\n65967 6\n99999 7\n99999 8\n99999 9\n99999 10\n99999 11\n", "10\n93458 49311\n74746 47207\n55866 29608\n70597 65576\n72720 52698\n95284 59924\n50684 25417\n71838 59008\n35319 39594\n68509 37009\n", "10\n9 7\n6 3\n10 8\n6 6\n10 6\n10 2\n7 3\n7 3\n8 4\n5 7\n", "10\n1000 2\n1000 3\n1000 8\n1000 5\n1000 6\n1000 7\n1100 8\n1000 9\n1000 10\n1000 11\n", "10\n10000 1622\n10000 4094\n10000 1063\n10000 3558\n10010 4492\n10000 1284\n10000 447\n10000 2249\n10000 3878\n10000 1081\n", "10\n89991 101\n99880 2\n85047 3\n51361 51361\n63016 8\n58053 58052\n57141 52642\n89464 210\n62022 6\n52205 52204\n", "10\n56429 55496\n81240 80702\n56370 55429\n56967 56579\n85539 97572\n61432 60442\n57268 56826\n73411 72999\n97814 74662\n99939 99437\n", "10\n100000 451\n100000 100\n100000 4\n100000 100\n100000 25\n100000 100\n100000 2\n100000 8\n100000 16\n100000 35\n", "10\n12 2\n12 3\n12 3\n12 5\n12 6\n12 7\n12 8\n12 9\n18 10\n12 11\n", "10\n2 2\n3 2\n6 3\n2 2\n4 3\n4 4\n5 2\n5 3\n5 4\n5 5\n", "10\n100 2\n100 3\n100 4\n100 5\n100 6\n100 5\n101 8\n100 9\n100 10\n100 11\n", "10\n100000 3\n100000 2\n100000 99999\n100000 3\n100000 2\n100000 2\n100000 3\n100000 100001\n100000 2\n100000 3\n", "10\n77777 2\n77777 3\n77777 4\n77777 5\n77777 6\n77777 7\n77777 8\n67881 9\n77777 10\n77777 11\n", "10\n29193 92303\n97356 21\n93947 93947\n80390 2\n58558 38\n94347 94347\n85037 85037\n76485 3\n94185 23\n88296 6\n", "3\n3 2\n15 2\n19 14\n", "9\n775 189\n767 339\n78 121\n726 145\n529 176\n731 100\n810 95\n831 59\n709 244\n", "10\n100000 4446\n100000 15796\n100000 9754\n100000 9485\n100000 3709\n100000 22205\n100000 33865\n100000 27643\n100000 2251\n100000 1012\n", "10\n55273 449\n93421 9599\n59339 2714\n90955 10095\n89721 567\n88472 3699\n59510 6441\n11143 5778\n96663 7566\n64180 64\n", "8\n762 491\n932 696\n1110 429\n809 746\n703 490\n591 358\n1947 914\n810 439\n", "10\n99999 2\n99999 3\n54119 4\n99999 5\n65967 6\n99999 7\n99999 8\n99999 9\n99999 10\n18581 11\n", "10\n93458 49311\n74746 47207\n55866 29608\n70597 65576\n72720 52698\n95284 26253\n50684 25417\n71838 59008\n35319 39594\n68509 37009\n", "10\n9 7\n6 3\n10 8\n6 6\n10 6\n10 2\n7 3\n7 4\n8 4\n5 7\n", "10\n10000 1622\n10000 4094\n10000 1063\n10000 3558\n10010 4492\n10000 1284\n10000 447\n10000 2249\n10000 3878\n10001 1081\n", "10\n89991 101\n99880 2\n85047 3\n51361 51361\n63016 15\n58053 58052\n57141 52642\n89464 210\n62022 6\n52205 52204\n", "10\n56429 55496\n86714 80702\n56370 55429\n56967 56579\n85539 97572\n61432 60442\n57268 56826\n73411 72999\n97814 74662\n99939 99437\n", "10\n12 2\n12 3\n9 3\n12 5\n12 6\n12 7\n12 8\n12 9\n18 10\n12 11\n", "10\n2 2\n3 2\n6 3\n2 2\n4 3\n4 4\n5 2\n7 3\n5 4\n5 5\n", "10\n100 2\n100 3\n100 4\n100 5\n100 6\n100 5\n101 8\n100 9\n100 5\n100 11\n", "10\n91147 3\n60637 60633\n1778 58270\n81624 5\n59542 17\n76280 76277\n78239 3\n84713 84710\n58143 98695\n85720 5\n", "9\n775 189\n767 339\n78 76\n726 145\n529 176\n731 100\n810 95\n831 59\n709 244\n", "10\n100000 4446\n100000 15796\n100000 9754\n100000 9485\n100000 3709\n100000 19900\n100000 33865\n100000 27643\n100000 2251\n100000 1012\n", "10\n55273 449\n93421 9599\n59339 2714\n90955 10095\n89721 567\n88472 3617\n59510 6441\n11143 5778\n96663 7566\n64180 64\n", "8\n762 491\n932 696\n1110 205\n809 746\n703 490\n591 358\n1947 914\n810 439\n", "10\n99999 2\n99999 3\n54119 4\n99999 5\n65967 6\n99999 7\n99999 8\n9750 9\n99999 10\n18581 11\n", "10\n93458 49311\n74746 47207\n55866 29608\n70597 65576\n72720 52698\n95284 26253\n5916 25417\n71838 59008\n35319 39594\n68509 37009\n", "10\n9 7\n6 3\n10 8\n6 6\n10 6\n12 2\n7 3\n7 4\n8 4\n5 7\n", "10\n10000 1622\n10000 4094\n10000 1063\n10000 3558\n10010 4492\n10000 1284\n10000 447\n10000 4074\n10000 3878\n10001 1081\n", "10\n89991 101\n99880 2\n85047 2\n51361 51361\n63016 15\n58053 58052\n57141 52642\n89464 210\n62022 6\n52205 52204\n", "10\n56429 55496\n86714 80702\n56370 55429\n88798 56579\n85539 97572\n61432 60442\n57268 56826\n73411 72999\n97814 74662\n99939 99437\n", "10\n12 2\n12 3\n9 3\n12 5\n12 6\n12 5\n12 8\n12 9\n18 10\n12 11\n", "10\n100 2\n100 3\n100 4\n100 5\n100 6\n100 5\n101 8\n100 9\n101 5\n100 11\n", "9\n775 189\n767 339\n78 76\n726 145\n529 176\n731 100\n810 3\n831 59\n709 244\n", "10\n100000 4446\n100000 15796\n100000 9754\n100000 9485\n100000 3709\n100000 19900\n100000 33865\n100000 27643\n100000 605\n100000 1012\n", "10\n55273 449\n93421 10262\n59339 2714\n90955 10095\n89721 567\n88472 3617\n59510 6441\n11143 5778\n96663 7566\n64180 64\n", "8\n762 491\n932 696\n1110 205\n809 746\n703 321\n591 358\n1947 914\n810 439\n", "10\n93458 49311\n74746 47207\n99863 29608\n70597 65576\n72720 52698\n95284 26253\n5916 25417\n71838 59008\n35319 39594\n68509 37009\n", "10\n10000 92\n10000 4094\n10000 1063\n10000 3558\n10010 4492\n10000 1284\n10000 447\n10000 4074\n10000 3878\n10001 1081\n", "10\n89991 101\n99880 2\n85047 2\n51361 51361\n63016 15\n58053 58052\n57141 52642\n89464 210\n62022 6\n19399 52204\n", "10\n12 2\n12 3\n9 3\n12 5\n12 6\n12 5\n12 8\n12 9\n9 10\n12 11\n", "10\n110 2\n100 3\n100 4\n100 5\n100 6\n100 5\n101 8\n100 9\n101 5\n100 11\n", "9\n775 189\n767 339\n78 62\n726 145\n529 176\n731 100\n810 3\n831 59\n709 244\n", "10\n55273 449\n93421 10262\n59339 2714\n90955 10095\n89721 567\n88472 3617\n59510 6441\n11143 5778\n96663 7566\n9117 64\n", "8\n1027 491\n932 696\n1110 205\n809 746\n703 321\n591 358\n1947 914\n810 439\n", "10\n93458 49311\n74746 47207\n99863 29608\n70597 65576\n72720 52698\n4961 26253\n5916 25417\n71838 59008\n35319 39594\n68509 37009\n", "10\n10000 92\n10000 4094\n10000 1063\n10000 3558\n10010 4492\n10000 2164\n10000 447\n10000 4074\n10000 3878\n10001 1081\n", "10\n89991 101\n99880 2\n85047 2\n51361 51361\n64997 15\n58053 58052\n57141 52642\n89464 210\n62022 6\n19399 52204\n", "10\n12 2\n12 3\n9 3\n12 5\n12 6\n12 5\n12 8\n12 9\n9 10\n12 2\n", "9\n775 189\n767 339\n78 62\n726 145\n529 176\n731 100\n810 3\n831 65\n709 244\n", "10\n55273 449\n93421 10262\n59339 2714\n90955 10095\n89721 567\n88472 5450\n59510 6441\n11143 5778\n96663 7566\n9117 64\n", "8\n1027 491\n932 696\n1110 205\n1366 746\n703 321\n591 358\n1947 914\n810 439\n", "10\n10000 92\n10000 4094\n10000 1063\n10000 3558\n10010 4492\n10000 2164\n10000 447\n10000 4074\n10000 3878\n10000 1081\n", "10\n12 2\n12 3\n9 3\n12 5\n12 6\n12 5\n12 8\n23 9\n9 10\n12 2\n", "9\n775 189\n767 339\n78 19\n726 145\n529 176\n731 100\n810 3\n831 65\n709 244\n", "10\n55273 449\n93421 10262\n59339 2714\n90955 10095\n89721 567\n88472 5450\n59510 6441\n11143 5778\n96663 7566\n9117 55\n", "8\n1027 491\n932 696\n1110 205\n1366 746\n703 321\n591 358\n1947 914\n810 842\n", "10\n10000 92\n10000 4094\n10000 1063\n10000 3558\n10010 4492\n10000 2164\n10000 447\n10000 4074\n10000 3878\n10000 1025\n", "9\n775 189\n767 339\n78 19\n726 78\n529 176\n731 100\n810 3\n831 65\n709 244\n", "8\n1027 491\n347 696\n1110 205\n1366 746\n703 321\n591 358\n1947 914\n810 842\n", "10\n10000 92\n10000 7871\n10000 1063\n10000 3558\n10010 4492\n10000 2164\n10000 447\n10000 4074\n10000 3878\n10000 1025\n", "9\n775 189\n767 339\n78 19\n726 52\n529 176\n731 100\n810 3\n831 65\n709 244\n", "10\n10000 92\n10000 7871\n10000 1063\n10000 3558\n10011 4492\n10000 2164\n10000 447\n10000 4074\n10000 3878\n10000 1025\n", "9\n775 189\n1234 339\n78 19\n726 52\n529 176\n731 100\n810 3\n831 65\n709 244\n", "8\n1027 491\n347 696\n1110 205\n719 746\n703 321\n591 358\n1947 914\n799 842\n", "10\n10000 92\n10000 7871\n10000 1063\n10000 3558\n10011 4492\n10000 2164\n10000 447\n10000 4074\n10100 3878\n10000 1025\n", "9\n775 189\n1234 339\n78 19\n726 52\n529 176\n731 100\n810 3\n831 65\n1269 244\n", "8\n1027 491\n347 696\n1110 205\n719 746\n703 321\n591 358\n2513 914\n799 842\n", "10\n10000 92\n10000 7871\n10000 1063\n10000 7004\n10011 4492\n10000 2164\n10000 447\n10000 4074\n10100 3878\n10000 1025\n", "9\n775 189\n1234 339\n78 19\n726 52\n991 176\n731 100\n810 3\n831 65\n1269 244\n", "8\n1027 491\n347 696\n1110 205\n719 746\n703 321\n591 358\n2513 623\n799 842\n", "10\n10000 92\n10000 7871\n10000 1063\n10000 7004\n10011 4492\n10000 2164\n10000 447\n10000 2182\n10100 3878\n10000 1025\n", "9\n775 173\n1234 339\n78 19\n726 52\n991 176\n731 100\n810 3\n831 65\n1269 244\n", "8\n1027 491\n347 696\n1110 205\n719 746\n434 321\n591 358\n2513 623\n799 842\n", "10\n10000 92\n10000 7871\n10000 1063\n10000 7004\n10011 4492\n10000 2387\n10000 447\n10000 2182\n10100 3878\n10000 1025\n", "9\n775 173\n1234 339\n78 19\n726 52\n991 176\n731 110\n810 3\n831 65\n1269 244\n", "8\n1027 491\n347 696\n1110 205\n719 746\n82 321\n591 358\n2513 623\n799 842\n", "10\n10000 92\n10000 7871\n10000 1063\n10000 7004\n10011 4492\n10100 2387\n10000 447\n10000 2182\n10100 3878\n10000 1025\n", "9\n775 228\n1234 339\n78 19\n726 52\n991 176\n731 110\n810 3\n831 65\n1269 244\n", "8\n1027 491\n347 696\n1110 205\n719 204\n82 321\n591 358\n2513 623\n799 842\n", "10\n10000 18\n10000 7871\n10000 1063\n10000 7004\n10011 4492\n10100 2387\n10000 447\n10000 2182\n10100 3878\n10000 1025\n", "9\n775 228\n1234 339\n78 19\n726 52\n991 176\n731 110\n810 4\n831 65\n1269 244\n", "8\n1027 491\n347 696\n1110 205\n719 204\n82 321\n668 358\n2513 623\n799 842\n", "10\n10000 18\n10000 7871\n10000 1063\n10000 7004\n10011 4492\n10100 2387\n10000 447\n10000 2182\n10100 3878\n10000 1519\n", "9\n775 228\n1234 339\n78 19\n726 52\n991 176\n731 110\n810 4\n756 65\n1269 244\n", "8\n1027 491\n347 696\n1110 205\n719 204\n82 36\n668 358\n2513 623\n799 842\n", "10\n10000 18\n10000 7871\n10000 1063\n10000 7004\n10011 4492\n10100 2387\n10000 447\n10000 2218\n10100 3878\n10000 1519\n", "9\n775 228\n1234 339\n78 19\n726 52\n991 176\n731 110\n810 4\n756 65\n1269 170\n", "8\n1027 491\n347 696\n1110 205\n719 204\n82 3\n668 358\n2513 623\n799 842\n", "10\n10000 18\n10000 7871\n10000 1063\n10000 7004\n10011 4492\n10100 1308\n10000 447\n10000 2218\n10100 3878\n10000 1519\n", "9\n964 228\n1234 339\n78 19\n726 52\n991 176\n731 110\n810 4\n756 65\n1269 170\n", "8\n1027 491\n347 696\n1110 205\n830 204\n82 3\n668 358\n2513 623\n799 842\n", "10\n10000 18\n10000 7871\n10000 1063\n10010 7004\n10011 4492\n10100 1308\n10000 447\n10000 2218\n10100 3878\n10000 1519\n", "9\n964 228\n1234 339\n78 19\n726 52\n991 176\n731 110\n810 4\n109 65\n1269 170\n", "10\n10000 18\n10000 5655\n10000 1063\n10010 7004\n10011 4492\n10100 1308\n10000 447\n10000 2218\n10100 3878\n10000 1519\n", "9\n964 228\n409 339\n78 19\n726 52\n991 176\n731 110\n810 4\n109 65\n1269 170\n", "8\n1027 491\n247 696\n1110 205\n830 204\n82 3\n1126 358\n2513 623\n799 842\n", "10\n10000 18\n10000 5655\n10000 1063\n10010 6782\n10011 4492\n10100 1308\n10000 447\n10000 2218\n10100 3878\n10000 1519\n", "9\n964 228\n409 339\n78 19\n726 52\n991 176\n731 110\n810 4\n105 65\n1269 170\n", "8\n1027 491\n247 696\n1110 205\n830 204\n82 3\n264 358\n2513 623\n799 842\n", "10\n10000 18\n10000 5655\n10000 1063\n10010 6782\n10011 4492\n10100 1308\n10000 447\n10000 2218\n10100 1591\n10000 1519\n", "9\n964 228\n409 339\n78 19\n726 35\n991 176\n731 110\n810 4\n105 65\n1269 170\n", "8\n1027 491\n247 696\n1110 205\n830 204\n82 3\n264 358\n2513 623\n1575 842\n", "10\n10000 18\n10000 5655\n10000 1063\n10010 6782\n10111 4492\n10100 1308\n10000 447\n10000 2218\n10100 1591\n10000 1519\n", "9\n964 228\n409 47\n78 19\n726 35\n991 176\n731 110\n810 4\n105 65\n1269 170\n", "10\n10000 18\n10000 5655\n10000 1063\n10010 6782\n10111 4492\n11100 1308\n10000 447\n10000 2218\n10100 1591\n10000 1519\n", "9\n964 228\n409 47\n78 19\n726 35\n991 176\n731 110\n810 4\n105 76\n1269 170\n", "8\n1027 491\n38 696\n1110 205\n415 204\n82 3\n264 358\n2513 623\n1575 842\n", "10\n10000 18\n10000 5655\n10000 1063\n10010 6782\n10111 4492\n11100 1308\n10000 873\n10000 2218\n10100 1591\n10000 1519\n", "8\n1027 491\n38 696\n1110 205\n415 204\n82 3\n264 120\n2513 623\n1575 842\n", "10\n10000 18\n10000 5655\n10000 1063\n10010 6782\n10111 4492\n11100 457\n10000 873\n10000 2218\n10100 1591\n10000 1519\n", "8\n1027 491\n38 696\n1110 205\n415 204\n82 6\n264 120\n2513 623\n1575 842\n", "8\n1027 491\n38 696\n1110 205\n669 204\n82 6\n264 120\n2513 623\n1575 842\n", "8\n1027 491\n38 696\n1110 205\n669 204\n82 6\n264 68\n2513 623\n1575 842\n", "8\n1027 491\n38 696\n1110 205\n669 204\n134 6\n264 68\n2513 623\n1575 842\n", "8\n1027 491\n38 696\n1110 205\n669 204\n134 6\n264 68\n2513 623\n1575 1341\n", "8\n1027 491\n38 696\n1110 205\n384 204\n134 6\n264 68\n2513 623\n1575 1341\n", "8\n1027 491\n38 696\n1110 205\n384 267\n134 6\n264 68\n2513 623\n1575 1341\n", "8\n1027 491\n37 696\n1100 205\n384 267\n134 6\n264 68\n2513 623\n1575 1341\n", "8\n1027 632\n37 696\n1100 205\n384 267\n134 6\n264 68\n2513 623\n1575 1341\n", "8\n1027 632\n37 696\n1100 205\n384 267\n134 6\n264 68\n2513 623\n1575 360\n", "8\n1027 632\n37 696\n1101 205\n384 267\n134 6\n264 68\n2513 623\n1575 360\n", "8\n1027 632\n37 696\n1101 205\n384 267\n101 6\n264 68\n2513 623\n1575 360\n", "8\n1027 632\n37 696\n1101 205\n384 267\n111 6\n264 68\n2513 623\n1575 360\n", "8\n1027 632\n37 696\n1101 205\n762 267\n111 6\n264 68\n2513 623\n1575 360\n", "8\n1027 632\n37 696\n1101 205\n762 267\n111 6\n264 68\n2513 623\n28 360\n", "8\n1027 632\n37 696\n1101 205\n762 267\n111 6\n264 124\n2513 623\n28 360\n", "8\n1027 632\n37 696\n1101 205\n762 267\n101 6\n264 124\n2513 623\n28 360\n", "8\n1027 632\n37 696\n1101 205\n762 267\n101 6\n88 124\n2513 623\n28 360\n", "8\n1027 632\n37 696\n1101 205\n762 267\n101 7\n88 167\n2513 623\n28 360\n", "8\n1027 632\n15 696\n1101 205\n277 267\n101 7\n88 135\n2513 623\n28 360\n", "8\n1027 722\n15 696\n1101 205\n277 267\n101 7\n88 135\n2513 623\n28 360\n", "8\n1027 722\n15 696\n1101 205\n277 333\n101 7\n88 135\n2513 623\n28 360\n", "8\n1027 722\n15 696\n1101 205\n277 333\n111 7\n88 135\n2513 623\n28 360\n", "8\n1027 722\n15 696\n1101 205\n277 333\n111 7\n88 135\n2513 374\n28 360\n", "8\n1027 722\n15 696\n1101 205\n245 333\n111 3\n88 150\n2513 374\n28 360\n", "8\n1027 311\n15 696\n1101 205\n245 333\n111 3\n88 150\n2513 374\n28 360\n", "8\n1027 311\n15 696\n1101 205\n245 333\n101 3\n43 150\n2513 374\n28 565\n", "8\n1027 311\n15 997\n1101 205\n245 310\n101 3\n43 150\n2090 374\n28 565\n", "8\n1027 311\n5 997\n1101 205\n245 310\n101 3\n43 180\n2090 653\n28 565\n", "8\n1027 235\n5 997\n1101 205\n245 310\n101 3\n43 180\n2090 653\n28 565\n", "8\n1027 235\n5 997\n1101 205\n245 310\n101 4\n43 180\n2090 653\n28 565\n", "10\n91147 3\n60637 60633\n58274 58270\n81624 62\n59542 17\n76280 76277\n78239 6\n84713 84710\n58143 58143\n85720 5\n", "10\n71414 65271\n72899 65842\n55412 47808\n74943 73181\n61199 58741\n98215 96601\n85943 9011\n93437 87235\n76925 73203\n61125 56705\n", "10\n52962 52952\n85081 85073\n84189 84183\n58931 58927\n98086 98076\n75255 75253\n88184 88177\n74058 74054\n98676 98670\n51254 51167\n", "9\n775 189\n767 339\n576 121\n726 51\n529 176\n731 77\n577 95\n831 59\n709 244\n", "10\n55273 449\n93421 9599\n59339 2714\n90955 6048\n89721 567\n88472 3699\n59510 6441\n71328 8626\n96663 7566\n64180 64\n", "10\n25 2\n25 3\n25 4\n25 5\n25 6\n25 7\n17 8\n25 9\n25 10\n25 11\n", "10\n99902 99835\n7906 99852\n99959 99953\n99993 99980\n99911 99882\n99943 99855\n99935 99909\n99952 99932\n99910 99819\n99997 99991\n"], "output": ["623680566\n119279988\n2\n763186315\n30533224\n302872289\n396710457\n752099342\n2\n175711061\n", "297186641\n615808020\n147573332\n115162909\n327641521\n294993427\n685080452\n895438097\n829931383\n265256828\n", "276240302\n342119056\n63704656\n123585253\n461525974\n637993962\n460606037\n2\n186328425\n709487042\n", "689135754\n269316566\n50810476\n627254699\n430433188\n637409651\n726816331\n629275244\n642843449\n180153851\n", "141030068\n908788005\n2\n958622509\n352108572\n689266596\n718454365\n157995674\n448148491\n", "2\n240645100\n80890568\n877494121\n167480873\n78486577\n451765548\n271940261\n438315065\n295543770\n", "375912911\n125295590\n140825456\n946694299\n127853262\n457077198\n760101530\n116281442\n316985197\n42093669\n", "615651341\n111082575\n227249393\n813314652\n315669013\n935692901\n192778591\n889003281\n843015669\n85265851\n", "369595121\n75313765\n872833195\n2\n70182438\n150627528\n369595121\n193400370\n894027664\n70182438\n", "2\n118365377\n965276230\n279209398\n247220838\n896251510\n704242595\n813583162\n541831811\n662942220\n", "554619939\n822970711\n141530952\n756655719\n966615393\n741517332\n49248180\n522071812\n185563104\n76083501\n", "47081995\n431010087\n985756910\n393151310\n729851316\n953351123\n376123817\n199322441\n", "424548535\n817606323\n649851464\n809700114\n27665663\n400684027\n600841267\n587618843\n721748947\n993369830\n", "347062743\n345855484\n488205596\n919052136\n758690138\n945585493\n915472598\n903645638\n2\n351828744\n", "524401612\n74209860\n714413990\n217630004\n623437479\n364209884\n483184182\n2\n437566489\n260780290\n", "83333336\n800000008\n466666672\n2\n222222226\n2\n104761908\n104761908\n357142862\n2\n", "620450027\n662400424\n731220070\n922927150\n500042262\n195420842\n834428400\n725421199\n187852169\n502548989\n", "917435420\n300611105\n150424748\n851883057\n206540915\n966994264\n71944133\n562306041\n717184715\n8335104\n", "157646457\n115343550\n123307286\n665230050\n445159294\n67712729\n86815467\n530079704\n507371118\n70693825\n", "762544444\n86963219\n837340134\n2\n613343004\n148440985\n889284148\n694764291\n249272982\n740350847\n", "519324833\n52604913\n915017698\n584163970\n2\n970771174\n150668741\n482876399\n758347916\n579712355\n", "301999672\n635814936\n959215920\n794057598\n483622605\n360451265\n959215920\n984465317\n497927530\n843057147\n", "741437665\n943817448\n85865463\n943817448\n540574441\n943817448\n120796544\n241534974\n12363791\n424276305\n", "787033674\n279057232\n822968699\n254862535\n60569107\n737438617\n927638972\n261880817\n121071700\n678423890\n", "693434352\n766666675\n766666675\n915151524\n863636372\n45454548\n696969704\n818181826\n409090914\n469696975\n", "707998873\n117937668\n774060241\n117071462\n969962925\n441755268\n637907089\n715308167\n437210810\n128014112\n", "2\n333333338\n800000008\n500000006\n166666670\n2\n900000009\n100000003\n700000007\n2\n", "170730234\n260055745\n278751219\n266857973\n528113361\n266857973\n78500036\n820831600\n761488986\n217881918\n", "342608435\n120796544\n635814936\n342608435\n120796544\n120796544\n342608435\n2\n342608435\n342608435\n", "453642016\n861396752\n628320088\n157245147\n363992560\n926231585\n731567787\n485858461\n382786863\n590057295\n", "915038280\n35081318\n187034535\n216387964\n269766158\n942246484\n291388341\n746857995\n170333817\n347338923\n", "2\n644681692\n2\n270520996\n224079464\n2\n2\n865631619\n399547164\n277190837\n", "562804208\n224409350\n201794573\n423678890\n135969888\n696014465\n537813382\n636784364\n484236513\n133066302\n", "559130407\n125455613\n462186256\n588483249\n84685740\n868756059\n698673580\n2\n834415874\n178820712\n", "333333338\n141946947\n953216383\n", "623680566\n119279988\n2\n574259654\n30533224\n302872289\n396710457\n752099342\n2\n175711061\n", "276240302\n342119056\n63704656\n664851417\n461525974\n637993962\n460606037\n2\n186328425\n709487042\n", "689135754\n269316566\n50810476\n627254699\n430433188\n637409651\n726816331\n629275244\n2\n180153851\n", "141030068\n908788005\n2\n958622509\n352108572\n689266596\n520478427\n157995674\n448148491\n", "375912911\n125295590\n140825456\n946694299\n127853262\n457077198\n760101530\n116281442\n316985197\n896292973\n", "615651341\n111082575\n227249393\n943781168\n315669013\n935692901\n192778591\n889003281\n843015669\n85265851\n", "554619939\n822970711\n141530952\n756655719\n966615393\n2\n49248180\n522071812\n185563104\n76083501\n", "47081995\n431010087\n985756910\n393151310\n729851316\n953351123\n15292976\n199322441\n", "424548535\n817606323\n138503571\n809700114\n27665663\n400684027\n600841267\n587618843\n721748947\n993369830\n", "347062743\n345855484\n488205596\n919052136\n812426501\n945585493\n915472598\n903645638\n2\n351828744\n", "83333336\n800000008\n466666672\n2\n222222226\n57142861\n104761908\n104761908\n357142862\n2\n", "620450027\n662400424\n148583430\n922927150\n500042262\n195420842\n834428400\n725421199\n187852169\n502548989\n", "157646457\n268068771\n123307286\n665230050\n445159294\n67712729\n86815467\n530079704\n507371118\n70693825\n", "762544444\n86963219\n837340134\n2\n613343004\n148440985\n829904954\n694764291\n249272982\n740350847\n", "519324833\n52604913\n915017698\n584163970\n2\n970771174\n150668741\n482876399\n900084204\n579712355\n", "869138764\n943817448\n85865463\n943817448\n540574441\n943817448\n120796544\n241534974\n12363791\n424276305\n", "693434352\n766666675\n766666675\n915151524\n863636372\n45454548\n696969704\n818181826\n411764711\n469696975\n", "2\n333333338\n800000008\n2\n166666670\n2\n900000009\n100000003\n700000007\n2\n", "170730234\n260055745\n278751219\n266857973\n528113361\n266857973\n935887345\n820831600\n761488986\n217881918\n", "342608435\n120796544\n635814936\n342608435\n120796544\n120796544\n342608435\n2\n120796544\n342608435\n", "915038280\n35081318\n187034535\n216387964\n269766158\n942246484\n291388341\n144476871\n170333817\n347338923\n", "2\n644681692\n2\n270520996\n224079464\n2\n2\n865631619\n399547164\n125838048\n", "333333338\n141946947\n929824570\n", "141030068\n908788005\n2\n958622509\n352108572\n667590824\n520478427\n157995674\n448148491\n", "375912911\n125295590\n140825456\n946694299\n127853262\n457077198\n760101530\n116281442\n316985197\n36367679\n", "615651341\n111082575\n227249393\n943781168\n315669013\n935692901\n192778591\n856988126\n843015669\n85265851\n", "47081995\n431010087\n691368872\n393151310\n729851316\n953351123\n15292976\n199322441\n", "424548535\n817606323\n138503571\n809700114\n27665663\n400684027\n600841267\n587618843\n721748947\n220617527\n", "347062743\n345855484\n488205596\n919052136\n812426501\n326191042\n915472598\n903645638\n2\n351828744\n", "83333336\n800000008\n466666672\n2\n222222226\n57142861\n104761908\n285714290\n357142862\n2\n", "157646457\n268068771\n123307286\n665230050\n445159294\n67712729\n86815467\n530079704\n507371118\n307865331\n", "762544444\n86963219\n837340134\n2\n566275874\n148440985\n829904954\n694764291\n249272982\n740350847\n", "519324833\n111250081\n915017698\n584163970\n2\n970771174\n150668741\n482876399\n900084204\n579712355\n", "693434352\n766666675\n702380960\n915151524\n863636372\n45454548\n696969704\n818181826\n411764711\n469696975\n", "2\n333333338\n800000008\n2\n166666670\n2\n900000009\n104761908\n700000007\n2\n", "170730234\n260055745\n278751219\n266857973\n528113361\n266857973\n935887345\n820831600\n266857973\n217881918\n", "623680566\n119279988\n2\n872970461\n30533224\n302872289\n396710457\n752099342\n2\n175711061\n", "141030068\n908788005\n833166841\n958622509\n352108572\n667590824\n520478427\n157995674\n448148491\n", "375912911\n125295590\n140825456\n946694299\n127853262\n17486729\n760101530\n116281442\n316985197\n36367679\n", "615651341\n111082575\n227249393\n943781168\n315669013\n69707563\n192778591\n856988126\n843015669\n85265851\n", "47081995\n431010087\n266108725\n393151310\n729851316\n953351123\n15292976\n199322441\n", "424548535\n817606323\n138503571\n809700114\n27665663\n400684027\n600841267\n866057974\n721748947\n220617527\n", "347062743\n345855484\n488205596\n919052136\n812426501\n326191042\n2\n903645638\n2\n351828744\n", "83333336\n800000008\n466666672\n2\n222222226\n693434352\n104761908\n285714290\n357142862\n2\n", "157646457\n268068771\n123307286\n665230050\n445159294\n67712729\n86815467\n341854493\n507371118\n307865331\n", "762544444\n86963219\n895178060\n2\n566275874\n148440985\n829904954\n694764291\n249272982\n740350847\n", "519324833\n111250081\n915017698\n447467194\n2\n970771174\n150668741\n482876399\n900084204\n579712355\n", "693434352\n766666675\n702380960\n915151524\n863636372\n915151524\n696969704\n818181826\n411764711\n469696975\n", "170730234\n260055745\n278751219\n266857973\n528113361\n266857973\n935887345\n820831600\n140306757\n217881918\n", "141030068\n908788005\n833166841\n958622509\n352108572\n667590824\n763898299\n157995674\n448148491\n", "375912911\n125295590\n140825456\n946694299\n127853262\n17486729\n760101530\n116281442\n797712674\n36367679\n", "615651341\n137313950\n227249393\n943781168\n315669013\n69707563\n192778591\n856988126\n843015669\n85265851\n", "47081995\n431010087\n266108725\n393151310\n134004031\n953351123\n15292976\n199322441\n", "347062743\n345855484\n61069738\n919052136\n812426501\n326191042\n2\n903645638\n2\n351828744\n", "179894585\n268068771\n123307286\n665230050\n445159294\n67712729\n86815467\n341854493\n507371118\n307865331\n", "762544444\n86963219\n895178060\n2\n566275874\n148440985\n829904954\n694764291\n249272982\n2\n", "693434352\n766666675\n702380960\n915151524\n863636372\n915151524\n696969704\n818181826\n2\n469696975\n", "333632852\n260055745\n278751219\n266857973\n528113361\n266857973\n935887345\n820831600\n140306757\n217881918\n", "141030068\n908788005\n436896442\n958622509\n352108572\n667590824\n763898299\n157995674\n448148491\n", "615651341\n137313950\n227249393\n943781168\n315669013\n69707563\n192778591\n856988126\n843015669\n343994389\n", "29980738\n431010087\n266108725\n393151310\n134004031\n953351123\n15292976\n199322441\n", "347062743\n345855484\n61069738\n919052136\n812426501\n2\n2\n903645638\n2\n351828744\n", "179894585\n268068771\n123307286\n665230050\n445159294\n620556439\n86815467\n341854493\n507371118\n307865331\n", "762544444\n86963219\n895178060\n2\n845685021\n148440985\n829904954\n694764291\n249272982\n2\n", "693434352\n766666675\n702380960\n915151524\n863636372\n915151524\n696969704\n818181826\n2\n693434352\n", "141030068\n908788005\n436896442\n958622509\n352108572\n667590824\n763898299\n790258090\n448148491\n", "615651341\n137313950\n227249393\n943781168\n315669013\n209373743\n192778591\n856988126\n843015669\n343994389\n", "29980738\n431010087\n266108725\n870416561\n134004031\n953351123\n15292976\n199322441\n", "179894585\n268068771\n123307286\n665230050\n445159294\n620556439\n86815467\n341854493\n507371118\n70693825\n", "693434352\n766666675\n702380960\n915151524\n863636372\n915151524\n696969704\n391304353\n2\n693434352\n", "141030068\n908788005\n293931564\n958622509\n352108572\n667590824\n763898299\n790258090\n448148491\n", "615651341\n137313950\n227249393\n943781168\n315669013\n209373743\n192778591\n856988126\n843015669\n22642671\n", "29980738\n431010087\n266108725\n870416561\n134004031\n953351123\n15292976\n2\n", "179894585\n268068771\n123307286\n665230050\n445159294\n620556439\n86815467\n341854493\n507371118\n272693178\n", "141030068\n908788005\n293931564\n652533868\n352108572\n667590824\n763898299\n790258090\n448148491\n", "29980738\n2\n266108725\n870416561\n134004031\n953351123\n15292976\n2\n", "179894585\n592038110\n123307286\n665230050\n445159294\n620556439\n86815467\n341854493\n507371118\n272693178\n", "141030068\n908788005\n293931564\n841146819\n352108572\n667590824\n763898299\n790258090\n448148491\n", "179894585\n592038110\n123307286\n665230050\n858881588\n620556439\n86815467\n341854493\n507371118\n272693178\n", "141030068\n567325044\n293931564\n841146819\n352108572\n667590824\n763898299\n790258090\n448148491\n", "29980738\n2\n266108725\n2\n134004031\n953351123\n15292976\n2\n", "179894585\n592038110\n123307286\n665230050\n858881588\n620556439\n86815467\n341854493\n843305107\n272693178\n", "141030068\n567325044\n293931564\n841146819\n352108572\n667590824\n763898299\n790258090\n603325797\n", "29980738\n2\n266108725\n2\n134004031\n953351123\n738280814\n2\n", "179894585\n592038110\n123307286\n507423588\n858881588\n620556439\n86815467\n341854493\n843305107\n272693178\n", "141030068\n567325044\n293931564\n841146819\n537682830\n667590824\n763898299\n790258090\n603325797\n", "29980738\n2\n266108725\n2\n134004031\n953351123\n386939664\n2\n", "179894585\n592038110\n123307286\n507423588\n858881588\n620556439\n86815467\n782065247\n843305107\n272693178\n", "308807653\n567325044\n293931564\n841146819\n537682830\n667590824\n763898299\n790258090\n603325797\n", "29980738\n2\n266108725\n2\n68326223\n953351123\n386939664\n2\n", "179894585\n592038110\n123307286\n507423588\n858881588\n418962782\n86815467\n782065247\n843305107\n272693178\n", "308807653\n567325044\n293931564\n841146819\n537682830\n252921945\n763898299\n790258090\n603325797\n", "29980738\n2\n266108725\n2\n2\n953351123\n386939664\n2\n", "179894585\n592038110\n123307286\n507423588\n858881588\n918355739\n86815467\n782065247\n843305107\n272693178\n", "85367966\n567325044\n293931564\n841146819\n537682830\n252921945\n763898299\n790258090\n603325797\n", "29980738\n2\n266108725\n416529812\n2\n953351123\n386939664\n2\n", "348098783\n592038110\n123307286\n507423588\n858881588\n918355739\n86815467\n782065247\n843305107\n272693178\n", "85367966\n567325044\n293931564\n841146819\n537682830\n252921945\n723986663\n790258090\n603325797\n", "29980738\n2\n266108725\n416529812\n2\n831073992\n386939664\n2\n", "348098783\n592038110\n123307286\n507423588\n858881588\n918355739\n86815467\n782065247\n843305107\n584197442\n", "85367966\n567325044\n293931564\n841146819\n537682830\n252921945\n723986663\n107368659\n603325797\n", "29980738\n2\n266108725\n416529812\n639641681\n831073992\n386939664\n2\n", "348098783\n592038110\n123307286\n507423588\n858881588\n918355739\n86815467\n712431436\n843305107\n584197442\n", "85367966\n567325044\n293931564\n841146819\n537682830\n252921945\n723986663\n107368659\n633647120\n", "29980738\n2\n266108725\n416529812\n458210310\n831073992\n386939664\n2\n", "348098783\n592038110\n123307286\n507423588\n858881588\n810317420\n86815467\n712431436\n843305107\n584197442\n", "797590054\n567325044\n293931564\n841146819\n537682830\n252921945\n723986663\n107368659\n633647120\n", "29980738\n2\n266108725\n916954460\n458210310\n831073992\n386939664\n2\n", "348098783\n592038110\n123307286\n893355968\n858881588\n810317420\n86815467\n712431436\n843305107\n584197442\n", "797590054\n567325044\n293931564\n841146819\n537682830\n252921945\n723986663\n168195722\n633647120\n", "348098783\n924773386\n123307286\n893355968\n858881588\n810317420\n86815467\n712431436\n843305107\n584197442\n", "797590054\n332530327\n293931564\n841146819\n537682830\n252921945\n723986663\n168195722\n633647120\n", "29980738\n2\n266108725\n916954460\n458210310\n587103606\n386939664\n2\n", "348098783\n924773386\n123307286\n217909220\n858881588\n810317420\n86815467\n712431436\n843305107\n584197442\n", "797590054\n332530327\n293931564\n841146819\n537682830\n252921945\n723986663\n919413928\n633647120\n", "29980738\n2\n266108725\n916954460\n458210310\n2\n386939664\n2\n", "348098783\n924773386\n123307286\n217909220\n858881588\n810317420\n86815467\n712431436\n374504469\n584197442\n", "797590054\n332530327\n293931564\n311228103\n537682830\n252921945\n723986663\n919413928\n633647120\n", "29980738\n2\n266108725\n916954460\n458210310\n2\n386939664\n876849608\n", "348098783\n924773386\n123307286\n217909220\n458452354\n810317420\n86815467\n712431436\n374504469\n584197442\n", "797590054\n620868631\n293931564\n311228103\n537682830\n252921945\n723986663\n919413928\n633647120\n", "348098783\n924773386\n123307286\n217909220\n458452354\n360410274\n86815467\n712431436\n374504469\n584197442\n", "797590054\n620868631\n293931564\n311228103\n537682830\n252921945\n723986663\n695054952\n633647120\n", "29980738\n2\n266108725\n135496546\n458210310\n2\n386939664\n876849608\n", "348098783\n924773386\n123307286\n217909220\n458452354\n360410274\n70925137\n712431436\n374504469\n584197442\n", "29980738\n2\n266108725\n135496546\n458210310\n95756277\n386939664\n876849608\n", "348098783\n924773386\n123307286\n217909220\n458452354\n859039651\n70925137\n712431436\n374504469\n584197442\n", "29980738\n2\n266108725\n135496546\n173451048\n95756277\n386939664\n876849608\n", "29980738\n2\n266108725\n59242870\n173451048\n95756277\n386939664\n876849608\n", "29980738\n2\n266108725\n59242870\n173451048\n705230379\n386939664\n876849608\n", "29980738\n2\n266108725\n59242870\n47630726\n705230379\n386939664\n876849608\n", "29980738\n2\n266108725\n59242870\n47630726\n705230379\n386939664\n920021791\n", "29980738\n2\n266108725\n714344002\n47630726\n705230379\n386939664\n920021791\n", "29980738\n2\n266108725\n523702682\n47630726\n705230379\n386939664\n920021791\n", "29980738\n2\n853214959\n523702682\n47630726\n705230379\n386939664\n920021791\n", "419703109\n2\n853214959\n523702682\n47630726\n705230379\n386939664\n920021791\n", "419703109\n2\n853214959\n523702682\n47630726\n705230379\n386939664\n435914192\n", "419703109\n2\n76895485\n523702682\n47630726\n705230379\n386939664\n435914192\n", "419703109\n2\n76895485\n523702682\n658571588\n705230379\n386939664\n435914192\n", "419703109\n2\n76895485\n523702682\n721404793\n705230379\n386939664\n435914192\n", "419703109\n2\n76895485\n76738029\n721404793\n705230379\n386939664\n435914192\n", "419703109\n2\n76895485\n76738029\n721404793\n705230379\n386939664\n2\n", "419703109\n2\n76895485\n76738029\n721404793\n122006795\n386939664\n2\n", "419703109\n2\n76895485\n76738029\n658571588\n122006795\n386939664\n2\n", "419703109\n2\n76895485\n76738029\n658571588\n2\n386939664\n2\n", "419703109\n2\n76895485\n76738029\n5659526\n2\n386939664\n2\n", "419703109\n2\n76895485\n644195057\n5659526\n2\n386939664\n2\n", "437417795\n2\n76895485\n644195057\n5659526\n2\n386939664\n2\n", "437417795\n2\n76895485\n2\n5659526\n2\n386939664\n2\n", "437417795\n2\n76895485\n2\n380540241\n2\n386939664\n2\n", "437417795\n2\n76895485\n2\n380540241\n2\n603546026\n2\n", "437417795\n2\n76895485\n2\n161537670\n2\n603546026\n2\n", "418554550\n2\n76895485\n2\n161537670\n2\n603546026\n2\n", "418554550\n2\n76895485\n2\n571385464\n2\n603546026\n2\n", "418554550\n2\n76895485\n2\n571385464\n2\n989999622\n2\n", "418554550\n2\n76895485\n2\n571385464\n2\n579541155\n2\n", "580773520\n2\n76895485\n2\n571385464\n2\n579541155\n2\n", "580773520\n2\n76895485\n2\n595224572\n2\n579541155\n2\n", "623680566\n119279988\n824480296\n763186315\n30533224\n302872289\n346827279\n752099342\n2\n175711061\n", "297186641\n615808020\n506280887\n115162909\n327641521\n294993427\n113111271\n895438097\n829931383\n265256828\n", "276240302\n342119056\n63704656\n123585253\n461525974\n637993962\n460606037\n136468267\n186328425\n311806504\n", "141030068\n908788005\n649440167\n857840937\n352108572\n689266596\n718454365\n157995674\n448148491\n", "615651341\n111082575\n227249393\n813314652\n315669013\n935692901\n192778591\n165905803\n843015669\n85265851\n", "259226284\n223171932\n133162654\n290909096\n420901568\n541857714\n944117656\n994202908\n58695655\n23913046\n", "902741694\n2\n965276230\n279209398\n247220838\n896251510\n704242595\n813583162\n541831811\n662942220\n"]}, "short_description": "1. One-sentence summary  \nCompute a large summation of weighted binomial\u2010and\u2010factorial terms modulo a prime, accumulating contributions of each choice size.  \n\n2. Core algorithmic approach  \n\u2013 Precomputation of factorials and modular inverses in O(N) to support O(1) binomial\u2010coefficient queries (\u201cnCr mod p\u201d).  \n\u2013 A single O(N) loop that updates running products and combines precomputed combinatorial quantities under modular arithmetic.  \n\n3. Reusable components  \n\u2013 Factorial and inverse\u2010factorial precomputation (g1, g2, inverse arrays) together with an O(1) modular combination function `cmb(n,r,mod)`.  \n\u2013 Modular prefix/suffix product accumulation pattern for incremental updates of terms that depend on previous iterations.  \n\u2013 Standard fast I/O lambdas and modular arithmetic idioms (e.g. taking `% mod` after every multiplication/addition)."}
{"name": "809_A. Do you want a date?", "description": "Leha decided to move to a quiet town Vi\u010dkopolis, because he was tired by living in Bankopolis. Upon arrival he immediately began to expand his network of hacked computers. During the week Leha managed to get access to n computers throughout the town. Incidentally all the computers, which were hacked by Leha, lie on the same straight line, due to the reason that there is the only one straight street in Vi\u010dkopolis.\n\nLet's denote the coordinate system on this street. Besides let's number all the hacked computers with integers from 1 to n. So the i-th hacked computer is located at the point xi. Moreover the coordinates of all computers are distinct. \n\nLeha is determined to have a little rest after a hard week. Therefore he is going to invite his friend Noora to a restaurant. However the girl agrees to go on a date with the only one condition: Leha have to solve a simple task.\n\nLeha should calculate a sum of F(a) for all a, where a is a non-empty subset of the set, that consists of all hacked computers. Formally, let's denote A the set of all integers from 1 to n. Noora asks the hacker to find value of the expression <image>. Here F(a) is calculated as the maximum among the distances between all pairs of computers from the set a. Formally, <image>. Since the required sum can be quite large Noora asks to find it modulo 109 + 7.\n\nThough, Leha is too tired. Consequently he is not able to solve this task. Help the hacker to attend a date.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 3\u00b7105) denoting the number of hacked computers.\n\nThe second line contains n integers x1, x2, ..., xn (1 \u2264 xi \u2264 109) denoting the coordinates of hacked computers. It is guaranteed that all xi are distinct.\n\nOutput\n\nPrint a single integer \u2014 the required sum modulo 109 + 7.\n\nExamples\n\nInput\n\n2\n4 7\n\n\nOutput\n\n3\n\n\nInput\n\n3\n4 3 1\n\n\nOutput\n\n9\n\nNote\n\nThere are three non-empty subsets in the first sample test:<image>, <image> and <image>. The first and the second subset increase the sum by 0 and the third subset increases the sum by 7 - 4 = 3. In total the answer is 0 + 0 + 3 = 3.\n\nThere are seven non-empty subsets in the second sample test. Among them only the following subsets increase the answer: <image>, <image>, <image>, <image>. In total the sum is (4 - 3) + (4 - 1) + (3 - 1) + (4 - 1) = 9.", "solution": "def main():\n  \n  largemodulus = 1000000007\n  maxofn = 300001\n  n = 0\n  answer = 0\n  \n  powersoftwo = []\n  multiplier = 1\n  \n  for _ in range(maxofn):\n    powersoftwo.append(multiplier)\n    if multiplier >= largemodulus:\n      multiplier = multiplier % largemodulus\n    multiplier *= 2\n  \n  n = int(input())\n  \n  hacked = [int(i) for i in input().split()]\n  \n  hacked.sort(reverse = True)\n  \n  for x in range(n):\n    answer += (hacked[x] * ((powersoftwo[n-1-x]-1)-(powersoftwo[x]-1))) % largemodulus\n    if answer >= largemodulus:\n      answer = answer % largemodulus\n        \n        \n  print(answer)\n  \n  return\n\nmain()", "difficulty": 7, "public_tests": {"input": ["3\n4 3 1\n", "2\n4 7\n"], "output": ["9\n", "3\n"]}, "private_tests": {"input": ["20\n2 6 8 9 20 23 27 36 43 49 63 65 70 71 85 87 89 91 94 97\n", "3\n465343471 465343474 465343473\n", "5\n999999984 999999997 999999994 999999991 999999982\n", "2\n1000000000 1\n", "1\n2\n", "5\n4 7 13 17 18\n", "5\n20 17 13 7 2\n", "1\n78091781\n", "5\n999999980 999999985 999999986 999999990 999999992\n", "10\n10 3 6 2 1 9 8 4 5 7\n", "5\n1000000000 999999988 999999982 999999981 999999980\n", "10\n756734546 756734524 756734550 756734529 756734553 756734538 756734541 756734536 756734579 756734537\n", "20\n1 8 9 12 15 17 18 24 30 33 36 41 53 54 59 62 64 66 72 73\n", "5\n3 17 2 5 4\n", "20\n8 11 13 19 21 34 36 44 57 58 61 63 76 78 79 81 85 86 90 95\n", "5\n9 10 7 4 5\n", "3\n999999998 999999999 999999992\n", "10\n877105545 939360757 849826701 845946140 803128820 926787996 967305000 904694971 921301848 971203310\n"], "output": ["92743989\n", "9\n", "285\n", "999999999\n", "0\n", "270\n", "330\n", "0\n", "210\n", "7181\n", "342\n", "36489\n", "68059140\n", "237\n", "83396599\n", "114\n", "21\n", "861364152\n"]}, "generated_tests": {"input": ["20\n2 3 8 9 20 23 27 36 43 49 63 65 70 71 85 87 89 91 94 97\n", "3\n465343471 465343474 861996480\n", "5\n999999984 999999997 999999994 999999991 158248306\n", "2\n1010000000 1\n", "1\n0\n", "5\n4 5 13 17 18\n", "5\n20 17 13 7 0\n", "5\n999999980 999999985 999999986 999999990 179169520\n", "10\n10 4 6 2 1 9 8 4 5 7\n", "5\n1000000100 999999988 999999982 999999981 999999980\n", "10\n113558161 756734524 756734550 756734529 756734553 756734538 756734541 756734536 756734579 756734537\n", "20\n1 8 9 9 15 17 18 24 30 33 36 41 53 54 59 62 64 66 72 73\n", "5\n3 17 2 4 4\n", "20\n14 11 13 19 21 34 36 44 57 58 61 63 76 78 79 81 85 86 90 95\n", "5\n9 10 9 4 5\n", "10\n877105545 939360757 849826701 845946140 803128820 265756841 967305000 904694971 921301848 971203310\n", "3\n3 3 1\n", "2\n4 12\n", "20\n2 3 8 9 20 23 27 36 43 49 63 65 108 71 85 87 89 91 94 97\n", "5\n999999984 999999997 999999994 999999991 16242044\n", "2\n1010000000 0\n", "5\n4 5 13 17 14\n", "5\n34 17 13 7 0\n", "5\n999999980 1262871899 999999986 999999990 179169520\n", "10\n10 4 6 2 1 6 8 4 5 7\n", "10\n113558161 756734524 166694537 756734529 756734553 756734538 756734541 756734536 756734579 756734537\n", "20\n1 8 9 9 15 17 18 19 30 33 36 41 53 54 59 62 64 66 72 73\n", "20\n14 11 13 19 21 34 36 44 57 58 61 63 76 78 79 81 85 86 74 95\n", "5\n9 10 9 7 5\n", "10\n877105545 939360757 849826701 845946140 733167691 265756841 967305000 904694971 921301848 971203310\n", "3\n3 0 1\n", "2\n4 9\n", "20\n2 3 8 9 20 23 27 36 43 49 63 65 108 71 85 87 89 91 94 5\n", "5\n999999984 999999997 999999994 999999991 6578385\n", "2\n1010000010 1\n", "5\n34 17 6 7 0\n", "10\n10 4 6 2 1 6 8 3 5 7\n", "10\n113558161 756734524 258293061 756734529 756734553 756734538 756734541 756734536 756734579 756734537\n", "20\n1 8 9 9 15 17 18 19 30 33 36 41 53 54 102 62 64 66 72 73\n", "5\n3 17 3 4 3\n", "20\n14 11 13 19 21 34 36 44 57 58 121 63 76 78 79 81 85 86 74 95\n", "5\n9 11 9 7 5\n", "10\n877105545 939360757 849826701 845946140 733167691 265756841 967305000 1281921930 921301848 971203310\n", "2\n6 9\n", "20\n2 3 8 14 20 23 27 36 43 49 63 65 108 71 85 87 89 91 94 5\n", "5\n956302860 999999997 999999994 999999991 6578385\n", "2\n1010000010 0\n", "5\n4 8 13 17 13\n", "5\n21 17 6 7 0\n", "10\n10 4 6 2 1 6 8 3 5 13\n", "10\n25695255 756734524 258293061 756734529 756734553 756734538 756734541 756734536 756734579 756734537\n", "20\n1 8 9 9 15 17 18 19 30 33 36 41 53 54 102 62 65 66 72 73\n", "5\n3 4 3 4 3\n", "20\n14 11 13 19 21 34 36 44 57 58 121 63 76 78 79 95 85 86 74 95\n", "5\n17 11 9 7 5\n", "2\n6 7\n", "20\n2 3 8 14 20 23 27 36 43 49 63 65 108 71 85 87 89 174 94 5\n", "5\n956302860 999999997 999999994 595313280 6578385\n", "2\n1001000000 1\n", "5\n21 17 7 7 0\n", "10\n10 4 6 2 1 6 8 3 10 13\n", "10\n25695255 756734524 258293061 536933569 756734553 756734538 756734541 756734536 756734579 756734537\n", "20\n1 8 9 17 15 17 18 19 30 33 36 41 53 54 102 62 65 66 72 73\n", "5\n6 4 3 4 3\n", "20\n14 11 13 19 21 34 31 44 57 58 121 63 76 78 79 95 85 86 74 95\n", "5\n2 11 9 7 5\n", "20\n2 3 8 14 20 23 27 36 43 49 63 120 108 71 85 87 89 174 94 5\n", "2\n1001000001 1\n", "5\n4 1 17 17 13\n", "5\n26 17 7 7 0\n", "10\n10 4 6 2 1 6 8 3 10 20\n", "10\n25695255 756734524 258293061 536933569 756734553 1435997750 756734541 756734536 756734579 756734537\n", "20\n1 8 9 17 15 17 18 19 30 33 71 41 53 54 102 62 65 66 72 73\n", "20\n14 11 13 19 21 27 31 44 57 58 121 63 76 78 79 95 85 86 74 95\n", "5\n2 11 7 7 5\n", "20\n2 3 8 14 20 23 27 36 43 49 63 74 108 71 85 87 89 174 94 5\n", "5\n5 1 17 17 13\n", "5\n15 17 7 7 0\n", "1\n108582346\n", "1\n-1\n", "1\n42882160\n", "5\n3 17 2 4 3\n", "1\n-2\n", "5\n4 8 13 17 14\n", "1\n69885171\n", "3\n3 0 0\n", "1\n-3\n", "1\n55834964\n", "1\n1\n", "5\n4 8 17 17 13\n", "1\n66300491\n", "2\n1 7\n", "1\n-4\n", "1\n53608932\n", "5\n6 3 3 4 3\n", "2\n1 4\n", "2\n1001000000 0\n", "1\n-8\n"], "output": ["93530415\n", "189959020\n", "626275341\n", "9999992\n", "0\n", "282\n", "360\n", "312457002\n", "7057\n", "1842\n", "663157568\n", "68255724\n", "231\n", "81168386\n", "114\n", "211344009\n", "6\n", "8\n", "100824226\n", "756369257\n", "9999993\n", "249\n", "570\n", "255535633\n", "6623\n", "533312944\n", "68275564\n", "79620590\n", "87\n", "981470656\n", "9\n", "5\n", "100218880\n", "901324142\n", "10000002\n", "576\n", "6747\n", "267288009\n", "84774053\n", "216\n", "96131294\n", "102\n", "490950129\n", "3\n", "100055120\n", "163506879\n", "10000003\n", "225\n", "381\n", "8912\n", "165232660\n", "84806805\n", "21\n", "97507442\n", "204\n", "1\n", "138721254\n", "329444345\n", "999992\n", "375\n", "9256\n", "420551171\n", "84348133\n", "51\n", "97572754\n", "159\n", "144265358\n", "999993\n", "318\n", "450\n", "12833\n", "524037383\n", "84850637\n", "97662546\n", "147\n", "138769446\n", "312\n", "303\n", "0\n", "0\n", "0\n", "231\n", "0\n", "231\n", "0\n", "9\n", "0\n", "0\n", "0\n", "249\n", "0\n", "6\n", "0\n", "0\n", "51\n", "3\n", "999993\n", "0\n"]}, "short_description": "1. One-sentence summary:  \nCompute a single modular sum by assigning each input value a weight derived from combinatorial counts and summing their weighted contributions after sorting.  \n\n2. Core algorithmic approach:  \nSort the array in descending order and then, using precomputed powers of two (mod M), accumulate each element\u2019s contribution in O(n), effectively counting how many subsets include it as a maximum versus as a minimum.  \n\n3. Reusable components:  \n- Precompute an array of powers of two modulo a prime (or modulus) for O(1) exponent lookups in later computations.  \n- Sort-and-scan pattern that assigns each element a coefficient based on its index to capture combinatorial inclusion/exclusion counts.  \n- A modular\u2010arithmetic accumulation loop that ensures all additions and multiplications stay within the modulus."}
{"name": "1359_E. Modular Stability", "description": "We define x mod y as the remainder of division of x by y (\\% operator in C++ or Java, mod operator in Pascal).\n\nLet's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:\n\n (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  \n\nThat is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.\n\nFor two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 \u2264 a_1 < a_2 < ... < a_k \u2264 n.\n\nInput\n\nThe only line contains two integers n and k (1 \u2264 n, k \u2264 5 \u22c5 10^5).\n\nOutput\n\nPrint one integer \u2014 the number of stable arrays [a_1, a_2, ..., a_k] such that 1 \u2264 a_1 < a_2 < ... < a_k \u2264 n. Since the answer may be large, print it modulo 998244353.\n\nExamples\n\nInput\n\n\n7 3\n\n\nOutput\n\n\n16\n\n\nInput\n\n\n3 7\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n1337 42\n\n\nOutput\n\n\n95147305\n\n\nInput\n\n\n1 1\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n500000 1\n\n\nOutput\n\n\n500000", "solution": "import sys\nimport string\ninput = sys.stdin.readline\nimport math\n#import numpy\n#letters = list(string.ascii_lowercase)\nfrom decimal import Decimal\n\nn = list(map(int, input().split()))\nn,k = n[0], n[1]\nm = 998244353\n\nfact = []\nfac = 1\n\nfor i in range(1, n+2):\n    fac *= i\n    fac = fac % m\n    fact.append(fac)\n\nans = 0\nfact = [1] + fact\n\nfor i in range(1, n//k + 1):\n    out = n//k\n    a = n//i - 1\n    b = k - 1\n    #print(a,b)\n    #print(pow(2,6, 502))\n    l = fact[b] * fact[a-b]\n    ans += (fact[a] * pow(l, m-2, m)) % m\n    #print(ans)\n    #print(i, ans)\n    \nprint(int(ans) % m)", "difficulty": 11, "public_tests": {"input": ["500000 1\n", "1337 42\n", "7 3\n", "1 1\n", "3 7\n"], "output": ["500000\n", "95147305\n", "16\n", "1\n", "0\n"]}, "private_tests": {"input": ["1 500000\n", "500000 200\n", "500000 500\n", "500000 250000\n", "500000 500000\n", "250000 500000\n", "500000 50\n", "37 13\n", "123456 78901\n", "500 100\n"], "output": ["0\n", "123055441\n", "882447093\n", "803991687\n", "1\n", "0\n", "635965713\n", "253439535\n", "963821949\n", "337564072\n"]}, "generated_tests": {"input": ["500000 46\n", "500000 936\n", "500000 31291\n", "500000 471528\n", "177415 50\n", "46 13\n", "227089 78901\n", "951 100\n", "159 42\n", "2 1\n", "3 11\n", "500000 49\n", "500000 35046\n", "177415 63\n", "62 13\n", "227089 94271\n", "135 100\n", "244 42\n", "500000 85\n", "125233 63\n", "62 20\n", "233159 94271\n", "135 110\n", "244 1\n", "500000 149\n", "125233 84\n", "124 20\n", "433366 94271\n", "244 2\n", "500000 165\n", "70543 84\n", "111 20\n", "433366 1264\n", "244 4\n", "500000 236\n", "41142 84\n", "111 1\n", "500000 80\n", "68027 84\n", "111 2\n", "500000 34\n", "45781 84\n", "011 2\n", "45781 41\n", "011 3\n", "16135 41\n", "16135 28\n", "16135 53\n", "23070 53\n", "6186 53\n", "6186 34\n", "6453 34\n", "6453 18\n", "3916 18\n", "491 18\n", "491 36\n", "491 7\n", "67 7\n", "16 7\n", "16 12\n", "4 1\n", "8 1\n", "47647 200\n", "27561 500\n", "500000 121854\n", "234213 50\n", "67 13\n", "500 101\n", "27112 1\n", "1337 80\n", "157897 471528\n", "3 14\n", "2 14\n", "15 100\n", "2 24\n", "2 7\n", "16 21\n", "12 21\n", "10 21\n", "10 20\n", "3 20\n", "4 20\n", "4 26\n", "4 28\n", "4 8\n", "1 285821\n", "73637 78901\n", "1 3\n", "1 2\n"], "output": ["893162077\n", "517874966\n", "668028305\n", "588862109\n", "371611824\n", "809826598\n", "228349529\n", "662918584\n", "130551821\n", "2\n", "0\n", "201853159\n", "174327886\n", "278794146\n", "209117994\n", "102427192\n", "969951824\n", "911013594\n", "770168552\n", "831574948\n", "962952189\n", "135132421\n", "796792990\n", "244\n", "21212937\n", "59202883\n", "194568343\n", "231488931\n", "1139\n", "39418314\n", "815100899\n", "240570366\n", "922381491\n", "2811296\n", "133962736\n", "618534936\n", "111\n", "217182164\n", "726177822\n", "431\n", "991237119\n", "99662983\n", "18\n", "590104751\n", "52\n", "742700906\n", "48219745\n", "947250537\n", "736039191\n", "641700003\n", "13479540\n", "555854364\n", "542058011\n", "468126184\n", "352246563\n", "497965086\n", "311263221\n", "91825399\n", "5012\n", "1365\n", "4\n", "8\n", "853267644\n", "806784116\n", "377057930\n", "793765940\n", "762664103\n", "250806697\n", "27112\n", "557004850\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary  \n   Compute the sum of certain binomial coefficients, each of the form C(floor(n / i) \u2212 1, k \u2212 1), for i = 1\u2026\u230an/k\u230b, all taken modulo a prime.\n\n2. Core algorithmic approach  \n   Precompute factorials mod m and use Fermat\u2019s little\u2010theorem for fast modular inverses to evaluate each binomial coefficient in O(1), then accumulate them in O(n/k) time.\n\n3. Reusable components  \n   - Factorial table construction modulo m: fac[i] = i! mod m for i up to n, in O(n).  \n   - Fast modular inverse via exponentiation: inv(x) = x^(m\u20132) mod m.  \n   - Binomial(n, k) mod prime using precomputed factorials and inverses: fac[n] * inv(fac[k]\u00b7fac[n\u2013k]) mod m."}
{"name": "1312_D. Count the Arrays", "description": "Your task is to calculate the number of arrays such that:\n\n  * each array contains n elements; \n  * each element is an integer from 1 to m; \n  * for each array, there is exactly one pair of equal elements; \n  * for each array a, there exists an index i such that the array is strictly ascending before the i-th element and strictly descending after it (formally, it means that a_j < a_{j + 1}, if j < i, and a_j > a_{j + 1}, if j \u2265 i). \n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 m \u2264 2 \u22c5 10^5).\n\nOutput\n\nPrint one integer \u2014 the number of arrays that meet all of the aforementioned conditions, taken modulo 998244353.\n\nExamples\n\nInput\n\n\n3 4\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n3 5\n\n\nOutput\n\n\n10\n\n\nInput\n\n\n42 1337\n\n\nOutput\n\n\n806066790\n\n\nInput\n\n\n100000 200000\n\n\nOutput\n\n\n707899035\n\nNote\n\nThe arrays in the first example are:\n\n  * [1, 2, 1]; \n  * [1, 3, 1]; \n  * [1, 4, 1]; \n  * [2, 3, 2]; \n  * [2, 4, 2]; \n  * [3, 4, 3]. ", "solution": "MOD = 998244353\n\n\ndef add(x, y):\n    x += y\n    while(x >= MOD):\n        x -= MOD\n    while(x < 0):\n        x += MOD\n    return x\n\n\ndef mul(x, y):\n    return (x * y) % MOD\n\n\ndef binpow(x, y):\n    z = 1\n    while(y):\n        if(y & 1):\n            z = mul(z, x)\n        x = mul(x, x)\n        y >>= 1\n    return z\n\n\ndef inv(x):\n    return binpow(x, MOD - 2)\n\n\ndef divide(x, y):\n    return mul(x, inv(y))\n\n\nfact = []\nN = 200000\n\n\ndef precalc():\n    fact.append(1)\n    for i in range(N):\n        fact.append(mul(fact[i], i + 1))\n\n\ndef C(n, k):\n    return divide(fact[n], mul(fact[k], fact[n - k]))\n\n\nprecalc()\n\nNM = input()\n[N, M] = NM.split()\nN = int(N)\nM = int(M)\n\nres = 0\n\nif (N > 2):\n    res = mul(C(M, N - 1), mul(N - 2, binpow(2, N - 3)))\n\n\nprint(res)\n", "difficulty": 10, "public_tests": {"input": ["100000 200000\n", "3 4\n", "3 5\n", "42 1337\n"], "output": ["707899035\n", "6\n", "10\n", "806066790\n"]}, "private_tests": {"input": ["3 3\n", "20 20\n", "3 200000\n", "2 2\n", "150000 200000\n", "200000 200000\n", "1000 200000\n", "2 3\n", "7 14\n", "2 10\n"], "output": ["3\n", "47185920\n", "35012940\n", "0\n", "270223789\n", "668956439\n", "664520775\n", "0\n", "240240\n", "0\n"]}, "generated_tests": {"input": ["3 6\n", "6 200000\n", "2 1\n", "113870 200000\n", "42 2283\n", "113870 172811\n", "4 5\n", "42 2527\n", "5 6\n", "57279 172811\n", "4 9\n", "4 8\n", "7 2527\n", "3 8\n", "7 5041\n", "17 20\n", "161246 200000\n", "1001 200000\n", "13 14\n", "4 10\n", "100000 111189\n", "79 1337\n", "6 6\n", "113870 123800\n", "24 2283\n", "113870 149538\n", "65 2527\n", "7 9\n", "10 2527\n", "5 8\n", "7 1726\n", "1010 200000\n", "4 11\n", "101000 111189\n", "79 2528\n", "24 3834\n", "65 1905\n", "7 11\n", "9 2527\n", "6 8\n", "7 2521\n", "5 11\n", "79 716\n", "34 3834\n", "65 3600\n", "3 12\n", "9 3936\n", "7 4086\n", "79 172\n", "34 3395\n", "65 3620\n", "3 14\n", "6 3936\n", "7 7497\n", "122 172\n", "34 2844\n", "42 3620\n", "3 28\n", "122 310\n", "34 2832\n", "84 3620\n", "3 29\n", "122 563\n", "34 1139\n", "42 910\n", "3 20\n", "125 563\n", "35 1139\n", "71 910\n", "5 20\n", "125 1067\n", "35 2057\n", "71 112\n", "8 20\n", "2 13\n", "2 5\n", "2 6\n", "2 9\n", "2 11\n", "2 4\n", "2 8\n", "2 12\n", "2 3936\n", "2 7497\n", "2 5024\n", "2 7267\n"], "output": ["15\n", "261738578\n", "0\n", "845412257\n", "523446528\n", "222992093\n", "40\n", "27466516\n", "180\n", "332869177\n", "336\n", "224\n", "7026950\n", "28\n", "827297248\n", "192462847\n", "645313324\n", "891371144\n", "1025024\n", "480\n", "231335397\n", "701641267\n", "192\n", "779021526\n", "935015817\n", "189747609\n", "383449442\n", "6720\n", "745502438\n", "840\n", "248015118\n", "675662931\n", "660\n", "319651211\n", "543109472\n", "887975\n", "591131404\n", "36960\n", "16372784\n", "1792\n", "518670087\n", "3960\n", "884058759\n", "201633232\n", "182736903\n", "66\n", "147109296\n", "705003907\n", "610006788\n", "775220616\n", "730870441\n", "91\n", "852970224\n", "176165941\n", "356632677\n", "665049678\n", "930847368\n", "378\n", "757697783\n", "741454619\n", "755880877\n", "406\n", "982263620\n", "766577194\n", "99576443\n", "190\n", "823648584\n", "836288834\n", "774252697\n", "58140\n", "96358636\n", "503927179\n", "210180231\n", "14883840\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:\nCompute a modular combinatorial count by selecting a subset of size N\u22121 from M and weighting it by a term that grows exponentially in N.\n\n2. Core algorithmic approach:\n\u2013 Precompute factorials and use modular inverses (via Fermat\u2019s little theorem and fast exponentiation) to support O(1) binomial-coefficient queries.  \n\u2013 Compute powers by binary exponentiation.\n\n3. Reusable components:\n\u2013 Modular arithmetic helpers: add, mul, binpow (fast exponentiation), inv (modular inverse), divide.  \n\u2013 Factorial\u2010and\u2010inverse precomputation + C(n,k) function for repeated binomial\u2010coefficient queries.  \n\u2013 Pattern: combining combinatorial counts with fast exponentiation under a fixed prime modulus."}
{"name": "1204_E. Natasha, Sasha and the Prefix Sums", "description": "Natasha's favourite numbers are n and 1, and Sasha's favourite numbers are m and -1. One day Natasha and Sasha met and wrote down every possible array of length n+m such that some n of its elements are equal to 1 and another m elements are equal to -1. For each such array they counted its maximal prefix sum, probably an empty one which is equal to 0 (in another words, if every nonempty prefix sum is less to zero, then it is considered equal to zero). Formally, denote as f(a) the maximal prefix sum of an array a_{1, \u2026 ,l} of length l \u2265 0. Then: \n\n$$$f(a) = max (0, \\smash{\\displaystylemax_{1 \u2264 i \u2264 l}} \u2211_{j=1}^{i} a_j )$$$\n\nNow they want to count the sum of maximal prefix sums for each such an array and they are asking you to help. As this sum can be very large, output it modulo 998\\: 244\\: 853.\n\nInput\n\nThe only line contains two integers n and m (0 \u2264 n,m \u2264 2 000).\n\nOutput\n\nOutput the answer to the problem modulo 998\\: 244\\: 853.\n\nExamples\n\nInput\n\n0 2\n\n\nOutput\n\n0\n\n\nInput\n\n2 0\n\n\nOutput\n\n2\n\n\nInput\n\n2 2\n\n\nOutput\n\n5\n\n\nInput\n\n2000 2000\n\n\nOutput\n\n674532367\n\nNote\n\nIn the first example the only possible array is [-1,-1], its maximal prefix sum is equal to 0. \n\nIn the second example the only possible array is [1,1], its maximal prefix sum is equal to 2. \n\nThere are 6 possible arrays in the third example:\n\n[1,1,-1,-1], f([1,1,-1,-1]) = 2\n\n[1,-1,1,-1], f([1,-1,1,-1]) = 1\n\n[1,-1,-1,1], f([1,-1,-1,1]) = 1\n\n[-1,1,1,-1], f([-1,1,1,-1]) = 1\n\n[-1,1,-1,1], f([-1,1,-1,1]) = 0\n\n[-1,-1,1,1], f([-1,-1,1,1]) = 0\n\nSo the answer for the third example is 2+1+1+1+0+0 = 5.", "solution": "import sys\nimport math\n\nMOD = 998244853\n\ndef prepare_c(n):\n    result = [1]\n    last = [1, 1]\n    for i in range(2, n + 1):\n        new = [1]\n        for j in range(1, i):\n            new.append((last[j - 1] + last[j]) % MOD)\n        new.append(1)\n        last = new\n    return new\n\ndef main():\n    (a, b) = tuple([int(x) for x in input().split()])\n    if a + b == 0:\n        print(0)\n        return\n\n    c = prepare_c(a + b)\n\n    min_lv = max(0, a - b)\n    max_lv = a\n\n    res = 0\n    res += (min_lv * c[a]) % MOD\n    for lv in range(min_lv + 1, max_lv + 1):\n        t = 2 * lv - a + b\n        res += c[(a + b + t) // 2]\n        res = res % MOD\n\n    print(res)\n\n    \n\nif __name__ == '__main__':\n    main()\n", "difficulty": 11, "public_tests": {"input": ["2 2\n", "2 0\n", "0 2\n", "2000 2000\n"], "output": ["5\n", "2\n", "0\n", "674532367\n"]}, "private_tests": {"input": ["1994 1981\n", "2000 0\n", "976 1698\n", "756 1061\n", "1028 1040\n", "27 16\n", "1991 1992\n", "983 666\n", "60 59\n", "5 13\n", "872 1313\n", "1935 856\n", "1915 1915\n", "45 1323\n", "11 2\n", "1134 1092\n", "0 2000\n", "76 850\n", "953 1797\n", "0 0\n", "38 656\n", "1891 1294\n", "149 821\n", "1935 1977\n", "1087 1050\n", "1990 2000\n", "1 4\n", "1883 1513\n", "1132 1727\n", "24 1508\n", "1080 383\n", "1942 1523\n"], "output": ["596939902\n", "2000\n", "621383232\n", "72270489\n", "119840364\n", "886006554\n", "518738831\n", "917123830\n", "271173738\n", "4048\n", "261808476\n", "707458926\n", "534527105\n", "357852234\n", "716\n", "134680101\n", "0\n", "103566263\n", "557692333\n", "0\n", "814958661\n", "696966158\n", "64450770\n", "16604630\n", "973930225\n", "516468539\n", "1\n", "265215482\n", "878164775\n", "540543518\n", "161999131\n", "89088577\n"]}, "generated_tests": {"input": ["87 1698\n", "480 1040\n", "27 9\n", "1991 760\n", "983 1112\n", "60 44\n", "5 25\n", "1935 444\n", "1915 866\n", "45 1143\n", "6 2\n", "85 1092\n", "0 1193\n", "84 850\n", "833 1797\n", "38 104\n", "1584 1294\n", "149 1536\n", "1087 1810\n", "1 5\n", "30 1508\n", "73 383\n", "1942 598\n", "2 4\n", "1041 2000\n", "536 1040\n", "5 9\n", "1991 656\n", "983 589\n", "111 44\n", "1102 444\n", "60 866\n", "45 1686\n", "6 4\n", "68 1092\n", "84 1333\n", "881 1797\n", "52 104\n", "1149 1294\n", "149 814\n", "59 1508\n", "73 195\n", "1942 543\n", "4 4\n", "1041 1545\n", "537 1040\n", "5 10\n", "1991 592\n", "983 150\n", "101 44\n", "1102 551\n", "36 866\n", "6 1686\n", "6 0\n", "110 1092\n", "89 1333\n", "517 1797\n", "61 104\n", "0 4\n", "1 25\n", "0 1576\n", "1 9\n", "0 7\n", "1 30\n"], "output": ["107836418\n", "262698916\n", "737333703\n", "291935537\n", "260810965\n", "484483099\n", "31931\n", "794996774\n", "659014097\n", "235539604\n", "121\n", "202324684\n", "0\n", "489529180\n", "919298202\n", "89602648\n", "292678704\n", "479419018\n", "814970786\n", "1\n", "176367512\n", "526123683\n", "37287598\n", "7\n", "380002523\n", "317520174\n", "1471\n", "398664335\n", "972584727\n", "861596900\n", "473227819\n", "683165501\n", "323508128\n", "596\n", "369942264\n", "614110453\n", "938320995\n", "17533136\n", "823529586\n", "607544146\n", "386393254\n", "738231128\n", "37309772\n", "93\n", "864419487\n", "41296463\n", "1941\n", "714297481\n", "871312305\n", "539415369\n", "843840923\n", "489855726\n", "560510737\n", "6\n", "313990722\n", "618100919\n", "21914873\n", "179330050\n", "0\n", "1\n", "0\n", "1\n", "0\n", "1\n"]}, "short_description": "1. One-sentence summary:  \n   Compute a weighted sum of binomial coefficients over a contiguous index range determined by two input parameters.  \n\n2. Core algorithmic approach:  \n   Dynamic programming to build Pascal\u2019s triangle (binomial coefficients modulo a prime) followed by a simple loop to accumulate the relevant entries.  \n\n3. Reusable components:  \n   - Function to generate the k-th row of Pascal\u2019s triangle (binomial coefficients) in O(k\u00b2) time and O(k) space via 1D DP.  \n   - Modular\u2010arithmetic wrapper for addition and multiplication when working with large combinatorial numbers.  \n   - Pattern of translating problem constraints into index ranges for summing precomputed binomial values."}
{"name": "1278_F. Cards", "description": "Consider the following experiment. You have a deck of m cards, and exactly one card is a joker. n times, you do the following: shuffle the deck, take the top card of the deck, look at it and return it into the deck.\n\nLet x be the number of times you have taken the joker out of the deck during this experiment. Assuming that every time you shuffle the deck, all m! possible permutations of cards are equiprobable, what is the expected value of x^k? Print the answer modulo 998244353.\n\nInput\n\nThe only line contains three integers n, m and k (1 \u2264 n, m < 998244353, 1 \u2264 k \u2264 5000).\n\nOutput\n\nPrint one integer \u2014 the expected value of x^k, taken modulo 998244353 (the answer can always be represented as an irreducible fraction a/b, where b mod 998244353 \u2260 0; you have to print a \u22c5 b^{-1} mod 998244353).\n\nExamples\n\nInput\n\n\n1 1 1\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n1 1 5000\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n2 2 2\n\n\nOutput\n\n\n499122178\n\n\nInput\n\n\n998244352 1337 5000\n\n\nOutput\n\n\n326459680", "solution": "class UnionFindVerSize():\n    def __init__(self, N):\n        self._parent = [n for n in range(0, N)]\n        self._size = [1] * N\n        self.group = N\n\n    def find_root(self, x):\n        if self._parent[x] == x: return x\n        self._parent[x] = self.find_root(self._parent[x])\n        stack = [x]\n        while self._parent[stack[-1]]!=stack[-1]:\n            stack.append(self._parent[stack[-1]])\n        for v in stack:\n            self._parent[v] = stack[-1]\n        return self._parent[x]\n\n    def unite(self, x, y):\n        gx = self.find_root(x)\n        gy = self.find_root(y)\n        if gx == gy: return\n\n        self.group -= 1\n\n        if self._size[gx] < self._size[gy]:\n            self._parent[gx] = gy\n            self._size[gy] += self._size[gx]\n        else:\n            self._parent[gy] = gx\n            self._size[gx] += self._size[gy]\n\n    def get_size(self, x):\n        return self._size[self.find_root(x)]\n\n    def is_same_group(self, x, y):\n        return self.find_root(x) == self.find_root(y)\n\nimport sys,random,bisect\nfrom collections import deque,defaultdict\nfrom heapq import heapify,heappop,heappush\nfrom itertools import permutations\nfrom math import log,gcd\n\ninput = lambda :sys.stdin.buffer.readline()\nmi = lambda :map(int,input().split())\nli = lambda :list(mi())\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return (g1[n] * g2[r] % mod) * g2[n-r] % mod\n\nmod = 998244353\nN = 5100\ng1 = [1]*(N+1)\ng2 = [1]*(N+1)\ninverse = [1]*(N+1)\n\nfor i in range( 2, N + 1 ):\n    g1[i]=( ( g1[i-1] * i ) % mod )\n    inverse[i]=( ( -inverse[mod % i] * (mod//i) ) % mod )\n    g2[i]=( (g2[i-1] * inverse[i]) % mod )\ninverse[0]=0\n\nn,m,k = mi()\n\nim = pow(m,mod-2,mod)\nim_1 = pow(m-1,mod-2,mod)\n\nif n <= k and 1:\n    res = 0\n    for i in range(n+1):\n        res += (cmb(n,i,mod) * pow(im,i,mod) % mod) * (pow(1-im,n-i,mod) * pow(i,k,mod) % mod) % mod\n        res %= mod\n\n    print(res)\nelse:\n    dp = [1]\n    for i in range(k):\n        dp.append(0)\n        for j in range(i,-1,-1):\n            dp[j+1] += dp[j] * (n-j)\n            dp[j+1] %= mod\n            dp[j] *= j\n            dp[j] %= mod\n\n    if m!=1:\n        res = 0\n        c = m * im_1 % mod\n        for i in range(k+1):\n            res += (dp[i] * pow(c,n-i,mod) % mod) * pow(im_1,i,mod) % mod\n            res %= mod\n        res *= pow((m-1)*im,n,mod)\n        res %= mod\n        print(res)\n    else:\n        print(pow(n,k,mod))\n", "difficulty": 12, "public_tests": {"input": ["998244352 1337 5000\n", "1 1 1\n", "1 1 5000\n", "2 2 2\n"], "output": ["326459680\n", "1\n", "1\n", "499122178\n"]}, "private_tests": {"input": ["213292922 8067309 5000\n", "569716410 849619604 5000\n", "232213466 585535513 4789\n", "251134010 189925189 5000\n", "588636954 730833344 5000\n", "232213466 585535513 5000\n", "213292922 8067309 44\n", "588636954 730833344 4490\n", "251134010 189925189 3047\n", "569716410 849619604 1232\n"], "output": ["529462868\n", "122094144\n", "454306758\n", "103457138\n", "216118622\n", "350297073\n", "332601538\n", "389991357\n", "120053431\n", "551386348\n"]}, "generated_tests": {"input": ["213292922 7115248 5000\n", "232213466 585535513 4664\n", "251134010 189925189 3240\n", "273563129 585535513 5000\n", "213292922 12208756 44\n", "963677463 730833344 4490\n", "308122586 189925189 3047\n", "1 1 2187\n", "328323507 7115248 5000\n", "35081861 189925189 3240\n", "273563129 585535513 343\n", "213292922 21234253 44\n", "431655646 189925189 3047\n", "328323507 7115248 2280\n", "35081861 209684868 3240\n", "273563129 585535513 95\n", "70794255 21234253 44\n", "431655646 189925189 3183\n", "328323507 7115248 3955\n", "273563129 585535513 29\n", "73680255 21234253 44\n", "622869808 189925189 3183\n", "411194986 7115248 3955\n", "273563129 321959883 29\n", "59244593 21234253 44\n", "562284893 189925189 3183\n", "21482329 7115248 3955\n", "273563129 599412997 29\n", "49802350 21234253 44\n", "562284893 196589640 3183\n", "273563129 580545831 29\n", "66680604 21234253 44\n", "309286713 196589640 3183\n", "273563129 580545831 4\n", "66680604 21234253 66\n", "58651515 196589640 3183\n", "273563129 721693684 4\n", "66680604 21234253 22\n", "42196630 196589640 3183\n", "15358688 21234253 22\n", "1233237 196589640 3183\n", "15226725 21234253 22\n", "1886355 196589640 3183\n", "26610661 21234253 22\n", "1886355 381895188 3183\n", "17933756 21234253 22\n", "296011 381895188 3183\n", "1 1 4156\n"], "output": ["735083073\n", "990409420\n", "343342984\n", "694860175\n", "77312969\n", "334920752\n", "934684532\n", "1\n", "527115778\n", "66237074\n", "641313907\n", "541133004\n", "373299562\n", "100892596\n", "628848250\n", "267257973\n", "3797687\n", "493701596\n", "601711950\n", "575476116\n", "852099965\n", "103504712\n", "906226379\n", "78930431\n", "418162423\n", "919390894\n", "702126708\n", "483510579\n", "851158014\n", "581333693\n", "50114914\n", "862124132\n", "257286790\n", "793229707\n", "662974244\n", "655226762\n", "414626865\n", "271840005\n", "834281614\n", "783836323\n", "968191952\n", "351580372\n", "610670100\n", "120165779\n", "392495781\n", "911965531\n", "966253671\n", "1\n"]}, "short_description": "1. One-sentence summary:  \n   Compute a modular sum of combinatorial terms involving powers and binomial/\u201cfalling\u2010factorial\u201d coefficients efficiently for given n, m, k.\n\n2. Core algorithmic approach:  \n   - Precompute factorials and inverses to support O(1) binomial coefficient queries (modular arithmetic).  \n   - Use a DP over i and j to build up the coefficients of the polynomial \u220f_{t=0}^{i-1}(x\u2212t), effectively computing unsigned Stirling\u2010type numbers or falling\u2010factorial counts.  \n   - Combine these coefficients with modular exponentiation to assemble the final sum in O(k^2 + log\u2009mod) time.\n\n3. Reusable components:  \n   a. Modular factorial/inverse precomputation (arrays g1, g2, inverse) and cmb(n,r,mod) for fast nCr modulo a prime.  \n   b. DP routine that fills an array dp where dp[j] = coefficient of x^j in \u220f_{t=0}^{i-1}(x\u2212t), useful for falling\u2010factorials or Stirling numbers.  \n   c. Fast modular exponentiation (pow with three arguments) to raise numbers to large powers under a modulus."}
{"name": "816_D. Karen and Test", "description": "Karen has just arrived at school, and she has a math test today!\n\n<image>\n\nThe test is about basic addition and subtraction. Unfortunately, the teachers were too busy writing tasks for Codeforces rounds, and had no time to make an actual test. So, they just put one question in the test that is worth all the points.\n\nThere are n integers written on a row. Karen must alternately add and subtract each pair of adjacent integers, and write down the sums or differences on the next row. She must repeat this process on the values on the next row, and so on, until only one integer remains. The first operation should be addition.\n\nNote that, if she ended the previous row by adding the integers, she should start the next row by subtracting, and vice versa.\n\nThe teachers will simply look at the last integer, and then if it is correct, Karen gets a perfect score, otherwise, she gets a zero for the test.\n\nKaren has studied well for this test, but she is scared that she might make a mistake somewhere and it will cause her final answer to be wrong. If the process is followed, what number can she expect to be written on the last row?\n\nSince this number can be quite large, output only the non-negative remainder after dividing it by 109 + 7.\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 200000), the number of numbers written on the first row.\n\nThe next line contains n integers. Specifically, the i-th one among these is ai (1 \u2264 ai \u2264 109), the i-th number on the first row.\n\nOutput\n\nOutput a single integer on a line by itself, the number on the final row after performing the process above.\n\nSince this number can be quite large, print only the non-negative remainder after dividing it by 109 + 7.\n\nExamples\n\nInput\n\n5\n3 6 9 12 15\n\n\nOutput\n\n36\n\n\nInput\n\n4\n3 7 5 2\n\n\nOutput\n\n1000000006\n\nNote\n\nIn the first test case, the numbers written on the first row are 3, 6, 9, 12 and 15.\n\nKaren performs the operations as follows:\n\n<image>\n\nThe non-negative remainder after dividing the final number by 109 + 7 is still 36, so this is the correct output.\n\nIn the second test case, the numbers written on the first row are 3, 7, 5 and 2.\n\nKaren performs the operations as follows:\n\n<image>\n\nThe non-negative remainder after dividing the final number by 109 + 7 is 109 + 6, so this is the correct output.", "solution": "n = int(input())\np = list(map(int,input().split()))\nMOD = 10**9+7\n\nmode = 0\nif n%4 == 3:\n    n-= 1\n    new = []\n    for i in range(n):\n        if mode == 0: new.append(p[i]+p[i+1])\n        else: new.append(p[i]-p[i+1])\n        mode = 1-mode\n    p = new\n\ndef calc0(p):\n    res = 0\n    ncr = 1\n    n = len(p)//2-1\n    for i in range(n+1):\n        res = (res+ncr*(p[i*2]-p[i*2+1])) % MOD\n        ncr = (ncr*(n-i)*pow(i+1,MOD-2,MOD)) % MOD\n    return res\n\ndef calc1(p):\n    res = 0\n    ncr = 1\n    n = len(p)//2\n    for i in range(n+1):\n        res = (res+ncr*(p[i*2])) % MOD\n        ncr = (ncr*(n-i)*pow(i+1,MOD-2,MOD)) % MOD\n    return res\n\ndef calc2(p):\n    res = 0\n    ncr = 1\n    n = len(p)//2-1\n    for i in range(n+1):\n        res = (res+ncr*(p[i*2]+p[i*2+1])) % MOD\n        ncr = (ncr*(n-i)*pow(i+1,MOD-2,MOD)) % MOD\n    return res\n\nprint([calc0,calc1,calc2,-1][n%4](p))", "difficulty": 10, "public_tests": {"input": ["4\n3 7 5 2\n", "5\n3 6 9 12 15\n"], "output": ["1000000006", "36"]}, "private_tests": {"input": ["6\n58376259 643910770 5887448 757703054 544067926 902981667\n", "16\n985629174 189232688 48695377 692426437 952164554 243460498 173956955 210310239 237322183 96515847 678847559 682240199 498792552 208770488 736004147 176573082\n", "7\n941492387 72235422 449924898 783332532 378192988 592684636 147499872\n", "1\n1000000000\n", "3\n524125987 923264237 374288891\n", "17\n458679894 912524637 347508634 863280107 226481104 787939275 48953130 553494227 458256339 673787326 353107999 298575751 436592642 233596921 957974470 254020999 707869688\n", "2\n500000004 500000003\n", "1\n1\n", "4\n702209411 496813081 673102149 561219907\n", "5\n585325539 365329221 412106895 291882089 564718673\n", "19\n519879446 764655030 680293934 914539062 744988123 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 408916833 829654733 223751525 672158759\n", "18\n341796022 486073481 86513380 593942288 60606166 627385348 778725113 896678215 384223198 661124212 882144246 60135494 374392733 408166459 179944793 331468916 401182818 69503967\n"], "output": ["676517605", "347261016", "328894634", "1000000000", "996365563", "769845668", "0", "1", "317278572", "974257995", "265109293", "773499683"]}, "generated_tests": {"input": ["6\n58376259 643910770 5887448 1290679832 544067926 902981667\n", "16\n985629174 189232688 11110966 692426437 952164554 243460498 173956955 210310239 237322183 96515847 678847559 682240199 498792552 208770488 736004147 176573082\n", "7\n941492387 72235422 449924898 783332532 378192988 693624950 147499872\n", "3\n169166520 923264237 374288891\n", "17\n458679894 912524637 347508634 863280107 226481104 787939275 48953130 553494227 458256339 673787326 353107999 298575751 50632816 233596921 957974470 254020999 707869688\n", "1\n2\n", "4\n702209411 496813081 112655490 561219907\n", "19\n519879446 764655030 680293934 914539062 853464027 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 408916833 829654733 223751525 672158759\n", "18\n409164053 486073481 86513380 593942288 60606166 627385348 778725113 896678215 384223198 661124212 882144246 60135494 374392733 408166459 179944793 331468916 401182818 69503967\n", "4\n3 7 5 3\n", "5\n3 6 3 12 15\n", "6\n58376259 370852399 5887448 1290679832 544067926 902981667\n", "16\n1800776705 189232688 11110966 692426437 952164554 243460498 173956955 210310239 237322183 96515847 678847559 682240199 498792552 208770488 736004147 176573082\n", "7\n500236214 72235422 449924898 783332532 378192988 693624950 147499872\n", "3\n169166520 923264237 523847812\n", "17\n458679894 912524637 347508634 863280107 226481104 787939275 48953130 553494227 458256339 673787326 353107999 298575751 974644 233596921 957974470 254020999 707869688\n", "1\n3\n", "4\n916583616 496813081 112655490 561219907\n", "19\n469776209 764655030 680293934 914539062 853464027 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 408916833 829654733 223751525 672158759\n", "18\n409164053 486073481 88328730 593942288 60606166 627385348 778725113 896678215 384223198 661124212 882144246 60135494 374392733 408166459 179944793 331468916 401182818 69503967\n", "4\n3 6 5 3\n", "6\n4442675 370852399 5887448 1290679832 544067926 902981667\n", "16\n1800776705 110352985 11110966 692426437 952164554 243460498 173956955 210310239 237322183 96515847 678847559 682240199 498792552 208770488 736004147 176573082\n", "7\n697789054 72235422 449924898 783332532 378192988 693624950 147499872\n", "3\n169166520 1608171987 523847812\n", "1\n4\n", "4\n916583616 496813081 153343940 561219907\n", "19\n469776209 764655030 1148561420 914539062 853464027 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 408916833 829654733 223751525 672158759\n", "18\n409164053 486073481 88328730 593942288 60606166 627385348 778725113 896678215 384223198 661124212 882144246 60135494 374392733 408166459 69033978 331468916 401182818 69503967\n", "4\n3 6 5 1\n", "6\n4442675 370852399 8021069 1290679832 544067926 902981667\n", "16\n1800776705 110352985 11110966 692426437 952164554 243460498 173956955 72523733 237322183 96515847 678847559 682240199 498792552 208770488 736004147 176573082\n", "7\n697789054 72235422 449924898 783332532 366768018 693624950 147499872\n", "3\n222611859 1608171987 523847812\n", "1\n0\n", "4\n916583616 496813081 129138836 561219907\n", "19\n469776209 764655030 1148561420 914539062 853464027 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 408916833 1614663126 223751525 672158759\n", "18\n409164053 486073481 35433018 593942288 60606166 627385348 778725113 896678215 384223198 661124212 882144246 60135494 374392733 408166459 69033978 331468916 401182818 69503967\n", "5\n3 8 3 23 8\n", "6\n4442675 311822070 8021069 1290679832 544067926 902981667\n", "16\n1800776705 110352985 11110966 692426437 952164554 243460498 173956955 72523733 237322183 96515847 678847559 682240199 953959537 208770488 736004147 176573082\n", "7\n697789054 72235422 449924898 1285388677 366768018 693624950 147499872\n", "3\n371485951 1608171987 523847812\n", "4\n916583616 496813081 129138836 583988530\n", "19\n469776209 764655030 1148561420 914539062 853464027 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 121208111 1614663126 223751525 672158759\n", "18\n409164053 486073481 35433018 593942288 60606166 627385348 778725113 896678215 384223198 661124212 882144246 60135494 374392733 408166459 69033978 331468916 611082973 69503967\n", "5\n3 8 5 23 8\n", "6\n1188039 311822070 8021069 1290679832 544067926 902981667\n", "16\n694384715 110352985 11110966 692426437 952164554 243460498 173956955 72523733 237322183 96515847 678847559 682240199 953959537 208770488 736004147 176573082\n", "7\n697789054 72235422 449924898 1285388677 366768018 749154174 147499872\n", "3\n215333976 1608171987 523847812\n", "4\n1647401454 496813081 129138836 583988530\n", "19\n716981305 764655030 1148561420 914539062 853464027 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 121208111 1614663126 223751525 672158759\n", "18\n409164053 486073481 66710509 593942288 60606166 627385348 778725113 896678215 384223198 661124212 882144246 60135494 374392733 408166459 69033978 331468916 611082973 69503967\n", "4\n0 6 0 1\n", "5\n3 8 9 23 8\n", "6\n186233 311822070 8021069 1290679832 544067926 902981667\n", "16\n694384715 110352985 11110966 692426437 1730684673 243460498 173956955 72523733 237322183 96515847 678847559 682240199 953959537 208770488 736004147 176573082\n", "7\n697789054 72235422 815419167 1285388677 366768018 749154174 147499872\n", "3\n215333976 1661896363 523847812\n", "4\n1647401454 496813081 164092274 583988530\n", "19\n716981305 764655030 1148561420 914539062 853464027 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 121208111 1614663126 223751525 1084180198\n", "18\n409164053 486073481 66710509 593942288 60606166 627385348 778725113 896678215 384223198 661124212 696927473 60135494 374392733 408166459 69033978 331468916 611082973 69503967\n", "6\n186233 478279169 8021069 1290679832 544067926 902981667\n", "16\n694384715 110352985 11110966 692426437 1730684673 243460498 173956955 72523733 237322183 96515847 678847559 682240199 953959537 208770488 259373544 176573082\n", "5\n3 6 3 23 15\n", "5\n3 8 3 23 15\n", "4\n6 6 5 1\n", "4\n6 6 0 1\n", "5\n3 15 9 23 8\n"], "output": ["742471154\n", "84170139\n", "530775262\n", "641406096\n", "962970617\n", "2\n", "756831920\n", "434627359\n", "840867714\n", "1000000005\n", "24\n", "469412783\n", "899317670\n", "89519089\n", "491847175\n", "572541808\n", "3\n", "971206125\n", "384524122\n", "855390514\n", "1000000006\n", "415479199\n", "978197373\n", "287071929\n", "861662668\n", "4\n", "11894568\n", "662396503\n", "968104001\n", "1\n", "419746441\n", "800725048\n", "298496899\n", "915108007\n", "0\n", "987689471\n", "167337787\n", "544938305\n", "17\n", "360716112\n", "986893922\n", "306721465\n", "63982092\n", "964920848\n", "563998270\n", "754838460\n", "21\n", "357461476\n", "880501939\n", "417779913\n", "907830124\n", "695738679\n", "811203366\n", "5058381\n", "1000000000\n", "29\n", "356459670\n", "229424319\n", "783274182\n", "15278869\n", "730692117\n", "399181927\n", "632919170\n", "522916769\n", "752793723\n", "24\n", "24\n", "4\n", "1000000006\n", "29\n"]}, "short_description": "1. One-sentence summary  \nCompute a prescribed linear combination of the input sequence\u2019s elements (or adjacent\u2010pair reductions of them) modulo 10^9+7, where the exact weights depend on the input length mod 4 and follow a binomial\u2010coefficient pattern.  \n\n2. Core algorithmic approach  \n\u2013 Combinatorial accumulation of binomial coefficients via the multiplicative \u201cnCr = nCr\u22121 \u00d7 (n\u2212i+1)/i mod M\u201d recurrence combined with modular inverses.  \n\u2013 A small preprocessing (\u201cpair folding\u201d) step for the case n%4 == 3 that reduces the sequence with alternating sums and differences.  \n\n3. Reusable components  \n\u2013 Iterative modular nCr generator: computing nC0, nC1, \u2026 in O(n) time using nCr \u2190 nCr\u00d7(n\u2212i)/(i+1) mod M and precomputed inverses.  \n\u2013 Pairwise reduction of a sequence with an alternating pattern (sum, difference, sum, \u2026).  \n\u2013 Dispatching multiple specialized routines based on n mod k (here k = 4) using an array of function pointers or a switch/map."}
{"name": "961_G. Partitions", "description": "You are given a set of n elements indexed from 1 to n. The weight of i-th element is wi. The weight of some subset of a given set is denoted as <image>. The weight of some partition R of a given set into k subsets is <image> (recall that a partition of a given set is a set of its subsets such that every element of the given set belongs to exactly one subset in partition).\n\nCalculate the sum of weights of all partitions of a given set into exactly k non-empty subsets, and print it modulo 109 + 7. Two partitions are considered different iff there exist two elements x and y such that they belong to the same set in one of the partitions, and to different sets in another partition.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 2\u00b7105) \u2014 the number of elements and the number of subsets in each partition, respectively.\n\nThe second line contains n integers wi (1 \u2264 wi \u2264 109)\u2014 weights of elements of the set.\n\nOutput\n\nPrint one integer \u2014 the sum of weights of all partitions of a given set into k non-empty subsets, taken modulo 109 + 7.\n\nExamples\n\nInput\n\n4 2\n2 3 2 3\n\n\nOutput\n\n160\n\n\nInput\n\n5 2\n1 2 3 4 5\n\n\nOutput\n\n645\n\nNote\n\nPossible partitions in the first sample:\n\n  1. {{1, 2, 3}, {4}}, W(R) = 3\u00b7(w1 + w2 + w3) + 1\u00b7w4 = 24; \n  2. {{1, 2, 4}, {3}}, W(R) = 26; \n  3. {{1, 3, 4}, {2}}, W(R) = 24; \n  4. {{1, 2}, {3, 4}}, W(R) = 2\u00b7(w1 + w2) + 2\u00b7(w3 + w4) = 20; \n  5. {{1, 3}, {2, 4}}, W(R) = 20; \n  6. {{1, 4}, {2, 3}}, W(R) = 20; \n  7. {{1}, {2, 3, 4}}, W(R) = 26; \n\n\n\nPossible partitions in the second sample:\n\n  1. {{1, 2, 3, 4}, {5}}, W(R) = 45; \n  2. {{1, 2, 3, 5}, {4}}, W(R) = 48; \n  3. {{1, 2, 4, 5}, {3}}, W(R) = 51; \n  4. {{1, 3, 4, 5}, {2}}, W(R) = 54; \n  5. {{2, 3, 4, 5}, {1}}, W(R) = 57; \n  6. {{1, 2, 3}, {4, 5}}, W(R) = 36; \n  7. {{1, 2, 4}, {3, 5}}, W(R) = 37; \n  8. {{1, 2, 5}, {3, 4}}, W(R) = 38; \n  9. {{1, 3, 4}, {2, 5}}, W(R) = 38; \n  10. {{1, 3, 5}, {2, 4}}, W(R) = 39; \n  11. {{1, 4, 5}, {2, 3}}, W(R) = 40; \n  12. {{2, 3, 4}, {1, 5}}, W(R) = 39; \n  13. {{2, 3, 5}, {1, 4}}, W(R) = 40; \n  14. {{2, 4, 5}, {1, 3}}, W(R) = 41; \n  15. {{3, 4, 5}, {1, 2}}, W(R) = 42. ", "solution": "def divisors(M):\n    d=[]\n    i=1\n    while M>=i**2:\n        if M%i==0:\n            d.append(i)\n            if i**2!=M:\n                d.append(M//i)\n        i=i+1\n    return d\n\ndef popcount(x):\n    x = x - ((x >> 1) & 0x55555555)\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n    x = (x + (x >> 4)) & 0x0f0f0f0f\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 0x0000007f\n\ndef eratosthenes(n):\n    res=[0 for i in range(n+1)]\n    prime=set([])\n    for i in range(2,n+1):\n        if not res[i]:\n            prime.add(i)\n            for j in range(1,n//i+1):\n                res[i*j]=1\n    return prime\n\ndef factorization(n):\n    res=[]\n    for p in prime:\n        if n%p==0:\n            while n%p==0:\n                n//=p\n            res.append(p)\n    if n!=1:\n        res.append(n)\n    return res\n\ndef euler_phi(n):\n    res = n\n    for x in range(2,n+1):\n        if x ** 2 > n:\n            break\n        if n%x==0:\n            res = res//x * (x-1)\n            while n%x==0:\n                n //= x\n    if n!=1:\n        res = res//n * (n-1)\n    return res\n\ndef ind(b,n):\n    res=0\n    while n%b==0:\n        res+=1\n        n//=b\n    return res\n\ndef isPrimeMR(n):\n    d = n - 1\n    d = d // (d & -d)\n    L = [2, 3, 5, 7, 11, 13, 17]\n    for a in L:\n        t = d\n        y = pow(a, t, n)\n        if y == 1: continue\n        while y != n - 1:\n            y = (y * y) % n\n            if y == 1 or t == n - 1: return 0\n            t <<= 1\n    return 1\ndef findFactorRho(n):\n    from math import gcd\n    m = 1 << n.bit_length() // 8\n    for c in range(1, 99):\n        f = lambda x: (x * x + c) % n\n        y, r, q, g = 2, 1, 1, 1\n        while g == 1:\n            x = y\n            for i in range(r):\n                y = f(y)\n            k = 0\n            while k < r and g == 1:\n                ys = y\n                for i in range(min(m, r - k)):\n                    y = f(y)\n                    q = q * abs(x - y) % n\n                g = gcd(q, n)\n                k += m\n            r <<= 1\n        if g == n:\n            g = 1\n            while g == 1:\n                ys = f(ys)\n                g = gcd(abs(x - ys), n)\n        if g < n:\n            if isPrimeMR(g): return g\n            elif isPrimeMR(n // g): return n // g\n            return findFactorRho(g)\ndef primeFactor(n):\n    i = 2\n    ret = {}\n    rhoFlg = 0\n    while i*i <= n:\n        k = 0\n        while n % i == 0:\n            n //= i\n            k += 1\n        if k: ret[i] = k\n        i += 1 + i % 2\n        if i == 101 and n >= 2 ** 20:\n            while n > 1:\n                if isPrimeMR(n):\n                    ret[n], n = 1, 1\n                else:\n                    rhoFlg = 1\n                    j = findFactorRho(n)\n                    k = 0\n                    while n % j == 0:\n                        n //= j\n                        k += 1\n                    ret[j] = k\n\n    if n > 1: ret[n] = 1\n    if rhoFlg: ret = {x: ret[x] for x in sorted(ret)}\n    return ret\n\ndef divisors(n):\n    res = [1]\n    prime = primeFactor(n)\n    for p in prime:\n        newres = []\n        for d in res:\n            for j in range(prime[p]+1):\n                newres.append(d*p**j)\n        res = newres\n    res.sort()\n    return res\n\ndef xorfactorial(num):#\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u306e\u968e\u4e57\n    if num==0:\n        return 0\n    elif num==1:\n        return 1\n    elif num==2:\n        return 3\n    elif num==3:\n        return 0\n    else:\n        x=baseorder(num)\n        return (2**x)*((num-2**x+1)%2)+function(num-2**x)\n\ndef xorconv(n,X,Y):\n    if n==0:\n        res=[(X[0]*Y[0])%mod]\n        return res\n    x=[X[i]+X[i+2**(n-1)] for i in range(2**(n-1))]\n    y=[Y[i]+Y[i+2**(n-1)] for i in range(2**(n-1))]\n    z=[X[i]-X[i+2**(n-1)] for i in range(2**(n-1))]\n    w=[Y[i]-Y[i+2**(n-1)] for i in range(2**(n-1))]\n    res1=xorconv(n-1,x,y)\n    res2=xorconv(n-1,z,w)\n    former=[(res1[i]+res2[i])*inv for i in range(2**(n-1))]\n    latter=[(res1[i]-res2[i])*inv for i in range(2**(n-1))]\n    former=list(map(lambda x:x%mod,former))\n    latter=list(map(lambda x:x%mod,latter))\n    return former+latter\n\ndef merge_sort(A,B):\n    pos_A,pos_B = 0,0\n    n,m = len(A),len(B)\n    res = []\n    while pos_A < n and pos_B < m:\n        a,b = A[pos_A],B[pos_B]\n        if a < b:\n            res.append(a)\n            pos_A += 1\n        else:\n            res.append(b)\n            pos_B += 1\n    res += A[pos_A:]\n    res += B[pos_B:]\n    return res\n\nclass UnionFindVerSize():\n    def __init__(self, N):\n        self._parent = [n for n in range(0, N)]\n        self._size = [1] * N\n        self.group = N\n\n    def find_root(self, x):\n        if self._parent[x] == x: return x\n        self._parent[x] = self.find_root(self._parent[x])\n        stack = [x]\n        while self._parent[stack[-1]]!=stack[-1]:\n            stack.append(self._parent[stack[-1]])\n        for v in stack:\n            self._parent[v] = stack[-1]\n        return self._parent[x]\n\n    def unite(self, x, y):\n        gx = self.find_root(x)\n        gy = self.find_root(y)\n        if gx == gy: return\n\n        self.group -= 1\n\n        if self._size[gx] < self._size[gy]:\n            self._parent[gx] = gy\n            self._size[gy] += self._size[gx]\n        else:\n            self._parent[gy] = gx\n            self._size[gx] += self._size[gy]\n\n    def get_size(self, x):\n        return self._size[self.find_root(x)]\n\n    def is_same_group(self, x, y):\n        return self.find_root(x) == self.find_root(y)\n\nclass WeightedUnionFind():\n    def __init__(self,N):\n        self.parent = [i for i in range(N)]\n        self.size = [1 for i in range(N)]\n        self.val = [0 for i in range(N)]\n        self.flag = True\n        self.edge = [[] for i in range(N)]\n\n    def dfs(self,v,pv):\n        stack = [(v,pv)]\n        new_parent = self.parent[pv]\n        while stack:\n            v,pv = stack.pop()\n            self.parent[v] = new_parent\n            for nv,w in self.edge[v]:\n                if nv!=pv:\n                    self.val[nv] = self.val[v] + w\n                    stack.append((nv,v))\n\n    def unite(self,x,y,w):\n        if not self.flag:\n            return\n        if self.parent[x]==self.parent[y]:\n            self.flag = (self.val[x] - self.val[y] == w)\n            return\n\n        if self.size[self.parent[x]]>self.size[self.parent[y]]:\n            self.edge[x].append((y,-w))\n            self.edge[y].append((x,w))\n            self.size[x] += self.size[y]\n            self.val[y] = self.val[x] - w\n            self.dfs(y,x)\n        else:\n            self.edge[x].append((y,-w))\n            self.edge[y].append((x,w))\n            self.size[y] += self.size[x]\n            self.val[x] = self.val[y] + w\n            self.dfs(x,y)\n\nclass Dijkstra():\n    class Edge():\n        def __init__(self, _to, _cost):\n            self.to = _to\n            self.cost = _cost\n\n    def __init__(self, V):\n        self.G = [[] for i in range(V)]\n        self._E = 0\n        self._V = V\n\n    @property\n    def E(self):\n        return self._E\n\n    @property\n    def V(self):\n        return self._V\n\n    def add_edge(self, _from, _to, _cost):\n        self.G[_from].append(self.Edge(_to, _cost))\n        self._E += 1\n\n    def shortest_path(self, s):\n        import heapq\n        que = []\n        d = [10**15] * self.V\n        d[s] = 0\n        heapq.heappush(que, (0, s))\n\n        while len(que) != 0:\n            cost, v = heapq.heappop(que)\n            if d[v] < cost: continue\n\n            for i in range(len(self.G[v])):\n                e = self.G[v][i]\n                if d[e.to] > d[v] + e.cost:\n                    d[e.to] = d[v] + e.cost\n                    heapq.heappush(que, (d[e.to], e.to))\n        return d\n\n#Z[i]:length of the longest list starting from S[i] which is also a prefix of S\n#O(|S|)\ndef Z_algorithm(s):\n    N = len(s)\n    Z_alg = [0]*N\n\n    Z_alg[0] = N\n    i = 1\n    j = 0\n    while i < N:\n        while i+j < N and s[j] == s[i+j]:\n            j += 1\n        Z_alg[i] = j\n        if j == 0:\n            i += 1\n            continue\n        k = 1\n        while i+k < N and k + Z_alg[k]<j:\n            Z_alg[i+k] = Z_alg[k]\n            k += 1\n        i += k\n        j -= k\n    return Z_alg\n\nclass BIT():\n    def __init__(self,n):\n        self.BIT=[0]*(n+1)\n        self.num=n\n\n    def query(self,idx):\n        res_sum = 0\n        while idx > 0:\n            res_sum += self.BIT[idx]\n            idx -= idx&(-idx)\n        return res_sum\n\n    #Ai += x O(logN)\n    def update(self,idx,x):\n        while idx <= self.num:\n            self.BIT[idx] += x\n            idx += idx&(-idx)\n        return\n\nclass dancinglink():\n    def __init__(self,n,debug=False):\n        self.n = n\n        self.debug = debug\n        self._left = [i-1 for i in range(n)]\n        self._right = [i+1 for i in range(n)]\n        self.exist = [True for i in range(n)]\n\n    def pop(self,k):\n        if self.debug:\n            assert self.exist[k]\n        L = self._left[k]\n        R = self._right[k]\n        if L!=-1:\n            if R!=self.n:\n                self._right[L],self._left[R] = R,L\n            else:\n                self._right[L] = self.n\n        elif R!=self.n:\n            self._left[R] = -1\n        self.exist[k] = False\n\n    def left(self,idx,k=1):\n        if self.debug:\n            assert self.exist[idx]\n        res = idx\n        while k:\n            res = self._left[res]\n            if res==-1:\n                break\n            k -= 1\n        return res\n\n    def right(self,idx,k=1):\n        if self.debug:\n            assert self.exist[idx]\n        res = idx\n        while k:\n            res = self._right[res]\n            if res==self.n:\n                break\n            k -= 1\n        return res\n\nclass SparseTable():\n    def __init__(self,A,merge_func,ide_ele):\n        N=len(A)\n        n=N.bit_length()\n        self.table=[[ide_ele for i in range(n)] for i in range(N)]\n        self.merge_func=merge_func\n\n        for i in range(N):\n            self.table[i][0]=A[i]\n\n        for j in range(1,n):\n            for i in range(0,N-2**j+1):\n                f=self.table[i][j-1]\n                s=self.table[i+2**(j-1)][j-1]\n                self.table[i][j]=self.merge_func(f,s)\n\n    def query(self,s,t):\n        b=t-s+1\n        m=b.bit_length()-1\n        return self.merge_func(self.table[s][m],self.table[t-2**m+1][m])\n\nclass BinaryTrie:\n    class node:\n        def __init__(self,val):\n            self.left = None\n            self.right = None\n            self.max = val\n\n    def __init__(self):\n        self.root = self.node(-10**15)\n\n    def append(self,key,val):\n        pos = self.root\n        for i in range(29,-1,-1):\n            pos.max = max(pos.max,val)\n            if key>>i & 1:\n                if pos.right is None:\n                    pos.right = self.node(val)\n                    pos = pos.right\n                else:\n                    pos = pos.right\n            else:\n                if pos.left is None:\n                    pos.left = self.node(val)\n                    pos = pos.left\n                else:\n                    pos = pos.left\n        pos.max = max(pos.max,val)\n\n    def search(self,M,xor):\n        res = -10**15\n        pos = self.root\n        for i in range(29,-1,-1):\n            if pos is None:\n                break\n\n            if M>>i & 1:\n                if xor>>i & 1:\n                    if pos.right:\n                        res = max(res,pos.right.max)\n                    pos = pos.left\n                else:\n                    if pos.left:\n                        res = max(res,pos.left.max)\n                    pos = pos.right\n            else:\n                if xor>>i & 1:\n                    pos = pos.right\n                else:\n                    pos = pos.left\n\n        if pos:\n            res = max(res,pos.max)\n        return res\n\ndef solveequation(edge,ans,n,m):\n    #edge=[[to,dire,id]...]\n    x=[0]*m\n    used=[False]*n\n    for v in range(n):\n        if used[v]:\n            continue\n        y = dfs(v)\n        if y!=0:\n            return False\n    return x\n\n    def dfs(v):\n        used[v]=True\n        r=ans[v]\n        for to,dire,id in edge[v]:\n            if used[to]:\n                continue\n            y=dfs(to)\n            if dire==-1:\n                x[id]=y\n            else:\n                x[id]=-y\n            r+=y\n        return r\n\nclass Matrix():\n    mod=10**9+7\n\n    def set_mod(m):\n        Matrix.mod=m\n\n    def __init__(self,L):\n        self.row=len(L)\n        self.column=len(L[0])\n        self._matrix=L\n        for i in range(self.row):\n            for j in range(self.column):\n                self._matrix[i][j]%=Matrix.mod\n\n    def __getitem__(self,item):\n        if type(item)==int:\n            raise IndexError(\"you must specific row and column\")\n        elif len(item)!=2:\n            raise IndexError(\"you must specific row and column\")\n\n        i,j=item\n        return self._matrix[i][j]\n\n    def __setitem__(self,item,val):\n        if type(item)==int:\n            raise IndexError(\"you must specific row and column\")\n        elif len(item)!=2:\n            raise IndexError(\"you must specific row and column\")\n\n        i,j=item\n        self._matrix[i][j]=val\n\n    def __add__(self,other):\n        if (self.row,self.column)!=(other.row,other.column):\n            raise SizeError(\"sizes of matrixes are different\")\n\n        res=[[0 for j in range(self.column)] for i in range(self.row)]\n        for i in range(self.row):\n            for j in range(self.column):\n                res[i][j]=self._matrix[i][j]+other._matrix[i][j]\n                res[i][j]%=Matrix.mod\n        return Matrix(res)\n\n    def __sub__(self,other):\n        if (self.row,self.column)!=(other.row,other.column):\n            raise SizeError(\"sizes of matrixes are different\")\n\n        res=[[0 for j in range(self.column)] for i in range(self.row)]\n        for i in range(self.row):\n            for j in range(self.column):\n                res[i][j]=self._matrix[i][j]-other._matrix[i][j]\n                res[i][j]%=Matrix.mod\n        return Matrix(res)\n\n    def __mul__(self,other):\n        if type(other)!=int:\n            if self.column!=other.row:\n                raise SizeError(\"sizes of matrixes are different\")\n\n            res=[[0 for j in range(other.column)] for i in range(self.row)]\n            for i in range(self.row):\n                for j in range(other.column):\n                    temp=0\n                    for k in range(self.column):\n                        temp+=self._matrix[i][k]*other._matrix[k][j]\n                    res[i][j]=temp%Matrix.mod\n            return Matrix(res)\n        else:\n            n=other\n            res=[[(n*self._matrix[i][j])%Matrix.mod for j in range(self.column)] for i in range(self.row)]\n            return Matrix(res)\n\n    def __pow__(self,m):\n        if self.column!=self.row:\n            raise MatrixPowError(\"the size of row must be the same as that of column\")\n\n        n=self.row\n        res=Matrix([[int(i==j) for i in range(n)] for j in range(n)])\n        while m:\n            if m%2==1:\n                res=res*self\n            self=self*self\n            m//=2\n        return res\n\n    def __str__(self):\n        res=[]\n        for i in range(self.row):\n            for j in range(self.column):\n                res.append(str(self._matrix[i][j]))\n                res.append(\" \")\n            res.append(\"\\n\")\n        res=res[:len(res)-1]\n        return \"\".join(res)\n\nimport sys,random,bisect\nfrom collections import deque,defaultdict\nfrom heapq import heapify,heappop,heappush\nfrom itertools import permutations\nfrom math import log,gcd\n\ninput = lambda :sys.stdin.readline().rstrip()\nmi = lambda :map(int,input().split())\nli = lambda :list(mi())\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 10**9 + 7\nN = 2*10**5\ng1 = [1]*(N+1)\ng2 = [1]*(N+1)\ninverse = [1]*(N+1)\n\nfor i in range( 2, N + 1 ):\n    g1[i]=( ( g1[i-1] * i ) % mod )\n    inverse[i]=( ( -inverse[mod % i] * (mod//i) ) % mod )\n    g2[i]=( (g2[i-1] * inverse[i]) % mod )\ninverse[0]=0\n\nN,K = mi()\nw = li()\n\ndef solve(N,K,w):\n    S = sum(w) % mod\n    res = 0\n    for i in range(K):\n        t = 0\n        if N>=1:\n            t += pow(i+1,N-1,mod) * g2[N-1]\n            t %= mod\n        if N>=2:\n            t += pow(i+1,N-2,mod) * g2[N-2]\n            t %= mod\n        if i%2:\n            res -= t * cmb(K-1,i,mod)\n        else:\n            res += t * cmb(K-1,i,mod)\n        res %= mod\n\n    res *= g1[N-1] * g2[K-1] * S\n    res %= mod\n\n    if K%2==0:\n        res = -res\n        res %= mod\n\n    return res\n\nprint(solve(N,K,w))\n", "difficulty": 13, "public_tests": {"input": ["5 2\n1 2 3 4 5\n", "4 2\n2 3 2 3\n"], "output": ["645\n", "160\n"]}, "private_tests": {"input": ["5 2\n3113 612 440 2761 6970\n", "1 1\n1\n", "4 2\n4049 2220 6447 3695\n", "5 3\n9887 7162 3409 8937 3662\n", "5 5\n1546 1477 962 7095 8934\n", "6 5\n7906 9870 6443 6162 477 4656\n", "4 4\n9900 6535 5489 1853\n", "3 1\n2403 4573 3678\n", "2 2\n8224 8138\n", "1 1\n1000000000\n", "4 3\n3526 1473 9416 2974\n", "3 3\n4062 8888 5423\n", "3 2\n1880 3827 5158\n", "5 1\n6740 1359 1663 8074 5686\n", "2 1\n6042 8885\n", "6 4\n8429 7912 6178 6883 9193 501\n", "6 1\n3100 7048 8360 9845 7229 5331\n", "5 4\n9364 2224 2185 920 7650\n", "6 6\n7384 9123 5220 849 7169 1516\n", "4 1\n1867 5670 374 4815\n", "6 2\n2578 6301 8624 6020 8513 9486\n", "6 3\n4759 5555 7401 8003 2501 6345\n"], "output": ["597528\n", "1\n", "262576\n", "1619793\n", "20014\n", "710280\n", "23777\n", "31962\n", "16362\n", "1000000000\n", "156501\n", "18373\n", "54325\n", "117610\n", "29854\n", "4496040\n", "245478\n", "312802\n", "31261\n", "50904\n", "4401332\n", "7431260\n"]}, "generated_tests": {"input": ["5 2\n3113 612 440 5390 6970\n", "4 2\n4049 3033 6447 3695\n", "5 3\n9887 7162 3409 2369 3662\n", "5 5\n1546 1477 962 7095 5626\n", "6 5\n7906 9870 6443 8406 477 4656\n", "4 4\n9900 6535 2697 1853\n", "3 1\n2403 4573 1629\n", "4 2\n3526 1473 9416 2974\n", "3 3\n4062 8888 9175\n", "3 2\n1880 3827 4482\n", "5 1\n6740 1291 1663 8074 5686\n", "6 1\n2255 7048 8360 9845 7229 5331\n", "5 4\n9364 2224 2185 920 13093\n", "6 6\n7384 9123 5220 849 444 1516\n", "4 1\n1867 2225 374 4815\n", "6 2\n2578 6301 8624 6020 7152 9486\n", "6 3\n4759 3250 7401 8003 2501 6345\n", "5 3\n1 2 3 4 5\n", "4 2\n2 3 3 3\n", "5 2\n1839 612 440 5390 6970\n", "4 2\n4049 1550 6447 3695\n", "5 2\n9887 7162 3409 2369 3662\n", "5 5\n1546 1477 962 7095 1450\n", "6 5\n7906 9870 6443 8406 477 1523\n", "4 4\n9900 6535 4300 1853\n", "4 2\n3683 1473 9416 2974\n", "3 1\n4062 8888 9175\n", "5 1\n6740 1291 1663 8074 8377\n", "5 4\n9364 2224 2185 920 4147\n", "6 6\n7384 2709 5220 849 444 1516\n", "4 1\n1867 2225 374 3972\n", "6 2\n2578 6301 2255 6020 7152 9486\n", "6 3\n4759 3608 7401 8003 2501 6345\n", "5 3\n1 2 3 7 5\n", "4 2\n0 3 3 3\n", "5 2\n1839 868 440 5390 6970\n", "4 2\n6803 1550 6447 3695\n", "5 2\n9887 7162 3409 2369 3469\n", "5 5\n1546 1477 962 14085 1450\n", "6 5\n7906 9870 6443 8406 477 2200\n", "4 4\n9900 6535 4300 1319\n", "4 2\n3683 1473 18615 2974\n", "3 1\n1507 8888 9175\n", "5 1\n6740 1291 1663 395 8377\n", "6 6\n7384 2709 5220 809 444 1516\n", "6 2\n2578 226 2255 6020 7152 9486\n", "6 3\n4759 3608 7401 8003 2501 4170\n", "5 3\n1 2 3 10 5\n", "5 2\n1839 1210 440 5390 6970\n", "4 2\n6803 1550 6447 556\n"], "output": ["710575\n", "275584\n", "1297961\n", "16706\n", "755160\n", "20985\n", "25815\n", "278224\n", "22125\n", "50945\n", "117270\n", "240408\n", "389004\n", "24536\n", "37124\n", "4257066\n", "6935685\n", "735\n", "176\n", "655793\n", "251856\n", "1139027\n", "12530\n", "692500\n", "22588\n", "280736\n", "66375\n", "130725\n", "263760\n", "18122\n", "33752\n", "3581952\n", "7012655\n", "882\n", "144\n", "666801\n", "295920\n", "1130728\n", "19520\n", "706040\n", "22054\n", "427920\n", "58710\n", "92330\n", "18082\n", "2938002\n", "6545030\n", "1029\n", "681507\n", "245696\n"]}, "short_description": "1. One-sentence summary  \nCompute a complex combinatorial-algebraic aggregate\u2014built from powers, binomial coefficients, factorials/inverses, and an input weight sum\u2014modulo a prime.\n\n2. Core algorithmic approach  \n\u2022 Precompute factorials and modular inverses up to 2\u22c510^5 in O(N) for fast nCr queries.  \n\u2022 Accumulate the target sum via exponentiation by squaring (O(log\u2009mod) per pow) and inclusion\u2013exclusion over K terms.  \n\u2022 Multiply by precomputed factorial/inverse factors and adjust sign for parity of K.\n\n3. Reusable components  \n\u2022 Factorial and inverse-factorial precomputation for constant-time binomial(n, r) mod p.  \n\u2022 Modular exponentiation (pow(base, exp, mod)) in the accumulation loop.  \n\u2022 Inclusion\u2013exclusion summation pattern: \u2211_{i=0..K-1} (\u22121)^i * term(i) * C(K\u22121,i)."}
{"name": "1174_E. Ehab and the Expected GCD Problem", "description": "Let's define a function f(p) on a permutation p as follows. Let g_i be the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of elements p_1, p_2, ..., p_i (in other words, it is the GCD of the prefix of length i). Then f(p) is the number of distinct elements among g_1, g_2, ..., g_n.\n\nLet f_{max}(n) be the maximum value of f(p) among all permutations p of integers 1, 2, ..., n.\n\nGiven an integers n, count the number of permutations p of integers 1, 2, ..., n, such that f(p) is equal to f_{max}(n). Since the answer may be large, print the remainder of its division by 1000 000 007 = 10^9 + 7.\n\nInput\n\nThe only line contains the integer n (2 \u2264 n \u2264 10^6) \u2014 the length of the permutations.\n\nOutput\n\nThe only line should contain your answer modulo 10^9+7.\n\nExamples\n\nInput\n\n\n2\n\n\nOutput\n\n\n1\n\nInput\n\n\n3\n\n\nOutput\n\n\n4\n\nInput\n\n\n6\n\n\nOutput\n\n\n120\n\nNote\n\nConsider the second example: these are the permutations of length 3:\n\n  * [1,2,3], f(p)=1. \n  * [1,3,2], f(p)=1. \n  * [2,1,3], f(p)=2. \n  * [2,3,1], f(p)=2. \n  * [3,1,2], f(p)=2. \n  * [3,2,1], f(p)=2. \n\n\n\nThe maximum value f_{max}(3) = 2, and there are 4 permutations p such that f(p)=2.", "solution": "p=10**9+7\nimport math\ndef r(l):\n    x=1\n    for m in l:\n        x=x*m%p\n    return x\nn=int(input())\na,k,x,t=[],int(math.log2(n)),n,0\nwhile x>0:\n    a.append(x-x//2)\n    x//=2\nb=[n//(3*2**i)-n//(6*2**i) for i in range(k+1)]\nd=[n//2**i-n//(3*2**i) for i in range(k+1)]\ny=r([i for i in range(2,n+1)])\ns=k if n<3*2**(k-1) else 0\nfor j in range(s,k+1):\n    e=[a[i] for i in range(j)]+[d[j]]+[b[i] for i in range(j,k)]\n    x=y*r(e)%p\n    f=r([sum(e[:i+1]) for i in range(k+1)])\n    while f>1:\n        x*=p//f+1\n        f=f*(p//f+1)%p\n    t+=x%p\nprint(t%p)", "difficulty": 11, "public_tests": {"input": ["2\n", "3\n", "6\n"], "output": ["1\n", "4\n", "120\n"]}, "private_tests": {"input": ["955654\n", "460829\n", "798412\n", "999999\n", "8969\n", "425221\n", "957\n", "28211\n", "629462\n", "5\n", "786432\n", "10\n", "786431\n", "847\n", "217292\n", "73\n", "175863\n", "40\n", "42\n", "89\n", "21504\n", "919645\n", "838757\n", "479\n", "64\n", "789700\n", "7127\n", "683\n", "546330\n", "261873\n", "4\n", "603070\n", "6264\n", "86214\n", "71\n", "676\n", "215283\n", "9\n", "1227\n", "96262\n", "4140\n", "7\n", "126395\n", "49152\n", "16339\n", "639\n", "200945\n", "3080\n", "774942\n", "87\n", "406138\n", "524288\n", "50\n", "3541\n", "1000000\n", "8\n", "586\n", "874465\n", "156\n", "662327\n", "62544\n", "211425\n", "3116\n", "437675\n", "163259\n", "582911\n", "131156\n"], "output": ["416395816\n", "66014534\n", "47586814\n", "88378773\n", "651607899\n", "973943578\n", "885557037\n", "5179894\n", "20530480\n", "6\n", "755978297\n", "15120\n", "973886300\n", "206774372\n", "936105571\n", "405863164\n", "442215433\n", "193507326\n", "270627256\n", "222320695\n", "299254647\n", "465123203\n", "220750034\n", "784626857\n", "676169815\n", "501403228\n", "515942917\n", "951224867\n", "784174655\n", "965169285\n", "2\n", "15758000\n", "136451422\n", "17417160\n", "744016814\n", "491267527\n", "197619154\n", "1440\n", "9412302\n", "882337958\n", "371936240\n", "600\n", "374976337\n", "468540828\n", "166382218\n", "32577133\n", "712409910\n", "806160386\n", "979976656\n", "247668980\n", "648609649\n", "948408574\n", "938830187\n", "358246424\n", "943169120\n", "240\n", "77973950\n", "417880003\n", "980176938\n", "118190038\n", "554785078\n", "501705216\n", "390594722\n", "305205122\n", "581955590\n", "825030283\n", "751299482\n"]}, "generated_tests": {"input": ["446594\n", "890226\n", "218235\n", "10643\n", "202206\n", "1880\n", "27999\n", "418070\n", "476\n", "312716\n", "123\n", "191741\n", "24\n", "38\n", "154\n", "31223\n", "974301\n", "174\n", "45\n", "1740\n", "12808\n", "1221\n", "248044\n", "13\n", "695592\n", "7554\n", "133288\n", "110\n", "862\n", "303238\n", "1656\n", "25422\n", "7647\n", "12\n", "155596\n", "81701\n", "3645\n", "947\n", "53879\n", "5109\n", "760775\n", "65281\n", "534238\n", "63\n", "4141\n", "1125\n", "180\n", "480359\n", "58669\n", "374978\n", "767\n", "683810\n", "144253\n", "442721\n", "93971\n", "16\n", "737538\n", "36939\n", "53279\n", "14203\n", "281591\n", "2253\n", "25773\n", "49483\n", "922\n", "611672\n"], "output": ["617800835\n", "636653817\n", "783020293\n", "698109735\n", "30279693\n", "568174562\n", "934195588\n", "809895659\n", "741584055\n", "136965914\n", "82564314\n", "121238969\n", "861239957\n", "966990924\n", "570935382\n", "244458459\n", "429502449\n", "39945777\n", "841262784\n", "591369811\n", "565780070\n", "782782935\n", "227804524\n", "69672960\n", "975600393\n", "566857328\n", "881577232\n", "830916051\n", "1846137\n", "406789803\n", "63043471\n", "422368341\n", "483793282\n", "7015680\n", "315565437\n", "565312931\n", "961704652\n", "476357185\n", "639820003\n", "671236230\n", "697978159\n", "869332696\n", "412010383\n", "297683370\n", "532303115\n", "994409282\n", "502785255\n", "84948539\n", "140619499\n", "161053139\n", "28212870\n", "76118235\n", "519758526\n", "685662223\n", "603527539\n", "151347172\n", "814226054\n", "302480242\n", "13887561\n", "744411646\n", "382225703\n", "675547013\n", "223992098\n", "751254980\n", "206376177\n", "641049828\n"]}, "short_description": "1. One-sentence summary:  \nCompute a sum of modular-weighted products over a small range of partition-like configurations derived from repeated binary splits of an input size.\n\n2. Core algorithmic approach:  \nPure arithmetic enumeration using precomputed factorials (via a simple product loop) and modular arithmetic (including on-the-fly inversion), iterating over O(log n) candidate \u201csplit depths.\u201d\n\n3. Reusable components:  \n- A modular product function (r) that folds a list of integers under a prime modulus.  \n- A pattern for generating counts of elements at each level of a binary (and ternary) subdivision via floor divisions.  \n- An on-the-fly modular inversion strategy using multiplicative adjustment within a while-loop (to invert arbitrary small factors f modulo p)."}
{"name": "575_H. Bots", "description": "Sasha and Ira are two best friends. But they aren\u2019t just friends, they are software engineers and experts in artificial intelligence. They are developing an algorithm for two bots playing a two-player game. The game is cooperative and turn based. In each turn, one of the players makes a move (it doesn\u2019t matter which player, it's possible that players turns do not alternate). \n\nAlgorithm for bots that Sasha and Ira are developing works by keeping track of the state the game is in. Each time either bot makes a move, the state changes. And, since the game is very dynamic, it will never go back to the state it was already in at any point in the past.\n\nSasha and Ira are perfectionists and want their algorithm to have an optimal winning strategy. They have noticed that in the optimal winning strategy, both bots make exactly N moves each. But, in order to find the optimal strategy, their algorithm needs to analyze all possible states of the game (they haven\u2019t learned about alpha-beta pruning yet) and pick the best sequence of moves.\n\nThey are worried about the efficiency of their algorithm and are wondering what is the total number of states of the game that need to be analyzed? \n\nInput\n\nThe first and only line contains integer N.\n\n  * 1 \u2264 N \u2264 106\n\nOutput\n\nOutput should contain a single integer \u2013 number of possible states modulo 109 + 7.\n\nExamples\n\nInput\n\n2\n\n\nOutput\n\n19\n\nNote\n\nStart: Game is in state A. \n\n  * Turn 1: Either bot can make a move (first bot is red and second bot is blue), so there are two possible states after the first turn \u2013 B and C. \n  * Turn 2: In both states B and C, either bot can again make a turn, so the list of possible states is expanded to include D, E, F and G. \n  * Turn 3: Red bot already did N=2 moves when in state D, so it cannot make any more moves there. It can make moves when in state E, F and G, so states I, K and M are added to the list. Similarly, blue bot cannot make a move when in state G, but can when in D, E and F, so states H, J and L are added. \n  * Turn 4: Red bot already did N=2 moves when in states H, I and K, so it can only make moves when in J, L and M, so states P, R and S are added. Blue bot cannot make a move when in states J, L and M, but only when in H, I and K, so states N, O and Q are added. \n\n\n\nOverall, there are 19 possible states of the game their algorithm needs to analyze.\n\n<image>", "solution": "# https://codeforces.com/problemset/problem/575/H\n\nimport sys\nimport math\n\nMOD = 1000000007\n\n\ndef inv(a, b):\n    if(a > 1):\n        return b-inv(b % a, a)*b//a\n    else:\n        return 1\n\n\ndef main():\n    # sys.stdin = open('E:\\\\Sublime\\\\in.txt', 'r')\n    # sys.stdout = open('E:\\\\Sublime\\\\out.txt', 'w')\n    # sys.stderr = open('E:\\\\Sublime\\\\err.txt', 'w')\n\n    n = int(sys.stdin.readline().strip())\n    # a, b = map(int, sys.stdin.readline().strip().split()[:2])\n\n    # C(n+1, 2n + 2) = (2n+2)! : (n+1)! : n+1!\n    # = (n+2)(n+3)...(2n+2) /\n\n    t = 1\n    m = 1\n    for i in range(1, n + 2):\n        t = (t * (n + i + 1)) % MOD\n        m = (m * i) % MOD\n    print(t * inv(m, MOD) % MOD - 1)\n\n\nif __name__ == '__main__':\n    main()\n\n# hajj\n#  \u3000\u3000\u3000\u3000\u3000\u3000 \uff3f\uff3f\n# \u3000\u3000\u3000\u3000\u3000\uff0f\uff1e\u3000\u3000\u30d5\n# \u3000\u3000\u3000\u3000\u3000| \u3000_\u3000 _ l\n# \u3000 \u3000\u3000\u3000\uff0f` \u30df\uff3fx\u30ce\n# \u3000\u3000 \u3000 /\u3000\u3000\u3000 \u3000 |\n# \u3000\u3000\u3000 /\u3000 \u30fd\u3000\u3000 \uff89\n# \u3000 \u3000 \u2502\u3000\u3000|\u3000|\u3000|\n# \u3000\uff0f\uffe3|\u3000\u3000 |\u3000|\u3000|\n# \u3000| (\uffe3\u30fd\uff3f_\u30fd_)__)\n# \u3000\uff3c\u4e8c\u3064\n", "difficulty": 14, "public_tests": {"input": ["2\n"], "output": ["19\n"]}, "private_tests": {"input": ["3\n", "1\n", "9999\n", "5\n", "999999\n", "524287\n", "178481\n", "9\n", "524288\n", "10\n", "131071\n", "4\n", "99999\n", "1000000\n", "99\n", "8\n", "6\n", "7\n", "999\n"], "output": ["69\n", "5\n", "703593269\n", "923\n", "192151599\n", "295397547\n", "845172388\n", "184755\n", "250289717\n", "705431\n", "920253602\n", "251\n", "879467332\n", "627314155\n", "407336794\n", "48619\n", "3431\n", "12869\n", "72475737\n"]}, "generated_tests": {"input": ["14926\n", "816471\n", "170062\n", "15\n", "318017\n", "12\n", "72544\n", "132856\n", "29\n", "11\n", "17\n", "944\n", "26599\n", "331684\n", "26\n", "335690\n", "66514\n", "185541\n", "14\n", "30\n", "1477\n", "26833\n", "72354\n", "39\n", "18327\n", "82198\n", "47779\n", "18\n", "33\n", "1179\n", "2169\n", "133142\n", "73\n", "33263\n", "109657\n", "78820\n", "13\n", "61\n", "1724\n", "1444\n", "260424\n", "35\n", "35758\n", "188746\n", "142607\n", "22\n", "114\n", "367\n", "1145\n", "369872\n", "46\n", "55359\n", "100536\n", "155653\n", "19\n", "628\n", "1113\n"], "output": ["80925940\n", "405721813\n", "823946960\n", "601080389\n", "926451625\n", "10400599\n", "244445738\n", "456380056\n", "737009363\n", "2704155\n", "75135236\n", "954487207\n", "974818302\n", "982061278\n", "412019538\n", "659743489\n", "92329443\n", "601247973\n", "155117519\n", "997262644\n", "983871598\n", "454912164\n", "110276485\n", "720596124\n", "263424438\n", "999026857\n", "418849840\n", "345263554\n", "69287807\n", "598546354\n", "358640779\n", "540489513\n", "724781113\n", "121940761\n", "990384420\n", "120694698\n", "40116599\n", "422726212\n", "768839615\n", "971941170\n", "909172104\n", "249018950\n", "280194440\n", "136073392\n", "113880376\n", "430669968\n", "532128923\n", "600926420\n", "960211955\n", "978722633\n", "791779090\n", "326937784\n", "258399951\n", "244472110\n", "846527860\n", "894518829\n", "760606734\n"]}, "short_description": "1. One-sentence summary:  \nCompute a specific binomial coefficient (C(2n+2, n+1)) modulo a large prime and subtract one.\n\n2. Core algorithmic approach:  \nUse modular arithmetic to build the numerator and denominator of the binomial coefficient via iterative multiplication, and compute the modular inverse of the denominator using the extended Euclidean algorithm.\n\n3. Reusable components:  \n- A modular inverse routine based on the extended Euclidean algorithm (inv).  \n- A pattern for computing C(n, k) mod p by accumulating k consecutive factors in the numerator and denominator, then multiplying by the modular inverse of the denominator.  \n- A loop for safe modular multiplication of a sequence of integers to build factorial-like products under a large prime."}
{"name": "131_C. The World is a Theatre", "description": "There are n boys and m girls attending a theatre club. To set a play \"The Big Bang Theory\", they need to choose a group containing exactly t actors containing no less than 4 boys and no less than one girl. How many ways are there to choose a group? Of course, the variants that only differ in the composition of the troupe are considered different.\n\nPerform all calculations in the 64-bit type: long long for \u0421/\u0421++, int64 for Delphi and long for Java.\n\nInput\n\nThe only line of the input data contains three integers n, m, t (4 \u2264 n \u2264 30, 1 \u2264 m \u2264 30, 5 \u2264 t \u2264 n + m).\n\nOutput\n\nFind the required number of ways.\n\nPlease do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specificator.\n\nExamples\n\nInput\n\n5 2 5\n\n\nOutput\n\n10\n\n\nInput\n\n4 3 5\n\n\nOutput\n\n3", "solution": "from sys import stdin, stdout\na, b, c = [int(a) for a in stdin.read().split()]\nZA = [1, 1]\nfor d in range(2, 31):\n\tZA.append(d * ZA[d - 1])\ne = 0\nif c - b < 4:\n\td = 4\nelse:\n\td = c - b\nwhile d <= a and d < c:\n\te = e + ZA[a] // ZA[d] // ZA[a - d] * ZA[b] // ZA[c - d] // ZA[b - c + d]\n\td = d + 1\nstdout.write(str(e))\n", "difficulty": 9, "public_tests": {"input": ["5 2 5\n", "4 3 5\n"], "output": ["10", "3"]}, "private_tests": {"input": ["28 28 50\n", "28 28 55\n", "25 25 48\n", "30 30 30\n", "10 10 20\n", "30 29 59\n", "30 30 60\n", "30 30 58\n", "30 30 50\n", "30 1 30\n", "10 10 8\n", "25 30 40\n", "20 20 40\n", "4 2 6\n", "4 1 5\n", "30 30 55\n", "7 3 6\n", "4 20 24\n", "4 20 20\n", "20 1 21\n", "4 30 34\n", "30 1 31\n", "30 30 59\n", "20 1 5\n", "20 15 27\n", "29 30 57\n", "10 10 10\n", "30 30 57\n", "20 3 23\n", "30 1 20\n", "10 1 6\n", "7 30 37\n", "20 20 5\n", "20 20 24\n", "30 29 55\n", "10 1 11\n", "5 1 6\n"], "output": ["32468436", "56", "1225", "118264581548187697", "1", "1", "1", "1770", "75394027566", "30", "84990", "11899700525790", "1", "1", "1", "5461512", "168", "1", "4845", "1", "1", "1", "60", "4845", "23535820", "1711", "168229", "34220", "1", "54627300", "252", "1", "96900", "62852101650", "455126", "1", "1\n"]}, "generated_tests": {"input": ["29 25 48\n", "19 30 30\n", "12 10 20\n", "30 29 42\n", "10 10 5\n", "6 1 5\n", "12 3 6\n", "6 20 24\n", "6 20 20\n", "4 30 12\n", "20 1 7\n", "25 15 27\n", "10 19 10\n", "20 4 23\n", "30 1 24\n", "7 30 9\n", "24 20 5\n", "21 20 24\n", "30 29 13\n", "5 1 5\n", "4 4 5\n", "21 30 30\n", "12 12 20\n", "30 29 19\n", "10 10 9\n", "14 3 6\n", "6 20 18\n", "12 20 20\n", "4 20 12\n", "27 15 27\n", "13 19 10\n", "20 4 18\n", "7 30 18\n", "21 20 5\n", "21 20 18\n", "14 5 6\n", "12 20 5\n", "4 19 12\n", "13 9 10\n", "9 30 18\n", "7 20 5\n", "24 20 18\n", "14 8 6\n", "7 19 12\n", "13 14 10\n", "11 20 5\n", "24 20 6\n", "27 8 6\n", "23 14 10\n", "24 17 6\n", "30 30 19\n", "21 30 19\n", "20 20 23\n", "11 3 6\n", "4 21 24\n", "4 20 13\n", "6 30 34\n", "30 30 44\n", "10 1 5\n", "20 15 29\n", "30 1 6\n", "12 30 37\n", "20 20 8\n", "10 2 5\n", "12 10 6\n", "10 17 5\n", "6 1 6\n", "5 19 10\n", "7 27 9\n", "21 7 24\n", "7 4 5\n", "21 30 49\n", "12 18 20\n", "30 26 19\n", "10 6 9\n", "25 3 6\n", "10 20 18\n", "7 20 20\n", "14 4 18\n", "27 20 5\n", "21 20 16\n", "9 5 6\n", "4 19 14\n", "24 20 13\n", "14 8 8\n", "11 19 12\n", "4 5 5\n", "24 1 24\n", "4 5 8\n", "13 9 20\n"], "output": ["25827165\n", "18851680888488\n", "231\n", "277508869722315\n", "2100\n", "15\n", "3861\n", "325\n", "204459\n", "5852925\n", "38760\n", "12033222880\n", "9566101\n", "24\n", "2035800\n", "5592070\n", "212520\n", "151584480450\n", "3949260188055\n", "5\n", "4\n", "114456652814979\n", "10626\n", "1396982287132530\n", "136890\n", "9009\n", "1172490\n", "225529259\n", "125970\n", "98672427615\n", "42912298\n", "134406\n", "8264830350\n", "119700\n", "202090977370\n", "20020\n", "9900\n", "75582\n", "635349\n", "42929724135\n", "700\n", "1029497817502\n", "44044\n", "3905070\n", "7193186\n", "6600\n", "2869020\n", "1137240\n", "340301192\n", "2167704\n", "2044156982307300\n", "48239039555490\n", "88732377660\n", "2376\n", "21\n", "167960\n", "630\n", "149608375854525\n", "210\n", "1623160\n", "142506\n", "850668\n", "50063385\n", "420\n", "30195\n", "3570\n", "6\n", "147288\n", "3214926\n", "20475\n", "140\n", "1275\n", "30040989\n", "424632952571100\n", "11310\n", "197340\n", "84403130\n", "843999\n", "1\n", "351000\n", "102965854728\n", "1890\n", "92378\n", "51489626384\n", "293722\n", "65288275\n", "5\n", "24\n", "5\n", "231\n"]}, "short_description": "1. One-sentence summary  \nCompute the sum of products of two binomial coefficients over a constrained range of the summation index.\n\n2. Core algorithmic approach  \nBrute-force enumeration of the summation index with precomputed factorials to evaluate C(a, d) and C(b, c\u2013d) in O(1) each, yielding overall O(n) time in the loop.\n\n3. Reusable components  \n- Factorial precomputation array (ZA) for fast C(n, k) via factorial division.  \n- A combination(n, k) function that returns factorial[n] // (factorial[k] * factorial[n\u2013k]).  \n- A constrained-summation pattern that iterates an index d over a computed lower and upper bound and accumulates a function of d."}
{"name": "397_C. On Number of Decompositions into Multipliers", "description": "You are given an integer m as a product of integers a1, a2, ... an <image>. Your task is to find the number of distinct decompositions of number m into the product of n ordered positive integers.\n\nDecomposition into n products, given in the input, must also be considered in the answer. As the answer can be very large, print it modulo 1000000007 (109 + 7).\n\nInput\n\nThe first line contains positive integer n (1 \u2264 n \u2264 500). The second line contains space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 109).\n\nOutput\n\nIn a single line print a single number k \u2014 the number of distinct decompositions of number m into n ordered multipliers modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n1\n15\n\n\nOutput\n\n1\n\n\nInput\n\n3\n1 1 2\n\n\nOutput\n\n3\n\n\nInput\n\n2\n5 7\n\n\nOutput\n\n4\n\nNote\n\nIn the second sample, the get a decomposition of number 2, you need any one number out of three to equal 2, and the rest to equal 1.\n\nIn the third sample, the possible ways of decomposing into ordered multipliers are [7,5], [5,7], [1,35], [35,1].\n\nA decomposition of positive integer m into n ordered multipliers is a cortege of positive integers b = {b1, b2, ... bn} such that <image>. Two decompositions b and c are considered different, if there exists index i such that bi \u2260 ci.", "solution": "# by the authority of GOD     author: manhar singh sachdev #\n\nimport os,sys\nfrom io import BytesIO, IOBase\nfrom collections import Counter\n\ndef factor(x,cou):\n    while not x%2:\n        x /= 2\n        cou[2] += 1\n    for i in range(3,int(x**0.5)+1,2):\n        while not x%i:\n            x //= i\n            cou[i] += 1\n    if x != 1:\n        cou[x] += 1\n\ndef main():\n    mod = 10**9+7\n    fac = [1]\n    for ii in range(1,10**5+1):\n        fac.append((fac[-1]*ii)%mod)\n    fac_in = [pow(fac[-1],mod-2,mod)]\n    for ii in range(10**5,0,-1):\n        fac_in.append((fac_in[-1]*ii)%mod)\n    fac_in.reverse()\n    n = int(input())\n    a = list(map(int,input().split()))\n    cou = Counter()\n    for i in a:\n        factor(i,cou)\n    ans = 1\n    for i in cou:\n        a,b = cou[i]+n-1,n-1\n        ans = (ans*fac[a]*fac_in[b]*fac_in[a-b])%mod\n    print(ans)\n\n# Fast IO Region\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nif __name__ == \"__main__\":\n    main()", "difficulty": 9, "public_tests": {"input": ["2\n5 7\n", "3\n1 1 2\n", "1\n15\n"], "output": ["4", "3", "1"]}, "private_tests": {"input": ["1\n111546435\n", "10\n6295 3400 4042 2769 3673 264 5932 4977 1776 5637\n", "5\n387420489 244140625 387420489 387420489 1\n", "2\n5 10\n", "20\n16777216 1048576 524288 8192 8192 524288 2097152 8388608 1048576 67108864 16777216 1048576 4096 8388608 134217728 67108864 1048576 536870912 67108864 67108864\n", "7\n111546435 58642669 600662303 167375713 371700317 33984931 89809099\n", "23\n77 12 25 7 44 75 80 92 49 77 56 93 59 45 45 39 86 83 99 91 4 70 83\n", "2\n1 2\n", "3\n1 30 1\n", "5\n387420489 536870912 536870912 536870912 387420489\n", "10\n214358881 536870912 815730721 387420489 893871739 244140625 282475249 594823321 148035889 410338673\n", "8\n836 13 77 218 743 530 404 741\n", "3\n1 1 1\n", "3\n1 1 39989\n", "2\n536870912 387420489\n", "50\n675 25000 2025 50 450 31250 3750 225 1350 250 72 187500 12000 281250 187500 30000 45000 90000 90 1200 9000 56250 5760 270000 3125 3796875 2250 101250 40 2500 175781250 1250000 45000 2250 3000 31250 46875 135000 421875000 36000 360 140625000 13500 1406250 1125 250 75000 62500 150 6\n", "1\n536870912\n", "5\n14 67 15 28 21\n", "19\n371700317 12112039 167375713 7262011 21093827 89809099 600662303 18181979 9363547 30857731 58642669 111546435 645328247 5605027 38706809 14457349 25456133 44227723 33984931\n", "2\n1 6\n", "1\n1\n", "10\n2097152 67108864 65536 262144 262144 131072 8388608 536870912 65536 2097152\n", "3\n8 10 8\n", "10\n237254761 1 817430153 1 1 1 1 1 90679621 1\n", "2\n999983 999983\n", "2\n1000000000 1000000000\n"], "output": ["1", "928377494", "772171400", "6", "985054761", "25706464", "247701073", "2", "27", "255309592", "547239398", "544714485", "1", "3", "570", "18983788", "1", "459375", "376284721", "4", "1", "176451954", "108", "1000", "3", "361"]}, "generated_tests": {"input": ["1\n26708001\n", "10\n6295 3400 4042 2769 3673 452 5932 4977 1776 5637\n", "5\n395486450 244140625 387420489 387420489 1\n", "2\n6 10\n", "20\n16777216 1048576 524288 8192 8192 524288 2097152 8388608 1048576 67108864 16777216 1048576 4096 8388608 134217728 33711426 1048576 536870912 67108864 67108864\n", "7\n111546435 58642669 1023707418 167375713 371700317 33984931 89809099\n", "23\n77 12 25 7 44 75 80 92 70 77 56 93 59 45 45 39 86 83 99 91 4 70 83\n", "2\n1 3\n", "3\n2 30 1\n", "5\n387420489 536870912 536870912 536870912 479988660\n", "10\n214358881 536870912 607060520 387420489 893871739 244140625 282475249 594823321 148035889 410338673\n", "8\n679 13 77 218 743 530 404 741\n", "3\n2 1 1\n", "3\n2 1 39989\n", "2\n536870912 186644423\n", "50\n675 25000 2025 50 450 31250 3750 225 1350 250 72 187500 12000 281250 187500 30000 45000 90000 90 1200 9000 56250 5760 270000 3125 3796875 2250 101250 40 2500 175781250 1250000 45000 2250 3000 31250 46875 135000 421875000 36000 360 140625000 13500 1406250 229 250 75000 62500 150 6\n", "5\n14 67 15 12 21\n", "19\n371700317 12112039 167375713 7262011 21093827 89809099 600662303 18181979 9363547 30857731 58642669 111546435 1035939205 5605027 38706809 14457349 25456133 44227723 33984931\n", "10\n2097152 67108864 65536 262144 262144 131072 8388608 536870912 65536 1848682\n", "3\n8 10 1\n", "10\n237254761 1 817430153 1 1 1 1 1 102992299 1\n", "2\n999983 1485721\n", "2\n1000000000 1000000001\n", "3\n1 1 4\n", "10\n6295 3400 4042 2769 3673 452 5932 4977 2405 5637\n", "5\n395486450 244140625 520714228 387420489 1\n", "20\n16777216 1048576 524288 8192 8192 524288 2097152 8388608 1048576 67108864 8654817 1048576 4096 8388608 134217728 33711426 1048576 536870912 67108864 67108864\n", "7\n111546435 58642669 1023707418 167375713 371700317 56538502 89809099\n", "23\n77 12 25 7 34 75 80 92 70 77 56 93 59 45 45 39 86 83 99 91 4 70 83\n", "5\n111126856 536870912 536870912 536870912 479988660\n", "10\n214358881 828572684 607060520 387420489 893871739 244140625 282475249 594823321 148035889 410338673\n", "8\n679 13 27 218 743 530 404 741\n", "2\n947981627 186644423\n", "50\n675 25000 2025 50 450 31250 3750 225 1350 250 72 187500 12000 281250 187500 30000 45000 90000 90 1200 9000 56250 5760 270000 3125 3796875 2250 101250 40 918 175781250 1250000 45000 2250 3000 31250 46875 135000 421875000 36000 360 140625000 13500 1406250 229 250 75000 62500 150 6\n", "5\n14 119 15 12 21\n", "19\n371700317 12112039 167375713 7262011 21093827 89809099 600662303 18181979 9363547 30857731 58642669 111546435 1035939205 1523918 38706809 14457349 25456133 44227723 33984931\n", "10\n2097152 67108864 65536 262144 256417 131072 8388608 536870912 65536 1848682\n", "3\n8 3 1\n", "2\n999983 2142588\n", "2\n1000000010 1000000001\n", "10\n6295 3400 4042 2769 3500 452 5932 4977 2405 5637\n", "2\n13 10\n", "20\n16777216 2096902 524288 8192 8192 524288 2097152 8388608 1048576 67108864 8654817 1048576 4096 8388608 134217728 33711426 1048576 536870912 67108864 67108864\n", "7\n111546435 58642669 188724407 167375713 371700317 56538502 89809099\n", "23\n77 12 25 7 34 75 80 92 70 65 56 93 59 45 45 39 86 83 99 91 4 70 83\n", "5\n59633398 536870912 536870912 536870912 479988660\n", "10\n214358881 828572684 607060520 387420489 893871739 244140625 180172840 594823321 148035889 410338673\n", "8\n679 13 27 218 743 530 404 1315\n", "1\n1678749\n", "2\n1 1\n", "2\n1 7\n", "1\n7\n", "1\n26840286\n", "2\n10 10\n", "3\n3 1 1\n", "1\n2721476\n", "2\n1 8\n", "3\n1 2 1\n", "1\n5\n", "1\n3280161\n"], "output": ["1\n", "19434679\n", "991334958\n", "12\n", "990465060\n", "859241350\n", "114649101\n", "2\n", "54\n", "356331103\n", "58412506\n", "237509226\n", "3\n", "9\n", "240\n", "604873359\n", "459375\n", "481452798\n", "514774084\n", "45\n", "10000\n", "4\n", "3200\n", "6\n", "329743138\n", "929561821\n", "324740205\n", "502731681\n", "559479725\n", "381124930\n", "31352322\n", "397145989\n", "32\n", "299162481\n", "1071875\n", "744488398\n", "769111638\n", "30\n", "96\n", "512\n", "66610458\n", "8\n", "119351129\n", "910811852\n", "570080892\n", "945358381\n", "447702780\n", "598962181\n", "1\n", "1\n", "2\n", "1\n", "1\n", "9\n", "3\n", "1\n", "4\n", "3\n", "1\n", "1\n"]}, "short_description": "1. One-sentence summary:  \nCompute the product of binomial coefficients derived from aggregated prime\u2010factor counts of input values under a large prime modulus.\n\n2. Core algorithmic approach:  \n\u2013 Prime factorization by trial division (extract powers of 2 and odd divisors up to \u221ax)  \n\u2013 Precompute factorials and modular inverses (via Fermat\u2019s little theorem) to support fast nCr  \n\u2013 Multiply the required combinations for each prime exponent count modulo 10^9+7\n\n3. Reusable components:  \n\u2013 `factor(x, counter)`: trial\u2010division routine that accumulates prime exponents in a counter  \n\u2013 Factorial and inverse\u2010factorial precomputation pattern for O(1) modular nCr queries  \n\u2013 Use of a `Counter` (or hash map) to aggregate frequencies before combinatorial processing"}
{"name": "520_E. Pluses everywhere", "description": "Vasya is sitting on an extremely boring math class. To have fun, he took a piece of paper and wrote out n numbers on a single line. After that, Vasya began to write out different ways to put pluses (\"+\") in the line between certain digits in the line so that the result was a correct arithmetic expression; formally, no two pluses in such a partition can stand together (between any two adjacent pluses there must be at least one digit), and no plus can stand at the beginning or the end of a line. For example, in the string 100500, ways 100500 (add no pluses), 1+00+500 or 10050+0 are correct, and ways 100++500, +1+0+0+5+0+0 or 100500+ are incorrect.\n\nThe lesson was long, and Vasya has written all the correct ways to place exactly k pluses in a string of digits. At this point, he got caught having fun by a teacher and he was given the task to calculate the sum of all the resulting arithmetic expressions by the end of the lesson (when calculating the value of an expression the leading zeros should be ignored). As the answer can be large, Vasya is allowed to get only its remainder modulo 109 + 7. Help him!\n\nInput\n\nThe first line contains two integers, n and k (0 \u2264 k < n \u2264 105).\n\nThe second line contains a string consisting of n digits.\n\nOutput\n\nPrint the answer to the problem modulo 109 + 7.\n\nExamples\n\nInput\n\n3 1\n108\n\n\nOutput\n\n27\n\nInput\n\n3 2\n108\n\n\nOutput\n\n9\n\nNote\n\nIn the first sample the result equals (1 + 08) + (10 + 8) = 27.\n\nIn the second sample the result equals 1 + 0 + 8 = 9.", "solution": "n, k = map(int, input().split())\nt = list(map(int, input()))\n\np, d = 1, 10**9 + 7\ns = 0\nf = [1] * n\n\nfor i in range(2, n):\n\tf[i] = (i * f[i - 1]) % d\n\nc = lambda a, b: 0 if a > b else (f[b] * pow(f[a] * f[b -a], d - 2, d)) % d\n\nif k:\n\tu = [0] * (n + 1)\n\tp = [1] * (n + 1)\n\n\tfor i in range(n):\n\t\tu[i] = (p[i] * c(k - 1, n - 2 - i) + u[i - 1]) % d\n\n\t\tp[i + 1] = (10 * p[i]) % d\n\n\tfor i in range(n):\n\t\tv = u[n - 2 - i] + p[n - 1 - i] * c(k,i)\n\t\ts = (s + t[i] * v) % d\n\nelse:\n\tfor i in t:\n\t\ts = (s * 10 + i) % d\n\nprint(s)\n\n#GG", "difficulty": 11, "public_tests": {"input": ["3 1\n108\n", "3 2\n108\n"], "output": ["27\n", "9\n"]}, "private_tests": {"input": ["132 104\n558881515858815818855111851188551181818185155585188885588555158518555118155511851558151188115518858811551515158155181855155181588185\n", "20 9\n34540451546587567970\n", "57 13\n177946005798852216692528643323484389368821547834013121843\n", "14 6\n00000000000001\n", "69 42\n702219529742805879674066565317944328886138640496101944672203835664744\n", "6 3\n967181\n", "100 50\n0009909900909009999909009909900090000990999909009909099990099990909000999009009000090099009009009900\n", "7 1\n2178766\n", "10 0\n3448688665\n", "5 2\n39923\n", "100 10\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n", "200 99\n99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n", "20 19\n33137197659033083606\n", "200 100\n56988719755815575893282254081467698462485803782142631369385180999746639622554559884281193367342283559238834106917388166048020056852911293394377949964185368886333934084399980368238188117302968424219707\n", "20 8\n99999999999999999999\n", "16 15\n8086179429588546\n", "1 0\n5\n", "18 15\n703140050361297985\n", "169 79\n4127820680853085792029730656808609037371898882875765629277699584259523684674321307751545375311931127593565910629995605232615333335597916968134403869036676265945118713450\n", "89 29\n77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n"], "output": ["999404541\n", "64877692\n", "734611754\n", "1716\n", "94769311\n", "3506\n", "32857902\n", "509217\n", "448688644\n", "2667\n", "993802401\n", "988919917\n", "83\n", "295455656\n", "514450773\n", "90\n", "5\n", "24010\n", "750991187\n", "206099915\n"]}, "generated_tests": {"input": ["20 16\n34540451546587567970\n", "57 1\n177946005798852216692528643323484389368821547834013121843\n", "14 4\n00000000000001\n", "69 42\n891959442722041926996820472576837518077495517366428267452831811470070\n", "100 84\n0009909900909009999909009909900090000990999909009909099990099990909000999009009000090099009009009900\n", "10 0\n5612273772\n", "5 1\n39923\n", "200 000\n56988719755815575893282254081467698462485803782142631369385180999746639622554559884281193367342283559238834106917388166048020056852911293394377949964185368886333934084399980368238188117302968424219707\n", "20 0\n99999999999999999999\n", "18 4\n703140050361297985\n", "169 69\n4127820680853085792029730656808609037371898882875765629277699584259523684674321307751545375311931127593565910629995605232615333335597916968134403869036676265945118713450\n", "89 29\n89018112760186442666566626583745804923583501401841796215945313322391232572296782847154518\n", "20 4\n34540451546587567970\n", "10 0\n2584609599\n", "5 1\n78785\n", "20 0\n64296734318251779927\n", "18 4\n698371843212423826\n", "20 2\n34540451546587567970\n", "20 0\n15746881404879295743\n", "20 1\n34540451546587567970\n", "132 60\n558881515858815818855111851188551181818185155585188885588555158518555118155511851558151188115518858811551515158155181855155181588185\n", "20 9\n48229299322914314727\n", "57 10\n177946005798852216692528643323484389368821547834013121843\n", "6 0\n967181\n", "100 62\n0009909900909009999909009909900090000990999909009909099990099990909000999009009000090099009009009900\n", "113 99\n99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n", "20 19\n58815675269904503550\n", "20 11\n99999999999999999999\n", "169 140\n4127820680853085792029730656808609037371898882875765629277699584259523684674321307751545375311931127593565910629995605232615333335597916968134403869036676265945118713450\n", "3 1\n159\n", "3 1\n177\n", "57 1\n204098360520220037467081658185571295980715612240715986511\n", "14 3\n00000000000001\n", "10 0\n7350154302\n", "200 100\n65525574919358340639635574776887438352095845206371338943083431047315550995961196353580022544136628521553820575621180060518464158423360618738881815632374693566698814887630016832969322052639964600263060\n", "169 69\n4814429117827172992620711445238805795606596599967267358391196826021024357136174316112715082566644479845053023462905405251627374672605547229319292432422239061628467308062\n", "89 21\n89018112760186442666566626583745804923583501401841796215945313322391232572296782847154518\n", "20 4\n24205813835191526571\n", "20 2\n21315709563789201361\n", "20 1\n15746881404879295743\n", "20 1\n52769486205081175577\n", "20 4\n48229299322914314727\n", "57 11\n177946005798852216692528643323484389368821547834013121843\n", "6 1\n967181\n", "169 140\n8083328442583572830881536630481192420447540397902950198620966681097451319306619365292888144499744106051190234559139209031620879937255637465149963459568436866051012481386\n", "3 1\n297\n", "14 3\n10000000000001\n", "10 0\n1238004192\n", "89 31\n89018112760186442666566626583745804923583501401841796215945313322391232572296782847154518\n", "20 4\n12903826852296373997\n", "20 0\n52769486205081175577\n", "57 11\n225771972753100288430885184133200923074816218969882624433\n", "6 1\n881382\n", "169 0\n8083328442583572830881536630481192420447540397902950198620966681097451319306619365292888144499744106051190234559139209031620879937255637465149963459568436866051012481386\n", "3 1\n196\n"], "output": ["428610\n", "699842356\n", "715\n", "446437540\n", "648617302\n", "612273737\n", "15305\n", "49378054\n", "4899\n", "279297498\n", "64256340\n", "780893103\n", "810327383\n", "584609585\n", "18410\n", "174642851\n", "691188006\n", "834031769\n", "651126685\n", "458894244\n", "445269942\n", "750317253\n", "331986468\n", "967181\n", "215751835\n", "537822457\n", "93\n", "237337310\n", "159417262\n", "84\n", "102\n", "162566809\n", "286\n", "350154253\n", "219897485\n", "374806501\n", "361536065\n", "874673506\n", "972190391\n", "105269759\n", "611960588\n", "309266905\n", "186771877\n", "182086\n", "996061409\n", "135\n", "717421311\n", "238004185\n", "793221547\n", "864367624\n", "694774732\n", "753335939\n", "181158\n", "827251732\n", "122\n"]}, "short_description": "1. One-sentence summary:\n   The code computes a weighted sum of sequence elements where each element\u2019s contribution is scaled by combinatorial counts and powers of a base, all under a large prime modulus.\n\n2. Core algorithmic approach:\n   \u2013 Precompute factorials and use modular inverses to evaluate binomial coefficients (nCr) in O(1) per query.  \n   \u2013 Build prefix arrays (cumulative sums and powers of 10) to accumulate weighted contributions in O(n).  \n\n3. Reusable components:\n   a. Factorial precomputation with modular inverse support:  \n      \u2022 Build f[i] = i! mod M and use Fermat\u2019s little theorem for inv(f[i]).  \n      \u2022 Function nCr(a, b) = f[b] * inv(f[a] * f[b\u2013a]) mod M.  \n   b. Prefix-power array generator:  \n      \u2022 p[i] = base^i mod M for fast lookup of geometric weights.  \n   c. Prefix-sum accumulation pattern:  \n      \u2022 u[i] = u[i\u20131] + p[i] * nCr(\u2026) mod M, to reuse partial sums when combining contributions."}
{"name": "1503_E. 2-Coloring", "description": "There is a grid with n rows and m columns. Every cell of the grid should be colored either blue or yellow.\n\nA coloring of the grid is called stupid if every row has exactly one segment of blue cells and every column has exactly one segment of yellow cells.\n\nIn other words, every row must have at least one blue cell, and all blue cells in a row must be consecutive. Similarly, every column must have at least one yellow cell, and all yellow cells in a column must be consecutive.\n\n<image> An example of a stupid coloring.  <image> Examples of clever colorings. The first coloring is missing a blue cell in the second row, and the second coloring has two yellow segments in the second column. \n\nHow many stupid colorings of the grid are there? Two colorings are considered different if there is some cell that is colored differently.\n\nInput\n\nThe only line contains two integers n, m (1\u2264 n, m\u2264 2021).\n\nOutput\n\nOutput a single integer \u2014 the number of stupid colorings modulo 998244353.\n\nExamples\n\nInput\n\n\n2 2\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n4 3\n\n\nOutput\n\n\n294\n\n\nInput\n\n\n2020 2021\n\n\nOutput\n\n\n50657649\n\nNote\n\nIn the first test case, these are the only two stupid 2\u00d7 2 colorings.\n\n<image>", "solution": "M=998244353;N=4042\ntry:\n    import __pypy__\n    int_add=__pypy__.intop.int_add\n    int_sub=__pypy__.intop.int_sub\n    int_mul=__pypy__.intop.int_mul\n    def make_mod_mul(mod=M):\n        fmod_inv=1.0/mod\n        def mod_mul(a,b,c=0):\n            res=int_sub(\n                int_add(int_mul(a,b),c),\n                int_mul(mod,int(fmod_inv*a*b+fmod_inv*c)),\n            )\n            if res>=mod:return res-mod\n            elif res<0:return res+mod\n            else:return res\n        return mod_mul\n    mod_mul=make_mod_mul()\nexcept:\n    def mod_mul(a,b):return(a*b)%M\ndef mod_add(a,b):\n    v=a+b\n    if v>=M:v-=M\n    if v<0:v+=M\n    return v\ndef mod_sum(a):\n    v=0\n    for i in a:v=mod_add(v,i)\n    return v\nf1=[1]\nfor i in range(N):f1.append(mod_mul(f1[-1],i+1))\nf2=[pow(f1[-1],M-2,M)]\nfor i in range(N):f2.append(mod_mul(f2[-1],N-i))\nf2=f2[::-1]\nC=lambda a,b:mod_mul(mod_mul(f1[a],f2[b]),f2[a-b])\nA=lambda a,b,w:mod_mul(C(a+b,a),C(w+b-a-2,b-1))\ndef V(h,W,H):\n    s=p=0\n    for i in range(W-1):\n        p=mod_add(p,A(i,H-h,W));s=mod_add(s,mod_mul(p,A(W-2-i,h,W)))\n    return s\nH,W=map(int,input().split())\nY=mod_sum(mod_mul(A(s,h,W),A(W-2-s,H-h,W))for s in range(W-1)for h in range(1,H))\nX=mod_add(mod_sum(V(h,W,H)for h in range(1,H)),mod_sum(V(w,H,W)for w in range(1,W)))\nprint((X+X-Y-Y)%M)", "difficulty": 11, "public_tests": {"input": ["2 2\n", "4 3\n", "2020 2021\n"], "output": ["\n2\n", "\n294\n", "\n50657649\n"]}, "private_tests": {"input": ["4 4\n", "1000 1000\n", "10 19\n", "3 3\n", "8 8\n", "2019 2018\n", "4 1\n", "3 1\n", "1848 1937\n", "2000 2000\n", "2 1\n", "4 2\n", "2021 2\n", "9 9\n", "101 100\n", "7 7\n", "999 2013\n", "598 319\n", "1453 938\n", "17 13\n", "3 2\n", "3 5\n", "1 4\n", "2 4\n", "10 10\n", "5 4\n", "6 6\n", "5 2\n", "1 3\n", "2 3\n", "1 5\n", "5 2021\n", "1 1\n", "2021 2021\n", "3 4\n", "5 3\n", "4 2021\n", "4 5\n", "2021 1\n", "101 101\n", "5 1\n", "2 5\n", "2021 3\n", "1 2021\n", "104 328\n", "1 2\n", "5 5\n"], "output": ["1570\n", "72199042\n", "272254938\n", "72\n", "134909730\n", "15395158\n", "0\n", "0\n", "337952422\n", "111024599\n", "0\n", "30\n", "44330628\n", "177198854\n", "137902766\n", "8281392\n", "879862853\n", "420237100\n", "379270595\n", "737338284\n", "10\n", "896\n", "0\n", "30\n", "848269250\n", "6066\n", "498764\n", "70\n", "0\n", "10\n", "0\n", "2872985\n", "0\n", "138387540\n", "294\n", "896\n", "102125833\n", "6066\n", "0\n", "601990061\n", "0\n", "70\n", "435157523\n", "0\n", "726939953\n", "0\n", "29000\n"]}, "generated_tests": {"input": ["8 4\n", "1001 1000\n", "10 5\n", "6 3\n", "9 8\n", "6 5\n", "1848 124\n", "1862 2000\n", "12 7\n", "999 503\n", "955 319\n", "251 938\n", "17 25\n", "6 1\n", "3 7\n", "9 10\n", "2 6\n", "2021 705\n", "6 4\n", "10 3\n", "4 339\n", "57 328\n", "5 7\n", "2020 29\n", "14 4\n", "12 3\n", "18 8\n", "1848 18\n", "8 13\n", "24 7\n", "1570 503\n", "1384 319\n", "95 938\n", "17 31\n", "9 11\n", "2 12\n", "11 3\n", "2021 1056\n", "8 5\n", "82 328\n", "6 7\n", "16 4\n", "0101 1000\n", "21 3\n", "21 8\n", "1848 35\n", "8 26\n", "24 3\n", "1513 503\n", "1384 349\n", "95 1736\n", "17 33\n", "2 18\n", "15 3\n", "2021 1582\n", "8 12\n", "141 328\n", "12 14\n", "24 4\n", "0100 1000\n", "36 3\n", "21 2\n", "338 35\n", "8 16\n", "24 6\n", "457 503\n", "17 41\n", "3 18\n", "25 3\n", "2021 1124\n", "8 20\n", "218 328\n", "10 14\n", "1100 1000\n", "24 2\n", "27 3\n", "338 58\n", "8 25\n", "457 954\n", "17 71\n", "6 18\n", "2002 1124\n", "9 20\n", "106 328\n", "10 22\n", "1100 1001\n", "35 2\n", "17 2\n", "58 58\n", "16 25\n", "10 6\n", "536 954\n", "21 71\n", "12 18\n", "2002 1504\n", "15 20\n", "106 326\n", "16 22\n", "1100 1101\n", "26 2\n", "116 58\n", "16 30\n", "10 4\n", "684 954\n", "12 11\n", "15 22\n", "106 283\n", "3 22\n", "1100 1111\n", "51 2\n", "26 4\n", "122 58\n", "16 3\n", "19 4\n", "684 720\n", "12 12\n", "15 28\n", "106 365\n", "1000 1101\n", "39 4\n", "122 69\n", "28 4\n", "347 720\n", "12 21\n", "15 10\n", "106 390\n", "55 2\n", "192 69\n", "28 7\n", "154 720\n", "12 22\n", "15 11\n", "106 418\n", "1100 0101\n", "31 2\n", "297 69\n", "28 5\n", "200 720\n", "12 15\n", "11 11\n", "106 82\n", "0100 0101\n", "31 3\n", "306 69\n", "21 5\n", "200 711\n", "23 15\n", "11 16\n", "161 82\n", "0100 0100\n", "48 3\n", "396 69\n", "23 5\n", "398 711\n", "23 17\n", "15 16\n", "251 82\n", "0100 1100\n", "48 2\n", "267 69\n", "23 9\n", "398 894\n", "46 17\n", "29 16\n", "76 82\n", "80 2\n", "267 83\n", "23 4\n", "398 21\n", "46 14\n", "29 22\n", "76 95\n", "365 83\n", "23 2\n", "398 40\n", "69 14\n", "29 32\n", "76 81\n", "513 83\n", "23 3\n", "409 40\n", "69 8\n", "29 45\n", "76 120\n", "513 113\n", "409 74\n", "54 45\n", "95 120\n", "67 113\n", "409 131\n", "54 54\n", "9 120\n", "67 193\n", "652 131\n", "48 54\n", "9 161\n", "67 374\n", "6 161\n", "67 606\n", "652 2\n"], "output": ["122958\n", "450544063\n", "6006000\n", "2268\n", "511016770\n", "110110\n", "509211520\n", "810579306\n", "299362994\n", "302107966\n", "295330076\n", "591179925\n", "542231948\n", "0\n", "5040\n", "269396786\n", "140\n", "943418186\n", "18990\n", "33462\n", "330920720\n", "205798653\n", "353760\n", "66816841\n", "5768100\n", "90090\n", "714107585\n", "823078308\n", "918763973\n", "238440936\n", "183123994\n", "835977327\n", "891390967\n", "824626336\n", "528811396\n", "2002\n", "56056\n", "706860713\n", "1000142\n", "237013700\n", "1885052\n", "14980740\n", "491890235\n", "2040192\n", "498042685\n", "413572648\n", "186085443\n", "4359420\n", "755897872\n", "590345420\n", "111708842\n", "243503301\n", "9690\n", "308448\n", "5747414\n", "584007615\n", "693345351\n", "235940304\n", "291031650\n", "604403816\n", "44909046\n", "17710\n", "764551142\n", "537797507\n", "720178259\n", "719523592\n", "549253227\n", "854658\n", "5503680\n", "597096593\n", "794183561\n", "879794230\n", "266933303\n", "423448790\n", "29900\n", "8550360\n", "778305263\n", "734280051\n", "864046096\n", "534411484\n", "746341668\n", "60660580\n", "971739248\n", "592553645\n", "206553729\n", "598683533\n", "132090\n", "7752\n", "170077438\n", "654944286\n", "48772360\n", "679930999\n", "139439923\n", "873175867\n", "775455933\n", "531042066\n", "480256408\n", "12248083\n", "191609505\n", "40950\n", "620017518\n", "520920704\n", "552552\n", "935908522\n", "793286570\n", "142676094\n", "427693209\n", "2656500\n", "66495731\n", "585650\n", "528290100\n", "62194681\n", "441864\n", "52059810\n", "106127885\n", "838861714\n", "707441956\n", "959451223\n", "717702295\n", "319525067\n", "174903473\n", "919979064\n", "175728013\n", "298861603\n", "467176354\n", "234538070\n", "790020\n", "972711294\n", "124895646\n", "841579963\n", "644761526\n", "328346342\n", "59959982\n", "704765056\n", "81840\n", "614233303\n", "248043079\n", "452336094\n", "166590011\n", "389912037\n", "458858690\n", "137902766\n", "18921408\n", "406893368\n", "588303541\n", "953060264\n", "70255916\n", "782230422\n", "533466253\n", "960824148\n", "239604120\n", "747925306\n", "158661656\n", "950316850\n", "269076555\n", "696564157\n", "768003763\n", "578181893\n", "460600\n", "950850578\n", "775835564\n", "701497386\n", "919421276\n", "231849382\n", "883703053\n", "3498120\n", "370667655\n", "212239170\n", "995188997\n", "785715685\n", "930939942\n", "790714295\n", "400003905\n", "25300\n", "680163820\n", "659132755\n", "147838840\n", "636053204\n", "50760541\n", "3420560\n", "295265885\n", "994534293\n", "44109372\n", "601124646\n", "325650503\n", "193962472\n", "715715338\n", "509302758\n", "250854712\n", "170302487\n", "325497579\n", "482608921\n", "201462768\n", "601151346\n", "643257438\n", "837481990\n", "277908858\n", "268914862\n", "328657438\n", "131944707\n"]}, "short_description": "1. One-sentence summary:  \nCompute a complex double sum of weighted binomial\u2010coefficient products modulo a prime, effectively counting certain combinatorial configurations on an H\u00d7W grid.\n\n2. Core algorithmic approach:  \nPrecompute factorials and inverse factorials in O(N) for fast binomial coefficients, then evaluate nested loops in O(H\u00b7W) that accumulate weighted combinations (i.e. two-dimensional convolution of C\u2010values).\n\n3. Reusable components:  \n- Modular arithmetic utilities (mod_mul, mod_add) with optional PyPy\u2010accelerated inner loops.  \n- Factorial and inverse\u2010factorial arrays (f1, f2) for O(1) C(n,k) queries.  \n- Higher\u2010order combination-based functions (C, A) that encapsulate common binomial\u2010pattern calculations."}
{"name": "1536_F. Omkar and Akmar", "description": "Omkar and Akmar are playing a game on a circular board with n (2 \u2264 n \u2264 10^6) cells. The cells are numbered from 1 to n so that for each i (1 \u2264 i \u2264 n-1) cell i is adjacent to cell i+1 and cell 1 is adjacent to cell n. Initially, each cell is empty.\n\nOmkar and Akmar take turns placing either an A or a B on the board, with Akmar going first. The letter must be placed on an empty cell. In addition, the letter cannot be placed adjacent to a cell containing the same letter. \n\nA player loses when it is their turn and there are no more valid moves.\n\nOutput the number of possible distinct games where both players play optimally modulo 10^9+7. Note that we only consider games where some player has lost and there are no more valid moves.\n\nTwo games are considered distinct if the number of turns is different or for some turn, the letter or cell number that the letter is placed on were different.\n\nA move is considered optimal if the move maximizes the player's chance of winning, assuming the other player plays optimally as well. More formally, if the player who has to move has a winning strategy, they have to make a move after which they will still have a winning strategy. If they do not, they can make any move.\n\nInput\n\nThe only line will contain an integer n (2 \u2264 n \u2264 10^6) \u2014 the number of cells on the board.\n\nOutput\n\nOutput a single integer \u2014 the number of possible distinct games where both players play optimally modulo 10^9+7.\n\nExamples\n\nInput\n\n\n2\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n69420\n\n\nOutput\n\n\n629909355\n\n\nInput\n\n\n42069\n\n\nOutput\n\n\n675837193\n\nNote\n\nFor the first sample case, the first player has 4 possible moves. No matter what the first player plays, the second player only has 1 possible move, so there are 4 possible games.", "solution": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nmod = 10 ** 9 + 7\nF = [0] * (n + 1)\nF[0] = 1\nfor i in range(1, n + 1):\n    F[i] = i * F[i - 1] % mod\niF = [0] * (n + 1)\niF[-1] = pow(F[-1], mod - 2, mod)\nfor i in range(n - 1, -1, -1):\n    iF[i] = iF[i + 1] * (i + 1) % mod\n\ndef C(n, k):\n    if k > n: return 0\n    return F[n] * iF[n - k] * iF[k] % mod\n\nans = 0\nfor x in range((n + 1) // 2, n + 1):\n    if x % 2: continue\n    if x < n: cur = (C(x, n - x) + C(x - 1, n - x - 1)) % mod\n    else: cur = 1\n    cur = (cur * 2 * F[x]) % mod\n    ans = (ans + cur) % mod\nprint(ans)", "difficulty": 12, "public_tests": {"input": ["69420\n", "42069\n", "2\n"], "output": ["\n629909355\n", "\n675837193\n", "\n4\n"]}, "private_tests": {"input": ["24\n", "38\n", "999993\n", "31\n", "999989\n", "27\n", "46\n", "999972\n", "5\n", "41\n", "999996\n", "999994\n", "19\n", "999975\n", "35\n", "4\n", "33\n", "23\n", "45\n", "37\n", "18\n", "32\n", "999985\n", "43\n", "42\n", "999978\n", "34\n", "999991\n", "999981\n", "999999\n", "7\n", "999983\n", "1000000\n", "999980\n", "50\n", "48\n", "999970\n", "9\n", "30\n", "17\n", "11\n", "16\n", "999979\n", "999998\n", "999977\n", "999995\n", "999987\n", "25\n", "26\n", "999973\n", "49\n", "999974\n", "21\n", "3\n", "2641\n", "77383\n", "999976\n", "743\n", "999990\n", "22\n", "36\n", "14\n", "6\n", "12\n", "999992\n", "20\n", "40\n", "10\n", "999971\n", "15\n", "999986\n", "999988\n", "999982\n", "29\n", "999984\n", "44\n", "39\n", "230085\n", "13\n", "8\n", "28\n", "47\n", "999997\n"], "output": ["12946230\n", "892756833\n", "111654003\n", "106978067\n", "612908369\n", "279383374\n", "716816138\n", "305611803\n", "240\n", "139735074\n", "864247083\n", "529477162\n", "775844941\n", "224922893\n", "3683532\n", "56\n", "472134860\n", "132914806\n", "666129974\n", "414301576\n", "852308225\n", "745085284\n", "881852047\n", "869089865\n", "739858643\n", "412436207\n", "778099123\n", "107776898\n", "833874506\n", "791711076\n", "10416\n", "557546394\n", "948343669\n", "337827492\n", "805117239\n", "170828572\n", "697909883\n", "768960\n", "143214023\n", "820226988\n", "86058720\n", "384748189\n", "971572849\n", "964678024\n", "807608635\n", "647990990\n", "982073496\n", "326058859\n", "197638215\n", "1828565\n", "463987191\n", "434598597\n", "208615006\n", "12\n", "550295469\n", "378161062\n", "160072832\n", "154603384\n", "714599400\n", "299907026\n", "866363296\n", "260512810\n", "1872\n", "358383673\n", "708722528\n", "426941700\n", "587462880\n", "10116000\n", "553569031\n", "544178233\n", "196772380\n", "933281278\n", "3913501\n", "510213586\n", "996328150\n", "241155923\n", "453222669\n", "358634501\n", "593565349\n", "109536\n", "323485765\n", "415961880\n", "88425329\n"]}, "generated_tests": {"input": ["247484\n", "68\n", "86\n", "55\n", "72\n", "52\n", "65\n", "114\n", "73\n", "61\n", "59\n", "824703\n", "75\n", "67\n", "58\n", "56\n", "57\n", "656209\n", "331789\n", "94\n", "376628\n", "104\n", "79\n", "3253\n", "100061\n", "779\n", "402894\n", "51\n", "53\n", "92\n", "706441\n", "122\n", "424813\n", "49725\n", "91\n", "406902\n", "116\n", "343651\n", "89\n", "13639\n", "46825\n", "70\n", "368075\n", "54\n", "109\n", "82\n", "83\n", "71\n", "219\n", "133\n", "62284\n", "110\n", "90\n", "62\n", "81\n", "389336\n", "180\n", "141475\n", "112\n", "139\n", "412\n", "110787\n", "121\n", "800879\n", "63\n", "87\n", "95499\n", "432\n", "18356\n", "78536\n", "66\n", "628052\n", "97\n", "200013\n", "17419\n", "16046\n", "423895\n", "80\n", "113\n", "126\n", "154\n", "266\n", "37333\n", "100\n", "134\n", "101\n", "84\n", "574159\n", "238\n", "41642\n", "76\n", "220\n", "728\n", "19034\n", "189\n", "478564\n", "223\n", "98\n", "13051\n", "407\n", "526\n", "42636\n", "131\n", "676203\n", "2278\n", "25840\n", "3783\n", "142843\n", "147\n", "192\n", "159\n", "213\n", "77\n", "70485\n", "111\n", "74\n", "869536\n", "198\n", "13319\n", "144\n", "117\n", "685\n", "2387\n", "312\n", "447283\n", "132\n", "151\n", "9016\n", "64\n", "463\n", "83218\n", "195\n", "849960\n", "4111\n", "38195\n", "4062\n", "28304\n", "99\n", "177\n", "197\n", "99243\n", "246\n", "24276\n", "96\n", "4028\n", "382\n", "442962\n", "8181\n", "88\n", "92002\n", "193\n", "272027\n", "7090\n", "48762\n", "5146\n", "15307\n", "296\n", "334\n", "10737\n", "240\n", "1975\n", "175\n", "4311\n", "169\n", "635544\n", "6495\n", "150\n", "79477\n", "360\n", "498476\n", "13838\n", "11805\n", "5006\n", "23458\n", "226\n", "349\n", "17387\n", "251\n", "1898\n", "7237\n", "164671\n", "490968\n", "345688\n", "78\n", "16905\n", "81889\n", "903905\n", "927714\n", "19290\n", "828862\n", "934407\n", "12936\n", "330939\n", "105\n", "3834\n", "12430\n", "532\n", "67785\n", "85\n", "93\n"], "output": ["231015474", "352985665", "318418270", "166801565", "553927222", "673232645", "686251137", "916498769", "498145542", "485917613", "503831978", "89954065", "729566194", "622247305", "570993165", "460343168", "781248005", "259116564", "420466657", "693446168", "912026825", "202102451", "577101856", "772986593", "138588610", "637884983", "810395936", "411938193", "690336368", "720282232", "269309986", "439071769", "951859937", "705849829", "303968648", "908656747", "791749818", "195812207", "926544315", "798014587", "25964193", "550438432", "824813969", "332334008", "129906070", "510978518", "51804994", "561400326", "202765806", "559319537", "65328358", "813091147", "573536414", "574258920", "999399831", "567861959", "443236917", "991339259", "311853688", "614578578", "498165368", "219656654", "202352204", "257746582", "11526466", "757258949", "734201249", "571817656", "549845778", "701812246", "878690353", "303574946", "688989860", "816295656", "770064874", "456620163", "351249114", "474375493", "173883104", "741221040", "972967474", "224163798", "224043503", "418894687", "996162887", "295974697", "212040546", "579178103", "745367274", "921158175", "150032582", "807155810", "350459236", "520135633", "407047056", "155317882", "656403957", "903648319", "273393604", "263025440", "289640354", "263120197", "342447211", "28167388", "202206247", "291446144", "703995550", "111758561", "165494499", "943139522", "446956699", "119035220", "199528015", "669732361", "440119032", "205683386", "154631842", "123225468", "198148699", "88633517", "466640580", "857738132", "196581619", "134104898", "988323", "646899985", "491011279", "646669810", "630476053", "22482809", "551967231", "865013214", "551292878", "228095575", "267720332", "891441872", "312417361", "873219845", "517394637", "826974456", "69254027", "769019175", "332701627", "284820723", "608342155", "894022967", "310948659", "389156923", "757128930", "344593544", "912036328", "909916088", "570255065", "412555521", "562948036", "771915535", "384058618", "889048253", "814856283", "751156407", "174594542", "736389798", "339540336", "875891199", "941288245", "113931958", "406548620", "636857895", "274225127", "32253511", "244311432", "853140072", "759832969", "80767628", "40918811", "108717057", "424558021", "989217254", "475245802", "95094398", "833954564", "254351413", "612884887", "665414064", "230962117", "341377606", "456029962", "110047982", "158331520", "210679570", "702681529", "974490611", "536875919", "954457210", "296632886", "229149675", "740660297", "718711892", "839048650", "573222091"]}, "short_description": "1. One-sentence summary:\nCompute a modular sum of weighted binomial-based terms over a range of indices to count certain combinatorial configurations.\n\n2. Core algorithmic approach:\nPrecompute factorials and modular inverses in O(n) to enable O(1) binomial-coefficient queries, then perform a single O(n) loop to accumulate the desired sum.\n\n3. Reusable components:\n- Factorial precomputation array F where F[i] = i! mod m.\n- Inverse-factorial precomputation via Fermat\u2019s little theorem and backward recurrence to get iF[i] = (i!)\u207b\u00b9 mod m.\n- A combination function C(n,k) = F[n] * iF[k] * iF[n\u2212k] mod m for fast n choose k queries."}
{"name": "300_C. Beautiful Numbers", "description": "Vitaly is a very weird man. He's got two favorite digits a and b. Vitaly calls a positive integer good, if the decimal representation of this integer only contains digits a and b. Vitaly calls a good number excellent, if the sum of its digits is a good number.\n\nFor example, let's say that Vitaly's favourite digits are 1 and 3, then number 12 isn't good and numbers 13 or 311 are. Also, number 111 is excellent and number 11 isn't. \n\nNow Vitaly is wondering, how many excellent numbers of length exactly n are there. As this number can be rather large, he asks you to count the remainder after dividing it by 1000000007 (109 + 7).\n\nA number's length is the number of digits in its decimal representation without leading zeroes.\n\nInput\n\nThe first line contains three integers: a, b, n (1 \u2264 a < b \u2264 9, 1 \u2264 n \u2264 106).\n\nOutput\n\nPrint a single integer \u2014 the answer to the problem modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n1 3 3\n\n\nOutput\n\n1\n\n\nInput\n\n2 3 10\n\n\nOutput\n\n165", "solution": "MOD=10**9+7\n\na,b,n=list(map(int,input().strip().split(' ')))\n#there are i a's. n-i b's\ndef check(a,b,x):\n    temp=x%10\n    if temp!=a and temp!=b:\n        return 0\n    while(x>0):\n        temp=x%10\n        if temp!=a and temp!=b:\n            return 0\n        x=x//10\n    return 1    \n\nfact=[1]\ninfact=[1]\ntemp=1\nintemp=1\nfor i in range(1,n+1):\n    temp*=i\n    #intemp*=pow(i,MOD-2,MOD)\n    temp%=MOD\n    #intemp%=MOD\n    fact+=[temp]\n    #infact+=[intemp]\n    \ndef binom(a,b):\n    MOD=10**9+7\n    if b==0:\n        return 1\n    else:\n        temp=pow(fact[a-b]*fact[b],MOD-2,MOD)*fact[a]\n        return temp%MOD\n        \n        \n        \n    \n    \ntotal=0    \nfor i in range(n+1):\n    temp=i*a+(n-i)*b\n    if check(a,b,temp)==1:\n        total+=binom(n,i)\n        total%=MOD\n#total*=fact[a]        \nprint(total%MOD)      ", "difficulty": 9, "public_tests": {"input": ["1 3 3\n", "2 3 10\n"], "output": ["1\n", "165\n"]}, "private_tests": {"input": ["2 5 53049\n", "8 9 111111\n", "8 9 999999\n", "6 9 1\n", "2 4 88193\n", "5 9 997693\n", "1 6 997695\n", "6 7 78755\n", "2 6 32377\n", "4 6 11808\n", "4 8 11857\n", "3 8 1000000\n", "4 9 104671\n", "1 5 997694\n", "1 2 1000000\n", "7 9 999999\n", "1 8 265\n", "3 5 80791\n", "7 8 2\n", "2 8 999999\n", "3 4 11028\n", "8 9 1000000\n", "1 4 37226\n", "6 8 14215\n", "1 2 11857\n", "3 6 1000000\n", "5 8 997690\n", "1 7 49055\n", "1 3 10785\n", "3 9 37413\n"], "output": ["259705254\n", "900401372\n", "447886447\n", "2\n", "999976846\n", "0\n", "0\n", "0\n", "887598327\n", "999925731\n", "999991923\n", "0\n", "329390901\n", "0\n", "786609214\n", "53911803\n", "461320265\n", "999993599\n", "0\n", "0\n", "461668105\n", "573697309\n", "999970594\n", "651581472\n", "999991923\n", "786609214\n", "21735480\n", "461364774\n", "999952603\n", "461358757\n"]}, "generated_tests": {"input": ["2 5 51373\n", "3 9 111111\n", "1 5 80791\n", "1 4 31107\n", "1 2 12116\n", "1 2 10785\n", "6 9 95048\n", "1 2 1488\n", "6 9 111110\n", "8 9 111110\n", "1 3 1479\n", "1 6 14636\n", "8 9 101110\n", "8 9 101010\n", "1 3 57\n", "2 6 1807\n", "8 9 001010\n", "2 6 3047\n", "2 5 49722\n", "8 9 111100\n", "1 5 997695\n", "4 8 10586\n", "7 8 1\n", "4 8 999999\n", "2 8 88193\n", "1 7 997695\n", "6 7 142437\n", "1 6 32377\n", "4 9 95048\n", "4 9 999999\n", "1 8 19\n", "3 8 2\n", "6 8 19738\n", "5 8 63560\n", "6 9 37413\n", "1 4 3\n", "2 5 35689\n", "6 9 111111\n", "2 8 81781\n", "1 8 997695\n", "3 7 142437\n", "2 5 80791\n", "1 4 10785\n", "1 6 3\n", "2 8 122707\n", "8 9 95048\n", "1 3 1488\n", "1 6 10785\n", "1 7 3\n", "3 8 122707\n", "1 7 2\n", "1 3 32\n", "1 6 1807\n", "2 7 2\n", "4 6 3047\n", "4 6 4349\n", "2 4 36131\n", "6 8 78755\n", "2 6 22406\n", "3 5 1000000\n", "4 9 106900\n", "1 6 997694\n", "2 9 999999\n", "2 8 265\n", "1 5 37226\n", "6 8 23047\n", "1 4 11857\n"], "output": ["0\n", "900401372\n", "351776803\n", "847062654\n", "752464364\n", "262606249\n", "603625272\n", "209670777\n", "409560629\n", "240542126\n", "381321562\n", "69103249\n", "819164555\n", "866478142\n", "577536663\n", "656488091\n", "45622508\n", "992149963\n", "358556428\n", "653756649\n", "692685110\n", "473431255\n", "2\n", "5395241\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "900401372\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:  \n   Compute the sum of binomial coefficients C(n, i) for all i such that the linear combination i\u00b7a + (n\u2013i)\u00b7b, when written in base 10, uses only the two digits a and b, all taken modulo 10^9+7.\n\n2. Core algorithmic approach:  \n   - Enumerate i from 0 to n in O(n).  \n   - For each i, form S = i\u00b7a + (n\u2013i)\u00b7b, check its decimal digits in O(log\u2009S).  \n   - Precompute factorials up to n in O(n) and use Fermat\u2019s little theorem to compute binomial coefficients C(n, i) in O(log\u2009MOD) per query.  \n   Overall this is a brute-force sweep combined with modular combinatorics.\n\n3. Reusable components:  \n   a. Factorial and inverse-factorial precomputation for fast C(n, k) mod M.  \n   b. Digit-validation function that tests whether all digits of a number belong to a given two-element set.  \n   c. Modular exponentiation for computing modular inverses via Fermat\u2019s little theorem."}
{"name": "938_E. Max History", "description": "You are given an array a of length n. We define fa the following way:\n\n  * Initially fa = 0, M = 1; \n  * for every 2 \u2264 i \u2264 n if aM < ai then we set fa = fa + aM and then set M = i. \n\n\n\nCalculate the sum of fa over all n! permutations of the array a modulo 109 + 7.\n\nNote: two elements are considered different if their indices differ, so for every array a there are exactly n! permutations.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 1 000 000) \u2014 the size of array a.\n\nSecond line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 109).\n\nOutput\n\nPrint the only integer, the sum of fa over all n! permutations of the array a modulo 109 + 7.\n\nExamples\n\nInput\n\n2\n1 3\n\n\nOutput\n\n1\n\nInput\n\n3\n1 1 2\n\n\nOutput\n\n4\n\nNote\n\nFor the second example all the permutations are:\n\n  * p = [1, 2, 3] : fa is equal to 1; \n  * p = [1, 3, 2] : fa is equal to 1; \n  * p = [2, 1, 3] : fa is equal to 1; \n  * p = [2, 3, 1] : fa is equal to 1; \n  * p = [3, 1, 2] : fa is equal to 0; \n  * p = [3, 2, 1] : fa is equal to 0. \n\n\n\nWhere p is the array of the indices of initial array a. The sum of fa is equal to 4.", "solution": "\nimport atexit\nimport io\nimport sys\n\n# IO Buffering\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n    \n    \ndef main():\n    n = int(input())\n    a = sorted(int(x) for x in input().split())\n\n    factorial = [1] * n\n    # perm_n[a] = P(n, a) = n!/(n-a)!\n    perm_n = [1] * n\n    for i in range(1, n):\n        factorial[i] = factorial[i - 1] * i % 1000000007\n        perm_n[i] = perm_n[i - 1] * (n - i + 1) % 1000000007\n    \n    ans = 0\n    l = 0\n    for i in range(n):\n        if a[i] == a[-1]: \n            break\n        if a[i] > a[i - 1]:\n            l = i\n        ans += a[i] * perm_n[l] * factorial[n - l - 1]\n\n    print(ans % 1000000007)\n            \n        \nif __name__ == '__main__':\n    main()", "difficulty": 11, "public_tests": {"input": ["2\n1 3\n", "3\n1 1 2\n"], "output": ["1\n", "4\n"]}, "private_tests": {"input": ["7\n177679021 237356752 791250000 455912656 693129227 678510224 60382864\n", "1\n364489807\n", "1\n194945396\n", "3\n855856619 518546431 920370158\n", "4\n1 1 8 10\n", "9\n25401015 88843847 702650194 306965770 57623156 571088345 835502151 56113403 116176210\n", "8\n8 7 5 4 6 6 6 6\n", "7\n686312223 948248999 138090108 566544521 711825575 414057105 925454439\n", "1\n911130621\n", "9\n347223417 807654168 573530036 826123287 366028010 257025851 15406743 784063803 132844347\n", "5\n516767827 377951584 355810087 196333905 38926793\n", "8\n1 2 3 9 100 100 100 100\n", "7\n8134640 667059306 8969950 85702040 20230430 99994612 105359016\n", "6\n1 4 5 2 3 3\n"], "output": ["14393405\n", "0\n", "0\n", "604662698\n", "108\n", "168126961\n", "351360\n", "75238511\n", "0\n", "932879531\n", "733758401\n", "109296\n", "264207095\n", "2928\n"]}, "generated_tests": {"input": ["7\n177679021 237356752 791250000 455912656 841604690 678510224 60382864\n", "1\n259638489\n", "3\n855856619 20186701 920370158\n", "9\n25401015 73818465 702650194 306965770 57623156 571088345 835502151 56113403 116176210\n", "8\n8 7 1 4 6 6 6 6\n", "7\n686312223 860487221 138090108 566544521 711825575 414057105 925454439\n", "9\n347223417 807654168 573530036 826123287 366028010 257025851 15406743 784063803 138878790\n", "5\n516767827 377951584 591624030 196333905 38926793\n", "8\n1 2 3 9 101 100 100 100\n", "7\n8134640 667059306 8969950 85702040 20230430 32975468 105359016\n", "2\n1 6\n", "3\n1 2 2\n", "7\n177679021 237356752 791250000 455912656 252623940 678510224 60382864\n", "3\n365202026 20186701 920370158\n", "9\n32816432 73818465 702650194 306965770 57623156 571088345 835502151 56113403 116176210\n", "8\n8 14 1 4 6 6 6 6\n", "7\n686312223 860487221 138090108 566544521 264678358 414057105 925454439\n", "9\n347223417 807654168 573530036 826123287 366028010 257025851 15406743 784063803 17097395\n", "5\n181829452 377951584 591624030 196333905 38926793\n", "7\n8134640 667059306 8969950 18837819 20230430 32975468 105359016\n", "7\n177679021 237356752 791250000 455912656 469002698 678510224 60382864\n", "9\n32816432 73818465 702650194 260572686 57623156 571088345 835502151 56113403 116176210\n", "8\n8 14 1 6 6 6 6 6\n", "9\n347223417 807654168 573530036 826123287 192896713 257025851 15406743 784063803 17097395\n", "5\n181829452 167573432 591624030 196333905 38926793\n", "7\n8134640 667059306 8969950 18837819 20230430 32975468 162246460\n", "3\n1 2 4\n", "7\n177679021 237356752 791250000 455912656 111364163 678510224 60382864\n", "9\n32816432 73818465 599166635 260572686 57623156 571088345 835502151 56113403 116176210\n", "8\n8 14 1 6 3 6 6 6\n", "9\n347223417 807654168 573530036 826123287 192896713 67821536 15406743 784063803 17097395\n", "5\n181829452 167573432 591624030 196333905 11633729\n", "7\n8134640 667059306 8969950 18837819 30507337 32975468 162246460\n", "3\n1 1 4\n", "7\n177679021 237356752 791250000 455912656 111364163 678510224 52447612\n", "9\n32816432 73818465 599166635 260572686 57623156 571088345 835502151 56113403 103679458\n", "8\n8 14 1 6 3 10 6 6\n", "7\n177679021 237356752 791250000 455912656 111364163 154342730 52447612\n", "1\n217004320\n", "1\n1204680046\n", "1\n313856026\n", "1\n270649662\n", "1\n319361626\n", "2\n1 9\n", "3\n2 2 2\n", "1\n399976075\n", "1\n76309500\n", "1\n491259433\n", "1\n57960544\n", "1\n110281016\n", "1\n858225968\n", "1\n11400154\n", "1\n81200755\n", "1\n299232125\n", "5\n181829452 167573432 293381235 196333905 11633729\n", "7\n8134640 816506410 8969950 18837819 30507337 32975468 162246460\n", "1\n4168780\n", "1\n49018090\n"], "output": ["278739636\n", "0\n", "607943245\n", "433029964\n", "330480\n", "357850299\n", "655212093\n", "948392798\n", "3133296\n", "817206052\n", "1\n", "2\n", "66814114\n", "135979473\n", "422641311\n", "350640\n", "402654922\n", "651173561\n", "919577580\n", "774066066\n", "201864888\n", "642090294\n", "339120\n", "285797401\n", "14658197\n", "130423938\n", "8\n", "970524618\n", "585276766\n", "344880\n", "858428022\n", "359624668\n", "79326667\n", "4\n", "257143213\n", "621009963\n", "452400\n", "420437934\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "359624668\n", "79326667\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:  \n   Compute the sum of input values, each multiplied by a combinatorial weight derived from the number of ways to arrange the remaining elements, all under a large prime modulus.  \n\n2. Core algorithmic approach:  \n   Precompute factorials and partial permutation counts in O(n), sort the input, then make a single O(n) pass to accumulate the weighted sum using these precomputed values.  \n\n3. Reusable components:  \n   - Factorial precomputation mod M: building an array factorial[i] = i! % M in linear time.  \n   - Partial permutation (P(n, k)) precomputation: computing perm_n[k] = n!/(n\u2013k)! % M up to k = n\u20131.  \n   - Single-pass accumulation over sorted data: combining precomputed combinatorial coefficients with input values to form a weighted sum."}
{"name": "1444_B. Divide and Sum", "description": "You are given an array a of length 2n. Consider a partition of array a into two subsequences p and q of length n each (each element of array a should be in exactly one subsequence: either in p or in q).\n\nLet's sort p in non-decreasing order, and q in non-increasing order, we can denote the sorted versions by x and y, respectively. Then the cost of a partition is defined as f(p, q) = \u2211_{i = 1}^n |x_i - y_i|.\n\nFind the sum of f(p, q) over all correct partitions of array a. Since the answer might be too big, print its remainder modulo 998244353.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 150 000).\n\nThe second line contains 2n integers a_1, a_2, \u2026, a_{2n} (1 \u2264 a_i \u2264 10^9) \u2014 elements of array a.\n\nOutput\n\nPrint one integer \u2014 the answer to the problem, modulo 998244353.\n\nExamples\n\nInput\n\n\n1\n1 4\n\n\nOutput\n\n\n6\n\nInput\n\n\n2\n2 1 2 1\n\n\nOutput\n\n\n12\n\nInput\n\n\n3\n2 2 2 2 2 2\n\n\nOutput\n\n\n0\n\nInput\n\n\n5\n13 8 35 94 9284 34 54 69 123 846\n\n\nOutput\n\n\n2588544\n\nNote\n\nTwo partitions of an array are considered different if the sets of indices of elements included in the subsequence p are different.\n\nIn the first example, there are two correct partitions of the array a:\n\n  1. p = [1], q = [4], then x = [1], y = [4], f(p, q) = |1 - 4| = 3; \n  2. p = [4], q = [1], then x = [4], y = [1], f(p, q) = |4 - 1| = 3. \n\n\n\nIn the second example, there are six valid partitions of the array a: \n\n  1. p = [2, 1], q = [2, 1] (elements with indices 1 and 2 in the original array are selected in the subsequence p); \n  2. p = [2, 2], q = [1, 1]; \n  3. p = [2, 1], q = [1, 2] (elements with indices 1 and 4 are selected in the subsequence p); \n  4. p = [1, 2], q = [2, 1]; \n  5. p = [1, 1], q = [2, 2]; \n  6. p = [2, 1], q = [2, 1] (elements with indices 3 and 4 are selected in the subsequence p). ", "solution": "n=int(input())\na=list(map(int,input().split()))\nmod=998244353\ndef ncr(n, r, p):\n    # initialize numerator\n    # and denominator\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den,\n                      p - 2, p)) % p\na.sort()\nprint((ncr(2*n,n,mod)*(sum(a[n:])-sum(a[0:n])))%mod)", "difficulty": 8, "public_tests": {"input": ["1\n1 4\n", "3\n2 2 2 2 2 2\n", "5\n13 8 35 94 9284 34 54 69 123 846\n", "2\n2 1 2 1\n"], "output": ["6\n", "0\n", "2588544\n", "12\n"]}, "private_tests": {"input": ["1\n2 5\n", "10\n1 1 1 1 1 1 1 1 1 1 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n", "7\n2 5 6 25 22 21 7 9 7 22 25 25 22 24\n", "16\n998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363\n", "4\n4 9 5 13 5 6 5 13\n", "5\n2 7 14 11 14 15 3 11 7 16\n"], "output": ["6\n", "365420863\n", "370656\n", "633087063\n", "1540\n", "10080\n"]}, "generated_tests": {"input": ["1\n3 5\n", "10\n1 1 1 1 1 1 1 0 1 1 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n", "7\n2 5 6 25 22 21 7 9 7 5 25 25 22 24\n", "16\n998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 1483557929 998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363\n", "4\n4 9 5 13 5 6 5 18\n", "5\n2 7 14 11 14 29 3 11 7 16\n", "1\n1 6\n", "3\n2 2 1 2 2 2\n", "5\n13 8 35 94 9284 40 54 69 123 846\n", "2\n4 1 2 1\n", "1\n4 5\n", "10\n1 1 1 1 1 1 1 0 1 1 1000000000 1000000000 1000000000 1000000000 1000000100 1000000000 1000000000 1000000000 1000000000 1000000000\n", "7\n2 5 6 25 22 21 7 9 7 5 25 21 22 24\n", "16\n998244362 998244362 998244362 998244362 998244362 998244362 998244362 998244362 1483557929 998244362 998244362 356870606 998244362 998244362 998244362 998244362 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363\n", "4\n4 9 5 18 5 6 5 18\n", "5\n2 7 14 11 14 10 3 11 7 16\n", "1\n1 9\n", "3\n2 2 1 2 2 0\n", "5\n13 8 35 94 9284 8 54 69 123 846\n", "2\n4 2 2 1\n", "10\n1 1 1 1 1 1 1 0 1 1 1000000000 1000000000 1000000000 1000000000 1000000100 1000000000 1000000000 1000000000 1000000000 1100000000\n", "7\n2 5 6 25 22 26 7 9 7 5 25 21 22 24\n", "16\n998244362 998244362 1545401713 998244362 998244362 998244362 998244362 998244362 1483557929 998244362 998244362 356870606 998244362 998244362 998244362 998244362 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363\n", "4\n4 9 5 18 5 6 5 20\n", "5\n2 1 14 11 14 10 3 11 7 16\n", "3\n4 2 1 2 2 0\n", "5\n13 8 35 94 11510 8 54 69 123 846\n", "2\n4 1 2 0\n", "1\n1 7\n", "10\n1 1 1 1 1 1 1 0 0 1 1000000000 1000000000 1000000000 1000000000 1000000100 1000000000 1000000000 1000000000 1000000000 1100000000\n", "7\n2 5 6 25 22 26 7 9 7 5 25 0 22 24\n", "16\n998244362 998244362 1545401713 998244362 998244362 998244362 998244362 998244362 1483557929 998244362 998244362 356870606 998244362 998244362 998244362 998244362 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 1290068308 998244363 998244363 998244363\n", "4\n4 2 5 18 5 6 5 20\n", "5\n2 1 13 11 14 10 3 11 7 16\n", "1\n1 1\n", "3\n4 1 1 2 2 0\n", "5\n13 8 35 94 11510 8 54 69 123 598\n", "1\n1 5\n", "10\n1 1 1 0 1 1 1 0 0 1 1000000000 1000000000 1000000000 1000000000 1000000100 1000000000 1000000000 1000000000 1000000000 1100000000\n", "7\n2 5 6 25 22 26 7 9 7 5 25 0 8 24\n", "16\n998244362 998244362 1545401713 998244362 998244362 998244362 998244362 998244362 1483557929 998244362 998244362 356870606 998244362 998244362 998244362 998244362 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 1747211236 998244363 998244363 998244363\n", "4\n4 2 5 18 5 6 7 20\n", "5\n2 1 13 11 18 10 3 11 7 16\n", "3\n4 1 0 2 2 0\n", "5\n13 8 35 94 11510 8 54 46 123 598\n", "10\n1 1 1 0 1 1 1 0 0 1 1000000000 1000000000 1001000000 1000000000 1000000100 1000000000 1000000000 1000000000 1000000000 1100000000\n", "7\n2 5 6 25 22 26 7 9 7 5 25 0 8 8\n", "16\n998244362 998244362 1545401713 998244362 998244362 998244362 998244362 998244362 1483557929 998244362 998244362 356870606 998244362 998244362 998244362 998244362 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 998244363 885560578 998244363 1747211236 998244363 998244363 998244363\n", "4\n4 2 1 18 5 6 7 20\n", "3\n4 1 -1 2 2 0\n", "5\n13 8 35 147 11510 8 54 46 123 598\n", "10\n1 1 1 0 1 1 1 0 0 1 1000000000 1000000000 1001000000 1000000000 1001000100 1000000000 1000000000 1000000000 1000000000 1100000000\n", "7\n2 5 6 25 22 26 7 9 6 5 25 0 8 8\n", "4\n4 2 1 18 5 6 7 36\n", "5\n2 1 13 11 14 10 3 11 7 13\n", "3\n7 1 -1 2 2 0\n", "5\n13 8 35 147 13403 8 54 46 123 598\n", "2\n1 3 4 0\n", "1\n2 16\n", "10\n1 1 1 0 1 1 1 0 0 1 1000000000 1000000000 1001000000 1000000000 1001000100 1000000000 1000000000 1000000000 1000000000 1100100000\n", "7\n2 5 6 25 22 28 7 9 6 5 25 0 8 8\n", "4\n4 2 1 17 5 6 7 36\n", "5\n0 1 13 11 14 10 3 11 7 13\n", "3\n7 1 -1 2 2 1\n", "5\n13 8 38 147 13403 8 54 46 123 598\n", "2\n0 3 4 0\n", "1\n3 16\n", "10\n1 1 1 0 1 1 1 0 0 1 1000100000 1000000000 1001000000 1000000000 1001000100 1000000000 1000000000 1000000000 1000000000 1100100000\n", "7\n2 2 6 25 22 28 7 9 6 5 25 0 8 8\n", "5\n0 1 23 11 14 10 3 11 7 13\n", "3\n7 1 -1 2 4 1\n", "5\n13 13 38 147 13403 8 54 46 123 598\n", "10\n1 1 0 0 1 1 1 0 0 1 1000100000 1000000000 1001000000 1000000000 1001000100 1000000000 1000000000 1000000000 1000000000 1100100000\n", "7\n2 2 6 25 22 28 7 9 12 5 25 0 8 8\n", "4\n2 2 1 17 5 6 7 9\n", "1\n4 9\n", "1\n1 3\n", "2\n4 2 2 0\n", "1\n2 1\n", "2\n4 3 2 0\n", "1\n2 4\n", "5\n2 1 13 11 18 10 3 11 7 13\n", "1\n3 1\n", "2\n4 3 4 0\n", "1\n2 8\n", "1\n2 0\n", "4\n4 2 1 17 5 6 7 9\n", "1\n3 4\n"], "output": ["4\n", "365605619\n", "422136\n", "399043677\n", "1890\n", "13608\n", "10\n", "20\n", "2587032\n", "24\n", "2\n", "384081219\n", "408408\n", "253139387\n", "2240\n", "9324\n", "16\n", "60\n", "2595096\n", "18\n", "477595895\n", "425568\n", "420742322\n", "2380\n", "10836\n", "100\n", "3156048\n", "30\n", "12\n", "477780651\n", "415272\n", "135573922\n", "2310\n", "10584\n", "0\n", "120\n", "3093552\n", "8\n", "477965407\n", "367224\n", "92731200\n", "2450\n", "11592\n", "140\n", "3091788\n", "558760102\n", "312312\n", "170572342\n", "2730\n", "160\n", "3105144\n", "639554797\n", "315744\n", "3850\n", "9828\n", "220\n", "3582180\n", "36\n", "28\n", "148512090\n", "322608\n", "3780\n", "10332\n", "200\n", "3581424\n", "42\n", "26\n", "655713736\n", "332904\n", "12852\n", "240\n", "3580164\n", "655898492\n", "339768\n", "2030\n", "10\n", "4\n", "24\n", "2\n", "30\n", "4\n", "10836\n", "4\n", "30\n", "12\n", "4\n", "1890\n", "2\n"]}, "short_description": "1. One-sentence summary:  \nCompute the modular-weighted difference between the sums of the larger and smaller halves of a list, scaled by a central binomial coefficient.\n\n2. Core algorithmic approach:  \n- Sorting (O(n log n)) to partition the array into two halves by value  \n- Direct computation of nCr modulo a prime using an iterative numerator/denominator loop plus Fermat\u2019s little-theorem for modular inverses\n\n3. Reusable components:  \n- A generic nCr_mod(n, r, p) function that computes binomial coefficients mod p in O(r) time using modular inverses  \n- Pattern of sorting an array and using prefix/suffix sums (or two-sum difference) to separate contributions of two subarrays  \n- Modular arithmetic utilities (modular multiplication, modular exponentiation for inverses)"}
{"name": "327_C. Magic Five", "description": "There is a long plate s containing n digits. Iahub wants to delete some digits (possibly none, but he is not allowed to delete all the digits) to form his \"magic number\" on the plate, a number that is divisible by 5. Note that, the resulting number may contain leading zeros.\n\nNow Iahub wants to count the number of ways he can obtain magic number, modulo 1000000007 (109 + 7). Two ways are different, if the set of deleted positions in s differs.\n\nLook at the input part of the statement, s is given in a special form.\n\nInput\n\nIn the first line you're given a string a (1 \u2264 |a| \u2264 105), containing digits only. In the second line you're given an integer k (1 \u2264 k \u2264 109). The plate s is formed by concatenating k copies of a together. That is n = |a|\u00b7k.\n\nOutput\n\nPrint a single integer \u2014 the required number of ways modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n1256\n1\n\n\nOutput\n\n4\n\n\nInput\n\n13990\n2\n\n\nOutput\n\n528\n\n\nInput\n\n555\n2\n\n\nOutput\n\n63\n\nNote\n\nIn the first case, there are four possible ways to make a number that is divisible by 5: 5, 15, 25 and 125.\n\nIn the second case, remember to concatenate the copies of a. The actual plate is 1399013990.\n\nIn the third case, except deleting all digits, any choice will do. Therefore there are 26 - 1 = 63 possible ways to delete digits.", "solution": "mod = 1000000007\n\n#gcd(a, m) = 1\ndef inv_mod(a, m):\n    a %= m\n    return pow(a, m-2, m)\n\n\na = input()\nk = int(input())\nt = len(a)\nd = 0\nfor i, c in enumerate(a):\n    if not int(c) % 5:\n        d += pow(2, i, mod)\n        d %= mod\nprint(d*(pow(2, (k*t)%(mod-1), mod)-1)*inv_mod(pow(2, t, mod)-1, mod)%mod)\n", "difficulty": 9, "public_tests": {"input": ["1256\n1\n", "555\n2\n", "13990\n2\n"], "output": ["4", "63", "528"]}, "private_tests": {"input": ["079797897977\n1\n", "205831218776360805549796263726315728152440389522084825015113219980083245807721536032762703389\n161\n", "0\n1000000000\n", "14\n178\n", "27755776656210607832788619414635535178188775623838313967013958143619017005079991285469853503718562504927535176713879737569375166451462839457844835806559098448980069427607\n151\n", "28626813825922172933379733204622160613220115755143268169598722697537715419\n184\n", "58761716080256287618526160263668449282855983776878138369871377531384\n100\n"], "output": ["1", "97770312", "140625000", "0", "319271478", "43220279", "48078375"]}, "generated_tests": {"input": ["205831218776360805549796263726315728152440389522084825015113219980083245807721536032762703389\n252\n", "0\n1000000010\n", "14\n210\n", "27755776656210607832788619414635535178188775623838313967013958143619017005079991285469853503718562504927535176713879737569375166451462839457844835806559098448980069427607\n240\n", "28626813825922172933379733204622160613220115755143268169598722697537715419\n339\n", "58761716080256287618526160263668449282855983776878138369871377531384\n101\n", "555\n4\n", "13990\n3\n", "205831218776360805549796263726315728152440389522084825015113219980083245807721536032762703389\n16\n", "0\n1000000011\n", "27755776656210607832788619414635535178188775623838313967013958143619017005079991285469853503718562504927535176713879737569375166451462839457844835806559098448980069427607\n44\n", "28626813825922172933379733204622160613220115755143268169598722697537715419\n465\n", "58761716080256287618526160263668449282855983776878138369871377531384\n111\n", "555\n6\n", "13990\n4\n", "205831218776360805549796263726315728152440389522084825015113219980083245807721536032762703389\n22\n", "0\n1100000011\n", "27755776656210607832788619414635535178188775623838313967013958143619017005079991285469853503718562504927535176713879737569375166451462839457844835806559098448980069427607\n4\n", "28626813825922172933379733204622160613220115755143268169598722697537715419\n444\n", "58761716080256287618526160263668449282855983776878138369871377531384\n001\n", "555\n10\n", "13990\n7\n", "205831218776360805549796263726315728152440389522084825015113219980083245807721536032762703389\n9\n", "0\n1100010011\n", "27755776656210607832788619414635535178188775623838313967013958143619017005079991285469853503718562504927535176713879737569375166451462839457844835806559098448980069427607\n5\n", "28626813825922172933379733204622160613220115755143268169598722697537715419\n200\n", "555\n19\n", "13990\n6\n", "205831218776360805549796263726315728152440389522084825015113219980083245807721536032762703389\n11\n", "0\n1100011011\n", "27755776656210607832788619414635535178188775623838313967013958143619017005079991285469853503718562504927535176713879737569375166451462839457844835806559098448980069427607\n1\n", "28626813825922172933379733204622160613220115755143268169598722697537715419\n70\n", "555\n27\n", "13990\n1\n", "205831218776360805549796263726315728152440389522084825015113219980083245807721536032762703389\n3\n", "0\n1100011111\n", "27755776656210607832788619414635535178188775623838313967013958143619017005079991285469853503718562504927535176713879737569375166451462839457844835806559098448980069427607\n2\n", "28626813825922172933379733204622160613220115755143268169598722697537715419\n63\n", "555\n9\n", "13990\n5\n", "205831218776360805549796263726315728152440389522084825015113219980083245807721536032762703389\n4\n", "0\n1101011111\n", "28626813825922172933379733204622160613220115755143268169598722697537715419\n16\n", "205831218776360805549796263726315728152440389522084825015113219980083245807721536032762703389\n2\n", "0\n1100111111\n", "28626813825922172933379733204622160613220115755143268169598722697537715419\n7\n", "205831218776360805549796263726315728152440389522084825015113219980083245807721536032762703389\n1\n", "0\n1101111111\n", "0\n1101111110\n", "0\n1101011110\n", "0\n1001011110\n", "0\n1001010110\n", "0\n1001000110\n", "0\n1001100110\n", "0\n1001100100\n", "0\n1101100100\n", "0\n1100100100\n", "0\n1100000100\n", "0\n1110000100\n", "0\n1110100100\n", "0\n1110100110\n", "0\n0110100110\n", "0\n1100100110\n", "0\n1100101100\n", "0\n1000100100\n", "0\n0000100100\n", "0\n0100100100\n", "0\n1100100000\n", "0\n1000100000\n", "0\n0100100000\n", "0\n0100110000\n", "0\n0110110000\n", "0\n0010110000\n", "0\n1010110000\n", "14\n66\n", "14\n95\n", "14\n105\n", "14\n109\n", "14\n104\n", "14\n61\n", "14\n102\n", "14\n22\n", "14\n24\n", "14\n28\n", "14\n2\n", "14\n3\n"], "output": ["227606933\n", "15\n", "0\n", "163555103\n", "917351646\n", "841863330\n", "4095\n", "16912\n", "490909654\n", "31\n", "899303612\n", "116159850\n", "306114982\n", "262143\n", "541200\n", "776034343\n", "823998230\n", "649578386\n", "43422786\n", "447624508\n", "73741816\n", "734058393\n", "626537569\n", "69159314\n", "326604252\n", "32259882\n", "67049562\n", "554189328\n", "156096821\n", "300425010\n", "56672381\n", "804328272\n", "993282279\n", "16\n", "357901807\n", "982924677\n", "195499219\n", "945590732\n", "134217727\n", "17318416\n", "975226265\n", "541831535\n", "558274740\n", "564600885\n", "27601472\n", "912768083\n", "664614570\n", "999940364\n", "999970185\n", "270915767\n", "277184791\n", "471561913\n", "95321696\n", "827708787\n", "520339562\n", "44687528\n", "369863244\n", "848148198\n", "589248297\n", "307868630\n", "257475938\n", "478459983\n", "739960233\n", "601559369\n", "218649636\n", "993576676\n", "671247518\n", "233355348\n", "9495679\n", "934742237\n", "439324396\n", "974050276\n", "39927692\n", "828748875\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:\nCompute the weighted sum of character-based contributions over k repetitions of an input sequence using modular exponentiation and geometric\u2010series aggregation under a prime modulus.\n\n2. Core algorithmic approach:\n\u2013 Modular arithmetic with fast exponentiation (binary exponentiation)  \n\u2013 Closed\u2010form geometric series summation via modular inverse (using Fermat\u2019s little theorem)  \n\n3. Reusable components:\n\u2013 Modular exponentiation function (pow_mod) for computing a^b mod M  \n\u2013 Modular inverse via Fermat\u2019s little theorem (inv_mod)  \n\u2013 Pattern\u2010based accumulation over string indices (scanning with conditionally weighted 2^i) and geometric series merging for repeated concatenations"}
{"name": "964_C. Alternating Sum", "description": "You are given two integers a and b. Moreover, you are given a sequence s_0, s_1, ..., s_{n}. All values in s are integers 1 or -1. It's known that sequence is k-periodic and k divides n+1. In other words, for each k \u2264 i \u2264 n it's satisfied that s_{i} = s_{i - k}.\n\nFind out the non-negative remainder of division of \u2211 _{i=0}^{n} s_{i} a^{n - i} b^{i} by 10^{9} + 9.\n\nNote that the modulo is unusual!\n\nInput\n\nThe first line contains four integers n, a, b and k (1 \u2264 n \u2264 10^{9}, 1 \u2264 a, b \u2264 10^{9}, 1 \u2264 k \u2264 10^{5}).\n\nThe second line contains a sequence of length k consisting of characters '+' and '-'. \n\nIf the i-th character (0-indexed) is '+', then s_{i} = 1, otherwise s_{i} = -1.\n\nNote that only the first k members of the sequence are given, the rest can be obtained using the periodicity property.\n\nOutput\n\nOutput a single integer \u2014 value of given expression modulo 10^{9} + 9.\n\nExamples\n\nInput\n\n2 2 3 3\n+-+\n\n\nOutput\n\n7\n\n\nInput\n\n4 1 5 1\n-\n\n\nOutput\n\n999999228\n\nNote\n\nIn the first example:\n\n(\u2211 _{i=0}^{n} s_{i} a^{n - i} b^{i}) = 2^{2} 3^{0} - 2^{1} 3^{1} + 2^{0} 3^{2} = 7\n\nIn the second example:\n\n(\u2211 _{i=0}^{n} s_{i} a^{n - i} b^{i}) = -1^{4} 5^{0} - 1^{3} 5^{1} - 1^{2} 5^{2} - 1^{1} 5^{3} - 1^{0} 5^{4} = -781 \u2261 999999228 \\pmod{10^{9} + 9}.", "solution": "n, a, b, k = map(int, input().split() )\ns = input()\n\nmod = (int)( 1e9 + 9 )\n\nans = 0\nt = (int)( (n + 1) / k )\n\ndef modInverse(a):\n    return pow(a, mod - 2, mod) \n\ni = 0\nfor ind in range( len(s) ):\n    \n    first = ( pow(a, n - i, mod ) * pow( b, i, mod ) ) % mod\n    num = ( pow( b, k, mod ) * modInverse( pow(a, k, mod) ) ) % mod\n    \n    if ( b >= a ) :\n        den = ( num - 1 + mod ) % mod\n        num = ( pow( num, t, mod ) - 1 + mod ) % mod\n    else:\n       den = ( 1 - num + mod ) % mod\n       num = ( 1 - pow( num, t, mod ) + mod ) % mod\n    \n    if num == 0:\n        temp = ( t * first ) % mod\n    else:\n        temp = ( num * modInverse(den) ) % mod\n        temp = ( temp * first ) % mod\n    \n    if s[ind] == '+':\n        ans = ( ans + temp )%mod\n    elif s[ind] == '-':\n        ans = ( ans - temp + mod ) % mod\n    \n    i += 1\n    if ( i > n ):\n        i = 0\n\nprint (ans)", "difficulty": 9, "public_tests": {"input": ["2 2 3 3\n+-+\n", "4 1 5 1\n-\n"], "output": ["7\n", "999999228\n"]}, "private_tests": {"input": ["743329 973758 92942 82\n++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-\n", "403493428 317461491 556701240 1\n-\n", "938449224 59852396 219719125 1\n-\n", "5 1 1 6\n++---+\n", "234179195 430477711 115381398 12\n++++-+-+-+++\n", "397521 174985 279760 1\n+\n", "936810 183454 647048 1\n+\n", "904132655 827386249 118827660 334\n+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-\n", "179358 828426 548710 67\n++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--\n", "691617927 66917103 843055237 8\n--+++---\n", "23047921 621656196 160244047 1\n-\n", "5 2 2 6\n+--++-\n", "3 1 4 4\n+--+\n", "18111 291387 518587 2\n++\n", "289455627 906207104 512692624 154\n-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----\n", "354062556 688076879 786825319 1\n+\n", "1 1 4 2\n-+\n", "379582849 362892355 986900829 50\n++-++---+-+++++--++++--+--++--++-----+------++--+-\n", "116399299 784781190 299072480 5\n++++-\n", "262060935 184120408 148332034 148\n+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---\n", "176799169 363368399 841293419 1\n+\n", "947301 87242 360762 97\n--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----\n", "682074525 289438443 917164266 1\n+\n", "144808247 203038656 166324035 4\n-+-+\n", "477607531 177367565 20080950 2\n++\n", "917751169 330191895 532837377 70\n-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----\n", "608663287 430477711 172252358 8\n-+--+-+-\n", "206671954 13571766 192250278 1\n+\n", "252089413 552678586 938424519 1\n-\n", "613632 812232 482342 1\n-\n", "806038018 740585177 987616107 293\n-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++\n", "231531 250371 921383 28\n++-+------+--+--++++--+-+++-\n", "74709071 801809249 753674746 18\n++++++-+-+---+-+--\n", "649316142 320010793 200197645 1\n-\n", "425583346 814209084 570987274 1\n+\n", "395171426 872478622 193568600 147\n+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--\n", "686653196 115381398 884618610 3\n+-+\n", "75952547 967294208 907708706 252\n++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+\n", "996144 218286 837447 1\n-\n", "258833760 515657142 791267045 1\n-\n", "919350941 654611542 217223605 186\n++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++\n"], "output": ["299311566\n", "936516261\n", "648647459\n", "0\n", "549793323\n", "25679493\n", "523548992\n", "188208979\n", "759716474\n", "147768186\n", "101533009\n", "0\n", "45\n", "724471355\n", "48198216\n", "545304776\n", "3\n", "927469713\n", "754650814\n", "700325386\n", "746494802\n", "405016159\n", "28048785\n", "909066471\n", "928662830\n", "908035409\n", "594681696\n", "717117421\n", "627032736\n", "891965141\n", "441468166\n", "134450934\n", "13414893\n", "323650777\n", "63271171\n", "460881399\n", "542231211\n", "605712499\n", "549104837\n", "935800888\n", "116291420\n"]}, "generated_tests": {"input": ["743329 973758 92942 82\n-+--+-+++++--+----+++-++--+++++++--+--+++++---+-+-++++--+---+++--+----++++-+----++\n", "234179195 748589564 115381398 12\n++++-+-+-+++\n", "233489 174985 279760 1\n+\n", "466477 183454 647048 1\n+\n", "904132655 827386249 102073681 334\n+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-\n", "691617927 66917103 713997558 8\n--+++---\n", "23047921 621656196 29621006 1\n-\n", "5 2 3 6\n+--++-\n", "3 1 3 4\n+--+\n", "18111 348388 518587 2\n++\n", "354062556 1054255809 786825319 1\n+\n", "1 1 7 2\n-+\n", "116399299 784781190 42691342 5\n++++-\n", "262060935 361986642 148332034 148\n+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---\n", "339482574 363368399 841293419 1\n+\n", "947301 87242 423281 97\n--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----\n", "251693083 289438443 917164266 1\n+\n", "477607531 177367565 19679800 2\n++\n", "917751169 330191895 111936581 70\n-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----\n", "206671954 15879272 192250278 1\n+\n", "252089413 1040502703 938424519 1\n-\n", "613632 812232 397692 1\n-\n", "806038018 740585177 58023411 293\n-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++\n", "231531 250371 1625008 28\n++-+------+--+--++++--+-+++-\n", "360438672 320010793 200197645 1\n-\n", "686653196 68780246 884618610 3\n+-+\n", "996144 218286 1268900 1\n-\n", "258833760 985020435 791267045 1\n-\n", "919350941 70135420 217223605 186\n++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++\n", "743329 1539163 92942 82\n-+--+-+++++--+----+++-++--+++++++--+--+++++---+-+-++++--+---+++--+----++++-+----++\n", "261050 174985 279760 1\n+\n", "691617927 6204652 713997558 8\n--+++---\n", "23047921 774449860 29621006 1\n-\n", "18111 348388 987721 2\n++\n", "1 1 5 2\n-+\n", "116399299 784781190 53080584 5\n++++-\n", "262060935 711510633 148332034 148\n+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---\n", "339482574 363368399 971578482 1\n+\n", "947301 87242 504702 97\n--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----\n", "917751169 330191895 89034042 70\n-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----\n", "206671954 15879272 212068294 1\n+\n", "613632 880305 397692 1\n-\n", "360438672 610490411 200197645 1\n-\n", "686653196 68780246 472272443 3\n+-+\n", "996144 218286 2374124 1\n-\n", "279538 174985 279760 1\n+\n", "691617927 9544658 713997558 8\n--+++---\n", "16839955 774449860 29621006 1\n-\n", "1 1 6 2\n-+\n", "262060935 711510633 292326579 148\n+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---\n", "947301 87242 504702 97\n-----+-++-++--+-++-+-----++--+-++-+-----++-++-+--+++++--++++--+++---+++--++--++-++--++-+++--+++--\n", "206671954 13390731 212068294 1\n+\n", "313050 880305 397692 1\n-\n", "513761735 610490411 200197645 1\n-\n", "686653196 68780246 708913819 3\n+-+\n", "996144 218286 4163287 1\n-\n", "279538 174985 250581 1\n+\n", "691617927 9544658 577608497 8\n--+++---\n", "21036614 774449860 29621006 1\n-\n", "1 1 11 2\n-+\n", "262060935 711510633 398276337 148\n+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---\n", "513761735 374210155 200197645 1\n-\n", "896854 218286 4163287 1\n-\n"], "output": ["155827399\n", "3874978\n", "46667029\n", "943489596\n", "641058556\n", "63581145\n", "160185301\n", "999999948\n", "16\n", "726888952\n", "819625340\n", "6\n", "541653355\n", "475928820\n", "886577943\n", "549145383\n", "900618918\n", "165265451\n", "69020545\n", "307832369\n", "517939249\n", "338595553\n", "138829096\n", "375909679\n", "320817968\n", "771341083\n", "920278028\n", "135970761\n", "816105971\n", "374394947\n", "351646646\n", "120064779\n", "997531267\n", "81952747\n", "4\n", "633782851\n", "546060497\n", "509906892\n", "76770857\n", "449626921\n", "65800377\n", "203147584\n", "664544888\n", "979795215\n", "791922394\n", "7373717\n", "533625714\n", "933737546\n", "5\n", "624334688\n", "168572262\n", "477383557\n", "56649270\n", "162629812\n", "497669960\n", "629106237\n", "216940435\n", "301143178\n", "937865201\n", "10\n", "83509885\n", "711451525\n", "322186067\n"]}, "short_description": "1. One-sentence summary  \nCompute a weighted cyclic sum of sequence elements where weights follow a power-product pattern and are aggregated in blocks via a geometric-series formula under a large prime modulus.\n\n2. Core algorithmic approach  \nUse modular arithmetic (fast exponentiation and modular inverses) to evaluate and sum a geometric progression of term weights efficiently, handling sign contributions from the input pattern in O(n\u2009+\u2009log\u2009mod) time.\n\n3. Reusable components  \n- Modular exponentiation routine (pow(base, exp, mod)) for fast powers under a modulus.  \n- Modular inverse via Fermat\u2019s little theorem (modInverse).  \n- Geometric series summation template: sum_{j=0..t-1} r^j = (r^t\u20131)/(r\u20131) mod M, with branches for r\u22601 and r=1, all in modular arithmetic."}
{"name": "1228_E. Another Filling the Grid", "description": "You have n \u00d7 n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.\n\n  * All numbers in the grid should be between 1 and k inclusive. \n  * Minimum number of the i-th row is 1 (1 \u2264 i \u2264 n). \n  * Minimum number of the j-th column is 1 (1 \u2264 j \u2264 n). \n\n\n\nFind the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).\n\n<image> These are the examples of valid and invalid grid when n=k=2. \n\nInput\n\nThe only line contains two integers n and k (1 \u2264 n \u2264 250, 1 \u2264 k \u2264 10^{9}).\n\nOutput\n\nPrint the answer modulo (10^{9} + 7).\n\nExamples\n\nInput\n\n\n2 2\n\n\nOutput\n\n\n7\n\n\nInput\n\n\n123 456789\n\n\nOutput\n\n\n689974806\n\nNote\n\nIn the first example, following 7 cases are possible.\n\n<image>\n\nIn the second example, make sure you print the answer modulo (10^{9} + 7).", "solution": "def Solve(n,k):\n    mod = 10**9+7\n    max_n = 10**4\n#precalcular los factoriales\n    fac = [1] + [0] * max_n\n    fac_i = [1] + [0] * max_n\n    for i in range(1,n+1):\n        fac[i] = fac[i-1] * (i) % mod\n        fac_i[i] = fac_i[i- 1] * pow(i,mod-2,mod) % mod\n\n#calculo de las combinaciones con factorial inverso\n    def mod_nCr(n,r):\n        if n==0 and r==0:\n            return 1\n        if n<r or n<0:\n            return 0\n        temp = fac_i[n-r] * fac_i[r] % mod\n        return temp * fac[n] % mod\n\n    ans = 0\n\n    for i in range(n + 1): #nos movemos por las filas o columnas seleccionadas\n        base = pow(k,n-i,mod) * pow(k-1,i,mod) - pow(k-1,n,mod) + mod  #formas de colocar los numeros en las filas o culmnas \n        base % mod\n        val = pow(-1,i) * mod_nCr(n,i) * pow(base,n,mod)    #formas de escoger las i filas o columnas\n        ans += val\n        ans %= mod\n    return ans\n\n    ##el codigo enviado al codeforce aparece debajo de este comentario\nn,k = [int(item) for item in input().split()]\nmod = 10**9+7\nmax_n = 10**4\n\nfac = [1] + [0] * max_n\nfac_i = [1] + [0] * max_n\nfor i in range(1,n+1):\n    fac[i] = fac[i-1] * (i) % mod\n    fac_i[i] = fac_i[i- 1] * pow(i,mod-2,mod) % mod\n\n\ndef mod_nCr(n,r):\n    if n==0 and r==0:\n        return 1\n    if n<r or n<0:\n        return 0\n    temp = fac_i[n-r] * fac_i[r] % mod\n    return temp * fac[n] % mod\n\nans = 0\n\nfor i in range(n + 1):\n    base = pow(k,n-i,mod) * pow(k-1,i,mod) - pow(k-1,n,mod) + mod\n    base % mod\n    val = pow(-1,i) * mod_nCr(n,i) * pow(base,n,mod)\n    ans += val\n    ans %= mod\n\nprint(ans)\n\n\n", "difficulty": 11, "public_tests": {"input": ["123 456789\n", "2 2\n"], "output": ["689974806\n", "7\n"]}, "private_tests": {"input": ["220 51931060\n", "250 1000000000\n", "236 1\n", "242 558095993\n", "216 639704712\n", "206 1\n", "10 19549\n", "3 212096267\n", "218 325181815\n", "216 104981514\n", "218 548318195\n", "244 315404017\n", "1 3\n", "244 126314049\n", "246 629926913\n", "216 411503551\n", "214 431059147\n", "242 106758452\n", "234 1\n", "242 747185961\n", "242 440836946\n", "3 497285769\n", "208 1\n", "244 833507696\n", "4 221874066\n", "250 1\n", "218 737408162\n", "224 26911790\n", "244 61708858\n", "220 528762598\n", "244 22597665\n"], "output": ["944377763\n", "770503193\n", "1\n", "300047623\n", "319243107\n", "1\n", "843886139\n", "501206544\n", "230476135\n", "943178465\n", "721573920\n", "868949606\n", "1\n", "662993833\n", "283598434\n", "618370501\n", "37643610\n", "437620405\n", "1\n", "365665959\n", "687163955\n", "790515254\n", "1\n", "89218992\n", "274467242\n", "1\n", "720936813\n", "554883010\n", "84446310\n", "944995733\n", "56808536\n"]}, "generated_tests": {"input": ["220 81395950\n", "196 1\n", "216 1142401243\n", "4 19549\n", "3 216616323\n", "183 325181815\n", "218 668534782\n", "100 315404017\n", "49 126314049\n", "246 1140071398\n", "216 388960848\n", "214 607157584\n", "83 747185961\n", "3 271810241\n", "244 474419667\n", "4 431531016\n", "218 889150715\n", "224 29968861\n", "244 91378216\n", "220 351648165\n", "140 22597665\n", "235 456789\n", "4 2\n", "220 79605676\n", "4 34296\n", "3 59999376\n", "88 325181815\n", "100 181008399\n", "49 212814426\n", "102 388960848\n", "214 548300635\n", "97 2\n", "83 1033372186\n", "3 524418059\n", "244 874509430\n", "8 431531016\n", "218 1771958988\n", "1 2\n", "97 1\n", "228 1\n", "46 1\n", "44 1\n", "104 1\n"], "output": ["281327434\n", "1\n", "820247611\n", "974002430\n", "67583283\n", "8628960\n", "672408955\n", "589036231\n", "333917479\n", "783102336\n", "193068070\n", "337299011\n", "807512077\n", "592836578\n", "299304631\n", "146348961\n", "292103475\n", "359472599\n", "517235839\n", "237160245\n", "835674990\n", "440408826\n", "41503\n", "856359001\n", "316048014\n", "372206970\n", "237358085\n", "481861221\n", "648426323\n", "434706994\n", "599119652\n", "585458537\n", "812779188\n", "178318451\n", "853607011\n", "344554313\n", "699159875\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n"]}, "short_description": "1. One-sentence summary  \nCompute a large alternating combinatorial sum of the form \u2211_{i=0}\u207f (\u22121)\u1da6\u00b7C(n,i)\u00b7f(i)\u207f modulo a prime, which arises from an inclusion\u2013exclusion count under global constraints.  \n\n2. Core algorithmic approach  \n- Inclusion\u2013exclusion principle to handle forbidden configurations.  \n- Precomputation of factorials and inverse factorials for O(1) modular binomial coefficients.  \n- Fast modular exponentiation for powering terms under modulus.  \n\n3. Reusable components  \n- Factorial and inverse-factorial arrays plus a mod_nCr(n, r) function for fast binomial coefficients modulo a prime.  \n- Modular exponentiation pattern (pow(base, exp, mod)) to raise numbers to large powers efficiently.  \n- Inclusion\u2013exclusion loop: \u03a3_{i=0}\u207f (\u22121)\u1da6\u00b7C(n,i)\u00b7g(i), a common template for counting with forbidden overlaps."}
{"name": "869_C. The Intriguing Obsession", "description": "\u2014 This is not playing but duty as allies of justice, Nii-chan!\n\n\u2014 Not allies but justice itself, Onii-chan!\n\nWith hands joined, go everywhere at a speed faster than our thoughts! This time, the Fire Sisters \u2014 Karen and Tsukihi \u2014 is heading for somewhere they've never reached \u2014 water-surrounded islands!\n\nThere are three clusters of islands, conveniently coloured red, blue and purple. The clusters consist of a, b and c distinct islands respectively.\n\nBridges have been built between some (possibly all or none) of the islands. A bridge bidirectionally connects two different islands and has length 1. For any two islands of the same colour, either they shouldn't be reached from each other through bridges, or the shortest distance between them is at least 3, apparently in order to prevent oddities from spreading quickly inside a cluster.\n\nThe Fire Sisters are ready for the unknown, but they'd also like to test your courage. And you're here to figure out the number of different ways to build all bridges under the constraints, and give the answer modulo 998 244 353. Two ways are considered different if a pair of islands exist, such that there's a bridge between them in one of them, but not in the other.\n\nInput\n\nThe first and only line of input contains three space-separated integers a, b and c (1 \u2264 a, b, c \u2264 5 000) \u2014 the number of islands in the red, blue and purple clusters, respectively.\n\nOutput\n\nOutput one line containing an integer \u2014 the number of different ways to build bridges, modulo 998 244 353.\n\nExamples\n\nInput\n\n1 1 1\n\n\nOutput\n\n8\n\n\nInput\n\n1 2 2\n\n\nOutput\n\n63\n\n\nInput\n\n1 3 5\n\n\nOutput\n\n3264\n\n\nInput\n\n6 2 9\n\n\nOutput\n\n813023575\n\nNote\n\nIn the first example, there are 3 bridges that can possibly be built, and no setup of bridges violates the restrictions. Thus the answer is 23 = 8.\n\nIn the second example, the upper two structures in the figure below are instances of valid ones, while the lower two are invalid due to the blue and purple clusters, respectively.\n\n<image>", "solution": "a,b,c = list(map(int, input().split(' ')))\n\n\nMOD = 998244353\n\ndef d(a, b):\n\ts = 1\n\tfor i in range(a, b+1):\n\t\ts*=i\n\t\ts%=MOD\n\treturn s\n\n\n\n\ndef cnk(n,k):\n\ts = 1\n\tfor i in range(n-k+1, n+1):\n\t\ts*=i\n\tfor i in range(1,k+1):\n\t\ts/=i\n\treturn s\n\n\ndef factorial(n):\n\ts = 1\n\tfor i in range(1, n+1):\n\t\ts*=i\t\n\treturn s\n\n\n\ndef pow(a, b):\n\tc = 1\n\n\twhile b>0:\n\t\tif b%2==0:\n\t\t\tb//=2\n\t\t\ta *=a\n\t\t\ta%=MOD\n\t\telse:\n\t\t\tb-=1\n\t\t\tc*=a\n\t\t\tc%=MOD\n\treturn c\n\n\ndef inv(i):\n\treturn pow(i, MOD-2)\n\"\"\"\ndef factinv(i):\n\n\treturn 1.0/factorial(i)\n\n\"\"\"\nfi = [1, 1]\ndef sp(n, m):\n\ts = 1\n\td1 = 1\n\td2 = 1\n\t#print(d1,d2,\"!\")\n\tfor i in range(1, n+1):\n\t\td1*=n-i+1\n\t\td2*=m-i+1\n\n\t\t#print(i, d1,d2)\n\t\td1%=MOD\n\t\td2%=MOD\n\t\ts+= d1*d2 *(fi[i]%MOD)\n\t\t#print(d1*d2 *(fi[i]%MOD))\n\t\ts%= MOD\n\n\treturn s\n\n\n\ns = 1\nfor i in range(2, max(a,max(b,c))+1):\n\ts *=i\n\ts %= MOD\n\tfi.append(inv(s))\n\n\nprint((sp(a,b)*sp(a,c)*sp(b,c))%MOD)\n#print(sp(1,2))\n#print(sp(2,2))\n#print()", "difficulty": 9, "public_tests": {"input": ["1 3 5\n", "1 1 1\n", "6 2 9\n", "1 2 2\n"], "output": ["3264\n", "8\n", "813023575\n", "63\n"]}, "private_tests": {"input": ["84 29 61\n", "2048 4096 1024\n", "1 2 3\n", "1171 2989 2853\n", "1158 506 4676\n", "5000 1 1\n", "4756 775 3187\n", "28 47 1\n", "2 1 1\n", "4998 4998 4998\n", "17 46 45\n", "3238 2923 4661\n", "5 9 4\n", "16 8 29\n", "135 14 39\n", "1 1 3\n", "179 856 377\n", "7 3 7\n", "4 2 5\n", "4 1 2\n", "5000 5000 5000\n", "1925 1009 273\n", "9 4 10\n", "4539 2805 2702\n", "94 87 10\n", "4996 1 5000\n"], "output": ["391253501\n", "445542375\n", "156\n", "234725427\n", "6109065\n", "50020002\n", "56242066\n", "517406193\n", "18\n", "259368717\n", "518654435\n", "636587126\n", "661093467\n", "349763770\n", "414849507\n", "32\n", "518957210\n", "807577560\n", "326151\n", "315\n", "986778560\n", "207866159\n", "391175867\n", "356944655\n", "846321893\n", "196902859\n"]}, "generated_tests": {"input": ["84 29 26\n", "2048 3196 1024\n", "1 3 3\n", "1113 2989 2853\n", "1465 506 4676\n", "4446 775 3187\n", "4 47 1\n", "17 46 70\n", "3238 2917 4661\n", "5 11 4\n", "28 8 29\n", "135 24 39\n", "179 856 504\n", "7 3 14\n", "4 2 4\n", "4 1 3\n", "1925 1009 96\n", "9 8 10\n", "4539 3684 2702\n", "94 87 11\n", "1 6 5\n", "1 2 1\n", "2 2 9\n", "84 29 4\n", "2238 3196 1024\n", "2 3 3\n", "1113 2989 102\n", "1465 761 4676\n", "5 47 1\n", "17 46 19\n", "4836 2917 4661\n", "5 11 1\n", "12 8 29\n", "135 6 39\n", "116 856 504\n", "7 3 2\n", "4 2 7\n", "1925 1009 35\n", "9 8 3\n", "1178 3684 2702\n", "94 112 11\n", "84 29 5\n", "2016 3196 1024\n", "3 3 3\n", "1113 281 102\n", "1465 523 4676\n", "5 77 1\n", "17 46 1\n", "4836 2917 256\n", "5 11 2\n", "12 8 31\n", "135 6 18\n", "116 581 504\n", "1925 1009 51\n", "14 8 3\n", "1178 3684 3361\n", "94 112 10\n", "84 57 5\n", "2016 2732 1024\n", "1065 281 102\n", "1465 523 4182\n", "5 97 1\n", "21 46 1\n", "4836 2917 92\n", "5 17 2\n", "12 8 15\n", "135 6 22\n", "116 581 771\n", "1925 1379 51\n", "14 14 3\n", "1178 3684 549\n", "139 112 10\n", "84 22 5\n", "1576 2732 1024\n", "1065 90 102\n", "1687 523 4182\n", "1 97 1\n", "21 46 2\n", "5 17 4\n", "14 8 15\n", "135 10 22\n", "12 581 771\n", "1925 1379 4\n", "14 9 3\n", "139 68 10\n", "84 22 7\n", "1576 3729 1024\n", "1065 36 102\n", "1 43 1\n", "21 46 4\n", "3 3 1\n"], "output": ["392431213\n", "775462088\n", "544\n", "715687120\n", "743631234\n", "834713622\n", "125695087\n", "839057092\n", "951981776\n", "120581650\n", "537816324\n", "101267770\n", "149077147\n", "677610836\n", "92169\n", "1460\n", "179529669\n", "623759324\n", "939957627\n", "643472301\n", "170142\n", "18\n", "57967\n", "302885480\n", "667373874\n", "5746\n", "850541949\n", "280462787\n", "567299141\n", "422024764\n", "230907910\n", "7638912\n", "236981582\n", "514979623\n", "590908129\n", "265278\n", "2347317\n", "812447432\n", "18038510\n", "672638754\n", "451228875\n", "480065138\n", "406632780\n", "39304\n", "265805409\n", "811365519\n", "767898691\n", "806290783\n", "391426637\n", "437433808\n", "828649537\n", "980600397\n", "356772009\n", "580448023\n", "933983923\n", "857278921\n", "381945400\n", "849844453\n", "758115052\n", "18512754\n", "935324020\n", "483171203\n", "191025350\n", "535504252\n", "217553492\n", "184903727\n", "849304952\n", "703643000\n", "462613750\n", "310336652\n", "409062647\n", "37368521\n", "200329432\n", "105578580\n", "119619737\n", "124315537\n", "19208\n", "776605804\n", "277812452\n", "852761588\n", "895125804\n", "975133168\n", "550165137\n", "748368213\n", "269203186\n", "163134056\n", "286359650\n", "886898595\n", "3872\n", "349126068\n", "544\n"]}, "short_description": "1. One-sentence summary  \nCompute, under a fixed prime modulus, a product of three pairwise \u201ccoupling\u201d sums defined by summing over matched\u2010length permutations of the inputs.\n\n2. Core algorithmic approach  \n- Precompute factorials and modular inverses (via Fermat\u2019s little theorem and fast exponentiation).  \n- Evaluate each pairwise sum sp(n,m)=\u2211_{i=0..n} P(n,i)\u00b7P(m,i)/i! in O(min(n,m)) time using running products and stored inverse factorials.  \n- Multiply the three sp values modulo a prime.\n\n3. Reusable components  \n- Fast modular exponentiation (binary exponentiation) and modular inverse via exponentiation to MOD\u20132.  \n- Online factorial and inverse\u2010factorial accumulation arrays for O(1) nCr or P(n, k).  \n- \u201cCoupling\u2010sum\u201d pattern: using two running permutation products and an inverse factorial to compute \u2211P(n,i)P(m,i)/i! in linear time."}
{"name": "285_E. Positions in Permutations", "description": "Permutation p is an ordered set of integers p1, p2, ..., pn, consisting of n distinct positive integers, each of them doesn't exceed n. We'll denote the i-th element of permutation p as pi. We'll call number n the size or the length of permutation p1, p2, ..., pn.\n\nWe'll call position i (1 \u2264 i \u2264 n) in permutation p1, p2, ..., pn good, if |p[i] - i| = 1. Count the number of permutations of size n with exactly k good positions. Print the answer modulo 1000000007 (109 + 7).\n\nInput\n\nThe single line contains two space-separated integers n and k (1 \u2264 n \u2264 1000, 0 \u2264 k \u2264 n).\n\nOutput\n\nPrint the number of permutations of length n with exactly k good positions modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n1 0\n\n\nOutput\n\n1\n\n\nInput\n\n2 1\n\n\nOutput\n\n0\n\n\nInput\n\n3 2\n\n\nOutput\n\n4\n\n\nInput\n\n4 1\n\n\nOutput\n\n6\n\n\nInput\n\n7 4\n\n\nOutput\n\n328\n\nNote\n\nThe only permutation of size 1 has 0 good positions.\n\nPermutation (1, 2) has 0 good positions, and permutation (2, 1) has 2 positions.\n\nPermutations of size 3:\n\n  1. (1, 2, 3) \u2014 0 positions\n  2. <image> \u2014 2 positions\n  3. <image> \u2014 2 positions\n  4. <image> \u2014 2 positions\n  5. <image> \u2014 2 positions\n  6. (3, 2, 1) \u2014 0 positions", "solution": "mod=10**9+7\nn,k=map(int,input().split())\n\nA=[0]*(n+1)\nB=[0]*(n+1)\nC=[0]*(n+1)\nF=[0]*(n+1)\nG=[0]*(n+1)\n\nF[0]=G[0]=1\nfor i in range(1,n+1):\n\tG[i]=F[i]=F[i-1]*i%mod\n\tG[i]=pow(F[i],(mod-2),mod)\n\nfor i in range(0,n):\n\tif i*2>n:\n\t\tbreak\n\tB[i]=(F[n-i]*G[i]*G[n-i*2])%mod\nfor i in range(0,n//2+1):\n\tfor j in range(0,n//2+1):\n\t\tA[i+j]=(A[i+j]+B[i]*B[j])%mod\nfor i in range(0,n+1):\n\tA[i]=A[i]*F[n-i]%mod\nfor i in range(0,n+1):\n\tfor j in range(0,i+1):\n\t\tC[j]=(C[j]+A[i]*F[i]*G[j]*G[i-j]*(1-(i-j)%2*2))%mod\nprint(C[k]%mod)\n", "difficulty": 11, "public_tests": {"input": ["2 1\n", "4 1\n", "7 4\n", "1 0\n", "3 2\n"], "output": ["0\n", "6\n", "328\n", "1\n", "4\n"]}, "private_tests": {"input": ["10 3\n", "7 7\n", "999 300\n", "1000 999\n", "10 0\n", "5 4\n", "1000 900\n", "999 600\n", "1000 998\n", "999 998\n", "999 989\n", "4 2\n", "8 4\n", "3 0\n", "2 2\n", "999 13\n", "999 1\n", "4 3\n", "100 100\n", "3 1\n", "5 1\n", "1000 1\n", "8 5\n", "1000 10\n", "1000 2\n", "13 13\n", "5 5\n", "1000 700\n", "1000 99\n", "999 999\n", "20 0\n", "3 3\n", "999 5\n", "5 3\n", "5 2\n", "1000 1000\n", "5 0\n", "1000 0\n", "999 0\n", "1 1\n", "4 4\n", "1000 500\n", "100 99\n", "2 0\n"], "output": ["614420\n", "0\n", "562270116\n", "249500\n", "543597\n", "9\n", "301804159\n", "553332041\n", "583666213\n", "250000\n", "254295912\n", "10\n", "2658\n", "2\n", "1\n", "740892203\n", "167859862\n", "2\n", "1\n", "0\n", "36\n", "418947603\n", "688\n", "305545369\n", "819706485\n", "0\n", "0\n", "642759746\n", "115316732\n", "0\n", "111008677\n", "0\n", "642835575\n", "12\n", "42\n", "1\n", "21\n", "845393494\n", "184907578\n", "0\n", "1\n", "979041279\n", "2450\n", "1\n"]}, "generated_tests": {"input": ["8 3\n", "999 516\n", "7 0\n", "1000 885\n", "999 802\n", "8 2\n", "8 1\n", "999 22\n", "4 0\n", "1000 9\n", "13 9\n", "12 0\n", "7 3\n", "927 0\n", "1000 472\n", "100 43\n", "6 1\n", "7 1\n", "15 3\n", "999 807\n", "1000 943\n", "8 6\n", "999 32\n", "18 0\n", "1000 737\n", "7 2\n", "15 2\n", "1000 471\n", "859 32\n", "9 2\n", "15 4\n", "1000 287\n", "859 49\n", "9 3\n", "15 6\n", "1000 360\n", "317 49\n", "11 3\n", "15 8\n", "100 49\n", "19 3\n", "15 0\n", "101 49\n", "23 3\n", "15 1\n", "23 6\n", "26 1\n", "36 6\n", "29 6\n", "55 6\n", "14 6\n", "12 6\n", "11 6\n", "16 3\n"], "output": ["6652\n", "96386086\n", "792\n", "844548413\n", "605400727\n", "11596\n", "12360\n", "585029918\n", "5\n", "640785490\n", "160468\n", "70518905\n", "800\n", "879139154\n", "107920686\n", "705684267\n", "226\n", "1568\n", "944784210\n", "483502938\n", "619054191\n", "148\n", "664012533\n", "420008857\n", "394942440\n", "1472\n", "685548933\n", "622922303\n", "401896125\n", "103600\n", "278377117\n", "316697031\n", "504136147\n", "60840\n", "262413825\n", "851292206\n", "531585669\n", "6807408\n", "351933216\n", "438413823\n", "547388806\n", "252399157\n", "20860383\n", "629132399\n", "362660650\n", "54187203\n", "993163341\n", "579499589\n", "414755134\n", "321592380\n", "588780843\n", "2849124\n", "217680\n", "320603049\n"]}, "short_description": "1. One-sentence summary:  \nThis solution computes a specific convolution-based sum of binomial-like coefficients under modular arithmetic, effectively aggregating combinatorial contributions for a given parameter.\n\n2. Core algorithmic approach:  \n\u2013 Precompute factorials and modular inverses (using Fermat\u2019s little theorem) for O(n) binomial coefficient queries.  \n\u2013 Perform two nested O(n\u00b2) convolutions to build intermediate arrays of combinatorial weights.  \n\u2013 Sum weighted combinations with an alternating\u2010sign factor.\n\n3. Reusable components:  \n\u2013 Factorial and inverse\u2010factorial precomputation (F and G arrays) for fast nCr under a prime modulus.  \n\u2013 Naive convolution pattern for two sequences (the double loop accumulating A from B).  \n\u2013 Modular arithmetic utilities, including safe addition/multiplication and power\u2010mod inversion."}
