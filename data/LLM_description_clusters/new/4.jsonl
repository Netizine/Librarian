{"name": "1271_C. Shawarma Tent", "description": "The map of the capital of Berland can be viewed on the infinite coordinate plane. Each point with integer coordinates contains a building, and there are streets connecting every building to four neighbouring buildings. All streets are parallel to the coordinate axes.\n\nThe main school of the capital is located in (s_x, s_y). There are n students attending this school, the i-th of them lives in the house located in (x_i, y_i). It is possible that some students live in the same house, but no student lives in (s_x, s_y).\n\nAfter classes end, each student walks from the school to his house along one of the shortest paths. So the distance the i-th student goes from the school to his house is |s_x - x_i| + |s_y - y_i|.\n\nThe Provision Department of Berland has decided to open a shawarma tent somewhere in the capital (at some point with integer coordinates). It is considered that the i-th student will buy a shawarma if at least one of the shortest paths from the school to the i-th student's house goes through the point where the shawarma tent is located. It is forbidden to place the shawarma tent at the point where the school is located, but the coordinates of the shawarma tent may coincide with the coordinates of the house of some student (or even multiple students).\n\nYou want to find the maximum possible number of students buying shawarma and the optimal location for the tent itself.\n\nInput\n\nThe first line contains three integers n, s_x, s_y (1 \u2264 n \u2264 200 000, 0 \u2264 s_x, s_y \u2264 10^{9}) \u2014 the number of students and the coordinates of the school, respectively.\n\nThen n lines follow. The i-th of them contains two integers x_i, y_i (0 \u2264 x_i, y_i \u2264 10^{9}) \u2014 the location of the house where the i-th student lives. Some locations of houses may coincide, but no student lives in the same location where the school is situated.\n\nOutput\n\nThe output should consist of two lines. The first of them should contain one integer c \u2014 the maximum number of students that will buy shawarmas at the tent. \n\nThe second line should contain two integers p_x and p_y \u2014 the coordinates where the tent should be located. If there are multiple answers, print any of them. Note that each of p_x and p_y should be not less than 0 and not greater than 10^{9}.\n\nExamples\n\nInput\n\n\n4 3 2\n1 3\n4 2\n5 1\n4 1\n\n\nOutput\n\n\n3\n4 2\n\n\nInput\n\n\n3 100 100\n0 0\n0 0\n100 200\n\n\nOutput\n\n\n2\n99 100\n\n\nInput\n\n\n7 10 12\n5 6\n20 23\n15 4\n16 5\n4 54\n12 1\n4 15\n\n\nOutput\n\n\n4\n10 11\n\nNote\n\nIn the first example, If we build the shawarma tent in (4, 2), then the students living in (4, 2), (4, 1) and (5, 1) will visit it.\n\nIn the second example, it is possible to build the shawarma tent in (1, 1), then both students living in (0, 0) will visit it.", "solution": "n,x,y=map(int,input().split())\nlu=0\nld=0\nru=0\nrd=0\nu=0\nd=0\nl=0\nr=0\n\nfor i in range(n):\n    a,b=map(int,input().split())\n    if(a<x and b<y):\n        ld+=1\n    elif(a<x and b>y):\n        lu+=1\n    elif(a==x and b!=y):\n        if(b>y):\n            u+=1\n        else:\n            d+=1\n    elif(a>x and b<y):\n        rd+=1\n    elif(a>x and b>y):\n        ru+=1\n    elif(a!=x and b==y):\n        if(a<x):\n            l+=1\n        else:\n            r+=1\n\nl1=[]\n#print(lu,ru,ld,rd,u,d,l,r)\nl1.append(lu+ru+u)\nl1.append(lu+ld+l)\nl1.append(ru+rd+r)\nl1.append(ld+rd+d)\nans=max(l1)\nind=l1.index(max(l1))\nprint(ans)\nif(ind==0):\n    print(x,y+1)\nelif(ind==1):\n    print(x-1,y)\nelif(ind==2):\n    print(x+1,y)\nelse:\n    print(x,y-1)\n    \n        \n        \n        ", "difficulty": 9, "public_tests": {"input": ["7 10 12\n5 6\n20 23\n15 4\n16 5\n4 54\n12 1\n4 15\n", "4 3 2\n1 3\n4 2\n5 1\n4 1\n", "3 100 100\n0 0\n0 0\n100 200\n"], "output": ["4\n11 12", "3\n4 2", "2\n99 100"]}, "private_tests": {"input": ["1 1000000000 7\n1000000000 9\n", "3 2 2\n2 4\n2 1\n3 6\n", "2 1000000000 100000\n1000000000 1000000\n1000000000 10000\n", "1 100 100\n50 70\n", "1 100 100\n101 100\n"], "output": ["1\n1000000000 8", "2\n2 3", "1\n1000000000 100001", "1\n99 100", "1\n101 100"]}, "generated_tests": {"input": ["3 2 2\n0 4\n2 1\n3 6\n", "2 1000000000 100000\n1000000000 1000000\n1000000000 00000\n", "1 100 100\n111 100\n", "7 10 12\n5 6\n39 23\n15 4\n16 5\n4 54\n12 1\n4 15\n", "4 3 3\n1 3\n4 2\n5 1\n4 1\n", "3 100 110\n0 0\n0 0\n100 200\n", "4 3 0\n1 3\n4 2\n5 2\n4 1\n", "2 100 010\n0 0\n0 0\n100 200\n", "2 110 010\n0 0\n0 0\n100 200\n", "3 110 010\n-1 0\n0 -1\n001 116\n", "1 100 110\n101 100\n", "7 10 4\n5 6\n20 23\n15 4\n16 5\n4 54\n12 1\n4 15\n", "4 2 2\n1 3\n4 2\n5 1\n4 1\n", "3 100 100\n0 1\n0 0\n100 200\n", "4 3 3\n1 1\n4 2\n5 1\n4 1\n", "3 100 111\n0 0\n0 0\n100 200\n", "7 1 12\n5 6\n39 23\n15 4\n16 3\n4 54\n12 1\n8 15\n", "4 10 12\n5 6\n39 23\n23 4\n16 3\n4 54\n12 1\n8 15\n", "2 010 010\n0 0\n0 0\n100 200\n", "7 10 12\n5 8\n39 23\n23 2\n27 6\n4 73\n12 1\n16 15\n", "3 110 000\n-1 0\n0 -1\n001 116\n", "2 110 110\n-1 0\n1 0\n100 200\n", "2 110 000\n-1 0\n0 -1\n001 81\n", "7 19 4\n5 6\n20 23\n15 4\n16 5\n4 54\n12 1\n7 15\n", "3 100 101\n0 1\n0 0\n100 200\n", "3 2 2\n-1 4\n2 1\n3 6\n", "7 10 12\n5 6\n39 23\n15 4\n16 3\n4 54\n12 1\n4 15\n", "4 3 3\n1 3\n4 2\n5 2\n4 1\n", "2 100 110\n0 0\n0 0\n100 200\n", "7 10 12\n5 6\n39 23\n15 4\n16 3\n4 54\n12 1\n8 15\n", "7 10 12\n5 6\n39 23\n23 4\n16 3\n4 54\n12 1\n8 15\n", "7 10 12\n5 6\n39 23\n23 4\n16 3\n4 73\n12 1\n8 15\n", "2 110 010\n-1 0\n0 0\n100 200\n", "7 10 12\n5 6\n39 23\n23 2\n16 3\n4 73\n12 1\n8 15\n", "2 110 010\n-1 0\n0 0\n000 200\n", "7 10 12\n5 6\n39 23\n23 2\n27 3\n4 73\n12 1\n8 15\n", "2 110 010\n-1 0\n0 0\n001 200\n", "7 10 12\n5 6\n39 23\n23 2\n27 6\n4 73\n12 1\n8 15\n", "2 110 010\n-1 0\n0 0\n001 81\n", "7 10 12\n5 8\n39 23\n23 2\n27 6\n4 73\n12 1\n8 15\n", "2 110 010\n-1 0\n0 0\n001 116\n", "7 10 12\n5 9\n39 23\n23 2\n27 6\n4 73\n12 1\n8 15\n", "2 110 010\n-1 0\n0 -1\n001 116\n", "3 2 2\n2 8\n2 1\n3 6\n", "7 10 12\n5 6\n39 23\n15 4\n16 7\n4 54\n12 1\n4 15\n", "3 2 2\n-1 4\n2 1\n4 6\n", "7 10 12\n5 6\n72 23\n15 4\n16 3\n4 54\n12 1\n4 15\n", "4 3 3\n1 3\n4 2\n4 2\n4 1\n", "2 100 110\n0 0\n0 0\n101 200\n", "4 3 0\n1 4\n4 2\n5 2\n4 1\n", "2 100 010\n0 0\n-1 0\n100 200\n", "7 10 12\n5 6\n75 23\n23 4\n16 3\n4 73\n12 1\n8 15\n", "2 110 010\n-1 0\n1 0\n100 200\n", "4 10 12\n5 6\n39 23\n23 2\n16 3\n4 73\n12 1\n8 15\n", "2 110 010\n-1 0\n0 0\n000 104\n", "2 110 010\n-1 0\n0 1\n000 200\n", "2 110 010\n-1 0\n0 -1\n001 81\n", "2 110 010\n-1 0\n0 1\n001 116\n", "7 10 12\n5 5\n39 23\n23 2\n27 6\n4 73\n12 1\n8 15\n", "2 110 010\n-1 0\n-1 -1\n001 116\n", "7 10 4\n5 6\n20 23\n15 4\n16 5\n4 54\n12 1\n7 15\n", "3 100 100\n0 1\n0 0\n101 200\n", "7 10 12\n5 6\n39 23\n15 4\n16 7\n0 54\n12 1\n4 15\n", "4 3 3\n1 1\n4 2\n5 1\n4 2\n", "6 10 12\n5 6\n72 23\n15 4\n16 3\n4 54\n12 1\n4 15\n", "4 3 3\n1 3\n4 2\n0 2\n4 1\n", "2 100 111\n0 0\n0 0\n101 200\n", "7 1 12\n5 9\n39 23\n15 4\n16 3\n4 54\n12 1\n8 15\n", "4 3 0\n1 4\n4 2\n2 2\n4 1\n", "4 10 12\n5 6\n39 23\n23 4\n16 3\n4 54\n12 1\n15 15\n", "2 010 010\n1 0\n0 0\n100 200\n", "4 10 12\n3 6\n39 23\n23 2\n16 3\n4 73\n12 1\n8 15\n", "2 110 010\n-1 0\n0 0\n010 104\n", "2 110 010\n-1 0\n0 2\n000 200\n", "7 10 12\n5 8\n39 23\n23 2\n27 6\n5 73\n12 1\n16 15\n", "2 110 010\n-1 0\n1 0\n001 116\n", "7 10 12\n5 5\n39 23\n23 2\n27 10\n4 73\n12 1\n8 15\n", "2 110 010\n-1 1\n-1 -1\n001 116\n", "3 110 000\n-1 -1\n0 -1\n001 116\n", "4 3 3\n0 1\n4 2\n5 1\n4 2\n", "6 10 12\n5 6\n72 40\n15 4\n16 3\n4 54\n12 1\n4 15\n", "4 3 3\n1 3\n4 2\n1 2\n4 1\n", "2 100 111\n0 0\n0 0\n101 1\n", "7 1 12\n5 7\n39 23\n15 4\n16 3\n4 54\n12 1\n8 15\n", "4 3 0\n1 4\n4 2\n2 2\n7 1\n", "4 10 12\n5 6\n39 24\n23 4\n16 3\n4 54\n12 1\n15 15\n", "2 010 010\n1 0\n0 0\n101 200\n", "2 110 110\n0 0\n1 0\n100 200\n", "4 10 12\n3 6\n39 23\n23 2\n16 2\n4 73\n12 1\n8 15\n", "2 100 010\n-1 0\n0 0\n010 104\n"], "output": ["2\n2 3\n", "1\n1000000000 100001\n", "1\n101 100\n", "4\n11 12\n", "3\n4 3\n", "2\n99 110\n", "4\n3 1\n", "2\n99 10\n", "2\n109 10\n", "3\n109 10\n", "1\n101 110\n", "5\n10 5\n", "3\n3 2\n", "2\n99 100\n", "4\n3 2\n", "2\n99 111\n", "7\n2 12\n", "3\n11 12\n", "2\n9 10\n", "5\n11 12\n", "3\n109 0\n", "2\n109 110\n", "2\n109 0\n", "6\n18 4\n", "2\n99 101\n", "2\n2 3\n", "4\n11 12\n", "3\n4 3\n", "2\n99 110\n", "4\n11 12\n", "4\n11 12\n", "4\n11 12\n", "2\n109 10\n", "4\n11 12\n", "2\n109 10\n", "4\n11 12\n", "2\n109 10\n", "4\n11 12\n", "2\n109 10\n", "4\n11 12\n", "2\n109 10\n", "4\n11 12\n", "2\n109 10\n", "2\n2 3\n", "4\n11 12\n", "2\n2 3\n", "4\n11 12\n", "3\n4 3\n", "2\n99 110\n", "4\n3 1\n", "2\n99 10\n", "4\n11 12\n", "2\n109 10\n", "3\n11 12\n", "2\n109 10\n", "2\n109 10\n", "2\n109 10\n", "2\n109 10\n", "4\n11 12\n", "2\n109 10\n", "5\n10 5\n", "2\n99 100\n", "4\n11 12\n", "4\n3 2\n", "4\n11 12\n", "3\n3 2\n", "2\n99 111\n", "7\n2 12\n", "4\n3 1\n", "3\n11 12\n", "2\n9 10\n", "3\n11 12\n", "2\n109 10\n", "2\n109 10\n", "5\n11 12\n", "2\n109 10\n", "4\n11 12\n", "2\n109 10\n", "3\n109 0\n", "4\n3 2\n", "4\n11 12\n", "3\n3 2\n", "2\n99 111\n", "7\n2 12\n", "4\n3 1\n", "3\n11 12\n", "2\n9 10\n", "2\n109 110\n", "3\n11 12\n", "2\n99 10\n"]}, "short_description": "1. One-sentence summary  \nPartition a set of 2D points relative to a reference and determine which of its four axis\u2010adjacent neighbors maximizes the count of points in its corresponding half\u2010plane.\n\n2. Core algorithmic approach  \nA single-pass classification (O(n)) based on coordinate comparisons, followed by aggregating counts for each of the four cardinal directions and picking the maximum.\n\n3. Reusable components  \n- Category counters: an array or dictionary to tally points in each quadrant and on each axis relative to a pivot.  \n- Directional sum computation: given the quadrant/axis counts, compute sums for \u201cup\u201d, \u201cdown\u201d, \u201cleft\u201d, and \u201cright\u201d half\u2010planes via fixed linear combinations.  \n- Argmax selection pattern: scan through a small fixed list of candidate values to pick the index (direction) with the highest count."}
{"name": "183_B. Zoo", "description": "The Zoo in the Grid Kingdom is represented by an infinite grid. The Zoo has n observation binoculars located at the OX axis. For each i between 1 and n, inclusive, there exists a single binocular located at the point with coordinates (i, 0). There are m flamingos in the Zoo, located at points with positive coordinates. The flamingos are currently sleeping and you can assume that they don't move.\n\nIn order to get a good view over the flamingos, each of the binoculars can be independently rotated to face any angle (not necessarily integer). Then, the binocular can be used to observe all flamingos that is located at the straight line passing through the binocular at the angle it is set. In other words, you can assign each binocular a direction corresponding to any straight line passing through the binocular, and the binocular will be able to see all flamingos located on that line.\n\nToday, some kids from the prestigious Codeforces kindergarten went on a Field Study to the Zoo. Their teacher would like to set each binocular an angle to maximize the number of flamingos that can be seen by the binocular. The teacher is very interested in the sum of these values over all binoculars. Please help him find this sum.\n\nInput\n\nThe first line contains two space-separated integers n and m (1 \u2264 n \u2264 106, 1 \u2264 m \u2264 250), denoting the number of binoculars and the number of flamingos, respectively.\n\nThen m lines follow, the i-th line will contain two space-separated integers xi and yi (1 \u2264 xi, yi \u2264 109), which means that the i-th flamingo is located at point (xi, yi). \n\nAll flamingos will be located at distinct points.\n\nOutput\n\nPrint a single integer denoting the maximum total number of flamingos that can be seen by all the binoculars.\n\nExamples\n\nInput\n\n5 5\n2 1\n4 1\n3 2\n4 3\n4 4\n\n\nOutput\n\n11\n\nNote\n\nThis picture shows the answer to the example test case. \n\n<image>", "solution": "def gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n    \ndef normalize_rational(num,den):\n    #associate the -ve with the num or cancel -ve sign when both are -ve\n    if num ^ den < 0 and num > 0 or num ^ den > 0 and num < 0:\n        num = -num; den = -den\n    #put it in its simplest form\n    g = gcd(abs(num),abs(den))\n    num //= g; den //=g\n    return (num,den)\n\nfrom sys import *\nl = stdin.readline()\n(n,m) = (int(tkn) for tkn in l.split())\nxs = [0] * m; ys = [0] * m\n#maxhits = [set() for i in range(n+1)]\nmaxhits = [1] * (n + 1)\nmaxhits[0] = 0\nfor i in range(m):\n    l = stdin.readline()\n    (x,y) = (int(tkn) for tkn in l.split())\n    xs[i] = x; ys[i] = y\nline_to_points = {}\nfor i in range(m):\n    for j in range(m):\n        #m = dy/dx; y = (dy/dx)x + c ==> y.dx = x.dy + c.dx\n        #y.dx = x.dy + c'\n        #c' = y.dx - x.dy\n        #c' = ys[i]*dx - xs[i]*dy\n        #Now, at y = 0, x = -c' / dy\n        dy = ys[i] - ys[j]; dx = xs[i] - xs[j]\n        if dy == 0:\n            continue\n        #not a special case anymore\n        # if dx == 0:\n            # if xs[i] > n:\n                # continue\n            # else:\n                # count_seen_from_x = len([x for x in xs if x == xs[i]])\n                # maxhits[xs[i]] = max(count_seen_from_x, maxhits[xs[i]])\n        else:\n            slope = normalize_rational(dy,dx)\n            c_prime = ys[i]*dx - xs[i]*dy\n            x_intercept = -c_prime / dy\n            line = (slope,x_intercept)\n            if line in line_to_points:\n                #print(\"line: \", line)\n                #print(\"now: \", points)\n                points = line_to_points[line]\n                points.add(i); points.add(j)\n                #print(\"after addition: \", points)\n                continue\n            \n            #if (i == 1 and j == 2):\n            #    print(c_prime, x_intercept, dy, dx)\n            if int(x_intercept) == x_intercept and x_intercept <= n and x_intercept > 0:\n                points = set([i,j])\n                line_to_points[line] = points\n                #maxhits[int(x_intercept)] = points\n                # count_on_line = 2\n                # for k in range(m):\n                    # if k != i and k != j and ys[k] * dx == xs[k]*dy + c_prime:\n                        # count_on_line += 1\n                # maxhits[int(x_intercept)] = max(count_on_line, maxhits[int(x_intercept)])\nfor line,points in line_to_points.items():\n    x_intercept = int(line[1])\n    maxhits[x_intercept] = max(maxhits[x_intercept],len(points))\n#print(maxhits)\n#print(sum([max(len(points),1) for points in maxhits]) - 1)\nprint(sum(maxhits))", "difficulty": 8, "public_tests": {"input": ["5 5\n2 1\n4 1\n3 2\n4 3\n4 4\n"], "output": ["11\n"]}, "private_tests": {"input": ["1000000 2\n194305 1024\n4388610 1023\n", "3 3\n227495634 254204506\n454991267 508409012\n217792637 799841973\n", "1000000 2\n136395332 110293751\n568110113 459392523\n", "3 3\n1 1\n2 10\n3 100\n", "1000000 2\n881456674 979172365\n878302062 975668042\n", "3 3\n333333334 1\n666666667 2\n1000000000 3\n", "3 3\n2 333333333\n3 666666666\n4 999999999\n", "4 5\n1 3\n2 2\n3 1\n4 2\n4 3\n", "3 3\n227495634 254204506\n454991267 508409012\n715803819 799841973\n", "3 3\n333333334 1\n666666667 2\n999999999 3\n", "3 6\n1 1\n1 2\n1 3\n2 1\n2 2\n3 1\n", "3 3\n2 333333333\n3 666666666\n4 1000000000\n", "3 3\n2 333333333\n3 666666666\n4 999999998\n", "3 3\n96684705 23204141\n193369409 46408282\n217792636 52269809\n", "1 2\n450000001 500000000\n900000001 1000000000\n", "3 10\n1000000000 1000000000\n1000000000 999999999\n1000000000 999999998\n1000000000 999999997\n1000000000 999999996\n1000000000 999999995\n1000000000 999999994\n1000000000 999999993\n1000000000 999999992\n1000000000 999999991\n", "5 5\n2 1\n1 1\n3 1\n4 1\n4 4\n"], "output": ["1000000\n", "4\n", "1000000\n", "3\n", "1000000\n", "5\n", "5\n", "7\n", "4\n", "5\n", "7\n", "4\n", "4\n", "4\n", "2\n", "3\n", "6\n"]}, "generated_tests": {"input": ["1000000 2\n194305 1024\n4388610 1998\n", "4 3\n227495634 254204506\n454991267 508409012\n217792637 799841973\n", "3 3\n1 2\n2 10\n3 100\n", "3 3\n333333334 1\n666666667 2\n1010000000 3\n", "4 5\n0 3\n2 2\n3 1\n4 2\n4 3\n", "1 2\n536881740 500000000\n900000001 1000000000\n", "4 5\n1 3\n2 2\n3 1\n4 2\n3 3\n", "1000000 2\n157121317 110293751\n568110113 459392523\n", "1000000 2\n881456674 979172365\n878302062 423277082\n", "3 3\n2 333333333\n1 666666666\n4 1000000000\n", "3 3\n2 333333333\n3 666666666\n4 1479342616\n", "3 3\n96684705 23204141\n193369409 56462241\n217792636 52269809\n", "3 10\n1000000000 1000000000\n1000000000 999999999\n1000000000 999999998\n1000010000 999999997\n1000000000 999999996\n1000000000 999999995\n1000000000 999999994\n1000000000 999999993\n1000000000 999999992\n1000000000 999999991\n", "1000000 2\n194305 1024\n4388610 3066\n", "3 3\n1 2\n2 10\n3 110\n", "1000000 2\n949792782 979172365\n878302062 423277082\n", "3 3\n2 118661021\n3 666666666\n4 1479342616\n", "3 3\n96684705 23204141\n193369409 50662455\n217792636 52269809\n", "1 2\n536881740 150770112\n900000001 1000000000\n", "3 10\n1000000000 1000000000\n1000000000 999999999\n1000000000 999999998\n1000010000 1199925182\n1000000000 999999996\n1000000000 999999995\n1000000000 999999994\n1000000000 999999993\n1000000000 999999992\n1000000000 999999991\n", "1000000 2\n194305 1024\n4388610 4264\n", "3 3\n1 2\n2 17\n3 110\n", "1000000 2\n448591311 979172365\n878302062 423277082\n", "3 3\n4 118661021\n3 666666666\n4 1479342616\n", "3 3\n96684705 23204141\n193369409 78852405\n217792636 52269809\n", "1 2\n598997091 150770112\n900000001 1000000000\n", "3 10\n1000000000 1000000000\n1000000000 999999999\n1000000000 999999998\n1000010000 1199925182\n1000000000 999999996\n1000000000 177543565\n1000000000 999999994\n1000000000 999999993\n1000000000 999999992\n1000000000 999999991\n", "3 3\n1 2\n2 7\n3 110\n", "1000000 2\n448591311 979172365\n878302062 130987701\n", "3 3\n4 118661021\n3 666666666\n4 496343856\n", "1 2\n598997091 176291667\n900000001 1000000000\n", "3 10\n1000000000 1000000000\n1000000000 999999999\n1000000000 972254781\n1000010000 1199925182\n1000000000 999999996\n1000000000 177543565\n1000000000 999999994\n1000000000 999999993\n1000000000 999999992\n1000000000 999999991\n", "3 3\n2 2\n2 7\n3 110\n", "1000000 2\n448591311 979172365\n878302062 154915726\n", "3 3\n4 118661021\n2 666666666\n4 496343856\n", "1 2\n492828943 176291667\n900000001 1000000000\n", "3 10\n1000000000 1000000000\n1000000000 999999999\n1000000000 972254781\n1000010000 1199925182\n1000000000 999999996\n1000000000 177543565\n1000000000 999999994\n1000000000 999999993\n1000010000 999999992\n1000000000 999999991\n", "3 3\n2 2\n2 7\n0 110\n", "1000000 2\n448591311 979172365\n878302062 247746598\n", "3 3\n7 118661021\n2 666666666\n4 496343856\n", "1 2\n492828943 214027092\n900000001 1000000000\n", "3 10\n1000000000 1000000000\n1000000000 999999999\n1000000000 972254781\n1000010000 1199925182\n1000000000 999999996\n1000000000 177543565\n1000000000 999999994\n1000000000 999999993\n1000010000 563103648\n1000000000 999999991\n", "3 3\n2 2\n4 7\n0 110\n", "1000000 2\n448591311 979172365\n878302062 284581963\n", "3 3\n7 118661021\n2 666666666\n4 655008534\n", "3 10\n1000000000 1000000000\n1000000000 999999999\n1000000000 972254781\n1000010000 1199925182\n1000000000 999999996\n1000000000 5596574\n1000000000 999999994\n1000000000 999999993\n1000010000 563103648\n1000000000 999999991\n", "3 3\n2 2\n4 7\n0 010\n", "1000000 2\n448591311 979172365\n878302062 197302300\n", "1 3\n7 118661021\n2 666666666\n4 655008534\n", "3 10\n1000000000 1000000000\n1000000000 999999999\n1000000000 621974175\n1000010000 1199925182\n1000000000 999999996\n1000000000 5596574\n1000000000 999999994\n1000000000 999999993\n1000010000 563103648\n1000000000 999999991\n", "1000000 2\n448591311 979172365\n878302062 105644748\n", "3 10\n1000000000 1000000000\n1000000000 999999999\n1000000000 621974175\n1000010000 2072591458\n1000000000 999999996\n1000000000 5596574\n1000000000 999999994\n1000000000 999999993\n1000010000 563103648\n1000000000 999999991\n", "1000000 2\n448591311 979172365\n510734482 105644748\n", "3 10\n1000000000 1000000000\n1000000000 1174967448\n1000000000 621974175\n1000010000 2072591458\n1000000000 999999996\n1000000000 5596574\n1000000000 999999994\n1000000000 999999993\n1000010000 563103648\n1000000000 999999991\n"], "output": ["1000000\n", "5\n", "3\n", "4\n", "6\n", "1\n", "8\n", "1000000\n", "1000000\n", "4\n", "4\n", "3\n", "3\n", "1000000\n", "3\n", "1000000\n", "3\n", "3\n", "1\n", "3\n", "1000000\n", "3\n", "1000000\n", "3\n", "3\n", "1\n", "3\n", "3\n", "1000000\n", "3\n", "1\n", "3\n", "4\n", "1000000\n", "3\n", "1\n", "3\n", "4\n", "1000000\n", "3\n", "1\n", "3\n", "3\n", "1000000\n", "3\n", "3\n", "3\n", "1000000\n", "1\n", "3\n", "1000000\n", "3\n", "1000000\n", "3\n"]}, "short_description": "1. One-sentence summary:  \nGiven a set of 2D points and a horizontal target segment (y=0, x in [1..n]), the code finds, for each integer x-intercept in that range, the maximum number of input points that lie on any single straight line through that intercept, and then sums these maxima.\n\n2. Core algorithmic approach:  \nBrute-force pairwise enumeration (O(m\u00b2)) of points to identify lines, with hashing of each line by its reduced rational slope and x-intercept. By normalizing dy/dx via GCD and computing the intercept parameter, all points collinear on the same line are grouped in a dictionary.\n\n3. Reusable components:  \n- gcd(a,b) + normalize_rational(num,den): reduce any rational number (slope) to a unique canonical pair.  \n- Line hashing pattern: represent a line as (normalized_slope, intercept) to act as a dictionary key for grouping collinear points.  \n- Dictionary-of-sets grouping by key: incrementally add point indices to the corresponding line\u2019s set to count collinearities."}
{"name": "630_O. Arrow", "description": "Petya has recently started working as a programmer in the IT city company that develops computer games.\n\nBesides game mechanics implementation to create a game it is necessary to create tool programs that can be used by game designers to create game levels. Petya's first assignment is to create a tool that allows to paint different arrows on the screen.\n\nA user of this tool will choose a point on the screen, specify a vector (the arrow direction) and vary several parameters to get the required graphical effect. In the first version of the program Petya decided to limit parameters of the arrow by the following: a point with coordinates (px, py), a nonzero vector with coordinates (vx, vy), positive scalars a, b, c, d, a > c.\n\nThe produced arrow should have the following properties. The arrow consists of a triangle and a rectangle. The triangle is isosceles with base of length a and altitude of length b perpendicular to the base. The rectangle sides lengths are c and d. Point (px, py) is situated in the middle of the triangle base and in the middle of side of rectangle that has length c. Area of intersection of the triangle and the rectangle is zero. The direction from (px, py) point to the triangle vertex opposite to base containing the point coincides with direction of (vx, vy) vector.\n\nEnumerate the arrow points coordinates in counter-clockwise order starting from the tip.\n\n<image>\n\nInput\n\nThe only line of the input contains eight integers px, py, vx, vy ( - 1000 \u2264 px, py, vx, vy \u2264 1000, vx2 + vy2 > 0), a, b, c, d (1 \u2264 a, b, c, d \u2264 1000, a > c).\n\nOutput\n\nOutput coordinates of the arrow points in counter-clockwise order. Each line should contain two coordinates, first x, then y. Relative or absolute error should not be greater than 10 - 9.\n\nExamples\n\nInput\n\n8 8 0 2 8 3 4 5\n\n\nOutput\n\n8.000000000000 11.000000000000\n4.000000000000 8.000000000000\n6.000000000000 8.000000000000\n6.000000000000 3.000000000000\n10.000000000000 3.000000000000\n10.000000000000 8.000000000000\n12.000000000000 8.000000000000", "solution": "from math import atan2, pi\n\nEPS = 0.00000001\n\n\ndef eq(a, b):\n    return abs(a - b) < EPS\n\n\nclass Vector:\n    def __init__(self, x2, y2, x1=0, y1=0):\n        self.x = (x2 - x1)\n        self.y = y2 - y1\n        self.s = (self.x ** 2 + self.y ** 2) ** 0.5\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def mul_k(self, k):\n        self.x *= k\n        self.y *= k\n\n    def mul_kk(self, k):\n        return Vector(self.x * k, self.y * k)\n\n    def rotate(self):\n        return Vector(-self.y, self.x)\n\n    def rotate2(self):\n        return self.rotate().rotate().rotate()\n\n    def reverseee(self):\n        return Vector(-self.x, -self.y)\n\n    def __mul__(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def vectormul(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def get_angle(self, other):\n        return atan2(self.vectormul(other), self * other)\n\n    def norm(self):\n        if self.s == 0:\n            return Vector(self.x, self.y)\n        return Vector(self.x / self.s, self.y / self.s)\n\n    def __str__(self):\n        return f'{self.x} {self.y}'\n\n    def middle(self, point):\n        return Vector((self.x + point.x) / 2, (self.y + point.y) / 2)\n\n\nclass Line:\n    def __init__(self, point=None, vector=None, point2=None, a=None, b=None, c=None):\n        if a is not None:\n            self.v = Vector(a, b).rotate()\n            self.p = Vector(a, b)\n            self.p.mul_k(-c / (a ** 2 + b ** 2))\n            self.A = a\n            self.B = b\n            self.C = c\n            return\n        if vector is None:\n            vector = point2 - point\n        self.p = point\n        self.v = vector\n        self.A = self.v.y\n        self.B = -self.v.x\n        self.C = - self.A * self.p.x - self.p.y * self.B\n\n    def get_abc(self):\n        return self.A, self.B, self.C\n\n    def __str__(self):\n        return str(self.A) + ' ' + str(self.B) + ' ' + str(self.C)\n\n    def check(self, point):\n        return eq(- point.x * self.A - self.B * point.y, self.C)\n\n    def get_s_from_point(self, point):\n        v = self.v.norm()\n        v2 = point - self.p\n        a = v * v2\n        v.mul_k(a)\n        v3 = v + self.p\n        s = v3 - point\n        return s.s\n\n    def get_bisect(self, line):\n        return Line(point=self.get_peresech(line)[1], vector=self.v.norm() + line.v.norm())\n\n    def get_proection(self, point):\n        v = self.v.norm()\n        v2 = point - self.p\n        a = v * v2\n        v.mul_k(a)\n        v3 = v + self.p\n        return v3\n\n    def get_paral_line(self, le):\n        v = self.v.norm().rotate()\n        v.mul_k(le)\n        return Line(point=self.p + v, vector=self.v)\n\n    def get_peresech(self, lin):\n        u = lin.v.rotate()\n        a = self.v * u\n        if eq(a, 0):\n            if eq(self.get_s_from_point(lin.p), 0):\n                return (2,)\n            return (0,)\n        t = ((lin.p - self.p) * u) / (self.v * u)\n        v = Vector(self.v.x, self.v.y)\n        v.mul_k(t)\n        return (1, self.p + v)\n\n    def get_mirror(self, point):\n        v = self.v.norm()\n        v2 = point - self.p\n        a = v * v2\n        v.mul_k(a)\n        v3 = v + self.p\n        s = v3 - point\n        return s + v3\n\n\ndef is_on_line(v1, v2):\n    return eq(v1.vectormul(v2), 0)\n\n\ndef is_on_luch(v1, v2):\n    return eq(v1.get_angle(v2), 0)\n\n\ndef is_on_otr(v1, v2, v3, v4):\n    return eq(v1.get_angle(v2), 0) and eq(v3.get_angle(v4), 0)\n\n\ndef get_s_from_luch(xp, yp, x1, y1, x2, y2):\n    v = Vector(x2, y2, x1, y1).norm()\n    v2 = Vector(xp, yp, x1, y1)\n    a = v * v2\n    v1 = Vector(x2, y2, x1, y1)\n    v.mul_k(a)\n    v3 = v + Vector(x1, y1)\n    xh, yh = v3.x, v3.y\n    v4 = Vector(xh, yh, x1, y1)\n    b = v1.get_angle(v4)\n    if eq(b, 0):\n        se = v3 - Vector(xp, yp)\n        return se.s\n    else:\n        return (Vector(x1, y1) - Vector(xp, yp)).s\n\n\ndef get_s_from_otr(xp, yp, x1, y1, x2, y2):\n    return max(get_s_from_luch(xp, yp, x1, y1, x2, y2), get_s_from_luch(xp, yp, x2, y2, x1, y1))\n\n\ndef get_s_from_line(xp, yp, x1, y1, x2, y2):\n    v = Vector(x2, y2, x1, y1).norm()\n    v2 = Vector(xp, yp, x1, y1)\n    a = v * v2\n    return a\n\n\ndef peresec_otr(x1, y1, x2, y2, x3, y3, x4, y4):\n    AB = Vector(x2, y2, x1, y1)\n    CD = Vector(x4, y4, x3, y3)\n    AC = Vector(x3, y3, x1, y1)\n    AD = Vector(x4, y4, x1, y1)\n    CA = Vector(x1, y1, x3, y3)\n    CB = Vector(x2, y2, x3, y3)\n    yg1 = AB.get_angle(AD)\n    yg2 = AB.get_angle(AC)\n    yg3 = CD.get_angle(CA)\n    yg4 = CD.get_angle(CB)\n    flag = False\n    if (yg1 < 0 and yg2 < 0) or (yg1 > 0 and yg2 > 0):\n        flag = True\n    if (yg3 < 0 and yg4 < 0) or (yg3 > 0 and yg4 > 0):\n        flag = True\n    if max(min(x1, x2), min(x3, x4)) > min(max(x1, x2), max(x3, x4)):\n        flag = True\n    if max(min(y1, y2), min(y3, y4)) > min(max(y1, y2), max(y3, y4)):\n        flag = True\n    return not flag\n\n\ndef get_s_from_otr_to_otr(x1, y1, x2, y2, x3, y3, x4, y4):\n    if peresec_otr(x1, y1, x2, y2, x3, y3, x4, y4):\n        return 0\n    return min(get_s_from_otr(x1, y1, x3, y3, x4, y4), get_s_from_otr(x2, y2, x3, y3, x4, y4),\n               get_s_from_otr(x3, y3, x1, y1, x2, y2), get_s_from_otr(x4, y4, x1, y1, x2, y2))\n\n\ndef main():\n    px, py, vx, vy, a, b, c, d = map(int, input().split())\n    P = Vector(px, py)\n    V = Vector(vx, vy).norm()\n    A = V.mul_kk(b) + P\n    B = V.mul_kk(a/2).rotate() + P\n    C = V.mul_kk(c/2).rotate() + P\n    D = C + V.rotate().rotate().mul_kk(d)\n    E = D + V.rotate2().mul_kk(c)\n    F = P + V.rotate2().mul_kk(c/2)\n    G = P + V.rotate2().mul_kk(a/2)\n    print(A, B, C, D, E, F, G, sep='\\n')\n\n\nmain()\n", "difficulty": 22, "public_tests": {"input": ["8 8 0 2 8 3 4 5\n"], "output": ["8.0000000000000000000000000 11.0000000000000000000000000\n4.0000000000000000000000000 8.0000000000000000000000000\n6.0000000000000000000000000 8.0000000000000000000000000\n6.0000000000000000000000000 3.0000000000000000000000000\n10.0000000000000000000000000 3.0000000000000000000000000\n10.0000000000000000000000000 8.0000000000000000000000000\n12.0000000000000000000000000 8.0000000000000000000000000\n"]}, "private_tests": {"input": ["10 10 -7 0 5 8 2 11\n", "870 396 187 223 444 202 222 732\n", "10 10 -7 -7 5 8 2 11\n", "254 578 251 809 412 966 92 984\n", "767 238 263 303 155 351 21 686\n", "10 10 7 7 5 8 2 11\n", "10 10 7 -7 5 8 2 11\n", "403 24 708 984 850 765 344 865\n", "380 171 865 522 392 242 71 774\n", "90 798 425 372 244 996 169 253\n", "10 10 7 0 5 8 2 11\n", "10 10 0 -7 5 8 2 11\n", "10 10 -7 7 5 8 2 11\n", "10 10 0 7 5 8 2 11\n", "669 649 952 535 380 408 58 532\n"], "output": ["2.0000000000000000000000000 10.0000000000000000000000000\n10.0000000000000000000000000 7.5000000000000000000000000\n10.0000000000000000000000000 9.0000000000000000000000000\n21.0000000000000000000000000 9.0000000000000000000000000\n21.0000000000000000000000000 11.0000000000000000000000000\n10.0000000000000000000000000 11.0000000000000000000000000\n10.0000000000000000000000000 12.5000000000000000000000000\n", "999.7945324433952405951409048 550.7817151597707949206572664\n699.8933625471825917263579697 538.6454762496719970710223890\n784.9466812735912958354234092 467.3227381248359985355111945\n314.6021379638620081853339627 -93.5694178006700504057757684\n484.7087754166794164589759930 -236.2148940503420475045537330\n955.0533187264087041645765908 324.6772618751640014644888055\n1040.1066374528174083291531815 253.3545237503280029150998232\n", "4.3431457505076198049448477 4.3431457505076198049448477\n11.7677669529663688112799957 8.2322330470336311887200043\n10.7071067811865475241650536 9.2928932188134524758349464\n18.4852813742385702934500902 17.0710678118654752451199830\n17.0710678118654752451199830 18.4852813742385702934500902\n9.2928932188134524758349464 10.7071067811865475241650536\n8.2322330470336311887200043 11.7677669529663688112799957\n", "540.2498994917018737549341267 1500.6142178836128120433812683\n57.2520404927285307544737591 639.0429392290792815489730572\n210.0659896245898660971374028 591.6309475948429463798561301\n-81.5177589259635953233829042 -348.1748395661042659310346892\n6.3502618248566724823422902 -375.4367347557901586907469493\n297.9340103754101339028625972 564.3690524051570536201438699\n450.7479595072714692594040287 516.9570607709207184510269428\n", "997.0803880940876118277316209 503.0736030133404805830821260\n708.4723526110145662704198344 288.8012252914296009165262547\n759.0704477731051992850375143 244.8827466523872362497149524\n309.3976664838057641926383212 -273.1813321714064095591112391\n325.2567709375953655670521414 -286.9468254761808820862967195\n774.9295522268948007149624857 231.1172533476127637502850476\n825.5276473889854337295801656 187.1987747085703990973515332\n", "15.6568542494923801950551523 15.6568542494923801950551523\n8.2322330470336311887200043 11.7677669529663688112799957\n9.2928932188134524758349464 10.7071067811865475241650536\n1.5147186257614297074172716 2.9289321881345247557473788\n2.9289321881345247557473788 1.5147186257614297074172716\n10.7071067811865475241650536 9.2928932188134524758349464\n11.7677669529663688112799957 8.2322330470336311887200043\n", "15.6568542494923801950551523 4.3431457505076198049448477\n11.7677669529663688112799957 11.7677669529663688112799957\n10.7071067811865475241650536 10.7071067811865475241650536\n2.9289321881345247557473788 18.4852813742385702934500902\n1.5147186257614297074172716 17.0710678118654752451199830\n9.2928932188134524758349464 9.2928932188134524758349464\n8.2322330470336311887200043 8.2322330470336311887200043\n", "849.7935987043839807242306961 644.9673744704997697674286883\n58.0181252941667945643988702 272.2186659468799892758195114\n263.3838060014039733069957094 124.4555542185020191869870843\n-241.8141846904811813057101233 -577.6840260651349754361660871\n37.4182033067108720247873066 -778.5951345021390137546291044\n542.6161939985960266930042906 -76.4555542185020191869870843\n747.9818747058332054633567054 -224.2186659468799892758195114\n", "587.1955870574218883661821167 296.0359496462129777205607439\n278.7312143361250263151607243 338.8113019142755790169552199\n361.6579495353695838377738880 201.3943939691672604802574753\n-301.0254570036574475744295398 -198.5139739075635029463828829\n-264.3413560743966152499773159 -259.3027618458980239346534091\n398.3420504646304161622261120 140.6056060308327395197425247\n481.2687856638749736848392757 3.1886980857244209969225679\n", "839.4571385938415633565234941 1453.9954248397860272490333955\n9.6471467565723942605426799 889.8009748076793882787249856\n34.3457696797571091391898523 861.5834620594172812424460517\n-156.0283829951845731148774021 694.9500860709977381746149661\n-44.7199223546987913863182129 567.7831619521631757452340139\n145.6542303202428908642795946 734.4165379405827187575539483\n170.3528532434276057394573201 706.1990251923206117212750144\n", "18.0000000000000000000000000 10.0000000000000000000000000\n10.0000000000000000000000000 12.5000000000000000000000000\n10.0000000000000000000000000 11.0000000000000000000000000\n-1.0000000000000000000000000 11.0000000000000000000000000\n-1.0000000000000000000000000 9.0000000000000000000000000\n10.0000000000000000000000000 9.0000000000000000000000000\n10.0000000000000000000000000 7.5000000000000000000000000\n", "10.0000000000000000000000000 2.0000000000000000000000000\n12.5000000000000000000000000 10.0000000000000000000000000\n11.0000000000000000000000000 10.0000000000000000000000000\n11.0000000000000000000000000 21.0000000000000000000000000\n9.0000000000000000000000000 21.0000000000000000000000000\n9.0000000000000000000000000 10.0000000000000000000000000\n7.5000000000000000000000000 10.0000000000000000000000000\n", "4.3431457505076198049448477 15.6568542494923801950551523\n8.2322330470336311887200043 8.2322330470336311887200043\n9.2928932188134524758349464 9.2928932188134524758349464\n17.0710678118654752451199830 1.5147186257614297074172716\n18.4852813742385702934500902 2.9289321881345247557473788\n10.7071067811865475241650536 10.7071067811865475241650536\n11.7677669529663688112799957 11.7677669529663688112799957\n", "10.0000000000000000000000000 18.0000000000000000000000000\n7.5000000000000000000000000 10.0000000000000000000000000\n9.0000000000000000000000000 10.0000000000000000000000000\n9.0000000000000000000000000 -1.0000000000000000000000000\n11.0000000000000000000000000 -1.0000000000000000000000000\n11.0000000000000000000000000 10.0000000000000000000000000\n12.5000000000000000000000000 10.0000000000000000000000000\n", "1024.6826138756150434971914365 848.8846622095105549088422947\n575.9164563240024376500336700 814.6365113636442604194698447\n654.7925117547161615316753114 674.2813622607667555231003575\n191.0102799365122322738930194 413.6474399679735809987057849\n219.4252564270799092105423966 363.0847154464400699247494941\n683.2074882452838384683246886 623.7186377392332444768996425\n762.0835436759975623499663300 483.3634886363557395527745797\n"]}, "generated_tests": {"input": ["10 10 -7 -1 5 8 2 11\n", "870 396 187 223 355 202 222 732\n", "10 10 -7 -7 5 8 2 7\n", "254 578 251 809 152 966 92 984\n", "767 238 263 303 267 351 21 686\n", "10 13 7 7 5 8 2 11\n", "4 10 7 -7 5 8 2 11\n", "403 24 805 984 850 765 344 865\n", "380 171 865 522 392 242 31 774\n", "90 1266 425 372 244 996 169 253\n", "10 10 7 0 5 8 4 11\n", "10 10 0 -9 5 8 2 11\n", "10 10 -7 7 5 8 4 11\n", "10 10 0 4 5 8 2 11\n", "1044 649 952 535 380 408 58 532\n", "10 15 -7 -1 5 8 2 11\n", "870 61 187 223 355 202 222 732\n", "254 578 251 1493 152 966 92 984\n", "767 238 263 303 267 351 2 686\n", "10 13 7 14 5 8 2 11\n", "4 10 7 -7 5 9 2 11\n", "403 42 805 984 850 765 344 865\n", "380 171 865 522 661 242 31 774\n", "90 1266 425 372 408 996 169 253\n", "10 7 0 -9 5 8 2 11\n", "10 10 -7 7 5 8 4 2\n", "10 10 0 4 5 8 2 14\n", "1044 649 952 535 380 408 46 532\n", "870 61 187 223 355 258 222 732\n", "254 578 251 1493 152 966 4 984\n", "767 238 205 303 267 351 2 686\n", "11 13 7 14 5 8 2 11\n", "4 10 7 -5 5 9 2 11\n", "144 42 805 984 850 765 344 865\n", "380 171 865 688 661 242 31 774\n", "130 1266 425 372 408 996 169 253\n", "10 7 0 -9 7 8 2 11\n", "10 10 -7 12 5 8 4 2\n", "10 10 0 4 10 8 2 14\n", "1044 649 952 535 232 408 46 532\n", "870 61 187 446 355 258 222 732\n", "254 627 251 1493 152 966 4 984\n", "767 238 334 303 267 351 2 686\n", "11 13 7 14 5 3 2 11\n", "144 42 805 984 425 765 344 865\n", "380 171 865 688 661 471 31 774\n", "130 1266 425 372 408 996 169 403\n", "10 7 0 -9 7 8 2 13\n", "10 15 0 4 10 8 2 14\n", "1365 649 952 535 232 408 46 532\n", "870 61 187 446 355 406 222 732\n", "254 855 251 1493 152 966 4 984\n", "767 238 334 471 267 351 2 686\n", "11 13 7 14 5 2 2 11\n", "144 42 805 984 425 765 344 1671\n", "380 171 865 688 661 471 12 774\n", "130 1266 425 372 408 996 169 0\n", "10 9 0 -9 7 8 2 13\n", "10 15 0 4 10 10 2 14\n", "1365 649 952 535 232 408 46 657\n", "870 61 187 446 355 406 222 653\n", "254 855 251 2657 152 966 4 984\n", "767 238 334 471 267 100 2 686\n", "11 13 0 14 5 2 2 11\n", "144 42 805 984 425 526 344 1671\n", "380 171 865 688 661 471 17 774\n", "157 1266 425 372 408 996 169 0\n", "10 9 0 -9 7 8 1 13\n", "10 0 0 4 10 10 2 14\n", "1365 649 952 535 232 408 46 178\n", "870 6 187 446 355 406 222 653\n", "254 855 251 2657 152 1730 4 984\n", "767 238 334 471 267 100 2 94\n", "11 13 0 14 5 2 2 22\n", "144 42 805 984 425 526 45 1671\n", "380 340 865 688 661 471 17 774\n"], "output": ["2.0804040507106674 8.868629150101524\n10.353553390593273 7.525126265847084\n10.14142135623731 9.010050506338834\n21.03086578651014 10.565685424949239\n20.748023074035522 12.545584412271571\n9.85857864376269 10.989949493661166\n9.646446609406727 12.474873734152915\n", "999.7945324433952 550.7817151597708\n733.9913146492113 510.0521262807062\n784.9466812735914 467.322738124836\n314.60213796386216 -93.56941780067001\n484.70877541667943 -236.21489405034202\n955.0533187264086 324.677261875164\n1006.0086853507887 281.9478737192938\n", "4.34314575050762 4.34314575050762\n11.767766952966369 8.232233047033631\n10.707106781186548 9.292893218813452\n15.65685424949238 14.242640687119284\n14.242640687119284 15.65685424949238\n9.292893218813452 10.707106781186548\n8.232233047033631 11.767766952966369\n", "540.2498994917019 1500.614217883613\n181.41337416236587 600.5206960262623\n210.06598962458986 591.630947594843\n-81.51775892596362 -348.1748395661043\n6.350261824856659 -375.4367347557902\n297.93401037541014 564.369052405157\n326.58662583763413 555.4793039737377\n", "997.0803880940877 503.07360301334046\n666.1814074009089 325.50920743749487\n759.0704477731052 244.88274665238723\n309.3976664838057 -273.18133217140644\n325.25677093759526 -286.94682547618095\n774.9295522268948 231.11725334761277\n867.8185925990911 150.49079256250513\n", "15.65685424949238 18.65685424949238\n8.232233047033631 14.767766952966369\n9.292893218813452 13.707106781186548\n1.5147186257614296 5.928932188134525\n2.9289321881345254 4.51471862576143\n10.707106781186548 12.292893218813452\n11.767766952966369 11.232233047033631\n", "9.65685424949238 4.34314575050762\n5.767766952966369 11.767766952966369\n4.707106781186548 10.707106781186548\n-3.0710678118654746 18.48528137423857\n-4.4852813742385695 17.071067811865476\n3.2928932188134525 9.292893218813452\n2.232233047033631 8.232233047033631\n", "887.3941412288082 616.1041428188165\n74.05325398954642 293.10785623822676\n269.87331690871054 132.90953240700003\n-277.84031990556275 -536.5938447672173\n-11.586953722983822 -754.4129095812174\n536.1266830912895 -84.90953240700003\n731.9467460104536 -245.10785623822676\n", "587.1955870574219 296.035949646213\n278.73121433612505 338.8113019142756\n371.9914990929079 184.2707917330167\n-290.69190744611916 -215.63757614371403\n-274.6749056319349 -242.17915960974742\n388.0085009070921 157.7292082669833\n481.26878566387495 3.188698085724411\n", "839.4571385938416 1921.995424839786\n9.647146756572397 1357.8009748076793\n34.34576967975711 1329.5834620594173\n-156.02838299518453 1162.9500860709977\n-44.71992235469875 1035.783161952163\n145.6542303202429 1202.4165379405827\n170.3528532434276 1174.1990251923207\n", "18.0 10.0\n10.0 12.5\n10.0 12.0\n-1.0 12.0\n-1.0 8.0\n10.0 8.0\n10.0 7.5\n", "10.0 2.0\n12.5 10.0\n11.0 10.0\n11.0 21.0\n9.0 21.0\n9.0 10.0\n7.5 10.0\n", "4.34314575050762 15.65685424949238\n8.232233047033631 8.232233047033631\n8.585786437626904 8.585786437626904\n16.363961030678926 0.8076118445748817\n19.192388155425117 3.6360389693210733\n11.414213562373096 11.414213562373096\n11.767766952966369 11.767766952966369\n", "10.0 18.0\n7.5 10.0\n9.0 10.0\n9.0 -1.0\n11.0 -1.0\n11.0 10.0\n12.5 10.0\n", "1399.682613875615 848.8846622095105\n950.9164563240024 814.6365113636442\n1029.792511754716 674.2813622607667\n566.0102799365122 413.6474399679736\n594.4252564270801 363.0847154464401\n1058.207488245284 623.7186377392333\n1137.0835436759976 483.3634886363558\n", "2.0804040507106674 13.868629150101524\n10.353553390593273 12.525126265847085\n10.14142135623731 14.010050506338834\n21.03086578651014 15.565685424949239\n20.748023074035522 17.54558441227157\n9.85857864376269 15.989949493661166\n9.646446609406727 17.474873734152915\n", "999.7945324433952 215.78171515977078\n733.9913146492113 175.0521262807062\n784.9466812735914 132.322738124836\n314.60213796386216 -428.56941780067\n484.70877541667943 -571.214894050342\n955.0533187264086 -10.322738124835993\n1006.0086853507887 -53.052126280706204\n", "414.1543739957118 1530.6313959187162\n179.0517742341383 590.6001370845488\n208.63660019434684 585.6263987617006\n45.49798320492607 -384.75589273314085\n136.2247828162324 -400.00869025654197\n299.36339980565316 570.3736012382994\n328.9482257658617 565.3998629154512\n", "997.0803880940877 503.07360301334046\n666.1814074009089 325.50920743749487\n766.2448045498195 238.65549968117975\n316.57202326052 -279.4085791426139\n318.082414160881 -280.71957850497347\n767.7551954501805 237.34450031882025\n867.8185925990911 150.49079256250513\n", "13.577708763999663 20.155417527999326\n7.76393202250021 14.118033988749895\n9.105572809000083 13.447213595499958\n4.186223258500546 3.6085144945008842\n5.97507764050038 2.7140873035009676\n10.894427190999917 12.552786404500042\n12.23606797749979 11.881966011250105\n", "10.363961030678928 3.6360389693210724\n5.767766952966369 11.767766952966369\n4.707106781186548 10.707106781186548\n-3.0710678118654746 18.48528137423857\n-4.4852813742385695 17.071067811865476\n3.2928932188134525 9.292893218813452\n2.232233047033631 8.232233047033631\n", "887.3941412288082 634.1041428188165\n74.05325398954642 311.10785623822676\n269.87331690871054 150.90953240700003\n-277.84031990556275 -518.5938447672173\n-11.586953722983822 -736.4129095812174\n536.1266830912895 -66.90953240700003\n731.9467460104536 -227.10785623822676\n", "587.1955870574219 296.035949646213\n209.23809356168022 453.96752695238814\n371.9914990929079 184.2707917330167\n-290.69190744611916 -215.63757614371403\n-274.6749056319349 -242.17915960974742\n388.0085009070921 157.7292082669833\n550.7619064383198 -111.96752695238814\n", "839.4571385938416 1921.995424839786\n-44.36050870212483 1419.503269350546\n34.34576967975711 1329.5834620594173\n-156.02838299518453 1162.9500860709977\n-44.71992235469875 1035.783161952163\n145.6542303202429 1202.4165379405827\n224.36050870212483 1112.496730649454\n", "10.0 -1.0\n12.5 7.0\n11.0 7.0\n11.0 18.0\n9.0 18.0\n9.0 7.0\n7.5 7.0\n", "4.34314575050762 15.65685424949238\n8.232233047033631 8.232233047033631\n8.585786437626904 8.585786437626904\n10.0 7.171572875253809\n12.828427124746192 10.0\n11.414213562373096 11.414213562373096\n11.767766952966369 11.767766952966369\n", "10.0 18.0\n7.5 10.0\n9.0 10.0\n9.0 -4.0\n11.0 -4.0\n11.0 10.0\n12.5 10.0\n", "1399.682613875615 848.8846622095105\n950.9164563240024 814.6365113636442\n1032.7319920813266 669.0507355861254\n568.9497602631227 408.4168132933322\n591.4857761004696 368.31534212108147\n1055.2680079186734 628.9492644138746\n1137.0835436759976 483.3634886363558\n", "1035.7771751009702 258.6914975803013\n733.9913146492113 175.0521262807062\n784.9466812735914 132.322738124836\n314.60213796386216 -428.56941780067\n484.70877541667943 -571.214894050342\n955.0533187264086 -10.322738124835993\n1006.0086853507887 -53.052126280706204\n", "414.1543739957118 1530.6313959187162\n179.0517742341383 590.6001370845488\n252.02767826931944 578.3315825548566\n88.88906127989867 -392.0507089399848\n92.8337047412598 -392.713874049698\n255.97232173068056 577.6684174451434\n328.9482257658617 565.3998629154512\n", "963.6879475187403 528.7143809667234\n656.4291457006907 312.80866379986276\n766.1717539003797 238.56036452284542\n381.7616912284257 -329.6164598166768\n383.4181834276663 -330.73718886236765\n767.8282460996203 237.43963547715458\n877.5708542993093 163.19133620013724\n", "14.577708763999663 20.155417527999326\n8.76393202250021 14.118033988749895\n10.105572809000083 13.447213595499958\n5.186223258500546 3.6085144945008842\n6.97507764050038 2.7140873035009676\n11.894427190999917 12.552786404500042\n13.23606797749979 11.881966011250105\n", "11.323601240860615 4.7688562565281325\n5.453095484297741 12.034333678016838\n4.581238193719097 10.813733471206735\n-4.369829989554988 17.207353602116797\n-5.532306376993182 15.579886659703325\n3.4187618062809033 9.186266528793265\n2.5469045157022587 7.9656663219831625\n", "628.3941412288082 634.1041428188165\n-184.94674601045358 311.10785623822676\n10.873316908710535 150.90953240700003\n-536.8403199055628 -518.5938447672173\n-270.5869537229838 -736.4129095812174\n277.12668309128946 -66.90953240700003\n472.9467460104536 -227.10785623822676\n", "569.3967280167384 321.64155939366015\n174.26844884460883 429.6595810311241\n370.35147036941436 183.13078216636134\n-235.4050068411455 -298.6732135803036\n-216.10794757997422 -322.9347779130263\n389.64852963058564 158.86921783363866\n585.7315511553911 -87.6595810311241\n", "879.4571385938416 1921.995424839786\n-4.360508702124832 1419.503269350546\n74.34576967975711 1329.5834620594173\n-116.02838299518454 1162.9500860709977\n-4.7199223546987525 1035.783161952163\n185.6542303202429 1202.4165379405827\n264.36050870212483 1112.496730649454\n", "10.0 -1.0\n13.5 7.0\n11.0 7.0\n11.0 18.0\n9.0 18.0\n9.0 7.0\n6.5 7.0\n", "5.969031795807311 16.910231207187465\n7.840552747753916 8.740322436189786\n8.272442198203134 8.992257948951828\n9.280184249251306 7.2647001471549615\n12.735299852845039 9.280184249251306\n11.727557801796866 11.007742051048172\n12.159447252246084 11.259677563810214\n", "10.0 18.0\n5.0 10.0\n9.0 10.0\n9.0 -4.0\n11.0 -4.0\n11.0 10.0\n15.0 10.0\n", "1399.682613875615 848.8846622095105\n987.1700470188647 750.125449043067\n1032.7319920813266 669.0507355861254\n568.9497602631227 408.4168132933322\n591.4857761004696 368.31534212108147\n1055.2680079186734 628.9492644138746\n1100.8299529811354 547.874550956933\n", "969.7608469791171 298.9322874475198\n706.30627510878 129.63391604183442\n767.6337833074624 103.92036439799222\n484.5913802504327 -571.1433348717151\n689.3238136355078 -656.9840636676995\n972.3662166925376 18.079635602007784\n1033.69372489122 -7.633916041834411\n", "414.1543739957118 1579.6313959187162\n179.0517742341383 639.6001370845488\n252.02767826931944 627.3315825548566\n88.88906127989867 -343.0507089399848\n92.8337047412598 -343.713874049698\n255.97232173068056 626.6684174451434\n328.9482257658617 614.3998629154512\n", "1026.9653570213309 473.83683586066854\n677.301374394874 336.8757127132413\n766.3281001827331 238.74064204279583\n258.2476588248042 -222.18263260227147\n259.59145845933796 -223.66391668786312\n767.6718998172669 237.25935795720417\n856.698625605126 139.12428728675872\n", "12.341640786499873 15.683281572999746\n8.76393202250021 14.118033988749895\n10.105572809000083 13.447213595499958\n5.186223258500546 3.6085144945008842\n6.97507764050038 2.7140873035009676\n11.894427190999917 12.552786404500042\n13.23606797749979 11.881966011250105\n", "628.3941412288082 634.1041428188165\n-20.47337300522679 176.55392811911338\n10.873316908710535 150.90953240700003\n-536.8403199055628 -518.5938447672173\n-270.5869537229838 -736.4129095812174\n277.12668309128946 -66.90953240700003\n308.4733730052268 -92.55392811911338\n", "748.6192516358833 464.19080361328065\n174.26844884460883 429.6595810311241\n370.35147036941436 183.13078216636134\n-235.4050068411455 -298.6732135803036\n-216.10794757997422 -322.9347779130263\n389.64852963058564 158.86921783363866\n585.7315511553911 -87.6595810311241\n", "879.4571385938416 1921.995424839786\n-4.360508702124832 1419.503269350546\n74.34576967975711 1329.5834620594173\n-228.89843398823302 1064.155594378259\n-117.58997334774722 936.9886702594242\n185.6542303202429 1202.4165379405827\n264.36050870212483 1112.496730649454\n", "10.0 -1.0\n13.5 7.0\n11.0 7.0\n11.0 20.0\n9.0 20.0\n9.0 7.0\n6.5 7.0\n", "10.0 23.0\n5.0 15.0\n9.0 15.0\n9.0 1.0\n11.0 1.0\n11.0 15.0\n15.0 15.0\n", "1720.682613875615 848.8846622095105\n1308.1700470188646 750.125449043067\n1353.7319920813266 669.0507355861254\n889.9497602631227 408.4168132933322\n912.4857761004696 368.31534212108147\n1376.2680079186734 628.9492644138746\n1421.8299529811354 547.874550956933\n", "1026.9879995097733 435.4205763709033\n706.30627510878 129.63391604183442\n767.6337833074624 103.92036439799222\n484.5913802504327 -571.1433348717151\n689.3238136355078 -656.9840636676995\n972.3662166925376 18.079635602007784\n1033.69372489122 -7.633916041834411\n", "414.1543739957118 1807.6313959187162\n179.0517742341383 867.6001370845488\n252.02767826931944 855.3315825548566\n88.88906127989867 -115.05070893998482\n92.8337047412598 -115.713874049698\n255.97232173068056 854.6684174451434\n328.9482257658617 842.3998629154512\n", "970.0358553761218 524.3170295872856\n658.10164259287 315.22303901057626\n766.1842819669878 238.5784497304163\n369.36776690140505 -321.00412091595933\n370.9992029674295 -322.16102037679195\n767.8157180330122 237.4215502695837\n875.89835740713 160.77696098942374\n", "11.894427190999917 14.788854381999831\n8.76393202250021 14.118033988749895\n10.105572809000083 13.447213595499958\n5.186223258500546 3.6085144945008842\n6.97507764050038 2.7140873035009676\n11.894427190999917 12.552786404500042\n13.23606797749979 11.881966011250105\n", "628.3941412288082 634.1041428188165\n-20.47337300522679 176.55392811911338\n10.873316908710535 150.90953240700003\n-1047.1954543244115 -1142.4316736717478\n-780.9420881418326 -1360.2507384857481\n277.12668309128946 -66.90953240700003\n308.4733730052268 -92.55392811911338\n", "748.6192516358833 464.19080361328065\n174.26844884460883 429.6595810311241\n376.2650853042894 175.69578664504309\n-229.49139190627045 -306.10820910162187\n-222.02156251484928 -315.49978239170804\n383.7349146957106 166.30421335495691\n585.7315511553911 -87.6595810311241\n", "879.4571385938416 1921.995424839786\n-4.360508702124832 1419.503269350546\n74.34576967975711 1329.5834620594173\n74.34576967975711 1329.5834620594173\n185.6542303202429 1202.4165379405827\n185.6542303202429 1202.4165379405827\n264.36050870212483 1112.496730649454\n", "10.0 1.0\n13.5 9.0\n11.0 9.0\n11.0 22.0\n9.0 22.0\n9.0 9.0\n6.5 9.0\n", "10.0 25.0\n5.0 15.0\n9.0 15.0\n9.0 1.0\n11.0 1.0\n11.0 15.0\n15.0 15.0\n", "1720.682613875615 848.8846622095105\n1308.1700470188646 750.125449043067\n1353.7319920813266 669.0507355861254\n780.9783712080936 347.1776398222812\n803.5143870454405 307.07616865003047\n1376.2680079186734 628.9492644138746\n1421.8299529811354 547.874550956933\n", "1026.9879995097733 435.4205763709033\n706.30627510878 129.63391604183442\n767.6337833074624 103.92036439799222\n515.1383062634181 -498.2880995680172\n719.8707396484933 -584.1288283640016\n972.3662166925376 18.079635602007784\n1033.69372489122 -7.633916041834411\n", "344.8510698491192 1816.7182971677676\n178.33686274870564 862.1477032179431\n252.00886480917646 855.1880974531038\n159.4649178821234 -124.4504164320756\n163.44718826377047 -124.8266113382831\n255.99113519082354 854.8119025468962\n329.66313725129436 847.8522967820569\n", "824.8449730416302 319.57180330122094\n658.10164259287 315.22303901057626\n766.1842819669878 238.5784497304163\n369.36776690140505 -321.00412091595933\n370.9992029674295 -322.16102037679195\n767.8157180330122 237.4215502695837\n875.89835740713 160.77696098942374\n", "11.0 15.0\n8.5 13.0\n10.0 13.0\n10.0 2.0\n12.0 2.0\n12.0 13.0\n13.5 13.0\n", "477.06054677954654 449.11997270940844\n-20.47337300522679 176.55392811911338\n10.873316908710535 150.90953240700003\n-1047.1954543244115 -1142.4316736717478\n-780.9420881418326 -1360.2507384857481\n277.12668309128946 -66.90953240700003\n308.4733730052268 -92.55392811911338\n", "748.6192516358833 464.19080361328065\n174.26844884460883 429.6595810311241\n374.70887084774336 177.65236441381106\n-231.0476063628165 -304.15163133285387\n-220.46534805830322 -317.45636016047604\n385.29112915225664 164.34763558618894\n585.7315511553911 -87.6595810311241\n", "906.4571385938416 1921.995424839786\n22.639491297875168 1419.503269350546\n101.34576967975711 1329.5834620594173\n101.34576967975711 1329.5834620594173\n212.6542303202429 1202.4165379405827\n212.6542303202429 1202.4165379405827\n291.36050870212483 1112.496730649454\n", "10.0 1.0\n13.5 9.0\n10.5 9.0\n10.5 22.0\n9.5 22.0\n9.5 9.0\n6.5 9.0\n", "10.0 10.0\n5.0 0.0\n9.0 0.0\n9.0 -14.0\n11.0 -14.0\n11.0 0.0\n15.0 0.0\n", "1720.682613875615 848.8846622095105\n1308.1700470188646 750.125449043067\n1353.7319920813266 669.0507355861254\n1198.5567340669652 581.8461525633487\n1221.092749904312 541.744681391098\n1376.2680079186734 628.9492644138746\n1421.8299529811354 547.874550956933\n", "1026.9879995097733 380.4205763709033\n706.30627510878 74.63391604183441\n767.6337833074624 48.920364397992216\n515.1383062634181 -553.2880995680172\n719.8707396484933 -639.1288283640016\n972.3662166925376 -36.920364397992216\n1033.69372489122 -62.63391604183441\n", "416.70429693475796 2577.331940062358\n178.33686274870564 862.1477032179431\n252.00886480917646 855.1880974531038\n159.4649178821234 -124.4504164320756\n163.44718826377047 -124.8266113382831\n255.99113519082354 854.8119025468962\n329.66313725129436 847.8522967820569\n", "824.8449730416302 319.57180330122094\n658.10164259287 315.22303901057626\n766.1842819669878 238.5784497304163\n711.8100073078555 161.90095462726862\n713.4414433738799 160.744055166436\n767.8157180330122 237.4215502695837\n875.89835740713 160.77696098942374\n", "11.0 15.0\n8.5 13.0\n10.0 13.0\n10.0 -9.0\n12.0 -9.0\n12.0 13.0\n13.5 13.0\n", "477.06054677954654 449.11997270940844\n-20.47337300522679 176.55392811911338\n126.5851722700348 56.24688650672965\n-931.4835989630873 -1237.0943195720183\n-896.6539435031569 -1265.5880925854776\n161.4148277299652 27.753113493270348\n308.4733730052268 -92.55392811911338\n", "748.6192516358833 633.1908036132807\n174.26844884460883 598.6595810311242\n374.70887084774336 346.6523644138111\n-231.0476063628165 -135.15163133285387\n-220.46534805830322 -148.45636016047604\n385.29112915225664 333.3476355861889\n585.7315511553911 81.3404189688759\n"]}, "short_description": "1. One-sentence summary:\nThe solution computes the positions of multiple points derived from an initial point and a direction vector by applying vector arithmetic and rotations to determine their coordinates in 2D space.\n\n2. Core algorithmic approach:\nPure computational geometry using basic vector operations (addition, subtraction, scalar multiplication, normalization, rotation) and line\u2013segment intersection tests.\n\n3. Reusable components:\n- Vector class (methods for addition, subtraction, dot-product, cross-product, normalization, scalar multiplication, and rotation)  \n- Line class (construct from point\u2013direction or coefficients, methods for projection, distance from point, intersection, bisector, and mirror operations)  \n- Segment intersection function (peresec_otr) implementing orientation tests and bounding-box checks for segment\u2013segment intersection."}
{"name": "464_B. Restore Cube ", "description": "Peter had a cube with non-zero length of a side. He put the cube into three-dimensional space in such a way that its vertices lay at integer points (it is possible that the cube's sides are not parallel to the coordinate axes). Then he took a piece of paper and wrote down eight lines, each containing three integers \u2014 coordinates of cube's vertex (a single line contains coordinates of a single vertex, each vertex is written exactly once), put the paper on the table and left. While Peter was away, his little brother Nick decided to play with the numbers on the paper. In one operation Nick could swap some numbers inside a single line (Nick didn't swap numbers from distinct lines). Nick could have performed any number of such operations.\n\nWhen Peter returned and found out about Nick's mischief, he started recollecting the original coordinates. Help Peter restore the original position of the points or else state that this is impossible and the numbers were initially recorded incorrectly.\n\nInput\n\nEach of the eight lines contains three space-separated integers \u2014 the numbers written on the piece of paper after Nick's mischief. All numbers do not exceed 106 in their absolute value.\n\nOutput\n\nIf there is a way to restore the cube, then print in the first line \"YES\". In each of the next eight lines print three integers \u2014 the restored coordinates of the points. The numbers in the i-th output line must be a permutation of the numbers in i-th input line. The numbers should represent the vertices of a cube with non-zero length of a side. If there are multiple possible ways, print any of them.\n\nIf there is no valid way, print \"NO\" (without the quotes) in the first line. Do not print anything else.\n\nExamples\n\nInput\n\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n\n\nOutput\n\nYES\n0 0 0\n0 0 1\n0 1 0\n1 0 0\n0 1 1\n1 0 1\n1 1 0\n1 1 1\n\n\nInput\n\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\n\nOutput\n\nNO", "solution": "from itertools import permutations as p\n\nd = lambda a, b: sum((i - j) ** 2 for i, j in zip(a, b))\nf = lambda a, b: [i + j - k for i, j, k in zip(a, b, q)]\ng = lambda t: sorted(sorted(q) for q in t)\n\nv = [sorted(map(int, input().split())) for i in range(8)]\nq = v.pop()\n\nu = g(v)\nfor a, b, c in p(v, 3):\n    for x in p(a):\n        s = 2 * d(q, x)\n        if not s: continue\n        for y in p(b):\n            if not 2 * d(q, y) == d(x, y) == s: continue\n            for z in p(c):\n                if not 2 * d(q, z) == d(x, z) == d(y, z) == s: continue\n                t = [x, y, z] + [f(x, y), f(x, z), f(y, z), f(f(x, y), z)]\n                if g(t) == u:\n                    print('YES')\n                    d = [str(sorted(i)) for i in t]\n                    for j in v:\n                        i = d.index(str(j))\n                        k = t.pop(i)\n                        print(*k)\n                        d.pop(i)\n                    print(*q)\n                    exit()\n\nprint('NO')", "difficulty": 8, "public_tests": {"input": ["0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n", "0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n"], "output": ["YES\n0 0 0 \n0 0 1 \n0 1 0 \n1 0 0 \n0 1 1 \n1 0 1 \n1 1 0 \n1 1 1 \n", "NO\n"]}, "private_tests": {"input": ["1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n", "-1 1 1\n0 1 1\n1 1 0\n1 0 0\n0 1 0\n1 1 1\n0 0 0\n0 0 1\n", "5 6 5\n5 3 3\n3 3 3\n5 5 3\n5 3 3\n5 3 3\n5 5 3\n3 5 5\n", "0 0 0\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n", "-845276 245666 -196657\n-353213 152573 375200\n-725585 -73510 322004\n-565997 524945 282107\n228911 298862 -938369\n-103564 -126706 -632492\n99377 -50368 -260120\n-143461 471749 -472904\n", "-6 1 3\n-6 1 3\n-5 0 0\n-3 -3 7\n-2 6 6\n0 4 9\n0 4 9\n3 3 10\n", "484554 -73939 147289\n333153 -73939 -152694\n-737739 33170 970401\n670418 784537 -73939\n333153 -152694 -737739\n-737739 670418 784537\n33170 -73939 970401\n-737739 484555 147289\n", "-5 -3 -8\n-8 8 -5\n-3 3 6\n6 3 8\n-8 6 -3\n8 -8 6\n-3 -5 3\n-5 3 8\n", "-83163 759234 174591\n77931 -88533 920334\n72567 974034 158481\n18861 169227 893484\n-61689 8127 839784\n678684 34971 13497\n174597 115521 732384\n77937 255141 812934\n", "830446 -93089 -271247\n50376 285279 761701\n509464 371358 90913\n-242554 -825792 165148\n-552177 744367 417385\n-403353 -293940 446078\n-437405 141814 -586870\n101762 55735 -896493\n", "-593659 350000 928723\n620619 638757 388513\n620619 -882416 -632172\n600244 312515 -843903\n292140 -535799 -881388\n-940276 -573284 -574312\n330653 696617 -573284\n-265180 658104 -901763\n", "-407872 -56765 -493131\n188018 -394436 -612309\n62413 -209242 162348\n-705817 -294501 -652655\n88703 241800 -871148\n-413679 -990326 -109927\n-533477 360978 -507187\n-275258 386648 43170\n", "-745038 -470013 -245590\n168756 -684402 -45561\n-75879 -670042 -603554\n-168996 -611497 -184954\n-609406 -27512 -217363\n207089 -195060 33124\n-542918 348573 -255696\n229392 -187045 -108360\n", "163459 129764 357112\n277260 476888 633667\n476888 504608 -146791\n163459 633667 277260\n705 476888 781163\n163459 781163 705\n-146791 163459 504608\n357112 129764 476888\n", "-4897 -1234 2265\n-4897 -3800 2265\n-4897 -1234 -301\n-3800 -2331 -301\n-2331 -1234 2265\n-2331 -1234 -301\n-3800 -2331 2265\n-4897 -3800 -301\n", "0 0 0\n1 0 0\n0 1 0\n1 1 0\n0 0 1\n1 0 1\n0 1 1\n1 1 1\n", "-223515 128661 119249\n-83250 119249 203469\n278216 128661 -223515\n-298323 268926 278216\n278216 -158058 343734\n119249 -158058 343734\n-83250 278216 203469\n119249 -298323 -391850\n", "411586 -316610 -430676\n-305714 -461321 402733\n-451106 423163 -312524\n-339083 407500 -437486\n391156 -440891 -309800\n387070 -332273 -447701\n-468131 -328187 398647\n-334997 419077 -457916\n", "0 0 0\n0 0 939177\n0 0 939177\n0 0 939177\n0 939177 939177\n0 939177 939177\n0 939177 939177\n939177 939177 939177\n", "65536 0 65536\n65536 0 0\n0 65536 0\n65536 65536 65536\n65536 0 65536\n0 0 0\n0 0 65536\n65536 0 65536\n", "-110591 329051 328269\n611888 45432 657925\n493733 776570 273666\n163587 -119250 273667\n392312 557286 877991\n557286 -220671 265008\n713309 173028 -55989\n891924 227630 429690\n", "802442 276413 311941\n132940 -916927 26771\n-629566 336080 371608\n-165395 813416 86438\n-404063 742775 288571\n848944 86438 -200923\n-689233 -344396 -379924\n97412 26771 -881399\n", "-1000000 1000000 1000000\n-1000000 1000000 -1000000\n-1000000 1000000 -1000000\n1000000 -1000000 1000000\n1000000 1000000 1000000\n-1000000 -1000000 1000000\n999999 1000000 -1000000\n-1000000 -1000000 -1000000\n", "-6 -10 -13\n2 -13 -15\n2 -6 -10\n2 2 -15\n6 -1 -13\n6 2 -1\n11 -3 -13\n11 2 -3\n", "-369 846 805\n-293 846 -369\n729 846 805\n-252 -369 805\n846 -293 729\n805 729 -252\n-252 -369 -293\n729 -293 -252\n", "-96608 -96608 100000\n100000 100000 -96608\n100000 -96608 -96608\n-96608 -96608 -96608\n-96608 100000 100000\n100000 100000 100000\n100000 100000 -96608\n-96608 -96608 100000\n", "-431644 -468238 -47168\n-152500 38126 -96046\n-507008 604168 -871390\n33597 -320912 410318\n231976 -765065 -282142\n90050 317270 -485921\n-693104 -301158 -245547\n-134816 689462 -299825\n", "-1000000 1000000 1000000\n-1000000 -1000000 -1000000\n-1000000 1000000 -1000000\n1000000 1000000 1000000\n1000000 -1000000 -1000000\n-1000000 1000000 1000000\n-1000000 -1000000 1000000\n1000000 1000000 -1000000\n", "-37445 372374 21189\n398542 125861 400869\n479373 -209864 -50773\n-364789 163030 67227\n505541 -260117 189198\n374701 -520 335205\n41059 -155444 -236032\n-26688 230533 -63613\n", "0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n", "-604518 -792421 -794968\n-639604 -845386 -664545\n-668076 -739456 -703162\n-770475 -692569 -880696\n-933661 -784375 -706917\n-774006 -756127 -774766\n-600987 -731410 -898351\n-847933 -827731 -710448\n", "524288 -524288 524288\n-524288 -524288 -524288\n524288 -524288 -524288\n524288 524288 -524288\n524288 -524288 524288\n524288 524288 524288\n-524288 524288 -524288\n-524289 524288 -524288\n", "486623 24823 303304\n-389873 -376490 -388969\n170755 -644350 631652\n291143 -838926 -571066\n984320 -169753 36666\n-157910 -911574 643812\n365331 -194393 -49365\n-716998 -37204 292047\n", "5 2 0\n3 -3 -4\n3 -6 0\n4 3 -4\n-1 -2 5\n-6 -3 1\n-5 6 -1\n2 0 6\n", "861017 -462500 -274005\n652263 66796 629450\n232201 -329899 -968706\n497126 89886 993064\n-197575 -694067 -406329\n463768 728693 -836382\n-164771 -429142 519939\n-561466 761497 -42438\n", "120639 -932662 -1032\n983000 -56439 15066\n-322992 -369232 -780849\n339080 -136928 -886422\n419570 845049 337026\n900456 201129 -288742\n-700359 578496 274688\n764559 -224350 -564462\n", "554547 757123 -270279\n935546 -159145 137545\n-160481 19278 -805548\n655167 -983971 121234\n119898 315968 -261101\n833590 -576147 -592458\n-58525 452591 -91856\n-694414 17942 -397724\n", "887691 577079 -337\n-193088 -342950 -683216\n740176 -59645 -120545\n592743 -30828 -283642\n724594 652051 -193925\n87788 -179853 -845476\n665286 -133780 -846313\n828383 -75309 -786168\n", "-524288 -524288 -524288\n-524288 524288 -524288\n-524288 -524288 524288\n-524288 524288 524288\n524288 -524288 -524288\n-524288 524288 524288\n524288 524288 524288\n524288 524288 -524288\n", "0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n", "6 -2 -2\n-5 1 -6\n6 -6 7\n6 3 4\n9 -7 8\n-9 -2 -6\n-9 1 6\n-9 -1 0\n", "36924 92680 350843\n697100 521211 -77688\n-351925 -610088 36924\n867468 -160261 -98984\n-181557 697100 -780456\n-588792 -133444 329547\n207292 -330629 71384\n526732 -759160 499915\n", "-6 -8 0\n-6 4 16\n-6 8 -12\n-6 20 4\n14 -8 0\n14 4 16\n14 8 -12\n14 20 4\n", "93 68 15\n93 43 23\n40 40 -30\n43 40 23\n93 -2 -5\n68 40 15\n93 40 -30\n40 -2 -5\n"], "output": ["NO\n", "NO\n", "NO\n", "NO\n", "YES\n-845276 245666 -196657\n-353213 152573 375200\n-725585 -73510 322004\n-565997 524945 282107\n-938369 298862 228911\n-632492 -126706 -103564\n-260120 99377 -50368\n-472904 471749 -143461\n", "YES\n-6 1 3 \n3 1 -6 \n0 -5 0 \n-3 7 -3 \n6 -2 6 \n0 4 9 \n9 4 0 \n3 10 3 \n", "NO\n", "YES\n-5 -3 -8\n-5 8 -8\n6 -3 3\n6 8 3\n6 -3 -8\n6 8 -8\n-5 -3 3\n-5 8 3\n", "YES\n-83163 174591 759234 \n-88533 77931 920334 \n72567 158481 974034 \n169227 18861 893484 \n8127 -61689 839784 \n13497 34971 678684 \n174597 115521 732384 \n77937 255141 812934 \n", "NO\n", "YES\n-593659 350000 928723\n638757 388513 620619\n-632172 -882416 620619\n600244 -843903 312515\n292140 -535799 -881388\n-940276 -574312 -573284\n330653 696617 -573284\n-901763 658104 -265180\n", "YES\n-407872 -56765 -493131\n188018 -394436 -612309\n-209242 62413 162348\n-705817 -652655 -294501\n88703 -871148 241800\n-109927 -990326 -413679\n-507187 -533477 360978\n386648 -275258 43170\n", "YES\n-745038 -470013 -245590\n-684402 -45561 168756\n-603554 -75879 -670042\n-168996 -611497 -184954\n-27512 -217363 -609406\n33124 207089 -195060\n-542918 348573 -255696\n-108360 -187045 229392\n", "YES\n163459 129764 357112\n476888 277260 633667\n476888 -146791 504608\n163459 277260 633667\n476888 705 781163\n163459 705 781163\n163459 -146791 504608\n476888 129764 357112\n", "YES\n-4897 -1234 2265\n-4897 -3800 2265\n-4897 -1234 -301\n-2331 -3800 -301\n-2331 -1234 2265\n-2331 -1234 -301\n-2331 -3800 2265\n-4897 -3800 -301\n", "YES\n0 0 0\n1 0 0\n0 1 0\n1 1 0\n0 0 1\n1 0 1\n0 1 1\n1 1 1\n", "NO\n", "YES\n411586 -316610 -430676\n402733 -305714 -461321\n423163 -312524 -451106\n407500 -339083 -437486\n391156 -309800 -440891\n387070 -332273 -447701\n398647 -328187 -468131\n419077 -334997 -457916\n", "YES\n0 0 0 \n0 0 939177 \n0 939177 0 \n939177 0 0 \n0 939177 939177 \n939177 0 939177 \n939177 939177 0 \n939177 939177 939177 \n", "YES\n65536 0 65536\n65536 0 0\n0 65536 0\n65536 65536 65536\n65536 65536 0\n0 0 0\n0 0 65536\n0 65536 65536\n", "NO\n", "NO\n", "NO\n", "YES\n-6 -10 -13\n-15 2 -13\n-6 -10 2\n-15 2 2\n6 -1 -13\n6 -1 2\n-3 11 -13\n-3 11 2\n", "YES\n-369 805 846 \n-369 -293 846 \n729 805 846 \n-369 805 -252 \n729 -293 846 \n729 805 -252 \n-369 -293 -252 \n729 -293 -252 \n", "YES\n-96608 -96608 100000 \n-96608 100000 100000 \n-96608 100000 -96608 \n-96608 -96608 -96608 \n100000 -96608 100000 \n100000 100000 100000 \n100000 100000 -96608 \n100000 -96608 -96608 \n", "NO\n", "YES\n-1000000 1000000 1000000 \n-1000000 -1000000 -1000000 \n-1000000 -1000000 1000000 \n1000000 1000000 1000000 \n-1000000 1000000 -1000000 \n1000000 -1000000 1000000 \n1000000 -1000000 -1000000 \n1000000 1000000 -1000000 \n", "NO\n", "NO\n", "YES\n-794968 -792421 -604518 \n-639604 -845386 -664545 \n-703162 -739456 -668076 \n-692569 -880696 -770475 \n-784375 -933661 -706917 \n-756127 -774766 -774006 \n-731410 -898351 -600987 \n-847933 -827731 -710448 \n", "NO\n", "NO\n", "NO\n", "YES\n861017 -462500 -274005\n629450 66796 652263\n-329899 232201 -968706\n497126 993064 89886\n-197575 -694067 -406329\n728693 463768 -836382\n-429142 -164771 519939\n-561466 761497 -42438\n", "NO\n", "YES\n554547 757123 -270279\n-159145 935546 137545\n19278 -160481 -805548\n121234 655167 -983971\n-261101 119898 315968\n-592458 833590 -576147\n452591 -58525 -91856\n-694414 17942 -397724\n", "YES\n887691 577079 -337\n-342950 -683216 -193088\n-120545 740176 -59645\n-283642 -30828 592743\n724594 -193925 652051\n-179853 87788 -845476\n665286 -846313 -133780\n828383 -75309 -786168\n", "YES\n-524288 -524288 -524288 \n-524288 -524288 524288 \n-524288 524288 -524288 \n-524288 524288 524288 \n524288 -524288 -524288 \n524288 -524288 524288 \n524288 524288 524288 \n524288 524288 -524288 \n", "NO\n", "NO\n", "YES\n36924 92680 350843\n697100 -77688 521211\n36924 -610088 -351925\n867468 -98984 -160261\n697100 -780456 -181557\n-133444 -588792 329547\n207292 71384 -330629\n526732 -759160 499915\n", "YES\n-6 -8 0\n-6 4 16\n-6 8 -12\n-6 20 4\n14 -8 0\n14 4 16\n14 8 -12\n14 20 4\n", "YES\n93 68 15\n93 23 43\n40 40 -30\n40 23 43\n93 -5 -2\n40 68 15\n93 40 -30\n40 -5 -2\n"]}, "generated_tests": {"input": ["1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 0 1\n1 1 1\n1 1 1\n", "-1 1 1\n0 1 1\n1 1 0\n1 0 0\n0 1 0\n1 1 1\n0 0 0\n-1 0 1\n", "5 6 5\n5 3 3\n3 3 3\n5 5 3\n6 3 3\n5 3 3\n5 5 3\n3 5 5\n", "0 0 0\n1 1 1\n2 2 2\n3 6 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n", "-845276 245666 -164130\n-353213 152573 375200\n-725585 -73510 322004\n-565997 524945 282107\n228911 298862 -938369\n-103564 -126706 -632492\n99377 -50368 -260120\n-143461 471749 -472904\n", "-6 1 3\n-6 1 3\n-5 0 0\n-3 -1 7\n-2 6 6\n0 4 9\n0 4 9\n3 3 10\n", "484554 -73939 147289\n333153 -73939 -152694\n-737739 33170 970401\n670418 784537 -73939\n333153 -152694 -737739\n-737739 670418 784537\n33170 -73939 970401\n-737739 484555 236965\n", "-5 -3 -8\n-8 8 -5\n-3 3 6\n6 3 2\n-8 6 -3\n8 -8 6\n-3 -5 3\n-5 3 8\n", "-83163 759234 174591\n77931 -88533 920334\n72567 974034 158481\n27527 169227 893484\n-61689 8127 839784\n678684 34971 13497\n174597 115521 732384\n77937 255141 812934\n", "830446 -93089 -271247\n50376 375872 761701\n509464 371358 90913\n-242554 -825792 165148\n-552177 744367 417385\n-403353 -293940 446078\n-437405 141814 -586870\n101762 55735 -896493\n", "-593659 350000 928723\n620619 638757 388513\n620619 -882416 -632172\n600244 116141 -843903\n292140 -535799 -881388\n-940276 -573284 -574312\n330653 696617 -573284\n-265180 658104 -901763\n", "-407872 -56765 -493131\n188018 -394436 -612309\n62413 -209242 302274\n-705817 -294501 -652655\n88703 241800 -871148\n-413679 -990326 -109927\n-533477 360978 -507187\n-275258 386648 43170\n", "-745038 -470013 -245590\n168756 -684402 -55421\n-75879 -670042 -603554\n-168996 -611497 -184954\n-609406 -27512 -217363\n207089 -195060 33124\n-542918 348573 -255696\n229392 -187045 -108360\n", "163459 129764 357112\n277260 476888 42494\n476888 504608 -146791\n163459 633667 277260\n705 476888 781163\n163459 781163 705\n-146791 163459 504608\n357112 129764 476888\n", "-4897 -1234 2265\n-4897 -3800 2265\n-6570 -1234 -301\n-3800 -2331 -301\n-2331 -1234 2265\n-2331 -1234 -301\n-3800 -2331 2265\n-4897 -3800 -301\n", "0 0 0\n1 0 0\n0 1 0\n1 1 0\n0 0 1\n1 0 1\n0 1 1\n1 2 1\n", "-223515 128661 119249\n-83250 119249 203469\n278216 184952 -223515\n-298323 268926 278216\n278216 -158058 343734\n119249 -158058 343734\n-83250 278216 203469\n119249 -298323 -391850\n", "411586 -316610 -430676\n-305714 -461321 402733\n-451106 423163 -312524\n-339083 407500 -437486\n211530 -440891 -309800\n387070 -332273 -447701\n-468131 -328187 398647\n-334997 419077 -457916\n", "-1 0 0\n0 0 939177\n0 0 939177\n0 0 939177\n0 939177 939177\n0 939177 939177\n0 939177 939177\n939177 939177 939177\n", "65536 0 65536\n65536 0 0\n0 65536 0\n65536 20167 65536\n65536 0 65536\n0 0 0\n0 0 65536\n65536 0 65536\n", "-110591 329051 328269\n1051894 45432 657925\n493733 776570 273666\n163587 -119250 273667\n392312 557286 877991\n557286 -220671 265008\n713309 173028 -55989\n891924 227630 429690\n", "802442 276413 311941\n132940 -916927 26771\n-629566 336080 371608\n-291923 813416 86438\n-404063 742775 288571\n848944 86438 -200923\n-689233 -344396 -379924\n97412 26771 -881399\n", "-1000000 1000000 1000000\n-1000000 1000000 -1000000\n-1000000 0000000 -1000000\n1000000 -1000000 1000000\n1000000 1000000 1000000\n-1000000 -1000000 1000000\n999999 1000000 -1000000\n-1000000 -1000000 -1000000\n", "-6 -10 -13\n2 -13 -15\n2 -6 -10\n2 2 -15\n6 -1 -13\n6 2 -1\n11 -3 -13\n11 2 -1\n", "-369 846 805\n-293 925 -369\n729 846 805\n-252 -369 805\n846 -293 729\n805 729 -252\n-252 -369 -293\n729 -293 -252\n", "-96608 -96608 100000\n100000 100000 -96608\n100000 -96608 -96608\n-96608 -96608 -96608\n-96608 100000 100000\n100000 100000 100000\n100000 100000 -96608\n-96608 -179332 100000\n", "-431644 -468238 -47168\n-152500 38126 -96046\n-507008 604168 -871390\n33597 -320912 92877\n231976 -765065 -282142\n90050 317270 -485921\n-693104 -301158 -245547\n-134816 689462 -299825\n", "-1000000 1000100 1000000\n-1000000 -1000000 -1000000\n-1000000 1000000 -1000000\n1000000 1000000 1000000\n1000000 -1000000 -1000000\n-1000000 1000000 1000000\n-1000000 -1000000 1000000\n1000000 1000000 -1000000\n", "-37445 372374 21189\n398542 125861 400869\n479373 -209864 -50773\n-364789 163030 67227\n505541 -260117 189198\n374701 -520 335205\n41059 -155444 -236032\n-26688 53233 -63613\n", "0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n", "-604518 -792421 -794968\n-639604 -845386 -664545\n-668076 -739456 -703162\n-770475 -692569 -880696\n-933661 -784375 -706917\n-774006 -74171 -774766\n-600987 -731410 -898351\n-847933 -827731 -710448\n", "524288 -524288 524288\n-524288 -524288 -524288\n524288 -524288 -524288\n524288 524288 -586430\n524288 -524288 524288\n524288 524288 524288\n-524288 524288 -524288\n-524289 524288 -524288\n", "486623 24823 303304\n-389873 -636937 -388969\n170755 -644350 631652\n291143 -838926 -571066\n984320 -169753 36666\n-157910 -911574 643812\n365331 -194393 -49365\n-716998 -37204 292047\n", "5 2 0\n3 -3 -4\n3 -6 0\n4 3 -4\n-1 -2 5\n-6 -3 0\n-5 6 -1\n2 0 6\n", "861017 -462500 -274005\n652263 66796 964736\n232201 -329899 -968706\n497126 89886 993064\n-197575 -694067 -406329\n463768 728693 -836382\n-164771 -429142 519939\n-561466 761497 -42438\n", "120639 -932662 -1032\n983000 -56439 15066\n-322992 -369232 -780849\n339080 -215995 -886422\n419570 845049 337026\n900456 201129 -288742\n-700359 578496 274688\n764559 -224350 -564462\n", "554547 757123 -270279\n935546 -159145 215854\n-160481 19278 -805548\n655167 -983971 121234\n119898 315968 -261101\n833590 -576147 -592458\n-58525 452591 -91856\n-694414 17942 -397724\n", "887691 577079 -337\n-193088 -342950 -683216\n1238628 -59645 -120545\n592743 -30828 -283642\n724594 652051 -193925\n87788 -179853 -845476\n665286 -133780 -846313\n828383 -75309 -786168\n", "-524288 -524288 -524288\n-524288 524288 -524288\n-524288 -524288 524288\n-524288 524288 524288\n524288 -524288 -524288\n-415302 524288 524288\n524288 524288 524288\n524288 524288 -524288\n", "0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n", "6 -2 -2\n-5 1 -6\n6 -6 7\n6 3 4\n9 -7 8\n-9 -2 -6\n-9 1 6\n-9 -1 -1\n", "36924 92680 350843\n697100 521211 -109947\n-351925 -610088 36924\n867468 -160261 -98984\n-181557 697100 -780456\n-588792 -133444 329547\n207292 -330629 71384\n526732 -759160 499915\n", "-7 -8 0\n-6 4 16\n-6 8 -12\n-6 20 4\n14 -8 0\n14 4 16\n14 8 -12\n14 20 4\n", "93 68 15\n93 43 23\n40 40 -30\n43 34 23\n93 -2 -5\n68 40 15\n93 40 -30\n40 -2 -5\n", "0 0 0\n0 0 1\n0 0 1\n0 -1 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n", "0 0 0\n0 0 0\n0 0 0\n0 0 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n", "1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 2 1\n1 0 1\n1 1 1\n1 1 1\n", "-1 1 1\n0 1 2\n1 1 0\n1 0 0\n0 1 0\n1 1 1\n0 0 0\n-1 0 1\n"], "output": ["NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary  \nGiven eight 3-dimensional points, determine whether you can choose one as an origin and three equal-length, pairwise orthogonal edge vectors so that all eight points arise as the origin plus every subset sum of those three vectors, and if so, reconstruct the mapping.\n\n2. Core algorithmic approach  \nBrute-force search over all choices of origin and triplets of points (and their coordinate permutations) to identify three basis vectors of equal squared length and mutual orthogonality (using distance checks), then generate the full 8-point set via subset sums and compare via sorted signatures.\n\n3. Reusable components  \n- A squared-Euclidean-distance function (d = lambda a, b: sum((i-j)**2 for i,j in zip(a,b))).  \n- Vector arithmetic lambdas for addition/subtraction (e.g. f = lambda a,b: [i+j-k for i,j,k in zip(a,b,q)]).  \n- Canonical sorting/signature of point-sets (g = lambda t: sorted(sorted(p) for p in t)) for fast isomorphism checks."}
{"name": "1163_C1. Power Transmission (Easy Edition)", "description": "This problem is same as the next one, but has smaller constraints.\n\nIt was a Sunday morning when the three friends Selena, Shiro and Katie decided to have a trip to the nearby power station (do not try this at home). After arriving at the power station, the cats got impressed with a large power transmission system consisting of many chimneys, electric poles, and wires. Since they are cats, they found those things gigantic.\n\nAt the entrance of the station, there is a map describing the complicated wiring system. Selena is the best at math among three friends. He decided to draw the map on the Cartesian plane. Each pole is now a point at some coordinates (x_i, y_i). Since every pole is different, all of the points representing these poles are distinct. Also, every two poles are connected with each other by wires. A wire is a straight line on the plane infinite in both directions. If there are more than two poles lying on the same line, they are connected by a single common wire.\n\nSelena thinks, that whenever two different electric wires intersect, they may interfere with each other and cause damage. So he wonders, how many pairs are intersecting? Could you help him with this problem?\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 50) \u2014 the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 \u2264 x_i, y_i \u2264 10^4) \u2014 the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.\n\nOutput\n\nPrint a single integer \u2014 the number of pairs of wires that are intersecting.\n\nExamples\n\nInput\n\n\n4\n0 0\n1 1\n0 3\n1 2\n\n\nOutput\n\n\n14\n\n\nInput\n\n\n4\n0 0\n0 2\n0 4\n2 0\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n3\n-1 -1\n1 0\n3 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example:\n\n<image>\n\nIn the second example:\n\n<image>\n\nNote that the three poles (0, 0), (0, 2) and (0, 4) are connected by a single wire.\n\nIn the third example:\n\n<image>", "solution": "import sys\nimport collections\nimport math\nimport heapq\nfrom operator import itemgetter\n\ndef getint():\n    return int(input())\n\ndef getints():\n    return [int(x) for x in input().split(' ')]\n\nn = getint()\npoints = [tuple(getints()) for _ in range(n)]\nresult = 0\n\nslopes = collections.defaultdict(set)\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        x1, y1, x2, y2 = points[i][0], points[i][1], points[j][0], points[j][1]\n        a, b = y1 - y2, x1 - x2\n\n        d = math.gcd(a, b)\n        a, b = a // d, b // d\n        if a < 0 or (a == 0 and b < 0):\n            a, b = -a, -b\n        \n        c = a * x1 - b * y1\n        slope = (a, b)\n        slopes[slope].add(c)\n\nslopeGroups = [(ab[0], ab[1], len(cs)) for ab, cs in slopes.items()]\nm = len(slopeGroups)\n\nfor i in range(m - 1):\n    intersects = 0\n    for j in range(i + 1, m):\n        intersects += slopeGroups[j][2]\n    result += slopeGroups[i][2] * intersects\n\nprint(str(result))", "difficulty": 9, "public_tests": {"input": ["4\n0 0\n1 1\n0 3\n1 2\n", "4\n0 0\n0 2\n0 4\n2 0\n", "3\n-1 -1\n1 0\n3 1\n"], "output": ["14\n", "6\n", "0\n"]}, "private_tests": {"input": ["2\n10000 10000\n-10000 -10000\n", "5\n-8893 8986\n-3629 9045\n-7719 -6470\n-258 4491\n-6902 -6866\n", "25\n1964 -4517\n5939 -4080\n9503 -7541\n-5037 -6950\n-9914 5015\n-435 7555\n-9321 -2202\n-5036 4224\n4946 -6785\n-6824 -9830\n-9124 9117\n-8396 -2748\n9284 556\n-1672 -6681\n-8782 9912\n-8164 4679\n1804 -6201\n-1155 2405\n-858 4105\n419 -7325\n-8034 -3084\n-7823 -5829\n-5784 5391\n9515 5259\n-8078 752\n", "20\n-5118 -9140\n-5118 -7807\n-5118 -5328\n-5118 -3139\n-5118 -1442\n-5118 -1169\n-5118 -733\n-5118 3460\n-5118 8555\n-5118 9702\n-3971 -9140\n-3971 -7807\n-3971 -5328\n-3971 -3139\n-3971 -1442\n-3971 -1169\n-3971 -733\n-3971 3460\n-3971 8555\n-3971 9702\n", "10\n-5475 1753\n-8077 -5005\n7903 -131\n5159 9077\n5159 9076\n-6761 4557\n-9188 -9329\n-4591 617\n-9686 -6410\n648 -1608\n", "21\n-8207 -8742\n-8207 2162\n-8207 3741\n-6190 -8742\n-6190 2162\n-6190 3741\n-2214 -8742\n-2214 2162\n-2214 3741\n-1839 -8742\n-1839 2162\n-1839 3741\n207 -8742\n207 2162\n207 3741\n3032 -8742\n3032 2162\n3032 3741\n8740 -8742\n8740 2162\n8740 3741\n", "6\n-9129 -8491\n-9129 -1754\n-9129 -1316\n1679 -8491\n1679 -1754\n1679 -1316\n", "25\n-10000 -10000\n-10000 -5000\n-10000 0\n-10000 5000\n-10000 10000\n-5000 -10000\n-5000 -5000\n-5000 0\n-5000 5000\n-5000 10000\n0 -10000\n0 -5000\n0 0\n0 5000\n0 10000\n5000 -10000\n5000 -5000\n5000 0\n5000 5000\n5000 10000\n10000 -10000\n10000 -5000\n10000 0\n10000 5000\n10000 10000\n", "3\n-4928 7147\n3808 3567\n2434 8649\n", "16\n297 3286\n-9374 4754\n7891 -4091\n6087 -1252\n3371 -858\n789 -9370\n7241 2950\n-7390 355\n-5536 -3119\n2413 -5560\n4673 7622\n5344 -9455\n1918 -8370\n-6034 -4144\n9018 -996\n-7542 -9138\n", "2\n6757 4799\n-1343 -7745\n", "4\n5648 -804\n1518 -2267\n7358 -6618\n-4504 2047\n", "4\n-3955 7228\n-2267 7358\n-5256 -1266\n9674 -3048\n", "2\n8303 2432\n-7745 -4751\n", "5\n8456 -2932\n9045 -7719\n-10000 6748\n9044 -7720\n-1125 -914\n", "12\n796 -415\n796 169\n796 2695\n1979 -415\n1979 169\n1979 2695\n5371 -415\n5371 169\n5371 2695\n8366 -415\n8366 169\n8366 2695\n", "15\n-7871 -4833\n-7871 -1936\n-7871 425\n-4790 -4833\n-4790 -1936\n-4790 425\n912 -4833\n912 -1936\n912 425\n4236 -4833\n4236 -1936\n4236 425\n8382 -4833\n8382 -1936\n8382 425\n", "42\n-5391 -2932\n-5391 -2868\n-5391 1744\n-5391 2236\n-5391 4148\n-5391 5217\n-5391 6188\n-3584 -2932\n-3584 -2868\n-3584 1744\n-3584 2236\n-3584 4148\n-3584 5217\n-3584 6188\n-1657 -2932\n-1657 -2868\n-1657 1744\n-1657 2236\n-1657 4148\n-1657 5217\n-1657 6188\n3218 -2932\n3218 -2868\n3218 1744\n3218 2236\n3218 4148\n3218 5217\n3218 6188\n7582 -2932\n7582 -2868\n7582 1744\n7582 2236\n7582 4148\n7582 5217\n7582 6188\n8131 -2932\n8131 -2868\n8131 1744\n8131 2236\n8131 4148\n8131 5217\n8131 6188\n", "4\n-10000 -10000\n-10000 10000\n10000 -10000\n10000 10000\n", "3\n-1547 4830\n3567 2434\n1522 -4418\n", "10\n3986 -4462\n-5492 -8077\n-5005 4012\n8092 5848\n5159 9077\n-9814 5652\n-2848 -6707\n-1528 8298\n9444 -4143\n-7928 1163\n", "12\n1804 -7018\n-3551 1915\n-8148 5497\n-3430 -2988\n377 -1656\n-3799 6338\n-4248 -8428\n7371 -5005\n1216 406\n-294 5589\n-6477 -8889\n-8919 3676\n", "25\n5061 -2382\n-4080 9503\n-4081 9503\n5061 -2381\n-6549 9641\n-8510 6047\n-8110 8720\n6829 -8424\n-1413 -5926\n2446 -3190\n5405 8413\n8272 6829\n3034 -3978\n-3403 3036\n1383 4041\n829 327\n-4079 9504\n9293 -5091\n486 -5050\n6384 3727\n4787 6634\n4492 1126\n-1288 -4938\n4345 8056\n-3402 3035\n", "20\n-7068 -9088\n-7068 -7174\n-7068 -6012\n-7068 -3037\n-7068 3299\n532 -9088\n532 -7174\n532 -6012\n532 -3037\n532 3299\n6883 -9088\n6883 -7174\n6883 -6012\n6883 -3037\n6883 3299\n8251 -9088\n8251 -7174\n8251 -6012\n8251 -3037\n8251 3299\n", "16\n0 0\n0 2\n0 4\n0 6\n2 0\n2 2\n2 4\n2 6\n4 0\n4 2\n4 4\n4 6\n6 0\n6 2\n6 4\n6 6\n", "4\n-10000 -10000\n-10000 -9999\n10000 10000\n9999 10000\n", "9\n-8172 -8016\n-8172 -63\n-8172 9586\n-1609 -8016\n-1609 -63\n-1609 9586\n2972 -8016\n2972 -63\n2972 9586\n", "16\n-7073 -2432\n4754 7891\n4753 7890\n4755 7892\n1033 -7465\n4487 -9951\n-4613 3633\n-6753 9089\n5853 -1919\n-236 5170\n4754 7889\n-9989 -3488\n-1390 5520\n3139 8543\n4754 7890\n7576 5150\n", "12\n-9440 -8967\n1915 -8148\n-7216 8361\n6338 -4248\n-1425 -2251\n1216 406\n-2676 8355\n-8889 -8919\n-1163 -4185\n5018 -7302\n-2724 3986\n-7890 1900\n"], "output": ["0\n", "45\n", "44850\n", "5105\n", "990\n", "9156\n", "51\n", "9324\n", "3\n", "7140\n", "0\n", "15\n", "15\n", "0\n", "45\n", "894\n", "2265\n", "206367\n", "13\n", "3\n", "990\n", "2145\n", "43365\n", "8240\n", "1783\n", "14\n", "270\n", "6670\n", "2016\n"]}, "generated_tests": {"input": ["2\n10010 10000\n-10000 -10000\n", "5\n-8893 8986\n-3629 9045\n-7719 -3639\n-258 4491\n-6902 -6866\n", "25\n1964 -4517\n5939 -4080\n9503 -7541\n-5037 -6950\n-9914 5015\n-435 7555\n-9321 -2202\n-5036 4224\n4946 -6785\n-6824 -9830\n-9124 9117\n-8396 -2748\n9284 556\n-1672 -6681\n-8782 9912\n-8164 4679\n1804 -6201\n-1155 2405\n-858 4105\n419 -6089\n-8034 -3084\n-7823 -5829\n-5784 5391\n9515 5259\n-8078 752\n", "20\n-5118 -9140\n-5118 -7807\n-5118 -5328\n-5118 -3139\n-5118 -1442\n-7721 -1169\n-5118 -733\n-5118 3460\n-5118 8555\n-5118 9702\n-3971 -9140\n-3971 -7807\n-3971 -5328\n-3971 -3139\n-3971 -1442\n-3971 -1169\n-3971 -733\n-3971 3460\n-3971 8555\n-3971 9702\n", "10\n-5475 1753\n-8077 -5005\n7903 -131\n5159 9077\n5159 9076\n-1962 4557\n-9188 -9329\n-4591 617\n-9686 -6410\n648 -1608\n", "6\n-9129 -8491\n-9129 -1754\n-9129 -2318\n1679 -8491\n1679 -1754\n1679 -1316\n", "25\n-10000 -10000\n-10000 -5000\n-10000 0\n-10000 5000\n-10000 10000\n-5000 -10000\n-5000 -5000\n-5000 -1\n-5000 5000\n-5000 10000\n0 -10000\n0 -5000\n0 0\n0 5000\n0 10000\n5000 -10000\n5000 -5000\n5000 0\n5000 5000\n5000 10000\n10000 -10000\n10000 -5000\n10000 0\n10000 5000\n10000 10000\n", "3\n-4928 7147\n6324 3567\n2434 8649\n", "16\n297 3286\n-9374 4754\n7891 -4091\n6087 -1252\n3371 -858\n789 -9370\n7241 4081\n-7390 355\n-5536 -3119\n2413 -5560\n4673 7622\n5344 -9455\n1918 -8370\n-6034 -4144\n9018 -996\n-7542 -9138\n", "4\n5648 -804\n1518 -3447\n7358 -6618\n-4504 2047\n", "12\n796 -415\n796 169\n796 2695\n1979 -415\n1979 169\n1979 2695\n5371 -734\n5371 169\n5371 2695\n8366 -415\n8366 169\n8366 2695\n", "15\n-7871 -4833\n-7871 -1936\n-7871 425\n-4790 -4833\n-4790 -1936\n-4790 425\n912 -4833\n912 -1936\n912 425\n4236 -4833\n4236 -1936\n4236 425\n8382 -4833\n8382 -222\n8382 425\n", "42\n-5391 -2932\n-5391 -2868\n-5391 1744\n-5391 2236\n-5391 4148\n-5391 5217\n-5391 6188\n-3584 -2932\n-3584 -2868\n-3584 1744\n-3584 2236\n-3584 4148\n-3584 5217\n-3584 6188\n-1657 -2932\n-1657 -2868\n-1657 1744\n-1657 2236\n-1657 4148\n-1657 5217\n-1657 6188\n3218 -2932\n3218 -2868\n3218 1196\n3218 2236\n3218 4148\n3218 5217\n3218 6188\n7582 -2932\n7582 -2868\n7582 1744\n7582 2236\n7582 4148\n7582 5217\n7582 6188\n8131 -2932\n8131 -2868\n8131 1744\n8131 2236\n8131 4148\n8131 5217\n8131 6188\n", "4\n-10000 -10000\n-10000 10000\n10000 -10000\n00000 10000\n", "12\n1804 -10539\n-3551 1915\n-8148 5497\n-3430 -2988\n377 -1656\n-3799 6338\n-4248 -8428\n7371 -5005\n1216 406\n-294 5589\n-6477 -8889\n-8919 3676\n", "25\n5061 -2382\n-4080 9503\n-4081 9503\n5061 -2381\n-6549 9641\n-8510 6047\n-8110 8720\n6829 -8424\n-1413 -5926\n2446 -3190\n5405 8413\n8272 6829\n3034 -3978\n-3403 3036\n1947 4041\n829 327\n-4079 9504\n9293 -5091\n486 -5050\n6384 3727\n4787 6634\n4492 1126\n-1288 -4938\n4345 8056\n-3402 3035\n", "20\n-7068 -9088\n-7068 -7174\n-7068 -6012\n-7068 -3037\n-7068 3299\n532 -9088\n532 -7174\n532 -6012\n532 -3037\n532 3299\n6883 -9088\n4907 -7174\n6883 -6012\n6883 -3037\n6883 3299\n8251 -9088\n8251 -7174\n8251 -6012\n8251 -3037\n8251 3299\n", "16\n0 0\n0 2\n0 4\n0 6\n2 0\n2 2\n2 4\n2 6\n4 0\n4 2\n4 4\n4 6\n6 0\n6 2\n6 7\n6 6\n", "9\n-8172 -8016\n-8172 -63\n-8172 9586\n-1609 -8016\n-1609 -63\n-1609 13859\n2972 -8016\n2972 -63\n2972 9586\n", "16\n-7073 -2432\n4754 7891\n4753 7890\n4755 5209\n1033 -7465\n4487 -9951\n-4613 3633\n-6753 9089\n5853 -1919\n-236 5170\n4754 7889\n-9989 -3488\n-1390 5520\n3139 8543\n4754 7890\n7576 5150\n", "4\n0 0\n1 1\n1 3\n1 2\n", "20\n-5118 -9140\n-5118 -7807\n-5118 -5328\n-5118 -3139\n-5118 -1442\n-7721 -1169\n-5118 -733\n-5118 3460\n-5118 8555\n-3732 9702\n-3971 -9140\n-3971 -7807\n-3971 -5328\n-3971 -3139\n-3971 -1442\n-3971 -1169\n-3971 -733\n-3971 3460\n-3971 8555\n-3971 9702\n", "6\n-9129 -8491\n-9129 -1754\n-9129 -2318\n1679 -9767\n1679 -1754\n1679 -1316\n", "25\n-10000 -10000\n-10000 -5000\n-10000 0\n-10000 5000\n-10000 10000\n-5000 -10000\n-5000 -5000\n-5000 -1\n-5000 5000\n-5000 10000\n0 -10000\n0 -5000\n0 0\n0 5000\n0 10000\n5000 -10000\n5000 -5000\n3859 0\n5000 5000\n5000 10000\n10000 -10000\n10000 -5000\n10000 0\n10000 5000\n10000 10000\n", "12\n796 -415\n796 169\n796 2695\n1979 -415\n1979 169\n3370 2695\n5371 -734\n5371 169\n5371 2695\n8366 -415\n8366 169\n8366 2695\n", "15\n-7871 -4833\n-7871 -1936\n-7871 425\n-4790 -7798\n-4790 -1936\n-4790 425\n912 -4833\n912 -1936\n912 425\n4236 -4833\n4236 -1936\n4236 425\n8382 -4833\n8382 -222\n8382 425\n", "20\n-7068 -9088\n-7068 -7174\n-7068 -6012\n-7068 -3037\n-7068 3299\n532 -9088\n532 -7174\n532 -6012\n532 -3037\n532 3299\n6883 -9088\n4907 -7174\n6883 -6012\n6883 -2084\n6883 3299\n8251 -9088\n8251 -7174\n8251 -6012\n8251 -3037\n8251 3299\n", "16\n0 0\n0 2\n0 4\n0 6\n2 0\n2 2\n3 4\n2 6\n4 0\n4 2\n4 4\n4 6\n6 0\n6 2\n6 7\n6 6\n", "9\n-8172 -8016\n-8172 -63\n-8172 9586\n-1609 -8016\n-1609 -63\n-1609 13859\n2972 -8016\n2972 -63\n457 9586\n", "20\n-5118 -9140\n-5118 -7807\n-5118 -5328\n-5118 -3139\n-5118 -1442\n-7721 -1169\n-5118 -733\n-5118 3460\n-5118 8555\n-3732 9702\n-3971 -9140\n-3971 -7807\n-3971 -5328\n-3971 -3139\n-3971 -1442\n-3971 -1169\n-3971 -733\n-6057 3460\n-3971 8555\n-3971 9702\n", "6\n-9129 -8491\n-13019 -1754\n-9129 -2318\n1679 -9767\n1679 -1754\n1679 -1316\n", "25\n-10000 -10000\n-10000 -5000\n-10000 0\n-10000 5000\n-10000 10100\n-5000 -10000\n-5000 -5000\n-5000 -1\n-5000 5000\n-5000 10000\n0 -10000\n0 -5000\n0 0\n0 5000\n0 10000\n5000 -10000\n5000 -5000\n3859 0\n5000 5000\n5000 10000\n10000 -10000\n10000 -5000\n10000 0\n10000 5000\n10000 10000\n", "12\n796 -415\n796 169\n796 2695\n1979 -415\n1979 169\n3370 3267\n5371 -734\n5371 169\n5371 2695\n8366 -415\n8366 169\n8366 2695\n", "15\n-7871 -4833\n-7871 -1936\n-7871 425\n-4790 -7798\n-4790 -1936\n-4790 425\n912 -4833\n912 -1936\n912 425\n4236 -4833\n4236 -389\n4236 425\n8382 -4833\n8382 -222\n8382 425\n", "2\n6757 758\n-1343 -7745\n", "4\n-3955 7228\n-2267 7358\n-5256 -2065\n9674 -3048\n", "2\n8303 2432\n-3164 -4751\n", "3\n-791 4830\n3567 2434\n1522 -4418\n", "10\n3986 -4462\n-5492 -8077\n-8795 4012\n8092 5848\n5159 9077\n-9814 5652\n-2848 -6707\n-1528 8298\n9444 -4143\n-7928 1163\n", "4\n-10000 -10000\n-10000 -9999\n10000 10000\n330 10000\n", "12\n-9440 -8967\n1915 -8148\n-7216 8361\n1384 -4248\n-1425 -2251\n1216 406\n-2676 8355\n-8889 -8919\n-1163 -4185\n5018 -7302\n-2724 3986\n-7890 1900\n", "4\n0 0\n0 2\n0 4\n4 0\n", "3\n-1 -1\n1 0\n3 2\n", "2\n10010 11000\n-10000 -10000\n", "5\n-14604 8986\n-3629 9045\n-7719 -3639\n-258 4491\n-6902 -6866\n", "25\n1964 -4517\n5939 -4080\n9503 -7541\n-5037 -6950\n-9914 5015\n-435 7555\n-9321 -2202\n-5036 4224\n4946 -6785\n-6824 -9830\n-9124 9117\n-8396 -2748\n9284 556\n-1672 -6681\n-8782 9912\n-8164 4679\n1804 -6201\n-1155 2405\n-858 4105\n419 -6089\n-8034 -3084\n-7823 -5829\n-5784 5391\n9515 996\n-8078 752\n", "10\n-5475 1753\n-8077 -5005\n7903 -131\n5159 9077\n5159 9076\n-1962 4557\n-9188 -15816\n-4591 617\n-9686 -6410\n648 -1608\n", "3\n-4928 327\n6324 3567\n2434 8649\n", "16\n297 3286\n-9374 4754\n7891 -4091\n6087 -1252\n3371 -858\n789 -9370\n7241 4081\n-7390 355\n-5536 -3119\n2413 -5560\n4673 7622\n5344 -9455\n1918 -11230\n-6034 -4144\n9018 -996\n-7542 -9138\n", "2\n6757 758\n-1343 -11219\n", "4\n3744 -804\n1518 -3447\n7358 -6618\n-4504 2047\n", "4\n-3955 12698\n-2267 7358\n-5256 -2065\n9674 -3048\n", "2\n8941 2432\n-3164 -4751\n", "3\n-791 4830\n3567 2434\n1522 -2822\n", "10\n3986 -4462\n-5492 -8077\n-16137 4012\n8092 5848\n5159 9077\n-9814 5652\n-2848 -6707\n-1528 8298\n9444 -4143\n-7928 1163\n", "12\n1804 -21000\n-3551 1915\n-8148 5497\n-3430 -2988\n377 -1656\n-3799 6338\n-4248 -8428\n7371 -5005\n1216 406\n-294 5589\n-6477 -8889\n-8919 3676\n", "25\n5061 -2382\n-4080 9503\n-4081 9503\n6001 -2381\n-6549 9641\n-8510 6047\n-8110 8720\n6829 -8424\n-1413 -5926\n2446 -3190\n5405 8413\n8272 6829\n3034 -3978\n-3403 3036\n1947 4041\n829 327\n-4079 9504\n9293 -5091\n486 -5050\n6384 3727\n4787 6634\n4492 1126\n-1288 -4938\n4345 8056\n-3402 3035\n", "4\n-10000 -10000\n-10000 -9999\n10000 10000\n187 10000\n", "16\n-7073 -2432\n4754 7891\n4753 7890\n4755 5209\n1033 -7465\n4487 -9951\n-4613 3633\n-6753 9089\n5853 -1919\n-236 5170\n6966 7889\n-9989 -3488\n-1390 5520\n3139 8543\n4754 7890\n7576 5150\n", "12\n-9440 -8967\n1915 -8148\n-7216 8361\n1384 -7415\n-1425 -2251\n1216 406\n-2676 8355\n-8889 -8919\n-1163 -4185\n5018 -7302\n-2724 3986\n-7890 1900\n", "4\n0 0\n1 1\n1 5\n1 2\n", "4\n0 1\n0 2\n0 4\n4 0\n", "3\n-1 -1\n1 0\n5 2\n", "2\n10010 11000\n-10000 -7450\n", "5\n-14604 8986\n-3629 9045\n-7719 -1887\n-258 4491\n-6902 -6866\n", "25\n1964 -4517\n5939 -4080\n9503 -7541\n-5037 -6950\n-9914 5015\n-435 7555\n-9321 -2202\n-5036 4224\n4946 -6785\n-6824 -9830\n-9124 9117\n-8396 -2748\n9284 556\n-1672 -6681\n-8782 9912\n-8164 4679\n1804 -6201\n-1155 2405\n-1669 4105\n419 -6089\n-8034 -3084\n-7823 -5829\n-5784 5391\n9515 996\n-8078 752\n", "10\n-5475 1753\n-8077 -5005\n7903 -131\n5159 9077\n5159 9076\n-1962 4557\n-9188 -15816\n-4591 404\n-9686 -6410\n648 -1608\n", "3\n-4928 327\n6324 3567\n2434 2671\n", "16\n297 3286\n-9374 4754\n7891 -4091\n6087 -1252\n3371 -858\n1417 -9370\n7241 4081\n-7390 355\n-5536 -3119\n2413 -5560\n4673 7622\n5344 -9455\n1918 -11230\n-6034 -4144\n9018 -996\n-7542 -9138\n", "2\n6757 758\n-413 -11219\n", "4\n1785 -804\n1518 -3447\n7358 -6618\n-4504 2047\n", "4\n-3955 12698\n-2267 7358\n-5256 -1893\n9674 -3048\n", "2\n5032 2432\n-3164 -4751\n", "3\n-791 4830\n640 2434\n1522 -2822\n", "10\n3986 -4462\n-5492 -8077\n-16137 4012\n8092 5848\n5159 9077\n-9814 5652\n-5625 -6707\n-1528 8298\n9444 -4143\n-7928 1163\n", "12\n1804 -21000\n-3551 1915\n-8148 5497\n-3430 -2988\n377 -1656\n-3799 6338\n-1632 -8428\n7371 -5005\n1216 406\n-294 5589\n-6477 -8889\n-8919 3676\n", "25\n5061 -2382\n-4080 9503\n-4081 9503\n6001 -2381\n-6549 9641\n-8510 6047\n-8110 8720\n6829 -8424\n-1413 -5926\n2446 -3190\n5405 8413\n8272 6829\n3034 -3978\n-3403 3036\n1947 4041\n829 327\n-4079 9504\n9293 -5091\n486 -5050\n6384 3727\n4787 6634\n4492 1126\n-923 -4938\n4345 8056\n-3402 3035\n"], "output": ["0\n", "45\n", "44850\n", "6059\n", "990\n", "53\n", "11415\n", "3\n", "7140\n", "15\n", "1026\n", "2543\n", "209592\n", "14\n", "2145\n", "43365\n", "8762\n", "1994\n", "319\n", "6903\n", "6\n", "6975\n", "54\n", "13696\n", "1119\n", "2837\n", "9164\n", "2006\n", "372\n", "8082\n", "77\n", "15454\n", "1266\n", "3068\n", "0\n", "15\n", "0\n", "3\n", "990\n", "15\n", "2145\n", "6\n", "3\n", "0\n", "45\n", "44850\n", "990\n", "3\n", "7140\n", "0\n", "15\n", "15\n", "0\n", "3\n", "990\n", "2145\n", "43365\n", "15\n", "7140\n", "2145\n", "6\n", "6\n", "0\n", "0\n", "45\n", "44850\n", "990\n", "3\n", "7140\n", "0\n", "15\n", "15\n", "0\n", "3\n", "990\n", "2145\n", "43365\n"]}, "short_description": "1. One-sentence summary:  \nCompute the total number of pairwise intersections among all distinct lines determined by pairs of input points.\n\n2. Core algorithmic approach:  \nUse hashing (a dictionary keyed by normalized line slopes) to group collinear lines efficiently, then perform a combinatorial count of intersections between groups of differing slopes in O(m\u00b2 + n\u00b2) time, where m is the number of unique slopes.\n\n3. Reusable components:  \n- GCD-based normalization of a 2D direction vector (a, b) so that each line\u2019s slope is represented uniquely and consistently.  \n- A hash map (defaultdict of sets) to group entities (here: lines) by a derived key (the normalized slope) while accumulating unique identifiers (line constants).  \n- A running-sum or suffix-sum pattern to compute the sum over all pairs of group sizes without nested recalculation (i.e., accumulating remaining sums to multiply by current group size)."}
{"name": "749_B. Parallelogram is Back", "description": "Long time ago Alex created an interesting problem about parallelogram. The input data for this problem contained four integer points on the Cartesian plane, that defined the set of vertices of some non-degenerate (positive area) parallelogram. Points not necessary were given in the order of clockwise or counterclockwise traversal.\n\nAlex had very nice test for this problem, but is somehow happened that the last line of the input was lost and now he has only three out of four points of the original parallelogram. He remembers that test was so good that he asks you to restore it given only these three points.\n\nInput\n\nThe input consists of three lines, each containing a pair of integer coordinates xi and yi ( - 1000 \u2264 xi, yi \u2264 1000). It's guaranteed that these three points do not lie on the same line and no two of them coincide.\n\nOutput\n\nFirst print integer k \u2014 the number of ways to add one new integer point such that the obtained set defines some parallelogram of positive area. There is no requirement for the points to be arranged in any special order (like traversal), they just define the set of vertices.\n\nThen print k lines, each containing a pair of integer \u2014 possible coordinates of the fourth point.\n\nExample\n\nInput\n\n0 0\n1 0\n0 1\n\n\nOutput\n\n3\n1 -1\n-1 1\n1 1\n\nNote\n\nIf you need clarification of what parallelogram is, please check Wikipedia page:\n\nhttps://en.wikipedia.org/wiki/Parallelogram", "solution": "a=list(map(int, input().split()))\nx1=a[0]\ny1=a[1]\na=list(map(int, input().split()))\nx2=a[0]\ny2=a[1]\na=list(map(int, input().split()))\nx3=a[0]\ny3=a[1]\nprint(3)\nprint(x1+x2-x3, y1+y2-y3)\nprint(x1+x3-x2, y1+y3-y2)\nprint(x3+x2-x1, y2+y3-y1)\n       \n", "difficulty": 8, "public_tests": {"input": ["0 0\n1 0\n0 1\n"], "output": ["3\n-1 1\n1 -1\n1 1\n"]}, "private_tests": {"input": ["-948 201\n-519 -713\n459 564\n", "-1000 1000\n1000 -1000\n-1000 -1000\n", "-6 2\n-10 -7\n9 -6\n", "-1 -1\n0 1\n1 1\n", "-1000 1000\n1000 -1000\n0 1\n", "-86 25\n-55 18\n58 24\n", "-33 60\n3 0\n-57 97\n", "-4 -5\n7 10\n3 -10\n", "21 185\n966 -167\n-291 -804\n", "-1000 -1000\n-1 -1000\n-1000 -2\n", "0 -1000\n0 1000\n1 -1000\n", "73 -2\n79 -16\n13 -4\n", "-6 -23\n-68 -8\n-63 71\n", "2 7\n8 9\n-5 4\n", "57 83\n-24 -66\n-19 -53\n", "5 0\n-7 -7\n-3 3\n", "1000 1000\n999 1000\n-1000 -1000\n", "-22 -38\n-70 -58\n-19 21\n", "10 3\n4 -9\n-8 -2\n", "-7 -9\n1 -10\n4 8\n", "1 -1\n1 7\n2 9\n", "-11 -61\n56 9\n-57 46\n", "-10 658\n732 -301\n735 197\n", "0 -1\n-1 0\n1 1\n", "-301 -397\n192 317\n-98 729\n", "980 -656\n-485 -591\n-766 880\n", "1000 -1000\n1000 1000\n-1000 0\n", "1000 1000\n-1000 -1000\n-1000 1000\n", "-38 22\n53 -83\n-50 -28\n", "928 1\n-319 111\n428 -754\n", "0 -1000\n0 1000\n-1 -1000\n", "-1000 0\n999 0\n1000 1\n", "6 -5\n4 -4\n-6 5\n", "-969 -199\n766 -179\n626 -372\n", "-17 0\n-95 26\n-25 -54\n", "-114 -28\n532 573\n766 931\n", "9 5\n-6 6\n8 -8\n", "-917 -272\n-285 -579\n318 -437\n"], "output": ["3\n-1926 -1076\n30 1478\n888 -350\n", "3\n1000 -3000\n-3000 1000\n1000 1000\n", "3\n-25 1\n5 -15\n13 3\n", "3\n-2 -1\n0 -1\n2 3\n", "3\n-2000 2001\n0 -1\n2000 -1999\n", "3\n-199 19\n27 31\n89 17\n", "3\n27 -37\n-93 157\n-21 37\n", "3\n0 15\n-8 -25\n14 5\n", "3\n654 -1156\n-1236 -452\n1278 822\n", "3\n-1 -1998\n-1999 -2\n-1 -2\n", "3\n-1 1000\n1 -3000\n1 1000\n", "3\n139 -14\n7 10\n19 -18\n", "3\n-11 -102\n-1 56\n-125 86\n", "3\n15 12\n-11 2\n1 6\n", "3\n52 70\n62 96\n-100 -202\n", "3\n1 -10\n9 10\n-15 -4\n", "3\n-1001 -1000\n-999 -1000\n2999 3000\n", "3\n-73 -117\n29 41\n-67 1\n", "3\n22 -4\n-2 10\n-14 -14\n", "3\n-10 -27\n-4 9\n12 7\n", "3\n0 -3\n2 1\n2 17\n", "3\n102 -98\n10 116\n-124 -24\n", "3\n-13 160\n-7 1156\n1477 -762\n", "3\n-2 -2\n0 2\n2 0\n", "3\n-11 -809\n395 1443\n-591 15\n", "3\n-2231 945\n699 815\n1261 -2127\n", "3\n3000 0\n-1000 -2000\n-1000 2000\n", "3\n1000 -1000\n-3000 -1000\n1000 3000\n", "3\n65 -33\n-141 77\n41 -133\n", "3\n181 866\n1675 -864\n-819 -644\n", "3\n1 1000\n-1 -3000\n-1 1000\n", "3\n-1001 -1\n-999 1\n2999 1\n", "3\n-8 6\n-4 4\n16 -14\n", "3\n-1109 -392\n-829 -6\n2361 -352\n", "3\n-87 80\n53 -80\n-103 -28\n", "3\n-348 -386\n120 330\n1412 1532\n", "3\n-5 19\n23 -9\n-7 -7\n", "3\n-1520 -414\n-314 -130\n950 -744\n"]}, "generated_tests": {"input": ["-948 177\n-519 -713\n459 564\n", "-1000 1000\n1001 -1000\n-1000 -1000\n", "-6 2\n-10 -7\n9 0\n", "-1000 1000\n1000 -171\n0 1\n", "-86 25\n-55 16\n58 24\n", "-33 60\n3 -1\n-57 97\n", "-4 -5\n7 13\n3 -10\n", "21 185\n988 -167\n-291 -804\n", "-1000 -1000\n-2 -1000\n-1000 -2\n", "0 -405\n0 1000\n1 -1000\n", "3 -2\n79 -16\n13 -4\n", "-6 -18\n-68 -8\n-63 71\n", "2 7\n8 9\n-9 4\n", "57 83\n-24 -66\n-20 -53\n", "5 0\n-7 -11\n-3 3\n", "0000 1000\n999 1000\n-1000 -1000\n", "-22 -38\n-70 -58\n-19 42\n", "10 6\n4 -9\n-8 -2\n", "-7 -18\n1 -10\n4 8\n", "1 -1\n1 7\n0 9\n", "-14 -61\n56 9\n-57 46\n", "-1 658\n732 -301\n735 197\n", "1 -1\n-1 0\n1 1\n", "-301 -397\n192 94\n-98 729\n", "980 -656\n-485 -191\n-766 880\n", "1000 -1000\n1000 0000\n-1000 0\n", "1000 1000\n-1000 -1000\n-1000 1001\n", "-31 22\n53 -83\n-50 -28\n", "928 1\n-319 111\n238 -754\n", "0 -1000\n0 1000\n-1 -1204\n", "-1000 0\n999 1\n1000 1\n", "6 -5\n4 -7\n-6 5\n", "-969 -199\n766 -179\n626 -421\n", "-17 0\n-95 26\n-25 -77\n", "-114 -28\n532 609\n766 931\n", "9 5\n-6 6\n3 -8\n", "-484 -272\n-285 -579\n318 -437\n", "-948 177\n-519 -713\n500 564\n", "-1000 1010\n1001 -1000\n-1000 -1000\n", "-6 2\n-10 -7\n9 1\n", "-1000 1000\n1000 -236\n0 1\n", "-86 1\n-55 16\n58 24\n", "-33 60\n4 -1\n-57 97\n", "-4 -5\n7 13\n2 -10\n", "40 185\n988 -167\n-291 -804\n", "-617 -1000\n-2 -1000\n-1000 -2\n", "0 -405\n0 1000\n1 -922\n", "4 -2\n79 -16\n13 -4\n", "-6 -18\n-68 -8\n-63 2\n", "2 7\n8 6\n-9 4\n", "57 83\n-37 -66\n-20 -53\n", "5 -1\n-7 -11\n-3 3\n", "0000 1000\n999 1000\n-1000 -1706\n", "-22 -38\n-106 -58\n-19 42\n", "9 6\n4 -9\n-8 -2\n", "-7 -18\n2 -10\n4 8\n", "-14 -61\n60 9\n-57 46\n", "-1 396\n732 -301\n735 197\n", "1 -2\n-1 0\n1 1\n", "-86 -397\n192 94\n-98 729\n", "980 -656\n-485 -191\n-766 1631\n", "1000 -1000\n1000 1010\n-1000 0\n", "1000 1000\n-1374 -1000\n-1000 1001\n", "-31 22\n53 -10\n-50 -28\n", "928 1\n-319 111\n103 -754\n", "0 -1000\n0 1000\n-1 -560\n", "-1000 0\n999 1\n1000 0\n", "6 -5\n4 -7\n-6 7\n", "-969 -199\n766 -179\n626 -658\n", "-17 0\n-95 26\n-20 -77\n", "-114 -28\n532 609\n253 931\n", "9 10\n-6 6\n3 -8\n", "-484 -480\n-285 -579\n318 -437\n", "-948 116\n-519 -713\n500 564\n", "-1000 1010\n1001 -1487\n-1000 -1000\n", "-6 1\n-10 -7\n9 1\n", "-1000 1000\n1000 -236\n0 0\n", "-162 1\n-55 16\n58 24\n", "-33 60\n4 -1\n-80 97\n", "-4 -5\n10 13\n2 -10\n", "40 185\n160 -167\n-291 -804\n", "-617 -529\n-2 -1000\n-1000 -2\n", "0 -474\n0 1000\n1 -922\n", "4 -2\n79 -16\n13 -7\n", "-6 -18\n-68 -8\n-63 1\n", "2 7\n8 8\n-9 4\n", "107 83\n-37 -66\n-20 -53\n", "10 -1\n-7 -11\n-3 3\n", "0000 1000\n999 0000\n-1000 -1706\n", "-30 -38\n-106 -58\n-19 42\n", "9 6\n4 -9\n-15 -2\n", "-7 -18\n2 -10\n4 10\n", "-18 -61\n60 9\n-57 46\n"], "output": ["3\n888 -326\n30 1454\n-1926 -1100\n", "3\n1001 -3000\n-3001 1000\n1001 1000\n", "3\n5 -9\n13 9\n-25 -5\n", "3\n2000 -1170\n-2000 1172\n0 828\n", "3\n89 15\n27 33\n-199 17\n", "3\n-21 36\n-93 158\n27 -38\n", "3\n14 8\n-8 -28\n0 18\n", "3\n676 -1156\n-1258 -452\n1300 822\n", "3\n-2 -2\n-1998 -2\n-2 -1998\n", "3\n1 405\n1 -2405\n-1 1595\n", "3\n89 -18\n-63 10\n69 -14\n", "3\n-125 81\n-1 61\n-11 -97\n", "3\n-3 6\n-15 2\n19 12\n", "3\n-101 -202\n61 96\n53 70\n", "3\n-15 -8\n9 14\n1 -14\n", "3\n-1 -1000\n-1999 -1000\n1999 3000\n", "3\n-67 22\n29 62\n-73 -138\n", "3\n-14 -17\n-2 13\n22 -1\n", "3\n12 16\n-4 0\n-10 -36\n", "3\n0 17\n0 1\n2 -3\n", "3\n13 116\n-127 -24\n99 -98\n", "3\n1468 -762\n2 1156\n-4 160\n", "3\n-1 2\n3 0\n-1 -2\n", "3\n395 1220\n-591 238\n-11 -1032\n", "3\n-2231 1345\n699 415\n1261 -1727\n", "3\n-1000 1000\n-1000 -1000\n3000 -1000\n", "3\n-3000 -999\n1000 3001\n1000 -1001\n", "3\n34 -133\n-134 77\n72 -33\n", "3\n-1009 -644\n1485 -864\n371 866\n", "3\n-1 796\n-1 -3204\n1 1204\n", "3\n2999 2\n-999 0\n-1001 0\n", "3\n-8 3\n-4 7\n16 -17\n", "3\n2361 -401\n-1109 -441\n-829 43\n", "3\n-103 -51\n53 -103\n-87 103\n", "3\n1412 1568\n120 294\n-348 -350\n", "3\n-12 -7\n18 -9\n0 19\n", "3\n517 -744\n119 -130\n-1087 -414\n", "3\n929 -326\n71 1454\n-1967 -1100\n", "3\n1001 -3010\n-3001 1010\n1001 1010\n", "3\n5 -8\n13 10\n-25 -6\n", "3\n2000 -1235\n-2000 1237\n0 763\n", "3\n89 39\n27 9\n-199 -7\n", "3\n-20 36\n-94 158\n28 -38\n", "3\n13 8\n-9 -28\n1 18\n", "3\n657 -1156\n-1239 -452\n1319 822\n", "3\n-385 -2\n-1615 -2\n381 -1998\n", "3\n1 483\n1 -2327\n-1 1517\n", "3\n88 -18\n-62 10\n70 -14\n", "3\n-125 12\n-1 -8\n-11 -28\n", "3\n-3 3\n-15 5\n19 9\n", "3\n-114 -202\n74 96\n40 70\n", "3\n-15 -7\n9 13\n1 -15\n", "3\n-1 -1706\n-1999 -1706\n1999 3706\n", "3\n-103 22\n65 62\n-109 -138\n", "3\n-13 -17\n-3 13\n21 -1\n", "3\n13 16\n-5 0\n-9 -36\n", "3\n17 116\n-131 -24\n103 -98\n", "3\n1468 -500\n2 894\n-4 -102\n", "3\n-1 3\n3 -1\n-1 -3\n", "3\n180 1220\n-376 238\n204 -1032\n", "3\n-2231 2096\n699 1166\n1261 -2478\n", "3\n-1000 2010\n-1000 -2010\n3000 10\n", "3\n-3374 -999\n1374 3001\n626 -1001\n", "3\n34 -60\n-134 4\n72 40\n", "3\n-1144 -644\n1350 -864\n506 866\n", "3\n-1 1440\n-1 -2560\n1 560\n", "3\n2999 1\n-999 -1\n-1001 1\n", "3\n-8 5\n-4 9\n16 -19\n", "3\n2361 -638\n-1109 -678\n-829 280\n", "3\n-98 -51\n58 -103\n-92 103\n", "3\n899 1568\n-393 294\n165 -350\n", "3\n-12 -12\n18 -4\n0 24\n", "3\n517 -536\n119 -338\n-1087 -622\n", "3\n929 -265\n71 1393\n-1967 -1161\n", "3\n1001 -3497\n-3001 1497\n1001 523\n", "3\n5 -7\n13 9\n-25 -7\n", "3\n2000 -1236\n-2000 1236\n0 764\n", "3\n165 39\n-49 9\n-275 -7\n", "3\n-43 36\n-117 158\n51 -38\n", "3\n16 8\n-12 -28\n4 18\n", "3\n-171 -1156\n-411 -452\n491 822\n", "3\n-385 -473\n-1615 469\n381 -1527\n", "3\n1 552\n1 -2396\n-1 1448\n", "3\n88 -21\n-62 7\n70 -11\n", "3\n-125 11\n-1 -9\n-11 -27\n", "3\n-3 5\n-15 3\n19 11\n", "3\n-164 -202\n124 96\n90 70\n", "3\n-20 -7\n14 13\n6 -15\n", "3\n-1 -2706\n-1999 -706\n1999 2706\n", "3\n-95 22\n57 62\n-117 -138\n", "3\n-20 -17\n-10 13\n28 -1\n", "3\n13 18\n-5 2\n-9 -38\n", "3\n21 116\n-135 -24\n99 -98\n"]}, "short_description": "1. One-sentence summary  \nGiven three 2D points, compute all possible fourth points that, together with any two of the given points, form the vertices of a parallelogram.\n\n2. Core algorithmic approach  \nDirect vector arithmetic\u2014using the fact that in a parallelogram the sum of position vectors of opposite corners are equal (i.e. D = A + B \u2212 C).\n\n3. Reusable components  \n- A Point (or Vector) class/struct with overloaded addition and subtraction operators.  \n- A function `complete_parallelogram(A, B, C)` returning `A + B - C`.  \n- A routine to iterate over combinations of three points (or more generally k-tuples) and apply a vector-based completion formula."}
{"name": "32_E. Hide-and-Seek", "description": "Victor and Peter are playing hide-and-seek. Peter has hidden, and Victor is to find him. In the room where they are playing, there is only one non-transparent wall and one double-sided mirror. Victor and Peter are points with coordinates (xv, yv) and (xp, yp) respectively. The wall is a segment joining points with coordinates (xw, 1, yw, 1) and (xw, 2, yw, 2), the mirror \u2014 a segment joining points (xm, 1, ym, 1) and (xm, 2, ym, 2).\n\nIf an obstacle has a common point with a line of vision, it's considered, that the boys can't see each other with this line of vision. If the mirror has a common point with the line of vision, it's considered, that the boys can see each other in the mirror, i.e. reflection takes place. The reflection process is governed by laws of physics \u2014 the angle of incidence is equal to the angle of reflection. The incident ray is in the same half-plane as the reflected ray, relative to the mirror. I.e. to see each other Victor and Peter should be to the same side of the line, containing the mirror (see example 1). If the line of vision is parallel to the mirror, reflection doesn't take place, and the mirror isn't regarded as an obstacle (see example 4).\n\nVictor got interested if he can see Peter, while standing at the same spot. Help him solve this problem.\n\nInput\n\nThe first line contains two numbers xv and yv \u2014 coordinates of Victor.\n\nThe second line contains two numbers xp and yp \u2014 coordinates of Peter.\n\nThe third line contains 4 numbers xw, 1, yw, 1, xw, 2, yw, 2 \u2014 coordinates of the wall.\n\nThe forth line contains 4 numbers xm, 1, ym, 1, xm, 2, ym, 2 \u2014 coordinates of the mirror.\n\nAll the coordinates are integer numbers, and don't exceed 104 in absolute value. It's guaranteed, that the segments don't have common points, Victor and Peter are not on any of the segments, coordinates of Victor and Peter aren't the same, the segments don't degenerate into points.\n\nOutput\n\nOutput YES, if Victor can see Peter without leaving the initial spot. Otherwise output NO.\n\nExamples\n\nInput\n\n-1 3\n1 3\n0 2 0 4\n0 0 0 1\n\n\nOutput\n\nNO\n\n\nInput\n\n0 0\n1 1\n0 1 1 0\n-100 -100 -101 -101\n\n\nOutput\n\nNO\n\n\nInput\n\n0 0\n1 1\n0 1 1 0\n-1 1 1 3\n\n\nOutput\n\nYES\n\n\nInput\n\n0 0\n10 0\n100 100 101 101\n1 0 3 0\n\n\nOutput\n\nYES", "solution": "xv,yv=list(map(int,input().split()))\nxp,yp=list(map(int,input().split()))\nxw1,yw1,xw2,yw2=list(map(int,input().split()))\nxm1,ym1,xm2,ym2=list(map(int,input().split()))\ndef a(x1,y1,x2,y2,x3,y3,x4,y4):\n    if x1==x2:\n        if x3==x4:\n            return False\n        else:\n            k2=(y3-y4)/(x3-x4)\n            b2=y3-k2*x3\n            return min(y3,y4)<=k2*x1+b2<=max(y3,y4) and min(y1,y2)<=k2*x1+b2<=max(y1,y2) and min(x3,x4)<=x1<=max(x3,x4) and min(x1,x2)<=x1<=max(x1,x2)\n    else:\n        if x3==x4:\n            k1=(y1-y2)/(x1-x2)\n            b1=y1-k1*x1\n            return min(y3,y4)<=k1*x3+b1<=max(y3,y4) and min(y1,y2)<=k1*x3+b1<=max(y1,y2) and min(x3,x4)<=x3<=max(x3,x4) and min(x1,x2)<=x3<=max(x1,x2)\n        else:\n            k1=(y1-y2)/(x1-x2)\n            b1=y1-k1*x1\n            k2=(y3-y4)/(x3-x4)\n            b2=y3-k2*x3\n            if k1==k2:\n                return b1==b2 and min(x1,x2)<=min(x3,x4)<=max(x1,x2) and min(y1,y2)<=min(y3,y4)<=max(y1,y2)\n            x=(b2-b1)/(k1-k2)\n            y=k1*x+b1\n            return min(y3,y4)<=y<=max(y3,y4) and min(y1,y2)<=y<=max(y1,y2) and min(x3,x4)<=x<=max(x3,x4) and min(x1,x2)<=x<=max(x1,x2)\ndef b(xm1,xm2,ym1,ym2,x,y):\n    if ym1==ym2:\n        xi=x\n        yi=2*ym1-y\n    elif xm1==xm2:\n        yi=y\n        xi=2*xm1-x\n    else:\n        k1=-(xm1-xm2)/(ym1-ym2)\n        b1=y-k1*x\n        k2=(ym1-ym2)/(xm1-xm2)\n        b2=ym1-k2*xm1\n        x1=(b2-b1)/(k1-k2)\n        xi=2*x1-x\n        yi=k1*xi+b1\n    return [xi,yi]\nxw3,yw3=b(xm1,xm2,ym1,ym2,xw1,yw1)\nxw4,yw4=b(xm1,xm2,ym1,ym2,xw2,yw2)\nif a(xv,yv,xp,yp,xw1,yw1,xw2,yw2) or a(xv,yv,xp,yp,xm1,ym1,xm2,ym2):\n    xip,yip=b(xm1,xm2,ym1,ym2,xp,yp)\n    if [xip,yip]!=[xv,yv] and a(xv,yv,xip,yip,xm1,ym1,xm2,ym2) and not(a(xv,yv,xip,yip,xw1,yw1,xw2,yw2)) and not(a(xv,yv,xip,yip,xw3,yw3,xw4,yw4)):\n        print('YES')\n    else:\n        print('NO')\nelse:\n    print('YES')", "difficulty": 11, "public_tests": {"input": ["0 0\n10 0\n100 100 101 101\n1 0 3 0\n", "-1 3\n1 3\n0 2 0 4\n0 0 0 1\n", "0 0\n1 1\n0 1 1 0\n-100 -100 -101 -101\n", "0 0\n1 1\n0 1 1 0\n-1 1 1 3\n"], "output": ["YES", "NO", "NO", "YES"]}, "private_tests": {"input": ["9293 -6547\n4895 -9479\n2738 -1395 8489 -8324\n3540 -4860 -8555 1675\n", "-8193 -8833\n4353 -8260\n2214 683 -8074 -8978\n5548 -850 -1486 -8372\n", "0 0\n2 0\n1 1 1 -1\n-10 2 -12 2\n", "0 0\n10 0\n0 1 10 1\n1 0 9 0\n", "3680 2196\n8736 8904\n7532 2465 3709 -8961\n6439 -765 3053 3026\n", "3874 -278\n-8905 -3524\n-1544 -3249 4063 -111\n-59 1361 7173 -847\n", "5023 -2243\n5648 1799\n1758 9228 -5815 3403\n-5967 -5718 -9900 -7956\n", "1462 5132\n-8664 2428\n175 -8258 -9863 8483\n-5685 3527 1556 5387\n", "-3234 2278\n-1683 1276\n-8143 -2879 -903 2275\n9053 -2468 7486 6408\n", "-1971 -1636\n8799 -5185\n2406 2302 1967 -7166\n-4122 5320 7348 337\n", "866 4303\n-2945 -7242\n-8638 4653 -1155 -7439\n-950 -5491 2786 3812\n", "-5289 7185\n-5026 4568\n9256 -429 -3131 4617\n-7143 -6595 -5505 -370\n", "0 0\n2 0\n1 1 1 -1\n0 2 2 2\n", "7806 5101\n9823 8971\n-6640 -300 9044 7390\n-2297 -3829 7806 2982\n", "0 0\n3 0\n1 0 2 0\n-10 2 -12 2\n", "-8836 -5283\n-5804 9454\n-4442 76 -9550 -986\n-5178 -982 -7763 -7108\n", "3261 2610\n-701 -7693\n6272 9652 -506 6144\n-322 -4315 -1436 -2142\n", "-1541 -7140\n-3434 7016\n-831 6470 -4500 2354\n-5503 -553 -5998 6361\n", "97 -43\n7213 -4204\n5460 -8068 4212 -2411\n9853 -8477 7807 6052\n", "6777 -4260\n1717 5583\n3262 248 5800 1524\n9267 -7380 8541 5269\n", "2696 -4753\n-3435 -7793\n4265 5958 -3218 -8692\n4458 4449 4175 1539\n", "5108 2348\n9100 7679\n-7980 640 -4064 -8379\n1883 -5793 9041 8957\n", "-7779 -1832\n8313 7354\n9767 8430 -8438 -3487\n3855 4077 1085 -5181\n", "-7366 1446\n-7727 -754\n-2680 -3822 -5191 -5553\n-7304 -6313 -9229 1377\n", "5851 7882\n-6171 -4174\n-1463 5985 4956 -8663\n6370 -9777 -864 9154\n", "4646 5596\n-2993 766\n2443 -3831 3479 5022\n-1987 4342 9668 7192\n", "362 9742\n7948 7786\n303 6095 -7816 9199\n5875 7686 6702 6871\n", "0 0\n5 0\n1 0 2 0\n3 0 4 0\n", "3336 -9832\n-9350 -9113\n-939 3907 -3643 -9931\n8186 6365 6202 6802\n", "5286 518\n-8906 -4274\n-2162 1352 -751 -3408\n-3469 2291 -9521 -462\n", "-1 2\n1 2\n0 2 0 4\n0 0 0 1\n", "7111 8313\n-4946 -9411\n672 -5310 -7733 -1889\n378 8589 -915 7675\n", "0 0\n2 0\n0 2 2 2\n1 1 1 -1\n", "0 0\n2 0\n0 2 2 2\n1 1 1 0\n", "3205 -9947\n7374 -5260\n-3110 3073 5060 -2488\n7958 -5755 -7406 -816\n", "6161 -4520\n-5630 -3171\n-7760 9489 -9477 -630\n9758 7404 -4730 -8056\n", "-3802 -741\n-9954 6119\n-1364 -1523 -8659 2791\n6451 -4606 -7143 2288\n", "5974 2044\n8371 6409\n-675 4290 -8517 -9542\n-9005 4263 -9763 -8777\n", "0 0\n2 0\n1 1 1 -1\n1 2 2 2\n", "0 0\n3 0\n0 2 2 2\n1 0 2 0\n", "1307 5392\n3305 -837\n-8550 -7782 5287 1042\n-2922 -287 8944 3865\n", "4156 -5659\n-9903 3069\n-5545 1857 2358 4566\n4920 4225 5236 7868\n", "0 0\n1 1\n100 100 101 101\n-100 -100 -101 -101\n", "2729 -5812\n9733 574\n9967 3682 -9868 3984\n9477 9254 2347 3997\n", "-7086 -8767\n6803 2015\n6175 -6560 3372 573\n256 3769 393 9678\n", "-4752 -3262\n-4582 6436\n-8997 -6490 -4630 1426\n-9865 -6697 -2371 -5622\n", "0 0\n2 0\n0 2 2 2\n1 0 1 -1\n", "-1311 2310\n2764 1131\n-1964 -5465 -199 2630\n-5664 9644 9110 2262\n", "-6319 2768\n-431 5862\n-5417 8036 -5331 3150\n2385 -1888 3450 7359\n", "-3417 8449\n7996 3499\n3163 7949 5262 4575\n1340 -17 -3934 8703\n", "2001 2179\n-1925 -2455\n7858 948 71 2256\n4850 9947 1159 2295\n", "1772 9009\n-8123 3429\n-1873 9437 -2887 -997\n8018 -9250 -5090 -9980\n", "-3107 -7674\n4815 780\n-4957 3486 1980 -2625\n-432 -4075 -9497 -171\n", "9060 4628\n5720 -2370\n-1791 9325 1552 -3684\n-161 -4597 2287 -3890\n", "-4496 6192\n-8443 7736\n2227 9746 -7197 6992\n-4002 -6638 7315 -9557\n", "-8607 4167\n4114 -152\n3668 -1725 -7827 4541\n-5338 9216 880 9081\n", "-8188 -5684\n3623 46\n3288 -265 5839 7672\n2776 1685 2632 -7636\n", "5498 9900\n7010 -7756\n-7598 8619 -7166 -3069\n-7486 -727 -9707 7115\n", "7880 -7342\n1175 7552\n-6177 6690 6086 -2763\n6149 -2325 8602 -8496\n", "-1 2\n1 2\n0 3 0 4\n0 0 0 2\n", "-1 5\n1 5\n0 2 0 4\n0 0 0 1\n", "1184 -3127\n-7123 6985\n-1943 6259 1154 -4026\n-4205 -4033 -5160 -4115\n", "-8240 -4453\n8478 -878\n7033 7520 -1002 -3146\n-9913 8035 -9876 -8757\n", "-1 4\n1 4\n0 2 0 4\n0 0 0 1\n", "-823 -3132\n-1924 -8397\n3277 5496 -1772 -6699\n-5322 -4634 922 182\n", "-1541 -7140\n-3434 7016\n-831 6470 -7233 -5530\n-5503 -553 -5998 6361\n", "-1 1\n1 1\n0 3 0 4\n0 0 0 2\n", "0 0\n2 0\n1 1 1 -1\n0 2 1 2\n", "4632 -9795\n7738 -6486\n1377 1248 1007 -1906\n3402 9216 250 6991\n", "-7267 -975\n-7760 5217\n-9341 -5054 -7370 3072\n-4926 1220 7603 -1721\n", "5567 -9695\n5625 2216\n1965 -7804 8129 -7554\n1665 -446 5340 7652\n", "509 -7077\n1396 9890\n1192 2964 -1072 -8932\n-3260 -6877 -1781 1603\n", "0 0\n3 0\n1 0 2 0\n0 2 2 2\n", "-9867 3736\n2889 5086\n2601 -5285 -8930 4748\n-3752 511 3554 1104\n", "-2389 53\n-9955 5368\n-4775 -593 7898 -2157\n6659 1403 9634 -3275\n"], "output": ["NO", "NO", "NO", "YES", "NO", "NO", "YES", "NO", "YES", "NO", "NO", "YES", "YES", "NO", "NO", "NO", "YES", "YES", "YES", "YES", "NO", "NO", "NO", "YES", "NO", "YES", "YES", "NO", "NO", "YES", "NO", "NO", "NO", "NO", "NO", "NO", "NO", "YES", "YES", "YES", "NO", "YES", "YES", "YES", "NO", "YES", "NO", "YES", "YES", "YES", "NO", "YES", "NO", "YES", "NO", "YES", "NO", "YES", "YES", "NO", "YES", "NO", "NO", "NO", "YES", "NO", "NO", "YES", "YES", "NO", "NO", "NO", "YES", "NO", "YES"]}, "generated_tests": {"input": ["9293 -6547\n4895 -9479\n2738 -1395 8489 -8324\n3540 -9426 -8555 1675\n", "0 0\n10 0\n0 1 10 1\n2 0 9 0\n", "-8193 -8833\n4353 -8260\n2214 663 -8074 -8978\n5548 -850 -1486 -8372\n", "0 -1\n2 0\n1 1 1 -1\n-10 2 -12 2\n", "3680 186\n8736 8904\n7532 2465 3709 -8961\n6439 -765 3053 3026\n", "3874 -278\n-8905 -3524\n-1544 -3249 4063 -111\n-59 2646 7173 -847\n", "5023 -2243\n5648 1799\n1758 9640 -5815 3403\n-5967 -5718 -9900 -7956\n", "1462 5132\n-8664 2428\n175 -8258 -9863 8483\n-3683 3527 1556 5387\n", "-3234 2278\n-1683 2102\n-8143 -2879 -903 2275\n9053 -2468 7486 6408\n", "-1971 -1636\n8799 -5185\n2406 2302 1967 -7166\n-4122 5320 7348 187\n", "866 4303\n-2945 -7242\n-8638 4653 -1155 -7439\n-1053 -5491 2786 3812\n", "-5289 7185\n-5026 4568\n9256 -429 -3131 4617\n-7143 -6595 -9152 -370\n", "0 0\n2 0\n1 1 1 -2\n0 2 2 2\n", "7806 5101\n9823 8971\n-6640 -300 9044 7390\n-4305 -3829 7806 2982\n", "-8836 -5283\n-5804 9454\n-4442 76 -9550 -986\n-5178 -982 -476 -7108\n", "3261 2610\n-701 -7595\n6272 9652 -506 6144\n-322 -4315 -1436 -2142\n", "-1541 -7140\n-3434 7016\n-126 6470 -4500 2354\n-5503 -553 -5998 6361\n", "97 -43\n7213 -4204\n5460 -9240 4212 -2411\n9853 -8477 7807 6052\n", "6777 -4260\n1717 5583\n3262 248 405 1524\n9267 -7380 8541 5269\n", "2696 -4753\n-3435 -7793\n4265 8496 -3218 -8692\n4458 4449 4175 1539\n", "5108 2348\n9100 7679\n-7980 640 -4064 -8379\n1883 -5793 14617 8957\n", "-7779 -1832\n8313 7354\n9767 8717 -8438 -3487\n3855 4077 1085 -5181\n", "-7366 1446\n-7727 -1428\n-2680 -3822 -5191 -5553\n-7304 -6313 -9229 1377\n", "5851 7882\n-4881 -4174\n-1463 5985 4956 -8663\n6370 -9777 -864 9154\n", "4646 2452\n-2993 766\n2443 -3831 3479 5022\n-1987 4342 9668 7192\n", "362 9742\n7948 7786\n303 6095 -7816 9199\n5875 7686 6702 5774\n", "0 1\n5 0\n1 0 2 0\n3 0 4 0\n", "3336 -9832\n-9350 -9113\n-939 3907 -3643 -9931\n8186 6365 6202 4341\n", "5286 518\n-8906 -4274\n-2162 1972 -751 -3408\n-3469 2291 -9521 -462\n", "-1 2\n1 2\n0 2 0 7\n0 0 0 1\n", "11601 8313\n-4946 -9411\n672 -5310 -7733 -1889\n378 8589 -915 7675\n", "0 0\n2 0\n0 3 2 2\n1 1 1 -1\n", "0 0\n3 0\n0 2 2 2\n1 1 1 0\n", "3205 -9947\n7374 -5260\n-2077 3073 5060 -2488\n7958 -5755 -7406 -816\n", "6161 -4520\n-5630 -412\n-7760 9489 -9477 -630\n9758 7404 -4730 -8056\n", "-3802 -741\n-9954 6119\n-1364 -1523 -8659 2791\n6451 -4606 -1255 2288\n", "5974 106\n8371 6409\n-675 4290 -8517 -9542\n-9005 4263 -9763 -8777\n", "0 0\n2 0\n1 1 1 -1\n1 2 2 3\n", "0 0\n4 0\n0 2 2 2\n1 0 2 0\n", "1307 5392\n3305 -837\n-8550 -7782 5287 1042\n-2922 -287 8944 5794\n", "4156 -5659\n-9903 3069\n-4043 1857 2358 4566\n4920 4225 5236 7868\n", "2163 -5812\n9733 574\n9967 3682 -9868 3984\n9477 9254 2347 3997\n", "-7086 -9715\n6803 2015\n6175 -6560 3372 573\n256 3769 393 9678\n", "-4752 -3262\n-4582 6436\n-8997 -6490 -4630 1426\n-9865 -3168 -2371 -5622\n", "0 0\n2 0\n0 2 2 3\n1 0 1 -1\n", "-1311 335\n2764 1131\n-1964 -5465 -199 2630\n-5664 9644 9110 2262\n", "-8573 2768\n-431 5862\n-5417 8036 -5331 3150\n2385 -1888 3450 7359\n", "-3417 8449\n7996 3499\n3163 7949 5262 4575\n1340 -17 -729 8703\n", "2001 2179\n-1925 -2455\n7858 948 71 2256\n4850 9947 1159 1605\n", "1772 9009\n-8123 3429\n-1873 9437 -2887 -997\n8018 -9250 -6505 -9980\n", "-3107 -7674\n4815 780\n-730 3486 1980 -2625\n-432 -4075 -9497 -171\n", "10185 4628\n5720 -2370\n-1791 9325 1552 -3684\n-161 -4597 2287 -3890\n", "-4496 6192\n-8443 7736\n490 9746 -7197 6992\n-4002 -6638 7315 -9557\n", "-8607 4167\n4114 -152\n3807 -1725 -7827 4541\n-5338 9216 880 9081\n", "-8188 -5684\n3623 46\n3288 -265 5839 7672\n2776 1685 2086 -7636\n", "5498 9900\n7010 -7756\n-7598 8619 -7166 -3069\n-7486 -971 -9707 7115\n", "7880 -7342\n1175 7552\n-6177 6690 6086 -2763\n6149 -2473 8602 -8496\n", "-1 2\n1 2\n0 3 0 4\n-1 0 0 2\n", "-1 5\n1 5\n0 0 0 4\n0 0 0 1\n", "1184 -3127\n-7123 6985\n-1943 6259 1154 -4026\n-4205 -3247 -5160 -4115\n"], "output": ["NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n"]}, "short_description": "1. One-sentence summary:  \nDetermine whether two points can be connected by a straight or single\u2010bounce (reflected) line segment without intersecting any blocking segments.\n\n2. Core algorithmic approach:  \nComputational geometry using analytic line\u2010segment intersection tests and point reflection across a line.\n\n3. Reusable components:  \n- Segment\u2013segment intersection predicate (with special handling for vertical lines and collinearity).  \n- Point reflection function across an arbitrary line defined by two points.  \n- Bounding\u2010box checks to ensure an intersection or reflection point lies within segment endpoints."}
{"name": "934_E. A Colourful Prospect", "description": "Firecrackers scare Nian the monster, but they're wayyyyy too noisy! Maybe fireworks make a nice complement.\n\nLittle Tommy is watching a firework show. As circular shapes spread across the sky, a splendid view unfolds on the night of Lunar New Year's eve.\n\nA wonder strikes Tommy. How many regions are formed by the circles on the sky? We consider the sky as a flat plane. A region is a connected part of the plane with positive area, whose bound consists of parts of bounds of the circles and is a curve or several curves without self-intersections, and that does not contain any curve other than its boundaries. Note that exactly one of the regions extends infinitely.\n\nInput\n\nThe first line of input contains one integer n (1 \u2264 n \u2264 3), denoting the number of circles.\n\nThe following n lines each contains three space-separated integers x, y and r ( - 10 \u2264 x, y \u2264 10, 1 \u2264 r \u2264 10), describing a circle whose center is (x, y) and the radius is r. No two circles have the same x, y and r at the same time.\n\nOutput\n\nPrint a single integer \u2014 the number of regions on the plane.\n\nExamples\n\nInput\n\n3\n0 0 1\n2 0 1\n4 0 1\n\n\nOutput\n\n4\n\n\nInput\n\n3\n0 0 2\n3 0 2\n6 0 2\n\n\nOutput\n\n6\n\n\nInput\n\n3\n0 0 2\n2 0 2\n1 1 2\n\n\nOutput\n\n8\n\nNote\n\nFor the first example,\n\n<image>\n\nFor the second example,\n\n<image>\n\nFor the third example,\n\n<image>", "solution": "from math import sqrt\n\nclass vector:\n\tdef __init__(self, _x = 0, _y = 0):\n\t\tself.x = _x\n\t\tself.y = _y\n\tdef len(self):\n\t\treturn sqrt(self.x ** 2 + self.y ** 2)\n\tdef len_sq(self):\n\t\treturn self.x ** 2 + self.y ** 2\n\tdef __mul__(self, other):\n\t\tif (type(self) == type(other)):\n\t\t\treturn self.x * other.x + self.y * other.y\n\t\treturn vector(self.x * other, self.y * other)\n\tdef __mod__(self, other):\n\t\treturn self.x * other.y - self.y * other.x\n\tdef normed(self):\n\t\tlength = self.len()\n\t\treturn vector(self.x / length, self.y / length)\n\tdef normate(self):\n\t\tself = self.normed()\n\tdef __str__(self):\n\t\treturn \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\tdef __add__(self, other):\n\t\treturn vector(self.x + other.x, self.y + other.y);\n\tdef __sub__(self, other):\n\t\treturn vector(self.x - other.x, self.y - other.y);\n\tdef __eq__(self, other):\n\t\treturn self.x == other.x and self.y == other.y\n\tdef rot(self):\n\t\treturn vector(self.y, -self.x)\n\nclass line:\n\tdef __init__(self, a = 0, b = 0, c = 0):\n\t\tself.a = a\n\t\tself.b = b\n\t\tself.c = c\n\tdef intersect(self, other):\n\t\td = self.a * other.b - self.b * other.a\n\t\tdx = self.c * other.b - self.b * other.c\n\t\tdy = self.a * other.c - self.c * other.a\n\t\treturn vector(dx / d, dy / d)\n\tdef fake(self, other):\n\t\td = self.a * other.b - self.b * other.a\n\t\treturn d\n\tdef __str__(self):\n\t\treturn str(self.a) + \"*x + \" + str(self.b) + \"*y = \" + str(self.c) \n\ndef line_pt(A, B):\n\t\td = (A - B).rot()\n\t\treturn line(d.x, d.y, d * A)\n\nclass circle:\n\tdef __init__(self, O = vector(0, 0), r = 0):\n\t\tself.O = O\n\t\tself.r = r\n\tdef intersect(self, other):\n\t\tO1 = self.O\n\t\tO2 = other.O\n\t\tr1 = self.r\n\t\tr2 = other.r\n\t\tif (O1 == O2):\n\t\t\treturn []\n\t\tif ((O1 - O2).len_sq() > r1 ** 2 + r2 ** 2 + 2 * r1 * r2):\n\t\t\treturn []\n\t\trad_line = line(2 * (O2.x - O1.x), 2 * (O2.y - O1.y), r1 ** 2 - O1.len_sq() - r2 ** 2 + O2.len_sq())\n\t\tcentral = line_pt(O1, O2)\n\t\tM = rad_line.intersect(central)\n\t\t# print(M)\n\t\tif ((O1 - O2).len_sq() == r1 ** 2 + r2 ** 2 + 2 * r1 * r2):\n\t\t\treturn [M]\n\t\td = (O2 - O1).normed().rot()\n\t\tif (r1 ** 2 - (O1 - M).len_sq() < 0):\n\t\t\treturn []\n\t\td = d * (sqrt(r1 ** 2 - (O1 - M).len_sq()))\n\t\treturn [M + d, M - d]\n\tdef fake(self, other):\n\t\tO1 = self.O\n\t\tO2 = other.O\n\t\tr1 = self.r\n\t\tr2 = other.r\n\t\tif (O1 == O2):\n\t\t\treturn 1\n\t\tif ((O1 - O2).len_sq() > r1 ** 2 + r2 ** 2 + 2 * r1 * r2):\n\t\t\treturn 1\n\t\trad_line = line(2 * (O2.x - O1.x), 2 * (O2.y - O1.y), r1 ** 2 - O1.len_sq() - r2 ** 2 + O2.len_sq())\n\t\tcentral = line_pt(O1, O2)\n\t\treturn rad_line.fake(central)\n\n\n# a = vector(3, 4)\n# b = vector(4, 4)\n# print(circle(vector(1, 2), 3).intersect(circle(vector(2, 1), 6)))\nn = int(input())\narr = []\nm = 1\nfor i in range(n):\n\tx, y, r = map(int, input().split())\n\tarr.append(circle(vector(x, y), r))\nfor i in range(n):\n\tfor j in range(i + 1, n):\n\t\tm *= arr[i].fake(arr[j])\nfor i in range(n):\n\tarr[i].O = arr[i].O * m\n\tarr[i].r = arr[i].r * m\n# print(m)\ns = set()\nV = 0\nfor i in range(n):\n\tfor j in range(i + 1, n):\n\t\ttmp = arr[i].intersect(arr[j])\n\t\tfor e in tmp:\n\t\t\ts.add((round(e.x, 6), round(e.y, 6)))\nV += len(s)\nE = 0\n\npar = [i for i in range(n)]\n\ndef get_par(v):\n\tif (par[v] != v):\n\t\tpar[v] = get_par(par[v])\n\treturn par[v]\ndef unite(v, u):\n\tpar[get_par(v)] = get_par(u)\nfor i in range(n):\n\ts = set()\n\tfor j in range(n):\t\n\t\ttmp = arr[i].intersect(arr[j])\n\t\tif (len(tmp)):\n\t\t\tunite(i, j)\n\t\tfor e in tmp:\n\t\t\ts.add((round(e.x, \t), round(e.y, \t)))\n\tE += len(s)\n# print(V, E)\n# print(len({get_par(i) for i in range(n)}))\nprint(E - V + 1 + len({get_par(i) for i in range(n)}))", "difficulty": 11, "public_tests": {"input": ["3\n0 0 2\n2 0 2\n1 1 2\n", "3\n0 0 1\n2 0 1\n4 0 1\n", "3\n0 0 2\n3 0 2\n6 0 2\n"], "output": ["8\n", "4\n", "6\n"]}, "private_tests": {"input": ["3\n2 5 4\n-6 -6 7\n1 6 6\n", "3\n0 0 2\n0 0 4\n3 0 2\n", "3\n5 -4 1\n3 -5 5\n-3 3 5\n", "3\n3 4 5\n-3 4 5\n0 -5 5\n", "3\n-4 -1 2\n-6 -5 10\n1 3 1\n", "1\n0 0 10\n", "3\n-10 4 10\n10 4 10\n0 -7 10\n", "3\n0 0 2\n1 0 1\n-1 0 1\n", "3\n2 4 4\n3 -6 4\n-4 -4 6\n", "3\n2 -2 5\n2 0 3\n2 -1 4\n", "3\n4 0 1\n-1 1 9\n0 3 6\n", "3\n0 -5 2\n-6 3 2\n-3 -1 3\n", "3\n0 0 1\n0 3 2\n4 0 3\n", "3\n-6 -2 7\n5 0 2\n2 4 3\n", "3\n2 0 2\n4 0 4\n0 -4 5\n", "3\n-4 1 5\n-7 7 10\n-3 -4 8\n", "3\n-5 -2 10\n3 -1 3\n-1 1 5\n", "3\n-6 2 1\n0 -6 9\n-5 -3 2\n", "3\n2 0 2\n4 0 4\n0 -4 3\n", "3\n-6 5 2\n-6 -1 4\n2 5 6\n", "3\n-3 -4 2\n-6 -2 2\n0 0 3\n", "3\n-4 0 6\n-3 -6 6\n4 6 4\n", "3\n-2 0 2\n1 4 3\n-6 3 3\n", "3\n-3 -1 8\n0 3 3\n2 2 2\n", "3\n2 0 2\n4 0 4\n0 -4 4\n", "2\n-10 10 1\n10 -10 1\n", "3\n-2 -5 4\n-5 -1 5\n-6 -2 9\n", "3\n-6 -6 9\n6 -4 1\n-3 -2 8\n", "3\n5 2 4\n-3 6 4\n-6 -6 10\n", "3\n-2 -3 5\n-6 1 7\n5 4 5\n", "3\n1 -5 1\n4 -3 3\n-6 -6 10\n", "3\n-2 0 2\n2 0 2\n0 0 4\n", "3\n0 0 6\n-4 -3 1\n-3 4 1\n", "3\n8 5 7\n7 3 7\n5 2 5\n", "3\n-2 -5 3\n1 -1 2\n-3 4 6\n", "3\n0 0 1\n2 0 1\n1 0 2\n", "3\n-3 -2 3\n-4 -6 3\n-6 -4 9\n", "3\n2 0 2\n4 0 4\n0 -4 2\n", "3\n-4 -1 5\n-1 3 10\n4 5 5\n", "3\n1 6 4\n4 2 9\n-4 -6 9\n", "3\n2 2 4\n8 2 4\n5 10 5\n", "3\n0 0 5\n1 7 5\n7 7 5\n", "3\n-1 -5 2\n-6 -6 9\n4 4 5\n", "3\n2 -6 1\n-6 5 8\n-2 2 3\n", "3\n6 1 2\n-6 -6 7\n5 -1 2\n", "3\n1 6 4\n-3 -6 5\n4 2 1\n", "3\n0 0 5\n4 0 3\n8 0 5\n", "3\n5 -5 1\n-3 1 9\n2 -6 6\n", "3\n-5 3 5\n5 -2 6\n-3 4 4\n", "3\n-1 -3 9\n0 -2 7\n-6 -6 10\n", "3\n-6 -4 9\n0 4 1\n-1 3 1\n", "3\n-6 -2 1\n-3 -1 1\n-2 1 4\n", "3\n1 0 1\n-1 0 1\n0 1 1\n", "3\n1 8 2\n3 8 1\n3 -2 9\n", "3\n-5 3 6\n4 -3 2\n-2 -1 1\n", "3\n-3 6 4\n-1 4 7\n0 2 1\n", "3\n6 -5 1\n3 1 9\n-6 -6 9\n", "3\n0 0 5\n8 0 5\n4 0 3\n", "3\n-2 2 3\n0 -6 3\n-6 -1 8\n", "3\n-5 -2 3\n-1 1 8\n-4 -3 1\n", "3\n-6 6 9\n6 1 4\n2 0 1\n", "3\n2 -6 3\n-2 0 1\n1 -4 6\n", "3\n0 4 4\n-6 -4 6\n-4 -2 4\n", "3\n2 1 2\n-6 -1 6\n6 4 7\n", "3\n3 -5 5\n-1 -2 10\n-5 1 5\n", "3\n-1 -1 10\n-5 2 5\n1 -6 5\n", "3\n-4 4 3\n5 6 4\n1 -5 9\n", "3\n2 -1 4\n-1 -5 1\n-5 0 9\n", "3\n-4 -5 3\n-3 -4 1\n-6 0 9\n", "3\n-4 3 4\n0 0 1\n-5 -4 3\n", "3\n2 -2 8\n6 -5 3\n3 -1 8\n", "3\n6 -1 1\n1 1 4\n-2 5 9\n", "3\n-6 -6 8\n5 6 8\n2 2 3\n", "3\n6 -3 6\n2 0 1\n-6 6 9\n", "3\n6 2 6\n-6 5 7\n-2 -4 4\n", "3\n-2 8 10\n3 -2 5\n3 1 3\n", "3\n1 -7 10\n-7 9 10\n-2 -1 4\n", "3\n-5 -6 7\n-6 0 6\n-2 3 1\n", "3\n2 0 2\n4 0 4\n0 -4 8\n", "2\n0 0 2\n3 0 2\n", "3\n-10 0 2\n-8 2 2\n-4 -3 5\n", "3\n-3 0 5\n3 0 5\n0 0 4\n", "3\n-5 3 4\n1 4 4\n-6 -6 10\n", "3\n-5 -6 5\n-2 -2 10\n-3 4 3\n", "3\n2 6 5\n1 -1 5\n-2 3 10\n", "3\n4 1 5\n-4 1 5\n0 0 4\n", "3\n5 -2 3\n1 1 2\n4 -3 7\n", "3\n-9 10 10\n9 4 10\n0 -2 6\n", "3\n-4 -2 9\n8 4 9\n-10 10 10\n", "3\n-4 1 1\n-2 -6 7\n-6 -3 2\n", "3\n-6 5 7\n1 -2 7\n7 9 7\n", "3\n4 5 10\n1 -1 5\n-1 -5 5\n", "3\n-1 0 5\n5 0 5\n5 8 5\n", "3\n-3 3 5\n1 -1 7\n2 5 10\n", "2\n-10 -10 10\n10 10 10\n", "2\n-6 6 9\n3 -6 6\n", "3\n-6 -6 9\n6 -5 3\n-5 -1 9\n", "3\n-5 -6 8\n-2 -1 7\n1 -5 2\n", "3\n-3 -6 4\n1 -3 1\n-2 1 4\n", "3\n-1 -2 3\n-5 -4 4\n-6 -5 8\n", "3\n-4 -5 4\n6 5 2\n-6 -6 7\n", "3\n3 -2 7\n-1 2 5\n-4 1 3\n", "3\n-5 5 4\n2 3 3\n-6 -6 7\n", "3\n-4 -5 7\n2 -3 6\n-2 0 1\n", "3\n-1 0 5\n-2 1 5\n-5 4 7\n", "3\n1 -1 2\n-6 -3 10\n-1 3 1\n", "3\n-6 -6 7\n1 4 2\n0 -5 2\n", "3\n-1 5 6\n-3 -4 5\n-6 -6 6\n", "3\n-4 -2 7\n-6 -1 7\n-3 -5 2\n", "3\n0 0 1\n2 0 3\n-2 0 3\n", "3\n4 -3 8\n3 -3 7\n-3 -3 1\n", "3\n-6 -6 9\n4 -3 4\n-3 -1 1\n", "3\n5 -6 6\n-3 0 4\n-4 6 9\n", "3\n-1 3 4\n-2 0 8\n3 6 1\n", "3\n-3 1 4\n-1 6 9\n-6 5 9\n", "3\n2 -5 2\n-5 -6 3\n-2 -2 3\n", "3\n-6 6 4\n-2 3 1\n-1 -3 1\n", "3\n-6 -6 8\n-4 -5 1\n-1 -4 6\n", "3\n0 0 1\n0 1 1\n0 2 1\n", "3\n-9 0 9\n-9 10 10\n9 4 10\n", "3\n0 0 1\n1 0 1\n2 0 1\n", "3\n3 4 9\n2 -3 1\n-1 1 4\n", "3\n1 3 1\n2 -6 7\n-3 6 6\n", "3\n3 -4 2\n-1 -1 3\n-5 2 8\n", "3\n-4 4 4\n2 4 2\n-1 0 6\n", "3\n9 5 10\n8 -2 9\n-9 -1 9\n", "3\n5 -2 6\n-1 6 4\n2 2 1\n"], "output": ["4\n", "6\n", "4\n", "7\n", "5\n", "2\n", "7\n", "5\n", "5\n", "4\n", "4\n", "4\n", "5\n", "4\n", "7\n", "8\n", "7\n", "4\n", "7\n", "5\n", "5\n", "5\n", "4\n", "5\n", "6\n", "3\n", "5\n", "5\n", "6\n", "7\n", "6\n", "5\n", "4\n", "8\n", "5\n", "5\n", "5\n", "5\n", "6\n", "6\n", "8\n", "7\n", "4\n", "4\n", "5\n", "4\n", "6\n", "5\n", "5\n", "6\n", "7\n", "4\n", "6\n", "7\n", "4\n", "4\n", "5\n", "6\n", "5\n", "4\n", "6\n", "4\n", "7\n", "4\n", "5\n", "6\n", "6\n", "5\n", "4\n", "4\n", "6\n", "4\n", "4\n", "4\n", "7\n", "8\n", "8\n", "5\n", "5\n", "4\n", "7\n", "6\n", "8\n", "4\n", "6\n", "7\n", "4\n", "8\n", "8\n", "5\n", "8\n", "6\n", "6\n", "7\n", "3\n", "3\n", "6\n", "7\n", "6\n", "6\n", "4\n", "7\n", "4\n", "5\n", "6\n", "4\n", "5\n", "6\n", "5\n", "6\n", "4\n", "5\n", "6\n", "5\n", "7\n", "5\n", "4\n", "5\n", "7\n", "8\n", "7\n", "4\n", "4\n", "4\n", "7\n", "8\n", "4\n"]}, "generated_tests": {"input": ["3\n2 10 4\n-6 -6 7\n1 6 6\n", "3\n0 0 3\n0 0 4\n3 0 2\n", "3\n3 4 5\n-3 4 5\n0 -2 5\n", "3\n-4 -1 2\n-6 -5 10\n2 3 1\n", "1\n0 0 9\n", "3\n4 -2 5\n2 0 3\n2 -1 4\n", "2\n-11 10 1\n10 -10 1\n", "3\n5 -4 1\n3 -5 2\n-3 3 5\n", "3\n-10 4 10\n14 4 10\n0 -7 10\n", "3\n2 4 4\n3 -9 4\n-4 -4 6\n", "3\n4 0 1\n-1 1 9\n0 5 6\n", "3\n-1 -5 2\n-6 3 2\n-3 -1 3\n", "3\n0 0 1\n0 3 2\n4 0 6\n", "3\n-6 -2 7\n5 0 2\n2 0 3\n", "3\n2 0 3\n4 0 4\n0 -4 5\n", "3\n-2 1 5\n-7 7 10\n-3 -4 8\n", "3\n-5 -2 10\n3 -1 3\n-2 1 5\n", "3\n-6 2 1\n0 -6 9\n-8 -3 2\n", "3\n-3 -4 2\n-6 -2 2\n0 0 2\n", "3\n-7 0 6\n-3 -6 6\n4 6 4\n", "3\n-2 0 2\n1 4 4\n-6 3 3\n", "3\n-3 -2 8\n0 3 3\n2 2 2\n", "3\n2 0 2\n4 -1 4\n0 -4 4\n", "3\n-2 -5 4\n-5 -1 5\n-6 -2 16\n", "3\n-6 -8 9\n6 -4 1\n-3 -2 8\n", "3\n8 2 4\n-3 6 4\n-6 -6 10\n", "3\n-2 -3 5\n-6 0 7\n5 4 5\n", "3\n1 -3 1\n4 -3 3\n-6 -6 10\n", "3\n-2 0 2\n2 0 2\n0 1 4\n", "3\n8 9 7\n7 3 7\n5 2 5\n", "3\n-2 -5 3\n1 -1 2\n-1 4 6\n", "3\n0 0 1\n2 0 1\n1 1 2\n", "3\n-5 -2 3\n-4 -6 3\n-6 -4 9\n", "3\n2 0 2\n4 0 4\n0 -5 2\n", "3\n1 6 4\n4 2 9\n-8 -6 9\n", "3\n2 2 4\n12 2 4\n5 10 5\n", "3\n0 0 5\n1 7 5\n13 7 5\n", "3\n-1 -5 2\n-6 -6 13\n4 4 5\n", "3\n2 -6 1\n-6 5 8\n-2 2 5\n", "3\n9 1 2\n-6 -6 7\n5 -1 2\n", "3\n1 6 4\n-3 -6 5\n8 2 1\n", "3\n0 0 5\n4 0 3\n14 0 5\n", "3\n5 -5 1\n-3 1 5\n2 -6 6\n", "3\n-5 3 5\n5 -2 6\n-3 6 4\n", "3\n-1 -3 9\n0 -2 7\n-2 -6 10\n", "3\n-6 -5 9\n0 4 1\n-1 3 1\n"], "output": ["5\n", "6\n", "8\n", "4\n", "2\n", "7\n", "3\n", "5\n", "6\n", "5\n", "6\n", "5\n", "5\n", "6\n", "8\n", "8\n", "6\n", "5\n", "5\n", "5\n", "5\n", "8\n", "8\n", "5\n", "5\n", "5\n", "8\n", "6\n", "7\n", "8\n", "5\n", "7\n", "5\n", "4\n", "5\n", "5\n", "5\n", "5\n", "5\n", "4\n", "4\n", "5\n", "5\n", "5\n", "6\n", "6\n"]}, "short_description": "1. One-sentence summary:\nThis solution computes the number of regions (faces) formed by an arrangement of circles by interpreting their intersections as a planar graph and applying Euler\u2019s formula.\n\n2. Core algorithmic approach:\n\u2013 Computational geometry to find all circle\u2010circle intersection points (reducing to line\u2013line and point computations).  \n\u2013 Union\u2010find (disjoint\u2010set) to count connected components among the circles.  \n\u2013 Application of the Euler characteristic for planar graphs: #faces = E \u2212 V + C + 1.\n\n3. Reusable components:\n\u2013 A 2D vector class with operations (addition, subtraction, dot\u2010product, cross\u2010product, normalization, rotation) for geometric primitives.  \n\u2013 A function to represent the line through two points (`line_pt`) and to compute line\u2013line intersections.  \n\u2013 A circle\u2010circle intersection routine that handles point, two\u2010point, and tangent intersection cases.  \n\u2013 A small union\u2010find (disjoint\u2010set) implementation for tracking connectivity."}
{"name": "618_C. Constellation", "description": "Cat Noku has obtained a map of the night sky. On this map, he found a constellation with n stars numbered from 1 to n. For each i, the i-th star is located at coordinates (xi, yi). No two stars are located at the same position.\n\nIn the evening Noku is going to take a look at the night sky. He would like to find three distinct stars and form a triangle. The triangle must have positive area. In addition, all other stars must lie strictly outside of this triangle. He is having trouble finding the answer and would like your help. Your job is to find the indices of three stars that would form a triangle that satisfies all the conditions. \n\nIt is guaranteed that there is no line such that all stars lie on that line. It can be proven that if the previous condition is satisfied, there exists a solution to this problem.\n\nInput\n\nThe first line of the input contains a single integer n (3 \u2264 n \u2264 100 000).\n\nEach of the next n lines contains two integers xi and yi ( - 109 \u2264 xi, yi \u2264 109).\n\nIt is guaranteed that no two stars lie at the same point, and there does not exist a line such that all stars lie on that line.\n\nOutput\n\nPrint three distinct integers on a single line \u2014 the indices of the three points that form a triangle that satisfies the conditions stated in the problem.\n\nIf there are multiple possible answers, you may print any of them.\n\nExamples\n\nInput\n\n3\n0 1\n1 0\n1 1\n\n\nOutput\n\n1 2 3\n\n\nInput\n\n5\n0 0\n0 2\n2 0\n2 2\n1 1\n\n\nOutput\n\n1 3 5\n\nNote\n\nIn the first sample, we can print the three indices in any order.\n\nIn the second sample, we have the following picture. \n\n<image>\n\nNote that the triangle formed by starts 1, 4 and 3 doesn't satisfy the conditions stated in the problem, as point 5 is not strictly outside of this triangle (it lies on it's border).", "solution": "f = lambda: list(map(int, input().split()))\nd = lambda x, y: (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2\nr = lambda x, y, z: (x[0] - y[0]) * (x[1] - z[1]) == (x[1] - y[1]) * (x[0] - z[0])\n\nn = int(input())\nt = [f() for i in range(n)]\n\nj = k = -1\nb = c = 0\n\nx = t.pop()\nfor i in range(n - 1):\n    a = d(x, t[i])\n    if j < 0 or a < b: j, b = i, a\n\ny = t.pop(j)\nfor i in range(n - 2):\n    if r(x, y, t[i]): continue\n    a = d(x, t[i])\n    if k < 0 or a < c: k, c = i, a\n\nprint(n, j + 1, k + 2 - (j > k))", "difficulty": 9, "public_tests": {"input": ["3\n0 1\n1 0\n1 1\n", "5\n0 0\n0 2\n2 0\n2 2\n1 1\n"], "output": ["1 2 3\n", "1 2 5\n"]}, "private_tests": {"input": ["4\n0 0\n131072 0\n131072 131072\n200000 0\n", "10\n999999999 1\n999999998 1\n999999997 1\n1000000000 1\n999999996 1\n999999995 1\n999999994 1\n999999992 1\n999999993 1\n0 0\n", "4\n0 0\n0 1\n0 2\n3 3\n", "4\n0 1\n0 2\n0 3\n7 7\n", "4\n0 0\n1 1\n2 2\n3 4\n", "4\n-50000000 204926\n0 0\n8192 50000000\n16384 100000000\n", "11\n-1000000000 1\n-1000000000 2\n-1000000000 3\n-1000000000 4\n-1000000000 5\n-1000000000 6\n-1000000000 7\n-1000000000 8\n-1000000000 9\n-1000000000 10\n-999999999 7\n", "10\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 1\n9 0\n", "3\n-1000000000 -1000000000\n1000000000 -1000000000\n-1000000000 1000000000\n", "4\n0 0\n1 0\n2 0\n2 1\n", "3\n0 0\n999999999 1\n999999998 1\n", "5\n0 1\n0 2\n0 3\n0 4\n10 10\n", "10\n25280705 121178189\n219147240 -570920213\n-829849659 923854124\n18428128 -781819137\n-876779400 528386329\n-780997681 387686853\n-101900553 749998368\n58277314 355353788\n732128908 336416193\n840698381 600685123\n", "4\n0 0\n0 2\n0 1\n10 10\n", "3\n0 0\n12345691 12336918\n19349510 19335760\n", "4\n0 1\n0 2\n0 3\n1 1\n", "12\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1000000000 6\n1000000000 7\n1000000000 8\n1000000000 9\n1000000000 10\n999999999 5\n", "4\n0 0\n1 1\n2 2\n5 -1\n", "3\n819934317 939682125\n487662889 8614219\n-557136619 382982369\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-1000000000 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -2\n", "4\n0 0\n2 0\n1 0\n1 1\n", "11\n-1000000000 1\n-1000000000 2\n-1000000000 3\n-1000000000 4\n-1000000000 5\n-1000000000 6\n-1000000000 7\n-1000000000 8\n-1000000000 9\n-1000000000 10\n-999999999 5\n", "4\n0 0\n0 2\n0 1\n3 3\n", "4\n0 0\n2 0\n1 1\n1 0\n", "21\n0 19\n0 0\n0 8\n0 2\n0 18\n0 17\n0 1\n0 5\n0 16\n0 11\n0 10\n0 13\n0 12\n0 14\n0 6\n0 7\n0 3\n0 15\n0 4\n0 9\n1 1\n", "3\n-536870912 10\n536870912 11\n-536870912 6\n", "4\n0 0\n0 1\n0 2\n1 1\n", "10\n2 1000000000\n8 1000000000\n9 1000000000\n3 1000000000\n4 1000000000\n5 1000000000\n6 1000000000\n1 1000000000\n7 1000000000\n0 0\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-1000000000 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -4\n", "4\n0 0\n2 2\n1 1\n2 0\n", "10\n404775998 670757742\n30131431 723806809\n25599613 633170449\n13303280 387243789\n-33017802 -539177851\n1425218 149682549\n-47620079 -831223391\n-25996011 -398742031\n38471092 890600029\n-3745401 46270169\n", "12\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1000000000 6\n1000000000 7\n1000000000 8\n1000000000 9\n1000000000 10\n999999999 10\n", "4\n0 0\n3 0\n2 0\n1 1\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-1000000000 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -1\n", "12\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1000000000 6\n1000000000 7\n1000000000 8\n1000000000 9\n1000000000 10\n999999999 1\n", "4\n0 1\n0 0\n0 5\n1 1\n", "12\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1000000000 6\n1000000000 7\n1000000000 8\n1000000000 9\n1000000000 10\n999999999 -1\n", "4\n0 0\n1 0\n2 0\n1 100\n", "10\n13303280 387243789\n30131431 723806809\n404775998 670757742\n-25996011 -398742031\n25599613 633170449\n38471092 890600029\n-33017802 -539177851\n-47620079 -831223391\n1425218 149682549\n-3745401 46270169\n", "10\n1000000000 1\n999999999 1\n999999998 1\n999999997 1\n999999996 1\n999999995 1\n999999994 1\n999999993 1\n999999992 1\n0 0\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-1000000000 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -8\n", "4\n1 0\n2 0\n3 0\n-7 -7\n", "3\n1 2\n2 1\n2 3\n", "10\n0 0\n1 -100\n1 100\n1 50\n1 0\n1 -50\n1 10\n1 -10\n1 5\n1 -5\n", "11\n-1000000000 1\n-1000000000 2\n-1000000000 3\n-1000000000 4\n-1000000000 5\n-1000000000 6\n-1000000000 7\n-1000000000 8\n-1000000000 9\n-1000000000 10\n-999999999 8\n", "4\n0 0\n1 0\n2 0\n3 1\n", "11\n-1000000000 1\n-1000000000 2\n-1000000000 3\n-1000000000 4\n-1000000000 5\n-1000000000 6\n-1000000000 7\n-1000000000 8\n-1000000000 9\n-1000000000 10\n-999999999 10\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-1000000000 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -5\n", "10\n999999999 1\n999999998 1\n999999997 1\n999999996 1\n999999995 1\n999999994 1\n999999993 1\n1000000000 1\n999999992 1\n0 0\n", "4\n0 0\n-1 -1\n1 1\n100 0\n", "4\n3 7\n2 4\n1 2\n0 0\n", "4\n65537 536870912\n0 536805376\n1 536870912\n-8191 0\n", "4\n1 1\n2 2\n3 3\n10 11\n", "10\n0 999999999\n0 1000000000\n-1 1000000000\n1 1000000000\n-2 1000000000\n2 1000000000\n-3 1000000000\n3 1000000000\n-4 1000000000\n4 1000000000\n"], "output": ["1 2 3\n", "10 8 9\n", "1 2 4\n", "1 2 4\n", "1 2 4\n", "1 2 3\n", "1 2 11\n", "1 2 9\n", "1 3 2\n", "1 2 4\n", "1 3 2\n", "1 2 5\n", "5 3 6\n", "1 3 4\n", "1 2 3\n", "1 2 4\n", "12 1 2\n", "1 2 4\n", "3 2 1\n", "10 9 11\n", "1 3 4\n", "1 2 11\n", "1 3 4\n", "1 4 3\n", "2 7 21\n", "3 1 2\n", "1 2 4\n", "10 8 1\n", "10 9 11\n", "1 3 4\n", "7 5 1\n", "12 1 2\n", "1 4 3\n", "10 9 11\n", "12 1 2\n", "2 1 4\n", "12 1 2\n", "1 2 4\n", "8 7 3\n", "10 9 8\n", "10 9 11\n", "4 1 2\n", "1 2 3\n", "1 2 6\n", "1 2 11\n", "1 2 4\n", "1 2 11\n", "10 9 11\n", "10 9 7\n", "2 1 4\n", "4 3 1\n", "4 2 1\n", "1 2 4\n", "9 7 1\n"]}, "generated_tests": {"input": ["4\n0 0\n131072 0\n131072 23407\n200000 0\n", "10\n999999999 1\n434923735 1\n999999997 1\n1000000000 1\n999999996 1\n999999995 1\n999999994 1\n999999992 1\n999999993 1\n0 0\n", "4\n0 -1\n0 1\n0 2\n3 3\n", "10\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n14 1\n9 0\n", "3\n-1000000000 -1000000000\n1000000000 -1000000000\n-1000000000 1000000001\n", "5\n0 1\n0 2\n0 3\n0 4\n18 10\n", "10\n25280705 121178189\n219147240 -570920213\n-829849659 923854124\n18428128 -781819137\n-876779400 528386329\n-780997681 387686853\n-101900553 749998368\n58277314 540682080\n732128908 336416193\n840698381 600685123\n", "12\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1000000000 6\n1100000000 7\n1000000000 8\n1000000000 9\n1000000000 10\n999999999 5\n", "3\n819934317 939682125\n201514220 8614219\n-557136619 382982369\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-1000000000 -6\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -2\n", "21\n0 19\n0 0\n0 8\n0 2\n0 18\n0 17\n0 1\n0 5\n0 16\n0 11\n-1 10\n0 13\n0 12\n0 14\n0 6\n0 7\n0 3\n0 15\n0 4\n0 9\n1 1\n", "3\n-536870912 18\n536870912 11\n-536870912 6\n", "10\n2 1000000000\n8 1000000000\n9 1000000000\n3 1000000000\n4 1000000000\n5 1000000000\n6 1000000000\n0 1000000000\n7 1000000000\n0 0\n", "10\n404775998 670757742\n30131431 723806809\n25599613 633170449\n13303280 387243789\n-33017802 -539177851\n1425218 149682549\n-47620079 -831223391\n-25996011 -398742031\n38471092 890600029\n-2418967 46270169\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-1000000000 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -16\n-1000000000 -9\n-1000000000 -10\n-999999999 -1\n", "4\n0 1\n0 -1\n0 5\n1 1\n", "10\n13303280 387243789\n30131431 723806809\n404775998 670757742\n-25996011 -398742031\n25599613 633170449\n38471092 890600029\n-33017802 -539177851\n-47620079 -831223391\n1425218 149682549\n-3745401 14374977\n", "10\n1000000000 1\n999999999 0\n999999998 1\n999999997 1\n999999996 1\n999999995 1\n999999994 1\n999999993 1\n999999992 1\n0 0\n", "4\n1 0\n2 0\n3 0\n-10 -7\n", "11\n-1000000000 1\n-1000000000 2\n-1000000000 3\n-1000000000 4\n-1744005422 5\n-1000000000 6\n-1000000000 7\n-1000000000 8\n-1000000000 9\n-1000000000 10\n-999999999 8\n", "11\n-1000000000 1\n-748309410 2\n-1000000000 3\n-1000000000 4\n-1000000000 5\n-1000000000 6\n-1000000000 7\n-1000000000 8\n-1000000000 9\n-1000000000 10\n-999999999 7\n", "11\n-1000000000 -1\n-1000000000 -2\n-1127073570 -3\n-1000000000 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -5\n", "10\n999999999 1\n999999998 1\n999999997 1\n1409603102 1\n999999995 1\n999999994 1\n999999993 1\n1000000000 1\n999999992 1\n0 0\n", "4\n-1 0\n-1 -1\n1 1\n100 0\n", "4\n3 7\n2 4\n1 2\n0 1\n", "4\n65537 536870912\n0 536805376\n1 155909309\n-8191 0\n", "10\n0 999999999\n0 1000000000\n-1 1000000000\n1 1000000000\n-2 1000000000\n2 1000000000\n-3 1000000000\n3 1000000000\n-4 1000000000\n4 1000001000\n", "11\n-1000000000 1\n-748309410 2\n-1097774360 3\n-1000000000 4\n-1000000000 5\n-1000000000 6\n-1000000000 7\n-1000000000 8\n-1000000000 9\n-1000000000 10\n-999999999 7\n", "10\n999999999 1\n999999998 1\n999999997 1\n1409603102 1\n999999995 1\n999999994 1\n999999993 1\n0000000000 1\n999999992 1\n0 0\n", "4\n0 0\n1 2\n2 2\n3 4\n", "4\n-50000000 204926\n0 0\n8192 59149101\n16384 100000000\n", "4\n0 0\n1 -1\n2 0\n2 1\n", "3\n0 0\n999999999 1\n92144091 1\n", "4\n0 0\n1 2\n0 1\n10 10\n", "3\n0 0\n12345691 12336918\n37526474 19335760\n", "4\n0 1\n0 2\n0 4\n1 1\n", "4\n0 0\n1 1\n4 2\n5 -1\n", "4\n0 0\n0 1\n-1 2\n1 1\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-1000000000 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 0\n", "12\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1001000000 6\n1000000000 7\n1000000000 8\n1000000000 9\n1000000000 10\n999999999 10\n", "4\n0 0\n1 0\n2 0\n1 1\n", "12\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1000000000 6\n1000000000 14\n1000000000 8\n1000000000 9\n1000000000 10\n999999999 1\n", "12\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1000000000 6\n1000000000 7\n1000000000 8\n1000000000 9\n1000000000 7\n999999999 -1\n", "11\n-1000000000 -1\n-1000000000 -2\n-667876445 -3\n-1000000000 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -8\n", "3\n1 2\n2 1\n1 3\n", "4\n0 0\n1 -1\n2 0\n3 1\n", "4\n0 0\n131072 0\n131072 45600\n200000 0\n", "4\n0 -2\n0 1\n0 2\n3 3\n", "4\n0 0\n1 2\n2 4\n3 4\n", "4\n-50000000 401371\n0 0\n8192 59149101\n16384 100000000\n", "10\n0 0\n1 0\n4 0\n3 0\n4 0\n5 0\n6 0\n7 0\n14 1\n9 0\n", "3\n-1000000000 -1000000000\n1000000000 -1000000000\n-1000000000 1000000011\n", "3\n0 0\n1797234326 1\n92144091 1\n", "5\n0 0\n0 2\n0 3\n0 4\n18 10\n", "10\n25280705 121178189\n219147240 -681376686\n-829849659 923854124\n18428128 -781819137\n-876779400 528386329\n-780997681 387686853\n-101900553 749998368\n58277314 540682080\n732128908 336416193\n840698381 600685123\n", "4\n0 -1\n1 2\n0 1\n10 10\n", "3\n0 1\n12345691 12336918\n37526474 19335760\n", "4\n0 0\n0 2\n0 4\n1 1\n", "12\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1000000000 6\n1100000000 7\n1000000000 8\n1000000010 9\n1000000000 10\n999999999 5\n", "4\n0 0\n1 1\n4 2\n5 -2\n", "3\n819934317 939682125\n213622824 8614219\n-557136619 382982369\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-1000000000 -1\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -2\n", "3\n-536870912 0\n536870912 11\n-536870912 6\n", "4\n0 0\n0 1\n-1 3\n1 1\n", "10\n2 1000000000\n8 1000000000\n9 1000000000\n3 1000000000\n7 1000000000\n5 1000000000\n6 1000000000\n0 1000000000\n7 1000000000\n0 0\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-1000000000 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1114707290 -10\n-999999999 0\n", "12\n1000000000 0\n1000000000 1\n1000000000 4\n1000000000 3\n1000000000 4\n1000000000 5\n1001000000 6\n1000000000 7\n1000000000 8\n1000000000 9\n1000000000 10\n999999999 10\n", "11\n-1000000000 -1\n-1000000000 -2\n-1000000000 -3\n-855673403 -4\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -16\n-1000000000 -9\n-1000000000 -10\n-999999999 -1\n", "12\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1000000000 6\n1000000000 14\n1000000000 8\n1000000000 9\n1000000000 12\n999999999 1\n", "4\n0 1\n0 -1\n-1 5\n1 1\n", "11\n-1000000000 -1\n-1000000000 -2\n-667876445 -3\n-1000000000 -3\n-1000000000 -5\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -8\n", "4\n-1 0\n1 -1\n2 0\n3 1\n", "11\n-1000000000 -1\n-1000000000 -2\n-1127073570 -3\n-1000000000 -4\n-1000000000 -7\n-1000000000 -6\n-1000000000 -7\n-1000000000 -8\n-1000000000 -9\n-1000000000 -10\n-999999999 -5\n", "4\n-1 0\n-1 -1\n2 1\n100 0\n", "4\n3 7\n2 4\n1 2\n-1 1\n", "4\n102882 536870912\n0 536805376\n1 155909309\n-8191 0\n", "10\n0 999999999\n0 1001000000\n-1 1000000000\n1 1000000000\n-2 1000000000\n2 1000000000\n-3 1000000000\n3 1000000000\n-4 1000000000\n4 1000001000\n", "4\n0 -2\n0 1\n0 4\n3 3\n"], "output": ["1 2 3\n", "10 2 8\n", "1 2 4\n", "1 2 9\n", "1 3 2\n", "1 2 5\n", "5 3 6\n", "12 1 2\n", "3 2 1\n", "10 9 11\n", "11 2 7\n", "3 1 2\n", "10 8 1\n", "7 5 10\n", "8 10 11\n", "2 1 4\n", "8 7 10\n", "10 9 8\n", "4 1 2\n", "5 1 2\n", "1 3 11\n", "3 10 9\n", "10 9 7\n", "2 1 3\n", "4 3 2\n", "4 2 3\n", "9 7 1\n", "3 1 4\n", "10 8 9\n", "1 2 3\n", "1 2 3\n", "1 2 3\n", "1 3 2\n", "1 3 2\n", "1 2 3\n", "1 2 4\n", "1 2 3\n", "3 1 2\n", "10 9 11\n", "12 1 2\n", "1 2 4\n", "12 1 2\n", "12 1 2\n", "10 9 11\n", "1 3 2\n", "1 2 3\n", "1 2 3\n", "1 2 4\n", "1 2 4\n", "1 2 3\n", "1 2 9\n", "1 3 2\n", "1 3 2\n", "1 2 5\n", "5 3 6\n", "1 3 2\n", "1 2 3\n", "1 2 4\n", "12 1 2\n", "1 2 3\n", "3 2 1\n", "10 9 11\n", "1 3 2\n", "3 1 2\n", "10 8 1\n", "10 9 8\n", "12 1 2\n", "8 10 11\n", "12 1 2\n", "3 2 1\n", "10 9 11\n", "1 2 3\n", "3 10 9\n", "2 1 3\n", "4 3 2\n", "4 2 3\n", "9 7 1\n", "1 2 4\n"]}, "short_description": "1. One-sentence summary:  \nGiven a set of planar points, the solution greedily picks three points forming a non\u2010degenerate triangle by first choosing the closest neighbor to a reference point and then the next\u2010closest point that is not collinear with the first two.\n\n2. Core algorithmic approach:  \nA pair of linear scans (O(n) nearest\u2010neighbor searches) combined with a constant\u2010time geometric collinearity check (cross\u2010product orientation), i.e., a greedy selection based on minimum squared distances and orientation tests.\n\n3. Reusable components:  \n- Squared\u2010distance function: computes (x1\u2212x2)\u00b2+(y1\u2212y2)\u00b2 for distance comparisons without costly square roots.  \n- Orientation/collinearity predicate: uses cross product ((x\u2081\u2212x\u2082)*(y\u2081\u2212y\u2083) == (y\u2081\u2212y\u2082)*(x\u2081\u2212x\u2083)) to test if three points are collinear.  \n- Linear scan \u201cargmin\u201d pattern: iterates once through an array to find the index of the minimum value according to a custom metric."}
{"name": "850_A. Five Dimensional Points", "description": "You are given set of n points in 5-dimensional space. The points are labeled from 1 to n. No two points coincide.\n\nWe will call point a bad if there are different points b and c, not equal to a, from the given set such that angle between vectors <image> and <image> is acute (i.e. strictly less than <image>). Otherwise, the point is called good.\n\nThe angle between vectors <image> and <image> in 5-dimensional space is defined as <image>, where <image> is the scalar product and <image> is length of <image>.\n\nGiven the list of points, print the indices of the good points in ascending order.\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 103) \u2014 the number of points.\n\nThe next n lines of input contain five integers ai, bi, ci, di, ei (|ai|, |bi|, |ci|, |di|, |ei| \u2264 103) \u2014 the coordinates of the i-th point. All points are distinct.\n\nOutput\n\nFirst, print a single integer k \u2014 the number of good points.\n\nThen, print k integers, each on their own line \u2014 the indices of the good points in ascending order.\n\nExamples\n\nInput\n\n6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\n\nOutput\n\n1\n1\n\n\nInput\n\n3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample, the first point forms exactly a <image> angle with all other pairs of points, so it is good.\n\nIn the second sample, along the cd plane, we can see the points look as follows:\n\n<image>\n\nWe can see that all angles here are acute, so no points are good.", "solution": "n=int(input())\nA=[]\njs=0\nB=[]\nfor i in range(n):\n    A.append(list(map(int,input().split())))\n\ndef product(a,b,c):\n    pr=0\n    for m in range(5):\n        pr=pr+(A[b][m]-A[a][m])*(A[c][m]-A[a][m])\n    return (pr)\n\nif(n>11):\n    print(0)\nelse:\n    for j in range(n):\n        k=0\n        l=0\n        flag=0\n        while(k<n):\n            l=k+1\n            while(l<n):\n                pro=product(j,k,l)\n                if(l!=j and k!=j and pro>0):\n                    flag=1\n                    break\n                else:\n                    l=l+1\n            if(flag==1):\n                break\n            else:\n                k=k+1\n        if(k==n):\n            js=js+1\n            B.append(j+1)\n    print(js)\n    for f in range(js):\n        print(B[f])\n \t   \t       \t\t  \t \t\t   \t  \t\t \t", "difficulty": 7, "public_tests": {"input": ["3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n", "6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n"], "output": ["0\n", "1\n1\n"]}, "private_tests": {"input": ["10\n0 -110 68 -51 -155\n-85 -110 68 -51 -155\n85 -70 51 68 -230\n0 -40 51 68 75\n0 5 -51 -68 -190\n85 0 0 0 0\n85 -115 -68 51 35\n85 -75 -187 34 -40\n-85 -110 -136 102 -155\n85 -110 -17 119 -155\n", "11\n1 0 0 0 0\n-1 0 0 0 0\n0 1 0 0 0\n0 -1 0 0 0\n0 0 1 0 0\n0 0 -1 0 0\n0 0 0 1 0\n0 0 0 -1 0\n0 0 0 0 1\n0 0 0 0 -1\n0 0 0 0 0\n", "8\n-559 581 509 257 343\n-544 451 569 277 343\n-451 451 434 401 343\n-559 451 509 257 83\n-664 451 89 117 343\n-559 451 509 257 993\n-715 451 509 374 343\n-811 451 684 -79 343\n", "6\n-305 -390 638 -623 343\n479 755 -343 144 89\n-268 843 -461 989 -301\n-986 -274 347 -847 -728\n278 718 -372 -674 270\n-477 562 -489 -858 611\n", "11\n358 -724 -232 53 -520\n486 -554 -328 53 -220\n358 -554 -232 -372 -520\n358 -554 -232 308 -520\n868 -554 448 53 -520\n478 -554 -322 53 -600\n358 296 -232 53 -520\n256 -554 -368 53 -520\n230 -554 -136 53 -820\n-182 -554 173 53 -160\n358 -554 -232 53 -520\n", "11\n8 8 8 8 8\n2 2 2 2 2\n0 0 0 0 0\n6 6 6 6 6\n7 7 7 7 7\n10 10 10 10 10\n9 9 9 9 9\n3 3 3 3 3\n1 1 1 1 1\n5 5 5 5 5\n4 4 4 4 4\n", "2\n0 1 2 3 4\n5 6 7 8 9\n", "1\n0 0 0 0 0\n", "4\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 1 1 0 0\n", "7\n49 457 -650 325 -325\n0 0 325 325 0\n253 204 -325 0 -325\n204 -253 325 325 325\n408 -506 -325 -325 325\n49 457 -650 325 -650\n0 0 0 650 -325\n", "10\n-705 38 170 -768 689\n-705 86 248 -768 709\n-705 86 170 -742 709\n-705 86 144 -768 709\n-705 86 170 -820 709\n-705 106 170 -768 661\n-822 86 170 -768 709\n-705 98 170 -768 714\n-705 86 170 -768 709\n-601 86 170 -768 709\n"], "output": ["0\n", "1\n11\n", "0\n", "0\n", "1\n11\n", "0\n", "2\n1\n2\n", "1\n1\n", "0\n", "0\n", "1\n9\n"]}, "generated_tests": {"input": ["10\n0 -110 68 -51 -155\n-74 -110 68 -51 -155\n85 -70 51 68 -230\n0 -40 51 68 75\n0 5 -51 -68 -190\n85 0 0 0 0\n85 -115 -68 51 35\n85 -75 -187 34 -40\n-85 -110 -136 102 -155\n85 -110 -17 119 -155\n", "2\n0 1 2 1 4\n5 6 7 8 9\n", "1\n0 0 1 0 0\n", "11\n1 0 0 0 0\n-1 0 0 -1 0\n0 1 0 0 0\n0 -1 0 0 0\n0 0 1 0 0\n0 0 -1 0 0\n0 0 0 1 0\n0 0 0 -1 0\n0 0 0 0 1\n0 0 0 0 -1\n0 0 0 0 0\n", "8\n-559 581 509 257 343\n-544 451 569 277 343\n-451 451 434 401 343\n-559 451 509 257 83\n-664 451 89 117 343\n-559 451 509 257 993\n-715 724 509 374 343\n-811 451 684 -79 343\n", "6\n-305 -390 638 -522 343\n479 755 -343 144 89\n-268 843 -461 989 -301\n-986 -274 347 -847 -728\n278 718 -372 -674 270\n-477 562 -489 -858 611\n", "11\n358 -724 -232 53 -520\n486 -554 -328 53 -220\n358 -554 -232 -372 -520\n358 -554 -232 308 -520\n868 -554 448 53 -520\n478 -554 -322 53 -600\n358 296 -124 53 -520\n256 -554 -368 53 -520\n230 -554 -136 53 -820\n-182 -554 173 53 -160\n358 -554 -232 53 -520\n", "11\n8 8 8 8 8\n2 2 2 2 2\n0 0 0 0 0\n6 6 6 6 6\n7 7 7 7 7\n10 10 10 10 10\n9 9 9 9 9\n3 3 3 3 3\n1 1 1 1 1\n5 5 10 5 5\n4 4 4 4 4\n", "4\n0 0 0 -1 0\n1 0 0 0 0\n0 1 0 0 0\n0 1 1 0 0\n", "7\n49 457 -650 325 -325\n0 0 325 325 0\n253 204 -325 0 -325\n204 -253 325 325 325\n408 -506 -325 -325 325\n49 457 -650 325 -650\n1 0 0 650 -325\n", "10\n-705 38 170 -768 689\n-705 86 248 -768 709\n-705 86 170 -742 709\n-705 86 144 -768 709\n-705 86 170 -820 709\n-705 106 170 -768 661\n-822 86 170 -768 709\n-705 98 170 -768 714\n-705 86 170 -768 709\n-601 86 170 -1254 709\n", "3\n0 0 1 2 0\n0 0 9 2 0\n-1 0 5 9 0\n", "6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 1\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n", "10\n0 -110 68 -51 -155\n-74 -110 68 -51 -155\n85 -70 72 68 -230\n0 -40 51 68 75\n0 5 -51 -68 -190\n85 0 0 0 0\n85 -115 -68 51 35\n85 -75 -187 34 -40\n-85 -110 -136 102 -155\n85 -110 -17 119 -155\n", "11\n1 0 1 0 0\n-1 0 0 -1 0\n0 1 0 0 0\n0 -1 0 0 0\n0 0 1 0 0\n0 0 -1 0 0\n0 0 0 1 0\n0 0 0 -1 0\n0 0 0 0 1\n0 0 0 0 -1\n0 0 0 0 0\n", "8\n-559 581 509 257 343\n-544 451 569 277 343\n-451 451 434 401 343\n-559 451 509 257 83\n-664 451 89 117 44\n-559 451 509 257 993\n-715 724 509 374 343\n-811 451 684 -79 343\n", "6\n-305 -390 638 -522 343\n479 755 -343 144 89\n-268 843 -461 989 -301\n-986 -274 671 -847 -728\n278 718 -372 -674 270\n-477 562 -489 -858 611\n", "11\n358 -724 -232 53 -520\n486 -554 -328 53 -220\n358 -554 -232 -372 -520\n358 -554 -232 308 -520\n868 -554 448 53 -520\n478 -554 -322 53 -600\n358 296 -124 53 -520\n256 -554 -368 53 -520\n230 -554 -136 53 -882\n-182 -554 173 53 -160\n358 -554 -232 53 -520\n", "11\n8 8 9 8 8\n2 2 2 2 2\n0 0 0 0 0\n6 6 6 6 6\n7 7 7 7 7\n10 10 10 10 10\n9 9 9 9 9\n3 3 3 3 3\n1 1 1 1 1\n5 5 10 5 5\n4 4 4 4 4\n", "2\n0 1 2 2 4\n5 6 7 8 9\n", "1\n-1 0 1 0 0\n", "4\n0 0 0 -1 0\n1 0 0 0 0\n0 1 0 0 0\n0 1 1 0 -1\n", "7\n49 457 -650 325 -325\n0 0 325 325 0\n141 204 -325 0 -325\n204 -253 325 325 325\n408 -506 -325 -325 325\n49 457 -650 325 -650\n1 0 0 650 -325\n", "10\n-705 38 170 -768 689\n-705 86 248 -768 709\n-705 86 170 -742 709\n-705 86 144 -768 709\n-705 86 170 -820 709\n-705 106 170 -768 661\n-822 86 170 -768 709\n-705 98 170 -768 714\n-705 86 170 -768 709\n-601 51 170 -1254 709\n", "3\n-1 0 1 2 0\n0 0 9 2 0\n-1 0 5 9 0\n", "6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 1\n0 0 1 1 0\n0 0 0 1 0\n0 0 0 0 1\n", "10\n0 -110 68 -51 -155\n-74 -110 68 -51 -155\n85 -70 72 68 -230\n0 -40 51 68 65\n0 5 -51 -68 -190\n85 0 0 0 0\n85 -115 -68 51 35\n85 -75 -187 34 -40\n-85 -110 -136 102 -155\n85 -110 -17 119 -155\n", "11\n1 0 1 0 0\n-1 0 0 -1 0\n0 1 0 1 0\n0 -1 0 0 0\n0 0 1 0 0\n0 0 -1 0 0\n0 0 0 1 0\n0 0 0 -1 0\n0 0 0 0 1\n0 0 0 0 -1\n0 0 0 0 0\n", "8\n-559 581 509 257 343\n-544 764 569 277 343\n-451 451 434 401 343\n-559 451 509 257 83\n-664 451 89 117 44\n-559 451 509 257 993\n-715 724 509 374 343\n-811 451 684 -79 343\n", "6\n-305 -390 638 -522 343\n479 755 -343 144 89\n-268 843 -216 989 -301\n-986 -274 671 -847 -728\n278 718 -372 -674 270\n-477 562 -489 -858 611\n", "11\n358 -724 -232 53 -520\n486 -554 -328 53 -220\n358 -554 -232 -372 -520\n358 -554 -232 308 -520\n868 -554 448 53 -520\n478 -554 -322 53 -600\n358 296 -124 53 -520\n256 -554 -368 53 -520\n230 -554 -136 96 -882\n-182 -554 173 53 -160\n358 -554 -232 53 -520\n", "11\n8 8 9 8 8\n2 2 2 2 3\n0 0 0 0 0\n6 6 6 6 6\n7 7 7 7 7\n10 10 10 10 10\n9 9 9 9 9\n3 3 3 3 3\n1 1 1 1 1\n5 5 10 5 5\n4 4 4 4 4\n", "2\n0 1 2 0 4\n5 6 7 8 9\n", "1\n-1 -1 1 0 0\n", "7\n49 457 -650 325 -325\n0 0 325 325 0\n141 204 -325 0 -325\n204 -253 325 325 325\n408 -506 -325 -325 325\n49 457 -650 325 -650\n1 0 0 750 -325\n", "10\n-705 38 170 -768 689\n-705 86 248 -768 709\n-705 86 170 -742 709\n-705 86 144 -768 709\n-705 86 170 -820 709\n-555 106 170 -768 661\n-822 86 170 -768 709\n-705 98 170 -768 714\n-705 86 170 -768 709\n-601 51 170 -1254 709\n", "3\n-1 0 1 2 0\n0 0 9 4 0\n-1 0 5 9 0\n", "6\n0 -1 0 0 0\n1 0 0 0 0\n0 1 0 0 1\n0 0 1 1 0\n0 0 0 1 0\n0 0 0 0 1\n", "10\n0 -110 68 -51 -155\n-74 -110 68 -51 -155\n85 -70 72 68 -230\n0 -40 51 68 65\n0 5 -51 -68 -190\n85 0 0 0 0\n85 -115 -68 51 35\n85 -75 -187 34 -40\n-54 -110 -136 102 -155\n85 -110 -17 119 -155\n", "8\n-559 581 509 257 343\n-544 764 569 277 343\n-451 451 434 401 343\n-559 451 509 300 83\n-664 451 89 117 44\n-559 451 509 257 993\n-715 724 509 374 343\n-811 451 684 -79 343\n", "6\n-305 -390 638 -522 446\n479 755 -343 144 89\n-268 843 -216 989 -301\n-986 -274 671 -847 -728\n278 718 -372 -674 270\n-477 562 -489 -858 611\n", "11\n358 -724 -232 53 -520\n486 -554 -328 53 -220\n358 -554 -232 -372 -520\n358 -554 -232 308 -520\n868 -554 448 88 -520\n478 -554 -322 53 -600\n358 296 -124 53 -520\n256 -554 -368 53 -520\n230 -554 -136 96 -882\n-182 -554 173 53 -160\n358 -554 -232 53 -520\n", "11\n8 8 9 8 8\n2 2 2 2 3\n0 0 0 0 0\n6 6 6 1 6\n7 7 7 7 7\n10 10 10 10 10\n9 9 9 9 9\n3 3 3 3 3\n1 1 1 1 1\n5 5 10 5 5\n4 4 4 4 4\n", "2\n0 1 2 0 4\n4 6 7 8 9\n", "1\n-1 -1 1 0 -1\n", "7\n49 457 -650 325 -325\n0 0 325 325 0\n19 204 -325 0 -325\n204 -253 325 325 325\n408 -506 -325 -325 325\n49 457 -650 325 -650\n1 0 0 750 -325\n", "10\n-705 38 170 -768 689\n-705 86 248 -768 709\n-705 86 170 -742 709\n-705 86 144 -768 709\n-705 86 170 -820 709\n-555 106 170 -768 661\n-822 86 170 -768 709\n-705 98 170 -768 714\n-705 86 170 -768 709\n-601 51 321 -1254 709\n", "3\n-1 0 1 2 0\n0 0 9 4 0\n-1 0 5 9 1\n", "6\n0 -1 0 0 0\n1 0 0 0 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n0 0 0 0 1\n", "10\n0 -110 68 -51 -155\n-74 -110 68 -51 -155\n85 -70 72 68 -230\n0 -40 51 68 65\n0 8 -51 -68 -190\n85 0 0 0 0\n85 -115 -68 51 35\n85 -75 -187 34 -40\n-54 -110 -136 102 -155\n85 -110 -17 119 -155\n", "8\n-559 581 509 257 343\n-544 764 569 277 343\n-451 451 434 401 343\n-559 451 509 300 83\n-664 451 89 108 44\n-559 451 509 257 993\n-715 724 509 374 343\n-811 451 684 -79 343\n", "6\n-305 -390 638 -522 446\n19 755 -343 144 89\n-268 843 -216 989 -301\n-986 -274 671 -847 -728\n278 718 -372 -674 270\n-477 562 -489 -858 611\n", "11\n358 -724 -232 53 -520\n486 -554 -328 53 -220\n358 -554 -232 -372 -520\n358 -554 -232 308 -520\n868 -554 448 88 -520\n478 -554 -322 53 -600\n358 296 -124 53 -520\n256 -554 -208 53 -520\n230 -554 -136 96 -882\n-182 -554 173 53 -160\n358 -554 -232 53 -520\n", "11\n8 8 9 8 8\n2 2 2 2 3\n0 0 0 0 0\n6 6 6 1 6\n7 7 7 7 7\n10 10 10 10 10\n9 9 9 9 9\n3 6 3 3 3\n1 1 1 1 1\n5 5 10 5 5\n4 4 4 4 4\n", "2\n0 1 2 0 4\n4 6 7 11 9\n", "1\n-1 -2 1 0 -1\n", "7\n49 457 -650 325 -325\n0 0 325 325 0\n19 204 -325 0 -325\n204 -253 325 325 325\n408 -506 -325 -325 325\n49 457 -650 325 -650\n1 0 0 750 -632\n", "10\n-705 38 170 -768 689\n-705 86 248 -768 709\n-705 86 170 -742 709\n-705 86 144 -768 709\n-66 86 170 -820 709\n-555 106 170 -768 661\n-822 86 170 -768 709\n-705 98 170 -768 714\n-705 86 170 -768 709\n-601 51 321 -1254 709\n", "3\n0 0 1 2 0\n0 0 9 4 0\n-1 0 5 9 1\n", "6\n1 -1 0 0 0\n1 0 0 0 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n0 0 0 0 1\n", "10\n0 -110 68 -51 -155\n-74 -110 68 -51 -155\n85 -70 72 68 -230\n0 -40 51 68 65\n0 8 -51 -68 -190\n85 0 0 0 0\n85 -115 -68 51 35\n85 -75 -187 34 -40\n-54 -12 -136 102 -155\n85 -110 -17 119 -155\n", "8\n-559 581 509 257 343\n-544 764 569 277 343\n-451 451 434 401 343\n-559 451 509 300 83\n-664 451 89 108 44\n-559 570 509 257 993\n-715 724 509 374 343\n-811 451 684 -79 343\n", "6\n-305 -390 638 -522 446\n19 755 -343 144 89\n-268 843 -216 353 -301\n-986 -274 671 -847 -728\n278 718 -372 -674 270\n-477 562 -489 -858 611\n", "11\n358 -724 -232 53 -520\n486 -554 -328 53 -220\n358 -554 -232 -372 -520\n358 -554 -232 308 -520\n868 -554 448 88 -520\n478 -554 -322 53 -600\n517 296 -124 53 -520\n256 -554 -208 53 -520\n230 -554 -136 96 -882\n-182 -554 173 53 -160\n358 -554 -232 53 -520\n", "11\n8 8 9 8 8\n2 2 2 2 3\n0 0 0 0 0\n6 6 6 1 6\n7 7 7 5 7\n10 10 10 10 10\n9 9 9 9 9\n3 6 3 3 3\n1 1 1 1 1\n5 5 10 5 5\n4 4 4 4 4\n", "2\n0 0 2 0 4\n4 6 7 11 9\n", "1\n-1 0 1 0 -1\n", "7\n49 457 -650 325 -325\n0 0 163 325 0\n19 204 -325 0 -325\n204 -253 325 325 325\n408 -506 -325 -325 325\n49 457 -650 325 -650\n1 0 0 750 -632\n", "10\n-705 38 170 -768 689\n-705 86 248 -768 622\n-705 86 170 -742 709\n-705 86 144 -768 709\n-66 86 170 -820 709\n-555 106 170 -768 661\n-822 86 170 -768 709\n-705 98 170 -768 714\n-705 86 170 -768 709\n-601 51 321 -1254 709\n", "3\n0 0 1 2 0\n0 0 9 4 0\n-1 0 5 9 0\n", "6\n1 -1 0 0 -1\n1 0 0 0 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n0 0 0 0 1\n", "10\n0 -110 68 -51 -155\n-74 -110 68 -51 -155\n85 -70 72 68 -26\n0 -40 51 68 65\n0 8 -51 -68 -190\n85 0 0 0 0\n85 -115 -68 51 35\n85 -75 -187 34 -40\n-54 -12 -136 102 -155\n85 -110 -17 119 -155\n", "8\n-559 581 509 257 343\n-544 764 569 277 343\n-451 451 434 401 343\n-559 451 509 300 83\n-664 451 89 108 44\n-323 570 509 257 993\n-715 724 509 374 343\n-811 451 684 -79 343\n", "6\n-305 -390 638 -522 446\n19 755 -343 144 89\n-268 843 -216 353 -301\n-986 -274 671 -847 -728\n278 718 -372 -674 270\n-477 562 -489 -858 1091\n", "11\n358 -724 -232 53 -520\n486 -554 -328 53 -220\n358 -554 -232 -372 -520\n358 -554 -232 308 -520\n868 -554 448 88 -520\n478 -554 -322 53 -600\n517 296 -124 53 -520\n256 -554 -208 53 -520\n230 -554 -136 96 -882\n-182 -554 173 4 -160\n358 -554 -232 53 -520\n", "11\n8 8 9 8 8\n2 4 2 2 3\n0 0 0 0 0\n6 6 6 1 6\n7 7 7 5 7\n10 10 10 10 10\n9 9 9 9 9\n3 6 3 3 3\n1 1 1 1 1\n5 5 10 5 5\n4 4 4 4 4\n", "2\n0 0 4 0 4\n4 6 7 11 9\n", "1\n-1 0 0 0 -1\n", "7\n49 457 -650 325 -325\n0 0 163 325 0\n19 204 -325 0 -325\n204 -253 325 325 325\n408 -506 -339 -325 325\n49 457 -650 325 -650\n1 0 0 750 -632\n", "10\n-705 38 170 -768 689\n-705 86 454 -768 622\n-705 86 170 -742 709\n-705 86 144 -768 709\n-66 86 170 -820 709\n-555 106 170 -768 661\n-822 86 170 -768 709\n-705 98 170 -768 714\n-705 86 170 -768 709\n-601 51 321 -1254 709\n", "3\n0 0 1 2 0\n0 0 9 4 0\n-1 1 5 9 0\n", "6\n1 -1 0 0 -1\n1 0 0 0 0\n1 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n0 0 0 0 1\n", "10\n0 -110 68 -51 -155\n-74 -110 68 -51 -155\n85 -70 72 68 -26\n0 -40 51 68 65\n0 8 -51 -68 -190\n85 0 0 0 0\n85 -91 -68 51 35\n85 -75 -187 34 -40\n-54 -12 -136 102 -155\n85 -110 -17 119 -155\n", "8\n-559 581 509 257 343\n-544 764 569 277 343\n-451 451 434 401 343\n-559 451 101 300 83\n-664 451 89 108 44\n-323 570 509 257 993\n-715 724 509 374 343\n-811 451 684 -79 343\n"], "output": ["0\n", "2\n1\n2\n", "1\n1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "2\n1\n2\n", "1\n1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "2\n1\n2\n", "1\n1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "2\n1\n2\n", "1\n1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "2\n1\n2\n", "1\n1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "2\n1\n2\n", "1\n1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "2\n1\n2\n", "1\n1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:  \nGiven a set of n points in a fixed-dimensional space, determine which points cannot be expressed as a strict convex combination of any other two points (i.e., are \u201cextreme\u201d with respect to pairwise dot\u2010product tests).\n\n2. Core algorithmic approach:  \nBrute\u2010force triple enumeration with early exit\u2014 for each candidate point j, check all unordered pairs (k, l) of the other points and compute a dot\u2010product to detect whether j lies \u201cinside\u201d the angle formed by k and l, breaking out as soon as any enclosing pair is found.\n\n3. Reusable components:  \n- A dot\u2010product helper function between vectors v_k\u2013v_j and v_l\u2013v_j to test geometric relationships (acute vs. obtuse angles).  \n- A nested\u2010loop pattern with early breaks (flags) to prune O(n\u00b3) searches once a witness is found.  \n- A filtering pattern that collects indices of \u201cvalid\u201d elements after testing each element against all pairs."}
{"name": "498_A. Crazy Town", "description": "Crazy Town is a plane on which there are n infinite line roads. Each road is defined by the equation aix + biy + ci = 0, where ai and bi are not both equal to the zero. The roads divide the plane into connected regions, possibly of infinite space. Let's call each such region a block. We define an intersection as the point where at least two different roads intersect.\n\nYour home is located in one of the blocks. Today you need to get to the University, also located in some block. In one step you can move from one block to another, if the length of their common border is nonzero (in particular, this means that if the blocks are adjacent to one intersection, but have no shared nonzero boundary segment, then it are not allowed to move from one to another one in one step).\n\nDetermine what is the minimum number of steps you have to perform to get to the block containing the university. It is guaranteed that neither your home nor the university is located on the road.\n\nInput\n\nThe first line contains two space-separated integers x1, y1 ( - 106 \u2264 x1, y1 \u2264 106) \u2014 the coordinates of your home.\n\nThe second line contains two integers separated by a space x2, y2 ( - 106 \u2264 x2, y2 \u2264 106) \u2014 the coordinates of the university you are studying at.\n\nThe third line contains an integer n (1 \u2264 n \u2264 300) \u2014 the number of roads in the city. The following n lines contain 3 space-separated integers ( - 106 \u2264 ai, bi, ci \u2264 106; |ai| + |bi| > 0) \u2014 the coefficients of the line aix + biy + ci = 0, defining the i-th road. It is guaranteed that no two roads are the same. In addition, neither your home nor the university lie on the road (i.e. they do not belong to any one of the lines).\n\nOutput\n\nOutput the answer to the problem.\n\nExamples\n\nInput\n\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n\n\nOutput\n\n2\n\n\nInput\n\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n\n\nOutput\n\n2\n\nNote\n\nPictures to the samples are presented below (A is the point representing the house; B is the point representing the university, different blocks are filled with different colors):\n\n<image> <image>", "solution": "x1,y1 = [int(i) for i in input().split()]\nx2,y2 = [int(i) for i in input().split()]\nn = int(input())\nm = 0\nfor i in range(n):\n    x,y,c = [int(g) for g in input().split()]\n    if(x1*x+y1*y+c>0):\n        l = 1\n    else:\n        l = -1\n    if(l==-1)and(x2*x+y2*y+c>0):\n        m+=1\n    elif(l==1)and(x2*x+y2*y+c<0):\n        m+=1\nprint(m)\n", "difficulty": 7, "public_tests": {"input": ["1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n", "1 1\n-1 -1\n2\n0 1 0\n1 0 0\n"], "output": ["2\n", "2\n"]}, "private_tests": {"input": ["0 1\n2 2\n1\n1 1 2\n", "1 1\n-1 -1\n1\n1 1 0\n", "1 1\n3 3\n1\n1 0 2\n", "-632 -387435\n942 798117\n10\n249 0 135705\n536 0 271752\n750 0 375750\n799 0 -206142\n1102 0 -437494\n-453 0 197055\n-581 0 260288\n-322 0 161322\n1317 0 -878439\n-811 0 594463\n", "527189 -306471\n-998939 648838\n1\n-950717 -549267 -820616\n", "10 18\n10 0\n2\n1 -1 0\n0 1 -5\n", "3 4\n2 6\n1\n0 -2 5\n", "5 0\n15 0\n1\n10 0 -100\n", "10 10\n8 8\n1\n1 1 19\n", "841746 527518\n595261 331297\n10\n936 -209 -790797\n898 1240 -36994\n759 285 -413562\n174 323 34281\n662 400 -284846\n298 520 42086\n-36 -27 12861\n462 631 -22515\n-499 1105 919372\n582 1490 319884\n", "1 0\n2 0\n1\n1 0 0\n", "-589794 344286\n532652 -230711\n5\n-2919 -179425 -546698\n-465880 342737 794428\n-230739 -687865 713836\n-932054 513357 -97639\n-559361 -75096 -581568\n", "1 3\n1 1\n1\n1 1 3\n", "1 -4\n1 5\n1\n0 1 0\n", "0 0\n0 2\n4\n1 0 1\n1 0 -1\n-2 0 1\n0 1 -1\n", "454379 373644\n-665078 -385892\n2\n-984641 503905 -909460\n-767954 -468772 -942522\n", "0 0\n0 1\n1\n0 2 2\n", "-940 -984641\n403 -942522\n2\n530 0 -63600\n-439 0 95263\n", "100000 100000\n-100000 100000\n1\n10000 0 7\n", "0 1\n1000000 1\n1\n1000000 1 0\n", "-537 648838\n227 -51454\n1\n678 0 235266\n", "841746 527518\n595261 331297\n10\n-946901 129987 670374\n-140388 -684770 309555\n-302589 415564 -387435\n-565799 -72069 -395358\n-523453 -511446 854898\n-846967 -749453 -341866\n-622388 434663 264157\n-638453 625357 344195\n-255265 -676356 -772398\n-824723 -319141 33585\n", "-867 -465880\n793 -581568\n5\n73 0 57743\n-818 0 -635586\n-804 0 -415668\n-383 0 -52854\n1258 0 155992\n", "1 0\n1 2\n1\n0 1 -1\n", "0 0\n0 2\n1\n0 1 -1\n", "454379 373644\n-665078 -385892\n2\n-530 -468 -379786\n-173 -275 -100376\n", "0 2\n-2 0\n2\n2 3 -1\n4 0 3\n", "0 0\n0 1\n1\n1 0 10000\n"], "output": ["0\n", "1\n", "0\n", "10\n", "1\n", "2\n", "0\n", "1\n", "0\n", "0\n", "0\n", "5\n", "0\n", "1\n", "1\n", "2\n", "0\n", "2\n", "1\n", "0\n", "1\n", "0\n", "5\n", "1\n", "1\n", "2\n", "2\n", "0\n"]}, "generated_tests": {"input": ["0 1\n0 2\n1\n1 1 2\n", "1 1\n-2 -1\n1\n1 1 0\n", "-632 -387435\n942 798117\n10\n249 0 135705\n536 -1 271752\n750 0 375750\n799 0 -206142\n1102 0 -437494\n-453 0 197055\n-581 0 260288\n-322 0 161322\n1317 0 -878439\n-811 0 594463\n", "10 18\n10 0\n2\n1 -1 -1\n0 1 -5\n", "-589794 344286\n532652 -230711\n5\n-2919 -179425 -546698\n-465880 342737 794428\n-230739 -687865 713836\n-650997 513357 -97639\n-559361 -75096 -581568\n", "-632 -387435\n942 798117\n10\n249 0 135705\n536 -1 271752\n750 0 375750\n799 0 -206142\n1102 0 -437494\n-453 0 197055\n-581 0 260288\n-322 0 161322\n1317 0 -878439\n-811 0 985227\n", "-589794 344286\n532652 -230711\n5\n-2919 -179425 -546698\n-465880 342737 794428\n-230739 -494139 713836\n-650997 513357 -97639\n-559361 -75096 -581568\n", "1 2\n3 3\n1\n1 0 2\n", "527189 -306471\n-998939 648838\n1\n-950717 -549267 -864861\n", "3 4\n3 6\n1\n0 -2 5\n", "5 0\n1 0\n1\n10 0 -100\n", "841746 527518\n595261 331297\n10\n936 -74 -790797\n898 1240 -36994\n759 285 -413562\n174 323 34281\n662 400 -284846\n298 520 42086\n-36 -27 12861\n462 631 -22515\n-499 1105 919372\n582 1490 319884\n", "1 0\n2 0\n1\n1 0 1\n", "1 3\n2 1\n1\n1 1 3\n", "1 -4\n2 5\n1\n0 1 0\n", "0 0\n0 2\n4\n1 0 1\n1 0 -2\n-2 0 1\n0 1 -1\n", "454379 373644\n-665078 -385892\n2\n-984641 503905 -1114973\n-767954 -468772 -942522\n", "-940 -984641\n467 -942522\n2\n530 0 -63600\n-439 0 95263\n", "100000 100010\n-100000 100000\n1\n10000 0 7\n", "-537 648838\n227 -60546\n1\n678 0 235266\n", "841746 527518\n595261 331297\n10\n-946901 129987 670374\n-140388 -684770 309555\n-302589 415564 -387435\n-565799 -72069 -395358\n-523453 -511446 854898\n-347092 -749453 -341866\n-622388 434663 264157\n-638453 625357 344195\n-255265 -676356 -772398\n-824723 -319141 33585\n", "-867 -465880\n793 -581568\n5\n73 0 57743\n-818 0 -635586\n-804 0 -415668\n-458 0 -52854\n1258 0 155992\n", "1 0\n1 2\n1\n0 2 -1\n", "454379 373644\n-665078 -385892\n2\n-530 -468 -379786\n-173 -375 -100376\n", "0 2\n-2 0\n2\n2 3 -1\n4 1 3\n", "1 1\n-2 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n", "0 1\n1 2\n1\n1 1 2\n", "1 1\n-2 -1\n1\n0 1 0\n", "1 4\n3 3\n1\n1 0 2\n", "527189 -306471\n-998939 648838\n1\n-950717 -189793 -864861\n", "10 18\n10 1\n2\n1 -1 -1\n0 1 -5\n", "5 1\n1 0\n1\n10 0 -100\n", "841746 527518\n595261 331297\n10\n936 -74 -790797\n898 1240 -7731\n759 285 -413562\n174 323 34281\n662 400 -284846\n298 520 42086\n-36 -27 12861\n462 631 -22515\n-499 1105 919372\n582 1490 319884\n", "1 3\n2 2\n1\n1 1 3\n", "1 -4\n2 5\n1\n1 1 0\n", "454379 373644\n-665078 -385892\n2\n-984641 503905 -1114973\n-767954 -468772 -1503095\n", "100000 100010\n-100000 100000\n1\n10000 1 7\n", "-537 1067646\n227 -60546\n1\n678 0 235266\n", "841746 527518\n595261 331297\n10\n-946901 129987 670374\n-140388 -684770 309555\n-302589 415564 -387435\n-565799 -72069 -395358\n-523453 -511446 854898\n-347092 -749453 -341866\n-622388 434663 264157\n-638453 625357 344195\n-255265 -821071 -772398\n-824723 -319141 33585\n", "2 0\n1 2\n1\n0 2 -1\n", "0 4\n-2 0\n2\n2 3 -1\n4 1 3\n", "1 1\n-2 -1\n3\n1 0 0\n1 1 0\n1 1 -3\n", "0 0\n1 2\n1\n1 1 2\n", "-632 -471945\n942 798117\n10\n249 0 135705\n536 -1 271752\n750 0 375750\n799 0 -206142\n1102 0 -437494\n-453 0 197055\n-581 0 260288\n-322 0 161322\n1317 0 -878439\n-811 0 985227\n", "813697 -306471\n-998939 648838\n1\n-950717 -189793 -864861\n", "10 24\n10 1\n2\n1 -1 -1\n0 1 -5\n", "6 1\n1 0\n1\n10 0 -100\n", "841746 527518\n595261 331297\n10\n936 -74 -790797\n898 1240 -7731\n759 285 -413562\n174 323 34281\n662 400 -284846\n298 520 42086\n-36 -27 12861\n462 924 -22515\n-499 1105 919372\n582 1490 319884\n", "-589794 344286\n532652 -230711\n5\n-2919 -323897 -546698\n-465880 342737 794428\n-230739 -494139 713836\n-650997 513357 -97639\n-559361 -75096 -581568\n", "1 3\n2 2\n1\n1 1 0\n", "1 -4\n2 5\n1\n1 1 1\n", "454379 490458\n-665078 -385892\n2\n-984641 503905 -1114973\n-767954 -468772 -1503095\n", "-537 1067646\n227 -60546\n1\n186 0 235266\n", "841746 527518\n595261 331297\n10\n-946901 129987 670374\n-140388 -684770 309555\n-302589 415564 -387435\n-565799 -72069 -395358\n-523453 -511446 854898\n-347092 -643691 -341866\n-622388 434663 264157\n-638453 625357 344195\n-255265 -821071 -772398\n-824723 -319141 33585\n", "2 0\n1 1\n1\n0 2 -1\n", "0 4\n-2 0\n2\n2 3 0\n4 1 3\n", "1 1\n-2 -1\n3\n1 0 0\n1 1 0\n1 0 -3\n", "0 0\n1 2\n1\n1 1 1\n", "-632 -471945\n942 798117\n10\n249 0 135705\n536 -1 271752\n750 0 375750\n799 0 -206142\n1102 0 -437494\n-453 0 197055\n-581 -1 260288\n-322 0 161322\n1317 0 -878439\n-811 0 985227\n", "813697 -306471\n-998939 303827\n1\n-950717 -189793 -864861\n", "6 1\n1 0\n1\n10 0 -67\n", "841746 527518\n595261 331297\n10\n936 -74 -790797\n898 1240 -7731\n759 285 -413562\n174 323 34281\n662 400 -57372\n298 520 42086\n-36 -27 12861\n462 924 -22515\n-499 1105 919372\n582 1490 319884\n", "-589794 344286\n532652 -230711\n5\n-2919 -24435 -546698\n-465880 342737 794428\n-230739 -494139 713836\n-650997 513357 -97639\n-559361 -75096 -581568\n", "1 3\n2 2\n1\n1 2 0\n", "1 -4\n3 5\n1\n1 1 1\n", "454379 490458\n-665078 -385892\n2\n-984641 503905 -1114973\n-875876 -468772 -1503095\n", "-537 1067646\n227 -60546\n1\n186 0 455659\n", "841746 527518\n595261 331297\n10\n-946901 129987 670374\n-140388 -684770 309555\n-302589 415564 -387435\n-565799 -72069 -395358\n-523453 -793561 854898\n-347092 -643691 -341866\n-622388 434663 264157\n-638453 625357 344195\n-255265 -821071 -772398\n-824723 -319141 33585\n", "2 0\n1 1\n1\n0 4 -1\n", "-1 4\n-2 0\n2\n2 3 0\n4 1 3\n", "1 1\n-4 -1\n3\n1 0 0\n1 1 0\n1 0 -3\n", "0 0\n1 2\n1\n1 0 1\n", "-632 -471945\n942 798117\n10\n249 0 135705\n536 -1 271752\n750 0 375750\n799 0 -206142\n1102 0 -437494\n-453 0 197055\n-581 -1 260288\n-322 0 161322\n1317 1 -878439\n-811 0 985227\n", "861503 -306471\n-998939 303827\n1\n-950717 -189793 -864861\n", "6 0\n1 0\n1\n10 0 -67\n"], "output": ["0\n", "1\n", "10\n", "2\n", "5\n", "9\n", "4\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "1\n", "2\n", "2\n", "1\n", "1\n", "0\n", "5\n", "1\n", "2\n", "2\n", "2\n", "0\n", "1\n", "0\n", "1\n", "2\n", "0\n", "0\n", "0\n", "1\n", "2\n", "1\n", "1\n", "0\n", "1\n", "2\n", "2\n", "0\n", "9\n", "1\n", "2\n", "0\n", "0\n", "4\n", "0\n", "1\n", "2\n", "0\n", "0\n", "1\n", "2\n", "2\n", "0\n", "9\n", "1\n", "0\n", "0\n", "4\n", "0\n", "1\n", "2\n", "0\n", "0\n", "1\n", "2\n", "2\n", "0\n", "9\n", "1\n", "0\n"]}, "short_description": "1. One-sentence summary:\nCount how many of a given set of linear constraints (lines) place two fixed points strictly on opposite sides.\n\n2. Core algorithmic approach:\nA single-pass linear scan (O(n)), where each line is classified by evaluating a dot-product-plus-constant expression for both points and comparing the signs to check separation.\n\n3. Reusable components:\n- A \u201cside-of-line\u201d sign function:  \n  def side(x, y, a, b, c):  \n      return (a*x + b*y + c) > 0  \n- A generic routine to count how many predicates differ between two items.  \n- Simple input-parsing and loop-over-items pattern for batched evaluation."}
{"name": "2_C. Commentator problem", "description": "The Olympic Games in Bercouver are in full swing now. Here everyone has their own objectives: sportsmen compete for medals, and sport commentators compete for more convenient positions to give a running commentary. Today the main sport events take place at three round stadiums, and the commentator's objective is to choose the best point of observation, that is to say the point from where all the three stadiums can be observed. As all the sport competitions are of the same importance, the stadiums should be observed at the same angle. If the number of points meeting the conditions is more than one, the point with the maximum angle of observation is prefered. \n\nWould you, please, help the famous Berland commentator G. Berniev to find the best point of observation. It should be noted, that the stadiums do not hide each other, the commentator can easily see one stadium through the other.\n\nInput\n\nThe input data consists of three lines, each of them describes the position of one stadium. The lines have the format x, y, r, where (x, y) are the coordinates of the stadium's center ( - 103 \u2264 x, y \u2264 103), and r (1 \u2264 r \u2264 103) is its radius. All the numbers in the input data are integer, stadiums do not have common points, and their centers are not on the same line. \n\nOutput\n\nPrint the coordinates of the required point with five digits after the decimal point. If there is no answer meeting the conditions, the program shouldn't print anything. The output data should be left blank.\n\nExamples\n\nInput\n\n0 0 10\n60 0 10\n30 30 10\n\n\nOutput\n\n30.00000 0.00000", "solution": "import math\n\nx1, y1, r1 = [int(_) for _ in input().split()]\nx2, y2, r2 = [int(_) for _ in input().split()]\nx3, y3, r3 = [int(_) for _ in input().split()]\n\n\ndef get_line(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    if x1 * y2 == x2 * y1:\n        c = 0\n        a = 1\n        if y1 != 0:\n            b = -x1 / y1\n        elif y2 != 0:\n            b = -x2 / y2\n        else:\n            a = 0\n            b = 1\n        return a, b, c\n    else:\n        c = 1\n        a = (y1 - y2) / (x1 * y2 - x2 * y1)\n        b = (x1 - x2) / (x2 * y1 - x1 * y2)\n        return a, b, c\n\n\ndef comm(x1, y1, r1, x2, y2, r2):\n    if r1 == r2:\n        a, b, c = get_line((x1, y1), (x2, y2))\n        return True, b, -a, a * (y1 + y2) / 2 - b * (x1 + x2) / 2\n    else:\n        c = r1 ** 2 / r2 ** 2\n        x = (c * x2 - x1) / (c - 1)\n        y = (c * y2 - y1) / (c - 1)\n        r = math.sqrt((c * (x1 - x2) ** 2 + c * (y1 - y2) ** 2) / (c - 1) ** 2)\n        return False, x, y, r\n\n\ndef get_angle(x, y, r, x0, y0):\n    # print(x, y, r, x0, y0)\n    dist = math.sqrt((x0 - x) ** 2 + (y0 - y) ** 2)\n    # print(\"DIST: \", dist)\n    # print(\"DIST: \", r / dist)\n    return math.asin(r / dist)\n\n\ndef get_points(a, b, c, x, y, r):\n    dist = abs(a * x + b * y + c) / math.sqrt(a ** 2 + b ** 2)\n    if dist <= r:\n        aa = (a ** 2 + b ** 2)\n        bb = 2 * a * b * y + 2 * a * c - 2 * b ** 2 * x\n        cc = b ** 2 * x ** 2 + (b * y + c) ** 2 - b ** 2 * r ** 2\n        delta = math.sqrt(bb ** 2 - 4 * aa * cc)\n        if delta == 0:\n            xx = -bb / 2 / aa\n            if b == 0:\n                yy = math.sqrt(r ** 2 - (xx - x) ** 2) + y\n            else:\n                yy = (-c - a * xx) / b\n            return 1, [(xx, yy)]\n        else:\n            xx1 = (-bb + delta) / 2 / aa\n            if b == 0:\n                tmp1 = math.sqrt(r ** 2 - (xx1 - x) ** 2) + y\n                tmp2 = -math.sqrt(r ** 2 - (xx1 - x) ** 2) + y\n                yy1 = 0\n                if abs(a * xx1 + b * tmp1 + c) <= 0.001:\n                    yy1 = tmp1\n                if abs(a * xx1 + b * tmp2 + c) <= 0.001:\n                    yy1 = tmp2\n            else:\n                yy1 = (-c - a * xx1) / b\n            xx2 = (-bb - delta) / 2 / aa\n            if b == 0:\n                tmp1 = math.sqrt(r ** 2 - (xx2 - x) ** 2) + y\n                tmp2 = -math.sqrt(r ** 2 - (xx2 - x) ** 2) + y\n                yy2 = 0\n                if abs(a * xx2 + b * tmp1 + c) <= 0.001:\n                    yy2 = tmp1\n                if abs(a * xx2 + b * tmp2 + c) <= 0.001:\n                    yy2 = tmp2\n            else:\n                yy2 = (-c - a * xx2) / b\n            return 2, [(xx1, yy1), (xx2, yy2)]\n    return 0, []\n\n\nitems1 = comm(x1, y1, r1, x2, y2, r2)\nitems2 = comm(x1, y1, r1, x3, y3, r3)\n\n# print(items1)\n# print(items2)\n\nif not items1[0]:\n    items1, items2 = items2, items1\n\nif items1[0] and items2[0]:\n    a1, b1, c1 = items1[1:]\n    a2, b2, c2 = items2[1:]\n    if a1 * b2 != a2 * b1:\n        print((b1 * c2 - b2 * c1) / (b2 * a1 - a2 * b1), (a1 * c2 - a2 * c1) / (a2 * b1 - a1 * b2))\nelif items1[0] and not items2[0]:\n    a, b, c = items1[1:]\n    x, y, r = items2[1:]\n    num, points = get_points(a, b, c, x, y, r)\n    # print(num, points)\n    if num == 1:\n        print(points[0][0], points[0][1])\n    elif num == 2:\n        xx1, yy1 = points[0]\n        xx2, yy2 = points[1]\n        angle1 = get_angle(x1, y1, r1, xx1, yy1)\n        angle2 = get_angle(x1, y1, r1, xx2, yy2)\n        # print(angle1, angle2)\n        if angle1 >= angle2:\n            print(xx1, yy1)\n        else:\n            print(xx2, yy2)\nelse:\n    xx1, yy1, rr1 = items1[1:]\n    xx2, yy2, rr2 = items2[1:]\n    a, b, c = 2 * (xx1 - xx2), 2 * (yy1 - yy2), (xx2 ** 2 + yy2 ** 2 - rr2 ** 2) - (xx1 ** 2 + yy1 ** 2 - rr1 ** 2)\n    num, points = get_points(a, b, c, xx1, yy1, rr1)\n    # print(num, points)\n    if num == 1:\n        print(points[0][0], points[0][1])\n    elif num == 2:\n        xxx1, yyy1 = points[0]\n        xxx2, yyy2 = points[1]\n        angle1 = get_angle(x1, y1, r1, xxx1, yyy1)\n        angle2 = get_angle(x1, y1, r1, xxx2, yyy2)\n        if angle1 >= angle2:\n            print(xxx1, yyy1)\n        else:\n            print(xxx2, yyy2)", "difficulty": 9, "public_tests": {"input": ["0 0 10\n60 0 10\n30 30 10\n"], "output": ["30.00000 0.00000"]}, "private_tests": {"input": ["0 0 10\n300 300 13\n500 -500 16\n", "0 0 10\n300 300 12\n500 -500 14\n", "0 0 10\n300 300 15\n500 -500 20\n", "0 0 10\n300 300 11\n500 -500 12\n", "0 0 30\n300 300 30\n500 -500 20\n", "0 0 10\n300 300 21\n500 -500 42\n", "614 163 21\n613 -468 18\n-749 679 25\n", "0 0 10\n100 100 10\n200 0 20\n", "0 0 10\n300 300 22\n500 -500 44\n", "0 0 10\n300 300 20\n500 -500 40\n", "18 28 24\n192 393 12\n1000 1000 29\n", "0 0 10\n200 0 20\n100 100 10\n", "-102 -939 22\n0 0 3\n1000 1000 292\n"], "output": ["282.61217 -82.24022\n", "311.34912 -88.13335\n", "240.32114 -71.20545\n", "348.52046 -94.13524\n", "469.05250 -169.05250\n", "148.30948 23.53393\n", "-214.30328 -350.95260\n", "60.76252 39.23748\n", "142.20438 24.52486\n", "154.91933 22.54033\n", "504.34452 425.35835\n", "60.76252 39.23748\n", "\n"]}, "generated_tests": {"input": ["0 0 10\n300 300 13\n500 -500 28\n", "0 0 10\n300 70 15\n500 -500 20\n", "0 0 5\n300 300 11\n500 -500 12\n", "-1 0 30\n300 300 30\n500 -500 20\n", "614 163 13\n613 -468 18\n-749 679 25\n", "0 0 10\n100 100 14\n200 0 20\n", "0 0 10\n300 300 20\n500 -500 44\n", "-1 0 10\n200 0 20\n100 100 10\n", "0 0 9\n60 0 10\n30 30 10\n", "0 0 10\n300 300 13\n500 -196 28\n", "0 0 10\n300 70 10\n500 -500 20\n", "0 0 5\n300 472 11\n500 -500 12\n", "-1 0 30\n300 300 30\n500 -244 20\n", "614 163 13\n613 -706 18\n-749 679 25\n", "0 0 10\n100 101 14\n200 0 20\n", "0 0 10\n300 300 32\n500 -500 44\n", "-1 1 10\n200 0 20\n100 100 10\n", "0 0 9\n60 0 10\n30 54 10\n", "0 0 2\n300 472 11\n500 -500 12\n", "-1 0 30\n300 138 30\n500 -244 20\n", "614 163 13\n613 -1029 18\n-749 679 25\n", "-2 1 10\n200 0 20\n100 100 10\n", "1 0 9\n60 0 10\n30 54 10\n", "0 0 2\n300 466 11\n500 -500 12\n", "-1 0 30\n138 138 30\n500 -244 20\n", "1 0 9\n60 0 10\n30 10 10\n", "0 0 2\n265 466 11\n500 -500 12\n", "-1 0 30\n138 138 30\n500 -244 17\n", "-1 0 30\n138 200 30\n500 -244 17\n", "-1 0 30\n138 200 33\n500 -244 17\n", "-1 0 30\n138 200 33\n500 -112 17\n", "0 0 10\n300 300 13\n453 -500 16\n", "0 0 10\n300 300 12\n566 -500 14\n", "0 0 10\n300 466 15\n500 -500 20\n", "0 0 10\n300 300 11\n500 -139 12\n", "0 0 30\n485 300 30\n500 -500 20\n", "868 163 21\n613 -468 18\n-749 679 25\n", "0 0 10\n100 100 10\n200 -1 20\n", "0 0 8\n300 300 22\n500 -500 44\n", "0 0 10\n300 300 20\n500 -500 30\n", "18 27 24\n192 393 12\n1000 1000 29\n", "0 0 10\n60 0 5\n30 30 10\n", "0 0 10\n300 300 13\n500 -431 28\n", "0 0 10\n300 70 5\n500 -500 20\n", "0 0 5\n487 300 11\n500 -500 12\n", "0 1 30\n300 300 30\n500 -500 20\n", "614 163 13\n613 -856 18\n-749 679 25\n", "0 0 10\n100 100 14\n233 0 20\n", "-1 0 10\n300 300 20\n500 -500 44\n", "-1 0 10\n200 0 20\n000 100 10\n", "0 0 9\n60 -1 10\n30 30 10\n", "-1 0 10\n300 300 13\n500 -196 28\n", "0 0 5\n300 472 11\n500 -202 12\n", "-1 0 30\n300 300 30\n500 -244 29\n", "614 281 13\n613 -706 18\n-749 679 25\n", "0 0 10\n300 300 32\n500 -500 63\n", "0 0 9\n60 0 14\n30 54 10\n", "0 0 2\n300 472 10\n500 -500 12\n", "614 163 13\n613 -1029 18\n-749 679 12\n", "-3 1 10\n200 0 20\n100 100 10\n", "1 0 9\n98 0 10\n30 54 10\n", "-2 0 30\n138 138 30\n500 -244 20\n", "0 0 2\n265 466 11\n500 -501 12\n", "-1 0 30\n138 138 30\n500 -244 7\n", "-1 0 30\n138 188 30\n500 -244 17\n", "-1 0 30\n138 200 33\n500 -244 33\n", "-1 0 30\n138 200 33\n500 -164 17\n", "0 0 10\n300 300 13\n560 -500 16\n", "-1 0 10\n300 466 15\n500 -500 20\n", "0 0 10\n148 300 11\n500 -139 12\n", "1 0 30\n485 300 30\n500 -500 20\n", "868 163 21\n613 -468 18\n-749 921 25\n", "0 0 10\n100 100 10\n200 -1 24\n", "0 0 10\n300 240 13\n500 -431 28\n", "0 0 10\n300 70 5\n500 -737 20\n", "0 0 5\n608 300 11\n500 -500 12\n", "614 163 13\n613 -856 18\n-749 162 25\n", "0 0 9\n60 -1 10\n9 30 10\n", "-1 0 10\n300 300 13\n500 -319 28\n", "0 0 5\n142 472 11\n500 -202 12\n", "-1 -1 30\n300 300 30\n500 -244 29\n", "614 281 13\n1090 -706 18\n-749 679 25\n", "0 0 9\n93 0 14\n30 54 10\n", "0 0 2\n300 472 8\n500 -500 12\n", "614 163 13\n613 -1796 18\n-749 679 12\n", "-3 1 10\n200 0 20\n100 101 10\n", "1 0 9\n98 0 10\n11 54 10\n", "-2 0 30\n196 138 30\n500 -244 20\n", "0 0 2\n265 466 11\n258 -501 12\n", "-1 0 30\n138 188 30\n500 -244 14\n", "-1 0 25\n138 200 33\n500 -244 33\n", "0 0 10\n300 300 13\n560 -101 16\n", "0 0 10\n272 300 11\n500 -139 12\n", "1 0 30\n485 133 30\n500 -500 20\n", "868 163 20\n613 -468 18\n-749 921 25\n", "0 0 12\n100 100 10\n200 -1 24\n", "1 0 10\n300 240 13\n500 -431 28\n", "0 0 10\n237 70 5\n500 -737 20\n", "0 0 5\n608 300 13\n500 -500 12\n", "-1 0 9\n60 -1 10\n9 30 10\n"], "output": ["213.53859 32.78666\n", "85.17905 -231.82544\n", "158.06131 -135.55371\n", "467.74894 -169.30977\n", "84.18560 60.04380\n", "66.10721 12.20140\n", "140.92792 48.16794\n", "60.11341 39.28046\n", "28.41664 -1.58336\n", "110.30493 149.87197\n", "190.94438 -140.47591\n", "226.94345 -24.93998\n", "353.61771 -54.79810\n", "82.16538 -88.30085\n", "66.02094 13.10640\n", "108.34473 -74.42833\n", "60.52457 39.25271\n", "27.88237 17.49021\n", "90.24820 -47.08641\n", "274.74777 -204.18535\n", "107.49015 -263.79785\n", "59.87300 39.29752\n", "28.38200 17.76778\n", "87.91282 -50.90123\n", "294.01743 -158.15162\n", "20.17148 -69.48555\n", "81.75718 -59.67130\n", "310.18849 -174.43986\n", "352.60642 -97.45396\n", "324.46918 -144.46942\n", "310.12862 -127.25407\n", "278.34718 -73.69078\n", "319.16211 -101.40330\n", "285.80841 34.42248\n", "249.48589 28.44579\n", "447.84651 -181.97686\n", "16.75756 -19.34394\n", "60.91190 39.08810\n", "115.26271 29.74810\n", "178.17165 -48.80884\n", "504.59537 424.59425\n", "41.77124 -11.77124\n", "197.00411 54.89784\n", "252.31554 -49.37994\n", "200.87790 -78.04997\n", "468.58005 -169.14553\n", "90.43713 -172.09295\n", "77.52701 -6.58527\n", "140.01773 48.38050\n", "56.55009 49.42950\n", "28.40079 -1.56375\n", "109.30218 150.34581\n", "162.99314 88.10047\n", "309.91617 -10.95089\n", "123.84289 -49.59681\n", "101.13288 28.68581\n", "19.47856 22.58044\n", "103.82347 -12.99245\n", "-307.42580 -82.42262\n", "59.21989 39.34698\n", "46.91463 5.48509\n", "293.07971 -159.34173\n", "81.53689 -60.12578\n", "391.34603 -256.18549\n", "344.36989 -109.96763\n", "259.22692 -70.73391\n", "311.59808 -128.99006\n", "288.96605 -95.47556\n", "284.92922 34.29509\n", "251.74888 39.58012\n", "448.73419 -181.91783\n", "-81.81331 -16.62438\n", "36.45142 63.54858\n", "192.51770 13.31969\n", "319.25896 -95.50168\n", "226.56810 -25.89460\n", "223.90065 -213.75441\n", "28.46036 4.56383\n", "164.29941 93.64417\n", "164.96074 74.47622\n", "309.94132 -10.94132\n", "201.72273 -293.68797\n", "35.62829 12.44639\n", "98.18490 59.49897\n", "-481.72161 -447.61301\n", "58.95904 40.22719\n", "46.71962 14.46495\n", "279.02893 -192.17194\n", "88.99001 7.45893\n", "364.60682 -124.93005\n", "213.59649 -107.93710\n", "222.89732 19.52841\n", "248.91495 25.70695\n", "334.79209 -267.54039\n", "-33.68553 35.51066\n", "55.62103 53.47410\n", "193.32929 13.21680\n", "336.08263 -70.18567\n", "199.11344 -80.96639\n", "27.93300 3.69623\n"]}, "short_description": "1. One-sentence summary  \nCompute the unique point (or circle center) that is tangent to three given circles by reducing the problem to line\u2010circle and circle\u2010circle intersection steps.\n\n2. Core algorithmic approach  \nAnalytic computational geometry:  \n- Derive either the radical axis or homothetic center between each pair of circles (\"comm\").  \n- Depending on degeneracies, solve either two lines\u2019 intersection or a line\u2013circle or circle\u2013circle intersection via quadratic formulas.  \n- When two intersection solutions arise, choose the one consistent with the original tangency configuration by comparing subtended angles.\n\n3. Reusable components  \n- get_line(p1,p2): returns the normalized line coefficients (a,b,c) for the line through two points, handling vertical/horizontal cases robustly.  \n- get_points(a,b,c,x,y,r): solves for intersections between the line ax+by+c=0 and the circle centered at (x,y) with radius r, returning 0/1/2 solutions.  \n- comm(x1,y1,r1, x2,y2,r2): computes either the radical axis (if circles have equal radius) or the homothetic center circle (center and radius) between two circles, unifying both cases."}
{"name": "598_F. Cut Length", "description": "Given simple (without self-intersections) n-gon. It is not necessary convex. Also you are given m lines. For each line find the length of common part of the line and the n-gon.\n\nThe boundary of n-gon belongs to polygon. It is possible that n-gon contains 180-degree angles.\n\nInput\n\nThe first line contains integers n and m (3 \u2264 n \u2264 1000;1 \u2264 m \u2264 100). The following n lines contain coordinates of polygon vertices (in clockwise or counterclockwise direction). All vertices are distinct.\n\nThe following m lines contain line descriptions. Each of them contains two distict points of a line by their coordinates.\n\nAll given in the input coordinates are real numbers, given with at most two digits after decimal point. They do not exceed 105 by absolute values.\n\nOutput\n\nPrint m lines, the i-th line should contain the length of common part of the given n-gon and the i-th line. The answer will be considered correct if the absolute or relative error doesn't exceed 10 - 6.\n\nExamples\n\nInput\n\n4 3\n0 0\n1 0\n1 1\n0 1\n0 0 1 1\n0 0 0 1\n0 0 1 -1\n\n\nOutput\n\n1.41421356237309514547\n1.00000000000000000000\n0.00000000000000000000", "solution": "def main():\n    from math import hypot\n    n, m = map(int, input().split())\n    vertices = list(tuple(map(float, input().split())) for _ in range(n))\n    ax, ay = vertices[-1]\n    for i, (bx, by) in enumerate(vertices):\n        vertices[i], ax, ay = (bx, by, bx - ax, by - ay), bx, by\n    for _ in range(m):\n        x0, y0, x1, y1 = map(float, input().split())\n        x1 -= x0\n        y1 -= y0\n        bx, by = vertices[-1][:2]\n        tmp = (bx - x0) * y1 - (by - y0) * x1\n        t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n        res = []\n        for bx, by, abx, aby in vertices:\n            s, tmp = t, (bx - x0) * y1 - (by - y0) * x1\n            t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n            if s != t:\n                res.append((((bx - x0) * aby - (by - y0) * abx) / (x1 * aby - y1 * abx), s - t))\n        res.sort()\n        t, w = 0, 0.\n        for i, (tmp, s) in enumerate(res, -1):\n            if t:\n                w += tmp - res[i][0]\n            t += s\n        print(w * hypot(x1, y1))\n\n\nif __name__ == '__main__':\n    main()\n\n", "difficulty": 12, "public_tests": {"input": ["4 3\n0 0\n1 0\n1 1\n0 1\n0 0 1 1\n0 0 0 1\n0 0 1 -1\n"], "output": ["1.414213562373095145\n1.000000000000000000\n0.000000000000000000\n"]}, "private_tests": {"input": ["4 9\n0 0\n0 1\n1 1\n1 0\n0 0 1 1\n1 1 0 0\n0 0 1 0\n0 0 0.5 0\n0 0.5 1 0.5\n0 1 1 1\n1 1 1 0\n0.75 0.75 0.75 0.25\n0 0.25 1 0.75\n", "3 1\n2 2\n100000 100000\n-99999.99 -100000\n100000 100000 -99999.99 -100000\n", "9 5\n0 0\n0 2\n1 1\n2 2\n3 1\n4 2\n5 1\n6 2\n6 0\n-1 2 7.5 1\n0 1 6 1\n0 1.5 6 1.5\n0 2 6 1\n0 0 0 2\n", "4 5\n0 0\n1 0\n1 1\n0 1\n0 0 1 1\n0 0 0 1\n0 0 1 -1\n0 0 100000 99999\n-100000 -100000 100000 99999\n", "12 8\n0 0\n10000 0\n10000 5002\n2 5002\n2 9998\n10000 9998\n10000 10000\n0 10000\n0 5000\n9998 5000\n9998 2\n0 2\n5000 -1 5000 10001\n0 0 10000 10000\n0 0 1 1\n0 0 2 2\n0 5000 5000 5000\n-2 0 10002 10000\n-2 10000 10002 0\n-10000 0 20000 10000\n", "9 5\n0 0\n6 0\n6 2\n5 1\n4 2\n3 1\n2 2\n1 1\n0 2\n-1 2 7.5 1\n0 1 6 1\n0 1.5 6 1.5\n0 2 6 1\n0 0 0 2\n", "12 7\n0 2\n9998 2\n9998 5000\n0 5000\n0 10000\n10000 10000\n10000 9998\n2 9998\n2 5002\n10000 5002\n10000 0\n0 0\n5000 -1 5000 10001\n0 0 10000 10000\n0 0 1 1\n0 5000 5000 5000\n-2 0 10002 10000\n-2 10000 10002 0\n-10000 0 20000 10000\n", "3 1\n100000 100000\n-100000 -100000\n100000 -100000\n1.15 99999.99 1.16 99999.99\n", "3 3\n100000 100000\n-99999.99 -100000\n-100000 -100000\n100000 100000 -99999.99 -100000\n-99999.99 -100000 -100000 -100000\n-100000 -100000 -100000 -99999.99\n", "3 1\n100000 100000\n-100000 -100000\n100000 -100000\n0 99999.99 0.01 99999.99\n", "9 7\n0 0\n0 2\n1 1\n2 2\n3 1\n4 2\n5 1\n6 2\n6 0\n0 1 6 1\n0 1.5 6 1.5\n0 2 6 1\n0 1 6 2\n0 2 6 2\n0 0 0 2\n0 0 6 0\n", "3 1\n99999.99 -100000\n-100000 100000\n100000 -100000\n99999.99 -100000 -100000 100000\n", "3 8\n-100000 -100000\n100000 100000\n1 0\n-100000 -100000 100000 -80000\n-100000 -100000 100000 -99000\n-100000 -100000 100000 -99990\n-100000 -100000 100000 -99999\n-100000 -100000 100000 -99999.99\n-100000 -100000 100000 100000\n-100000 -100000 100000 99999.99\n-100000 100000 100000 -100000\n", "3 7\n99999.99 -100000\n-100000 100000\n-99999.99 100000\n1 1 1.01 1.01\n99999.99 -100000 -100000 100000\n-99999.99 100000 -100000 100000\n99999.99 -100000 -99999.99 100000\n-100000 100000 99999.99 -100000\n1 1 2 2\n-100000 100000 100000 -100000\n", "3 8\n-100000 -100000\n100000 100000\n0 1\n-100000 -100000 100000 -80000\n-100000 -100000 100000 -99000\n-100000 -100000 100000 -99990\n-100000 -100000 100000 -99999\n-100000 -100000 100000 -99999.99\n-100000 -100000 100000 100000\n-100000 -100000 100000 99999.99\n-100000 100000 100000 -100000\n", "5 1\n0 0\n-1 1\n2 1\n2 -1\n1 0\n100 0 101 0\n", "3 1\n-99999.99 100000\n100000 -100000\n100000 -99999.99\n-99999.99 100000 100000 -100000\n", "3 1\n-100000 -100000\n100000 -100000\n0 1\n-100000 -100000 100000 -99999\n"], "output": ["1.414213562373095145\n1.414213562373095145\n1.000000000000000000\n1.000000000000000000\n1.000000000000000000\n1.000000000000000000\n1.000000000000000000\n1.000000000000000000\n1.118033988749894903\n", "282842.705403551284689456\n", "2.798112749793594034\n6.000000000000000000\n3.000000000000000000\n2.954484657573421824\n2.000000000000000000\n", "1.414213562373095145\n1.000000000000000000\n0.000000000000000000\n1.414206491322961057\n0.707101477901077025\n", "5.999999999999567457\n8.485281374237946039\n8.485281374238571317\n8.485281374238571317\n10000.000000000000000000\n2.831255156105298543\n8.484716310807245421\n6.324555320336061826\n", "2.798112749793594034\n6.000000000000000000\n3.000000000000000000\n2.954484657573421824\n2.000000000000000000\n", "5.999999999999567457\n8.485281374237946039\n8.485281374238571317\n10000.000000000000000000\n2.831255156105298543\n8.484716310807245421\n6.324555320336061826\n", "0.010000000000000009\n", "282842.705403551284689456\n0.009999999994761311\n0.000000000000000000\n", "0.010000000000000000\n", "6.000000000000000000\n3.000000000000000000\n2.954484657573421824\n2.954484657573420936\n0.000000000000000000\n2.000000000000000000\n6.000000000000000000\n", "282842.705403551284689456\n", "0.000000000000000000\n0.000000000000000000\n0.000000000000000000\n0.000000000000000000\n0.000000000000000000\n282842.712474619038403034\n281435.541764145717024803\n0.707103245656981572\n", "0.003535534\n282842.705403551\n0.010000000\n282842.698332484\n282842.705403551\n0.003535534\n141421.356237309\n", "0.000000000000000000\n0.000000000000000000\n0.000000000000000000\n0.000000000000000000\n0.000000000000000000\n282842.712474619038403034\n0.000000000000000000\n0.707103245672682457\n", "2.000000000000000000\n", "282842.705403551284689456\n", "199999.000017499754903838\n"]}, "generated_tests": {"input": ["3 1\n2 2\n100000 100000\n-99999.99 -156424\n100000 100000 -99999.99 -100000\n", "9 5\n0 0\n0 2\n1 1\n2 2\n3 1\n4 2\n5 1\n6 2\n6 0\n-1 2 7.5 1\n0 1 6 1\n0 1.5 6 1.5\n0 0 6 1\n0 0 0 2\n", "4 5\n0 0\n1 0\n1 1\n0 1\n0 0 1 1\n0 0 0 1\n0 0 1 -1\n0 0 110000 99999\n-100000 -100000 100000 99999\n", "12 8\n0 0\n10000 0\n10000 5002\n2 5002\n2 9998\n10000 9998\n10000 10000\n0 10000\n0 5000\n9998 5000\n9998 2\n0 2\n5000 -1 5000 10001\n0 0 10000 10000\n0 0 1 1\n0 0 2 2\n0 5000 5000 7097\n-2 0 10002 10000\n-2 10000 10002 0\n-10000 0 20000 10000\n", "9 5\n0 0\n6 0\n6 2\n5 1\n4 2\n3 1\n2 2\n1 1\n0 2\n-1 2 7.5 1\n0 1 6 1\n0 1.5 6 1.5\n1 2 6 1\n0 0 0 2\n", "12 7\n0 2\n9998 2\n9998 5000\n0 5000\n0 10000\n10000 10000\n10000 9998\n2 9998\n2 5002\n10000 6344\n10000 0\n0 0\n5000 -1 5000 10001\n0 0 10000 10000\n0 0 1 1\n0 5000 5000 5000\n-2 0 10002 10000\n-2 10000 10002 0\n-10000 0 20000 10000\n", "3 1\n100000 100000\n-136975 -100000\n100000 -100000\n1.15 99999.99 1.16 99999.99\n", "3 3\n100000 100000\n-99999.99 -100000\n-100000 -100000\n100001 100000 -99999.99 -100000\n-99999.99 -100000 -100000 -100000\n-100000 -100000 -100000 -99999.99\n", "9 7\n0 0\n0 2\n1 1\n2 2\n3 1\n4 2\n5 1\n6 2\n6 0\n0 1 6 1\n0 1.5 6 1.5\n0 2 6 1\n0 1 6 2\n0 2 6 2\n0 0 0 4\n0 0 6 0\n", "3 1\n99999.99 -100000\n-100000 100000\n100000 -100000\n99999.99 -143587 -100000 100000\n", "3 8\n-100000 -100000\n100000 100000\n1 0\n-100000 -100000 100000 -56137\n-100000 -100000 100000 -99000\n-100000 -100000 100000 -99990\n-100000 -100000 100000 -99999\n-100000 -100000 100000 -99999.99\n-100000 -100000 100000 100000\n-100000 -100000 100000 99999.99\n-100000 100000 100000 -100000\n", "3 7\n99999.99 -100000\n-100000 100000\n-99999.99 100000\n1 1 1.01 1.01\n99999.99 -100000 -100000 101000\n-99999.99 100000 -100000 100000\n99999.99 -100000 -99999.99 100000\n-100000 100000 99999.99 -100000\n1 1 2 2\n-100000 100000 100000 -100000\n", "3 8\n-100000 -100000\n100000 100000\n0 1\n-100000 -100000 100000 -80000\n-100000 -100000 110000 -99000\n-100000 -100000 100000 -99990\n-100000 -100000 100000 -99999\n-100000 -100000 100000 -99999.99\n-100000 -100000 100000 100000\n-100000 -100000 100000 99999.99\n-100000 100000 100000 -100000\n", "4 3\n0 0\n1 0\n1 1\n0 1\n0 0 0 1\n0 0 0 1\n0 0 1 -1\n", "4 5\n0 0\n1 0\n1 1\n0 1\n0 0 1 1\n0 0 0 1\n0 0 1 -1\n0 0 110000 99999\n-122787 -100000 100000 99999\n", "9 5\n0 0\n6 0\n6 2\n5 1\n4 2\n3 1\n2 2\n1 1\n0 2\n-1 2 7.5 1\n0 0 6 1\n0 1.5 6 1.5\n1 2 6 1\n0 0 0 2\n", "12 7\n0 2\n9998 2\n9998 5000\n0 5000\n0 10000\n10000 10000\n10000 9998\n2 9998\n2 5002\n10000 6344\n10000 0\n0 0\n5000 -1 5000 10001\n0 0 10000 10000\n0 0 1 1\n0 5000 5000 5000\n-2 0 10002 10000\n-2 10000 10002 0\n-10000 0 20000 11000\n", "3 1\n100000 100000\n-136975 -186567\n100000 -100000\n1.15 99999.99 1.16 99999.99\n", "3 8\n-100000 -100000\n100000 100000\n0 1\n-100000 -100000 100000 -80000\n-100000 -100000 110000 -99000\n-100000 -100000 100000 -99990\n-100000 -100000 100000 -99999\n-100000 -100000 100000 -99999.99\n-34932 -100000 100000 100000\n-100000 -100000 100000 99999.99\n-100000 100000 100000 -100000\n", "4 3\n0 0\n1 -1\n1 1\n0 1\n0 0 0 1\n0 0 0 1\n0 0 1 -1\n", "9 5\n0 0\n0 2\n1 1\n2 2\n3 1\n4 2\n5 1\n6 2\n6 1\n-1 2 7.5 1\n0 2 6 1\n0 1.5 6 1.5\n0 0 6 1\n0 0 0 2\n", "4 5\n0 0\n1 0\n2 1\n0 1\n0 0 1 1\n0 0 0 1\n0 0 1 -1\n0 0 110000 99999\n-122787 -100000 100000 99999\n", "9 5\n0 0\n6 0\n6 2\n5 1\n4 2\n2 1\n2 2\n1 1\n0 2\n-1 2 7.5 1\n0 0 6 1\n0 1.5 6 1.5\n1 2 6 1\n0 0 0 2\n", "12 7\n0 2\n9998 2\n9998 5000\n0 5000\n0 10000\n10000 10000\n10000 9998\n2 9998\n2 5002\n10000 6344\n10000 0\n0 0\n5000 -1 5000 10001\n0 0 10000 10000\n0 0 2 1\n0 5000 5000 5000\n-2 0 10002 10000\n-2 10000 10002 0\n-10000 0 20000 11000\n", "3 1\n100000 100000\n-136975 -244048\n100000 -100000\n1.15 99999.99 1.16 99999.99\n", "9 7\n1 0\n0 2\n1 1\n2 2\n3 1\n4 2\n5 1\n6 2\n6 0\n-1 1 6 1\n0 1.5 6 1.5\n0 2 6 1\n0 1 6 2\n0 2 6 2\n0 0 0 4\n0 0 6 0\n", "4 3\n1 0\n1 -1\n1 1\n0 1\n0 0 0 1\n0 0 0 1\n0 0 1 -1\n", "12 7\n0 2\n9998 2\n9998 5000\n0 5000\n0 10000\n10000 10000\n10000 9998\n2 9998\n2 5002\n10000 9925\n10000 0\n0 0\n5000 -1 5000 10001\n0 0 10000 10000\n0 0 2 1\n0 5000 5000 5000\n-2 0 10002 10000\n-2 10000 10002 0\n-10000 0 20000 11000\n", "9 7\n0 0\n0 2\n1 1\n2 2\n3 1\n4 4\n5 1\n6 2\n6 0\n-1 1 6 1\n0 1.5 6 1.5\n0 2 6 1\n0 1 6 2\n0 2 6 2\n0 0 0 4\n0 0 6 0\n", "4 5\n0 0\n1 0\n2 1\n0 1\n0 0 1 1\n0 0 0 1\n1 0 1 -1\n0 0 110000 99999\n-122787 -100000 000000 99999\n", "4 5\n0 0\n1 0\n2 1\n0 1\n-1 0 1 1\n0 0 0 1\n1 0 1 -1\n0 0 110000 99999\n-122787 -100000 000000 99999\n", "9 7\n-1 0\n0 2\n1 1\n2 2\n3 1\n4 4\n5 1\n6 2\n6 0\n-1 1 6 1\n1 1.5 6 1.5\n0 2 6 1\n0 1 6 2\n0 2 6 2\n0 0 0 4\n0 0 6 0\n", "4 9\n0 0\n0 1\n1 1\n1 0\n0 0 1 1\n1 1 0 0\n0 0 1 0\n0 0 0.5 0\n0 0.5 1 0.5\n0 1 1 1\n1 1 1 0\n0.75 1.4358213539624105 0.75 0.25\n0 0.25 1 0.75\n", "9 5\n0 0\n0 2\n1 1\n2 2\n3 1\n4 2\n5 1\n6 2\n6 0\n-1 2 7.5 1\n0 1 6 1\n0 1.5 6 1.5\n0 2 6 1\n0 1 0 2\n", "12 8\n0 0\n10000 0\n10000 5002\n2 5002\n2 9998\n10000 9998\n10000 10000\n0 10000\n0 5000\n9998 5000\n9998 2\n0 2\n5000 -1 5000 10001\n0 0 10000 10000\n0 0 1 0\n0 0 2 2\n0 5000 5000 5000\n-2 0 10002 10000\n-2 10000 10002 0\n-10000 0 20000 10000\n", "12 7\n0 2\n9998 2\n9998 5000\n0 5000\n0 10000\n10000 10000\n10000 9998\n2 9998\n2 5002\n10000 5002\n10000 0\n0 0\n5000 -1 5000 10001\n0 0 10000 10000\n0 0 1 1\n0 5000 5000 5000\n-2 0 10002 10000\n-2 10000 10002 0\n-10000 0 20000 10001\n", "3 1\n-99999.99 100000\n100000 -100000\n100000 -99999.99\n-99999.99 100000 110000 -100000\n", "9 5\n0 0\n0 2\n1 1\n2 2\n3 1\n4 2\n5 1\n6 2\n6 1\n-1 2 7.5 1\n0 1 6 1\n0 1.5 6 1.5\n0 0 6 1\n0 0 0 2\n", "3 3\n100000 100000\n-99999.99 -100000\n-100000 -100000\n110001 100000 -99999.99 -100000\n-99999.99 -100000 -100000 -100000\n-100000 -100000 -100000 -99999.99\n", "9 7\n0 0\n0 2\n1 1\n2 2\n3 1\n4 2\n5 1\n6 2\n6 0\n-1 1 6 1\n0 1.5 6 1.5\n0 2 6 1\n0 1 6 2\n0 2 6 2\n0 0 0 4\n0 0 6 0\n", "3 7\n99999.99 -100000\n-100000 100000\n-99999.99 100000\n1 1 1.01 1.01\n100000.11370339744 -100000 -100000 101000\n-99999.99 100000 -100000 100000\n99999.99 -100000 -99999.99 100000\n-100000 100000 99999.99 -100000\n1 1 2 2\n-100000 100000 100000 -100000\n", "3 1\n-99999.99 100000\n100000 -100000\n100000 -99999.99\n-99999.99 100000 110000 -93470\n", "3 3\n100000 100000\n-99999.99 -100000\n-100000 -100000\n110001 100000 -99999.99 -100000\n-99999.99 -100000 -144002 -100000\n-100000 -100000 -100000 -99999.99\n", "3 8\n-100000 -100000\n100000 100000\n0 1\n-100000 -100000 100000 -80000\n-100000 -100000 110000 -99000\n-100000 -192929 100000 -99990\n-100000 -100000 100000 -99999\n-100000 -100000 100000 -99999.99\n-34932 -100000 100000 100000\n-100000 -100000 100000 99999.99\n-100000 100000 100000 -100000\n", "3 1\n-99999.99 100000\n100100 -100000\n100000 -99999.99\n-99999.99 100000 110000 -93470\n", "4 5\n0 0\n1 0\n2 1\n0 1\n0 0 1 1\n0 0 0 1\n0 0 1 -1\n0 0 110000 99999\n-122787 -100000 000000 99999\n", "3 3\n100000 100000\n-99999.99 -100000\n-100000 -77681\n110001 100000 -99999.99 -100000\n-99999.99 -100000 -144002 -100000\n-100000 -100000 -100000 -99999.99\n", "9 7\n0 0\n0 2\n1 1\n2 2\n3 1\n4 4\n5 1\n6 2\n6 0\n-1 1 6 1\n1 1.5 6 1.5\n0 2 6 1\n0 1 6 2\n0 2 6 2\n0 0 0 4\n0 0 6 0\n", "3 1\n2 2\n100000 100000\n-99999.99 -100000\n100000 100000 -99999.99 -121810\n"], "output": ["141418.5438776682\n", "2.7981127498\n6.0000000000\n3.0000000000\n6.0827625303\n2.0000000000\n", "1.4142135624\n1.0000000000\n0.0000000000\n1.3514546800\n0.7071014779\n", "6.0000000000\n8.4852813742\n8.4852813742\n8.4852813742\n5.1711375806\n2.8312551561\n8.4847163108\n6.3245553203\n", "2.7981127498\n6.0000000000\n3.0000000000\n2.5495097568\n2.0000000000\n", "676.8657731546\n1104.7621995262\n1104.7621995262\n10000.0000000000\n1099.3956292588\n844.7481754106\n3562.2284746455\n", "0.0118487500\n", "0.0000000000\n0.0100000000\n0.0000000000\n", "6.0000000000\n3.0000000000\n2.9544846576\n2.9544846576\n0.0000000000\n2.0000000000\n6.0000000000\n", "0.0000000000\n", "0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n282842.7124746190\n281435.5417664959\n0.7071032457\n", "0.0035355340\n0.0000000000\n0.0100000000\n282842.6983324838\n282842.7054035513\n0.0035355340\n141421.3562373095\n", "0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n282842.7124746190\n0.0000000000\n0.7071032457\n", "1.0000000000\n1.0000000000\n0.0000000000\n", "1.4142135624\n1.0000000000\n0.0000000000\n1.3514546800\n0.0000000000\n", "2.7981127498\n6.0827625303\n3.0000000000\n2.5495097568\n2.0000000000\n", "676.8657731546\n1104.7621995262\n1104.7621995262\n10000.0000000000\n1099.3956292588\n844.7481754106\n2244.5316004101\n", "0.0082694448\n", "0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n0.7071032457\n", "1.0000000000\n1.0000000000\n1.4142135624\n", "2.7981127498\n2.9544846576\n3.0000000000\n6.0827625303\n2.0000000000\n", "1.4142135624\n1.0000000000\n0.0000000000\n1.4866150142\n0.0000000000\n", "2.8243576746\n6.0827625303\n3.0000000000\n2.6587744607\n2.0000000000\n", "676.8657731546\n1104.7621995262\n6.7082039325\n10000.0000000000\n1099.3956292588\n844.7481754106\n2244.5316004101\n", "0.0068878470\n", "5.5000000000\n2.7500000000\n2.9544846576\n2.4865798476\n0.0000000000\n0.0000000000\n5.0000000000\n", "0.0000000000\n0.0000000000\n0.0000000000\n", "2467.0076015203\n6867.7693873474\n6.7082039325\n10000.0000000000\n6866.1515563284\n2339.7881859073\n6777.9283127693\n", "6.0000000000\n3.6666666667\n3.3720188215\n3.8412066965\n1.3333333333\n2.0000000000\n6.0000000000\n", "1.4142135624\n1.0000000000\n1.0000000000\n1.4866150142\n0.0000000000\n", "1.1180339887\n1.0000000000\n1.0000000000\n1.4866150142\n0.0000000000\n", "6.5000000000\n3.9166666667\n3.3720188215\n4.3941851083\n1.3333333333\n2.0000000000\n7.0000000000\n", "1.4142135624\n1.4142135624\n1.0000000000\n1.0000000000\n1.0000000000\n1.0000000000\n1.0000000000\n1.0000000000\n1.1180339887\n", "2.7981127498\n6.0000000000\n3.0000000000\n2.9544846576\n2.0000000000\n", "6.0000000000\n8.4852813742\n10000.0000000000\n8.4852813742\n10000.0000000000\n2.8312551561\n8.4847163108\n6.3245553203\n", "6.0000000000\n8.4852813742\n8.4852813742\n10000.0000000000\n2.8312551561\n8.4847163108\n6.3239861701\n", "0.0000000000\n", "2.7981127498\n6.0000000000\n3.0000000000\n6.0827625303\n2.0000000000\n", "0.0000000000\n0.0100000000\n0.0000000000\n", "6.0000000000\n3.0000000000\n2.9544846576\n2.9544846576\n0.0000000000\n2.0000000000\n6.0000000000\n", "0.0035355340\n0.0000000000\n0.0100000000\n282842.6983324838\n282842.7054035513\n0.0035355340\n141421.3562373095\n", "0.0000000000\n", "0.0000000000\n0.0100000000\n0.0000000000\n", "0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n0.0000000000\n0.7071032457\n", "0.0000000000\n", "1.4142135624\n1.0000000000\n0.0000000000\n1.4866150142\n0.0000000000\n", "0.0000000000\n0.0000000000\n0.0000000000\n", "6.0000000000\n3.6666666667\n3.3720188215\n3.8412066965\n1.3333333333\n2.0000000000\n6.0000000000\n", "0.0000000000\n"]}, "short_description": "1. One-sentence summary  \nGiven a simple closed polygon, for each query directed line segment, the solution computes the total length of the portion of that segment that lies strictly inside the polygon.  \n\n2. Core algorithmic approach  \nIt uses computational\u2010geometry event sweeping: for each query it  \n- parameterizes the infinite line by t,  \n- finds all intersection parameters t_i where the line crosses a polygon edge (tagged as entering or exiting by signed cross\u2010product),  \n- sorts these events by t_i,  \n- and then does a 1D sweep over t accumulating intervals where the \u201cinside\u2010polygon\u201d parity is nonzero.  \n\n3. Reusable components  \n- Intersection-parameter computation: Given a query ray (x0,y0)+(t\u00b7dx,t\u00b7dy) and a segment from (bx,by) to (bx+abx,by+aby), compute t = ((bx\u2212x0)*aby \u2212 (by\u2212y0)*abx)/(dx*aby\u2212dy*abx).  \n- Crossing\u2010direction test: Use sign of ( (bx\u2212x0)*dy \u2212 (by\u2212y0)*dx ) to label each intersection as an entry (+1) or exit (\u22121).  \n- Event-sweep pattern: Collect (t,\u00b11) events, sort by t, then scan to accumulate total \u201cinside\u201d t-interval length, finally scaling by hypot(dx,dy)."}
{"name": "552_D. Vanya and Triangles", "description": "Vanya got bored and he painted n distinct points on the plane. After that he connected all the points pairwise and saw that as a result many triangles were formed with vertices in the painted points. He asks you to count the number of the formed triangles with the non-zero area.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of the points painted on the plane. \n\nNext n lines contain two integers each xi, yi ( - 100 \u2264 xi, yi \u2264 100) \u2014 the coordinates of the i-th point. It is guaranteed that no two given points coincide.\n\nOutput\n\nIn the first line print an integer \u2014 the number of triangles with the non-zero area among the painted points.\n\nExamples\n\nInput\n\n4\n0 0\n1 1\n2 0\n2 2\n\n\nOutput\n\n3\n\n\nInput\n\n3\n0 0\n1 1\n2 0\n\n\nOutput\n\n1\n\n\nInput\n\n1\n1 1\n\n\nOutput\n\n0\n\nNote\n\nNote to the first sample test. There are 3 triangles formed: (0, 0) - (1, 1) - (2, 0); (0, 0) - (2, 2) - (2, 0); (1, 1) - (2, 2) - (2, 0).\n\nNote to the second sample test. There is 1 triangle formed: (0, 0) - (1, 1) - (2, 0).\n\nNote to the third sample test. A single point doesn't form a single triangle.", "solution": "import sys\nfrom math import gcd\nfrom collections import defaultdict\ninput=sys.stdin.readline\nn=int(input())\np=[list(map(int,input().split())) for i in range(n)]\nans=0\nfor xi,yi in p:\n    angle=defaultdict(int)\n    for x,y in p:\n        if xi==x and yi==y:\n            continue\n        x-=xi;y-=yi\n        if x<0 or (x==0 and y<0):\n            x=-x;y=-y\n        g=abs(gcd(x,y))\n        x//=g;y//=g\n        angle[(x,y)]+=1\n    cnt=0\n    for i in angle.keys():\n        cnt+=angle[i]*(n-1-angle[i])\n    ans+=cnt//2\nprint(ans//3)", "difficulty": 10, "public_tests": {"input": ["4\n0 0\n1 1\n2 0\n2 2\n", "1\n1 1\n", "3\n0 0\n1 1\n2 0\n"], "output": ["3\n", "0", "1"]}, "private_tests": {"input": ["5\n-100 -100\n-100 100\n100 -100\n100 100\n0 0\n", "61\n83 52\n28 91\n-45 -68\n-84 -8\n-59 -28\n-98 -72\n38 -38\n-51 -96\n-66 11\n-76 45\n95 45\n-89 5\n-60 -66\n73 26\n9 94\n-5 -80\n44 41\n66 -22\n61 26\n-58 -84\n62 -73\n18 63\n44 71\n32 -41\n-50 -69\n-30 17\n61 47\n45 70\n-97 76\n-27 31\n2 -12\n-87 -75\n-80 -82\n-47 50\n45 -23\n71 54\n79 -7\n35 22\n19 -53\n-65 -72\n-69 68\n-53 48\n-73 -15\n29 38\n-49 -47\n12 -30\n-21 -59\n-28 -11\n-73 -60\n99 74\n32 30\n-9 -7\n-82 95\n58 -32\n39 64\n-42 9\n-21 -76\n39 33\n-63 59\n-66 41\n-54 -69\n", "2\n0 0\n1 1\n", "20\n-100 -100\n-99 -99\n-98 -96\n-97 -91\n-96 -84\n-95 -75\n-94 -64\n-93 -51\n-92 -36\n-91 -19\n100 100\n99 99\n98 96\n97 91\n96 84\n95 75\n94 64\n93 51\n92 36\n91 19\n", "3\n-100 -100\n0 0\n100 100\n", "10\n-52 25\n55 76\n97 88\n92 3\n-98 77\n45 90\n6 85\n-68 -38\n-74 -55\n-48 60\n", "50\n0 -26\n0 -64\n0 63\n0 -38\n0 47\n0 31\n0 -72\n0 60\n0 -15\n0 -36\n0 50\n0 -77\n0 -89\n0 5\n0 83\n0 -52\n0 -21\n0 39\n0 51\n0 -11\n0 -69\n0 57\n0 -58\n0 64\n0 85\n0 -61\n0 0\n0 69\n0 -83\n0 24\n0 -91\n0 -33\n0 -79\n0 -39\n0 -98\n0 45\n0 4\n0 -8\n0 96\n0 35\n0 9\n0 53\n0 90\n0 15\n0 -19\n0 -48\n0 -56\n0 38\n0 92\n0 76\n", "25\n26 -54\n16 56\n-42 -51\n92 -58\n100 52\n57 -98\n-84 -28\n-71 12\n21 -82\n-3 -30\n72 94\n-66 96\n-50 -41\n-77 -41\n-42 -55\n-13 12\n0 -99\n-50 -5\n65 -48\n-96 -80\n73 -92\n72 59\n53 -66\n-67 -75\n2 56\n", "33\n0 81\n20 -16\n-71 38\n-45 28\n-8 -40\n34 -49\n43 -10\n-40 19\n14 -50\n-95 8\n-21 85\n64 98\n-97 -82\n19 -83\n39 -99\n43 71\n67 43\n-54 57\n-7 24\n83 -76\n54 -88\n-43 -9\n-75 24\n74 32\n-68 -1\n71 84\n88 80\n52 67\n-64 21\n-85 97\n33 13\n41 -28\n0 74\n", "20\n-2 1\n5 1\n1 -1\n1 4\n-5 -5\n3 1\n-5 -3\n-2 3\n-3 4\n5 -4\n-4 5\n3 3\n1 0\n-4 -4\n3 0\n4 -1\n-3 0\n-2 2\n-2 -5\n-5 -4\n", "33\n21 -99\n11 85\n80 -77\n-31 59\n32 6\n24 -52\n-32 -47\n57 18\n76 -36\n96 -38\n-59 -12\n-98 -32\n-52 32\n-73 -87\n-51 -40\n34 -55\n69 46\n-88 -67\n-68 65\n60 -11\n-45 -41\n91 -21\n45 21\n-75 49\n58 65\n-20 81\n-24 29\n66 -71\n-25 50\n96 74\n-43 -47\n34 -86\n81 14\n", "10\n-1 32\n0 88\n-1 69\n0 62\n-1 52\n0 16\n0 19\n-1 58\n0 38\n0 67\n", "4\n1 -100\n2 -100\n100 -99\n99 -99\n", "5\n0 0\n1 1\n2 2\n3 3\n4 4\n", "62\n-53 -58\n29 89\n-92 15\n-91 -19\n96 23\n-1 -57\n-83 11\n56 -95\n-39 -47\n-75 77\n52 -95\n-13 -12\n-51 80\n32 -78\n94 94\n-51 81\n53 -28\n-83 -78\n76 -25\n91 -60\n-40 -27\n55 86\n-26 1\n-41 89\n61 -23\n81 31\n-21 82\n-12 47\n20 36\n-95 54\n-81 73\n-19 -83\n52 51\n-60 68\n-58 35\n60 -38\n-98 32\n-10 60\n88 -5\n78 -57\n-12 -43\n-83 36\n51 -63\n-89 -5\n-62 -42\n-29 78\n73 62\n-88 -55\n34 38\n88 -26\n-26 -89\n40 -26\n46 63\n74 -66\n-61 -61\n82 -53\n-75 -62\n-99 -52\n-15 30\n38 -52\n-83 -75\n-31 -38\n", "4\n-100 -100\n-100 100\n100 -100\n100 100\n", "5\n-62 -69\n3 -48\n54 54\n8 94\n83 94\n", "9\n-41 -22\n95 53\n81 -61\n22 -74\n-79 38\n-56 -32\n100 -32\n-37 -94\n-59 -9\n", "5\n0 0\n1 1\n2 3\n3 6\n4 10\n", "20\n12 16\n19 13\n19 15\n20 3\n5 20\n8 3\n9 18\n2 15\n2 3\n16 8\n14 18\n16 20\n13 17\n0 15\n10 12\n10 6\n18 8\n6 1\n6 2\n0 6\n", "61\n37 -96\n36 -85\n30 -53\n-98 -40\n2 3\n-88 -69\n88 -26\n78 -69\n48 -3\n-41 66\n-93 -58\n-51 59\n21 -2\n65 29\n-3 35\n-98 46\n42 38\n0 -99\n46 84\n39 -48\n-15 81\n-15 51\n-77 74\n81 -58\n26 -35\n-14 20\n73 74\n-45 83\n90 22\n-8 53\n1 -52\n20 58\n39 -22\n60 -10\n52 22\n-46 6\n8 8\n14 9\n38 -45\n82 13\n43 4\n-25 21\n50 -16\n31 -12\n76 -13\n-82 -2\n-5 -56\n87 -31\n9 -36\n-100 92\n-10 39\n-16 2\n62 -39\n-36 60\n14 21\n-62 40\n98 43\n-54 66\n-34 46\n-47 -65\n21 44\n", "5\n0 0\n1 1\n2 4\n3 8\n4 16\n", "3\n1 1\n3 3\n2 2\n"], "output": ["8", "35985", "0", "1136", "0", "120", "0", "2300", "5456", "1109\n", "5455", "96", "4", "0", "37814", "4", "10", "84", "10", "1130", "35985", "10\n", "0\n"]}, "generated_tests": {"input": ["5\n-72 -100\n-100 100\n100 -100\n100 100\n0 0\n", "61\n83 52\n28 91\n-45 -68\n-84 -8\n-59 -28\n-98 -72\n38 -38\n-51 -96\n-66 11\n-76 45\n95 45\n-89 5\n-60 -66\n73 26\n9 94\n-5 -80\n44 41\n66 -22\n61 26\n-58 -84\n65 -73\n18 63\n44 71\n32 -41\n-50 -69\n-30 17\n61 47\n45 70\n-97 76\n-27 31\n2 -12\n-87 -75\n-80 -82\n-47 50\n45 -23\n71 54\n79 -7\n35 22\n19 -53\n-65 -72\n-69 68\n-53 48\n-73 -15\n29 38\n-49 -47\n12 -30\n-21 -59\n-28 -11\n-73 -60\n99 74\n32 30\n-9 -7\n-82 95\n58 -32\n39 64\n-42 9\n-21 -76\n39 33\n-63 59\n-66 41\n-54 -69\n", "2\n0 0\n1 2\n", "20\n-100 -100\n-99 -11\n-98 -96\n-97 -91\n-96 -84\n-95 -75\n-94 -64\n-93 -51\n-92 -36\n-91 -19\n100 100\n99 99\n98 96\n97 91\n96 84\n95 75\n94 64\n93 51\n92 36\n91 19\n", "10\n-52 25\n85 76\n97 88\n92 3\n-98 77\n45 90\n6 85\n-68 -38\n-74 -55\n-48 60\n", "50\n0 -26\n1 -64\n0 63\n0 -38\n0 47\n0 31\n0 -72\n0 60\n0 -15\n0 -36\n0 50\n0 -77\n0 -89\n0 5\n0 83\n0 -52\n0 -21\n0 39\n0 51\n0 -11\n0 -69\n0 57\n0 -58\n0 64\n0 85\n0 -61\n0 0\n0 69\n0 -83\n0 24\n0 -91\n0 -33\n0 -79\n0 -39\n0 -98\n0 45\n0 4\n0 -8\n0 96\n0 35\n0 9\n0 53\n0 90\n0 15\n0 -19\n0 -48\n0 -56\n0 38\n0 92\n0 76\n", "25\n26 -54\n16 56\n-42 -51\n92 -58\n100 52\n57 -98\n-84 -28\n-71 12\n21 -82\n-3 -30\n72 94\n-66 96\n-50 -41\n-77 -41\n-42 -55\n-13 12\n-1 -99\n-50 -5\n65 -48\n-96 -80\n73 -92\n72 59\n53 -66\n-67 -75\n2 56\n", "33\n0 81\n20 -16\n-71 38\n-45 28\n-8 -40\n60 -49\n43 -10\n-40 19\n14 -50\n-95 8\n-21 85\n64 98\n-97 -82\n19 -83\n39 -99\n43 71\n67 43\n-54 57\n-7 24\n83 -76\n54 -88\n-43 -9\n-75 24\n74 32\n-68 -1\n71 84\n88 80\n52 67\n-64 21\n-85 97\n33 13\n41 -28\n0 74\n", "20\n-2 1\n5 1\n1 -1\n1 4\n-5 -5\n3 1\n-2 -3\n-2 3\n-3 4\n5 -4\n-4 5\n3 3\n1 0\n-4 -4\n3 0\n4 -1\n-3 0\n-2 2\n-2 -5\n-5 -4\n", "33\n21 -99\n11 85\n80 -77\n-31 59\n32 6\n24 -52\n-32 -47\n57 18\n76 -36\n96 -38\n-59 -12\n-98 -32\n-52 32\n-73 -87\n-51 -40\n34 -55\n69 46\n-81 -67\n-68 65\n60 -11\n-45 -41\n91 -21\n45 21\n-75 49\n58 65\n-20 81\n-24 29\n66 -71\n-25 50\n96 74\n-43 -47\n34 -86\n81 14\n", "10\n0 32\n0 88\n-1 69\n0 62\n-1 52\n0 16\n0 19\n-1 58\n0 38\n0 67\n", "4\n0 -100\n2 -100\n100 -99\n99 -99\n", "5\n0 -1\n1 1\n2 2\n3 3\n4 4\n", "62\n-53 -58\n29 89\n-92 15\n-91 -19\n96 23\n-1 -57\n-83 11\n56 -95\n-39 -47\n-75 77\n52 -95\n-13 -12\n-51 80\n32 -78\n94 94\n-51 81\n53 -28\n-83 -78\n76 -25\n91 -60\n-40 -27\n55 86\n-26 1\n-41 89\n61 -23\n81 31\n-21 82\n-12 47\n20 36\n-95 54\n-81 73\n-19 -83\n52 51\n-60 68\n-58 35\n60 -38\n-98 32\n-10 60\n88 -5\n78 -57\n-12 -43\n-83 36\n51 -63\n-89 -5\n-62 -42\n-29 78\n73 62\n-88 -55\n4 38\n88 -26\n-26 -89\n40 -26\n46 63\n74 -66\n-61 -61\n82 -53\n-75 -62\n-99 -52\n-15 30\n38 -52\n-83 -75\n-31 -38\n", "5\n-62 -69\n3 -48\n54 54\n7 94\n83 94\n", "20\n12 16\n19 3\n19 15\n20 3\n5 20\n8 3\n9 18\n2 15\n2 3\n16 8\n14 18\n16 20\n13 17\n0 15\n10 12\n10 6\n18 8\n6 1\n6 2\n0 6\n", "61\n37 -96\n36 -85\n30 -53\n-98 -40\n2 3\n-88 -69\n88 -26\n78 -69\n48 -3\n-41 66\n-93 -58\n-51 59\n21 -2\n65 29\n-3 35\n-98 46\n42 38\n0 -99\n46 84\n39 -48\n-15 81\n-15 51\n-77 74\n81 -58\n26 -35\n-14 20\n73 74\n-45 83\n90 22\n-8 53\n1 -66\n20 58\n39 -22\n60 -10\n52 22\n-46 6\n8 8\n14 9\n38 -45\n82 13\n43 4\n-25 21\n50 -16\n31 -12\n76 -13\n-82 -2\n-5 -56\n87 -31\n9 -36\n-100 92\n-10 39\n-16 2\n62 -39\n-36 60\n14 21\n-62 40\n98 43\n-54 66\n-34 46\n-47 -65\n21 44\n", "3\n1 1\n3 3\n1 2\n", "4\n0 0\n2 1\n2 0\n2 2\n", "50\n0 -26\n1 -64\n0 63\n0 -38\n0 47\n0 31\n0 -72\n0 60\n0 -15\n0 -36\n0 50\n0 -77\n0 -89\n0 5\n0 83\n0 -52\n0 -21\n0 39\n0 51\n0 -11\n0 -69\n0 57\n0 -58\n0 64\n0 85\n0 -61\n0 0\n0 69\n0 -83\n0 24\n0 -91\n0 -33\n0 -79\n0 -39\n0 -98\n0 45\n0 4\n0 -8\n0 96\n0 35\n0 9\n0 53\n0 90\n0 15\n0 -19\n1 -48\n0 -56\n0 38\n0 92\n0 76\n", "20\n-2 1\n5 1\n1 -1\n1 4\n-5 -5\n3 1\n-2 -3\n-2 3\n-3 4\n5 -4\n-4 5\n3 3\n1 0\n-4 -4\n3 0\n4 -1\n-3 0\n-2 2\n-4 -5\n-5 -4\n", "10\n0 32\n0 88\n-1 69\n-1 62\n-1 52\n0 16\n0 19\n-1 58\n0 38\n0 67\n", "5\n0 -1\n1 1\n2 3\n3 3\n4 4\n", "20\n12 16\n19 3\n19 15\n20 3\n5 20\n8 3\n9 18\n2 15\n2 3\n16 8\n14 18\n16 20\n13 17\n0 15\n10 12\n10 6\n18 8\n6 1\n10 2\n0 6\n", "50\n0 -26\n1 -64\n0 63\n0 -38\n0 47\n0 31\n0 -72\n0 60\n0 -15\n0 -36\n0 50\n0 -77\n0 -89\n0 5\n0 83\n0 -52\n0 -21\n0 39\n0 51\n0 -11\n0 -69\n0 57\n0 -58\n0 64\n0 85\n0 -61\n0 0\n0 69\n0 -83\n0 24\n-1 -91\n0 -33\n0 -79\n0 -39\n0 -98\n0 45\n0 4\n0 -8\n0 96\n0 35\n0 9\n0 53\n0 90\n0 15\n0 -19\n1 -48\n0 -56\n0 38\n0 92\n0 76\n", "20\n-2 1\n5 1\n1 -1\n1 4\n-5 -5\n3 1\n-2 -3\n-2 3\n-3 4\n5 -4\n-4 5\n3 3\n1 0\n-4 -4\n3 0\n4 -1\n-3 0\n-1 2\n-4 -5\n-5 -4\n", "10\n0 32\n0 88\n-1 69\n-1 62\n-1 52\n0 16\n1 19\n-1 58\n0 38\n0 67\n", "62\n-53 -58\n29 89\n-92 15\n-91 -19\n96 23\n-1 -57\n-83 11\n56 -95\n-39 -47\n-75 77\n52 -95\n-13 -12\n-51 80\n32 -78\n94 94\n-51 81\n53 -28\n-83 -78\n76 -25\n91 -60\n-40 -27\n55 86\n-26 1\n-41 89\n61 -23\n81 31\n-21 82\n-12 47\n20 36\n-95 54\n-81 73\n-19 -83\n52 51\n-60 68\n-58 35\n60 -44\n-98 32\n-10 60\n88 -5\n78 -57\n-12 -43\n-83 36\n51 -63\n-89 -5\n-62 -42\n-29 78\n73 62\n-88 -55\n4 38\n88 -26\n-26 -89\n40 -26\n46 63\n74 -66\n-61 -61\n82 -53\n-75 -62\n-99 -52\n-15 30\n19 -52\n-83 -75\n-31 -38\n", "50\n0 -26\n1 -64\n0 63\n0 -38\n0 47\n0 31\n0 -72\n0 60\n0 -15\n0 -36\n0 50\n0 -77\n0 -89\n0 5\n0 83\n0 -52\n0 -21\n0 39\n0 51\n0 -11\n0 -69\n0 57\n0 -58\n0 64\n0 85\n0 -61\n0 0\n0 69\n0 -83\n0 24\n-1 -91\n0 -33\n0 -79\n0 -39\n0 -98\n0 45\n0 4\n0 -8\n-1 96\n0 35\n0 9\n0 53\n0 90\n0 15\n0 -19\n1 -48\n0 -56\n0 38\n0 92\n0 76\n", "20\n-2 1\n5 1\n1 -1\n1 4\n-7 -5\n3 1\n-2 -3\n-2 3\n-3 4\n5 -4\n-4 5\n3 3\n1 0\n-4 -4\n3 0\n4 -1\n-3 0\n-1 2\n-4 -5\n-5 -4\n", "10\n0 32\n0 88\n-1 69\n-2 62\n-1 52\n0 16\n1 19\n-1 58\n0 38\n0 67\n", "9\n-41 -22\n95 53\n81 -61\n22 -74\n-79 38\n-56 -32\n000 -32\n-37 -94\n-59 -9\n", "5\n0 0\n1 1\n2 0\n3 6\n4 10\n", "5\n0 0\n1 1\n2 6\n3 8\n4 16\n", "1\n1 0\n", "3\n-1 0\n1 1\n2 0\n", "2\n0 0\n1 3\n", "10\n-52 25\n85 76\n97 88\n92 3\n-98 77\n53 90\n6 85\n-68 -38\n-74 -55\n-48 60\n", "25\n23 -54\n16 56\n-42 -51\n92 -58\n100 52\n57 -98\n-84 -28\n-71 12\n21 -82\n-3 -30\n72 94\n-66 96\n-50 -41\n-77 -41\n-42 -55\n-13 12\n-1 -99\n-50 -5\n65 -48\n-96 -80\n73 -92\n72 59\n53 -66\n-67 -75\n2 56\n", "33\n0 81\n20 -16\n-71 38\n-45 28\n-8 -40\n60 -49\n43 -10\n-40 19\n14 -50\n-95 8\n-21 85\n64 98\n-97 -82\n19 -83\n39 -99\n43 71\n67 43\n-54 57\n-7 24\n83 -76\n54 -88\n-43 -9\n-75 24\n74 32\n-68 -1\n71 73\n88 80\n52 67\n-64 21\n-85 97\n33 13\n41 -28\n0 74\n", "33\n21 -99\n11 85\n80 -77\n-31 59\n32 6\n24 -52\n-32 -47\n57 18\n76 -36\n96 -38\n-59 -12\n-98 -32\n-52 32\n-73 -87\n-51 -40\n34 -55\n69 46\n-81 -67\n-68 65\n60 -11\n-45 -41\n91 -21\n45 21\n-75 49\n58 65\n-20 55\n-24 29\n66 -71\n-25 50\n96 74\n-43 -47\n34 -86\n81 14\n", "62\n-53 -58\n29 89\n-92 15\n-91 -19\n96 23\n-1 -57\n-83 11\n56 -95\n-39 -47\n-75 77\n52 -95\n-13 -12\n-51 80\n32 -78\n94 94\n-51 81\n53 -28\n-83 -78\n76 -25\n91 -60\n-40 -27\n55 86\n-26 1\n-41 89\n61 -23\n81 31\n-21 82\n-12 47\n20 36\n-95 54\n-81 73\n-19 -83\n52 51\n-60 68\n-58 35\n60 -44\n-98 32\n-10 60\n88 -5\n78 -57\n-12 -43\n-83 36\n51 -63\n-89 -5\n-62 -42\n-29 78\n73 62\n-88 -55\n4 38\n88 -26\n-26 -89\n40 -26\n46 63\n74 -66\n-61 -61\n82 -53\n-75 -62\n-99 -52\n-15 30\n38 -52\n-83 -75\n-31 -38\n", "9\n-41 -22\n95 53\n81 -61\n15 -74\n-79 38\n-56 -32\n000 -32\n-37 -94\n-59 -9\n", "5\n0 0\n1 1\n2 0\n3 6\n4 9\n", "61\n37 -96\n36 -85\n30 -53\n-98 -40\n2 3\n-88 -69\n88 -26\n78 -69\n48 -3\n-25 66\n-93 -58\n-51 59\n21 -2\n65 29\n-3 35\n-98 46\n42 38\n0 -99\n46 84\n39 -48\n-15 81\n-15 51\n-77 74\n81 -58\n26 -35\n-14 20\n73 74\n-45 83\n90 22\n-8 53\n1 -66\n20 58\n39 -22\n60 -10\n52 22\n-46 6\n8 8\n14 9\n38 -45\n82 13\n43 4\n-25 21\n50 -16\n31 -12\n76 -13\n-82 -2\n-5 -56\n87 -31\n9 -36\n-100 92\n-10 39\n-16 2\n62 -39\n-36 60\n14 21\n-62 40\n98 43\n-54 66\n-34 46\n-47 -65\n21 44\n", "5\n0 0\n1 1\n2 6\n3 8\n2 16\n", "3\n0 1\n3 3\n1 2\n", "4\n-1 0\n2 1\n2 0\n2 2\n", "1\n1 -1\n", "3\n-1 0\n1 1\n1 0\n", "2\n0 1\n1 3\n", "10\n-52 25\n85 76\n99 88\n92 3\n-98 77\n53 90\n6 85\n-68 -38\n-74 -55\n-48 60\n", "25\n23 -54\n16 56\n-42 -51\n92 -58\n100 52\n57 -98\n-84 -28\n-71 12\n21 -82\n-3 -30\n72 94\n-12 96\n-50 -41\n-77 -41\n-42 -55\n-13 12\n-1 -99\n-50 -5\n65 -48\n-96 -80\n73 -92\n72 59\n53 -66\n-67 -75\n2 56\n", "33\n0 81\n20 -16\n-71 38\n-45 28\n-8 -40\n60 -49\n43 -10\n-40 19\n14 -50\n-95 8\n-21 85\n64 98\n-97 -82\n19 -83\n39 -99\n43 71\n67 43\n-54 57\n-7 24\n83 -55\n54 -88\n-43 -9\n-75 24\n74 32\n-68 -1\n71 73\n88 80\n52 67\n-64 21\n-85 97\n33 13\n41 -28\n0 74\n", "33\n21 -99\n11 85\n80 -77\n-31 59\n32 6\n24 -52\n-32 -47\n57 18\n76 -36\n96 -38\n-59 -12\n-98 -32\n-52 32\n-73 -87\n-51 -40\n34 -55\n69 46\n-81 -67\n-68 65\n60 -11\n-20 -41\n91 -21\n45 21\n-75 49\n58 65\n-20 55\n-24 29\n66 -71\n-25 50\n96 74\n-43 -47\n34 -86\n81 14\n", "5\n0 -1\n1 1\n2 3\n0 3\n4 4\n", "9\n-41 -22\n95 26\n81 -61\n15 -74\n-79 38\n-56 -32\n000 -32\n-37 -94\n-59 -9\n", "5\n0 -1\n1 1\n2 0\n3 6\n4 9\n", "20\n12 16\n19 3\n19 15\n20 3\n5 28\n8 3\n9 18\n2 15\n2 3\n16 8\n14 18\n16 20\n13 17\n0 15\n10 12\n10 6\n18 8\n6 1\n10 2\n0 6\n", "61\n37 -96\n36 -85\n30 -53\n-98 -40\n2 3\n-88 -69\n88 -26\n78 -69\n48 -3\n-25 66\n-93 -58\n-51 59\n21 -2\n65 29\n-3 35\n-98 46\n42 38\n0 -99\n46 84\n39 -48\n-15 81\n-15 51\n-77 74\n81 -58\n26 -35\n-14 20\n73 74\n-45 83\n90 22\n-8 53\n1 -66\n20 58\n39 -22\n60 -10\n52 22\n-46 6\n8 8\n14 9\n38 -45\n82 13\n43 4\n-25 21\n50 -16\n31 -12\n76 -13\n-82 -2\n-5 -56\n87 -31\n9 -36\n-100 92\n-10 5\n-16 2\n62 -39\n-36 60\n14 21\n-62 40\n98 43\n-54 66\n-34 46\n-47 -65\n21 44\n", "5\n0 0\n1 1\n2 6\n3 9\n2 16\n", "3\n2 1\n3 3\n2 2\n", "4\n-2 0\n2 1\n2 0\n2 2\n", "1\n2 -1\n", "2\n-1 1\n1 3\n", "10\n-70 25\n85 76\n99 88\n92 3\n-98 77\n53 90\n6 85\n-68 -38\n-74 -55\n-48 60\n", "25\n23 -54\n16 56\n-65 -51\n92 -58\n100 52\n57 -98\n-84 -28\n-71 12\n21 -82\n-3 -30\n72 94\n-12 96\n-50 -41\n-77 -41\n-42 -55\n-13 12\n-1 -99\n-50 -5\n65 -48\n-96 -80\n73 -92\n72 59\n53 -66\n-67 -75\n2 56\n", "33\n0 81\n20 -17\n-71 38\n-45 28\n-8 -40\n60 -49\n43 -10\n-40 19\n14 -50\n-95 8\n-21 85\n64 98\n-97 -82\n19 -83\n39 -99\n43 71\n67 43\n-54 57\n-7 24\n83 -55\n54 -88\n-43 -9\n-75 24\n74 32\n-68 -1\n71 73\n88 80\n52 67\n-64 21\n-85 97\n33 13\n41 -28\n0 74\n", "33\n21 -99\n11 85\n80 -77\n-31 59\n32 6\n24 -52\n-32 -47\n57 18\n76 -36\n96 -38\n-59 -12\n-98 -32\n-52 32\n-73 -87\n-39 -40\n34 -55\n69 46\n-81 -67\n-68 65\n60 -11\n-20 -41\n91 -21\n45 21\n-75 49\n58 65\n-20 55\n-24 29\n66 -71\n-25 50\n96 74\n-43 -47\n34 -86\n81 14\n", "5\n0 -1\n1 1\n1 3\n0 3\n4 4\n", "5\n0 -1\n2 1\n2 0\n3 6\n4 9\n", "20\n12 16\n19 3\n19 15\n20 3\n5 28\n8 3\n9 18\n2 15\n2 3\n16 8\n14 18\n16 20\n10 17\n0 15\n10 12\n10 6\n18 8\n6 1\n10 2\n0 6\n", "61\n37 -96\n36 -85\n30 -53\n-98 -40\n2 3\n-88 -69\n88 -26\n78 -69\n48 -3\n-25 66\n-93 -58\n-51 59\n21 -2\n65 29\n-3 35\n-98 46\n42 38\n0 -99\n46 84\n39 -48\n-15 81\n-15 51\n-77 74\n81 -58\n26 -35\n-14 20\n73 74\n-45 83\n90 22\n-8 53\n1 -66\n20 58\n39 -22\n60 -10\n52 22\n-46 6\n8 8\n14 9\n38 -45\n82 13\n43 4\n-25 21\n50 -16\n31 -12\n76 -13\n-82 -2\n-5 -56\n87 -31\n9 -36\n-100 92\n-10 5\n-16 3\n62 -39\n-36 60\n14 21\n-62 40\n98 43\n-54 66\n-34 46\n-47 -65\n21 44\n", "5\n0 0\n1 1\n2 6\n3 9\n2 14\n", "3\n2 1\n4 3\n2 2\n", "1\n2 0\n"], "output": ["9\n", "35985\n", "0\n", "1139\n", "120\n", "1176\n", "2299\n", "5456\n", "1103\n", "5455\n", "84\n", "4\n", "6\n", "37814\n", "10\n", "1128\n", "35986\n", "1\n", "3\n", "2304\n", "1108\n", "96\n", "8\n", "1129\n", "3385\n", "1099\n", "106\n", "37813\n", "4419\n", "1095\n", "109\n", "84\n", "10\n", "9\n", "0\n", "1\n", "0\n", "120\n", "2299\n", "5456\n", "5455\n", "37814\n", "84\n", "10\n", "35986\n", "10\n", "1\n", "3\n", "0\n", "1\n", "0\n", "120\n", "2299\n", "5456\n", "5456\n", "9\n", "84\n", "10\n", "1129\n", "35986\n", "9\n", "1\n", "3\n", "0\n", "0\n", "120\n", "2299\n", "5456\n", "5456\n", "10\n", "10\n", "1128\n", "35986\n", "9\n", "1\n", "0\n"]}, "short_description": "1. One-sentence summary:  \nCompute the number of unordered triplets of points that form non\u2010degenerate triangles by, for each point, grouping all other points by their normalized direction vectors and counting pairs that do not lie on the same line through that pivot.\n\n2. Core algorithmic approach:  \nUse an O(n\u00b2) sweep over each point as a pivot, hash all other points by their reduced (gcd\u2010normalized and half\u2010plane\u2010adjusted) direction vectors, then apply combinatorial counting (for each direction group of size c, pair it with the remaining (n\u22121\u2212c) points) to count triangles, finally dividing by 3 to correct for triple counting.\n\n3. Reusable components:  \n- Direction normalization via gcd: reduce a vector (dx, dy) to its primitive form and orient it into a consistent half-plane.  \n- Hash\u2010map grouping: count occurrences of identical keys (here, normalized direction vectors).  \n- Combinatorial pair counting over groups: given group sizes c\u2081, c\u2082, \u2026, use sums like \u2211 c\u1d62\u00b7(N \u2212 c\u1d62) and divide by symmetry factors to count distinct combinations."}
{"name": "659_D. Bicycle Race", "description": "Maria participates in a bicycle race.\n\nThe speedway takes place on the shores of Lake Lucerne, just repeating its contour. As you know, the lake shore consists only of straight sections, directed to the north, south, east or west.\n\nLet's introduce a system of coordinates, directing the Ox axis from west to east, and the Oy axis from south to north. As a starting position of the race the southernmost point of the track is selected (and if there are several such points, the most western among them). The participants start the race, moving to the north. At all straight sections of the track, the participants travel in one of the four directions (north, south, east or west) and change the direction of movement only in bends between the straight sections. The participants, of course, never turn back, that is, they do not change the direction of movement from north to south or from east to west (or vice versa).\n\nMaria is still young, so she does not feel confident at some turns. Namely, Maria feels insecure if at a failed or untimely turn, she gets into the water. In other words, Maria considers the turn dangerous if she immediately gets into the water if it is ignored.\n\nHelp Maria get ready for the competition \u2014 determine the number of dangerous turns on the track.\n\nInput\n\nThe first line of the input contains an integer n (4 \u2264 n \u2264 1000) \u2014 the number of straight sections of the track.\n\nThe following (n + 1)-th line contains pairs of integers (xi, yi) ( - 10 000 \u2264 xi, yi \u2264 10 000). The first of these points is the starting position. The i-th straight section of the track begins at the point (xi, yi) and ends at the point (xi + 1, yi + 1).\n\nIt is guaranteed that:\n\n  * the first straight section is directed to the north; \n  * the southernmost (and if there are several, then the most western of among them) point of the track is the first point; \n  * the last point coincides with the first one (i.e., the start position); \n  * any pair of straight sections of the track has no shared points (except for the neighboring ones, they share exactly one point); \n  * no pair of points (except for the first and last one) is the same; \n  * no two adjacent straight sections are directed in the same direction or in opposite directions. \n\nOutput\n\nPrint a single integer \u2014 the number of dangerous turns on the track.\n\nExamples\n\nInput\n\n6\n0 0\n0 1\n1 1\n1 2\n2 2\n2 0\n0 0\n\n\nOutput\n\n1\n\n\nInput\n\n16\n1 1\n1 5\n3 5\n3 7\n2 7\n2 9\n6 9\n6 7\n5 7\n5 3\n4 3\n4 4\n3 4\n3 2\n5 2\n5 1\n1 1\n\n\nOutput\n\n6\n\nNote\n\nThe first sample corresponds to the picture:\n\n<image>\n\nThe picture shows that you can get in the water under unfortunate circumstances only at turn at the point (1, 1). Thus, the answer is 1.", "solution": "read = lambda: map(int, input().split())   \nvect = lambda a, b: a[0] * b[1] - a[1] * b[0]\nvector = lambda A, B: (B[0] - A[0], B[1] - A[1])\nn = int(input())\np = [tuple(read()) for i in range(n)]\ncnt = 0\nfor i in range(2, n):\n    v1 = vector(p[i], p[i - 1])\n    v2 = vector(p[i - 1], p[i - 2])\n    if vect(v1, v2) < 0:\n        cnt += 1\nprint(cnt)\n", "difficulty": 10, "public_tests": {"input": ["16\n1 1\n1 5\n3 5\n3 7\n2 7\n2 9\n6 9\n6 7\n5 7\n5 3\n4 3\n4 4\n3 4\n3 2\n5 2\n5 1\n1 1\n", "6\n0 0\n0 1\n1 1\n1 2\n2 2\n2 0\n0 0\n"], "output": ["6\n", "1\n"]}, "private_tests": {"input": ["24\n-10000 -10000\n-10000 9998\n9998 9998\n9998 -10000\n-6364 -10000\n-6364 6362\n6362 6362\n6362 -6364\n-2728 -6364\n-2728 2726\n2726 2726\n2726 -910\n908 -910\n908 908\n-910 908\n-910 -4546\n4544 -4546\n4544 4544\n-4546 4544\n-4546 -8182\n8180 -8182\n8180 8180\n-8182 8180\n-8182 -10000\n-10000 -10000\n", "4\n0 0\n0 10000\n10000 10000\n10000 0\n0 0\n", "4\n-10000 -10000\n-10000 10000\n10000 10000\n10000 -10000\n-10000 -10000\n", "12\n-10000 -10000\n-10000 10000\n10000 10000\n10000 6000\n-6000 6000\n-6000 2000\n10000 2000\n10000 -2000\n-6000 -2000\n-6000 -6000\n10000 -6000\n10000 -10000\n-10000 -10000\n", "8\n-10000 -10000\n-10000 5000\n0 5000\n0 10000\n10000 10000\n10000 0\n0 0\n0 -10000\n-10000 -10000\n", "20\n-4286 -10000\n-4286 -7778\n-7143 -7778\n-7143 -3334\n-10000 -3334\n-10000 1110\n-4286 1110\n-4286 -3334\n4285 -3334\n4285 -1112\n7142 -1112\n7142 3332\n4285 3332\n4285 9998\n9999 9998\n9999 -3334\n7142 -3334\n7142 -5556\n-1429 -5556\n-1429 -10000\n-4286 -10000\n", "4\n6 8\n6 9\n7 9\n7 8\n6 8\n", "12\n-10000 -10000\n-10000 10000\n10000 10000\n10000 6000\n-9800 6000\n-9800 2000\n10000 2000\n10000 -2000\n-9800 -2000\n-9800 -6000\n10000 -6000\n10000 -10000\n-10000 -10000\n"], "output": ["10\n", "0\n", "0\n", "4\n", "2\n", "8\n", "0\n", "4\n"]}, "generated_tests": {"input": [], "output": []}, "short_description": "1. One-sentence summary:  \nGiven an ordered sequence of 2D points, the solution counts how many consecutive triples form a clockwise turn.\n\n2. Core algorithmic approach:  \nA single-pass sliding-window over triples of points with constant-time cross-product orientation checks (geometric orientation test).\n\n3. Reusable components:  \n- Vector subtraction function to form direction vectors between two points.  \n- 2D cross-product (determinant) function to determine the orientation (clockwise vs. counterclockwise).  \n- Sliding-window iteration pattern for processing consecutive k-tuples in a list."}
{"name": "13_B. Letter A", "description": "Little Petya learns how to write. The teacher gave pupils the task to write the letter A on the sheet of paper. It is required to check whether Petya really had written the letter A.\n\nYou are given three segments on the plane. They form the letter A if the following conditions hold:\n\n  * Two segments have common endpoint (lets call these segments first and second), while the third segment connects two points on the different segments. \n  * The angle between the first and the second segments is greater than 0 and do not exceed 90 degrees. \n  * The third segment divides each of the first two segments in proportion not less than 1 / 4 (i.e. the ratio of the length of the shortest part to the length of the longest part is not less than 1 / 4). \n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases to solve. Each case consists of three lines. Each of these three lines contains four space-separated integers \u2014 coordinates of the endpoints of one of the segments. All coordinates do not exceed 108 by absolute value. All segments have positive length.\n\nOutput\n\nOutput one line for each test case. Print \u00abYES\u00bb (without quotes), if the segments form the letter A and \u00abNO\u00bb otherwise.\n\nExamples\n\nInput\n\n3\n4 4 6 0\n4 1 5 2\n4 0 4 4\n0 0 0 6\n0 6 2 -4\n1 1 0 1\n0 0 0 5\n0 5 2 -1\n1 2 0 1\n\n\nOutput\n\nYES\nNO\nYES", "solution": "__author__ = 'Darren'\n\n\ndef solve():\n    t = int(input())\n    while t:\n        run()\n        t -= 1\n\n\ndef run():\n    def check_condition_1():\n        record = {}\n        common, first, second = None, -1, -1\n        found = False\n        for i in range(3):\n            for j in range(2):\n                if segments[i][j] in record:\n                    if found:\n                        return False\n                    found = True\n                    common = segments[i][j]\n                    first, second = record[segments[i][j]], i\n                else:\n                    record[segments[i][j]] = i\n        if not found:\n            return False\n\n        segments[0], segments[first] = segments[first], segments[0]\n        segments[1], segments[second] = segments[second], segments[1]\n        if common != segments[0][0]:\n            segments[0][0], segments[0][1] = segments[0][1], segments[0][0]\n        if common != segments[1][0]:\n            segments[1][0], segments[1][1] = segments[1][1], segments[1][0]\n\n        nonlocal vector1, vector2, vector3, vector4\n        vector1 = Vector2D(segments[0][0], segments[0][1])\n        vector2 = Vector2D(segments[1][0], segments[1][1])\n        vector3 = Vector2D(segments[0][0], segments[2][0])\n        vector4 = Vector2D(segments[1][0], segments[2][1])\n        if vector1.parallel(vector3):\n            return vector2.parallel(vector4)\n        else:\n            vector3 = Vector2D(segments[0][0], segments[2][1])\n            vector4 = Vector2D(segments[1][0], segments[2][0])\n            return vector1.parallel(vector3) and vector2.parallel(vector4)\n\n    def check_condition_2():\n        return vector1.acute_or_perpendicular(vector2)\n\n    def check_condition_3():\n        return (0.2 <= vector1.dot_product(vector3) / vector1.distance_square() <= 0.8 and\n                0.2 <= vector2.dot_product(vector4) / vector2.distance_square() <= 0.8)\n\n    segments = []\n    for _i in range(3):\n        temp = [int(x) for x in input().split()]\n        segments.append([(temp[0], temp[1]), (temp[2], temp[3])])\n    vector1, vector2, vector3, vector4 = None, None, None, None\n    if check_condition_1() and check_condition_2() and check_condition_3():\n        print('YES')\n    else:\n        print('NO')\n\n\nclass Vector2D:\n    def __init__(self, p1, p2):\n        self.x = p2[0] - p1[0]\n        self.y = p2[1] - p1[1]\n\n    def distance_square(self):\n        return self.x ** 2 + self.y ** 2\n\n    def __sub__(self, other):\n        return Vector2D(self.x - other.x, self.y - other.y)\n\n    def dot_product(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross_product(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def parallel(self, other):\n        return self.cross_product(other) == 0\n\n    def acute_or_perpendicular(self, other):\n        return self.dot_product(other) >= 0 and not self.parallel(other)\n\n\nif __name__ == '__main__':\n    solve()", "difficulty": 8, "public_tests": {"input": ["3\n4 4 6 0\n4 1 5 2\n4 0 4 4\n0 0 0 6\n0 6 2 -4\n1 1 0 1\n0 0 0 5\n0 5 2 -1\n1 2 0 1\n"], "output": ["YES\nNO\nYES\n"]}, "private_tests": {"input": [], "output": []}, "generated_tests": {"input": ["3\n4 4 6 0\n4 1 5 2\n4 0 4 4\n0 0 0 6\n0 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 4 6 -1\n4 1 5 2\n4 0 4 4\n0 0 0 6\n0 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 4 6 -1\n4 1 5 2\n4 0 4 4\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 4 6 -1\n4 1 5 2\n4 0 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 5 6 -1\n4 1 5 2\n4 0 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 -1 5\n0 2 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 -1 5\n0 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 6\n-1 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 -1 5\n0 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 6\n-1 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 -1 0\n0 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 9\n-1 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 -1 0\n0 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 9\n-1 0 0 6\n1 6 2 -4\n1 1 0 2\n0 0 -1 0\n0 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 9\n-1 0 0 6\n1 6 2 -4\n1 1 0 2\n0 0 -1 0\n1 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 -1 4 9\n-1 0 0 6\n1 6 2 -4\n1 1 0 2\n0 0 -1 0\n1 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n1 1 0 2\n0 0 -1 0\n1 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n1 1 -1 2\n0 0 -1 0\n1 0 2 -2\n1 2 0 1\n", "3\n4 3 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n1 1 -1 2\n0 0 -1 0\n1 0 2 -2\n1 2 0 1\n", "3\n4 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n1 1 -1 2\n0 0 -1 0\n1 0 2 -2\n1 2 0 1\n", "3\n4 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n1 1 -1 2\n0 0 -1 0\n1 0 2 -2\n1 2 -1 1\n", "3\n4 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n2 1 -1 2\n0 0 -1 0\n1 0 2 -2\n1 2 -1 1\n", "3\n4 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n2 1 -1 2\n0 0 -1 0\n2 0 2 -2\n1 2 -1 1\n", "3\n4 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n2 1 -1 3\n0 0 -1 0\n2 0 2 -2\n1 2 -1 1\n", "3\n4 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 5 2 -4\n2 1 -1 3\n0 0 -1 0\n2 0 2 -2\n1 2 -1 1\n", "3\n4 5 6 0\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 5 2 -4\n2 1 -1 3\n0 0 -1 0\n2 0 2 -2\n1 2 -1 1\n", "3\n6 5 6 0\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 5 2 -4\n2 1 -1 3\n0 0 -1 0\n2 0 2 -2\n1 2 -1 1\n", "3\n6 5 6 0\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 5 2 -4\n2 1 -1 3\n0 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n6 5 6 0\n4 1 5 2\n4 -1 3 9\n-1 0 0 0\n1 5 2 -4\n2 1 -1 3\n0 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n6 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 0\n1 5 2 -4\n2 1 -1 3\n0 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n6 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 0\n1 5 2 -4\n2 1 -1 3\n-1 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n6 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 0\n0 5 2 -4\n2 1 -1 3\n-1 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n3 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 0\n0 5 2 -4\n2 1 -1 3\n-1 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n3 5 6 -1\n4 1 5 2\n4 -2 3 9\n-1 0 0 0\n0 5 2 -4\n2 1 -1 3\n-1 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n3 5 6 -1\n4 1 5 2\n4 -2 3 9\n-1 1 0 0\n0 5 2 -4\n2 1 -1 3\n-1 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n3 5 4 -1\n4 1 5 2\n4 -2 3 9\n-1 1 0 0\n0 5 2 -4\n2 1 -1 3\n-1 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n3 5 6 -1\n4 1 5 2\n4 -2 3 9\n-1 2 0 0\n0 5 2 -4\n2 1 -1 3\n-1 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n3 5 6 -1\n4 1 5 2\n6 -2 3 9\n-1 2 0 0\n0 5 2 -4\n2 1 -1 3\n-1 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n3 5 6 -1\n4 1 7 2\n6 -2 3 9\n-1 2 0 0\n0 5 2 -4\n2 1 -1 3\n-1 0 -2 0\n2 0 2 -2\n1 2 -1 1\n", "3\n4 4 6 0\n4 1 5 2\n4 0 4 4\n0 0 0 6\n0 6 2 -4\n1 1 0 1\n0 0 0 10\n0 5 2 -1\n1 2 0 1\n", "3\n4 4 6 0\n4 1 5 2\n4 0 4 4\n0 0 0 6\n0 6 2 -4\n1 1 0 1\n0 1 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 4 6 -1\n4 1 5 2\n4 0 4 4\n0 0 0 6\n0 6 2 -4\n1 2 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 4 6 0\n4 1 5 2\n4 0 4 4\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 8 6 -1\n4 1 5 2\n4 0 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 5 6 -1\n4 1 9 2\n4 0 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 1 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -1\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 2 2\n4 0 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 0 5\n0 2 2 -2\n1 2 0 1\n", "3\n4 6 2 -1\n4 1 5 2\n4 0 4 6\n0 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 -1 5\n0 2 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n7 0 4 6\n-1 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 -1 5\n0 0 2 -2\n1 2 0 1\n", "3\n4 6 11 -1\n4 1 5 2\n4 0 4 6\n-1 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 -1 5\n0 0 2 -2\n1 2 0 1\n", "3\n8 6 6 -1\n4 1 5 2\n4 0 4 6\n-1 0 0 6\n1 6 2 -4\n1 1 0 1\n0 0 -1 0\n0 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 9\n-1 0 0 6\n1 12 2 -4\n1 1 0 1\n0 0 -1 0\n0 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 0 4 9\n-1 0 0 6\n1 6 2 -4\n1 1 0 2\n0 0 -1 0\n0 0 2 -2\n1 2 0 0\n", "3\n4 6 6 -1\n4 1 5 2\n4 -1 4 9\n-1 0 0 6\n1 6 2 -4\n1 1 0 4\n0 0 -1 0\n1 0 2 -2\n1 2 0 1\n", "3\n4 6 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 4 -4\n1 1 0 2\n0 0 -1 0\n1 0 2 -2\n1 2 0 1\n", "3\n7 6 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n1 1 -1 2\n0 0 -1 0\n1 0 2 -2\n1 2 0 1\n", "3\n4 3 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n1 1 -1 2\n0 0 -1 0\n1 0 0 -2\n1 2 0 1\n", "3\n4 5 6 -1\n4 1 5 2\n4 -1 3 9\n-1 0 0 6\n1 6 2 -4\n1 1 -1 2\n1 0 -1 0\n1 0 2 -2\n1 2 0 1\n"], "output": ["YES\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "YES\nNO\nNO\n", "YES\nNO\nNO\n", "NO\nNO\nNO\n", "YES\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n", "NO\nNO\nNO\n"]}, "short_description": "1. One-sentence summary:  \n   Determine whether three unordered line\u2010segments in the plane can be arranged around a common vertex so that they form two pairs of parallel sides with acute angles and with intersection points meeting specific proportionality constraints.\n\n2. Core algorithmic approach:  \n   A constant\u2010time geometric check using vector algebra\u2014specifically computing difference\u2010vectors for each segment, then using cross products for parallelism tests and dot products for angle (acute/perpendicular) and ratio checks.\n\n3. Reusable components:  \n   - A 2D vector class supporting subtraction, dot product, cross product, and squared\u2010length\u2014useful in any planar\u2010geometry or collision/shape test.  \n   - A routine to detect and reorder segments by a shared endpoint (\u201ccommon vertex detection and swap\u201d) so that further checks assume a canonical configuration.  \n   - Parallelism and angle predicates (parallel via zero cross product, acute/perpendicular via nonnegative dot product plus nonparallel test) that can be reused in many geometric\u2010validation tasks."}
{"name": "499_C. Crazy Town", "description": "Crazy Town is a plane on which there are n infinite line roads. Each road is defined by the equation aix + biy + ci = 0, where ai and bi are not both equal to the zero. The roads divide the plane into connected regions, possibly of infinite space. Let's call each such region a block. We define an intersection as the point where at least two different roads intersect.\n\nYour home is located in one of the blocks. Today you need to get to the University, also located in some block. In one step you can move from one block to another, if the length of their common border is nonzero (in particular, this means that if the blocks are adjacent to one intersection, but have no shared nonzero boundary segment, then it are not allowed to move from one to another one in one step).\n\nDetermine what is the minimum number of steps you have to perform to get to the block containing the university. It is guaranteed that neither your home nor the university is located on the road.\n\nInput\n\nThe first line contains two space-separated integers x1, y1 ( - 106 \u2264 x1, y1 \u2264 106) \u2014 the coordinates of your home.\n\nThe second line contains two integers separated by a space x2, y2 ( - 106 \u2264 x2, y2 \u2264 106) \u2014 the coordinates of the university you are studying at.\n\nThe third line contains an integer n (1 \u2264 n \u2264 300) \u2014 the number of roads in the city. The following n lines contain 3 space-separated integers ( - 106 \u2264 ai, bi, ci \u2264 106; |ai| + |bi| > 0) \u2014 the coefficients of the line aix + biy + ci = 0, defining the i-th road. It is guaranteed that no two roads are the same. In addition, neither your home nor the university lie on the road (i.e. they do not belong to any one of the lines).\n\nOutput\n\nOutput the answer to the problem.\n\nExamples\n\nInput\n\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n\n\nOutput\n\n2\n\n\nInput\n\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n\n\nOutput\n\n2\n\nNote\n\nPictures to the samples are presented below (A is the point representing the house; B is the point representing the university, different blocks are filled with different colors):\n\n<image> <image>", "solution": "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nn = int(input())\narr = []\nfor _ in range(n):\n\ta, b, c = map(int, input().split())\n\tarr.append((a,b,c))\nres = 0\nfor i in arr:\n\ta, b, c = i\n\tif(b != 0):\n\t\ty00 = -c/b\n\t\ty01 = -(a+c)/b\n\t\ts1 = x1*(y01-y00)-(y1-y00)\n\t\ts2 = x2*(y01-y00)-(y2-y00)\n\t\tif(s1<0<s2 or s1>0>s2):\n\t\t\tres += 1\n\telse:\n\t\tx = -c/a\n\t\tif(x1<x<x2 or x1>x>x2):\n\t\t\tres += 1\nprint(res)", "difficulty": 9, "public_tests": {"input": ["1 1\n-1 -1\n2\n0 1 0\n1 0 0\n", "1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n"], "output": ["2", "2"]}, "private_tests": {"input": ["841746 527518\n595261 331297\n10\n-946901 129987 670374\n-140388 -684770 309555\n-302589 415564 -387435\n-565799 -72069 -395358\n-523453 -511446 854898\n-846967 -749453 -341866\n-622388 434663 264157\n-638453 625357 344195\n-255265 -676356 -772398\n-824723 -319141 33585\n", "0 1\n2 2\n1\n1 1 2\n", "0 0\n0 1\n1\n0 2 2\n", "454379 373644\n-665078 -385892\n2\n-530 -468 -379786\n-173 -275 -100376\n", "-632 -387435\n942 798117\n10\n249 0 135705\n536 0 271752\n750 0 375750\n799 0 -206142\n1102 0 -437494\n-453 0 197055\n-581 0 260288\n-322 0 161322\n1317 0 -878439\n-811 0 594463\n", "0 0\n0 1\n1\n1 0 10000\n", "0 0\n0 2\n4\n1 0 1\n1 0 -1\n-2 0 1\n0 1 -1\n", "527189 -306471\n-998939 648838\n1\n-950717 -549267 -820616\n", "454379 373644\n-665078 -385892\n2\n-984641 503905 -909460\n-767954 -468772 -942522\n", "10 18\n10 0\n2\n1 -1 0\n0 1 -5\n", "-537 648838\n227 -51454\n1\n678 0 235266\n", "3 4\n2 6\n1\n0 -2 5\n", "-589794 344286\n532652 -230711\n5\n-2919 -179425 -546698\n-465880 342737 794428\n-230739 -687865 713836\n-932054 513357 -97639\n-559361 -75096 -581568\n", "1 0\n2 0\n1\n1 0 0\n", "100000 100000\n-100000 100000\n1\n10000 0 7\n", "5 0\n15 0\n1\n10 0 -100\n", "841746 527518\n595261 331297\n10\n936 -209 -790797\n898 1240 -36994\n759 285 -413562\n174 323 34281\n662 400 -284846\n298 520 42086\n-36 -27 12861\n462 631 -22515\n-499 1105 919372\n582 1490 319884\n", "1 -4\n1 5\n1\n0 1 0\n", "0 1\n1000000 1\n1\n1000000 1 0\n", "1 3\n1 1\n1\n1 1 3\n", "0 2\n-2 0\n2\n2 3 -1\n4 0 3\n", "-867 -465880\n793 -581568\n5\n73 0 57743\n-818 0 -635586\n-804 0 -415668\n-383 0 -52854\n1258 0 155992\n", "0 0\n0 2\n1\n0 1 -1\n", "-940 -984641\n403 -942522\n2\n530 0 -63600\n-439 0 95263\n", "1 1\n3 3\n1\n1 0 2\n", "10 10\n8 8\n1\n1 1 19\n", "1 1\n-1 -1\n1\n1 1 0\n", "1 0\n1 2\n1\n0 1 -1\n"], "output": ["0", "0", "0", "2", "10", "0", "1", "1", "2", "2", "1", "0", "5", "0", "1", "1", "0", "1", "0", "0", "2", "5", "1", "2", "0", "0", "1", "1"]}, "generated_tests": {"input": ["841746 527518\n595261 331297\n10\n-946901 129987 670374\n-140388 -684770 309555\n-302589 415564 -387435\n-777580 -72069 -395358\n-523453 -511446 854898\n-846967 -749453 -341866\n-622388 434663 264157\n-638453 625357 344195\n-255265 -676356 -772398\n-824723 -319141 33585\n", "454379 180487\n-665078 -385892\n2\n-530 -468 -379786\n-173 -275 -100376\n", "-632 -387435\n942 798117\n10\n249 0 135705\n536 0 271752\n750 0 375750\n799 0 -206142\n1102 0 -437494\n-802 0 197055\n-581 0 260288\n-322 0 161322\n1317 0 -878439\n-811 0 594463\n", "0 0\n0 2\n4\n1 0 1\n1 0 -1\n-2 0 1\n1 1 -1\n", "-589794 344286\n532652 -230711\n5\n-2919 -179425 -546698\n-465880 342737 1276739\n-230739 -687865 713836\n-932054 513357 -97639\n-559361 -75096 -581568\n", "0 1\n2 2\n1\n1 1 3\n", "0 0\n0 0\n1\n0 2 2\n", "0 0\n1 1\n1\n1 0 10000\n", "527189 -306471\n-998939 1254628\n1\n-950717 -549267 -820616\n", "454379 676993\n-665078 -385892\n2\n-984641 503905 -909460\n-767954 -468772 -942522\n", "10 18\n1 0\n2\n1 -1 0\n0 1 -5\n", "-537 648838\n148 -51454\n1\n678 0 235266\n", "5 4\n2 6\n1\n0 -2 5\n", "1 -1\n2 0\n1\n1 0 0\n", "100000 100010\n-100000 100000\n1\n10000 0 7\n", "5 1\n15 0\n1\n10 0 -100\n", "841746 527518\n595261 331297\n10\n936 -209 -790797\n898 1240 -36994\n759 285 -413562\n174 323 34281\n662 400 -284846\n298 520 42086\n-36 -27 12861\n462 631 -22515\n-499 1105 919372\n582 1490 267865\n", "0 1\n1000000 2\n1\n1000000 1 0\n", "1 5\n1 1\n1\n1 1 3\n", "0 3\n-2 0\n2\n2 3 -1\n4 0 3\n", "-867 -465880\n177 -581568\n5\n73 0 57743\n-818 0 -635586\n-804 0 -415668\n-383 0 -52854\n1258 0 155992\n", "1 0\n0 2\n1\n0 1 -1\n", "-940 -984641\n652 -942522\n2\n530 0 -63600\n-439 0 95263\n", "1 1\n3 4\n1\n1 0 2\n", "10 9\n8 8\n1\n1 1 19\n", "1 1\n-1 0\n1\n1 1 0\n", "1 0\n1 3\n1\n0 1 -1\n", "841746 527518\n595261 331297\n10\n-946901 129987 670374\n-140388 -684770 309555\n-302589 415564 -387435\n-777580 -72069 -395358\n-523453 -511446 854898\n-846967 -749453 -341866\n-1178673 434663 264157\n-638453 625357 344195\n-255265 -676356 -772398\n-824723 -319141 33585\n", "0 0\n2 2\n1\n1 1 3\n", "0 0\n1 0\n1\n0 2 2\n", "527189 -217236\n-998939 1254628\n1\n-950717 -549267 -820616\n", "454379 676993\n-665078 -385892\n1\n-984641 503905 -909460\n-767954 -468772 -942522\n", "10 18\n1 0\n2\n1 -1 0\n0 2 -5\n", "-537 648838\n148 -51454\n1\n678 -1 235266\n", "5 4\n2 6\n0\n0 -2 5\n", "-589794 344286\n532652 -230711\n5\n-2919 -179425 -546698\n-465880 342737 1276739\n-230739 -687865 713836\n-932054 513357 -97639\n-559361 -75096 -970381\n", "1 -1\n2 -1\n1\n1 0 0\n", "100000 101010\n-100000 100000\n1\n10000 0 7\n", "5 1\n15 0\n1\n10 0 -103\n", "841746 527518\n595261 331297\n10\n936 -209 -790797\n898 1240 -36994\n759 285 -413562\n174 323 34281\n662 400 -284846\n298 520 42086\n-36 -29 12861\n462 631 -22515\n-499 1105 919372\n582 1490 267865\n", "0 1\n1000000 2\n1\n1000000 2 0\n", "1 5\n1 1\n1\n1 0 3\n", "0 3\n0 0\n2\n2 3 -1\n4 0 3\n", "-867 -465880\n177 -581568\n5\n73 0 57743\n-1542 0 -635586\n-804 0 -415668\n-383 0 -52854\n1258 0 155992\n", "1 1\n3 4\n1\n1 0 3\n", "10 9\n8 7\n1\n1 1 19\n", "0 1\n-1 0\n1\n1 1 0\n", "841746 527518\n595261 331297\n10\n-601562 129987 670374\n-140388 -684770 309555\n-302589 415564 -387435\n-777580 -72069 -395358\n-523453 -511446 854898\n-846967 -749453 -341866\n-1178673 434663 264157\n-638453 625357 344195\n-255265 -676356 -772398\n-824723 -319141 33585\n", "-1 0\n2 2\n1\n1 1 3\n", "-1 0\n1 0\n1\n0 2 2\n", "534980 -217236\n-998939 1254628\n1\n-950717 -549267 -820616\n", "454379 676993\n-665078 -385892\n1\n-984641 503905 -909460\n-767954 -612799 -942522\n", "10 18\n1 0\n2\n1 -1 0\n0 2 -3\n", "-159 648838\n148 -51454\n1\n678 -1 235266\n", "5 4\n2 6\n0\n0 -2 8\n", "-589794 344286\n532652 -230711\n5\n-2919 -179425 -546698\n-465880 342737 1276739\n-230739 -687865 713836\n-932054 615039 -97639\n-559361 -75096 -970381\n", "1 -1\n2 -1\n1\n1 0 1\n", "100000 101010\n-100000 100000\n1\n10000 0 4\n", "5 2\n15 0\n1\n10 0 -103\n", "841746 527518\n595261 493347\n10\n936 -209 -790797\n898 1240 -36994\n759 285 -413562\n174 323 34281\n662 400 -284846\n298 520 42086\n-36 -29 12861\n462 631 -22515\n-499 1105 919372\n582 1490 267865\n", "0 1\n1000000 2\n1\n1000100 2 0\n", "0 3\n1 0\n2\n2 3 -1\n4 0 3\n", "-867 -465880\n177 -581568\n5\n73 0 57743\n-1979 0 -635586\n-804 0 -415668\n-383 0 -52854\n1258 0 155992\n", "1 1\n2 4\n1\n1 0 3\n", "10 18\n8 7\n1\n1 1 19\n", "841746 527518\n466333 331297\n10\n-601562 129987 670374\n-140388 -684770 309555\n-302589 415564 -387435\n-777580 -72069 -395358\n-523453 -511446 854898\n-846967 -749453 -341866\n-1178673 434663 264157\n-638453 625357 344195\n-255265 -676356 -772398\n-824723 -319141 33585\n", "-2 0\n2 2\n1\n1 1 3\n", "-1 0\n1 0\n1\n0 2 3\n", "436744 -217236\n-998939 1254628\n1\n-950717 -549267 -820616\n", "454379 676993\n-665078 -385892\n1\n-984641 503905 -909460\n-1413861 -612799 -942522\n", "10 21\n1 0\n2\n1 -1 0\n0 2 -3\n", "-159 1258000\n148 -51454\n1\n678 -1 235266\n"], "output": ["0\n", "2\n", "10\n", "1\n", "5\n", "0\n", "0\n", "0\n", "1\n", "2\n", "2\n", "1\n", "0\n", "0\n", "1\n", "1\n", "0\n", "0\n", "0\n", "2\n", "5\n", "1\n", "2\n", "0\n", "0\n", "1\n", "1\n", "0\n", "0\n", "0\n", "1\n", "1\n", "2\n", "1\n", "0\n", "5\n", "0\n", "1\n", "1\n", "0\n", "0\n", "0\n", "1\n", "5\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "1\n", "1\n", "2\n", "1\n", "0\n", "5\n", "0\n", "1\n", "1\n", "0\n", "0\n", "0\n", "5\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "1\n", "2\n", "1\n"]}, "short_description": "1. One-sentence summary  \n   Given two points and a list of infinite lines (each in ax+by+c=0 form), count how many of those lines strictly separate the two points (i.e. the points lie in opposite open half-planes).\n\n2. Core algorithmic approach  \n   A single pass (O(n)) geometric half-plane test: for each line compute the signed values at each point and check if they have opposite signs (treating the vertical line case separately to avoid division by zero).\n\n3. Reusable components  \n   - A \u201csigned-distance\u201d evaluator: f(a,b,c, x,y) = a\u00b7x + b\u00b7y + c, to test which side of a line a point lies on.  \n   - A generic \u201cstrict separation\u201d checker that takes two signed values and returns true if they have opposite signs (e.g. s1<0<s2 or s2<0<s1).  \n   - A small utility for robustly handling vertical-line special cases (b=0) when converting an implicit line to an x-intercept or y-intercept."}
{"name": "886_F. Symmetric Projections", "description": "You are given a set of n points on the plane. A line containing the origin is called good, if projection of the given set to this line forms a symmetric multiset of points. Find the total number of good lines.\n\nMultiset is a set where equal elements are allowed.\n\nMultiset is called symmetric, if there is a point P on the plane such that the multiset is [centrally symmetric](https://en.wikipedia.org/wiki/Point_reflection) in respect of point P.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2000) \u2014 the number of points in the set.\n\nEach of the next n lines contains two integers xi and yi ( - 106 \u2264 xi, yi \u2264 106) \u2014 the coordinates of the points. It is guaranteed that no two points coincide.\n\nOutput\n\nIf there are infinitely many good lines, print -1.\n\nOtherwise, print single integer \u2014 the number of good lines.\n\nExamples\n\nInput\n\n3\n1 2\n2 1\n3 3\n\n\nOutput\n\n3\n\n\nInput\n\n2\n4 3\n1 2\n\n\nOutput\n\n-1\n\nNote\n\nPicture to the first sample test:\n\n<image>\n\nIn the second sample, any line containing the origin is good.", "solution": "from fractions import Fraction\nimport time\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def to_tuple(self):\n        return (self.x, self.y)\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other):\n        return self.to_tuple() == other.to_tuple()\n\n    def __hash__(self):\n        return hash(self.to_tuple())\n\n    def __neg__(self):\n        return Point(-self.x, -self.y)\n\n    def __add__(self, other):\n        return Point(self.x+other.x, self.y+other.y)\n\n    def __sub__(self, other):\n        return self+(-other)\n\n    def scalar_mul(self, mu):\n        return Point(mu*self.x, mu*self.y)\n\n    def int_divide(self, den):\n        return Point(self.x//den, self.y//den)\n\n\nclass Line:\n    def __init__(self, a, b, c):\n        # ax+by+c=0\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return \"{}*x + {}*y + {} = 0\".format(self.a, self.b, self.c)\n\n    @classmethod\n    def between_two_points(cls, P, Q):\n        return cls(P.y-Q.y, Q.x-P.x, P.x*Q.y-P.y*Q.x)\n\n    def evaluate(self, P):\n        return self.a*P.x+self.b*P.y+self.c\n\n    def direction(self):\n        if self.a == 0:\n            return (0, 1)\n        return (1, Fraction(self.b, self.a))\n\n\ndef abs_sgn(x):\n    if x == 0:\n        return 0, 0\n    if x < 0:\n        return -x, -1\n    return x, 1\n\n\ndef solve(tuple_points):\n    points = set()\n    center = Point(0, 0)\n    for cur in tuple_points:\n        cur = Point(*cur).scalar_mul(2*n)\n        center += cur\n        points.add(cur)\n\n    center = center.int_divide(n)\n    dcenter = center+center\n\n    sym_points_set = set()\n    for p in points:\n        sym_points_set.add(dcenter-p)\n    nosym = list(points - sym_points_set)\n\n    if len(nosym) == 0:\n        print(-1)\n        exit(0)\n\n    p0 = nosym[0]\n    good_lines = set()\n    for p in nosym:\n        m = (p+p0).int_divide(2)\n        line = Line.between_two_points(m, center)\n        distances = list(map(line.evaluate, nosym))\n\n        ok = True\n        mydict = {}\n        for dd in distances:\n            dda, sgn = abs_sgn(dd)\n            if dda not in mydict:\n                mydict[dda] = sgn\n            else:\n                mydict[dda] += sgn\n        for k in mydict:\n            if mydict[k] != 0:\n                ok = False\n                break\n        if ok:\n            good_lines.add(line.direction())\n\n    return len(good_lines)\n\n\n# This one is accepted on CF\nif __name__ == \"__main__\":\n    n = int(input())\n    pts = []\n    for i in range(n):\n        row = input().split(\" \")\n        cur = (int(row[0]), int(row[1]))\n        pts.append(cur)\n    print(solve(pts))\n", "difficulty": 12, "public_tests": {"input": ["3\n1 2\n2 1\n3 3\n", "2\n4 3\n1 2\n"], "output": ["3\n", "-1\n"]}, "private_tests": {"input": ["20\n12 -3\n-18 -24\n-13 7\n17 -23\n15 11\n-17 5\n0 -26\n18 10\n12 -18\n-14 -26\n-20 -24\n16 4\n-19 -21\n-14 -11\n-15 -19\n-18 12\n16 10\n-2 12\n11 9\n13 -25\n", "8\n-10000 4285\n-7143 -10000\n-4286 -1429\n-1429 -7143\n1428 1428\n4285 9999\n7142 7142\n9999 -4286\n", "7\n14 -3\n2 -13\n12 -1\n10 -7\n8 -11\n4 -9\n6 -5\n", "6\n-10 -10\n-10 10\n10 10\n10 -10\n10 11\n10 -11\n", "10\n-1000000 -777778\n-777778 555554\n-555556 333332\n-333334 111110\n-111112 999998\n111110 -333334\n333332 -1000000\n555554 -555556\n777776 -111112\n999998 777776\n", "6\n0 4\n1 5\n2 1\n3 2\n4 3\n5 0\n", "6\n-100000 100000\n-60000 -20000\n-20000 20000\n20000 60000\n60000 -100000\n100000 -60000\n", "32\n16 37\n-26 41\n5 -6\n12 -5\n17 -30\n-31 -14\n-35 4\n-23 -20\n17 -20\n-25 34\n-33 40\n-32 33\n15 24\n22 -25\n-30 -21\n13 -12\n6 -13\n6 37\n-40 -1\n22 25\n16 17\n-16 21\n11 42\n11 32\n-26 21\n-35 -6\n12 -25\n23 18\n-21 16\n-24 -13\n-21 26\n-30 -1\n", "1\n5 2\n", "24\n-1 -7\n-37 -45\n-1 -97\n-37 -25\n9 -107\n-47 -85\n-73 -43\n-73 -63\n9 -87\n-63 -3\n-47 -35\n-47 -15\n15 -39\n-11 -87\n-63 -73\n-17 -65\n-1 -77\n9 -17\n-53 -63\n-1 -27\n-63 -53\n-57 -25\n-11 3\n-11 -17\n", "5\n-1000000 -500000\n-500000 0\n0 500000\n500000 1000000\n1000000 -1000000\n", "10\n-84 -60\n-41 -100\n8 -8\n-52 -62\n-61 -76\n-52 -52\n14 -11\n-2 -54\n46 8\n26 -17\n", "9\n-1000000 -500000\n-750000 250000\n-500000 1000000\n-250000 -250000\n0 -1000000\n250000 750000\n500000 0\n750000 -750000\n1000000 500000\n", "10\n9 6\n8 1\n-10 13\n-11 8\n-1 6\n0 8\n-2 7\n-1 7\n1 17\n-3 -3\n", "10\n-7 6\n-16 11\n-9 -5\n3 4\n-8 12\n-17 6\n2 -1\n-5 15\n-7 4\n-6 -2\n", "4\n2 4\n1 2\n0 0\n-2 -4\n", "8\n11 -3\n12 -5\n10 -6\n9 -4\n8 -8\n6 -7\n7 -10\n5 -9\n", "10\n-8 11\n1 10\n2 10\n2 11\n0 9\n3 12\n-7 16\n11 4\n4 8\n12 9\n", "50\n-38 -107\n-34 -75\n-200 -143\n-222 -139\n-34 55\n-102 -79\n48 -99\n2 -237\n-118 -167\n-56 -41\n10 17\n68 -89\n-32 41\n-100 -93\n84 -1\n86 -15\n46 -145\n-58 -117\n8 31\n-36 -61\n-12 21\n-116 79\n88 -205\n70 -103\n-78 -37\n106 -5\n-96 -201\n-60 -103\n-54 45\n-138 -177\n-178 -47\n-154 -5\n-138 83\n44 -131\n-76 -191\n-176 -61\n-14 -65\n-210 53\n-116 -181\n-74 -205\n-174 -15\n0 -223\n-136 69\n-198 -57\n-76 -51\n-152 -19\n-80 -83\n22 -227\n24 -141\n-220 -153\n", "10\n0 5\n1 0\n2 3\n3 2\n4 6\n5 9\n6 1\n7 8\n8 4\n9 7\n"], "output": ["5\n", "5\n", "5\n", "1\n", "3\n", "5\n", "5\n", "3\n", "-1\n", "2\n", "3\n", "0\n", "5\n", "3\n", "-1\n", "1\n", "4\n", "3\n", "7\n", "5\n"]}, "generated_tests": {"input": ["20\n12 -3\n-18 -24\n-13 7\n17 -23\n15 11\n-17 5\n0 -26\n18 10\n12 -18\n-14 -26\n-20 -24\n16 4\n-19 -21\n-14 -11\n-15 -19\n-18 12\n16 10\n-4 12\n11 9\n13 -25\n", "6\n-10 -10\n-10 10\n10 8\n10 -10\n10 11\n10 -11\n", "6\n-100000 100000\n-60000 -25814\n-20000 20000\n20000 60000\n60000 -100000\n100000 -60000\n", "1\n5 3\n", "8\n-10000 4285\n-7143 -10000\n-4286 -1429\n-1429 -7143\n1428 1428\n4285 9999\n7142 7142\n9999 -204\n", "7\n14 -3\n2 -13\n1 -1\n10 -7\n8 -11\n4 -9\n6 -5\n", "6\n0 4\n1 9\n2 1\n3 2\n4 3\n5 0\n", "32\n16 37\n-26 41\n5 -6\n12 -5\n17 -30\n-31 -14\n-35 4\n-23 -20\n17 -20\n-25 34\n-33 40\n-32 33\n15 24\n23 -25\n-30 -21\n13 -12\n6 -13\n6 37\n-40 -1\n22 25\n16 17\n-16 21\n11 42\n11 32\n-26 21\n-35 -6\n12 -25\n23 18\n-21 16\n-24 -13\n-21 26\n-30 -1\n", "24\n-1 -7\n-37 -45\n-1 -97\n-37 -25\n9 -107\n-47 -85\n-73 -43\n-73 -63\n9 -87\n-63 -3\n-47 -35\n-47 -15\n15 -39\n-11 -87\n-107 -73\n-17 -65\n-1 -77\n9 -17\n-53 -63\n-1 -27\n-63 -53\n-57 -25\n-11 3\n-11 -17\n", "5\n-1000000 -844201\n-500000 0\n0 500000\n500000 1000000\n1000000 -1000000\n", "10\n-84 -60\n-41 -100\n8 -8\n-52 -62\n-61 -76\n-52 -52\n14 -11\n-2 -54\n46 8\n26 -21\n", "10\n9 6\n8 1\n-10 13\n-11 8\n-1 6\n0 8\n-2 8\n-1 7\n1 17\n-3 -3\n", "10\n-7 6\n-16 11\n-9 -5\n3 4\n-8 12\n-17 6\n2 -1\n0 15\n-7 4\n-6 -2\n", "10\n-8 11\n1 10\n2 10\n2 11\n0 9\n1 12\n-7 16\n11 4\n4 8\n12 9\n", "50\n-38 -107\n-34 -75\n-200 -143\n-222 -139\n-34 55\n-102 -79\n48 -99\n2 -237\n-118 -167\n-56 -41\n10 17\n68 -89\n-32 41\n-100 -93\n84 -1\n86 -15\n46 -145\n-101 -117\n8 31\n-36 -61\n-12 21\n-116 79\n88 -205\n70 -103\n-78 -37\n106 -5\n-96 -201\n-60 -103\n-54 45\n-138 -177\n-178 -47\n-154 -5\n-138 83\n44 -131\n-76 -191\n-176 -61\n-14 -65\n-210 53\n-116 -181\n-74 -205\n-174 -15\n0 -223\n-136 69\n-198 -57\n-76 -51\n-152 -19\n-80 -83\n22 -227\n24 -141\n-220 -153\n", "10\n0 5\n1 0\n2 3\n3 2\n4 6\n5 9\n6 1\n7 8\n8 3\n9 7\n", "2\n4 5\n1 2\n", "20\n12 -3\n-27 -24\n-13 7\n17 -23\n15 11\n-17 5\n0 -26\n18 10\n12 -18\n-14 -26\n-20 -24\n16 4\n-19 -21\n-14 -11\n-15 -19\n-18 12\n16 10\n-4 12\n11 9\n13 -25\n", "8\n-10000 4285\n-7143 -10000\n-4286 -1429\n-410 -7143\n1428 1428\n4285 9999\n7142 7142\n9999 -204\n", "7\n14 -3\n2 -13\n1 -1\n10 -11\n8 -11\n4 -9\n6 -5\n", "6\n-10 -10\n-10 10\n10 8\n10 -10\n10 20\n10 -11\n", "6\n-100000 100000\n-60000 -25814\n-32165 20000\n20000 60000\n60000 -100000\n100000 -60000\n", "32\n16 37\n-26 41\n5 -6\n12 -5\n17 -30\n-31 -14\n-35 4\n-23 -20\n17 -20\n-25 34\n-33 40\n-32 12\n15 24\n23 -25\n-30 -21\n13 -12\n6 -13\n6 37\n-40 -1\n22 25\n16 17\n-16 21\n11 42\n11 32\n-26 21\n-35 -6\n12 -25\n23 18\n-21 16\n-24 -13\n-21 26\n-30 -1\n", "1\n3 2\n", "24\n-1 -7\n-37 -45\n-1 -97\n-37 -25\n9 -107\n-47 -85\n-73 -43\n-73 -63\n9 -87\n-63 -3\n-47 -35\n-47 -15\n15 -39\n-11 -87\n-107 -73\n-17 -65\n-1 -77\n9 -11\n-53 -63\n-1 -27\n-63 -53\n-57 -25\n-11 3\n-11 -17\n", "5\n-1000000 -844201\n-500000 0\n0 500000\n947989 1000000\n1000000 -1000000\n", "10\n-84 -60\n-41 -100\n8 -8\n-52 -62\n-61 -76\n-52 -52\n14 -11\n-2 -49\n46 8\n26 -21\n", "10\n9 6\n8 1\n-10 13\n-11 7\n-1 6\n0 8\n-2 8\n-1 7\n1 17\n-3 -3\n", "10\n-7 6\n-16 11\n-9 -5\n3 4\n-8 12\n-17 9\n2 -1\n0 15\n-7 4\n-6 -2\n", "10\n-8 11\n1 10\n2 10\n2 11\n0 9\n1 12\n-7 16\n11 4\n8 8\n12 9\n", "50\n-38 -107\n-34 -75\n-200 -143\n-222 -139\n-34 42\n-102 -79\n48 -99\n2 -237\n-118 -167\n-56 -41\n10 17\n68 -89\n-32 41\n-100 -93\n84 -1\n86 -15\n46 -145\n-101 -117\n8 31\n-36 -61\n-12 21\n-116 79\n88 -205\n70 -103\n-78 -37\n106 -5\n-96 -201\n-60 -103\n-54 45\n-138 -177\n-178 -47\n-154 -5\n-138 83\n44 -131\n-76 -191\n-176 -61\n-14 -65\n-210 53\n-116 -181\n-74 -205\n-174 -15\n0 -223\n-136 69\n-198 -57\n-76 -51\n-152 -19\n-80 -83\n22 -227\n24 -141\n-220 -153\n", "10\n0 5\n1 0\n2 3\n3 2\n4 6\n5 9\n10 1\n7 8\n8 3\n9 7\n", "2\n0 5\n1 2\n", "20\n12 -3\n-27 -24\n-13 7\n17 -23\n15 11\n-17 5\n0 -26\n18 10\n12 -18\n-14 -26\n-20 -24\n16 4\n-19 -21\n-14 -11\n-15 -19\n-18 12\n16 10\n-4 12\n11 11\n13 -25\n", "8\n-10000 4285\n-7143 -10000\n-4286 -1429\n-410 -7143\n1428 1428\n4285 9999\n2821 7142\n9999 -204\n", "7\n14 -3\n2 -13\n1 -1\n10 -11\n8 -11\n6 -9\n6 -5\n", "6\n-10 -10\n-10 10\n10 8\n10 -9\n10 20\n10 -11\n", "6\n-100000 100000\n-60000 -25814\n-32165 20000\n20000 60000\n60000 -136907\n100000 -60000\n", "32\n16 37\n-26 41\n5 -6\n12 -5\n17 -30\n-31 -14\n-35 4\n-23 -20\n17 -20\n-25 34\n-33 40\n-32 12\n15 24\n23 -25\n-30 -21\n13 -12\n6 -13\n6 37\n-40 -1\n22 25\n16 17\n-16 21\n11 42\n11 32\n-26 21\n-35 -6\n12 -25\n23 18\n-21 27\n-24 -13\n-21 26\n-30 -1\n", "1\n3 4\n", "24\n-1 -7\n-37 -45\n-1 -97\n-37 -25\n9 -107\n-94 -85\n-73 -43\n-73 -63\n9 -87\n-63 -3\n-47 -35\n-47 -15\n15 -39\n-11 -87\n-107 -73\n-17 -65\n-1 -77\n9 -11\n-53 -63\n-1 -27\n-63 -53\n-57 -25\n-11 3\n-11 -17\n", "5\n-1000000 -844201\n-500000 0\n-1 500000\n947989 1000000\n1000000 -1000000\n", "10\n-84 -60\n-41 -100\n8 -8\n-52 -62\n-61 -76\n-52 -52\n14 -4\n-2 -49\n46 8\n26 -21\n", "10\n9 6\n8 1\n-10 13\n-11 7\n-1 6\n-1 8\n-2 8\n-1 7\n1 17\n-3 -3\n", "10\n-7 6\n-16 11\n-9 -5\n3 3\n-8 12\n-17 9\n2 -1\n0 15\n-7 4\n-6 -2\n", "10\n-8 11\n1 10\n2 10\n2 11\n0 9\n1 12\n-7 21\n11 4\n8 8\n12 9\n", "50\n-38 -107\n-34 -75\n-200 -143\n-222 -139\n-34 42\n-102 -79\n48 -99\n2 -237\n-118 -167\n-56 -41\n10 17\n68 -89\n-32 41\n-100 -93\n84 -1\n86 -15\n46 -145\n-101 -117\n8 31\n-36 -61\n-12 21\n-116 79\n88 -205\n70 -103\n-78 -37\n106 -5\n-96 -201\n-35 -103\n-54 45\n-138 -177\n-178 -47\n-154 -5\n-138 83\n44 -131\n-76 -191\n-176 -61\n-14 -65\n-210 53\n-116 -181\n-74 -205\n-174 -15\n0 -223\n-136 69\n-198 -57\n-76 -51\n-152 -19\n-80 -83\n22 -227\n24 -141\n-220 -153\n", "2\n0 5\n2 2\n", "20\n12 -3\n-27 -24\n-13 7\n17 -23\n15 11\n-17 5\n0 -26\n18 10\n12 -18\n-14 -26\n-20 -24\n16 4\n-19 -21\n-6 -11\n-15 -19\n-18 12\n16 10\n-4 12\n11 11\n13 -25\n", "8\n-10000 4285\n-7143 -10000\n-4286 -1429\n-410 -7143\n1428 1428\n6291 9999\n2821 7142\n9999 -204\n", "6\n-10 -10\n-10 10\n10 8\n10 -9\n11 20\n10 -11\n", "6\n-100000 100000\n-60000 -25814\n-32165 20000\n13147 60000\n60000 -136907\n100000 -60000\n", "32\n16 37\n-26 41\n5 -6\n12 -5\n17 -30\n-31 -14\n-35 4\n-23 -20\n17 -20\n-25 34\n-33 40\n-32 12\n15 24\n23 -25\n-30 -21\n13 -12\n3 -13\n6 37\n-40 -1\n22 25\n16 17\n-16 21\n11 42\n11 32\n-26 21\n-35 -6\n12 -25\n23 18\n-21 27\n-24 -13\n-21 26\n-30 -1\n", "1\n4 4\n", "24\n-1 -7\n-37 -45\n-1 -97\n-37 -25\n9 -107\n-94 -85\n-73 -43\n-73 -63\n9 -87\n-63 -3\n-47 -35\n-47 -15\n15 -27\n-11 -87\n-107 -73\n-17 -65\n-1 -77\n9 -11\n-53 -63\n-1 -27\n-63 -53\n-57 -25\n-11 3\n-11 -17\n", "5\n-1000000 -844201\n-500000 0\n-1 500000\n947989 1000000\n1000000 -340697\n", "10\n-84 -60\n-41 -100\n8 -8\n-52 -62\n-61 -76\n-52 -93\n14 -4\n-2 -49\n46 8\n26 -21\n", "10\n9 6\n8 1\n-10 16\n-11 7\n-1 6\n-1 8\n-2 8\n-1 7\n1 17\n-3 -3\n", "10\n-7 6\n-16 11\n-9 -5\n3 3\n-8 12\n-17 9\n2 -1\n0 15\n-7 6\n-6 -2\n", "10\n-8 11\n1 10\n2 10\n2 11\n0 9\n1 12\n-7 23\n11 4\n8 8\n12 9\n", "50\n-38 -107\n-34 -75\n-200 -143\n-222 -139\n-34 42\n-102 -79\n48 -99\n2 -237\n-118 -167\n-56 -41\n10 17\n68 -89\n-32 41\n-100 -93\n84 -1\n86 -15\n46 -145\n-101 -117\n8 31\n-36 -61\n-12 21\n-116 79\n88 -205\n70 -103\n-78 -37\n106 -5\n-96 -201\n-35 -103\n-54 45\n-195 -177\n-178 -47\n-154 -5\n-138 83\n44 -131\n-76 -191\n-176 -61\n-14 -65\n-210 53\n-116 -181\n-74 -205\n-174 -15\n0 -223\n-136 69\n-198 -57\n-76 -51\n-152 -19\n-80 -83\n22 -227\n24 -141\n-220 -153\n", "2\n-1 5\n2 2\n", "20\n12 -3\n-27 -24\n-13 7\n17 -23\n15 11\n-17 5\n0 -26\n18 10\n12 -18\n-14 -26\n-20 -14\n16 4\n-19 -21\n-6 -11\n-15 -19\n-18 12\n16 10\n-4 12\n11 11\n13 -25\n", "8\n-1345 4285\n-7143 -10000\n-4286 -1429\n-410 -7143\n1428 1428\n6291 9999\n2821 7142\n9999 -204\n"], "output": ["1\n", "0\n", "2\n", "-1\n", "1\n", "1\n", "1\n", "0\n", "0\n", "1\n", "0\n", "1\n", "1\n", "1\n", "0\n", "1\n", "-1\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "-1\n", "0\n", "0\n", "0\n", "2\n", "0\n", "1\n", "0\n", "0\n", "-1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "-1\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "-1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "-1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "-1\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:  \nGiven a set of 2D points, the solution computes the number of distinct candidate lines through the centroid such that reflecting all non\u2010self\u2010paired points across each line yields a perfect pairing, i.e., the set is symmetric with respect to that line.\n\n2. Core algorithmic approach:  \nComputational geometry combined with hashing:  \n- Compute the centroid and scale everything to avoid fractions.  \n- Filter out points that already have direct point-to-point symmetry around the centroid (they form self\u2010pairs).  \n- For each remaining \u201cunpaired\u201d point, hypothesize the bisector line through its midpoint with a fixed reference unpaired point and the centroid.  \n- Evaluate signed distances of all unpaired points to that line, and use a hash map keyed by absolute distance with signed counts to verify that each distance class cancels (pairwise symmetry).  \n- Collect unique line directions.\n\n3. Reusable components:  \n- A 2D Point class with vector operations (addition, subtraction, scalar multiplication, integer division) and hashing support.  \n- A Line class with construction from two points, evaluation of signed distance, and extraction of a normalized direction vector.  \n- The \u201cabs_sgn\u201d pattern: mapping each distance to (absolute value \u2192 net sign count) to verify pairing symmetry in O(n)."}
{"name": "889_D. Symmetric Projections", "description": "You are given a set of n points on the plane. A line containing the origin is called good, if projection of the given set to this line forms a symmetric multiset of points. Find the total number of good lines.\n\nMultiset is a set where equal elements are allowed.\n\nMultiset is called symmetric, if there is a point P on the plane such that the multiset is [centrally symmetric](https://en.wikipedia.org/wiki/Point_reflection) in respect of point P.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2000) \u2014 the number of points in the set.\n\nEach of the next n lines contains two integers xi and yi ( - 106 \u2264 xi, yi \u2264 106) \u2014 the coordinates of the points. It is guaranteed that no two points coincide.\n\nOutput\n\nIf there are infinitely many good lines, print -1.\n\nOtherwise, print single integer \u2014 the number of good lines.\n\nExamples\n\nInput\n\n3\n1 2\n2 1\n3 3\n\n\nOutput\n\n3\n\n\nInput\n\n2\n4 3\n1 2\n\n\nOutput\n\n-1\n\nNote\n\nPicture to the first sample test:\n\n<image>\n\nIn the second sample, any line containing the origin is good.", "solution": "from fractions import Fraction\nimport time\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def to_tuple(self):\n        return (self.x, self.y)\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other):\n        return self.to_tuple() == other.to_tuple()\n\n    def __hash__(self):\n        return hash(self.to_tuple())\n\n    def __neg__(self):\n        return Point(-self.x, -self.y)\n\n    def __add__(self, other):\n        return Point(self.x+other.x, self.y+other.y)\n\n    def __sub__(self, other):\n        return self+(-other)\n\n    def scalar_mul(self, mu):\n        return Point(mu*self.x, mu*self.y)\n\n    def int_divide(self, den):\n        return Point(self.x//den, self.y//den)\n\n\nclass Line:\n    def __init__(self, a, b, c):\n        # ax+by+c=0\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return \"{}*x + {}*y + {} = 0\".format(self.a, self.b, self.c)\n\n    @classmethod\n    def between_two_points(cls, P, Q):\n        return cls(P.y-Q.y, Q.x-P.x, P.x*Q.y-P.y*Q.x)\n\n    def evaluate(self, P):\n        return self.a*P.x+self.b*P.y+self.c\n\n    def direction(self):\n        if self.a == 0:\n            return (0, 1)\n        return (1, Fraction(self.b, self.a))\n\n\ndef abs_sgn(x):\n    if x == 0:\n        return 0, 0\n    if x < 0:\n        return -x, -1\n    return x, 1\n\n\ndef solve(tuple_points):\n    points = set()\n    center = Point(0, 0)\n    for cur in tuple_points:\n        cur = Point(*cur).scalar_mul(2*n)\n        center += cur\n        points.add(cur)\n\n    center = center.int_divide(n)\n    dcenter = center+center\n\n    sym_points_set = set()\n    for p in points:\n        sym_points_set.add(dcenter-p)\n    nosym = list(points - sym_points_set)\n\n    if len(nosym) == 0:\n        print(-1)\n        exit(0)\n\n    p0 = nosym[0]\n    good_lines = set()\n    for p in nosym:\n        m = (p+p0).int_divide(2)\n        line = Line.between_two_points(m, center)\n        distances = list(map(line.evaluate, nosym))\n\n        ok = True\n        mydict = {}\n        for dd in distances:\n            dda, sgn = abs_sgn(dd)\n            if dda not in mydict:\n                mydict[dda] = sgn\n            else:\n                mydict[dda] += sgn\n        for k in mydict:\n            if mydict[k] != 0:\n                ok = False\n                break\n        if ok:\n            good_lines.add(line.direction())\n\n    return len(good_lines)\n\n\n# This one is accepted on CF\nif __name__ == \"__main__\":\n    n = int(input())\n    pts = []\n    for i in range(n):\n        row = input().split(\" \")\n        cur = (int(row[0]), int(row[1]))\n        pts.append(cur)\n    print(solve(pts))\n", "difficulty": 10, "public_tests": {"input": ["2\n4 3\n1 2\n", "3\n1 2\n2 1\n3 3\n"], "output": ["-1\n", "3\n"]}, "private_tests": {"input": ["10\n0 5\n1 0\n2 3\n3 2\n4 6\n5 9\n6 1\n7 8\n8 4\n9 7\n", "10\n-7 6\n-16 11\n-9 -5\n3 4\n-8 12\n-17 6\n2 -1\n-5 15\n-7 4\n-6 -2\n", "8\n11 -3\n12 -5\n10 -6\n9 -4\n8 -8\n6 -7\n7 -10\n5 -9\n", "8\n-10000 4285\n-7143 -10000\n-4286 -1429\n-1429 -7143\n1428 1428\n4285 9999\n7142 7142\n9999 -4286\n", "6\n-100000 100000\n-60000 -20000\n-20000 20000\n20000 60000\n60000 -100000\n100000 -60000\n", "7\n14 -3\n2 -13\n12 -1\n10 -7\n8 -11\n4 -9\n6 -5\n", "4\n2 4\n1 2\n0 0\n-2 -4\n", "10\n-84 -60\n-41 -100\n8 -8\n-52 -62\n-61 -76\n-52 -52\n14 -11\n-2 -54\n46 8\n26 -17\n", "1\n5 2\n", "5\n-1000000 -500000\n-500000 0\n0 500000\n500000 1000000\n1000000 -1000000\n", "32\n16 37\n-26 41\n5 -6\n12 -5\n17 -30\n-31 -14\n-35 4\n-23 -20\n17 -20\n-25 34\n-33 40\n-32 33\n15 24\n22 -25\n-30 -21\n13 -12\n6 -13\n6 37\n-40 -1\n22 25\n16 17\n-16 21\n11 42\n11 32\n-26 21\n-35 -6\n12 -25\n23 18\n-21 16\n-24 -13\n-21 26\n-30 -1\n", "9\n-1000000 -500000\n-750000 250000\n-500000 1000000\n-250000 -250000\n0 -1000000\n250000 750000\n500000 0\n750000 -750000\n1000000 500000\n", "10\n-1000000 -777778\n-777778 555554\n-555556 333332\n-333334 111110\n-111112 999998\n111110 -333334\n333332 -1000000\n555554 -555556\n777776 -111112\n999998 777776\n", "6\n-10 -10\n-10 10\n10 10\n10 -10\n10 11\n10 -11\n", "20\n12 -3\n-18 -24\n-13 7\n17 -23\n15 11\n-17 5\n0 -26\n18 10\n12 -18\n-14 -26\n-20 -24\n16 4\n-19 -21\n-14 -11\n-15 -19\n-18 12\n16 10\n-2 12\n11 9\n13 -25\n", "24\n-1 -7\n-37 -45\n-1 -97\n-37 -25\n9 -107\n-47 -85\n-73 -43\n-73 -63\n9 -87\n-63 -3\n-47 -35\n-47 -15\n15 -39\n-11 -87\n-63 -73\n-17 -65\n-1 -77\n9 -17\n-53 -63\n-1 -27\n-63 -53\n-57 -25\n-11 3\n-11 -17\n", "50\n-38 -107\n-34 -75\n-200 -143\n-222 -139\n-34 55\n-102 -79\n48 -99\n2 -237\n-118 -167\n-56 -41\n10 17\n68 -89\n-32 41\n-100 -93\n84 -1\n86 -15\n46 -145\n-58 -117\n8 31\n-36 -61\n-12 21\n-116 79\n88 -205\n70 -103\n-78 -37\n106 -5\n-96 -201\n-60 -103\n-54 45\n-138 -177\n-178 -47\n-154 -5\n-138 83\n44 -131\n-76 -191\n-176 -61\n-14 -65\n-210 53\n-116 -181\n-74 -205\n-174 -15\n0 -223\n-136 69\n-198 -57\n-76 -51\n-152 -19\n-80 -83\n22 -227\n24 -141\n-220 -153\n", "10\n-8 11\n1 10\n2 10\n2 11\n0 9\n3 12\n-7 16\n11 4\n4 8\n12 9\n", "6\n0 4\n1 5\n2 1\n3 2\n4 3\n5 0\n", "10\n9 6\n8 1\n-10 13\n-11 8\n-1 6\n0 8\n-2 7\n-1 7\n1 17\n-3 -3\n"], "output": ["5\n", "-1\n", "4\n", "5\n", "5\n", "5\n", "1\n", "0\n", "-1\n", "3\n", "3\n", "5\n", "3\n", "1\n", "5\n", "2\n", "7\n", "3\n", "5\n", "3\n"]}, "generated_tests": {"input": ["10\n0 5\n1 0\n2 3\n3 2\n4 6\n5 9\n6 1\n7 8\n8 4\n2 7\n", "4\n2 4\n1 2\n1 0\n-2 -4\n", "10\n-84 -60\n-41 -100\n13 -8\n-52 -62\n-61 -76\n-52 -52\n14 -11\n-2 -54\n46 8\n26 -17\n", "1\n5 1\n", "8\n11 -4\n12 -5\n10 -6\n9 -4\n8 -8\n6 -7\n7 -10\n5 -9\n", "8\n-10000 4285\n-7143 -10000\n-4286 -1429\n-1429 -7143\n1428 2233\n4285 9999\n7142 7142\n9999 -4286\n", "6\n-100000 100000\n-60000 -20000\n-20000 21757\n20000 60000\n60000 -100000\n100000 -60000\n", "7\n14 -3\n2 -13\n12 -1\n10 -7\n8 -11\n8 -9\n6 -5\n", "5\n-1000000 -500000\n-500000 0\n0 454323\n500000 1000000\n1000000 -1000000\n", "32\n16 37\n-26 41\n5 -6\n12 -5\n17 -30\n-31 -14\n-35 4\n-23 -20\n17 -20\n-25 34\n-33 40\n-32 33\n15 24\n22 -25\n-30 -21\n13 -12\n6 -13\n6 37\n-40 -1\n22 25\n16 17\n-16 21\n11 42\n11 32\n-26 21\n-35 -6\n12 -25\n23 32\n-21 16\n-24 -13\n-21 26\n-30 -1\n", "9\n-1000000 -500000\n-750000 250000\n-994366 1000000\n-250000 -250000\n0 -1000000\n250000 750000\n500000 0\n750000 -750000\n1000000 500000\n", "6\n-10 -10\n-10 10\n10 10\n10 -10\n17 11\n10 -11\n", "20\n12 -3\n-18 -24\n-13 7\n17 -23\n15 11\n-17 5\n0 -26\n18 10\n12 -18\n-14 -26\n-20 -24\n16 4\n-19 -21\n-22 -11\n-15 -19\n-18 12\n16 10\n-2 12\n11 9\n13 -25\n", "24\n-1 -7\n-37 -45\n-1 -97\n-37 -25\n9 -107\n-47 -85\n-73 -43\n-73 -63\n9 -87\n-63 -3\n-47 -35\n-47 -15\n15 -39\n-11 -87\n-63 -73\n-17 -65\n-1 -77\n9 -17\n-53 -63\n-1 -9\n-63 -53\n-57 -25\n-11 3\n-11 -17\n", "50\n-38 -107\n-34 -75\n-200 -143\n-222 -139\n-34 55\n-102 -79\n48 -99\n2 -237\n-118 -167\n-56 -41\n10 17\n68 -89\n-32 41\n-100 -93\n84 -1\n86 -15\n46 -145\n-58 -117\n8 31\n-36 -61\n-12 21\n-116 79\n88 -205\n70 -103\n-78 -37\n106 -5\n-96 -201\n-60 -103\n-54 45\n-138 -177\n-178 -47\n-154 -5\n-138 83\n44 -131\n-76 -191\n-176 -61\n-14 -65\n-210 53\n-116 -181\n-74 -309\n-174 -15\n0 -223\n-136 69\n-198 -57\n-76 -51\n-152 -19\n-80 -83\n22 -227\n24 -141\n-220 -153\n", "6\n0 4\n1 5\n2 1\n3 2\n1 3\n5 0\n", "2\n4 3\n1 0\n", "10\n0 5\n1 0\n2 3\n3 2\n4 6\n5 9\n6 1\n8 8\n8 4\n2 7\n", "8\n11 -4\n12 -5\n10 -6\n9 -4\n8 -8\n6 -7\n6 -10\n5 -9\n", "8\n-10000 7534\n-7143 -10000\n-4286 -1429\n-1429 -7143\n1428 2233\n4285 9999\n7142 7142\n9999 -4286\n", "6\n-100000 100000\n-60000 -20000\n-20000 21757\n20000 74620\n60000 -100000\n100000 -60000\n", "7\n14 -3\n2 -13\n12 -1\n10 -9\n8 -11\n8 -9\n6 -5\n", "4\n2 4\n1 2\n1 0\n-2 -1\n", "10\n-84 -60\n-41 -100\n13 -8\n-52 -62\n-61 -76\n-52 -52\n14 -11\n-2 -90\n46 8\n26 -17\n", "1\n8 1\n", "5\n-1000000 -500000\n-500000 0\n0 454323\n500000 1000000\n1010000 -1000000\n", "32\n16 72\n-26 41\n5 -6\n12 -5\n17 -30\n-31 -14\n-35 4\n-23 -20\n17 -20\n-25 34\n-33 40\n-32 33\n15 24\n22 -25\n-30 -21\n13 -12\n6 -13\n6 37\n-40 -1\n22 25\n16 17\n-16 21\n11 42\n11 32\n-26 21\n-35 -6\n12 -25\n23 32\n-21 16\n-24 -13\n-21 26\n-30 -1\n", "9\n-1000000 -500000\n-750000 250000\n-994366 1000000\n-59245 -250000\n0 -1000000\n250000 750000\n500000 0\n750000 -750000\n1000000 500000\n", "6\n-10 -10\n-10 10\n10 10\n18 -10\n17 11\n10 -11\n", "20\n18 -3\n-18 -24\n-13 7\n17 -23\n15 11\n-17 5\n0 -26\n18 10\n12 -18\n-14 -26\n-20 -24\n16 4\n-19 -21\n-22 -11\n-15 -19\n-18 12\n16 10\n-2 12\n11 9\n13 -25\n", "24\n-1 -7\n-37 -45\n-1 -97\n-37 -25\n9 -107\n-47 -85\n-73 -43\n-73 -63\n9 -87\n-63 -3\n-47 -35\n-47 -15\n15 -39\n-11 -87\n-63 -73\n-17 -65\n-1 -28\n9 -17\n-53 -63\n-1 -9\n-63 -53\n-57 -25\n-11 3\n-11 -17\n", "50\n-38 -107\n-34 -75\n-200 -143\n-222 -139\n-34 97\n-102 -79\n48 -99\n2 -237\n-118 -167\n-56 -41\n10 17\n68 -89\n-32 41\n-100 -93\n84 -1\n86 -15\n46 -145\n-58 -117\n8 31\n-36 -61\n-12 21\n-116 79\n88 -205\n70 -103\n-78 -37\n106 -5\n-96 -201\n-60 -103\n-54 45\n-138 -177\n-178 -47\n-154 -5\n-138 83\n44 -131\n-76 -191\n-176 -61\n-14 -65\n-210 53\n-116 -181\n-74 -309\n-174 -15\n0 -223\n-136 69\n-198 -57\n-76 -51\n-152 -19\n-80 -83\n22 -227\n24 -141\n-220 -153\n", "2\n2 3\n1 0\n", "10\n0 8\n1 0\n2 3\n3 2\n4 6\n5 9\n6 1\n8 8\n8 4\n2 7\n", "8\n11 -4\n12 -5\n10 -6\n9 -4\n8 -8\n6 -7\n6 -17\n5 -9\n", "8\n-10000 7534\n-7143 -10000\n-4286 -1429\n-1429 -7143\n1428 2233\n4285 9999\n13611 7142\n9999 -4286\n", "6\n-100000 100000\n-60000 -20000\n-38886 21757\n20000 74620\n60000 -100000\n100000 -60000\n", "7\n14 -3\n2 -13\n12 -1\n10 -9\n8 -11\n8 -9\n12 -5\n", "10\n-84 -60\n-41 -100\n13 -8\n-52 -62\n-11 -76\n-52 -52\n14 -11\n-2 -90\n46 8\n26 -17\n", "1\n3 1\n", "5\n-1000000 -500000\n-500000 0\n0 454323\n500000 1000000\n0010000 -1000000\n", "32\n16 72\n-26 41\n5 -6\n12 -5\n17 -30\n-24 -14\n-35 4\n-23 -20\n17 -20\n-25 34\n-33 40\n-32 33\n15 24\n22 -25\n-30 -21\n13 -12\n6 -13\n6 37\n-40 -1\n22 25\n16 17\n-16 21\n11 42\n11 32\n-26 21\n-35 -6\n12 -25\n23 32\n-21 16\n-24 -13\n-21 26\n-30 -1\n", "9\n-1000000 -500000\n-750000 250000\n-994366 1000000\n-59245 -250000\n0 -1000000\n250000 750000\n157915 0\n750000 -750000\n1000000 500000\n", "6\n-10 -10\n-10 10\n10 5\n18 -10\n17 11\n10 -11\n", "20\n18 -3\n-18 -24\n-13 7\n17 -23\n15 11\n-17 5\n0 -26\n18 10\n12 -18\n-14 -26\n-20 -24\n16 4\n-19 -21\n-22 -11\n-15 -19\n-18 12\n16 10\n-2 12\n11 9\n13 -6\n", "24\n-1 -7\n-37 -45\n-1 -97\n-37 -25\n9 -107\n-47 -85\n-73 -43\n-73 -63\n9 -87\n-63 -3\n-47 -35\n-47 -15\n15 -39\n-11 -87\n-63 -73\n-17 -65\n-1 -28\n18 -17\n-53 -63\n-1 -9\n-63 -53\n-57 -25\n-11 3\n-11 -17\n", "50\n-38 -107\n-34 -75\n-200 -143\n-222 -139\n-34 97\n-102 -79\n48 -99\n2 -237\n-118 -167\n-56 -41\n10 17\n68 -89\n-32 41\n-100 -93\n84 -1\n86 -15\n46 -145\n-58 -117\n8 31\n-36 -61\n-12 21\n-116 79\n88 -205\n70 -103\n-78 -37\n106 -5\n-96 -201\n-60 -103\n-54 45\n-138 -177\n-178 -47\n-154 -5\n-138 83\n44 -131\n-76 -191\n-176 -61\n-14 -65\n-210 53\n-116 -181\n-74 -309\n-174 -15\n0 -223\n-136 69\n-198 -57\n-76 -51\n-152 -19\n-80 -83\n22 -393\n24 -141\n-220 -153\n", "2\n2 3\n2 0\n", "10\n0 8\n1 0\n2 3\n3 2\n4 6\n5 9\n6 1\n2 8\n8 4\n2 7\n", "8\n10 -4\n12 -5\n10 -6\n9 -4\n8 -8\n6 -7\n6 -17\n5 -9\n", "8\n-10000 7534\n-7143 -10000\n-4286 -1429\n-2814 -7143\n1428 2233\n4285 9999\n13611 7142\n9999 -4286\n", "6\n-100000 100000\n-60000 -16548\n-38886 21757\n20000 74620\n60000 -100000\n100000 -60000\n", "10\n-84 -60\n-41 -100\n13 -8\n-52 -62\n-11 -76\n-52 -52\n14 -11\n-2 -118\n46 8\n26 -17\n"], "output": ["1\n", "3\n", "0\n", "-1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "0\n", "0\n", "3\n", "-1\n", "1\n", "0\n", "1\n", "1\n", "0\n", "3\n", "0\n", "-1\n", "0\n", "0\n", "1\n", "1\n", "1\n", "0\n", "0\n", "-1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "-1\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "-1\n", "0\n", "1\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:  \nGiven a set of 2D points, determine how many distinct lines through the overall centroid act as axes of bilateral symmetry for the point set.\n\n2. Core algorithmic approach:  \nBrute\u2010force candidate axes generation combined with symmetry verification via signed\u2010distance grouping.  \n- Compute the centroid of all points (scaled to avoid fractions).  \n- Identify \u201cunsymmetrical\u201d points that do not already have their reflection in the set.  \n- For each such point, derive a candidate axis as the line through the centroid and the midpoint between that point and a fixed reference unsymmetrical point.  \n- Test each axis by projecting all unsymmetrical points onto it, grouping by absolute signed distance, and checking that for every distance the count of points on either side balances to zero.  \n- Count the number of unique axis directions that pass this test.\n\n3. Reusable components:  \n- Point class with vector operations (addition, subtraction, scalar multiplication) and hashing for set membership.  \n- Line class with factory method between_two_points, an evaluate(P) to get signed distance, and a normalized direction() representation.  \n- Symmetry\u2010test pattern: compute signed distances of points to a candidate line, map absolute values to net sign sums, and verify all sums are zero."}
{"name": "334_B. Eight Point Sets", "description": "Gerald is very particular to eight point sets. He thinks that any decent eight point set must consist of all pairwise intersections of three distinct integer vertical straight lines and three distinct integer horizontal straight lines, except for the average of these nine points. In other words, there must be three integers x1, x2, x3 and three more integers y1, y2, y3, such that x1 < x2 < x3, y1 < y2 < y3 and the eight point set consists of all points (xi, yj) (1 \u2264 i, j \u2264 3), except for point (x2, y2).\n\nYou have a set of eight points. Find out if Gerald can use this set?\n\nInput\n\nThe input consists of eight lines, the i-th line contains two space-separated integers xi and yi (0 \u2264 xi, yi \u2264 106). You do not have any other conditions for these points.\n\nOutput\n\nIn a single line print word \"respectable\", if the given set of points corresponds to Gerald's decency rules, and \"ugly\" otherwise.\n\nExamples\n\nInput\n\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n\n\nOutput\n\nrespectable\n\n\nInput\n\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n\n\nOutput\n\nugly\n\n\nInput\n\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\n\nOutput\n\nugly", "solution": "a = []\nfor i in range(8):\n    x, y = map(int, input().split())\n    a.append((x, y))\na.sort()\nif a[0][1] != a[1][1] and a[1][1] != a[2][1] and a[2][1] != a[0][1]:\n    if a[0][0] != a[3][0] and a[3][0] != a[5][0] and a[5][0] != a[0][0]:\n        if a[0][0] == a[1][0] == a[2][0]:\n            if a[3][0] == a[4][0]:\n                if a[5][0] == a[6][0] == a[7][0]:\n                    if a[0][1] == a[3][1] == a[5][1]:\n                        if a[1][1] == a[6][1]:\n                            if a[2][1] == a[4][1] == a[7][1]:\n                                print('respectable')\n                                exit()\nprint('ugly')\n", "difficulty": 8, "public_tests": {"input": ["1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n", "0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n", "0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n"], "output": ["ugly", "ugly", "respectable"]}, "private_tests": {"input": ["0 0\n0 0\n0 0\n1 1\n1 1\n2 2\n2 2\n2 2\n", "0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n", "1 2\n1 3\n1 4\n2 2\n2 4\n4 2\n4 2\n4 4\n", "0 0\n1 0\n0 1\n1 1\n0 2\n1 2\n0 3\n1 3\n", "323728 724794\n265581 165113\n323728 146453\n265581 146453\n591097 146453\n265581 724794\n323728 165113\n591097 165113\n", "941532 913025\n941532 862399\n686271 913025\n686271 862399\n686271 461004\n941532 461004\n908398 862399\n908398 913025\n", "180952 311537\n180952 918548\n126568 918548\n180952 268810\n732313 918548\n126568 311537\n126568 268810\n732313 311537\n", "716334 42808\n211710 645370\n515258 96837\n14392 766713\n439265 939607\n430602 918570\n845044 187545\n957977 441674\n", "581646 464672\n493402 649074\n581646 649074\n214619 649074\n581646 252709\n214619 252709\n214619 464672\n493402 252709\n", "1 0\n1 0\n1 0\n2 3\n2 3\n3 4\n3 4\n3 4\n", "0 1\n0 1\n0 2\n1 1\n1 2\n2 1\n2 1\n2 2\n", "1 1\n1 2\n1 2\n2 3\n2 1\n3 3\n3 1\n3 3\n", "337499 89260\n337499 565883\n603778 89260\n603778 565883\n234246 89260\n603778 17841\n337499 17841\n234246 17841\n", "612573 554036\n195039 655769\n472305 655769\n612573 655769\n195039 160740\n472305 160740\n472305 554036\n612573 160740\n", "750592 335292\n226387 434036\n299976 154633\n593197 600998\n62014 689355\n566268 571630\n381455 222817\n50555 288617\n", "583956 366985\n759621 567609\n756846 567609\n759621 176020\n583956 567609\n583956 176020\n759621 366985\n756846 176020\n", "1 1\n1 2\n1 5\n2 1\n2 5\n5 1\n5 2\n5 5\n", "0 0\n0 1\n0 3\n1 0\n1 3\n2 0\n2 2\n2 3\n", "642921 597358\n922979 597358\n127181 616833\n642921 828316\n922979 828316\n127181 597358\n922979 616833\n127181 828316\n", "666888 741208\n685852 578759\n211123 826453\n244759 601804\n670436 748132\n976425 387060\n587850 804554\n430242 805528\n", "52820 216139\n52820 999248\n290345 216139\n290345 999248\n308639 216139\n308639 999248\n52820 477113\n308639 477113\n", "0 0\n0 1\n0 2\n1 0\n1 2\n3 0\n3 1\n3 2\n", "0 50000\n0 0\n0 1000000\n50000 0\n50000 1000000\n1000000 0\n1000000 50000\n1000000 1000000\n", "1000000 1000000\n1000000 999999\n1000000 999998\n999999 1000000\n999999 999998\n999998 1000000\n999998 999999\n999998 999998\n", "0 0\n0 1\n0 2\n0 0\n1 2\n2 0\n2 1\n2 2\n", "787948 77797\n421941 615742\n421941 77797\n400523 77797\n400523 111679\n787948 615742\n400523 615742\n787948 111679\n", "791649 383826\n10864 260573\n504506 185571\n899991 511500\n503197 876976\n688727 569035\n343255 961333\n439355 759581\n", "999231 584954\n246553 267441\n697080 920011\n173593 403511\n58535 101909\n131124 924182\n779830 204560\n684576 533111\n", "343395 788566\n171702 674699\n171702 788566\n971214 788566\n343395 9278\n971214 9278\n343395 674699\n971214 674699\n", "803784 428886\n995691 328351\n211844 386054\n375491 74073\n692402 660275\n366073 536431\n485832 941417\n96032 356022\n", "337873 813442\n995185 863182\n375545 263618\n310042 130019\n358572 560779\n305725 729179\n377381 267545\n41376 312626\n", "71768 834717\n13140 834717\n13140 991083\n880763 386898\n71768 386898\n880763 991083\n880763 834717\n13140 386898\n", "251515 680236\n761697 669947\n251515 669947\n761697 680236\n251515 476629\n761697 476629\n453296 669947\n453296 476629\n", "0 0\n0 0\n0 2\n1 1\n1 2\n2 0\n2 1\n2 2\n", "38184 589856\n281207 447136\n281207 42438\n38184 42438\n38184 447136\n880488 589856\n281207 589856\n880488 42438\n", "0 8\n0 9\n0 10\n1 8\n3 8\n3 8\n3 9\n3 10\n", "0 0\n2 1\n1 0\n0 2\n2 2\n1 0\n2 1\n0 2\n", "69586 260253\n74916 203798\n985457 203798\n74916 943932\n985457 943932\n69586 943932\n985457 260253\n69586 203798\n", "1 1\n1 1\n1 3\n2 1\n2 3\n3 2\n3 2\n3 3\n", "57930 637387\n883991 573\n57930 573\n57930 499963\n399327 573\n399327 637387\n883991 637387\n883991 499963\n", "0 0\n0 0\n1 0\n0 1\n2 1\n1 2\n2 2\n2 2\n"], "output": ["ugly", "ugly", "ugly", "ugly", "ugly", "ugly", "ugly", "ugly", "respectable", "ugly", "ugly", "ugly", "ugly", "ugly", "ugly", "respectable", "respectable", "ugly", "respectable", "ugly", "respectable", "respectable", "respectable", "respectable", "ugly", "respectable", "ugly", "ugly", "ugly", "ugly", "ugly", "ugly", "ugly", "ugly", "ugly", "ugly", "ugly", "respectable", "ugly", "respectable", "ugly"]}, "generated_tests": {"input": ["0 0\n0 0\n1 0\n1 1\n1 1\n2 2\n2 2\n2 2\n", "0 0\n0 0\n0 0\n0 0\n0 -1\n0 0\n0 0\n0 0\n", "1 2\n1 3\n1 4\n2 2\n2 4\n6 2\n4 2\n4 4\n", "0 0\n1 0\n0 0\n1 1\n0 2\n1 2\n0 3\n1 3\n", "323728 724794\n265581 165113\n323728 146453\n265581 146453\n591097 146453\n265581 1029689\n323728 165113\n591097 165113\n", "156351 913025\n941532 862399\n686271 913025\n686271 862399\n686271 461004\n941532 461004\n908398 862399\n908398 913025\n", "716334 42808\n99329 645370\n515258 96837\n14392 766713\n439265 939607\n430602 918570\n845044 187545\n957977 441674\n", "581646 464672\n493402 649074\n581646 649074\n214619 649074\n581646 252709\n329754 252709\n214619 464672\n493402 252709\n", "1 0\n1 1\n1 0\n2 3\n2 3\n3 4\n3 4\n3 4\n", "0 1\n0 1\n0 2\n1 2\n1 2\n2 1\n2 1\n2 2\n", "1 1\n1 2\n1 2\n2 3\n1 1\n3 3\n3 1\n3 3\n", "337499 89260\n337499 565883\n603778 89260\n603778 565883\n234246 89260\n603778 17841\n337499 20952\n234246 17841\n", "155320 554036\n195039 655769\n472305 655769\n612573 655769\n195039 160740\n472305 160740\n472305 554036\n612573 160740\n", "750592 335292\n226387 434036\n403951 154633\n593197 600998\n62014 689355\n566268 571630\n381455 222817\n50555 288617\n", "583956 366985\n759621 567609\n756846 567609\n759621 176020\n997685 567609\n583956 176020\n759621 366985\n756846 176020\n", "1 1\n1 2\n1 5\n4 1\n2 5\n5 1\n5 2\n5 5\n", "0 0\n0 1\n-1 3\n1 0\n1 3\n2 0\n2 2\n2 3\n", "642921 391630\n922979 597358\n127181 616833\n642921 828316\n922979 828316\n127181 597358\n922979 616833\n127181 828316\n", "52820 216139\n52820 999248\n290345 216139\n290345 999248\n308639 29698\n308639 999248\n52820 477113\n308639 477113\n", "0 50000\n0 0\n0 1000100\n50000 0\n50000 1000000\n1000000 0\n1000000 50000\n1000000 1000000\n", "0 0\n0 1\n0 2\n0 0\n1 2\n2 0\n2 1\n2 3\n", "791649 383826\n10864 260573\n504506 185571\n899991 511500\n503197 876976\n1223037 569035\n343255 961333\n439355 759581\n", "343395 788566\n171702 674699\n171702 788566\n971214 788566\n343395 339\n971214 9278\n343395 674699\n971214 674699\n", "803784 428886\n995691 328351\n211844 386054\n375491 74073\n692402 660275\n366073 536431\n485832 941417\n111030 356022\n", "337873 813442\n995185 863182\n375545 263618\n310042 73622\n358572 560779\n305725 729179\n377381 267545\n41376 312626\n", "251515 680236\n761697 179509\n251515 669947\n761697 680236\n251515 476629\n761697 476629\n453296 669947\n453296 476629\n", "0 0\n0 0\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n", "38184 589856\n281207 861833\n281207 42438\n38184 42438\n38184 447136\n880488 589856\n281207 589856\n880488 42438\n", "0 8\n0 9\n0 10\n1 8\n6 8\n3 8\n3 9\n3 10\n", "0 -1\n2 1\n1 0\n0 2\n2 2\n1 0\n2 1\n0 2\n", "69586 260253\n74916 284168\n985457 203798\n74916 943932\n985457 943932\n69586 943932\n985457 260253\n69586 203798\n", "1 1\n1 1\n1 3\n3 1\n2 3\n3 2\n3 2\n3 3\n", "57930 637387\n883991 573\n57930 573\n57930 499963\n399327 573\n399327 714508\n883991 637387\n883991 499963\n", "0 0\n0 0\n1 0\n0 1\n2 1\n1 2\n2 2\n2 4\n", "1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n1 2\n", "0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n11 0\n7 0\n", "0 0\n0 0\n1 0\n1 1\n1 1\n2 2\n2 2\n2 1\n", "0 0\n0 0\n0 0\n0 0\n0 -1\n0 0\n0 0\n1 0\n", "1 2\n1 3\n2 4\n2 2\n2 4\n6 2\n4 2\n4 4\n", "0 -1\n1 0\n0 0\n1 1\n0 2\n1 2\n0 3\n1 3\n", "323728 724794\n265581 165113\n323728 146453\n389297 146453\n591097 146453\n265581 1029689\n323728 165113\n591097 165113\n", "77284 913025\n941532 862399\n686271 913025\n686271 862399\n686271 461004\n941532 461004\n908398 862399\n908398 913025\n", "716334 42808\n99329 645370\n515258 58872\n14392 766713\n439265 939607\n430602 918570\n845044 187545\n957977 441674\n", "581646 464672\n493402 649074\n577512 649074\n214619 649074\n581646 252709\n329754 252709\n214619 464672\n493402 252709\n", "1 1\n1 1\n1 0\n2 3\n2 3\n3 4\n3 4\n3 4\n", "0 1\n0 1\n0 2\n1 2\n1 2\n2 1\n2 2\n2 2\n", "1 1\n1 2\n1 2\n2 3\n1 1\n3 3\n3 1\n5 3\n", "337499 89260\n337499 565883\n603778 89260\n603778 565883\n234246 89260\n603778 17841\n337499 20952\n234246 24072\n", "750592 335292\n226387 434036\n403951 154633\n593197 600998\n46287 689355\n566268 571630\n381455 222817\n50555 288617\n", "0 1\n1 2\n1 5\n4 1\n2 5\n5 1\n5 2\n5 5\n", "0 0\n0 1\n-1 3\n1 0\n1 3\n2 0\n2 2\n3 3\n", "963316 391630\n922979 597358\n127181 616833\n642921 828316\n922979 828316\n127181 597358\n922979 616833\n127181 828316\n", "52820 216139\n52820 999248\n290345 208918\n290345 999248\n308639 29698\n308639 999248\n52820 477113\n308639 477113\n", "0 50000\n0 0\n0 1000100\n50000 0\n50000 1000000\n1000000 0\n1000000 50000\n1010000 1000000\n", "0 -1\n0 1\n0 2\n0 0\n1 2\n2 0\n2 1\n2 3\n", "791649 383826\n10864 260573\n504506 185571\n899991 511500\n503197 876976\n1223037 569035\n331156 961333\n439355 759581\n", "343395 788566\n171702 674699\n32548 788566\n971214 788566\n343395 339\n971214 9278\n343395 674699\n971214 674699\n", "803784 428886\n995691 328351\n211844 386054\n375491 63033\n692402 660275\n366073 536431\n485832 941417\n111030 356022\n", "337873 813442\n995185 863182\n375545 263618\n310042 73622\n358572 560779\n48718 729179\n377381 267545\n41376 312626\n", "251515 680236\n761697 179509\n251515 467849\n761697 680236\n251515 476629\n761697 476629\n453296 669947\n453296 476629\n", "0 0\n0 0\n0 2\n1 0\n1 2\n0 0\n2 1\n2 2\n", "38184 589856\n281207 861833\n281207 42438\n38184 42438\n38184 447136\n880488 589856\n281207 589856\n880488 44104\n", "0 8\n0 9\n0 10\n1 14\n6 8\n3 8\n3 9\n3 10\n", "0 -1\n2 1\n2 0\n0 2\n2 2\n1 0\n2 1\n0 2\n", "69586 260253\n74916 284168\n985457 203798\n74916 212254\n985457 943932\n69586 943932\n985457 260253\n69586 203798\n", "1 1\n1 1\n1 4\n3 1\n2 3\n3 2\n3 2\n3 3\n", "57930 637387\n883991 573\n57930 573\n57930 274200\n399327 573\n399327 714508\n883991 637387\n883991 499963\n", "-1 0\n0 0\n1 0\n0 1\n2 1\n1 2\n2 2\n2 4\n", "1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n0 2\n", "0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n11 0\n7 1\n", "0 0\n0 0\n1 0\n1 1\n1 1\n2 2\n0 2\n2 1\n", "0 0\n0 -1\n0 0\n0 0\n0 -1\n0 0\n0 0\n1 0\n", "1 2\n1 3\n2 7\n2 2\n2 4\n6 2\n4 2\n4 4\n", "0 -1\n1 0\n0 0\n1 1\n0 0\n1 2\n0 3\n1 3\n", "323728 724794\n265581 165113\n323728 146453\n389297 146453\n591097 171659\n265581 1029689\n323728 165113\n591097 165113\n", "716334 42808\n99329 645370\n515258 58872\n14392 766713\n439265 476162\n430602 918570\n845044 187545\n957977 441674\n", "581646 464672\n493402 318017\n577512 649074\n214619 649074\n581646 252709\n329754 252709\n214619 464672\n493402 252709\n", "1 1\n1 2\n1 0\n2 3\n2 3\n3 4\n3 4\n3 4\n", "0 1\n0 1\n0 2\n1 2\n1 2\n2 1\n2 2\n0 2\n", "1 1\n1 2\n1 2\n2 3\n1 2\n3 3\n3 1\n5 3\n", "337499 89260\n337499 565883\n603778 89260\n603778 565883\n234246 89260\n603778 17841\n337499 20952\n234246 13421\n", "750592 335292\n226387 684413\n403951 154633\n593197 600998\n46287 689355\n566268 571630\n381455 222817\n50555 288617\n", "-1 1\n1 2\n1 5\n4 1\n2 5\n5 1\n5 2\n5 5\n"], "output": ["ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n", "ugly\n"]}, "short_description": "1. One-sentence summary  \n   Given eight 2D points, the solution determines whether they exactly match a predefined axis-aligned pattern by sorting them and then performing constant-time coordinate consistency checks.\n\n2. Core algorithmic approach  \n   \u2013 Sorting: the points are sorted lexicographically in O(n log n).  \n   \u2013 Direct pattern validation: fixed-index comparisons check equalities and inequalities in constant time (O(1)).\n\n3. Reusable components  \n   1. Lexicographic sorting of points (or tuples) to impose a deterministic order.  \n   2. Grouping by index ranges after sort to form logical buckets (e.g., columns or rows).  \n   3. Batch coordinate comparisons (using chained equality/inequality checks) to validate fixed geometric or combinatorial patterns."}
{"name": "1468_F. Full Turn", "description": "There are n persons located on a plane. The i-th person is located at the point (x_i, y_i) and initially looks at the point (u_i, v_i).\n\nAt the same moment of time, all persons will start to rotate clockwise synchronously with the same angular speed. They will rotate until they do one full 360-degree turn. \n\nIt is said that persons A and B made eye contact if person A looks in person B's direction at the same moment when person B looks in person A's direction. If there is a person C located between persons A and B, that will not obstruct A and B from making eye contact. A person can make eye contact with more than one person at the same time.\n\nCalculate the number of pairs of persons that will make eye contact at least once during the rotation (including the initial moment).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of persons. The following n lines describe persons, each line containing four space-separated integers x_i, y_i, u_i, v_i (|x_i|, |y_i|, |u_i|, |v_i| \u2264 10^9; x_i \u2260 u_i or y_i \u2260 v_i), where (x_i, y_i) are the coordinates of the point where the i-th person is located and (u_i, v_i) are the coordinates of the point that the i-th person looks at initially. Each person's location is unique in each test case.\n\nThe sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the number of pairs of persons who will make eye contact at least once during the rotation, including the initial moment.\n\nExample\n\nInput\n\n\n3\n2\n0 0 0 1\n1 0 2 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n3 0 3 -5\n4 0 4 -5\n5 0 5 -5\n\n\nOutput\n\n\n0\n1\n9", "solution": "import os\nimport sys\nfrom io import BytesIO, IOBase\n# region fastio\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    def __init__(self, file):\n        self.newlines = 0\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline()\n \n# --------------------------------------------------------------------\n\ndef RL(): return map(int, sys.stdin.readline().split())\ndef RLL(): return list(map(int, sys.stdin.readline().split()))\ndef N(): return int(input())\ndef S(): return input().strip()\ndef print_list(l): print(' '.join(map(str, l)))\n    \n# sys.setrecursionlimit(100000)\n# import random\n# from functools import reduce\n# from functools import lru_cache\n# from heapq import *\n# from collections import deque as dq\nfrom math import gcd\n# import bisect as bs\nfrom collections import Counter\n# from collections import defaultdict as dc \n\nfor _ in range(N()):\n    dic = Counter()\n    for _ in range(N()):\n        x, y, u, v = RL()\n        dx, dy = u - x, v - y \n        if dx == 0:\n            dic[(0, 1 if dy > 0 else -1)] += 1\n        elif dy == 0:\n            dic[(1 if dx > 0 else -1, 0)] += 1\n        else:\n            t = gcd(dx, dy)\n            dic[(dx // t, dy // t)] += 1\n    print(sum(dic[(x, y)] * dic[(-x, -y)] for x, y in dic) >> 1)\n", "difficulty": 12, "public_tests": {"input": ["3\n2\n0 0 0 1\n1 0 2 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n3 0 3 -5\n4 0 4 -5\n5 0 5 -5\n"], "output": ["\n0\n1\n9\n"]}, "private_tests": {"input": ["1\n5\n0 0 1 1\n2 2 10 10\n-10 -10 23 23\n-5 -5 -7 -7\n1 2 3 4\n", "4\n2\n0 0 1 1\n5 5 6 6\n2\n0 0 -1 1\n-5 5 -6 6\n2\n0 0 1 -1\n5 -5 6 -6\n2\n0 0 -1 -1\n-5 -5 -6 -6\n", "4\n2\n0 0 2 1\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 4\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 2 -1\n5 -5 3 -4\n", "1\n1\n0 0 1000000000 1000000000\n", "2\n2\n1000000000 1000000000 -1000000000 -1000000000\n-1000000000 -1000000000 1000000000 1000000000\n2\n1000000000 1000000000 -1000000000 -999999999\n-1000000000 -1000000000 1000000000 1000000000\n", "1\n1\n0 0 123 1241241\n", "2\n4\n0 0 1 0\n2 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n1 0 5 0\n1 1 1 5\n1 3 1 5\n"], "output": ["4\n", "0\n0\n0\n0\n", "1\n1\n1\n1\n", "0\n", "1\n0\n", "0\n", "2\n0\n"]}, "generated_tests": {"input": ["1\n5\n0 0 1 1\n2 2 10 10\n-10 -10 23 23\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 1 1\n5 5 6 6\n2\n0 0 -1 1\n-5 5 -6 6\n2\n0 0 1 -1\n5 -5 6 -6\n2\n0 0 -1 -1\n-5 -3 -6 -6\n", "4\n2\n0 0 2 1\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 4\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "1\n1\n0 0 1000000000 1000010000\n", "2\n2\n1000000000 1000000000 -1000000000 -1907023958\n-1000000000 -1000000000 1000000000 1000000000\n2\n1000000000 1000000000 -1000000000 -999999999\n-1000000000 -1000000000 1000000000 1000000000\n", "2\n4\n0 0 1 0\n2 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "3\n2\n0 -1 0 1\n1 0 2 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n3 0 3 -5\n4 0 4 -5\n5 0 5 -5\n", "1\n5\n0 0 1 1\n0 2 10 10\n-10 -10 23 23\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 2 1\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "3\n2\n0 -1 0 1\n1 0 2 0\n3\n0 0 1 1\n2 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n3 0 3 -5\n4 0 4 -5\n5 0 5 -5\n", "4\n2\n0 0 2 1\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "4\n2\n0 0 2 1\n5 5 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "2\n4\n-1 0 1 0\n0 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "1\n5\n0 0 1 1\n0 2 8 10\n-17 -10 23 23\n-5 -5 -6 -7\n1 0 3 4\n", "4\n2\n0 0 2 1\n5 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n1 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "4\n2\n0 0 2 1\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 4\n2\n0 0 -3 -1\n-5 -5 -3 -4\n2\n0 0 2 -1\n5 -5 3 -4\n", "3\n2\n0 0 0 1\n1 0 2 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n0 0 3 -5\n4 0 4 -5\n5 0 5 -5\n", "4\n2\n0 0 2 2\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 4\n2\n0 0 -3 -1\n-5 -5 -3 -4\n2\n0 0 2 -1\n5 -5 3 -4\n", "4\n2\n0 0 2 1\n5 5 3 4\n2\n1 0 -2 1\n-5 5 -3 4\n2\n0 0 -2 -1\n-5 -5 -6 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "4\n2\n0 -1 2 1\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n7 -5 3 -4\n", "3\n2\n0 -1 0 1\n1 0 3 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n0 0 1 2\n2 0 2 3\n1 0 3 -5\n4 0 4 -3\n5 0 5 -5\n", "2\n4\n0 0 1 -1\n2 0 1 0\n1 1 1 2\n1 3 1 4\n4\n1 0 5 0\n1 0 5 1\n1 2 1 5\n1 3 1 2\n", "3\n2\n1 -1 0 1\n1 0 3 0\n3\n0 1 1 1\n1 1 0 0\n1 1 2 0\n6\n0 0 0 1\n0 0 1 2\n2 0 2 3\n1 0 3 -5\n4 0 4 -3\n5 0 5 -5\n", "4\n2\n0 -1 2 1\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 4\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 2 -1\n5 -5 3 -4\n", "4\n2\n0 0 2 1\n6 5 3 4\n2\n0 0 -2 1\n-5 5 -3 4\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "2\n4\n-1 0 1 0\n2 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 0\n", "3\n2\n0 0 0 1\n1 0 2 0\n3\n0 1 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n0 0 3 -5\n4 0 4 -5\n5 0 5 -5\n", "3\n2\n0 -1 0 1\n1 0 2 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n1 0 3 -5\n4 0 0 -5\n5 0 5 -5\n", "3\n2\n0 0 0 1\n1 0 2 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 1\n6\n0 0 0 1\n1 0 1 2\n2 0 2 4\n3 0 3 -5\n4 0 4 -5\n5 0 5 -5\n", "4\n2\n0 0 2 1\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 4\n2\n0 0 -3 -1\n-2 -5 -3 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "3\n2\n1 -1 0 1\n1 0 3 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n0 0 1 0\n2 0 2 3\n1 0 3 -5\n4 0 7 -3\n5 0 5 -5\n", "2\n4\n-1 -1 0 0\n2 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 0\n", "3\n2\n0 -1 0 1\n1 0 3 1\n3\n-1 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n1 0 3 -5\n4 0 4 -5\n5 0 10 -5\n", "4\n2\n0 0 0 1\n5 3 3 5\n2\n0 0 -2 1\n-5 5 -3 4\n2\n1 -1 -2 -1\n-5 -7 -3 -4\n2\n0 0 0 -1\n6 -5 3 -4\n", "4\n2\n0 0 1 2\n5 5 6 6\n2\n0 0 -1 1\n-5 5 -6 6\n2\n0 0 1 -1\n5 -5 6 -6\n2\n0 0 -1 -1\n-5 -3 -6 -6\n", "1\n1\n1 0 1000000000 1000010000\n", "2\n4\n-1 0 1 0\n2 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "1\n5\n0 0 1 1\n0 2 8 10\n-10 -10 23 23\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 1 2\n5 5 6 6\n2\n0 0 -1 1\n-5 5 -6 6\n2\n0 0 1 -1\n5 -5 6 -6\n2\n0 0 -1 -1\n-5 -3 -6 -1\n", "2\n4\n-1 0 1 0\n4 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "1\n5\n0 0 1 1\n0 2 8 10\n-17 -10 23 23\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 2 1\n5 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "2\n4\n-1 0 1 0\n0 0 1 0\n1 1 1 2\n1 3 0 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "4\n2\n0 0 2 1\n5 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n1 0 -1 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "1\n5\n0 0 1 1\n2 2 10 10\n-10 -10 23 23\n0 -5 -7 -7\n1 2 3 4\n", "4\n2\n0 0 1 1\n5 5 6 6\n2\n0 0 -1 0\n-5 5 -6 6\n2\n0 0 1 -1\n5 -5 6 -6\n2\n0 0 -1 -1\n-5 -5 -6 -6\n", "1\n1\n0 0 1000001000 1000000000\n", "2\n4\n0 0 1 0\n2 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n0 0 5 0\n1 1 1 5\n1 3 1 5\n", "1\n5\n0 0 1 1\n2 2 10 10\n-10 -10 23 23\n-2 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 2 1\n5 5 3 4\n2\n1 0 -2 1\n-5 5 -3 4\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "1\n1\n0 0 1000000000 1100010000\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1000000000 -1000000000 1000000000 1000000000\n2\n1000000000 1000000000 -1000000000 -999999999\n-1000000000 -1000000000 1000000000 1000000000\n", "2\n4\n0 0 1 1\n2 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "3\n2\n0 -1 0 1\n1 0 2 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n1 0 3 -5\n4 0 4 -5\n5 0 5 -5\n", "1\n5\n0 0 1 1\n0 2 10 18\n-10 -10 23 23\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 1 2\n4 5 6 6\n2\n0 0 -1 1\n-5 5 -6 6\n2\n0 0 1 -1\n5 -5 6 -6\n2\n0 0 -1 -1\n-5 -3 -6 -6\n", "4\n2\n0 0 2 1\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n7 -5 3 -4\n", "1\n1\n0 0 1000000000 1100011000\n", "2\n4\n-1 -1 1 0\n2 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "3\n2\n0 -1 0 1\n1 0 2 0\n3\n0 0 1 1\n2 1 1 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n3 0 3 -5\n4 0 4 -5\n5 0 5 -5\n", "1\n5\n0 0 1 1\n0 2 8 10\n-10 -10 23 23\n-5 -10 -7 -7\n1 0 3 4\n", "4\n2\n0 0 4 1\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "2\n4\n-1 0 1 0\n4 0 1 0\n1 1 1 2\n1 3 1 4\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "1\n5\n0 0 1 1\n0 2 8 10\n-17 -10 23 43\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 2 1\n5 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -4 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "2\n4\n-1 -1 1 0\n0 0 1 0\n1 1 1 2\n1 3 0 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "4\n2\n0 0 2 1\n5 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n1 0 -2 -1\n-5 -7 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "4\n2\n0 0 2 0\n5 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n1 0 -1 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "1\n5\n0 0 1 1\n2 2 10 10\n-10 -10 25 23\n0 -5 -7 -7\n1 2 3 4\n", "1\n1\n0 0 1000001000 1000100000\n", "2\n4\n0 0 1 0\n0 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n0 0 5 0\n1 1 1 5\n1 3 1 5\n", "3\n2\n0 0 0 1\n1 0 2 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 1\n2 0 2 3\n0 0 3 -5\n4 0 4 -5\n5 0 5 -5\n", "1\n5\n0 0 2 1\n2 2 10 10\n-10 -10 23 23\n-2 -5 -7 -7\n1 0 3 4\n", "1\n1\n0 0 1100000000 1100010000\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1000000000 -1000000000 1000000000 1000000000\n2\n1000000000 1000000000 -1000000000 -999999999\n-1000000000 -1929941902 1000000000 1000000000\n", "2\n4\n0 0 1 -1\n2 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "3\n2\n0 -1 0 1\n1 0 3 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n1 0 3 -5\n4 0 4 -5\n5 0 5 -5\n", "1\n5\n0 0 1 0\n0 2 10 18\n-10 -10 23 23\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 1 2\n4 5 6 2\n2\n0 0 -1 1\n-5 5 -6 6\n2\n0 0 1 -1\n5 -5 6 -6\n2\n0 0 -1 -1\n-5 -3 -6 -6\n", "1\n1\n1 0 1000000000 1100011000\n", "3\n2\n0 -1 0 1\n1 0 2 0\n3\n0 0 1 1\n2 1 1 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n3 0 3 -5\n4 0 4 -5\n5 1 5 -5\n", "1\n5\n0 0 1 1\n0 2 8 20\n-10 -10 23 23\n-5 -10 -7 -7\n1 0 3 4\n", "2\n4\n-1 0 1 0\n4 0 1 0\n1 1 1 2\n1 3 1 4\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 2 5\n", "1\n5\n0 0 0 1\n0 2 8 10\n-17 -10 23 43\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 2 1\n5 3 3 5\n2\n0 1 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -4 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "2\n4\n-1 -1 1 0\n0 0 1 0\n1 1 1 2\n1 3 0 3\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "4\n2\n0 0 2 1\n5 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n1 -1 -2 -1\n-5 -7 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "4\n2\n0 0 2 0\n0 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n1 0 -1 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "1\n5\n0 0 1 1\n2 2 10 10\n-10 -11 25 23\n0 -5 -7 -7\n1 2 3 4\n", "4\n2\n0 0 2 2\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -5 4\n2\n0 0 -3 -1\n-5 -5 -3 -4\n2\n0 0 2 -1\n5 -5 3 -4\n", "1\n1\n0 -1 1000001000 1000100000\n", "2\n4\n0 0 1 0\n0 0 1 0\n1 1 1 2\n1 3 1 2\n4\n0 0 4 0\n0 0 5 0\n1 1 1 5\n1 3 1 5\n", "1\n5\n0 0 2 1\n2 2 10 10\n-10 -2 23 23\n-2 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 2 1\n5 5 3 4\n2\n1 0 -2 1\n-5 5 -5 4\n2\n0 0 -2 -1\n-5 -5 -6 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "1\n1\n0 -1 1100000000 1100010000\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1000000000 -1073004450 1000000000 1000000000\n2\n1000000000 1000000000 -1000000000 -999999999\n-1000000000 -1929941902 1000000000 1000000000\n", "2\n4\n0 0 1 -1\n2 0 1 0\n1 1 1 2\n1 3 1 4\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "3\n2\n0 -1 0 1\n1 0 3 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n1 0 1 2\n2 0 2 3\n1 0 3 -5\n4 0 4 -3\n5 0 5 -5\n", "1\n5\n0 0 1 0\n0 2 10 18\n-10 0 23 23\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 1 2\n4 5 6 2\n2\n0 0 -1 1\n-5 5 -6 6\n2\n0 0 1 -1\n5 -5 6 -6\n2\n0 0 -1 -1\n-5 0 -6 -6\n", "4\n2\n0 0 2 1\n9 5 3 4\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n7 -5 3 -4\n", "1\n5\n0 0 1 1\n0 2 8 20\n-10 -10 23 23\n-5 -10 -7 -6\n1 0 3 4\n", "2\n4\n-1 0 1 0\n4 0 1 0\n1 1 1 2\n1 3 1 4\n4\n0 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 2 0\n", "1\n5\n0 0 0 1\n1 2 8 10\n-17 -10 23 43\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 2 1\n5 3 3 5\n2\n0 1 -2 1\n-5 5 -3 3\n2\n1 0 -2 -1\n-5 -4 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "2\n4\n-1 -1 1 0\n0 0 1 0\n1 1 1 2\n1 3 0 3\n4\n0 0 5 1\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "4\n2\n0 0 2 0\n0 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n1 0 -1 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n3 0 3 -4\n", "1\n5\n0 0 1 1\n2 2 10 10\n-10 -11 25 23\n0 0 -7 -7\n1 2 3 4\n", "4\n2\n0 0 2 2\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -5 4\n2\n0 0 -3 -1\n-5 -5 -3 -4\n2\n0 0 2 -1\n5 -5 6 -4\n", "1\n1\n1 -1 1000001000 1000100000\n", "2\n4\n0 0 1 0\n0 0 1 0\n1 1 1 2\n1 3 1 2\n4\n1 0 4 0\n0 0 5 0\n1 1 1 5\n1 3 1 5\n", "1\n5\n1 0 2 1\n2 2 10 10\n-10 -2 23 23\n-2 -5 -7 -7\n1 0 3 4\n", "4\n2\n1 0 2 1\n5 5 3 4\n2\n1 0 -2 1\n-5 5 -5 4\n2\n0 0 -2 -1\n-5 -5 -6 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "1\n1\n0 -1 1100000000 1100010100\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1000000000 -1073004450 1000010000 1000000000\n2\n1000000000 1000000000 -1000000000 -999999999\n-1000000000 -1929941902 1000000000 1000000000\n", "2\n4\n0 0 1 -1\n2 0 1 0\n1 1 1 2\n1 3 1 4\n4\n1 0 5 0\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "1\n5\n0 0 1 0\n0 2 12 18\n-10 0 23 23\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 1 2\n4 5 6 2\n2\n0 0 -1 1\n-5 5 -6 6\n2\n0 0 1 0\n5 -5 6 -6\n2\n0 0 -1 -1\n-5 0 -6 -6\n", "4\n2\n0 0 2 1\n9 5 3 4\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n7 -5 3 -7\n", "1\n5\n0 0 1 1\n0 2 8 20\n-10 -10 23 23\n-5 -10 -7 -6\n1 -1 3 4\n", "4\n2\n0 0 2 1\n5 3 3 5\n2\n0 1 -2 1\n-5 5 -3 6\n2\n1 0 -2 -1\n-5 -4 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "2\n4\n-1 -1 1 0\n0 0 1 -1\n1 1 1 2\n1 3 0 3\n4\n0 0 5 1\n1 0 5 0\n1 2 1 5\n1 3 1 5\n", "4\n2\n0 0 2 0\n0 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n1 0 -1 -1\n-5 -5 -4 -4\n2\n0 0 0 -1\n3 0 3 -4\n", "1\n5\n0 0 2 1\n2 2 10 10\n-10 -11 25 23\n0 0 -7 -7\n1 2 3 4\n", "4\n2\n1 0 2 2\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -5 4\n2\n0 0 -3 -1\n-5 -5 -3 -4\n2\n0 0 2 -1\n5 -5 6 -4\n", "1\n1\n1 0 1000001000 1000100000\n", "2\n4\n0 0 1 0\n0 0 1 0\n1 1 1 2\n1 3 1 2\n4\n1 0 4 0\n0 0 6 0\n1 1 1 5\n1 3 1 5\n", "1\n5\n1 0 2 1\n2 0 10 10\n-10 -2 23 23\n-2 -5 -7 -7\n1 0 3 4\n", "4\n2\n1 0 2 1\n5 5 3 4\n2\n1 0 -2 1\n-5 9 -5 4\n2\n0 0 -2 -1\n-5 -5 -6 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1000000000 -1073004450 1000010000 1000100000\n2\n1000000000 1000000000 -1000000000 -999999999\n-1000000000 -1929941902 1000000000 1000000000\n", "2\n4\n0 0 1 -1\n2 0 1 0\n1 1 1 2\n1 3 1 4\n4\n1 0 5 0\n1 0 5 1\n1 2 1 5\n1 3 1 5\n", "3\n2\n1 -1 0 1\n1 0 3 0\n3\n0 0 1 1\n1 1 0 0\n1 0 2 0\n6\n0 0 0 1\n0 0 1 2\n2 0 2 3\n1 0 3 -5\n4 0 4 -3\n5 0 5 -5\n", "1\n5\n0 -1 1 0\n0 2 12 18\n-10 0 23 23\n-5 -5 -7 -7\n1 0 3 4\n", "4\n2\n0 0 1 2\n4 5 6 2\n2\n0 0 -1 1\n-5 5 -6 6\n2\n0 0 1 0\n5 -5 6 -6\n2\n0 0 -1 -1\n0 0 -6 -6\n", "4\n2\n0 0 3 1\n9 5 3 4\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n7 -5 3 -7\n", "1\n5\n0 0 1 1\n0 2 8 22\n-10 -10 23 23\n-5 -10 -7 -6\n1 -1 3 4\n", "4\n2\n0 0 2 1\n5 3 3 5\n2\n0 1 -2 1\n-5 5 -6 6\n2\n1 0 -2 -1\n-5 -4 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "4\n2\n0 0 2 0\n0 3 3 5\n2\n0 0 -2 1\n-5 5 -3 3\n2\n1 0 -1 -1\n-5 -5 -3 -8\n2\n0 0 0 -1\n3 0 3 -4\n", "1\n5\n0 0 2 1\n2 4 10 10\n-10 -11 25 23\n0 0 -7 -7\n1 2 3 4\n", "4\n2\n1 0 2 2\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -5 4\n2\n0 0 -3 -1\n-5 -5 -3 -4\n2\n0 -1 2 -1\n5 -5 6 -4\n", "1\n1\n1 0 1000001000 1000101000\n", "2\n4\n0 0 1 0\n0 0 1 0\n1 1 1 2\n1 3 1 2\n4\n1 0 4 0\n1 0 6 0\n1 1 1 5\n1 3 1 5\n", "1\n5\n1 0 2 1\n2 0 10 10\n-15 -2 23 23\n-2 -5 -7 -7\n1 0 3 4\n", "4\n2\n1 0 2 1\n5 5 3 4\n2\n1 0 -2 1\n-5 9 -5 4\n2\n1 0 -2 -1\n-5 -5 -6 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1000000000 -1073004450 1000010100 1000100000\n2\n1000000000 1000000000 -1000000000 -999999999\n-1000000000 -1929941902 1000000000 1000000000\n", "3\n2\n1 -1 0 1\n1 0 3 0\n3\n0 0 1 1\n1 1 0 0\n1 1 2 0\n6\n0 0 0 1\n0 0 1 2\n2 0 2 3\n1 0 3 -5\n4 0 4 -3\n5 0 5 -5\n", "4\n2\n0 0 1 2\n4 5 6 2\n2\n0 0 -1 1\n-5 5 -6 6\n2\n0 0 1 0\n5 -5 6 -6\n2\n0 0 -1 -1\n0 0 -6 -1\n", "4\n2\n0 -1 3 1\n9 5 3 4\n2\n0 0 -2 1\n-5 5 -3 3\n2\n0 0 -2 -1\n-5 -5 -3 -4\n2\n0 0 0 -1\n7 -5 3 -7\n", "1\n5\n0 0 1 1\n0 2 8 22\n-10 -10 23 44\n-5 -10 -7 -6\n1 -1 3 4\n", "4\n2\n0 0 2 1\n9 3 3 5\n2\n0 1 -2 1\n-5 5 -6 6\n2\n1 0 -2 -1\n-5 -4 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "1\n5\n0 0 2 1\n2 4 10 10\n-10 -11 25 23\n0 0 -7 -6\n1 2 3 4\n", "4\n2\n1 0 2 2\n5 5 3 4\n2\n0 0 -2 1\n-5 5 -5 4\n2\n0 0 -3 -1\n-5 -5 -3 -4\n2\n1 -1 2 -1\n5 -5 6 -4\n", "1\n1\n1 0 1000001000 1100101000\n", "2\n4\n0 0 1 0\n-1 0 1 0\n1 1 1 2\n1 3 1 2\n4\n1 0 4 0\n1 0 6 0\n1 1 1 5\n1 3 1 5\n", "1\n5\n1 0 2 0\n2 0 10 10\n-15 -2 23 23\n-2 -5 -7 -7\n1 0 3 4\n", "4\n2\n1 0 2 1\n5 5 1 4\n2\n1 0 -2 1\n-5 9 -5 4\n2\n1 0 -2 -1\n-5 -5 -6 -4\n2\n0 0 0 -1\n5 -5 3 -4\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1000000000 -1073004450 1000010100 1000100000\n2\n1000000000 1000000000 -1000000000 -999999999\n-1854126016 -1929941902 1000000000 1000000000\n", "4\n2\n0 0 1 2\n4 5 6 2\n2\n0 0 -1 1\n-5 5 -7 6\n2\n0 0 1 0\n5 -5 6 -6\n2\n0 0 -1 -1\n0 0 -6 -1\n", "1\n5\n0 0 1 0\n0 2 8 22\n-10 -10 23 44\n-5 -10 -7 -6\n1 -1 3 4\n", "4\n2\n0 0 2 1\n9 3 3 5\n2\n0 1 -2 1\n-5 5 -6 6\n2\n1 0 -2 -1\n-5 -3 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "1\n1\n1 -1 1000001000 1100101000\n", "1\n5\n1 0 2 0\n2 0 10 10\n-15 -3 23 23\n-2 -5 -7 -7\n1 0 3 4\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1000000000 -1073004450 1000010100 1000100000\n2\n1100000000 1000000000 -1000000000 -999999999\n-1854126016 -1929941902 1000000000 1000000000\n", "4\n2\n0 0 1 2\n4 5 6 2\n2\n0 0 0 1\n-5 5 -7 6\n2\n0 0 1 0\n5 -5 6 -6\n2\n0 0 -1 -1\n0 0 -6 -1\n", "1\n5\n0 0 1 0\n0 4 8 22\n-10 -10 23 44\n-5 -10 -7 -6\n1 -1 3 4\n", "4\n2\n0 0 2 1\n9 3 3 5\n2\n0 1 -2 1\n-5 5 -6 6\n2\n1 0 -2 -1\n-6 -3 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "1\n1\n1 -1 1000001100 1100101000\n", "1\n5\n1 0 2 0\n2 0 10 10\n-15 -3 23 23\n-2 -5 -7 -3\n1 0 3 4\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1000000000 -1073004450 1000010100 1000100000\n2\n1100000000 1000000000 -1000000000 -1742607922\n-1854126016 -1929941902 1000000000 1000000000\n", "4\n2\n0 0 1 2\n4 5 6 2\n2\n0 0 0 1\n-5 5 -7 6\n2\n-1 0 1 0\n5 -5 6 -6\n2\n0 0 -1 -1\n0 0 -6 -1\n", "1\n5\n0 0 1 0\n0 4 8 22\n-10 -10 23 44\n-5 -10 -4 -6\n1 -1 3 4\n", "4\n2\n0 0 2 1\n9 3 3 5\n2\n0 1 -2 1\n-5 5 0 6\n2\n1 0 -2 -1\n-6 -3 -3 -4\n2\n0 0 0 -1\n3 -5 3 -4\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1732595277 -1073004450 1000010100 1000100000\n2\n1100000000 1000000000 -1000000000 -1742607922\n-1854126016 -1929941902 1000000000 1000000000\n", "4\n2\n0 0 1 2\n4 5 6 2\n2\n0 0 0 1\n-5 5 -7 6\n2\n-1 0 1 0\n5 -5 6 -6\n2\n0 0 -1 -1\n0 0 -6 0\n", "1\n5\n0 0 1 0\n0 4 8 22\n-10 -10 23 44\n-5 -10 -4 -6\n1 -2 3 4\n", "4\n2\n0 0 2 1\n9 3 3 5\n2\n0 1 -2 1\n-5 5 0 6\n2\n1 0 -2 -1\n-6 -3 -3 -4\n2\n0 0 0 -1\n3 -5 1 -4\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1732595277 -1073004450 1000010100 1000100000\n2\n1100000000 1000000000 -1000000000 -1742607922\n-1594081339 -1929941902 1000000000 1000000000\n", "4\n2\n-1 0 1 2\n4 5 6 2\n2\n0 0 0 1\n-5 5 -7 6\n2\n-1 0 1 0\n5 -5 6 -6\n2\n0 0 -1 -1\n0 0 -6 0\n", "1\n5\n0 0 1 0\n0 4 8 22\n-10 -10 23 44\n-5 -17 -4 -6\n1 -2 3 4\n", "4\n2\n0 0 2 1\n9 3 3 5\n2\n0 1 -2 1\n-5 5 0 6\n2\n1 0 -2 -1\n-6 -2 -3 -4\n2\n0 0 0 -1\n3 -5 1 -4\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1732595277 -1073004450 1000010100 1000100000\n2\n1000000000 1000000000 -1000000000 -1742607922\n-1594081339 -1929941902 1000000000 1000000000\n", "4\n2\n-1 0 1 2\n4 5 6 2\n2\n0 -1 0 1\n-5 5 -7 6\n2\n-1 0 1 0\n5 -5 6 -6\n2\n0 0 -1 -1\n0 0 -6 0\n", "1\n5\n0 0 1 0\n0 4 13 22\n-10 -10 23 44\n-5 -17 -4 -6\n1 -2 3 4\n", "4\n2\n0 0 2 1\n9 3 3 5\n2\n0 1 -2 1\n-5 9 0 6\n2\n1 0 -2 -1\n-6 -2 -3 -4\n2\n0 0 0 -1\n3 -5 1 -4\n", "2\n2\n1000000000 1000000000 -1000000000 -1685444969\n-1732595277 -1073004450 1000010100 1000100000\n2\n1000000000 1000000000 -1000000000 -1742607922\n-1594081339 -1130701785 1000000000 1000000000\n", "4\n2\n-1 0 1 2\n4 5 6 2\n2\n0 -1 0 1\n-5 5 -7 6\n2\n-1 0 1 0\n5 -5 6 -6\n2\n0 0 -1 -1\n0 0 -7 0\n", "1\n5\n0 0 1 0\n0 4 13 22\n-10 -10 23 44\n-2 -17 -4 -6\n1 -2 3 4\n", "4\n2\n0 0 2 1\n9 3 3 4\n2\n0 1 -2 1\n-5 9 0 6\n2\n1 0 -2 -1\n-6 -2 -3 -4\n2\n0 0 0 -1\n3 -5 1 -4\n", "4\n2\n-1 0 1 2\n4 5 6 2\n2\n0 -1 0 1\n-5 5 -7 6\n2\n-1 0 1 0\n5 -5 6 -4\n2\n0 0 -1 -1\n0 0 -7 0\n", "1\n5\n0 0 1 0\n0 4 13 22\n-10 -10 23 44\n-2 -17 -4 -6\n1 -2 3 2\n", "4\n2\n0 0 2 1\n9 3 3 4\n2\n0 1 -2 1\n-6 9 0 6\n2\n1 0 -2 -1\n-6 -2 -3 -4\n2\n0 0 0 -1\n3 -5 1 -4\n", "4\n2\n-1 0 1 1\n4 5 6 2\n2\n0 -1 0 1\n-5 5 -7 6\n2\n-1 0 1 0\n5 -5 6 -4\n2\n0 0 -1 -1\n0 0 -7 0\n", "1\n5\n0 0 1 0\n0 4 13 22\n-10 -10 23 44\n-2 -17 -2 -6\n1 -2 3 2\n", "4\n2\n0 0 2 1\n9 3 3 4\n2\n0 1 -2 1\n-6 9 0 6\n2\n1 0 -2 -1\n-6 -2 -3 -4\n2\n-1 0 0 -1\n3 -5 1 -4\n", "4\n2\n-1 0 1 1\n4 5 6 2\n2\n0 -1 0 1\n-5 5 -7 6\n2\n-1 0 1 0\n5 -5 6 -4\n2\n-1 0 -1 -1\n0 0 -7 0\n", "1\n5\n0 1 1 0\n0 4 13 22\n-10 -10 23 44\n-2 -17 -2 -6\n1 -2 3 2\n", "4\n2\n0 0 2 1\n9 3 3 4\n2\n0 1 -2 1\n-6 9 0 6\n2\n1 0 -2 -1\n-6 -2 -3 -3\n2\n-1 0 0 -1\n3 -5 1 -4\n", "4\n2\n-1 0 1 1\n4 5 6 2\n2\n0 -1 0 1\n-5 5 -7 6\n2\n-1 0 1 0\n5 -5 6 -4\n2\n-1 1 -1 -1\n0 0 -7 0\n", "1\n5\n0 1 1 0\n0 4 13 22\n-10 -10 23 17\n-2 -17 -2 -6\n1 -2 3 2\n", "4\n2\n0 0 2 1\n9 3 3 4\n2\n0 1 -2 1\n-6 9 0 6\n2\n1 0 -2 -1\n-6 -2 -3 -3\n2\n-1 -1 0 -1\n3 -5 1 -4\n"], "output": ["3\n", "0\n0\n0\n0\n", "1\n1\n1\n0\n", "0\n", "0\n0\n", "2\n0\n", "0\n1\n9\n", "2\n", "1\n0\n1\n0\n", "0\n0\n9\n", "1\n0\n1\n1\n", "0\n0\n1\n1\n", "1\n0\n", "1\n", "0\n0\n0\n1\n", "1\n1\n0\n1\n", "0\n1\n6\n", "0\n1\n0\n1\n", "1\n0\n0\n0\n", "0\n0\n1\n0\n", "0\n1\n4\n", "0\n1\n", "0\n0\n4\n", "0\n1\n1\n1\n", "0\n1\n1\n0\n", "2\n1\n", "0\n0\n6\n", "0\n1\n3\n", "0\n2\n9\n", "1\n1\n0\n0\n", "0\n1\n2\n", "1\n1\n", "0\n0\n3\n", "0\n1\n0\n0\n", "0\n0\n0\n0\n", "0\n", "2\n0\n", "3\n", "0\n0\n0\n0\n", "2\n0\n", "2\n", "0\n0\n1\n1\n", "0\n0\n", "0\n0\n1\n1\n", "0\n", "0\n0\n0\n0\n", "0\n", "2\n0\n", "0\n", "1\n0\n1\n0\n", "0\n", "0\n0\n", "1\n0\n", "0\n1\n6\n", "2\n", "0\n0\n0\n0\n", "1\n0\n1\n0\n", "0\n", "1\n0\n", "0\n1\n9\n", "0\n", "0\n0\n1\n1\n", "1\n0\n", "2\n", "0\n0\n0\n1\n", "0\n0\n", "0\n0\n0\n1\n", "0\n0\n1\n1\n", "0\n", "0\n", "1\n0\n", "0\n1\n6\n", "0\n", "0\n", "0\n0\n", "1\n0\n", "0\n1\n6\n", "1\n", "0\n0\n0\n0\n", "0\n", "0\n1\n9\n", "0\n", "1\n0\n", "1\n", "0\n0\n0\n1\n", "1\n0\n", "0\n0\n0\n1\n", "0\n0\n1\n1\n", "0\n", "0\n0\n0\n1\n", "0\n", "1\n0\n", "0\n", "1\n0\n0\n0\n", "0\n", "0\n0\n", "0\n0\n", "0\n1\n6\n", "0\n", "0\n0\n0\n0\n", "0\n0\n1\n0\n", "0\n", "1\n0\n", "0\n", "0\n0\n0\n1\n", "1\n0\n", "0\n0\n1\n0\n", "3\n", "0\n0\n0\n0\n", "0\n", "1\n0\n", "0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n", "0\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n1\n0\n", "0\n", "0\n0\n0\n1\n", "0\n0\n", "0\n0\n0\n0\n", "2\n", "0\n0\n0\n0\n", "0\n", "1\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n", "0\n0\n", "0\n1\n4\n", "1\n", "0\n0\n0\n0\n", "0\n0\n1\n0\n", "0\n", "0\n0\n0\n1\n", "0\n0\n0\n0\n", "1\n", "0\n0\n0\n0\n", "0\n", "1\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n", "0\n1\n4\n", "0\n0\n0\n0\n", "0\n0\n1\n0\n", "0\n", "0\n0\n0\n1\n", "0\n", "0\n0\n0\n0\n", "0\n", "1\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n1\n", "0\n", "0\n", "0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n1\n", "0\n", "0\n", "0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n1\n", "0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n0\n", "0\n0\n0\n0\n", "0\n", "0\n0\n0\n0\n"]}, "short_description": "1. One-sentence summary  \nCount the number of unordered pairs among a set of 2D displacement vectors that are exact opposites of each other.\n\n2. Core algorithmic approach  \nUse a hash\u2010map (frequency counter) to store each normalized direction vector, then for each unique direction (x,y) add freq[(x,y)] \u00d7 freq[\u2212x,\u2212y], divide by two to account for unordered pairing.  \n\n3. Reusable components  \n- Vector normalization by gcd(dx,dy) to reduce any nonzero integer vector to its primitive direction.  \n- Frequency counting via a hash\u2010map (e.g., Python\u2019s Counter) to group identical keys.  \n- Complementary key matching and combinatorial pair counting (sum of products of matching frequencies, adjusted for unordered pairs)."}
{"name": "617_D. Polyline", "description": "There are three points marked on the coordinate plane. The goal is to make a simple polyline, without self-intersections and self-touches, such that it passes through all these points. Also, the polyline must consist of only segments parallel to the coordinate axes. You are to find the minimum number of segments this polyline may consist of.\n\nInput\n\nEach of the three lines of the input contains two integers. The i-th line contains integers xi and yi ( - 109 \u2264 xi, yi \u2264 109) \u2014 the coordinates of the i-th point. It is guaranteed that all points are distinct.\n\nOutput\n\nPrint a single number \u2014 the minimum possible number of segments of the polyline.\n\nExamples\n\nInput\n\n1 -1\n1 1\n1 2\n\n\nOutput\n\n1\n\n\nInput\n\n-1 -1\n-1 3\n4 3\n\n\nOutput\n\n2\n\n\nInput\n\n1 1\n2 3\n3 2\n\n\nOutput\n\n3\n\nNote\n\nThe variant of the polyline in the first sample: <image> The variant of the polyline in the second sample: <image> The variant of the polyline in the third sample: <image>", "solution": "\"\"\"n=int(input())\nx=list(map(int, input().split()))\nc=0\npro=1\nfor i in range(n):\n    if x[i]==1:\n        c+=1\n        if c==1:\n            old=i\n        elif c>1:\n            new=i\n            pro*=(new-old)\n            old=new\nprint(pro)\n\"\"\"\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\nx,y,z=1,1,0\nif a[0]==b[0] or a[0]==c[0] or b[0]==c[0]:\n    x=2\n    if a[0]==b[0] and a[0]==c[0] and b[0]==c[0]:\n        x=3\n    else:\n        if a[0]==b[0]:\n            if c[1] in range(min(a[1],b[1]),max(a[1],b[1])):\n                z+=1\n        elif a[0]==c[0]:\n            if b[1] in range(min(a[1],c[1]),max(a[1],c[1])):\n                z+=1\n        elif b[0]==c[0]:\n            if a[1] in range(min(b[1],c[1]),max(b[1],c[1])):\n                z+=1\nif a[1]==b[1] or a[1]==c[1] or b[1]==c[1]:\n    y=2\n    if a[1]==b[1] and a[1]==c[1] and b[1]==c[1]:\n        y=3\n    else:\n        if a[1]==b[1]:\n            if c[0] in range(min(a[0],b[0]),max(a[0],b[0])):\n                z+=1\n        elif a[1]==c[1]:\n            if b[0] in range(min(a[0],c[0]),max(a[0],c[0])):\n                z+=1\n        elif b[1]==c[1]:\n            if a[0] in range(min(b[0],c[0]),max(b[0],c[0])):\n                z+=1\nif x*y==1:\n    print(3)\nelif x*y==3:\n    print(1)\nelif x*y==4:\n    print(2)\nelse:\n    if z==1:\n        print(3)\n    else:\n        print(2)", "difficulty": 10, "public_tests": {"input": ["-1 -1\n-1 3\n4 3\n", "1 -1\n1 1\n1 2\n", "1 1\n2 3\n3 2\n"], "output": ["2\n", "1\n", "3\n"]}, "private_tests": {"input": ["451140644 -552066345\n451140644 97091285\n643901618 -552066345\n", "755966021 -977934315\n-693932164 -977934315\n780740735 341305212\n", "-322848128 276304614\n-228010033 -361111909\n-137761352 276304614\n", "-76151678 894169660\n125930178 -434000890\n259457432 894169660\n", "-225194635 772128906\n-9640584 -636384130\n-9640584 772128906\n", "976530519 -932140580\n418643692 -845327922\n976530519 -845327922\n", "353770247 742032246\n391091420 742032246\n113505964 105784687\n", "-865523810 66779936\n-865523810 879328244\n551305309 495319633\n", "997183648 -430699196\n555277138 -34246328\n962365828 -34246328\n", "-636111887 -755135651\n-411477790 -755135651\n-540985255 -808506689\n", "-960958311 -757098377\n-960958311 -153001649\n-960958311 567188828\n", "-160622039 260994846\n-981120537 -453711571\n-899331084 260994846\n", "306134424 46417066\n-503106271 46417066\n-286564055 46417066\n", "437180709 -829478932\n-775395571 -605325538\n-775395571 298582830\n", "648743183 -329867260\n680098341 -988370978\n594847608 -988370978\n", "134061442 -132620069\n-215253638 -132620069\n134061442 112298311\n", "-664035427 -710202693\n527339005 -8499215\n414350757 -966228511\n", "143495802 -137905447\n-922193757 -660311216\n-922193757 659147504\n", "487214658 518775922\n487214658 -869675495\n487214658 -106351878\n", "58011742 175214671\n-853914900 175214671\n-245334045 175214671\n", "-504439520 685616264\n-575788481 178485261\n-575788481 -998856787\n", "361702696 891912906\n742864513 891912906\n361702696 616808838\n", "-397991545 510063044\n347795937 510063044\n-397991545 944965447\n", "-510073119 -991063686\n583272581 -991063686\n623462417 -991063686\n", "158219297 -796751401\n464911767 780525998\n25054022 780525998\n", "439039590 -419754858\n-16966935 -979701468\n276072230 -979701468\n", "-422276230 -422225325\n-422276230 -544602611\n-282078856 -544602611\n", "403402592 55070913\n-703565711 55070913\n-141194091 -66977045\n", "-931665727 768789996\n234859675 808326671\n-931665727 879145023\n", "-609937696 436598127\n-189924209 241399893\n-883780251 296798182\n", "-386452587 -689699105\n-51244121 425743943\n736584134 425743943\n", "950548287 766404840\n995400182 976310818\n950548287 976310818\n", "-985816934 85994062\n490801388 171721095\n-985816934 265995176\n", "394482565 -5842724\n-120921456 -5842724\n474336847 -666083693\n", "-485581506 973584319\n-762068259 670458753\n-485581506 -661338021\n", "899431605 238425805\n899431605 339067352\n940909482 333612216\n", "446038601 -598441655\n446038601 -781335731\n-446725217 -862937359\n", "443336387 317738308\n-731455437 682073969\n443336387 -487472781\n", "-759091260 362077211\n-759091260 123892252\n-79714253 226333388\n", "621619191 -223521454\n621619191 -746436580\n-886355353 -920817120\n", "-280166733 -215262264\n-257537874 640677716\n-288509263 640677716\n", "-495060442 -389175621\n79351129 -146107545\n-495060442 59059286\n", "150098962 830455428\n-70279563 -160635038\n-721135733 -627254059\n", "1000000000 -1000000000\n1000000000 1000000000\n-1000000000 -1000000000\n", "-954908844 156002304\n-954908844 507051490\n-377680300 878914758\n", "127447697 -311048187\n-644646254 135095006\n127447697 135095006\n", "-354329375 -222798859\n-636793392 28344958\n989602966 -222798859\n", "791725263 -592101263\n791725263 -401786481\n953501658 -699705540\n", "-494824697 -964138793\n-494824697 671151995\n-24543485 877798954\n", "512806478 -76305905\n51445888 -189759697\n512806478 -189759697\n", "-485970125 725016060\n-972748484 -602121312\n183987969 -602121312\n"], "output": ["2\n", "2\n", "3\n", "3\n", "2\n", "2\n", "2\n", "3\n", "2\n", "3\n", "1\n", "2\n", "1\n", "2\n", "3\n", "2\n", "3\n", "3\n", "1\n", "1\n", "2\n", "2\n", "2\n", "1\n", "3\n", "2\n", "2\n", "3\n", "3\n", "3\n", "2\n", "2\n", "3\n", "2\n", "3\n", "3\n", "2\n", "2\n", "3\n", "2\n", "3\n", "3\n", "3\n", "2\n", "2\n", "2\n", "2\n", "2\n", "2\n", "2\n", "3\n"]}, "generated_tests": {"input": ["451140644 -552066345\n451140644 97091285\n251550336 -552066345\n", "755966021 -1454631188\n-693932164 -977934315\n780740735 341305212\n", "-322848128 276304614\n-271095378 -361111909\n-137761352 276304614\n", "-74226275 894169660\n125930178 -434000890\n259457432 894169660\n", "-225194635 772128906\n-9640584 -435940998\n-9640584 772128906\n", "976530519 -490155976\n418643692 -845327922\n976530519 -845327922\n", "353770247 742032246\n391091420 742032246\n124384895 105784687\n", "-375923081 66779936\n-865523810 879328244\n551305309 495319633\n", "997183648 -430699196\n555277138 -23367910\n962365828 -34246328\n", "-636111887 -755135651\n-411477790 -755135651\n-357543384 -808506689\n", "-960958311 -757098377\n-960958311 -153001649\n-379233962 567188828\n", "-160622039 260994846\n-981120537 -453711571\n-713402163 260994846\n", "306134424 46417066\n-503106271 46417066\n-286564055 58703596\n", "437180709 -829478932\n-775395571 -605325538\n-944766839 298582830\n", "648743183 -329867260\n680098341 -1029920867\n594847608 -988370978\n", "134061442 -132620069\n-250457608 -132620069\n134061442 112298311\n", "-664035427 -710202693\n527339005 -8499215\n414350757 -1282376446\n", "143495802 -137905447\n-922193757 -1066056371\n-922193757 659147504\n", "487214658 518775922\n487214658 -869675495\n556680412 -106351878\n", "58011742 175214671\n-853914900 175214671\n-245334045 126713698\n", "-504439520 685616264\n-834903211 178485261\n-575788481 -998856787\n", "361702696 891912906\n283087813 891912906\n361702696 616808838\n", "-397991545 510063044\n347795937 510063044\n-397991545 719202196\n", "-510073119 -991063686\n583272581 -991063686\n623462417 -1284760862\n", "158219297 -796751401\n464911767 780525998\n23744007 780525998\n", "439039590 -419754858\n-16966935 -979701468\n515756999 -979701468\n", "-422276230 -422225325\n-422276230 -10425084\n-282078856 -544602611\n", "403402592 1730430\n-703565711 55070913\n-141194091 -66977045\n", "-931665727 768789996\n234859675 808326671\n-54277961 879145023\n", "-609937696 436598127\n-189924209 241399893\n-883780251 8936710\n", "-386452587 -689699105\n-51244121 204599500\n736584134 425743943\n", "950548287 766404840\n995400182 976310818\n950548287 444517554\n", "-985816934 85994062\n490801388 7834283\n-985816934 265995176\n", "394482565 -5078927\n-120921456 -5842724\n474336847 -666083693\n", "-485581506 973584319\n-762068259 1320274858\n-485581506 -661338021\n", "1134325902 238425805\n899431605 339067352\n940909482 333612216\n", "446038601 -598441655\n446038601 -845757960\n-446725217 -862937359\n", "443336387 103686293\n-731455437 682073969\n443336387 -487472781\n", "-759091260 362077211\n-759091260 123892252\n-79714253 265695689\n", "621619191 -391908999\n621619191 -746436580\n-886355353 -920817120\n", "-280166733 -215262264\n-257537874 894389973\n-288509263 640677716\n", "-495060442 -389175621\n79351129 -76872565\n-495060442 59059286\n", "232707279 830455428\n-70279563 -160635038\n-721135733 -627254059\n", "1000000000 -1000000000\n1000000000 1000000010\n-1000000000 -1000000000\n", "-1320576370 156002304\n-954908844 507051490\n-377680300 878914758\n", "127447697 -311048187\n-644646254 135095006\n127447697 158492621\n", "-446291123 -222798859\n-636793392 28344958\n989602966 -222798859\n", "791725263 -592101263\n791725263 -401786481\n600716039 -699705540\n", "-494824697 -964138793\n-162442946 671151995\n-24543485 877798954\n", "512806478 -76305905\n51445888 -189759697\n997072418 -189759697\n", "-485970125 725016060\n-972748484 -1089922678\n183987969 -602121312\n", "-1 -1\n-1 3\n4 1\n", "1 1\n2 3\n3 0\n", "870238450 -552066345\n451140644 97091285\n251550336 -552066345\n", "308484540 -1454631188\n-693932164 -977934315\n780740735 341305212\n", "-65420065 276304614\n-271095378 -361111909\n-137761352 276304614\n", "-74226275 894169660\n125930178 -600049191\n259457432 894169660\n", "-101191047 772128906\n-9640584 -435940998\n-9640584 772128906\n", "976530519 -490155976\n418643692 -845327922\n985690534 -845327922\n", "353770247 742032246\n176828341 742032246\n124384895 105784687\n", "-375923081 66779936\n-865523810 1198031188\n551305309 495319633\n", "997183648 -797796898\n555277138 -23367910\n962365828 -34246328\n", "-960958311 -757098377\n-960958311 -153001649\n-694649037 567188828\n", "-160622039 260994846\n-981120537 -396441457\n-713402163 260994846\n", "306134424 46417066\n-735478463 46417066\n-286564055 58703596\n", "437180709 -829478932\n-775395571 -439148548\n-944766839 298582830\n", "648743183 -329867260\n680098341 -1029920867\n594847608 -624427793\n", "134061442 -132620069\n-250457608 -132620069\n185626136 112298311\n", "-1311891797 -710202693\n527339005 -8499215\n414350757 -1282376446\n", "143495802 -137905447\n-922193757 -755501410\n-922193757 659147504\n", "956543406 518775922\n487214658 -869675495\n556680412 -106351878\n", "58011742 175214671\n-925033848 175214671\n-245334045 126713698\n", "-504439520 685616264\n-834903211 178485261\n-1111554203 -998856787\n", "361702696 926434055\n283087813 891912906\n361702696 616808838\n", "-397991545 510063044\n347795937 373812506\n-397991545 719202196\n", "-510073119 -1632196911\n583272581 -991063686\n623462417 -1284760862\n", "246504827 -796751401\n464911767 780525998\n23744007 780525998\n", "439039590 -419754858\n-16966935 -1317427273\n515756999 -979701468\n", "-422276230 -422225325\n-422276230 -15036895\n-282078856 -544602611\n", "403402592 1730430\n-703565711 102527568\n-141194091 -66977045\n", "-931665727 768789996\n76910065 808326671\n-54277961 879145023\n", "-1150215996 436598127\n-189924209 241399893\n-883780251 8936710\n", "-480970383 -689699105\n-51244121 204599500\n736584134 425743943\n", "950548287 766404840\n995400182 1278170365\n950548287 444517554\n", "-985816934 85994062\n490801388 7834283\n-985816934 229242656\n", "394482565 -5078927\n-120921456 -5842724\n510859798 -666083693\n", "-811354043 973584319\n-762068259 1320274858\n-485581506 -661338021\n", "1134325902 238425805\n899431605 339067352\n1202225609 333612216\n", "446038601 -363596674\n446038601 -845757960\n-446725217 -862937359\n", "443336387 103686293\n-731455437 682073969\n150548100 -487472781\n", "-759091260 362077211\n-759091260 99534518\n-79714253 265695689\n"], "output": ["2\n", "3\n", "3\n", "3\n", "2\n", "2\n", "2\n", "3\n", "3\n", "2\n", "2\n", "2\n", "3\n", "3\n", "3\n", "2\n", "3\n", "3\n", "3\n", "3\n", "3\n", "2\n", "2\n", "2\n", "3\n", "3\n", "2\n", "3\n", "3\n", "3\n", "3\n", "2\n", "2\n", "3\n", "2\n", "3\n", "2\n", "2\n", "3\n", "2\n", "3\n", "3\n", "3\n", "2\n", "3\n", "3\n", "2\n", "2\n", "3\n", "3\n", "3\n", "3\n", "3\n", "3\n", "3\n", "2\n", "3\n", "2\n", "3\n", "2\n", "3\n", "3\n", "2\n", "2\n", "3\n", "3\n", "3\n", "2\n", "3\n", "3\n", "3\n", "3\n", "3\n", "3\n", "2\n", "3\n", "3\n", "3\n", "2\n", "3\n", "3\n", "3\n", "3\n", "2\n", "2\n", "3\n", "3\n", "3\n", "2\n", "3\n", "3\n"]}, "short_description": "1. One-sentence summary  \nDetermine, in constant time, the minimum number of axis-aligned line segments needed to cover three given points on a 2D grid.\n\n2. Core algorithmic approach  \nCase-based geometric classification (constant\u2010time checks for equal x or y coordinates and whether the third point lies between two colinear points).\n\n3. Reusable components  \n- Axis-aligned colinearity test: checking if two points share the same x or y coordinate.  \n- Between-range test: determining if a coordinate value lies strictly between two other values via min/max comparisons.  \n- Conditional case decomposition: structuring exhaustive branch logic to handle overlaps and intersections in O(1) time."}
{"name": "165_A. Supercentral Point", "description": "One day Vasya painted a Cartesian coordinate system on a piece of paper and marked some set of points (x1, y1), (x2, y2), ..., (xn, yn). Let's define neighbors for some fixed point from the given set (x, y): \n\n  * point (x', y') is (x, y)'s right neighbor, if x' > x and y' = y\n  * point (x', y') is (x, y)'s left neighbor, if x' < x and y' = y\n  * point (x', y') is (x, y)'s lower neighbor, if x' = x and y' < y\n  * point (x', y') is (x, y)'s upper neighbor, if x' = x and y' > y\n\n\n\nWe'll consider point (x, y) from the given set supercentral, if it has at least one upper, at least one lower, at least one left and at least one right neighbor among this set's points.\n\nVasya marked quite many points on the paper. Analyzing the picture manually is rather a challenge, so Vasya asked you to help him. Your task is to find the number of supercentral points in the given set.\n\nInput\n\nThe first input line contains the only integer n (1 \u2264 n \u2264 200) \u2014 the number of points in the given set. Next n lines contain the coordinates of the points written as \"x y\" (without the quotes) (|x|, |y| \u2264 1000), all coordinates are integers. The numbers in the line are separated by exactly one space. It is guaranteed that all points are different.\n\nOutput\n\nPrint the only number \u2014 the number of supercentral points of the given set.\n\nExamples\n\nInput\n\n8\n1 1\n4 2\n3 1\n1 2\n0 2\n0 1\n1 0\n1 3\n\n\nOutput\n\n2\n\n\nInput\n\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample the supercentral points are only points (1, 1) and (1, 2).\n\nIn the second sample there is one supercental point \u2014 point (0, 0).", "solution": "n=int(input())\na=[]\nfor i in range(0,n):\n    a.append([int(i) for i in input().split()])\nans=0\nfor i in range(0,n):\n    c1=0\n    c2=0\n    c3=0\n    c4=0\n    for j in range(0,n):\n        if a[i][0]>a[j][0] and a[i][1]==a[j][1]:\n            c1+=1\n        elif a[i][0]<a[j][0] and a[i][1]==a[j][1]:\n            c2+= 1\n        elif a[i][0]==a[j][0] and a[i][1]<a[j][1]:\n            c3+= 1\n        elif a[i][0]==a[j][0] and a[i][1]>a[j][1]:\n            c4+= 1\n    if c1>=1 and c2>=1 and c3>=1 and c4>=1:\n        ans+=1\nprint(ans)", "difficulty": 7, "public_tests": {"input": ["8\n1 1\n4 2\n3 1\n1 2\n0 2\n0 1\n1 0\n1 3\n", "5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n"], "output": ["2\n", "1\n"]}, "private_tests": {"input": ["1\n487 550\n", "25\n-651 897\n916 897\n-651 -808\n-748 301\n-734 414\n-651 -973\n-734 897\n916 -550\n-758 414\n916 180\n-758 -808\n-758 -973\n125 -550\n125 -973\n125 301\n916 414\n-748 -808\n-651 301\n-734 301\n-307 897\n-651 -550\n-651 414\n125 -808\n-748 -550\n916 -808\n", "9\n-565 -752\n-184 723\n-184 -752\n-184 1\n950 723\n-565 723\n950 -752\n950 1\n-565 1\n", "21\n-813 -11\n486 254\n685 254\n-708 254\n-55 -11\n-671 -191\n486 -11\n-671 -11\n685 -11\n685 -191\n486 -191\n-55 254\n-708 -11\n-813 254\n-708 -191\n41 -11\n-671 254\n-813 -191\n41 254\n-55 -191\n41 -191\n", "4\n1 0\n2 0\n1 1\n1 -1\n", "10\n990 -396\n990 736\n990 646\n990 -102\n990 -570\n990 155\n990 528\n990 489\n990 268\n990 676\n", "30\n507 836\n525 836\n-779 196\n507 -814\n525 -814\n525 42\n525 196\n525 -136\n-779 311\n507 -360\n525 300\n507 578\n507 311\n-779 836\n507 300\n525 -360\n525 311\n-779 -360\n-779 578\n-779 300\n507 42\n525 578\n-779 379\n507 196\n525 379\n507 379\n-779 -814\n-779 42\n-779 -136\n507 -136\n", "25\n890 -756\n890 -188\n-37 -756\n-37 853\n523 998\n-261 853\n-351 853\n-351 -188\n523 -756\n-261 -188\n-37 998\n523 -212\n-351 998\n-37 -188\n-351 -756\n-37 -212\n890 998\n890 -212\n523 853\n-351 -212\n-261 -212\n-261 998\n-261 -756\n890 853\n523 -188\n"], "output": ["0\n", "7\n", "1\n", "5\n", "0\n", "0\n", "8\n", "9\n"]}, "generated_tests": {"input": ["1\n487 538\n", "9\n-565 -752\n-184 723\n-184 -752\n-184 1\n950 723\n-565 1253\n950 -752\n950 1\n-565 1\n", "30\n507 836\n525 836\n-779 196\n507 -814\n525 -814\n525 42\n525 196\n525 -50\n-779 311\n507 -360\n525 300\n507 578\n507 311\n-779 836\n507 300\n525 -360\n525 311\n-779 -360\n-779 578\n-779 300\n507 42\n525 578\n-779 379\n507 196\n525 379\n507 379\n-779 -814\n-779 42\n-779 -136\n507 -136\n", "8\n1 1\n4 2\n3 1\n1 2\n0 2\n-1 1\n1 0\n1 3\n", "4\n1 0\n2 0\n1 1\n0 -1\n", "10\n990 -396\n1278 736\n990 646\n990 -102\n990 -570\n990 155\n990 528\n990 489\n990 268\n990 676\n", "5\n0 0\n0 1\n1 0\n0 -1\n-1 1\n", "1\n487 56\n", "9\n-565 -752\n-184 723\n-184 -752\n-184 1\n950 1387\n-565 1253\n950 -752\n950 1\n-565 1\n", "4\n1 0\n2 1\n1 1\n0 -1\n", "10\n990 -396\n1278 736\n990 646\n990 -102\n990 -845\n990 155\n990 528\n990 489\n990 268\n990 676\n", "8\n1 1\n4 2\n3 1\n1 2\n0 2\n-1 1\n1 1\n1 3\n", "5\n0 0\n0 1\n1 -1\n0 -1\n-1 1\n", "1\n487 105\n", "9\n-565 -752\n-184 723\n-184 -752\n-184 1\n950 1387\n-565 1253\n950 -752\n950 1\n-565 0\n", "4\n2 0\n2 1\n1 1\n0 -1\n", "10\n990 -396\n1278 736\n990 189\n990 -102\n990 -845\n990 155\n990 528\n990 489\n990 268\n990 676\n", "8\n0 1\n4 2\n3 1\n1 2\n0 2\n-1 1\n1 1\n1 3\n", "5\n0 0\n0 1\n1 -1\n0 -1\n0 1\n", "1\n487 159\n", "9\n-565 -752\n-184 723\n-184 -752\n-184 1\n950 1387\n-565 1253\n266 -752\n950 1\n-565 0\n", "4\n0 0\n2 1\n1 1\n0 -1\n", "10\n990 -396\n1278 736\n990 189\n990 -102\n990 -845\n990 155\n990 528\n990 489\n1043 268\n990 676\n", "8\n0 0\n4 2\n3 1\n1 2\n0 2\n-1 1\n1 1\n1 3\n", "5\n0 0\n0 1\n2 -1\n0 -1\n0 1\n", "1\n387 159\n", "9\n-565 -752\n-184 358\n-184 -752\n-184 1\n950 1387\n-565 1253\n266 -752\n950 1\n-565 0\n", "4\n0 0\n2 1\n1 1\n0 0\n", "10\n990 -396\n1278 736\n990 189\n990 -102\n990 -845\n990 202\n990 528\n990 489\n1043 268\n990 676\n", "8\n0 0\n4 4\n3 1\n1 2\n0 2\n-1 1\n1 1\n1 3\n", "5\n0 -1\n0 1\n2 -1\n0 -1\n0 1\n", "1\n142 159\n", "9\n-565 -752\n-184 358\n-184 -752\n-184 1\n950 1387\n-844 1253\n266 -752\n950 1\n-565 0\n", "4\n0 0\n2 1\n1 1\n1 0\n", "10\n990 -396\n1278 736\n990 84\n990 -102\n990 -845\n990 202\n990 528\n990 489\n1043 268\n990 676\n", "8\n0 0\n4 4\n3 1\n1 2\n0 2\n0 1\n1 1\n1 3\n", "5\n0 -1\n0 2\n2 -1\n0 -1\n0 1\n", "1\n215 159\n", "4\n0 0\n2 1\n1 2\n1 0\n", "10\n990 -396\n1278 736\n990 84\n990 -102\n990 -845\n10 202\n990 528\n990 489\n1043 268\n990 676\n", "8\n1 0\n4 4\n3 1\n1 2\n0 2\n0 1\n1 1\n1 3\n", "5\n0 -1\n0 2\n2 -1\n0 -1\n0 2\n", "1\n215 295\n", "4\n0 0\n2 1\n1 4\n1 0\n", "10\n1056 -396\n1278 736\n990 84\n990 -102\n990 -845\n10 202\n990 528\n990 489\n1043 268\n990 676\n", "8\n1 0\n4 4\n3 1\n1 2\n0 2\n-1 1\n1 1\n1 3\n", "5\n0 -1\n0 2\n2 -1\n1 -1\n0 2\n", "1\n143 295\n", "4\n0 0\n2 1\n1 4\n1 1\n", "10\n1056 -396\n1278 736\n990 84\n990 -102\n990 -845\n10 202\n990 528\n1559 489\n1043 268\n990 676\n", "8\n1 0\n0 4\n3 1\n1 2\n0 2\n-1 1\n1 1\n1 3\n", "1\n143 119\n", "4\n0 0\n2 1\n1 6\n1 1\n", "10\n1056 -396\n1278 736\n990 84\n990 -102\n990 -523\n10 202\n990 528\n1559 489\n1043 268\n990 676\n", "8\n1 0\n0 4\n3 1\n1 2\n0 2\n-2 1\n1 1\n1 3\n", "1\n143 75\n", "4\n0 0\n2 1\n1 6\n1 0\n", "10\n1056 -396\n1278 736\n990 84\n990 -102\n990 -523\n10 202\n990 761\n1559 489\n1043 268\n990 676\n", "1\n262 75\n", "4\n0 0\n2 1\n1 6\n1 -1\n", "10\n1056 -396\n1278 736\n990 84\n990 -102\n990 -359\n10 202\n990 761\n1559 489\n1043 268\n990 676\n", "1\n262 5\n", "4\n0 0\n2 1\n1 3\n1 -1\n", "10\n1056 -396\n1278 736\n990 35\n990 -102\n990 -359\n10 202\n990 761\n1559 489\n1043 268\n990 676\n", "1\n357 5\n", "4\n1 0\n2 1\n1 3\n1 -1\n", "10\n1056 -396\n1278 736\n990 35\n990 -102\n990 -359\n10 202\n990 761\n1559 489\n279 268\n990 676\n", "1\n271 5\n", "4\n1 0\n1 1\n1 3\n1 -1\n", "10\n1056 -196\n1278 736\n990 35\n990 -102\n990 -359\n10 202\n990 761\n1559 489\n279 268\n990 676\n", "1\n520 5\n", "4\n2 0\n1 1\n1 3\n1 -1\n", "10\n1056 -196\n1278 736\n990 35\n862 -102\n990 -359\n10 202\n990 761\n1559 489\n279 268\n990 676\n", "1\n206 5\n", "4\n2 0\n1 1\n1 2\n1 -1\n", "10\n1056 -196\n1278 736\n990 35\n862 -102\n990 -359\n10 124\n990 761\n1559 489\n279 268\n990 676\n", "1\n206 8\n", "4\n2 0\n1 0\n1 2\n1 -1\n", "10\n1056 -196\n1278 736\n990 7\n862 -102\n990 -359\n10 124\n990 761\n1559 489\n279 268\n990 676\n", "1\n206 12\n", "4\n2 0\n1 -1\n1 2\n1 -1\n", "10\n1056 -196\n1278 736\n990 7\n862 -102\n990 -359\n10 69\n990 761\n1559 489\n279 268\n990 676\n", "1\n267 12\n", "4\n2 0\n1 -1\n1 2\n0 -1\n", "10\n1056 -196\n1278 736\n990 7\n862 -103\n990 -359\n10 69\n990 761\n1559 489\n279 268\n990 676\n", "1\n267 14\n", "4\n2 0\n1 -1\n1 2\n0 -2\n", "10\n1056 -196\n2474 736\n990 7\n862 -103\n990 -359\n10 69\n990 761\n1559 489\n279 268\n990 676\n", "1\n220 14\n", "4\n2 0\n1 -1\n2 2\n0 -2\n", "10\n1056 -196\n2474 736\n990 7\n862 -103\n990 -359\n17 69\n990 761\n1559 489\n279 268\n990 676\n", "1\n185 14\n", "4\n2 0\n1 -1\n2 2\n1 -2\n", "10\n1056 -196\n2474 736\n990 7\n862 -103\n990 -359\n30 69\n990 761\n1559 489\n279 268\n990 676\n", "1\n185 12\n", "4\n2 1\n1 -1\n2 2\n1 -2\n"], "output": ["0\n", "1\n", "7\n", "2\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary  \nCount how many points in a set have at least one other point strictly to their left, right, above, and below along the same horizontal or vertical line.  \n\n2. Core algorithmic approach  \nBrute-force pairwise comparison (nested loops) to check directional neighbors for each point in O(n\u00b2) time.  \n\n3. Reusable components  \n- Directional neighbor check: given a target point and a list of points, determine if there exists any point in each of the four cardinal directions (left, right, up, down).  \n- Coordinate grouping: build maps from x-coordinate to sorted lists of y\u2019s (and vice versa) to accelerate neighbor-range queries.  \n- Axis-aligned neighbor counters: maintain counters (or boolean flags) for each direction per point and update them while scanning other points."}
{"name": "514_B. Han Solo and Lazer Gun", "description": "There are n Imperial stormtroopers on the field. The battle field is a plane with Cartesian coordinate system. Each stormtrooper is associated with his coordinates (x, y) on this plane. \n\nHan Solo has the newest duplex lazer gun to fight these stormtroopers. It is situated at the point (x0, y0). In one shot it can can destroy all the stormtroopers, situated on some line that crosses point (x0, y0).\n\nYour task is to determine what minimum number of shots Han Solo needs to defeat all the stormtroopers.\n\nThe gun is the newest invention, it shoots very quickly and even after a very large number of shots the stormtroopers don't have enough time to realize what's happening and change their location. \n\nInput\n\nThe first line contains three integers n, x0 \u0438 y0 (1 \u2264 n \u2264 1000,  - 104 \u2264 x0, y0 \u2264 104) \u2014 the number of stormtroopers on the battle field and the coordinates of your gun.\n\nNext n lines contain two integers each xi, yi ( - 104 \u2264 xi, yi \u2264 104) \u2014 the coordinates of the stormtroopers on the battlefield. It is guaranteed that no stormtrooper stands at the same point with the gun. Multiple stormtroopers can stand at the same point.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of shots Han Solo needs to destroy all the stormtroopers. \n\nExamples\n\nInput\n\n4 0 0\n1 1\n2 2\n2 0\n-1 -1\n\n\nOutput\n\n2\n\n\nInput\n\n2 1 2\n1 1\n1 0\n\n\nOutput\n\n1\n\nNote\n\nExplanation to the first and second samples from the statement, respectively: \n\n<image>", "solution": "n, x0, y0 = map(int, input().split())\nslopes = {} # key: (num, den), val: count\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    num = y - y0\n    den = x - x0\n    # print(num, den)\n    if den == 0 and \"inf\" in slopes:\n        slopes[\"inf\"] += 1\n    elif den == 0:\n        slopes[\"inf\"] = 1\n    else:\n        found = False\n        for s in slopes:\n            # print(isinstance(s, tuple))\n            if isinstance(s, tuple) and num * s[1] == den * s[0]:\n                slopes[s] += 1\n                found = True\n        if found == False:\n            slopes[(num, den)] = 1\n        \nprint(slopes.__len__())\n    ", "difficulty": 8, "public_tests": {"input": ["2 1 2\n1 1\n1 0\n", "4 0 0\n1 1\n2 2\n2 0\n-1 -1\n"], "output": ["1\n", "2\n"]}, "private_tests": {"input": ["2 -10000 -10000\n9998 9999\n9999 10000\n", "10 -4 -4\n2 -4\n2 0\n-4 2\n5 -4\n-3 -5\n1 4\n-4 2\n-3 5\n0 -3\n2 4\n", "2 -10000 -10000\n10000 10000\n10000 9999\n", "2 0 0\n10000 -10000\n10000 10000\n", "2 0 0\n0 2\n1 90\n", "2 0 0\n0 10\n1 2000\n", "2 0 -1\n0 1\n1 10000\n", "2 0 0\n0 1337\n3 9000\n", "1 1 1\n0 0\n", "2 0 0\n1001 0\n1001 1\n", "10 -3 3\n3 -5\n4 3\n0 -2\n0 0\n3 -3\n3 5\n4 1\n5 5\n4 -5\n4 -4\n", "10 5 -3\n1 1\n2 -1\n2 2\n1 -2\n4 -5\n1 4\n0 1\n1 -4\n-2 0\n-4 -5\n", "2 0 0\n10000 -10000\n-10000 10000\n"], "output": ["2\n", "8\n", "2\n", "2\n", "2\n", "2\n", "2\n", "2\n", "1\n", "2\n", "8\n", "10\n", "1\n"]}, "generated_tests": {"input": ["2 -10000 -10000\n9998 9999\n7267 10000\n", "10 -4 -4\n1 -4\n2 0\n-4 2\n5 -4\n-3 -5\n1 4\n-4 2\n-3 5\n0 -3\n2 4\n", "1 1 2\n0 0\n", "10 -3 3\n3 -5\n4 3\n0 -2\n-1 0\n3 -3\n3 5\n4 1\n5 5\n4 -5\n4 -4\n", "10 5 -3\n1 1\n2 -1\n2 2\n1 -2\n4 -5\n1 4\n0 1\n1 -4\n-2 0\n-5 -5\n", "4 0 0\n1 2\n2 2\n2 0\n-1 -1\n", "4 0 0\n1 2\n2 3\n2 0\n-1 -1\n", "2 -10000 -10000\n10000 11000\n10000 9999\n", "2 1 0\n10000 -10000\n10000 10000\n", "2 0 0\n0 3\n1 90\n", "2 0 0\n0 3\n1 2000\n", "2 0 -1\n0 1\n2 10000\n", "2 0 0\n0 911\n3 9000\n", "2 0 0\n1001 0\n1001 0\n", "2 0 0\n10000 -10000\n-19336 10000\n", "2 2 2\n1 1\n1 0\n", "2 -10000 -10000\n9998 9999\n7267 10001\n", "10 -4 -4\n1 -4\n2 0\n-4 2\n5 -4\n-3 -5\n1 4\n-4 2\n-3 2\n0 -3\n2 4\n", "2 -10000 -162\n10000 11000\n10000 9999\n", "2 1 0\n10000 -10000\n10100 10000\n", "2 0 0\n0 3\n2 90\n", "2 0 -1\n0 1\n4 10000\n", "2 0 0\n0 911\n3 15795\n", "1 1 0\n0 0\n", "2 0 0\n1001 1\n1001 0\n", "10 5 -3\n1 1\n2 -1\n2 2\n2 -2\n4 -5\n1 4\n0 1\n1 -4\n-2 0\n-5 -5\n", "2 0 0\n10000 -10000\n-37763 10000\n", "2 2 2\n1 1\n2 0\n", "2 -10000 -10000\n9998 19262\n7267 10001\n", "10 -4 -4\n1 -4\n2 0\n-4 2\n5 -4\n-3 -5\n1 1\n-4 2\n-3 2\n0 -3\n2 4\n", "2 -10000 -162\n10000 11010\n10000 9999\n", "2 1 -1\n10000 -10000\n10100 10000\n", "2 0 -2\n0 1\n4 10000\n", "1 1 0\n0 -1\n", "2 -1 0\n1001 0\n1001 0\n", "10 5 -5\n1 1\n2 -1\n2 2\n2 -2\n4 -5\n1 4\n0 1\n1 -4\n-2 0\n-5 -5\n", "2 0 0\n10000 -6148\n-37763 10000\n", "2 4 2\n1 1\n2 0\n", "4 1 0\n1 2\n2 3\n2 0\n-1 -1\n", "2 -10000 -10000\n9998 27807\n7267 10001\n", "10 -4 -4\n1 -4\n2 0\n0 2\n5 -4\n-3 -5\n1 1\n-4 2\n-3 2\n0 -3\n2 4\n", "2 -10000 -162\n10000 11010\n10000 12464\n", "2 1 -1\n10000 -16841\n10100 10000\n", "2 0 -2\n0 2\n4 10000\n", "1 0 0\n0 -1\n", "2 -1 0\n1001 0\n1000 0\n", "10 5 -7\n1 1\n2 -1\n2 2\n2 -2\n4 -5\n1 4\n0 1\n1 -4\n-2 0\n-5 -5\n", "2 -1 0\n10000 -6148\n-37763 10000\n", "2 4 2\n1 0\n2 0\n", "4 1 0\n1 2\n2 3\n2 1\n-1 -1\n", "2 -10000 -10000\n9998 27807\n7267 10011\n", "10 -4 -4\n1 -4\n2 0\n0 2\n5 -4\n-3 -5\n1 1\n-4 2\n-6 2\n0 -3\n2 4\n", "2 -10000 -162\n10000 11010\n00000 12464\n", "1 0 1\n0 -1\n", "2 -1 0\n1001 -1\n1000 0\n", "10 5 -7\n1 1\n2 -1\n2 2\n2 -3\n4 -5\n1 4\n0 1\n1 -4\n-2 0\n-5 -5\n", "2 -10000 -10000\n9998 27807\n7267 10010\n", "10 -4 -4\n1 -4\n2 0\n0 2\n5 -4\n-3 -5\n1 1\n-4 2\n-6 2\n1 -3\n2 4\n", "2 -10000 -162\n10000 11010\n00000 18233\n", "1 0 0\n1 -1\n", "2 -1 0\n1001 -1\n1000 1\n", "10 5 -7\n1 1\n2 -1\n2 2\n2 -3\n4 -5\n1 4\n0 1\n1 -4\n-2 0\n-5 0\n", "2 -10000 -10000\n9998 27807\n3100 10010\n", "10 -4 -4\n1 -4\n3 0\n0 2\n5 -4\n-3 -5\n1 1\n-4 2\n-6 2\n1 -3\n2 4\n", "2 -10000 -162\n10010 11010\n00000 18233\n", "2 -1 0\n1001 -2\n1000 1\n", "10 5 -7\n1 1\n2 -1\n2 2\n2 -3\n4 -5\n0 4\n0 1\n1 -4\n-2 0\n-5 0\n", "10 -4 -6\n1 -4\n3 0\n0 2\n5 -4\n-3 -5\n1 1\n-4 2\n-6 2\n1 -3\n2 4\n", "2 -9104 -162\n10010 11010\n00000 18233\n", "2 -1 0\n1001 -2\n1100 1\n", "10 -4 -6\n1 -4\n0 0\n0 2\n5 -4\n-3 -5\n1 1\n-4 2\n-6 2\n1 -3\n2 4\n", "2 -9104 -162\n10010 11010\n00010 18233\n", "2 -1 -1\n1001 -2\n1100 1\n", "10 -4 -6\n1 -4\n0 0\n0 2\n5 -4\n-3 -5\n1 1\n-4 2\n-6 2\n1 -3\n0 4\n", "2 -9104 -162\n10000 11010\n00010 18233\n", "10 -4 -6\n1 -4\n0 0\n0 2\n5 -4\n-3 -5\n1 1\n-4 2\n-6 2\n1 -6\n0 4\n", "2 -9104 -238\n10000 11010\n00010 18233\n", "10 -4 -6\n1 -4\n0 0\n0 2\n5 -4\n-3 -5\n1 1\n-4 2\n-6 2\n2 -6\n0 4\n", "2 -8053 -238\n10000 11010\n00010 18233\n", "10 -4 -6\n1 -4\n0 0\n0 2\n5 -4\n-3 -1\n1 1\n-4 2\n-6 2\n2 -6\n0 4\n", "2 -14604 -238\n10000 11010\n00010 18233\n", "10 -4 -6\n0 -4\n0 0\n0 2\n5 -4\n-3 -1\n1 1\n-4 2\n-6 2\n2 -6\n0 4\n", "2 -14604 -238\n10000 11110\n00010 18233\n", "10 -4 -6\n0 -4\n0 0\n0 2\n5 -1\n-3 -1\n1 1\n-4 2\n-6 2\n2 -6\n0 4\n", "2 -14604 -238\n10000 11110\n00000 18233\n", "10 -4 -6\n0 -4\n0 0\n0 2\n5 -1\n-3 -1\n1 1\n-1 2\n-6 2\n2 -6\n0 4\n", "2 -14604 -238\n10001 11110\n00000 18233\n", "10 -4 -6\n0 -4\n0 0\n0 4\n5 -1\n-3 -1\n1 1\n-1 2\n-6 2\n2 -6\n0 4\n", "10 -4 -6\n0 -1\n0 0\n0 4\n5 -1\n-3 -1\n1 1\n-1 2\n-6 2\n2 -6\n0 4\n", "10 -4 -6\n0 -1\n0 0\n0 4\n5 -1\n-3 -1\n1 1\n-1 2\n-3 2\n2 -6\n0 4\n", "10 -4 -6\n0 -1\n0 0\n0 4\n5 -2\n-3 -1\n1 1\n-1 2\n-3 2\n2 -6\n0 4\n", "10 -4 -6\n-1 -1\n0 0\n0 4\n5 -2\n-3 -1\n1 1\n-1 2\n-3 2\n2 -6\n0 4\n"], "output": ["2\n", "8\n", "1\n", "9\n", "10\n", "3\n", "4\n", "2\n", "2\n", "2\n", "2\n", "2\n", "2\n", "1\n", "2\n", "2\n", "2\n", "8\n", "2\n", "2\n", "2\n", "2\n", "2\n", "1\n", "2\n", "10\n", "2\n", "2\n", "2\n", "8\n", "2\n", "2\n", "2\n", "1\n", "1\n", "9\n", "2\n", "2\n", "4\n", "2\n", "9\n", "2\n", "2\n", "2\n", "1\n", "1\n", "8\n", "2\n", "2\n", "4\n", "2\n", "9\n", "2\n", "1\n", "2\n", "8\n", "2\n", "9\n", "2\n", "1\n", "2\n", "8\n", "2\n", "9\n", "2\n", "2\n", "8\n", "10\n", "2\n", "2\n", "10\n", "2\n", "2\n", "10\n", "2\n", "10\n", "2\n", "10\n", "2\n", "10\n", "2\n", "10\n", "2\n", "10\n", "2\n", "10\n", "2\n", "9\n", "9\n", "9\n", "9\n", "9\n"]}, "short_description": "1. One-sentence summary  \nCount how many distinct straight-line directions (slopes) there are from a fixed origin to a set of points.\n\n2. Core algorithmic approach  \nUse hashing (a dictionary) to bucket points by their slope values. Each slope is represented either by a special \u201cinfinite\u201d key for vertical lines or by a pair (\u0394y, \u0394x). Equality of slopes is tested via cross-multiplication of these pairs rather than floating-point division.\n\n3. Reusable components  \n- Slope-normalization routine: given (\u0394x, \u0394y), compute a canonical key (e.g. reduce by gcd or store raw and compare with cross-product).  \n- Collision handling in a hash map: increment counts for existing keys or insert new keys.  \n- Special-case handling for vertical lines (\u0394x = 0) using a sentinel key."}
{"name": "1046_I. Say Hello", "description": "Two friends are travelling through Bubble galaxy. They say \"Hello!\" via signals to each other if their distance is smaller or equal than d_1 and \n\n  * it's the first time they speak to each other or \n  * at some point in time after their last talk their distance was greater than d_2. \n\n\n\nWe need to calculate how many times friends said \"Hello!\" to each other. For N moments, you'll have an array of points for each friend representing their positions at that moment. A person can stay in the same position between two moments in time, but if a person made a move we assume this movement as movement with constant speed in constant direction.\n\nInput\n\nThe first line contains one integer number N (2 \u2264 N \u2264 100 000) representing number of moments in which we captured positions for two friends.\n\nThe second line contains two integer numbers d_1 and d_2 \\ (0 < d_1 < d_2 < 1000). \n\nThe next N lines contains four integer numbers A_x,A_y,B_x,B_y (0 \u2264 A_x, A_y, B_x, B_y \u2264 1000) representing coordinates of friends A and B in each captured moment.\n\nOutput\n\nOutput contains one integer number that represents how many times friends will say \"Hello!\" to each other.\n\nExample\n\nInput\n\n4\n2 5\n0 0 0 10\n5 5 5 6\n5 0 10 5\n14 7 10 5\n\n\nOutput\n\n2\n\nNote\n\n<image> Explanation: Friends should send signals 2 times to each other, first time around point A2 and B2 and second time during A's travel from point A3 to A4 while B stays in point B3=B4. ", "solution": "from sys import stdin\n\nstdin = iter(stdin)\n\nclass Vector:\n    ''''''\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def dot(self, vec2):\n        return self.x * vec2.x + self.y * vec2.y\n\n    def cross(self, vec2):\n        return self.x * vec2.y - self.y * vec2.x\n\n    def norm_square(self):\n        return self.dot(self)\n\n    def __str__(self):\n        return str((self.x, self.y))\n\n    __radd__ = __add__\n    __rsub__ = __sub__\n\ndef min_distnace_less_than_d1(ab1: Vector, ab2: Vector, d1: int):\n    ''' '''\n    L = ab2 - ab1\n    proj1 = ab1.dot(L)\n    proj2 = ab2.dot(L)\n    between = (proj1 * proj2 < 0)\n    if between:\n        # altitude is minimum\n        # return altitude < d\n        # return |ab1.cross(L)| / sqrt(L.norm_square()) < d\n        return ab1.cross(L)**2 <= d1**2 * L.norm_square()\n    else:\n        # minimum edge is minimum distnace\n        minSquare = min([ab1.norm_square(), ab2.norm_square()])\n        return minSquare <= d1**2\n\n\nif __name__ == \"__main__\":\n    N = int(next(stdin))\n    d1, d2 = (int(x) for x in next(stdin).split())\n    ABs = []\n    for _ in range(N):\n        Ax, Ay, Bx, By = (int(x) for x in next(stdin).split())\n        ABs.append(Vector(Bx, By) - Vector(Ax, Ay))\n\n    resetState = True\n    count = 0\n\n    for i in range(len(ABs)-1):\n        ab1, ab2 = ABs[i:i+2]\n        if resetState and min_distnace_less_than_d1(ab1, ab2, d1):\n            count += 1\n            resetState = False\n\n        resetState = resetState or (ab2.norm_square() > d2**2)\n\n    print(count)\n", "difficulty": 15, "public_tests": {"input": ["4\n2 5\n0 0 0 10\n5 5 5 6\n5 0 10 5\n14 7 10 5\n"], "output": ["2"]}, "private_tests": {"input": ["3\n20 50\n41 176 16 161\n103 169 113 199\n74 46 79 16\n", "8\n100 200\n500 500 301 301\n500 500 301 699\n500 500 500 500\n500 500 699 301\n500 500 499 301\n500 500 499 400\n500 500 400 500\n500 500 480 520\n", "8\n100 200\n660 973 461 774\n844 449 645 648\n770 319 770 319\n494 325 693 126\n934 913 933 714\n207 945 206 845\n527 264 427 264\n807 189 787 209\n", "10\n1 5\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 20 20 10\n", "10\n1 5\n13 96 23 106\n99 63 89 53\n76 64 86 74\n42 101 32 91\n42 3 52 13\n83 11 73 1\n31 55 41 65\n127 18 117 8\n50 89 60 99\n81 81 71 71\n", "4\n20 50\n100 100 100 100\n100 100 70 100\n100 100 130 90\n100 100 130 20\n", "2\n20 50\n260 817 240 917\n573 444 553 374\n", "4\n20 50\n41 176 41 226\n103 169 63 169\n74 143 64 63\n77 5 127 5\n", "3\n20 50\n100 100 75 85\n100 100 110 130\n100 100 105 20\n", "7\n10 20\n8 86 13 86\n79 53 84 53\n71 54 81 64\n17 91 32 101\n37 63 52 88\n40 31 40 56\n102 8 102 17\n", "4\n20 50\n41 176 41 176\n103 169 73 169\n74 46 104 36\n21 143 51 63\n", "2\n20 50\n100 100 80 200\n100 100 80 30\n", "7\n10 20\n5 10 10 10\n10 10 15 10\n5 10 15 20\n5 10 20 20\n5 10 20 35\n5 10 5 35\n5 10 5 19\n", "3\n20 50\n100 100 75 85\n100 100 110 130\n100 100 105 70\n", "4\n20 50\n100 100 100 150\n100 100 60 100\n100 100 90 20\n100 100 150 100\n"], "output": ["1", "2", "2", "9", "9", "1", "1", "0", "1", "2", "1", "1", "2", "1", "0"]}, "generated_tests": {"input": ["3\n20 50\n41 154 16 161\n103 169 113 199\n74 46 79 16\n", "8\n100 137\n500 500 301 301\n500 500 301 699\n500 500 500 500\n500 500 699 301\n500 500 499 301\n500 500 499 400\n500 500 400 500\n500 500 480 520\n", "10\n1 5\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 22 20 10\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 20 20 10\n", "10\n1 5\n13 96 23 106\n99 63 89 53\n4 64 86 74\n42 101 32 91\n42 3 52 13\n83 11 73 1\n31 55 41 65\n127 18 117 8\n50 89 60 99\n81 81 71 71\n", "2\n20 50\n260 817 240 917\n573 444 553 666\n", "10\n1 5\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 22 20 10\n20 20 20 30\n30 20 20 10\n10 20 20 30\n5 20 20 10\n", "10\n1 5\n9 96 23 106\n99 63 89 53\n4 38 86 74\n42 101 32 91\n42 3 52 13\n83 11 73 1\n31 55 41 65\n127 18 117 8\n50 89 60 99\n81 81 81 71\n", "8\n100 200\n660 973 461 774\n844 449 645 648\n770 319 770 319\n494 325 693 126\n934 913 933 714\n207 945 206 845\n527 264 427 264\n1595 189 787 209\n", "4\n20 50\n100 100 100 100\n100 100 70 100\n100 100 130 90\n100 000 130 20\n", "4\n20 50\n41 176 41 226\n103 19 63 169\n74 143 64 63\n77 5 127 5\n", "3\n4 50\n100 100 75 85\n100 100 110 130\n100 100 105 20\n", "7\n10 20\n8 86 13 86\n79 53 84 53\n71 41 81 64\n17 91 32 101\n37 63 52 88\n40 31 40 56\n102 8 102 17\n", "4\n20 50\n57 176 41 176\n103 169 73 169\n74 46 104 36\n21 143 51 63\n", "2\n20 50\n100 100 80 200\n101 100 80 30\n", "7\n10 20\n5 10 10 10\n10 10 15 10\n5 10 15 20\n5 10 20 20\n5 10 20 35\n1 10 5 35\n5 10 5 19\n", "4\n20 50\n100 100 100 150\n100 100 60 100\n100 100 90 20\n100 100 150 101\n", "4\n2 5\n0 0 0 10\n5 5 0 6\n5 0 10 5\n14 7 10 5\n", "3\n20 50\n41 154 16 129\n103 169 113 199\n74 46 79 16\n", "8\n100 137\n500 500 125 301\n500 500 301 699\n500 500 500 500\n500 500 699 301\n500 500 499 301\n500 500 499 400\n500 500 400 500\n500 500 480 520\n", "8\n100 200\n660 973 461 774\n844 252 645 648\n770 319 770 319\n494 325 693 126\n934 913 933 714\n207 945 206 845\n527 264 427 264\n1595 189 787 209\n", "10\n1 5\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 22 20 10\n20 20 20 30\n30 20 20 10\n10 20 20 30\n30 20 20 10\n", "10\n1 5\n13 96 23 106\n99 63 89 53\n4 38 86 74\n42 101 32 91\n42 3 52 13\n83 11 73 1\n31 55 41 65\n127 18 117 8\n50 89 60 99\n81 81 71 71\n", "4\n20 50\n100 100 100 100\n100 100 70 100\n101 100 130 90\n100 000 130 20\n", "4\n20 50\n41 176 41 226\n103 19 63 169\n74 143 64 53\n77 5 127 5\n", "3\n4 41\n100 100 75 85\n100 100 110 130\n100 100 105 20\n", "7\n10 20\n8 86 13 86\n79 53 84 53\n71 41 81 64\n17 91 32 101\n37 63 52 88\n40 31 40 56\n102 8 150 17\n", "4\n20 50\n57 176 41 176\n103 169 73 169\n40 46 104 36\n21 143 51 63\n", "2\n20 50\n100 100 80 200\n101 100 80 35\n", "7\n10 20\n5 10 10 10\n10 10 15 10\n5 10 15 20\n5 10 20 20\n5 10 20 35\n1 10 5 35\n5 10 2 19\n", "4\n20 47\n100 100 100 150\n100 100 60 100\n100 100 90 20\n100 100 150 101\n", "4\n2 5\n0 0 -1 10\n5 5 0 6\n5 0 10 5\n14 7 10 5\n", "3\n20 50\n41 154 16 129\n103 169 113 199\n102 46 79 16\n", "8\n100 137\n500 500 125 301\n500 500 301 699\n500 500 500 500\n500 500 699 301\n500 500 688 301\n500 500 499 400\n500 500 400 500\n500 500 480 520\n", "8\n100 200\n660 973 461 774\n844 252 266 648\n770 319 770 319\n494 325 693 126\n934 913 933 714\n207 945 206 845\n527 264 427 264\n1595 189 787 209\n", "10\n1 5\n13 96 23 106\n99 63 89 53\n4 38 86 74\n42 101 32 91\n42 3 52 13\n83 11 73 1\n31 55 41 65\n127 18 117 8\n50 89 60 99\n81 81 81 71\n", "4\n20 50\n100 100 100 100\n100 100 98 100\n101 100 130 90\n100 000 130 20\n", "4\n20 50\n41 176 41 226\n103 19 63 169\n74 143 64 15\n77 5 127 5\n", "3\n4 41\n100 100 75 85\n100 100 110 130\n100 100 162 20\n", "7\n10 20\n8 86 13 86\n79 53 84 53\n71 41 81 64\n17 91 32 101\n37 34 52 88\n40 31 40 56\n102 8 150 17\n", "4\n20 50\n57 176 69 176\n103 169 73 169\n40 46 104 36\n21 143 51 63\n", "2\n20 50\n100 100 80 3\n101 100 80 35\n", "7\n10 20\n5 10 10 10\n10 10 15 10\n5 10 15 20\n5 10 20 20\n5 10 25 35\n1 10 5 35\n5 10 2 19\n", "4\n20 47\n100 100 100 150\n100 100 51 100\n100 100 90 20\n100 100 150 101\n", "4\n2 5\n0 0 -1 10\n5 5 0 6\n7 0 10 5\n14 7 10 5\n", "3\n20 50\n41 180 16 129\n103 169 113 199\n102 46 79 16\n", "8\n100 137\n500 500 125 301\n500 500 301 699\n500 500 500 500\n500 500 699 301\n500 500 688 279\n500 500 499 400\n500 500 400 500\n500 500 480 520\n", "8\n100 200\n660 973 461 774\n844 252 266 648\n770 319 770 319\n494 325 693 126\n934 913 933 714\n207 945 206 845\n527 264 114 264\n1595 189 787 209\n", "10\n1 5\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 20 20 10\n10 20 20 30\n30 22 20 10\n20 20 20 30\n30 20 20 10\n10 20 20 30\n5 31 20 10\n", "4\n20 50\n100 110 100 100\n100 100 98 100\n101 100 130 90\n100 000 130 20\n"], "output": ["1\n", "2\n", "9\n", "7\n", "0\n", "6\n", "5\n", "2\n", "1\n", "0\n", "0\n", "2\n", "1\n", "0\n", "2\n", "0\n", "1\n", "1\n", "2\n", "2\n", "7\n", "7\n", "1\n", "0\n", "0\n", "1\n", "1\n", "0\n", "2\n", "0\n", "1\n", "1\n", "2\n", "2\n", "6\n", "1\n", "0\n", "0\n", "1\n", "1\n", "0\n", "2\n", "0\n", "1\n", "1\n", "2\n", "2\n", "6\n", "1\n"]}, "short_description": "1. One-sentence summary  \nGiven a sequence of 2D displacement vectors, the code linearly scans adjacent pairs and counts each pair for which the minimal distance between the two line\u2010segments they represent is below a threshold \u201cd1,\u201d while resetting the state whenever the length of the trailing segment exceeds another threshold \u201cd2.\u201d  \n\n2. Core algorithmic approach  \nA single\u2010pass (O(N)) scan that for each adjacent pair computes the minimum distance between two line segments using vector projections and cross\u2010product tests (point-to-segment distance formula).  \n\n3. Reusable components  \n- A small 2D Vector class supporting addition, subtraction, dot product, cross product, and squared\u2010norm, useful in any planar\u2010geometry context.  \n- A \u201cpoint-to-segment distance\u201d function that decides via dot\u2010product projections whether the closest point lies in the interior (use cross\u2010product altitude) or at an endpoint (use endpoint distance).  \n- A simple linear\u2010scan with a resettable Boolean flag to count events under changing state conditions (pattern useful in streaming or one\u2010pass filtering problems)."}
{"name": "136_D. Rectangle and Square", "description": "Little Petya very much likes rectangles and especially squares. Recently he has received 8 points on the plane as a gift from his mother. The points are pairwise distinct. Petya decided to split them into two sets each containing 4 points so that the points from the first set lay at the vertexes of some square and the points from the second set lay at the vertexes of a rectangle. Each point of initial 8 should belong to exactly one set. It is acceptable for a rectangle from the second set was also a square. If there are several partitions, Petya will be satisfied by any of them. Help him find such partition. Note that the rectangle and the square from the partition should have non-zero areas. The sides of the figures do not have to be parallel to the coordinate axes, though it might be the case.\n\nInput\n\nYou are given 8 pairs of integers, a pair per line \u2014 the coordinates of the points Petya has. The absolute value of all coordinates does not exceed 104. It is guaranteed that no two points coincide.\n\nOutput\n\nPrint in the first output line \"YES\" (without the quotes), if the desired partition exists. In the second line output 4 space-separated numbers \u2014 point indexes from the input, which lie at the vertexes of the square. The points are numbered starting from 1. The numbers can be printed in any order. In the third line print the indexes of points lying at the vertexes of a rectangle in the similar format. All printed numbers should be pairwise distinct.\n\nIf the required partition does not exist, the first line should contain the word \"NO\" (without the quotes), after which no output is needed.\n\nExamples\n\nInput\n\n0 0\n10 11\n10 0\n0 11\n1 1\n2 2\n2 1\n1 2\n\n\nOutput\n\nYES\n5 6 7 8\n1 2 3 4\n\n\nInput\n\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n\n\nOutput\n\nNO\n\n\nInput\n\n0 0\n4 4\n4 0\n0 4\n1 2\n2 3\n3 2\n2 1\n\n\nOutput\n\nYES\n1 2 3 4\n5 6 7 8\n\nNote\n\nPay attention to the third example: the figures do not necessarily have to be parallel to the coordinate axes.", "solution": "import itertools\nimport math\nimport os\nimport sys\n\neps = 1e-8\n\ncoord = [[]] + [list(map(int, input().split())) for _ in range(8)]\n\nidx = list(range(1, 9))\n\ndef perpendicular(v1, v2):\n    return sum([x * y for (x, y) in zip(v1, v2)]) < eps\n\ndef all_perpendicular(vs):\n    return all([perpendicular(vs[i], vs[(i+1)%4]) for i in range(4)])\n\ndef rect_sides(vs):\n    ls = list(map(lambda v: math.hypot(*v), vs))\n    return abs(ls[0] - ls[2]) < eps and abs(ls[1] - ls[3]) < eps\n\ndef square_sides(vs):\n    ls = list(map(lambda v: math.hypot(*v), vs))\n    l = ls[0]\n    for lx in ls:\n        if abs(lx - l) > eps:\n            return False\n    return True\n\ndef coords_to_vecs(cs):\n    return [\n        [cs[(i+1)%4][0] - cs[i][0], cs[(i+1)%4][1] - cs[i][1]]\n        for i in range(4)]\n\ndef is_square(coords):\n    for p in itertools.permutations(coords):\n        vs = coords_to_vecs(p)\n        if all_perpendicular(vs) and square_sides(vs):\n            return True\n    return False\n\ndef is_rect(coord):\n    for p in itertools.permutations(coord):\n        vs = coords_to_vecs(p)\n        if all_perpendicular(vs) and rect_sides(vs):\n            return True\n    return False\n\nfor comb in itertools.combinations(idx, 4):\n    fsi = list(comb)\n    ssi = list(set(idx) - set(comb))\n\n    fs = [coord[i] for i in fsi]\n    ss = [coord[i] for i in ssi]\n\n    if is_square(fs) and is_rect(ss):\n        print(\"YES\")\n        print(' '.join(map(str, fsi)))\n        print(' '.join(map(str, ssi)))\n        sys.exit(0)\n    if is_square(ss) and is_rect(fs):\n        print(\"YES\")\n        print(' '.join(map(str, ssi)))\n        print(' '.join(map(str, fsi)))\n        sys.exit(0)\n\nprint(\"NO\")\n", "difficulty": 10, "public_tests": {"input": ["0 0\n10 11\n10 0\n0 11\n1 1\n2 2\n2 1\n1 2\n", "0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n", "0 0\n4 4\n4 0\n0 4\n1 2\n2 3\n3 2\n2 1\n"], "output": ["YES\n5 6 7 8\n1 2 3 4\n", "NO\n", "YES\n1 2 3 4\n5 6 7 8\n"]}, "private_tests": {"input": ["116 232\n87 0\n319 116\n203 174\n58 145\n174 0\n203 261\n0 58\n", "0 0\n0 1\n1 0\n1 1\n2 0\n2 1\n3 1\n4 0\n", "-1000 -637\n-516 -274\n-274 -153\n-32 -516\n452 210\n210 -516\n-758 -1000\n-274 452\n", "302 488\n-814 860\n-70 984\n-690 116\n-814 -1000\n488 302\n54 240\n-1000 -814\n", "864 -540\n972 -162\n342 216\n0 -324\n108 54\n468 378\n486 234\n324 360\n", "256 496\n304 512\n576 0\n320 464\n272 448\n0 64\n64 640\n640 576\n", "-856 -1000\n224 872\n-136 8\n584 656\n8 512\n368 296\n8 -136\n-1000 -856\n", "-1000 640\n-16 640\n312 -1000\n968 -16\n640 968\n-672 -344\n-672 -1000\n968 -672\n", "-11 220\n-11 22\n176 -66\n-198 -22\n-198 176\n220 -198\n0 88\n44 -44\n", "477 0\n636 371\n106 689\n212 265\n0 53\n530 795\n53 530\n530 477\n", "248 92\n-1000 -792\n-584 -376\n-168 40\n-116 -376\n-792 -1000\n-376 -584\n300 -324\n", "-856 -1000\n440 728\n728 296\n-1000 -856\n296 8\n-424 -280\n-280 -424\n8 440\n", "234 104\n0 52\n286 104\n598 624\n208 156\n182 520\n26 0\n702 208\n", "-160 336\n-76 672\n8 168\n-580 588\n-1000 504\n-496 840\n-496 84\n-664 0\n", "-340 1640\n-1000 650\n320 375\n705 485\n815 100\n430 -10\n-340 -10\n-1000 -1000\n", "-1000 -60\n-342 -1000\n1444 -248\n1162 -718\n1538 -624\n1914 -530\n786 692\n2290 -436\n", "-700 120\n-370 -90\n-40 510\n-490 150\n-1000 -60\n-670 -270\n-850 600\n-400 960\n", "-1000 -736\n1200 408\n1728 12\n188 -1000\n1332 -516\n-736 -208\n452 -472\n804 -120\n", "424 -288\n-1000 -466\n68 246\n246 1492\n-644 -1000\n-644 -110\n-1000 1136\n602 246\n", "0 0\n5 0\n8 4\n3 4\n-2 -2\n-2 -1\n-1 -1\n-1 -2\n", "10 10\n15 11\n15 9\n20 10\n100 100\n100 102\n107 102\n107 100\n", "2024 8\n1352 -1000\n1016 -244\n512 344\n1856 344\n2360 -748\n-1000 -664\n344 -664\n", "0 8\n-2 0\n-3 0\n0 -8\n2 0\n3 0\n0 2\n0 -2\n", "420 -664\n0 -160\n420 260\n-840 -412\n420 -580\n-840 92\n420 -160\n0 -1000\n", "1136 602\n1403 -21\n-21 -911\n-1000 424\n-733 513\n-288 -1000\n780 -288\n513 335\n", "0 0\n0 1\n1 0\n1 1\n2 2\n3 2\n3 3\n4 3\n", "128 112\n40 72\n64 96\n72 40\n80 32\n32 0\n0 32\n144 48\n", "-471 -80\n-1000 35\n-402 127\n150 -885\n-885 -1000\n35 150\n-333 -11\n-540 58\n", "-520 480\n-40 240\n-1000 240\n240 360\n-400 240\n-160 520\n-880 0\n120 640\n", "60 30\n0 18\n24 6\n81 36\n75 57\n18 24\n54 51\n6 0\n", "123 0\n-410 123\n902 -123\n-82 369\n123 492\n0 492\n574 -369\n0 0\n", "116 488\n-628 -1000\n-70 -70\n116 1604\n-814 860\n488 -628\n860 674\n-1000 116\n", "0 336\n112 476\n196 448\n336 0\n560 896\n140 560\n224 532\n896 560\n", "-841 -205\n590 -205\n-1000 -1000\n-364 1385\n-682 113\n-841 -1000\n-1000 -205\n908 1067\n", "684 399\n0 228\n570 342\n228 285\n342 0\n228 570\n570 855\n114 741\n", "72 32\n4 40\n44 32\n32 0\n40 72\n20 16\n28 56\n0 40\n", "0 0\n1 0\n1 1\n0 1\n5 6\n100 190\n6 7\n10 196\n", "560 140\n0 140\n280 280\n560 700\n420 560\n700 560\n140 0\n700 420\n", "-372 93\n-403 31\n31 -31\n558 186\n248 434\n279 155\n0 -93\n527 465\n", "692 -60\n-812 316\n128 880\n-248 -624\n-812 692\n-1000 -1000\n-1000 692\n-812 -1000\n", "117 0\n195 312\n312 195\n0 117\n312 663\n195 390\n468 273\n585 546\n", "-522 -1000\n912 1629\n912 434\n-283 1629\n-1000 -283\n195 -522\n-283 195\n-283 2824\n", "-1000 -829\n-715 -601\n311 197\n197 -715\n-829 -1000\n-601 311\n-658 -487\n-487 -658\n", "-320 904\n3896 -184\n224 224\n3624 -48\n-1000 360\n-456 -320\n-864 -864\n-592 -1000\n", "937 937\n-851 43\n-404 1086\n43 -106\n788 -404\n-553 -255\n-1000 -851\n-106 -1000\n", "780 68\n424 -466\n68 -110\n246 424\n246 -466\n-110 -110\n-822 -1000\n-1000 -644\n", "0 -970\n90 -580\n585 500\n150 -880\n270 -400\n30 -1000\n405 320\n120 -850\n", "-736 -560\n56 -560\n-208 320\n-736 -472\n56 760\n-648 320\n-1000 -1000\n144 232\n", "1610 0\n1700 270\n-1000 -900\n2105 315\n800 0\n-190 -900\n1925 90\n1880 495\n", "576 -616\n192 -424\n384 152\n768 248\n384 -1000\n0 -808\n480 -232\n864 -136\n", "0 0\n1 1\n2 2\n3 3\n4 4\n4 5\n5 4\n5 5\n", "-880 0\n400 -240\n-640 480\n-160 240\n-240 480\n-520 360\n320 0\n-1000 120\n", "-40 -1000\n-440 120\n2200 -200\n1800 920\n-200 -680\n-840 120\n-40 -360\n-1000 -200\n", "-656 0\n-140 344\n-140 516\n-484 860\n-1000 344\n-54 946\n204 602\n-398 688\n", "840 980\n140 532\n980 840\n588 420\n700 868\n252 980\n140 0\n0 140\n", "-536 -304\n-536 508\n-768 -188\n-768 -1000\n-1000 -768\n160 276\n-72 -420\n-304 -536\n", "760 980\n1420 -120\n320 -780\n-1000 -560\n100 -340\n-340 320\n-560 -1000\n-340 100\n", "-97 -140\n290 -97\n290 935\n935 290\n-1000 -355\n-140 247\n247 290\n-355 -1000\n", "25 10\n0 10\n41 34\n5 0\n39 30\n37 36\n35 32\n20 20\n", "100 100\n100 101\n101 100\n101 101\n0 0\n1 5\n11 5\n10 0\n", "65 852\n-645 284\n-361 710\n-1000 71\n-219 284\n207 426\n-716 0\n-929 355\n", "364 -688\n-260 248\n-312 40\n0 -532\n0 -792\n104 -792\n260 -428\n-52 -1000\n", "426 518\n-609 449\n633 -1000\n-586 2220\n-954 2174\n-632 2588\n-1000 2542\n-816 1967\n", "595 -159\n421 -565\n-275 -1000\n-275 -420\n189 15\n-1000 -1000\n-1000 -420\n15 -391\n", "180 100\n180 220\n80 0\n240 760\n0 80\n100 180\n720 160\n780 700\n", "203 232\n232 348\n58 0\n0 58\n319 203\n290 232\n348 319\n232 290\n", "15 160\n-101 334\n-855 -1000\n-275 -101\n-1000 -855\n160 15\n160 -275\n334 160\n", "96 180\n-204 108\n-144 36\n84 102\n-12 0\n0 6\n-72 72\n12 84\n", "-1000 176\n408 88\n-384 528\n-648 704\n-472 792\n-736 0\n-384 0\n320 880\n", "728 656\n584 152\n1160 152\n-1000 -1000\n1016 944\n-568 -424\n1448 440\n1016 728\n", "-725 1596\n155 -1000\n-758 1530\n-571 1376\n-1000 320\n-692 1497\n-659 1563\n584 56\n", "598 368\n414 92\n0 0\n138 46\n368 322\n644 138\n138 0\n0 46\n", "1 0\n2 2\n0 2\n1 4\n7 0\n9 0\n7 1\n9 1\n", "265 220\n30 -60\n330 -420\n140 110\n15 0\n140 200\n15 90\n345 -480\n", "292 1414\n802 1312\n-1000 -1000\n462 2400\n-184 -235\n-847 326\n-31 1091\n972 2298\n", "1 1\n1 2\n2 1\n2 2\n100 100\n101 100\n101 102\n102 102\n", "0 304\n456 532\n532 304\n456 76\n304 380\n152 0\n608 228\n228 152\n", "70 64\n32 0\n58 48\n48 80\n72 50\n0 48\n56 62\n80 32\n", "360 648\n504 360\n0 360\n648 288\n288 504\n648 576\n288 0\n432 720\n", "60 260\n280 0\n100 240\n80 200\n0 0\n0 400\n280 400\n40 220\n", "-445 -1\n-556 -1000\n554 443\n-1000 -445\n-445 -334\n443 -445\n-1 -556\n-334 554\n", "-153 -238\n-204 34\n102 119\n34 0\n-663 -306\n0 68\n-612 -578\n136 51\n", "-622 315\n-1000 126\n-937 0\n-55 315\n-559 189\n-433 441\n-307 819\n71 693\n", "280 480\n360 -80\n-1000 -640\n-200 -160\n-760 -1000\n-280 -160\n-280 400\n-40 -520\n", "-799 407\n-665 -531\n-531 -866\n-866 -1000\n-263 -933\n809 407\n1345 -933\n-1000 -665\n", "547 -167\n-1000 -762\n190 904\n-762 -1000\n-167 71\n904 547\n71 -167\n-167 190\n", "0 0\n4 -16\n24 36\n-60 60\n-56 44\n36 43\n40 12\n52 19\n", "-260 332\n-112 776\n776 184\n-1000 -1000\n-112 1368\n-852 36\n628 924\n36 36\n", "-850 -1000\n-475 -325\n1025 800\n-325 575\n-325 -850\n-1000 -475\n-100 -775\n1250 -550\n", "42 -168\n966 252\n462 126\n840 756\n336 630\n0 -588\n-252 -168\n-294 -588\n", "40 100\n210 20\n100 60\n120 230\n0 40\n60 0\n60 80\n270 170\n", "68 0\n374 221\n306 204\n323 136\n272 340\n391 153\n0 272\n340 68\n", "-941 -1000\n-764 -410\n-823 -882\n-882 -823\n-1000 -941\n1006 298\n475 -941\n-233 829\n", "427 -451\n549 -573\n122 -1000\n0 -85\n183 -512\n427 98\n610 -329\n0 -878\n", "5 0\n16 -54\n9 5\n0 4\n0 -6\n4 9\n40 -24\n-24 -36\n", "434 372\n0 62\n496 868\n868 620\n620 248\n248 496\n62 434\n372 0\n", "120 120\n105 30\n30 0\n0 75\n75 90\n90 165\n75 105\n45 135\n", "0 39\n169 117\n182 182\n104 130\n117 195\n65 0\n39 104\n104 65\n", "195 260\n533 390\n455 546\n0 65\n260 195\n65 0\n689 468\n611 624\n", "6 40\n0 35\n4 50\n5 0\n35 40\n40 5\n10 46\n0 44\n", "1175 450\n-130 -1000\n160 160\n-1000 -1000\n-1000 450\n-130 450\n1465 -565\n450 -855\n", "1538 -718\n-1000 -718\n3277 -13\n3089 645\n3747 833\n-718 -1000\n3935 175\n1820 -1000\n", "-912 -296\n672 -560\n-472 -296\n-648 -208\n-648 1288\n-824 -1000\n-1000 -912\n936 1024\n", "-1000 276\n-586 828\n-34 414\n104 414\n-862 690\n-448 276\n-34 966\n-172 0\n", "1 0\n0 4\n2 4\n1 8\n15 15\n15 16\n18 15\n18 16\n", "0 -814\n93 -256\n372 -349\n186 23\n837 -628\n744 -442\n93 -1000\n465 -70\n", "-480 -350\n-1000 -870\n-870 -1000\n-155 495\n-740 -285\n40 -870\n625 -90\n-350 -480\n", "920 -360\n2088 200\n-1000 600\n2024 -56\n1576 -184\n1240 -1000\n-680 -40\n1512 -440\n", "410 -754\n574 312\n82 66\n820 -180\n410 -1000\n0 -1000\n328 -426\n0 -754\n", "744 -19\n-1000 -782\n-237 90\n-128 -346\n-346 -891\n-891 -1000\n635 -1000\n-19 -564\n", "-424 920\n-1000 152\n344 -232\n-232 536\n-424 -1000\n-616 -40\n344 -616\n536 728\n", "-638 3887\n-1000 1896\n448 1353\n-95 4430\n-457 -1000\n-276 4611\n-95 4249\n-819 4068\n", "-859 329\n-1000 141\n81 705\n-906 0\n-577 987\n-718 329\n-624 188\n-201 47\n", "100 100\n100 101\n101 100\n101 101\n0 0\n0 5\n10 5\n6 2\n", "-208 -10\n188 -208\n386 188\n-505 -1000\n-505 -703\n-10 386\n-1000 -1000\n-1000 -703\n", "100 100\n100 101\n101 100\n101 101\n0 0\n0 5\n10 5\n0 -10\n", "550 -70\n-8 -597\n-70 -628\n-39 -690\n-1000 -380\n23 -659\n-70 550\n-380 -1000\n", "0 336\n128 80\n240 272\n0 0\n368 -112\n128 -256\n144 96\n464 64\n", "688 516\n387 258\n0 129\n387 430\n43 0\n430 129\n774 215\n473 129\n", "378 504\n504 504\n126 0\n504 126\n0 378\n252 546\n294 798\n546 756\n", "351 234\n234 741\n234 351\n702 819\n117 0\n0 117\n312 273\n780 351\n", "-1000 -676\n-136 -460\n-460 188\n188 80\n-568 -460\n-460 -136\n-676 -1000\n80 -568\n", "-1000 568\n-432 639\n278 710\n-929 0\n-361 355\n-361 71\n-219 852\n136 213\n", "153 102\n187 170\n102 153\n153 68\n0 51\n221 102\n51 0\n119 136\n", "20 -40\n-40 60\n-20 -15\n100 -90\n40 45\n0 0\n60 60\n40 10\n", "-244 -730\n512 998\n-460 -946\n728 1214\n-1000 -568\n728 -892\n80 -1000\n-352 -460\n", "-8 0\n0 -3\n8 0\n10000 10000\n9998 9999\n9998 10000\n0 3\n10000 9999\n", "0 0\n2 0\n2 2\n0 2\n1 1\n5 0\n5 2\n9 1\n", "600 500\n700 200\n600 180\n620 100\n700 120\n100 0\n680 200\n0 300\n", "0 0\n0 1\n1 0\n1 1\n10 10\n14 10\n12 16\n12 20\n", "646 102\n238 136\n102 510\n136 0\n578 578\n102 238\n0 102\n170 34\n", "428 -796\n-592 -1000\n666 3318\n-1000 1856\n190 2842\n462 3454\n394 2706\n20 2060\n", "296 -163\n350 -190\n-190 -1000\n701 -730\n782 -244\n215 -649\n-1000 -460\n-460 350\n", "-1000 -604\n-604 1112\n-340 -736\n452 1376\n-604 -340\n-736 -1000\n716 320\n-340 56\n", "-1000 -742\n1064 290\n32 634\n720 -742\n-742 -226\n-312 -398\n-484 -1000\n-226 -484\n", "980 518\n584 -670\n-208 914\n-736 -340\n-604 -274\n-1000 -736\n-604 -1000\n-340 -604\n", "434 116\n434 426\n-186 -1000\n-186 -256\n0 116\n434 -628\n62 54\n372 488\n", "420 280\n308 196\n336 392\n224 308\n0 224\n224 280\n56 0\n280 56\n", "270 2024\n-486 -1000\n-162 2672\n162 2888\n540 728\n918 1862\n-864 1160\n486 2510\n", "-1000 -400\n1190 450\n1460 420\n800 50\n1250 -550\n1100 360\n1370 330\n-550 -1000\n", "872 872\n-766 -1000\n170 -64\n1808 989\n1925 53\n989 -64\n-64 170\n-1000 -766\n", "248 404\n872 794\n950 846\n560 -1000\n-1000 716\n924 716\n1002 768\n-688 -688\n", "702 628\n-334 -408\n-482 -852\n850 -704\n-408 -334\n-926 -1000\n-1000 -926\n-630 480\n", "-465 -37\n-465 -1000\n177 -37\n-144 177\n-1000 -37\n-1000 -1000\n-358 -144\n-37 -358\n", "94 112\n-190 360\n-280 0\n0 0\n94 84\n74 76\n114 120\n90 360\n", "-1000 1052\n140 -392\n292 -1000\n900 -848\n-12 368\n672 -544\n748 -240\n-316 140\n", "140 42\n126 84\n-154 238\n-420 406\n14 0\n0 42\n-518 532\n-56 112\n", "-192 -192\n-495 616\n-1000 -596\n414 -91\n313 717\n-394 -192\n-798 -1000\n10 -596\n", "-850 -1000\n-1000 -850\n-800 -250\n250 -700\n-50 50\n-500 -1000\n-650 -800\n-800 -650\n", "2843 260\n3347 890\n2780 827\n1520 134\n-1000 -874\n2276 8\n-244 -1000\n3410 323\n", "748 68\n663 -34\n0 680\n425 0\n663 -68\n425 680\n0 0\n578 -170\n", "120 30\n200 160\n130 0\n150 40\n40 200\n0 40\n160 10\n160 0\n", "-360 120\n600 440\n-680 -40\n440 600\n-520 -360\n-200 -200\n-840 -1000\n-1000 -840\n", "357 -1000\n119 190\n714 -48\n0 -643\n833 -524\n952 547\n476 -167\n357 785\n", "-620 -1000\n-1000 -620\n976 672\n-240 140\n596 140\n140 -240\n1052 216\n520 596\n", "-1000 786\n-906 1256\n-671 1021\n-812 974\n598 316\n-765 1303\n598 -1000\n-1000 -530\n", "189 135\n261 153\n0 54\n81 0\n234 108\n216 180\n135 81\n54 135\n", "980 -520\n860 -430\n620 -250\n500 -160\n20 1220\n-1000 980\n380 -760\n-640 -1000\n", "210 140\n140 0\n210 210\n455 140\n70 210\n525 385\n0 70\n280 455\n", "8 -328\n-440 568\n-104 8\n-1000 -664\n8 456\n-328 8\n-552 120\n-664 -1000\n", "3368 858\n-1000 -546\n1886 0\n3914 702\n3602 429\n3056 585\n-298 -780\n2588 -234\n", "136 -1000\n544 -864\n408 -456\n816 156\n340 88\n884 -320\n0 -592\n408 -388\n", "270 225\n297 387\n315 135\n387 315\n45 0\n0 90\n225 297\n315 225\n", "-1000 -373\n254 1090\n-791 672\n463 -164\n-373 -373\n-373 -1000\n-164 463\n672 45\n", "216 0\n828 504\n648 612\n504 432\n756 792\n288 576\n0 144\n936 684\n", "329 -859\n282 -765\n376 81\n0 -906\n47 -1000\n846 -577\n940 -13\n282 -483\n", "-316 684\n-1000 -228\n444 76\n520 152\n1204 380\n-316 0\n-240 0\n368 760\n", "520 -325\n260 0\n650 -455\n0 195\n130 390\n195 455\n455 260\n260 260\n", "-1000 448\n120 448\n876 224\n1212 -84\n36 588\n372 280\n-776 0\n-104 896\n", "-832 -286\n-748 -664\n-916 -1000\n302 -160\n-328 344\n-202 -790\n-1000 -748\n-664 -916\n", "558 930\n0 837\n930 558\n310 775\n372 0\n0 372\n124 651\n186 961\n", "792 -648\n-352 -142\n704 -1000\n88 -472\n0 -824\n-682 1046\n572 -208\n242 980\n", "62 60\n54 50\n6 42\n64 42\n0 6\n36 0\n72 52\n42 36\n", "517 551\n940 786\n376 -13\n799 -1000\n-94 -154\n329 -906\n329 81\n-94 81\n", "0 0\n3 0\n3 4\n6 4\n100 100\n101 100\n100 101\n101 101\n", "134 -496\n-496 -118\n-748 8\n-1000 -748\n8 -244\n-370 134\n-622 260\n-874 -1000\n", "-620 -1000\n-430 -240\n45 -240\n-810 -145\n-145 520\n-715 -430\n-905 330\n-1000 -905\n", "58 0\n0 58\n377 145\n261 203\n203 261\n406 29\n290 0\n261 116\n", "528 660\n792 660\n660 528\n528 0\n0 132\n330 462\n132 0\n990 198\n", "0 0\n1 0\n2 0\n1 2\n50 50\n50 51\n51 51\n51 50\n", "0 0\n1 0\n0 1\n1 1\n100 100\n100 101\n101 100\n101 101\n", "184 230\n46 0\n0 184\n23 184\n115 552\n483 460\n391 92\n230 46\n", "312 468\n312 0\n728 728\n468 676\n520 416\n0 0\n780 468\n0 468\n", "160 120\n180 120\n340 140\n20 0\n320 300\n180 40\n160 280\n0 80\n", "-919 0\n53 648\n-514 405\n-433 729\n-1000 162\n-28 162\n-433 243\n-514 243\n", "-544 -316\n140 368\n-1000 -772\n-316 -544\n-316 596\n-544 140\n-88 -88\n-772 -1000\n", "-526 -447\n-1000 -526\n-526 -1000\n-131 -131\n-368 106\n185 -526\n-210 -842\n106 -368\n", "-328 260\n-664 -1000\n-1000 -496\n92 -496\n-1000 -1000\n-664 -496\n-496 -328\n260 92\n", "648 440\n720 -1000\n0 -280\n-120 1520\n-840 2240\n720 488\n672 560\n600 512\n", "280 0\n504 420\n0 0\n0 168\n644 504\n280 168\n532 532\n616 392\n", "410 533\n287 41\n615 164\n328 246\n697 451\n246 287\n0 246\n41 0\n", "457 -329\n-530 611\n-624 0\n-953 658\n-577 188\n-859 -141\n692 -188\n-1000 235\n", "400 -580\n-580 -895\n-475 -720\n-580 -1000\n-405 -1000\n-20 400\n-300 -825\n-1000 -20\n", "600 0\n460 600\n500 960\n0 200\n660 760\n300 800\n100 500\n700 300\n", "-610 40\n-1000 -220\n-870 -1000\n-220 352\n-298 -350\n-220 -90\n92 -38\n-90 -870\n", "-8 0\n0 -3\n8 0\n10000 10000\n9999 9999\n9999 10000\n0 3\n10000 9999\n", "344 -200\n-200 -520\n-680 -1000\n280 -8\n-1000 -680\n536 -136\n-520 -200\n472 56\n", "-586 -310\n-310 104\n104 -586\n-172 -1000\n-1000 -310\n-724 -862\n-34 -448\n-586 -1000\n", "-400 -1000\n-400 1000\n600 400\n400 1000\n400 1200\n-1000 -400\n-200 200\n1000 400\n", "0 25\n725 325\n250 225\n575 675\n375 175\n225 525\n25 0\n225 250\n", "-1000 -852\n-852 -1000\n332 480\n36 1812\n184 2996\n480 332\n-408 776\n-556 -408\n", "-125 -825\n1100 -475\n400 -300\n-1000 -475\n-475 400\n-650 -1000\n50 225\n750 750\n", "-845 860\n-535 -225\n-380 85\n395 550\n-225 -535\n-1000 -690\n-690 -1000\n-70 1325\n", "-1000 282\n-154 705\n-859 0\n974 846\n833 141\n128 282\n-13 423\n269 987\n", "360 300\n210 240\n240 90\n180 210\n150 390\n300 450\n0 120\n60 0\n", "0 0\n8 12\n14 4\n0 10\n7 5\n5 10\n15 11\n5 0\n", "-252 -1000\n-1000 -932\n-864 20\n-796 -864\n768 -388\n-932 -796\n-864 -1000\n156 632\n", "0 108\n216 144\n480 360\n0 0\n60 108\n240 192\n60 0\n-24 -24\n", "0 0\n0 1\n1 1\n1 0\n1000 1000\n1001 1003\n1004 1004\n1003 1001\n", "-288 -822\n-733 -110\n-733 -1000\n1047 -555\n-1000 -911\n780 780\n-466 -199\n-555 513\n", "-1 -223\n554 110\n-778 -1000\n-667 -445\n-1000 -667\n-445 -778\n443 -334\n110 221\n", "48 264\n144 240\n24 0\n168 48\n120 144\n0 72\n144 120\n24 168\n", "432 -1000\n0 -1000\n0 -520\n432 -520\n864 104\n192 8\n960 -568\n288 -664\n", "-208 -703\n-109 -604\n-406 -10\n287 188\n-208 -406\n-1000 -802\n-901 -1000\n485 -505\n", "-586 414\n-931 0\n-103 276\n-448 897\n-655 414\n35 759\n-586 345\n-1000 69\n", "4 1\n7 3\n9 4\n4 5\n1 3\n9 6\n12 4\n12 6\n", "-1000 176\n100 616\n-824 0\n-780 396\n-252 88\n-780 440\n-428 968\n-604 220\n", "-1000 -580\n-1000 -1000\n330 960\n610 260\n-860 -580\n120 470\n-860 -1000\n820 750\n", "89 -307\n-109 -505\n-10 89\n-1000 -604\n-505 -1000\n-406 -10\n-307 -406\n-604 -109\n"], "output": ["YES\n3 5 6 7\n1 2 4 8\n", "NO\n", "YES\n2 5 6 8\n1 3 4 7\n", "YES\n2 3 4 7\n1 5 6 8\n", "NO\n", "YES\n1 2 4 5\n3 6 7 8\n", "YES\n2 4 5 6\n1 3 7 8\n", "YES\n1 5 7 8 \n2 3 4 6 \n", "NO\n", "YES\n1 5 7 8 \n2 3 4 6 \n", "YES\n1 4 5 8\n2 3 6 7\n", "YES\n2 3 5 8\n1 4 6 7\n", "YES\n3 4 6 8\n1 2 5 7\n", "YES\n1 5 6 8 \n2 3 4 7 \n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n4 6 7 8\n1 2 3 5\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 3 5 8\n2 4 6 7\n", "YES\n1 3 7 8 \n2 4 5 6 \n", "YES\n2 4 6 8\n1 3 5 7\n", "YES\n1 4 5 7\n2 3 6 8\n", "NO\n", "YES\n1 2 6 8 \n3 4 5 7 \n", "YES\n2 3 6 7\n1 4 5 8\n", "YES\n2 4 5 8\n1 3 6 7\n", "YES\n1 4 7 8 \n2 3 5 6 \n", "YES\n1 4 5 8 \n2 3 6 7 \n", "NO\n", "YES\n1 3 5 8\n2 4 6 7\n", "NO\n", "YES\n1 2 3 4\n5 6 7 8\n", "YES\n5 6 7 8\n1 2 3 4\n", "NO\n", "YES\n2 3 4 6\n1 5 7 8\n", "NO\n", "YES\n1 3 5 6\n2 4 7 8\n", "YES\n1 2 4 6\n3 5 7 8\n", "NO\n", "NO\n", "NO\n", "YES\n1 2 5 6\n3 4 7 8\n", "NO\n", "NO\n", "NO\n", "YES\n2 6 7 8\n1 3 4 5\n", "YES\n2 4 5 6\n1 3 7 8\n", "YES\n2 3 6 7\n1 4 5 8\n", "YES\n1 2 3 6\n4 5 7 8\n", "YES\n1 2 6 7\n3 4 5 8\n", "YES\n3 5 6 7\n1 2 4 8\n", "NO\n", "YES\n1 3 5 6\n2 4 7 8\n", "NO\n", "NO\n", "YES\n1 2 5 8\n3 4 6 7\n", "YES\n2 4 7 8\n1 3 5 6\n", "YES\n1 2 5 7\n3 4 6 8\n", "YES\n2 4 7 8\n1 3 5 6\n", "NO\n", "YES\n2 5 7 8\n1 3 4 6\n", "NO\n", "NO\n", "YES\n1 2 5 6\n3 4 7 8\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n3 4 5 8\n1 2 6 7\n", "YES\n1 3 5 7\n2 4 6 8\n", "YES\n1 3 4 7\n2 5 6 8\n", "YES\n1 3 4 8\n2 5 6 7\n", "YES\n1 2 4 7\n3 5 6 8\n", "NO\n", "YES\n4 6 7 8\n1 2 3 5\n", "YES\n1 2 4 7\n3 5 6 8\n", "NO\n", "YES\n1 3 6 8\n2 4 5 7\n", "NO\n", "NO\n", "YES\n1 2 5 6\n3 4 7 8\n", "NO\n", "YES\n1 3 5 6\n2 4 7 8\n", "YES\n1 5 7 8 \n2 3 4 6 \n", "YES\n2 6 7 8\n1 3 4 5\n", "YES\n4 5 6 7\n1 2 3 8\n", "NO\n", "YES\n1 2 7 8 \n3 4 5 6 \n", "YES\n1 5 6 8 \n2 3 4 7 \n", "YES\n1 6 7 8 \n2 3 4 5 \n", "YES\n2 3 7 8\n1 4 5 6\n", "YES\n1 3 7 8 \n2 4 5 6 \n", "YES\n1 3 7 8\n2 4 5 6\n", "NO\n", "YES\n1 2 5 8\n3 4 6 7\n", "YES\n2 4 6 7\n1 3 5 8\n", "NO\n", "YES\n2 3 4 8\n1 5 6 7\n", "YES\n4 5 6 7\n1 2 3 8\n", "NO\n", "YES\n2 3 4 7\n1 5 6 8\n", "YES\n1 3 5 7\n2 4 6 8\n", "YES\n1 3 6 8\n2 4 5 7\n", "NO\n", "YES\n1 3 5 8\n2 4 6 7\n", "NO\n", "YES\n1 2 3 6\n4 5 7 8\n", "NO\n", "YES\n2 3 4 6\n1 5 7 8\n", "NO\n", "YES\n1 4 7 8\n2 3 5 6\n", "YES\n1 3 4 5\n2 6 7 8\n", "YES\n2 4 7 8\n1 3 5 6\n", "YES\n3 4 5 8\n1 2 6 7\n", "YES\n1 2 4 6\n3 5 7 8\n", "YES\n2 4 6 8\n1 3 5 7\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n3 4 5 7\n1 2 6 8\n", "NO\n", "YES\n1 3 5 8 \n2 4 6 7 \n", "NO\n", "YES\n1 4 5 6\n2 3 7 8\n", "YES\n1 3 5 6\n2 4 7 8\n", "YES\n1 5 7 8 \n2 3 4 6 \n", "YES\n1 2 3 5\n4 6 7 8\n", "NO\n", "YES\n1 2 3 4\n5 6 7 8\n", "NO\n", "NO\n", "YES\n1 4 5 6\n2 3 7 8\n", "NO\n", "YES\n1 3 4 8\n2 5 6 7\n", "YES\n3 4 7 8\n1 2 5 6\n", "NO\n", "NO\n", "NO\n", "YES\n2 4 5 6\n1 3 7 8\n", "YES\n3 4 5 6\n1 2 7 8\n", "NO\n", "NO\n", "YES\n1 3 4 7\n2 5 6 8\n", "YES\n1 3 5 6\n2 4 7 8\n", "YES\n2 3 6 8\n1 4 5 7\n", "YES\n3 5 7 8\n1 2 4 6\n", "NO\n", "YES\n1 2 5 6\n3 4 7 8\n", "NO\n", "YES\n1 2 5 7\n3 4 6 8\n", "YES\n2 3 5 7\n1 4 6 8\n", "NO\n", "YES\n1 2 3 7\n4 5 6 8\n", "YES\n2 4 7 8\n1 3 5 6\n", "YES\n2 3 5 8\n1 4 6 7\n", "YES\n2 3 5 8\n1 4 6 7\n", "YES\n3 6 7 8\n1 2 4 5\n", "NO\n", "NO\n", "NO\n", "YES\n1 4 5 6\n2 3 7 8\n", "YES\n2 4 7 8\n1 3 5 6\n", "NO\n", "YES\n1 2 4 7\n3 5 6 8\n", "NO\n", "NO\n", "YES\n2 3 6 7\n1 4 5 8\n", "YES\n3 5 6 7\n1 2 4 8\n", "YES\n3 6 7 8\n1 2 4 5\n", "YES\n2 4 6 8\n1 3 5 7\n", "NO\n", "YES\n1 2 3 4\n5 6 7 8\n", "YES\n1 2 3 8 \n4 5 6 7 \n", "YES\n3 4 5 7\n1 2 6 8\n", "YES\n2 3 5 7\n1 4 6 8\n", "YES\n2 4 6 8\n1 3 5 7\n", "YES\n2 5 6 7\n1 3 4 8\n", "YES\n1 4 6 7\n2 3 5 8\n", "YES\n1 4 7 8\n2 3 5 6\n", "NO\n", "YES\n2 5 7 8\n1 3 4 6\n", "YES\n1 3 4 5\n2 6 7 8\n", "NO\n", "YES\n1 4 6 8 \n2 3 5 7 \n", "YES\n2 3 5 6\n1 4 7 8\n", "YES\n1 4 5 7\n2 3 6 8\n", "NO\n", "YES\n1 4 6 8\n2 3 5 7\n", "YES\n1 4 6 7\n2 3 5 8\n", "YES\n2 3 5 7\n1 4 6 8\n", "YES\n2 4 5 6\n1 3 7 8\n", "NO\n", "YES\n1 2 5 8\n3 4 6 7\n", "YES\n1 3 4 8\n2 5 6 7\n", "YES\n4 5 6 8\n1 2 3 7\n", "YES\n1 2 5 6\n3 4 7 8\n", "YES\n2 3 5 7\n1 4 6 8\n", "YES\n1 3 5 8 \n2 4 6 7 \n", "NO\n", "NO\n", "YES\n1 4 6 8\n2 3 5 7\n", "YES\n1 2 7 8 \n3 4 5 6 \n", "YES\n1 2 5 8\n3 4 6 7\n", "YES\n5 6 7 8\n1 2 3 4\n", "YES\n1 3 4 8\n2 5 6 7\n", "YES\n1 3 4 6\n2 5 7 8\n", "NO\n", "YES\n2 5 6 7\n1 3 4 8\n", "YES\n3 4 6 8\n1 2 5 7\n", "YES\n1 3 6 7\n2 4 5 8\n"]}, "generated_tests": {"input": ["116 232\n87 0\n319 116\n203 174\n58 145\n174 0\n203 18\n0 58\n", "-1567 -637\n-516 -274\n-274 -153\n-32 -516\n452 210\n210 -516\n-758 -1000\n-274 452\n", "88 488\n-814 860\n-70 984\n-690 116\n-814 -1000\n488 302\n54 240\n-1000 -814\n", "864 -540\n972 -162\n342 4\n0 -324\n108 54\n468 378\n486 234\n324 360\n", "256 496\n304 701\n576 0\n320 464\n272 448\n0 64\n64 640\n640 576\n", "-856 -1000\n224 866\n-136 8\n584 656\n8 512\n368 296\n8 -136\n-1000 -856\n", "-1000 640\n-16 640\n312 -1000\n1740 -16\n640 968\n-672 -344\n-672 -1000\n968 -672\n", "-11 220\n-11 22\n176 -66\n-198 -22\n-198 176\n220 -198\n1 88\n44 -44\n", "477 0\n636 371\n106 689\n57 265\n0 53\n530 795\n53 530\n530 477\n", "248 92\n-1000 -792\n-584 -376\n-168 40\n-116 -376\n-193 -1000\n-376 -584\n300 -324\n", "-856 -932\n440 728\n728 296\n-1000 -856\n296 8\n-424 -280\n-280 -424\n8 440\n", "234 104\n0 52\n286 104\n598 624\n364 156\n182 520\n26 0\n702 208\n", "-160 336\n-76 672\n8 168\n-580 588\n-1000 504\n-496 840\n-130 84\n-664 0\n", "-340 3062\n-1000 650\n320 375\n705 485\n815 100\n430 -10\n-340 -10\n-1000 -1000\n", "-1000 -60\n-342 -1000\n1444 -248\n1162 -718\n1538 -624\n1914 -530\n786 162\n2290 -436\n", "-700 120\n-370 -90\n-40 510\n-490 150\n-1998 -60\n-670 -270\n-850 600\n-400 960\n", "-1000 -736\n1200 408\n1728 12\n188 -698\n1332 -516\n-736 -208\n452 -472\n804 -120\n", "424 -288\n-1000 -466\n68 246\n246 1492\n-644 -1000\n-644 -110\n-1000 1136\n602 135\n", "0 0\n5 0\n8 4\n3 4\n-2 0\n-2 -1\n-1 -1\n-1 -2\n", "10 10\n15 11\n15 9\n20 10\n100 100\n100 102\n107 102\n107 110\n", "2024 8\n1352 -1000\n1016 -244\n512 344\n296 344\n2360 -748\n-1000 -664\n344 -664\n", "0 8\n-2 0\n-3 0\n0 -8\n2 -1\n3 0\n0 2\n0 -2\n", "420 -664\n0 -160\n420 260\n-840 -412\n420 -580\n-840 65\n420 -160\n0 -1000\n", "1136 602\n1403 -21\n-21 -911\n-1000 424\n-733 513\n-288 -1000\n780 -288\n513 227\n", "0 0\n0 1\n1 0\n1 1\n2 2\n3 2\n3 3\n4 6\n", "191 112\n40 72\n64 96\n72 40\n80 32\n32 0\n0 32\n144 48\n", "-471 -80\n-1000 35\n-402 127\n150 -885\n-885 -1000\n35 150\n-333 -21\n-540 58\n", "-520 480\n-40 240\n-1000 240\n240 360\n-400 240\n-160 520\n-880 1\n120 640\n", "60 30\n0 18\n24 6\n81 55\n75 57\n18 24\n54 51\n6 0\n", "123 0\n-410 123\n1448 -123\n-82 369\n123 492\n0 492\n574 -369\n0 0\n", "177 488\n-628 -1000\n-70 -70\n116 1604\n-814 860\n488 -628\n860 674\n-1000 116\n", "0 336\n112 476\n196 448\n336 0\n560 896\n140 560\n224 532\n896 937\n", "-841 -205\n480 -205\n-1000 -1000\n-364 1385\n-682 113\n-841 -1000\n-1000 -205\n908 1067\n", "684 399\n0 228\n570 395\n228 285\n342 0\n228 570\n570 855\n114 741\n", "72 32\n4 40\n44 32\n48 0\n40 72\n20 16\n28 56\n0 40\n", "0 0\n1 0\n1 1\n0 1\n5 6\n100 351\n6 7\n10 196\n", "560 5\n0 140\n280 280\n560 700\n420 560\n700 560\n140 0\n700 420\n", "-372 93\n-403 31\n31 -31\n558 186\n248 434\n15 155\n0 -93\n527 465\n", "692 -60\n-812 316\n128 880\n-248 -624\n-812 692\n-1000 -1000\n-697 692\n-812 -1000\n", "117 0\n195 312\n312 195\n0 117\n312 663\n195 286\n468 273\n585 546\n", "-522 -1000\n912 1629\n912 133\n-283 1629\n-1000 -283\n195 -522\n-283 195\n-283 2824\n", "-1000 -829\n-715 -1060\n311 197\n197 -715\n-829 -1000\n-601 311\n-658 -487\n-487 -658\n", "-320 904\n3896 -13\n224 224\n3624 -48\n-1000 360\n-456 -320\n-864 -864\n-592 -1000\n", "937 937\n-851 43\n-404 1086\n43 -106\n788 -404\n-553 -255\n-1450 -851\n-106 -1000\n", "780 68\n424 -466\n68 -110\n246 424\n246 -466\n-110 -110\n-626 -1000\n-1000 -644\n", "0 -970\n90 -580\n585 159\n150 -880\n270 -400\n30 -1000\n405 320\n120 -850\n", "-736 -560\n56 -560\n-208 320\n-736 -472\n56 760\n-648 320\n-1993 -1000\n144 232\n", "1610 0\n1700 270\n-1000 -900\n2105 594\n800 0\n-190 -900\n1925 90\n1880 495\n", "576 -616\n192 -726\n384 152\n768 248\n384 -1000\n0 -808\n480 -232\n864 -136\n", "0 0\n1 1\n2 3\n3 3\n4 4\n4 5\n5 4\n5 5\n", "-880 0\n400 -240\n-640 418\n-160 240\n-240 480\n-520 360\n320 0\n-1000 120\n", "-40 -1000\n-440 80\n2200 -200\n1800 920\n-200 -680\n-840 120\n-40 -360\n-1000 -200\n", "-656 0\n-140 344\n-140 516\n-484 860\n-1000 4\n-54 946\n204 602\n-398 688\n", "840 980\n140 532\n980 840\n588 420\n700 1707\n252 980\n140 0\n0 140\n", "-536 -416\n-536 508\n-768 -188\n-768 -1000\n-1000 -768\n160 276\n-72 -420\n-304 -536\n", "760 980\n1420 -181\n320 -780\n-1000 -560\n100 -340\n-340 320\n-560 -1000\n-340 100\n", "-97 -140\n290 -97\n290 935\n935 290\n-1000 -73\n-140 247\n247 290\n-355 -1000\n", "25 10\n0 10\n41 34\n5 0\n39 40\n37 36\n35 32\n20 20\n", "100 100\n100 101\n101 100\n101 101\n0 0\n1 5\n21 5\n10 0\n", "65 852\n-645 284\n-361 710\n-1000 71\n-219 284\n207 426\n-716 1\n-929 355\n", "364 -688\n-260 248\n-312 40\n0 -532\n0 -792\n104 -792\n7 -428\n-52 -1000\n", "426 518\n-609 449\n633 -1000\n-586 2220\n-954 2174\n-632 2588\n-1000 2393\n-816 1967\n", "595 -159\n421 -565\n-275 -1000\n-275 -420\n189 15\n-1000 -532\n-1000 -420\n15 -391\n"], "output": ["NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary:  \nGiven eight planar points, determine whether one can partition them into two subsets of four points each such that one subset forms a square and the other a rectangle, by checking all 4-point combinations.\n\n2. Core algorithmic approach:  \nBrute-force enumeration of 4-element subsets (combinations) combined with permutation-based geometric validation using vector dot products and side-length comparisons.\n\n3. Reusable components:  \n- perpendicular(v1, v2): computes the dot product to test orthogonality of two vectors.  \n- coords_to_vecs(point_list): converts an ordered list of points into the list of successive edge vectors.  \n- shape predicates (all_perpendicular, rect_sides, square_sides): verify right angles and equal-side properties to recognize rectangles or squares."}
{"name": "135_B. Rectangle and Square", "description": "Little Petya very much likes rectangles and especially squares. Recently he has received 8 points on the plane as a gift from his mother. The points are pairwise distinct. Petya decided to split them into two sets each containing 4 points so that the points from the first set lay at the vertexes of some square and the points from the second set lay at the vertexes of a rectangle. Each point of initial 8 should belong to exactly one set. It is acceptable for a rectangle from the second set was also a square. If there are several partitions, Petya will be satisfied by any of them. Help him find such partition. Note that the rectangle and the square from the partition should have non-zero areas. The sides of the figures do not have to be parallel to the coordinate axes, though it might be the case.\n\nInput\n\nYou are given 8 pairs of integers, a pair per line \u2014 the coordinates of the points Petya has. The absolute value of all coordinates does not exceed 104. It is guaranteed that no two points coincide.\n\nOutput\n\nPrint in the first output line \"YES\" (without the quotes), if the desired partition exists. In the second line output 4 space-separated numbers \u2014 point indexes from the input, which lie at the vertexes of the square. The points are numbered starting from 1. The numbers can be printed in any order. In the third line print the indexes of points lying at the vertexes of a rectangle in the similar format. All printed numbers should be pairwise distinct.\n\nIf the required partition does not exist, the first line should contain the word \"NO\" (without the quotes), after which no output is needed.\n\nExamples\n\nInput\n\n0 0\n10 11\n10 0\n0 11\n1 1\n2 2\n2 1\n1 2\n\n\nOutput\n\nYES\n5 6 7 8\n1 2 3 4\n\n\nInput\n\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n\n\nOutput\n\nNO\n\n\nInput\n\n0 0\n4 4\n4 0\n0 4\n1 2\n2 3\n3 2\n2 1\n\n\nOutput\n\nYES\n1 2 3 4\n5 6 7 8\n\nNote\n\nPay attention to the third example: the figures do not necessarily have to be parallel to the coordinate axes.", "solution": "from math import *\ndef a(x1,y1,x2,y2,x3,y3,x4,y4):\n    b=sorted([[x1,y1],[x2,y2],[x3,y3],[x4,y4]])\n    x1,y1=b[0]\n    x2,y2=b[1]\n    x3,y3=b[2]\n    x4,y4=b[3]\n    a1=sqrt((x1-x2)**2+(y1-y2)**2)\n    a2=sqrt((x4-x2)**2+(y4-y2)**2)\n    a3=sqrt((x4-x3)**2+(y4-y3)**2)\n    a4=sqrt((x1-x3)**2+(y1-y3)**2)\n    return a1==a2==a3==a4 and a1!=0 and a4!=0 and abs(abs(degrees(asin((y2-y1)/a1)-asin((y3-y1)/a4)))-90)<=10**(-8)\ndef b(x1,y1,x2,y2,x3,y3,x4,y4):\n    b=sorted([[x1,y1],[x2,y2],[x3,y3],[x4,y4]])\n    x1,y1=b[0]\n    x2,y2=b[1]\n    x3,y3=b[2]\n    x4,y4=b[3]\n    a1=sqrt((x1-x2)**2+(y1-y2)**2)\n    a2=sqrt((x4-x2)**2+(y4-y2)**2)\n    a3=sqrt((x4-x3)**2+(y4-y3)**2)\n    a4=sqrt((x1-x3)**2+(y1-y3)**2)\n    return a1==a3 and a2==a4 and a1!=0 and a4!=0 and abs(abs(degrees(asin((y2-y1)/a1)-asin((y3-y1)/a4)))-90)<=10**(-8)\nc=[list(map(int,input().split())) for i in range(8)]\nz=False\nfor i in range(5):\n    for j in range(i+1,6):\n        for k in range(j+1,7):\n            for l in range(k+1,8):\n                if a(*c[i]+c[j]+c[k]+c[l]):\n                    d=[]\n                    e=[]\n                    for m in range(8):\n                        if m not in [i,j,k,l]:\n                            d+=c[m]\n                            e.append(m+1)\n                    if b(*d):\n                        print('YES')\n                        print(i+1,j+1,k+1,l+1)\n                        print(*e)\n                        z=True\n                        break\n            if z:\n                break\n        if z:\n            break\n    if z:\n        break\nif not(z):\n    print('NO')", "difficulty": 8, "public_tests": {"input": ["0 0\n4 4\n4 0\n0 4\n1 2\n2 3\n3 2\n2 1\n", "0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n", "0 0\n10 11\n10 0\n0 11\n1 1\n2 2\n2 1\n1 2\n"], "output": ["YES\n1 2 3 4 \n5 6 7 8 \n", "NO\n", "YES\n5 6 7 8 \n1 2 3 4 \n"]}, "private_tests": {"input": ["-850 -1000\n-475 -325\n1025 800\n-325 575\n-325 -850\n-1000 -475\n-100 -775\n1250 -550\n", "360 300\n210 240\n240 90\n180 210\n150 390\n300 450\n0 120\n60 0\n", "427 -451\n549 -573\n122 -1000\n0 -85\n183 -512\n427 98\n610 -329\n0 -878\n", "270 225\n297 387\n315 135\n387 315\n45 0\n0 90\n225 297\n315 225\n", "248 92\n-1000 -792\n-584 -376\n-168 40\n-116 -376\n-792 -1000\n-376 -584\n300 -324\n", "0 -970\n90 -580\n585 500\n150 -880\n270 -400\n30 -1000\n405 320\n120 -850\n", "-1 -223\n554 110\n-778 -1000\n-667 -445\n-1000 -667\n-445 -778\n443 -334\n110 221\n", "-544 -316\n140 368\n-1000 -772\n-316 -544\n-316 596\n-544 140\n-88 -88\n-772 -1000\n", "-1000 276\n-586 828\n-34 414\n104 414\n-862 690\n-448 276\n-34 966\n-172 0\n", "-700 120\n-370 -90\n-40 510\n-490 150\n-1000 -60\n-670 -270\n-850 600\n-400 960\n", "-1000 -852\n-852 -1000\n332 480\n36 1812\n184 2996\n480 332\n-408 776\n-556 -408\n", "-40 -1000\n-440 120\n2200 -200\n1800 920\n-200 -680\n-840 120\n-40 -360\n-1000 -200\n", "748 68\n663 -34\n0 680\n425 0\n663 -68\n425 680\n0 0\n578 -170\n", "2843 260\n3347 890\n2780 827\n1520 134\n-1000 -874\n2276 8\n-244 -1000\n3410 323\n", "-586 -310\n-310 104\n104 -586\n-172 -1000\n-1000 -310\n-724 -862\n-34 -448\n-586 -1000\n", "-1000 786\n-906 1256\n-671 1021\n-812 974\n598 316\n-765 1303\n598 -1000\n-1000 -530\n", "-880 0\n400 -240\n-640 480\n-160 240\n-240 480\n-520 360\n320 0\n-1000 120\n", "0 304\n456 532\n532 304\n456 76\n304 380\n152 0\n608 228\n228 152\n", "728 656\n584 152\n1160 152\n-1000 -1000\n1016 944\n-568 -424\n1448 440\n1016 728\n", "195 260\n533 390\n455 546\n0 65\n260 195\n65 0\n689 468\n611 624\n", "100 100\n100 101\n101 100\n101 101\n0 0\n0 5\n10 5\n6 2\n", "-638 3887\n-1000 1896\n448 1353\n-95 4430\n-457 -1000\n-276 4611\n-95 4249\n-819 4068\n", "0 8\n-2 0\n-3 0\n0 -8\n2 0\n3 0\n0 2\n0 -2\n", "600 0\n460 600\n500 960\n0 200\n660 760\n300 800\n100 500\n700 300\n", "477 0\n636 371\n106 689\n212 265\n0 53\n530 795\n53 530\n530 477\n", "62 60\n54 50\n6 42\n64 42\n0 6\n36 0\n72 52\n42 36\n", "184 230\n46 0\n0 184\n23 184\n115 552\n483 460\n391 92\n230 46\n", "292 1414\n802 1312\n-1000 -1000\n462 2400\n-184 -235\n-847 326\n-31 1091\n972 2298\n", "15 160\n-101 334\n-855 -1000\n-275 -101\n-1000 -855\n160 15\n160 -275\n334 160\n", "-912 -296\n672 -560\n-472 -296\n-648 -208\n-648 1288\n-824 -1000\n-1000 -912\n936 1024\n", "-845 860\n-535 -225\n-380 85\n395 550\n-225 -535\n-1000 -690\n-690 -1000\n-70 1325\n", "-260 332\n-112 776\n776 184\n-1000 -1000\n-112 1368\n-852 36\n628 924\n36 36\n", "116 488\n-628 -1000\n-70 -70\n116 1604\n-814 860\n488 -628\n860 674\n-1000 116\n", "0 0\n5 0\n8 4\n3 4\n-2 -2\n-2 -1\n-1 -1\n-1 -2\n", "-328 260\n-664 -1000\n-1000 -496\n92 -496\n-1000 -1000\n-664 -496\n-496 -328\n260 92\n", "-288 -822\n-733 -110\n-733 -1000\n1047 -555\n-1000 -911\n780 780\n-466 -199\n-555 513\n", "0 0\n0 1\n1 0\n1 1\n2 2\n3 2\n3 3\n4 3\n", "-620 -1000\n-1000 -620\n976 672\n-240 140\n596 140\n140 -240\n1052 216\n520 596\n", "558 930\n0 837\n930 558\n310 775\n372 0\n0 372\n124 651\n186 961\n", "1610 0\n1700 270\n-1000 -900\n2105 315\n800 0\n-190 -900\n1925 90\n1880 495\n", "4 1\n7 3\n9 4\n4 5\n1 3\n9 6\n12 4\n12 6\n", "-522 -1000\n912 1629\n912 434\n-283 1629\n-1000 -283\n195 -522\n-283 195\n-283 2824\n", "1 1\n1 2\n2 1\n2 2\n100 100\n101 100\n101 102\n102 102\n", "-465 -37\n-465 -1000\n177 -37\n-144 177\n-1000 -37\n-1000 -1000\n-358 -144\n-37 -358\n", "937 937\n-851 43\n-404 1086\n43 -106\n788 -404\n-553 -255\n-1000 -851\n-106 -1000\n", "3368 858\n-1000 -546\n1886 0\n3914 702\n3602 429\n3056 585\n-298 -780\n2588 -234\n", "547 -167\n-1000 -762\n190 904\n-762 -1000\n-167 71\n904 547\n71 -167\n-167 190\n", "702 628\n-334 -408\n-482 -852\n850 -704\n-408 -334\n-926 -1000\n-1000 -926\n-630 480\n", "-11 220\n-11 22\n176 -66\n-198 -22\n-198 176\n220 -198\n0 88\n44 -44\n", "760 980\n1420 -120\n320 -780\n-1000 -560\n100 -340\n-340 320\n-560 -1000\n-340 100\n", "48 264\n144 240\n24 0\n168 48\n120 144\n0 72\n144 120\n24 168\n", "520 -325\n260 0\n650 -455\n0 195\n130 390\n195 455\n455 260\n260 260\n", "1 0\n2 2\n0 2\n1 4\n7 0\n9 0\n7 1\n9 1\n", "-736 -560\n56 -560\n-208 320\n-736 -472\n56 760\n-648 320\n-1000 -1000\n144 232\n", "65 852\n-645 284\n-361 710\n-1000 71\n-219 284\n207 426\n-716 0\n-929 355\n", "517 551\n940 786\n376 -13\n799 -1000\n-94 -154\n329 -906\n329 81\n-94 81\n", "410 533\n287 41\n615 164\n328 246\n697 451\n246 287\n0 246\n41 0\n", "980 518\n584 -670\n-208 914\n-736 -340\n-604 -274\n-1000 -736\n-604 -1000\n-340 -604\n", "96 180\n-204 108\n-144 36\n84 102\n-12 0\n0 6\n-72 72\n12 84\n", "-208 -10\n188 -208\n386 188\n-505 -1000\n-505 -703\n-10 386\n-1000 -1000\n-1000 -703\n", "10 10\n15 11\n15 9\n20 10\n100 100\n100 102\n107 102\n107 100\n", "100 100\n100 101\n101 100\n101 101\n0 0\n0 5\n10 5\n0 -10\n", "692 -60\n-812 316\n128 880\n-248 -624\n-812 692\n-1000 -1000\n-1000 692\n-812 -1000\n", "20 -40\n-40 60\n-20 -15\n100 -90\n40 45\n0 0\n60 60\n40 10\n", "-919 0\n53 648\n-514 405\n-433 729\n-1000 162\n-28 162\n-433 243\n-514 243\n", "980 -520\n860 -430\n620 -250\n500 -160\n20 1220\n-1000 980\n380 -760\n-640 -1000\n", "744 -19\n-1000 -782\n-237 90\n-128 -346\n-346 -891\n-891 -1000\n635 -1000\n-19 -564\n", "-208 -703\n-109 -604\n-406 -10\n287 188\n-208 -406\n-1000 -802\n-901 -1000\n485 -505\n", "-125 -825\n1100 -475\n400 -300\n-1000 -475\n-475 400\n-650 -1000\n50 225\n750 750\n", "-856 -1000\n224 872\n-136 8\n584 656\n8 512\n368 296\n8 -136\n-1000 -856\n", "0 0\n1 1\n2 2\n3 3\n4 4\n4 5\n5 4\n5 5\n", "360 648\n504 360\n0 360\n648 288\n288 504\n648 576\n288 0\n432 720\n", "5 0\n16 -54\n9 5\n0 4\n0 -6\n4 9\n40 -24\n-24 -36\n", "-1000 -373\n254 1090\n-791 672\n463 -164\n-373 -373\n-373 -1000\n-164 463\n672 45\n", "0 39\n169 117\n182 182\n104 130\n117 195\n65 0\n39 104\n104 65\n", "-320 904\n3896 -184\n224 224\n3624 -48\n-1000 360\n-456 -320\n-864 -864\n-592 -1000\n", "576 -616\n192 -424\n384 152\n768 248\n384 -1000\n0 -808\n480 -232\n864 -136\n", "0 0\n3 0\n3 4\n6 4\n100 100\n101 100\n100 101\n101 101\n", "0 -814\n93 -256\n372 -349\n186 23\n837 -628\n744 -442\n93 -1000\n465 -70\n", "560 140\n0 140\n280 280\n560 700\n420 560\n700 560\n140 0\n700 420\n", "-1000 282\n-154 705\n-859 0\n974 846\n833 141\n128 282\n-13 423\n269 987\n", "-1000 176\n100 616\n-824 0\n-780 396\n-252 88\n-780 440\n-428 968\n-604 220\n", "2024 8\n1352 -1000\n1016 -244\n512 344\n1856 344\n2360 -748\n-1000 -664\n344 -664\n", "-480 -350\n-1000 -870\n-870 -1000\n-155 495\n-740 -285\n40 -870\n625 -90\n-350 -480\n", "-8 0\n0 -3\n8 0\n10000 10000\n9998 9999\n9998 10000\n0 3\n10000 9999\n", "153 102\n187 170\n102 153\n153 68\n0 51\n221 102\n51 0\n119 136\n", "428 -796\n-592 -1000\n666 3318\n-1000 1856\n190 2842\n462 3454\n394 2706\n20 2060\n", "-400 -1000\n-400 1000\n600 400\n400 1000\n400 1200\n-1000 -400\n-200 200\n1000 400\n", "-832 -286\n-748 -664\n-916 -1000\n302 -160\n-328 344\n-202 -790\n-1000 -748\n-664 -916\n", "270 2024\n-486 -1000\n-162 2672\n162 2888\n540 728\n918 1862\n-864 1160\n486 2510\n", "329 -859\n282 -765\n376 81\n0 -906\n47 -1000\n846 -577\n940 -13\n282 -483\n", "280 480\n360 -80\n-1000 -640\n-200 -160\n-760 -1000\n-280 -160\n-280 400\n-40 -520\n", "0 336\n112 476\n196 448\n336 0\n560 896\n140 560\n224 532\n896 560\n", "40 100\n210 20\n100 60\n120 230\n0 40\n60 0\n60 80\n270 170\n", "426 518\n-609 449\n633 -1000\n-586 2220\n-954 2174\n-632 2588\n-1000 2542\n-816 1967\n", "-316 684\n-1000 -228\n444 76\n520 152\n1204 380\n-316 0\n-240 0\n368 760\n", "0 0\n1 0\n1 1\n0 1\n5 6\n100 190\n6 7\n10 196\n", "-360 120\n600 440\n-680 -40\n440 600\n-520 -360\n-200 -200\n-840 -1000\n-1000 -840\n", "-1000 -829\n-715 -601\n311 197\n197 -715\n-829 -1000\n-601 311\n-658 -487\n-487 -658\n", "-725 1596\n155 -1000\n-758 1530\n-571 1376\n-1000 320\n-692 1497\n-659 1563\n584 56\n", "1538 -718\n-1000 -718\n3277 -13\n3089 645\n3747 833\n-718 -1000\n3935 175\n1820 -1000\n", "-340 1640\n-1000 650\n320 375\n705 485\n815 100\n430 -10\n-340 -10\n-1000 -1000\n", "0 336\n128 80\n240 272\n0 0\n368 -112\n128 -256\n144 96\n464 64\n", "116 232\n87 0\n319 116\n203 174\n58 145\n174 0\n203 261\n0 58\n", "-8 0\n0 -3\n8 0\n10000 10000\n9999 9999\n9999 10000\n0 3\n10000 9999\n", "410 -754\n574 312\n82 66\n820 -180\n410 -1000\n0 -1000\n328 -426\n0 -754\n", "-620 -1000\n-430 -240\n45 -240\n-810 -145\n-145 520\n-715 -430\n-905 330\n-1000 -905\n", "256 496\n304 512\n576 0\n320 464\n272 448\n0 64\n64 640\n640 576\n", "-850 -1000\n-1000 -850\n-800 -250\n250 -700\n-50 50\n-500 -1000\n-650 -800\n-800 -650\n", "684 399\n0 228\n570 342\n228 285\n342 0\n228 570\n570 855\n114 741\n", "-471 -80\n-1000 35\n-402 127\n150 -885\n-885 -1000\n35 150\n-333 -11\n-540 58\n", "-1000 -637\n-516 -274\n-274 -153\n-32 -516\n452 210\n210 -516\n-758 -1000\n-274 452\n", "1175 450\n-130 -1000\n160 160\n-1000 -1000\n-1000 450\n-130 450\n1465 -565\n450 -855\n", "-586 414\n-931 0\n-103 276\n-448 897\n-655 414\n35 759\n-586 345\n-1000 69\n", "189 135\n261 153\n0 54\n81 0\n234 108\n216 180\n135 81\n54 135\n", "351 234\n234 741\n234 351\n702 819\n117 0\n0 117\n312 273\n780 351\n", "296 -163\n350 -190\n-190 -1000\n701 -730\n782 -244\n215 -649\n-1000 -460\n-460 350\n", "420 -664\n0 -160\n420 260\n-840 -412\n420 -580\n-840 92\n420 -160\n0 -1000\n", "94 112\n-190 360\n-280 0\n0 0\n94 84\n74 76\n114 120\n90 360\n", "0 0\n1 0\n0 1\n1 1\n100 100\n100 101\n101 100\n101 101\n", "100 100\n100 101\n101 100\n101 101\n0 0\n1 5\n11 5\n10 0\n", "1136 602\n1403 -21\n-21 -911\n-1000 424\n-733 513\n-288 -1000\n780 -288\n513 335\n", "128 112\n40 72\n64 96\n72 40\n80 32\n32 0\n0 32\n144 48\n", "872 872\n-766 -1000\n170 -64\n1808 989\n1925 53\n989 -64\n-64 170\n-1000 -766\n", "203 232\n232 348\n58 0\n0 58\n319 203\n290 232\n348 319\n232 290\n", "-1000 176\n408 88\n-384 528\n-648 704\n-472 792\n-736 0\n-384 0\n320 880\n", "-1000 640\n-16 640\n312 -1000\n968 -16\n640 968\n-672 -344\n-672 -1000\n968 -672\n", "0 0\n1 0\n2 0\n1 2\n50 50\n50 51\n51 51\n51 50\n", "8 -328\n-440 568\n-104 8\n-1000 -664\n8 456\n-328 8\n-552 120\n-664 -1000\n", "0 0\n8 12\n14 4\n0 10\n7 5\n5 10\n15 11\n5 0\n", "120 120\n105 30\n30 0\n0 75\n75 90\n90 165\n75 105\n45 135\n", "0 25\n725 325\n250 225\n575 675\n375 175\n225 525\n25 0\n225 250\n", "792 -648\n-352 -142\n704 -1000\n88 -472\n0 -824\n-682 1046\n572 -208\n242 980\n", "378 504\n504 504\n126 0\n504 126\n0 378\n252 546\n294 798\n546 756\n", "528 660\n792 660\n660 528\n528 0\n0 132\n330 462\n132 0\n990 198\n", "134 -496\n-496 -118\n-748 8\n-1000 -748\n8 -244\n-370 134\n-622 260\n-874 -1000\n", "434 372\n0 62\n496 868\n868 620\n620 248\n248 496\n62 434\n372 0\n", "-526 -447\n-1000 -526\n-526 -1000\n-131 -131\n-368 106\n185 -526\n-210 -842\n106 -368\n", "-536 -304\n-536 508\n-768 -188\n-768 -1000\n-1000 -768\n160 276\n-72 -420\n-304 -536\n", "-160 336\n-76 672\n8 168\n-580 588\n-1000 504\n-496 840\n-496 84\n-664 0\n", "0 0\n0 1\n1 0\n1 1\n10 10\n14 10\n12 16\n12 20\n", "0 0\n4 -16\n24 36\n-60 60\n-56 44\n36 43\n40 12\n52 19\n", "-97 -140\n290 -97\n290 935\n935 290\n-1000 -355\n-140 247\n247 290\n-355 -1000\n", "-252 -1000\n-1000 -932\n-864 20\n-796 -864\n768 -388\n-932 -796\n-864 -1000\n156 632\n", "280 0\n504 420\n0 0\n0 168\n644 504\n280 168\n532 532\n616 392\n", "1 0\n0 4\n2 4\n1 8\n15 15\n15 16\n18 15\n18 16\n", "420 280\n308 196\n336 392\n224 308\n0 224\n224 280\n56 0\n280 56\n", "58 0\n0 58\n377 145\n261 203\n203 261\n406 29\n290 0\n261 116\n", "-841 -205\n590 -205\n-1000 -1000\n-364 1385\n-682 113\n-841 -1000\n-1000 -205\n908 1067\n", "248 404\n872 794\n950 846\n560 -1000\n-1000 716\n924 716\n1002 768\n-688 -688\n", "265 220\n30 -60\n330 -420\n140 110\n15 0\n140 200\n15 90\n345 -480\n", "-799 407\n-665 -531\n-531 -866\n-866 -1000\n-263 -933\n809 407\n1345 -933\n-1000 -665\n", "120 30\n200 160\n130 0\n150 40\n40 200\n0 40\n160 10\n160 0\n", "-445 -1\n-556 -1000\n554 443\n-1000 -445\n-445 -334\n443 -445\n-1 -556\n-334 554\n", "840 980\n140 532\n980 840\n588 420\n700 868\n252 980\n140 0\n0 140\n", "-244 -730\n512 998\n-460 -946\n728 1214\n-1000 -568\n728 -892\n80 -1000\n-352 -460\n", "-856 -1000\n440 728\n728 296\n-1000 -856\n296 8\n-424 -280\n-280 -424\n8 440\n", "117 0\n195 312\n312 195\n0 117\n312 663\n195 390\n468 273\n585 546\n", "424 -288\n-1000 -466\n68 246\n246 1492\n-644 -1000\n-644 -110\n-1000 1136\n602 246\n", "364 -688\n-260 248\n-312 40\n0 -532\n0 -792\n104 -792\n260 -428\n-52 -1000\n", "-1000 -742\n1064 290\n32 634\n720 -742\n-742 -226\n-312 -398\n-484 -1000\n-226 -484\n", "-1000 -736\n1200 408\n1728 12\n188 -1000\n1332 -516\n-736 -208\n452 -472\n804 -120\n", "688 516\n387 258\n0 129\n387 430\n43 0\n430 129\n774 215\n473 129\n", "180 100\n180 220\n80 0\n240 760\n0 80\n100 180\n720 160\n780 700\n", "-424 920\n-1000 152\n344 -232\n-232 536\n-424 -1000\n-616 -40\n344 -616\n536 728\n", "920 -360\n2088 200\n-1000 600\n2024 -56\n1576 -184\n1240 -1000\n-680 -40\n1512 -440\n", "550 -70\n-8 -597\n-70 -628\n-39 -690\n-1000 -380\n23 -659\n-70 550\n-380 -1000\n", "-520 480\n-40 240\n-1000 240\n240 360\n-400 240\n-160 520\n-880 0\n120 640\n", "68 0\n374 221\n306 204\n323 136\n272 340\n391 153\n0 272\n340 68\n", "123 0\n-410 123\n902 -123\n-82 369\n123 492\n0 492\n574 -369\n0 0\n", "-1000 568\n-432 639\n278 710\n-929 0\n-361 355\n-361 71\n-219 852\n136 213\n", "-153 -238\n-204 34\n102 119\n34 0\n-663 -306\n0 68\n-612 -578\n136 51\n", "160 120\n180 120\n340 140\n20 0\n320 300\n180 40\n160 280\n0 80\n", "-1000 -604\n-604 1112\n-340 -736\n452 1376\n-604 -340\n-736 -1000\n716 320\n-340 56\n", "600 500\n700 200\n600 180\n620 100\n700 120\n100 0\n680 200\n0 300\n", "432 -1000\n0 -1000\n0 -520\n432 -520\n864 104\n192 8\n960 -568\n288 -664\n", "140 42\n126 84\n-154 238\n-420 406\n14 0\n0 42\n-518 532\n-56 112\n", "-610 40\n-1000 -220\n-870 -1000\n-220 352\n-298 -350\n-220 -90\n92 -38\n-90 -870\n", "646 102\n238 136\n102 510\n136 0\n578 578\n102 238\n0 102\n170 34\n", "302 488\n-814 860\n-70 984\n-690 116\n-814 -1000\n488 302\n54 240\n-1000 -814\n", "312 468\n312 0\n728 728\n468 676\n520 416\n0 0\n780 468\n0 468\n", "136 -1000\n544 -864\n408 -456\n816 156\n340 88\n884 -320\n0 -592\n408 -388\n", "-372 93\n-403 31\n31 -31\n558 186\n248 434\n279 155\n0 -93\n527 465\n", "-1000 -580\n-1000 -1000\n330 960\n610 260\n-860 -580\n120 470\n-860 -1000\n820 750\n", "-622 315\n-1000 126\n-937 0\n-55 315\n-559 189\n-433 441\n-307 819\n71 693\n", "0 0\n0 1\n1 1\n1 0\n1000 1000\n1001 1003\n1004 1004\n1003 1001\n", "-1000 -400\n1190 450\n1460 420\n800 50\n1250 -550\n1100 360\n1370 330\n-550 -1000\n", "0 0\n0 1\n1 0\n1 1\n2 0\n2 1\n3 1\n4 0\n", "-192 -192\n-495 616\n-1000 -596\n414 -91\n313 717\n-394 -192\n-798 -1000\n10 -596\n", "60 260\n280 0\n100 240\n80 200\n0 0\n0 400\n280 400\n40 220\n", "457 -329\n-530 611\n-624 0\n-953 658\n-577 188\n-859 -141\n692 -188\n-1000 235\n", "864 -540\n972 -162\n342 216\n0 -324\n108 54\n468 378\n486 234\n324 360\n", "89 -307\n-109 -505\n-10 89\n-1000 -604\n-505 -1000\n-406 -10\n-307 -406\n-604 -109\n", "210 140\n140 0\n210 210\n455 140\n70 210\n525 385\n0 70\n280 455\n", "25 10\n0 10\n41 34\n5 0\n39 30\n37 36\n35 32\n20 20\n", "648 440\n720 -1000\n0 -280\n-120 1520\n-840 2240\n720 488\n672 560\n600 512\n", "70 64\n32 0\n58 48\n48 80\n72 50\n0 48\n56 62\n80 32\n", "0 108\n216 144\n480 360\n0 0\n60 108\n240 192\n60 0\n-24 -24\n", "400 -580\n-580 -895\n-475 -720\n-580 -1000\n-405 -1000\n-20 400\n-300 -825\n-1000 -20\n", "72 32\n4 40\n44 32\n32 0\n40 72\n20 16\n28 56\n0 40\n", "0 0\n2 0\n2 2\n0 2\n1 1\n5 0\n5 2\n9 1\n", "-941 -1000\n-764 -410\n-823 -882\n-882 -823\n-1000 -941\n1006 298\n475 -941\n-233 829\n", "6 40\n0 35\n4 50\n5 0\n35 40\n40 5\n10 46\n0 44\n", "780 68\n424 -466\n68 -110\n246 424\n246 -466\n-110 -110\n-822 -1000\n-1000 -644\n", "216 0\n828 504\n648 612\n504 432\n756 792\n288 576\n0 144\n936 684\n", "-1000 -676\n-136 -460\n-460 188\n188 80\n-568 -460\n-460 -136\n-676 -1000\n80 -568\n", "598 368\n414 92\n0 0\n138 46\n368 322\n644 138\n138 0\n0 46\n", "-1000 448\n120 448\n876 224\n1212 -84\n36 588\n372 280\n-776 0\n-104 896\n", "-859 329\n-1000 141\n81 705\n-906 0\n-577 987\n-718 329\n-624 188\n-201 47\n", "-1000 -60\n-342 -1000\n1444 -248\n1162 -718\n1538 -624\n1914 -530\n786 692\n2290 -436\n", "434 116\n434 426\n-186 -1000\n-186 -256\n0 116\n434 -628\n62 54\n372 488\n", "-1000 1052\n140 -392\n292 -1000\n900 -848\n-12 368\n672 -544\n748 -240\n-316 140\n", "60 30\n0 18\n24 6\n81 36\n75 57\n18 24\n54 51\n6 0\n", "-656 0\n-140 344\n-140 516\n-484 860\n-1000 344\n-54 946\n204 602\n-398 688\n", "42 -168\n966 252\n462 126\n840 756\n336 630\n0 -588\n-252 -168\n-294 -588\n", "344 -200\n-200 -520\n-680 -1000\n280 -8\n-1000 -680\n536 -136\n-520 -200\n472 56\n", "234 104\n0 52\n286 104\n598 624\n208 156\n182 520\n26 0\n702 208\n", "595 -159\n421 -565\n-275 -1000\n-275 -420\n189 15\n-1000 -1000\n-1000 -420\n15 -391\n", "357 -1000\n119 190\n714 -48\n0 -643\n833 -524\n952 547\n476 -167\n357 785\n"], "output": ["YES\n1 2 5 6 \n3 4 7 8 \n", "YES\n1 2 5 6 \n3 4 7 8 \n", "YES\n4 5 6 7 \n1 2 3 8 \n", "YES\n2 4 7 8 \n1 3 5 6 \n", "YES\n1 4 5 8 \n2 3 6 7 \n", "NO\n", "YES\n1 2 7 8\n3 4 5 6\n", "YES\n2 5 6 7 \n1 3 4 8 \n", "YES\n2 4 6 7 \n1 3 5 8 \n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 4 6 7 \n2 3 5 8 \n", "NO\n", "NO\n", "YES\n3 4 5 8 \n1 2 6 7 \n", "NO\n", "YES\n2 3 7 8 \n1 4 5 6 \n", "NO\n", "NO\n", "NO\n", "YES\n2 3 5 6 \n1 4 7 8 \n", "YES\n1 5 7 8\n2 3 4 6\n", "YES\n1 2 4 7 \n3 5 6 8 \n", "YES\n1 3 2 8 \n4 5 6 7 ", "NO\n", "YES\n2 4 7 8 \n1 3 5 6 \n", "YES\n1 2 5 8 \n3 4 6 7 \n", "YES\n1 3 4 8 \n2 5 6 7 \n", "NO\n", "YES\n1 2 6 8\n3 4 5 7\n", "NO\n", "YES\n1 4 7 8 \n2 3 5 6 \n", "YES\n1 4 6 8 \n2 3 5 7 \n", "NO\n", "YES\n3 5 7 8 \n1 2 4 6 \n", "YES\n2 4 7 8 \n1 3 5 6 \n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n3 4 7 8 \n1 2 5 6 \n", "YES\n1 3 5 6 \n2 4 7 8 \n", "NO\n", "YES\n1 3 6 8 \n2 4 5 7 \n", "YES\n1 3 4 8 \n2 5 6 7 \n", "NO\n", "YES\n1 2 3 6 \n4 5 7 8 \n", "YES\n1 2 5 8 \n3 4 6 7 \n", "NO\n", "NO\n", "NO\n", "YES\n1 3 5 6 \n2 4 7 8 \n", "NO\n", "YES\n1 3 4 5 \n2 6 7 8 \n", "YES\n1 2 3 5 \n4 6 7 8 \n", "NO\n", "YES\n1 2 3 6 \n4 5 7 8 \n", "NO\n", "NO\n", "YES\n1 2 3 4 \n5 6 7 8 \n", "NO\n", "YES\n2 4 6 8 \n1 3 5 7 \n", "NO\n", "YES\n1 3 5 7 \n2 4 6 8 \n", "YES\n1 3 4 8 \n2 5 6 7 \n", "YES\n1 2 5 8 \n3 4 6 7 \n", "YES\n2 4 5 6 \n1 3 7 8 \n", "NO\n", "YES\n1 3 4 7 \n2 5 6 8 \n", "NO\n", "YES\n2 3 5 8 \n1 4 6 7 \n", "YES\n1 6 7 8\n2 3 4 5\n", "NO\n", "YES\n1 2 5 6 \n3 4 7 8 \n", "NO\n", "YES\n2 3 4 8 \n1 5 6 7 \n", "YES\n1 3 5 8 \n2 4 6 7 \n", "YES\n4 5 6 8 \n1 2 3 7 \n", "YES\n2 5 6 7 \n1 3 4 8 \n", "NO\n", "YES\n4 5 6 7 \n1 2 3 8 \n", "NO\n", "YES\n2 4 6 8 \n1 3 5 7 \n", "NO\n", "YES\n2 3 5 7 \n1 4 6 8 \n", "YES\n1 4 5 6 \n2 3 7 8 \n", "NO\n", "YES\n3 6 7 8 \n1 2 4 5 \n", "YES\n1 2 4 7 \n3 5 6 8 \n", "YES\n2 3 6 7 \n1 4 5 8 \n", "YES\n1 3 5 6 \n2 4 7 8 \n", "NO\n", "NO\n", "NO\n", "YES\n1 3 5 6 \n2 4 7 8 \n", "YES\n2 3 4 6 \n1 5 7 8 \n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n3 5 6 7 \n1 2 4 8 \n", "NO\n", "YES\n2 3 4 7 \n1 5 6 8 \n", "YES\n3 5 6 7 \n1 2 4 8 \n", "YES\n1 2 4 5 \n3 6 7 8 \n", "YES\n3 4 5 6 \n1 2 7 8 \n", "YES\n1 4 7 8\n2 3 5 6\n", "YES\n1 3 7 8\n2 4 5 6\n", "YES\n2 5 6 8 \n1 3 4 7 \n", "YES\n1 3 7 8 \n2 4 5 6 \n", "YES\n1 3 4 6 \n2 5 7 8 \n", "YES\n1 2 5 6 \n3 4 7 8 \n", "YES\n2 4 7 8 \n1 3 5 6 \n", "YES\n1 4 5 6 \n2 3 7 8 \n", "NO\n", "NO\n", "YES\n1 2 3 4 \n5 6 7 8 \n", "NO\n", "NO\n", "YES\n1 3 5 8 \n2 4 6 7 \n", "YES\n1 4 5 6 \n2 3 7 8 \n", "YES\n1 2 5 7 \n3 4 6 8 \n", "YES\n2 5 7 8 \n1 3 4 6 \n", "YES\n1 5 7 8\n2 3 4 6\n", "NO\n", "YES\n2 3 5 7 \n1 4 6 8 \n", "YES\n2 3 5 7 \n1 4 6 8 \n", "YES\n1 5 6 8\n2 3 4 7\n", "YES\n2 4 5 6 \n1 3 7 8 \n", "NO\n", "YES\n1 3 4 5 \n2 6 7 8 \n", "YES\n2 4 6 8 \n1 3 5 7 \n", "YES\n2 3 6 7 \n1 4 5 8 \n", "YES\n1 7 2 8 \n3 4 5 6 ", "YES\n1 4 6 7 \n2 3 5 8 \n", "YES\n2 3 6 7 \n1 4 5 8 \n", "YES\n1 5 6 8\n2 3 4 7\n", "NO\n", "NO\n", "YES\n1 2 6 7 \n3 4 5 8 \n", "YES\n1 3 5 8\n2 4 6 7\n", "YES\n2 5 7 8 \n1 3 4 6 \n", "NO\n", "YES\n1 2 3 4 \n5 6 7 8 \n", "YES\n3 6 7 8 \n1 2 4 5 \n", "YES\n2 4 5 8 \n1 3 6 7 \n", "NO\n", "NO\n", "NO\n", "YES\n1 3 4 7 \n2 5 6 8 \n", "YES\n1 2 4 7 \n3 5 6 8 \n", "YES\n2 4 5 6 \n1 3 7 8 \n", "NO\n", "YES\n2 3 5 8 \n1 4 6 7 \n", "YES\n5 6 7 8 \n1 2 3 4 \n", "YES\n4 6 7 8 \n1 2 3 5 \n", "NO\n", "YES\n1 5 7 8\n2 3 4 6\n", "NO\n", "YES\n1 4 7 8 \n2 3 5 6 \n", "YES\n2 4 7 8 \n1 3 5 6 \n", "YES\n1 3 6 8 \n2 4 5 7 \n", "NO\n", "YES\n2 3 4 6 \n1 5 7 8 \n", "YES\n2 4 6 8 \n1 3 5 7 \n", "YES\n1 7 5 8 \n2 3 4 6 ", "NO\n", "YES\n1 2 4 6 \n3 5 7 8 \n", "NO\n", "YES\n2 3 5 7 \n1 4 6 8 \n", "YES\n1 3 5 6 \n2 4 7 8 \n", "YES\n3 4 5 7 \n1 2 6 8 \n", "YES\n5 6 7 8 \n1 2 3 4 \n", "NO\n", "YES\n1 4 5 7 \n2 3 6 8 \n", "YES\n1 3 5 8\n2 4 6 7\n", "YES\n2 3 4 7 \n1 5 6 8 \n", "YES\n3 4 5 7 \n1 2 6 8 \n", "YES\n1 2 3 7 \n4 5 6 8 \n", "NO\n", "YES\n3 4 6 8 \n1 2 5 7 \n", "YES\n4 6 7 8 \n1 2 3 5 \n", "NO\n", "NO\n", "NO\n", "YES\n2 4 5 6 \n1 3 7 8 \n", "YES\n1 3 4 8 \n2 5 6 7 \n", "NO\n", "NO\n", "YES\n1 3 6 7 \n2 4 5 8 \n", "YES\n1 2 5 7 \n3 4 6 8 \n", "YES\n3 5 6 7 \n1 2 4 8 \n", "NO\n", "YES\n1 3 5 7 \n2 4 6 8 \n", "NO\n", "YES\n1 4 6 8\n2 3 5 7\n", "YES\n1 4 5 8\n2 3 6 7\n", "NO\n", "YES\n2 6 7 8 \n1 3 4 5 \n", "YES\n1 3 7 8\n2 4 5 6\n", "YES\n1 2 4 6 \n3 5 7 8 \n", "YES\n2 3 5 8 \n1 4 6 7 \n", "YES\n3 4 5 8 \n1 2 6 7 \n", "YES\n1 2 5 6 \n3 4 7 8 \n", "NO\n", "YES\n1 3 5 8 \n2 4 6 7 \n", "NO\n", "NO\n", "NO\n", "YES\n1 4 5 7 \n2 3 6 8 \n", "YES\n2 6 7 8 \n1 3 4 5 \n", "NO\n", "YES\n1 4 6 8 \n2 3 5 7 \n", "YES\n3 4 6 8 \n1 2 5 7 \n", "YES\n1 2 5 8 \n3 4 6 7 \n", "YES\n2 3 6 8\n1 4 5 7\n"]}, "generated_tests": {"input": ["-850 -1000\n-475 -325\n1025 800\n-325 575\n-325 -850\n-1213 -475\n-100 -775\n1250 -550\n", "360 300\n210 240\n240 90\n180 210\n150 390\n519 450\n0 120\n60 0\n", "427 -451\n549 -573\n122 -1000\n0 -85\n338 -512\n427 98\n610 -329\n0 -878\n", "270 388\n297 387\n315 135\n387 315\n45 0\n0 90\n225 297\n315 225\n", "248 92\n-87 -792\n-584 -376\n-168 40\n-116 -376\n-792 -1000\n-376 -584\n300 -324\n", "0 -970\n90 -580\n585 500\n150 -880\n270 -400\n30 -1000\n405 320\n120 -533\n", "-1 -223\n554 110\n-778 -1000\n-667 -445\n-1000 -467\n-445 -778\n443 -334\n110 221\n", "-544 -316\n140 327\n-1000 -772\n-316 -544\n-316 596\n-544 140\n-88 -88\n-772 -1000\n", "-1000 276\n-586 828\n-34 507\n104 414\n-862 690\n-448 276\n-34 966\n-172 0\n", "-700 120\n-370 -90\n-40 510\n-490 150\n-1000 -60\n-572 -270\n-850 600\n-400 960\n", "-1000 -852\n-811 -1000\n332 480\n36 1812\n184 2996\n480 332\n-408 776\n-556 -408\n", "-40 -1000\n-440 120\n3978 -200\n1800 920\n-200 -680\n-840 120\n-40 -360\n-1000 -200\n", "748 68\n663 -34\n0 680\n425 0\n663 -68\n425 680\n0 0\n578 -228\n", "2843 260\n3347 890\n2780 827\n107 134\n-1000 -874\n2276 8\n-244 -1000\n3410 323\n", "-586 -310\n-310 104\n104 -586\n-172 -368\n-1000 -310\n-724 -862\n-34 -448\n-586 -1000\n", "-1000 786\n-906 1256\n-671 516\n-812 974\n598 316\n-765 1303\n598 -1000\n-1000 -530\n", "-880 0\n400 -240\n-640 480\n-18 240\n-240 480\n-520 360\n320 0\n-1000 120\n", "0 304\n456 532\n532 304\n456 76\n304 380\n152 0\n608 7\n228 152\n", "728 656\n584 273\n1160 152\n-1000 -1000\n1016 944\n-568 -424\n1448 440\n1016 728\n", "195 260\n533 390\n455 546\n0 65\n260 195\n55 0\n689 468\n611 624\n", "100 100\n100 101\n101 100\n001 101\n0 0\n0 5\n10 5\n6 2\n", "-638 3887\n-852 1896\n448 1353\n-95 4430\n-457 -1000\n-276 4611\n-95 4249\n-819 4068\n", "0 8\n-2 0\n-3 1\n0 -8\n2 0\n3 0\n0 2\n0 -2\n", "600 0\n460 600\n500 960\n0 200\n660 760\n300 800\n100 500\n700 290\n", "477 0\n636 371\n106 689\n212 265\n0 53\n530 889\n53 530\n530 477\n", "62 60\n54 50\n6 42\n64 42\n0 8\n36 0\n72 52\n42 36\n", "198 230\n46 0\n0 184\n23 184\n115 552\n483 460\n391 92\n230 46\n", "214 1414\n802 1312\n-1000 -1000\n462 2400\n-184 -235\n-847 326\n-31 1091\n972 2298\n", "24 160\n-101 334\n-855 -1000\n-275 -101\n-1000 -855\n160 15\n160 -275\n334 160\n", "-912 -296\n672 -560\n-472 -296\n-648 -208\n-648 1392\n-824 -1000\n-1000 -912\n936 1024\n", "-845 860\n-535 -225\n-380 124\n395 550\n-225 -535\n-1000 -690\n-690 -1000\n-70 1325\n", "-260 332\n-112 776\n776 82\n-1000 -1000\n-112 1368\n-852 36\n628 924\n36 36\n", "116 488\n-628 -1000\n-70 -109\n116 1604\n-814 860\n488 -628\n860 674\n-1000 116\n", "0 0\n10 0\n8 4\n3 4\n-2 -2\n-2 -1\n-1 -1\n-1 -2\n", "-328 260\n-664 -1000\n-1000 -496\n92 -940\n-1000 -1000\n-664 -496\n-496 -328\n260 92\n", "-288 -822\n-733 -110\n-733 -1000\n1047 -555\n-1000 -911\n780 780\n-466 -22\n-555 513\n", "0 0\n0 1\n1 0\n1 1\n2 2\n6 2\n3 3\n4 3\n", "-432 -1000\n-1000 -620\n976 672\n-240 140\n596 140\n140 -240\n1052 216\n520 596\n", "558 930\n0 837\n930 558\n310 775\n372 0\n-1 372\n124 651\n186 961\n", "1610 0\n1700 270\n-1000 -900\n2105 315\n800 0\n-190 -900\n2046 90\n1880 495\n", "4 1\n2 3\n9 4\n4 5\n1 3\n9 6\n12 4\n12 6\n", "-522 -1000\n912 1629\n912 434\n-283 1629\n-1000 -283\n195 -522\n-283 195\n-548 2824\n", "1 1\n1 2\n2 1\n2 2\n100 000\n101 100\n101 102\n102 102\n", "-465 -22\n-465 -1000\n177 -37\n-144 177\n-1000 -37\n-1000 -1000\n-358 -144\n-37 -358\n", "937 937\n-851 43\n-404 1086\n43 -106\n788 -404\n-553 -255\n-1000 -851\n-106 -740\n", "3368 858\n-1000 -546\n1886 0\n3914 702\n3602 429\n3056 20\n-298 -780\n2588 -234\n", "547 -167\n-1000 -762\n190 149\n-762 -1000\n-167 71\n904 547\n71 -167\n-167 190\n", "702 628\n-334 -408\n-482 -852\n850 -704\n-408 -334\n-926 -958\n-1000 -926\n-630 480\n", "-11 220\n-11 22\n176 -66\n-198 -22\n-44 176\n220 -198\n0 88\n44 -44\n", "760 980\n1420 -120\n223 -780\n-1000 -560\n100 -340\n-340 320\n-560 -1000\n-340 100\n", "48 264\n144 354\n24 0\n168 48\n120 144\n0 72\n144 120\n24 168\n", "520 -458\n260 0\n650 -455\n0 195\n130 390\n195 455\n455 260\n260 260\n", "1 0\n2 2\n0 2\n1 4\n4 0\n9 0\n7 1\n9 1\n", "-736 -560\n56 -560\n-208 320\n-736 -427\n56 760\n-648 320\n-1000 -1000\n144 232\n", "65 517\n-645 284\n-361 710\n-1000 71\n-219 284\n207 426\n-716 0\n-929 355\n", "517 551\n940 786\n376 -13\n799 -1000\n-171 -154\n329 -906\n329 81\n-94 81\n", "410 533\n287 41\n1091 164\n328 246\n697 451\n246 287\n0 246\n41 0\n", "980 518\n584 -670\n-402 914\n-736 -340\n-604 -274\n-1000 -736\n-604 -1000\n-340 -604\n", "96 180\n-204 108\n-144 36\n84 102\n-12 0\n0 6\n-72 18\n12 84\n", "-208 -10\n188 -92\n386 188\n-505 -1000\n-505 -703\n-10 386\n-1000 -1000\n-1000 -703\n", "10 10\n15 11\n15 9\n20 10\n100 100\n100 102\n107 102\n107 101\n", "100 100\n100 001\n101 100\n101 101\n0 0\n0 5\n10 5\n0 -10\n"], "output": ["NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary:\nGiven eight 2D points, determine if they can be partitioned into two groups of four that form a square and a rectangle, respectively.\n\n2. Core algorithmic approach:\nBrute-force combinatorial search over all 4-point subsets (C(8,4)=70) combined with geometric checks (distance comparisons and perpendicularity test via angle/asin).\n\n3. Reusable components:\n- A distance function or inline Euclidean distance calculation between two points.\n- A perpendicularity or right-angle check using vector dot products or angle differences.\n- Iteration over k-element subsets of an n-element set (nested loops or a generic combination generator)."}
{"name": "407_A. Triangle", "description": "There is a right triangle with legs of length a and b. Your task is to determine whether it is possible to locate the triangle on the plane in such a way that none of its sides is parallel to the coordinate axes. All the vertices must have integer coordinates. If there exists such a location, you have to output the appropriate coordinates of vertices.\n\nInput\n\nThe first line contains two integers a, b (1 \u2264 a, b \u2264 1000), separated by a single space.\n\nOutput\n\nIn the first line print either \"YES\" or \"NO\" (without the quotes) depending on whether the required location exists. If it does, print in the next three lines three pairs of integers \u2014 the coordinates of the triangle vertices, one pair per line. The coordinates must be integers, not exceeding 109 in their absolute value.\n\nExamples\n\nInput\n\n1 1\n\n\nOutput\n\nNO\n\n\nInput\n\n5 5\n\n\nOutput\n\nYES\n2 1\n5 5\n-2 4\n\n\nInput\n\n5 10\n\n\nOutput\n\nYES\n-10 4\n-2 -2\n1 2", "solution": "import os\nimport sys\nfrom io import BytesIO, IOBase\n\n\ndef main():\n    pass\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\ndef count1(s):\n    c=0\n    for i in s:\n        if(i=='1'):\n            c+=1\n    return(c)\ndef binary(n):\n    return(bin(n).replace(\"0b\",\"\"))\ndef decimal(s):\n    return(int(s,2))\ndef pow2(n):\n    p=0\n    while(n>1):\n        n//=2\n        p+=1\n    return(p)\ndef isPrime(n):\n    if(n==1):\n        return(False)\n    else:\n        root=int(n**0.5)\n        root+=1\n        for i in range(2,root):\n            if(n%i==0):\n                return(False)\n        return(True)\na,b=map(int,input().split())\na,b=min(a,b),max(a,b)\nf=False\nans=[[0,0]]\nf=False\nl1=[]\nl2=[]\nfor i in range(1,a):\n    t=(a*a-i*i)**0.5\n    if(int(t)==t):\n        l1.append([int(t),i])\nfor i in range(1,b):\n    t=(b*b-i*i)**0.5\n    if(int(t)==t):\n        l2.append([int(t),-i])\nf=True\nfor i in range(0,len(l1)):\n    if(f):\n        for j in range(0,len(l2)):\n            x1=l1[i][0]\n            x2=l2[j][0]\n            y1=l1[i][1]\n            y2=l2[j][1]\n            if(x1!=x2 and ((y2-y1)**2+(x2-x1)**2)==(a**2+b**2)):\n                f=False\n                print(\"YES\")\n                print(0,0)\n                print(x1,y1)\n                print(x2,y2)\n                break\nif(f):\n    print(\"NO\")", "difficulty": 7, "public_tests": {"input": ["5 5\n", "5 10\n", "1 1\n"], "output": ["YES\n0   0\n3   4\n-4   3\n", "YES\n0   0\n3   4\n-8   6\n", "NO\n"]}, "private_tests": {"input": ["195 468\n", "629 865\n", "5 205\n", "455 470\n", "600 175\n", "395 55\n", "111 111\n", "5 1000\n", "15 20\n", "130 312\n", "999 1000\n", "5 11\n", "30 40\n", "60 80\n", "440 330\n", "385 505\n", "105 140\n", "661 175\n", "120 90\n", "949 360\n", "755 865\n", "140 105\n", "1000 5\n", "280 210\n", "575 85\n", "935 938\n", "1000 1000\n", "5 25\n", "305 949\n", "10 15\n", "80 60\n", "2 2\n", "728 299\n", "757 582\n", "173 588\n", "17 17\n", "533 298\n", "25 35\n", "408 765\n", "20 15\n", "65 156\n", "90 120\n", "25 5\n", "45 872\n", "5 6\n", "180 135\n", "15 15\n"], "output": ["YES\n0   0\n180   75\n-180   432\n", "NO\n", "YES\n0   0\n3   4\n-164   123\n", "YES\n0   0\n273   364\n-376   282\n", "YES\n0   0\n168   576\n-168   49\n", "YES\n0   0\n237   316\n-44   33\n", "YES\n0   0\n36   105\n-105   36\n", "YES\n0   0\n3   4\n-800   600\n", "YES\n0   0\n12   9\n-12   16\n", "YES\n0   0\n120   50\n-120   288\n", "NO\n", "NO\n", "YES\n0   0\n24   18\n-24   32\n", "YES\n0   0\n48   36\n-48   64\n", "YES\n0   0\n264   352\n-264   198\n", "YES\n0   0\n231   308\n-404   303\n", "YES\n0   0\n84   63\n-84   112\n", "NO\n", "YES\n0   0\n72   96\n-72   54\n", "NO\n", "YES\n0   0\n453   604\n-692   519\n", "YES\n0   0\n84   112\n-84   63\n", "YES\n0   0\n600   800\n-4   3\n", "YES\n0   0\n168   224\n-168   126\n", "YES\n0   0\n345   460\n-68   51\n", "NO\n", "YES\n0   0\n280   960\n-960   280\n", "YES\n0   0\n3   4\n-20   15\n", "NO\n", "YES\n0   0\n6   8\n-12   9\n", "YES\n0   0\n48   64\n-48   36\n", "NO\n", "YES\n0   0\n280   672\n-276   115\n", "NO\n", "NO\n", "YES\n0   0\n8   15\n-15   8\n", "NO\n", "YES\n0   0\n15   20\n-28   21\n", "YES\n0   0\n360   192\n-360   675\n", "YES\n0   0\n12   16\n-12   9\n", "YES\n0   0\n60   25\n-60   144\n", "YES\n0   0\n72   54\n-72   96\n", "YES\n0   0\n15   20\n-4   3\n", "NO\n", "NO\n", "YES\n0   0\n108   144\n-108   81\n", "YES\n0   0\n9   12\n-12   9\n"]}, "generated_tests": {"input": ["294 468\n", "205 865\n", "780 330\n", "595 360\n", "505 210\n", "5 30\n", "180 20\n", "15 10\n", "780 120\n", "140 30\n", "5 44\n", "717 470\n", "600 228\n", "383 55\n", "110 111\n", "9 1000\n", "15 23\n", "130 207\n", "999 1010\n", "3 10\n", "56 40\n", "108 80\n", "385 807\n", "105 239\n", "1154 175\n", "12 90\n", "1171 865\n", "140 68\n", "439 85\n", "935 908\n", "1001 1000\n", "592 949\n", "0 15\n", "80 26\n", "3 2\n", "145 299\n", "394 582\n", "173 120\n", "17 1\n", "354 298\n", "12 35\n", "408 742\n", "13 15\n", "88 156\n", "172 120\n", "25 1\n", "45 234\n", "0 6\n", "0 5\n", "5 2\n", "0 1\n", "294 70\n", "205 159\n", "5 4\n", "717 635\n", "600 52\n", "383 70\n", "111 110\n", "9 1100\n", "1 10\n", "130 346\n", "781 1010\n", "1 9\n", "56 45\n", "42 80\n", "385 994\n", "95 239\n", "1154 141\n", "11 90\n", "595 532\n", "1171 1369\n"], "output": ["NO\n", "YES\n0 0\n123 164\n-692 519\n", "YES\n0 0\n468 624\n-264 198\n", "YES\n0 0\n357 476\n-288 216\n", "YES\n0 0\n303 404\n-168 126\n", "YES\n0 0\n3 4\n-24 18\n", "YES\n0 0\n108 144\n-16 12\n", "YES\n0 0\n9 12\n-8 6\n", "YES\n0 0\n468 624\n-96 72\n", "YES\n0 0\n84 112\n-24 18\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary  \nGiven two positive integers, decide whether you can find two non\u2010zero integer vectors of those lengths that are perpendicular, and if so, construct one such pair.\n\n2. Core algorithmic approach  \nBrute\u2010force enumeration of all Pythagorean decompositions for each length (i.e. all integer pairs (x,y) with x\u00b2+y\u00b2=length\u00b2) and then nested iteration to find a cross\u2010pair whose dot product is zero (so the vectors are orthogonal) and whose endpoints form a valid non\u2010degenerate configuration.\n\n3. Reusable components  \n- Pythagorean\u2010triple generator: iterate y from 1\u2026n\u22121 and check if n\u00b2\u2013y\u00b2 is a perfect square to produce all integer (x,y) with x\u00b2+y\u00b2=n\u00b2.  \n- Perfect\u2010square test: compute t = sqrt(m) as float or integer and verify if t\u00b2 == m.  \n- Orthogonality check: given two vectors (x1,y1),(x2,y2), check x1\u00b7x2 + y1\u00b7y2 == 0."}
{"name": "1163_C2. Power Transmission (Hard Edition)", "description": "This problem is same as the previous one, but has larger constraints.\n\nIt was a Sunday morning when the three friends Selena, Shiro and Katie decided to have a trip to the nearby power station (do not try this at home). After arriving at the power station, the cats got impressed with a large power transmission system consisting of many chimneys, electric poles, and wires. Since they are cats, they found those things gigantic.\n\nAt the entrance of the station, there is a map describing the complicated wiring system. Selena is the best at math among three friends. He decided to draw the map on the Cartesian plane. Each pole is now a point at some coordinates (x_i, y_i). Since every pole is different, all of the points representing these poles are distinct. Also, every two poles are connected with each other by wires. A wire is a straight line on the plane infinite in both directions. If there are more than two poles lying on the same line, they are connected by a single common wire.\n\nSelena thinks, that whenever two different electric wires intersect, they may interfere with each other and cause damage. So he wonders, how many pairs are intersecting? Could you help him with this problem?\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 1000) \u2014 the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 \u2264 x_i, y_i \u2264 10^4) \u2014 the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.\n\nOutput\n\nPrint a single integer \u2014 the number of pairs of wires that are intersecting.\n\nExamples\n\nInput\n\n\n4\n0 0\n1 1\n0 3\n1 2\n\n\nOutput\n\n\n14\n\n\nInput\n\n\n4\n0 0\n0 2\n0 4\n2 0\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n3\n-1 -1\n1 0\n3 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example:\n\n<image>\n\nIn the second example:\n\n<image>\n\nNote that the three poles (0, 0), (0, 2) and (0, 4) are connected by a single wire.\n\nIn the third example:\n\n<image>", "solution": "from itertools import combinations\n\nn = int(input())\n\npoints = []\nfor _ in range(n):\n    x, y = map(int, input().split(' '))\n    points.append((x, y))\n\ndirections = {}\nfor pair in combinations(points, 2):\n    (x1, y1), (x2, y2) = pair\n    if x1 == x2:\n        dir = (0, 1)\n        b = x1\n    else:\n        dir = (1, (y2 - y1) / (x2 - x1))\n        b = (y2 * x1 - x2 * y1) / (x1 - x2)\n\n    if dir in directions:\n        directions[dir].add(b)\n    else:\n        directions[dir] = set([b])\n\ntotal_lines = sum(len(value) for key, value in directions.items())\n\nresult = 0\nfor key, value in directions.items():\n    current = len(value)\n    result += (total_lines - current) * current\n\nprint(int(result / 2))\n", "difficulty": 9, "public_tests": {"input": ["4\n0 0\n1 1\n0 3\n1 2\n", "3\n-1 -1\n1 0\n3 1\n", "4\n0 0\n0 2\n0 4\n2 0\n"], "output": ["14\n", "0\n", "6\n"]}, "private_tests": {"input": ["4\n-10000 -10000\n-10000 -9999\n10000 10000\n9999 10000\n", "16\n0 0\n0 2\n0 4\n0 6\n2 0\n2 2\n2 4\n2 6\n4 0\n4 2\n4 4\n4 6\n6 0\n6 2\n6 4\n6 6\n", "4\n-10000 -10000\n-10000 10000\n10000 -10000\n10000 10000\n", "2\n10000 10000\n-10000 -10000\n", "25\n-10000 -10000\n-10000 -5000\n-10000 0\n-10000 5000\n-10000 10000\n-5000 -10000\n-5000 -5000\n-5000 0\n-5000 5000\n-5000 10000\n0 -10000\n0 -5000\n0 0\n0 5000\n0 10000\n5000 -10000\n5000 -5000\n5000 0\n5000 5000\n5000 10000\n10000 -10000\n10000 -5000\n10000 0\n10000 5000\n10000 10000\n"], "output": ["14\n", "1783\n", "13\n", "0\n", "9324\n"]}, "generated_tests": {"input": ["16\n0 0\n0 2\n0 4\n0 6\n2 0\n2 2\n2 4\n2 6\n4 0\n4 2\n4 4\n4 6\n6 0\n6 3\n6 4\n6 6\n", "4\n-10000 -10000\n-10000 00000\n10000 -10000\n10000 10000\n", "2\n10010 10000\n-10000 -10000\n", "25\n-10000 -10000\n-10000 -5000\n-10000 0\n-10000 5000\n-10000 10000\n-7452 -10000\n-5000 -5000\n-5000 0\n-5000 5000\n-5000 10000\n0 -10000\n0 -5000\n0 0\n0 5000\n0 10000\n5000 -10000\n5000 -5000\n5000 0\n5000 5000\n5000 10000\n10000 -10000\n10000 -5000\n10000 0\n10000 5000\n10000 10000\n", "4\n0 0\n1 1\n-1 3\n1 2\n", "3\n-1 -1\n1 0\n2 1\n", "4\n0 1\n0 2\n0 4\n2 0\n", "16\n0 0\n0 2\n0 4\n0 6\n2 0\n2 2\n2 4\n1 6\n4 0\n4 2\n4 4\n4 6\n6 0\n6 3\n6 4\n6 6\n", "25\n-10000 -10000\n-10000 -5000\n-10000 0\n-10000 5000\n-10000 10000\n-7452 -10000\n-5000 -5000\n-5000 0\n-5000 5000\n-5000 10000\n0 -10000\n0 -5000\n0 0\n0 5000\n0 10000\n5000 -13650\n5000 -5000\n5000 0\n5000 5000\n5000 10000\n10000 -10000\n10000 -5000\n10000 0\n10000 5000\n10000 10000\n", "16\n0 0\n-1 2\n0 4\n0 6\n2 0\n2 2\n2 4\n1 6\n4 0\n4 2\n4 4\n4 6\n6 0\n6 3\n6 4\n6 6\n", "25\n-10000 -10000\n-10000 -5000\n-10000 0\n-10000 5000\n-10000 10000\n-7452 -10000\n-5000 -5000\n-5000 0\n-5000 5000\n-5000 10000\n-1 -10000\n0 -5000\n0 0\n0 5000\n0 10000\n5000 -13650\n5000 -5000\n5000 0\n5000 5000\n5000 10000\n10000 -10000\n10000 -5000\n10000 0\n10000 5000\n10000 10000\n", "4\n-10000 -10000\n-10000 00000\n10000 -10000\n10000 10010\n", "2\n10010 10000\n-10000 -8381\n", "4\n0 0\n2 1\n-1 3\n1 2\n", "3\n-1 -1\n1 0\n1 1\n", "4\n0 1\n0 2\n0 3\n2 0\n", "4\n-10000 -10000\n-3456 00000\n10000 -10000\n10000 10010\n", "4\n0 0\n2 2\n-1 3\n1 2\n", "4\n0 1\n0 0\n0 3\n2 0\n", "4\n-10000 -10000\n-3456 00000\n10000 -10000\n10000 10000\n", "4\n0 1\n0 0\n0 3\n2 -1\n", "4\n-10000 -10000\n-3456 00000\n10000 -10000\n10000 11000\n", "4\n-10000 -10000\n-3456 00000\n00000 -10000\n10000 11000\n", "4\n-10000 -10000\n-2063 00000\n00000 -10000\n10000 11000\n", "4\n-10000 -10000\n-2063 00000\n00000 -10535\n10000 11000\n", "4\n-10000 -10000\n-2063 00000\n00000 -10535\n10000 11100\n", "4\n-10000 -10000\n-2533 00000\n00000 -10535\n10000 11100\n", "4\n-10000 -11753\n-2533 00000\n00000 -10535\n10000 11100\n", "4\n-10000 -11753\n-2533 00000\n00100 -10535\n10000 11100\n", "4\n-10000 -11753\n-2533 00000\n00100 -4864\n10000 11100\n", "4\n-10000 -11753\n-2533 00000\n00100 -5161\n10000 11100\n", "4\n-1525 -11753\n-2533 00000\n00100 -5161\n10000 11100\n", "4\n-1525 -11753\n-2533 00000\n00100 -5161\n10000 10100\n", "4\n-1516 -11753\n-2533 00000\n00100 -5161\n10000 10100\n", "4\n-1516 -11753\n-2533 00000\n01100 -5161\n10000 10100\n", "4\n-1516 -11753\n-4704 00000\n01100 -5161\n10000 10100\n", "4\n-1516 -11753\n-8838 00000\n01100 -5161\n10000 10100\n", "4\n-1516 -11753\n-8838 00000\n01101 -5161\n10000 10100\n", "4\n-1516 -3902\n-8838 00000\n01101 -5161\n10000 10100\n", "4\n-1516 -3902\n-8838 00010\n01101 -5161\n10000 10100\n", "4\n-1516 -3902\n-8838 00010\n01101 -5161\n11000 10100\n", "4\n-1516 -3902\n-8838 01010\n01101 -5161\n11000 10100\n", "4\n-1516 -3902\n-8838 01010\n01101 -5161\n11100 10100\n", "4\n-1516 -3902\n-8838 11010\n01101 -5161\n11100 10100\n", "4\n-1516 -3902\n-8838 11011\n01101 -5161\n11100 10100\n", "4\n-1516 -7375\n-8838 11011\n01101 -5161\n11100 10100\n", "4\n-1516 -9692\n-8838 11011\n01101 -5161\n11100 10100\n", "4\n-2629 -9692\n-8838 11011\n01101 -5161\n11100 10100\n", "4\n-2629 -9692\n-8838 10011\n01101 -5161\n11100 10100\n", "4\n-2629 -9692\n-8838 11011\n01101 -2990\n11100 10100\n", "4\n-2629 -16642\n-8838 11011\n01101 -2990\n11100 10100\n", "4\n-2629 -16642\n-8838 11011\n01101 -2990\n11100 10101\n", "4\n-2629 -16642\n-8838 11011\n01001 -2990\n11100 10101\n", "4\n-2629 -16642\n-8838 11011\n01001 -2990\n11100 10100\n", "4\n-2629 -16642\n-8838 11011\n01001 -2990\n11100 10110\n", "4\n-2629 -14401\n-8838 11011\n01001 -2990\n11100 10110\n", "4\n-2629 -14401\n-8838 11011\n01001 -1811\n11100 10110\n", "4\n-2629 -14401\n-8838 11011\n01000 -1811\n11100 10110\n", "4\n-2629 -14401\n-1704 11011\n01000 -1811\n11100 10110\n", "4\n-2629 -14401\n-1704 11011\n00000 -1811\n11100 10110\n", "4\n-2629 -14401\n-1704 11011\n00000 -1811\n11100 11110\n", "4\n-2629 -14401\n-1704 11011\n00000 -3018\n11100 11110\n", "4\n-2629 -14401\n-1704 11001\n00000 -3018\n11100 11110\n", "4\n-2629 -14401\n-1704 11001\n00000 -3018\n11000 11110\n", "4\n-2629 -14401\n-2320 11001\n00000 -3018\n11000 11110\n", "4\n-2629 -14401\n-2320 11101\n00000 -3018\n11000 11110\n", "4\n-2629 -14401\n-2320 11101\n00000 -3018\n11000 11100\n", "4\n-2629 -24974\n-2320 11101\n00000 -3018\n11000 11100\n"], "output": ["1865\n", "14\n", "0\n", "10680\n", "15\n", "3\n", "6\n", "1948\n", "12113\n", "2148\n", "14109\n", "14\n", "0\n", "15\n", "3\n", "6\n", "15\n", "15\n", "6\n", "15\n", "6\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n", "15\n"]}, "short_description": "1. One-sentence summary:  \n   Given a set of points, the solution enumerates all distinct lines determined by point pairs, groups them by direction (slope), and computes the total number of intersection points among those lines.\n\n2. Core algorithmic approach:  \n   - Brute-force pair generation (O(n\u00b2)) using itertools.combinations  \n   - Hash-based grouping of lines by their normalized direction (slope, intercept)  \n   - Combinatorial summation to count intersections between lines of differing slopes\n\n3. Reusable components:  \n   a. Line normalization routine: convert two points into a canonical \u201cdirection\u201d key (e.g., slope normalized as a rational pair) and \u201coffset\u201d (intercept)  \n   b. Group-and-count pattern: using a dictionary mapping each direction to a set of unique offsets  \n   c. Intersection-count formula: given counts of lines in each direction, compute \u2211_{d} count[d] * (total_lines \u2013 count[d]) / 2"}
{"name": "961_D. Pair Of Lines", "description": "You are given n points on Cartesian plane. Every point is a lattice point (i. e. both of its coordinates are integers), and all points are distinct.\n\nYou may draw two straight lines (not necessarily distinct). Is it possible to do this in such a way that every point lies on at least one of these lines?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 105) \u2014 the number of points you are given.\n\nThen n lines follow, each line containing two integers xi and yi (|xi|, |yi| \u2264 109)\u2014 coordinates of i-th point. All n points are distinct.\n\nOutput\n\nIf it is possible to draw two straight lines in such a way that each of given points belongs to at least one of these lines, print YES. Otherwise, print NO.\n\nExamples\n\nInput\n\n5\n0 0\n0 1\n1 1\n1 -1\n2 2\n\n\nOutput\n\nYES\n\n\nInput\n\n5\n0 0\n1 0\n2 1\n1 1\n2 3\n\n\nOutput\n\nNO\n\nNote\n\nIn the first example it is possible to draw two lines, the one containing the points 1, 3 and 5, and another one containing two remaining points.\n\n<image>", "solution": "n = int(input())\n\nlst = []\nfor x in range(n):\n    (a, b) = map(int, input().split())\n    lst.append((a, b))\n\ndef scal(x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1) == 0:\n        return True\n    return False\n\ndef check():\n    for x in range(n - 2):\n        if len(s2) >= 3:\n            if not scal(lst[s2[-3]][0], lst[s2[-3]][1], lst[s2[-2]][0], lst[s2[-2]][1], lst[s2[-1]][0], lst[s2[-1]][1]):\n                return False\n        if scal(lst[0][0], lst[0][1], lst[1][0], lst[1][1], lst[x + 2][0], lst[x + 2][1]):\n            s1.append(x + 2)\n        else:\n            s2.append(x + 2)\n    if len(s2) >= 3:\n        if not scal(lst[s2[-3]][0], lst[s2[-3]][1], lst[s2[-2]][0], lst[s2[-2]][1], lst[s2[-1]][0], lst[s2[-1]][1]):\n            return False\n    return True\n\nflag = True\n\nif n >= 5:\n    s1 = []\n    s2 = []\n    if not check():\n        lst[1], lst[s2[0]] = lst[s2[0]], lst[1]\n        x = s2[0]\n        s1 = []\n        s2 = []\n        if not check():\n            lst[0], lst[s2[0]] = lst[s2[0]], lst[0]\n            s1 = []\n            s2 = []\n            if not check():\n                flag = False\n\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "difficulty": 10, "public_tests": {"input": ["5\n0 0\n0 1\n1 1\n1 -1\n2 2\n", "5\n0 0\n1 0\n2 1\n1 1\n2 3\n"], "output": ["YES\n", "NO\n"]}, "private_tests": {"input": ["5\n0 0\n2 0\n1 1\n0 2\n5 1\n", "5\n0 0\n-1 0\n-1 1\n1 0\n1 -1\n", "8\n0 0\n1 0\n2 0\n3 0\n0 1\n1 1\n2 1\n3 1\n", "11\n-2 -2\n2 3\n3 -2\n1 -2\n2 -2\n2 0\n2 2\n-3 -2\n-1 -2\n2 -3\n2 1\n", "5\n0 0\n1 0\n0 1\n1 1\n-1 1\n", "9\n-65536 65536\n0 65536\n65536 65536\n-65536 0\n0 0\n65536 0\n-65536 -65536\n0 -65536\n65536 -65536\n", "5\n1 1\n-1 0\n0 1\n-1 1\n0 0\n", "4\n0 0\n-1 1\n-1 -1\n1 0\n", "5\n3 3\n6 3\n0 0\n10 0\n-10 0\n", "5\n-10 3\n4 -5\n-9 5\n-5 -3\n-4 -6\n", "5\n0 0\n0 1\n100 100\n100 99\n100 98\n", "5\n1000000000 1000000000\n999999999 999999999\n999999999 999999998\n-1000000000 1000000000\n-1000000000 999999999\n", "6\n-1 -1\n-1 -2\n-1 -3\n1000000000 1\n-1000000000 0\n999999999 1\n", "5\n514 2131\n312 52362\n1 1\n2 2\n3 3\n", "6\n0 0\n0 1\n0 2\n5 0\n5 1\n5 -1\n", "6\n1 1\n0 0\n-1 -1\n1 0\n0 -1\n-1 -10\n", "7\n1 -1\n3 -3\n1 2\n0 -2\n1 -3\n0 1\n0 2\n", "5\n-1000000000 -1000000000\n134903170 -298591267\n-566505563 -732085704\n-298591267 -566505563\n-133011126 -464171408\n", "5\n3 0\n4 1\n0 0\n1 1\n2 2\n", "10\n0 0\n1 0\n0 1\n0 2\n2 0\n3 0\n0 3\n0 4\n4 0\n0 -10000000\n", "4\n0 0\n1 0\n0 1\n1 1\n", "5\n2 9\n-1 -4\n-3 -8\n-4 8\n7 2\n", "6\n0 0\n0 1\n-1 1\n0 -1\n1 0\n-1 -1\n", "6\n0 0\n-1 1\n-1 0\n1 1\n-1 -1\n0 -1\n", "6\n0 0\n165580141 267914296\n331160282 535828592\n267914296 433494437\n535828592 866988874\n433494437 701408733\n", "7\n0 0\n2 2\n2 -2\n-2 2\n-2 -2\n0 1\n0 3\n", "5\n-999999998 -999999998\n229254612 -608716103\n-588442011 -868997022\n-182303375 -739719079\n-176884024 -737994046\n", "4\n0 0\n0 1\n1 0\n1 1\n", "6\n0 0\n0 1\n0 2\n1 1\n1 2\n2 1\n", "7\n0 0\n4 0\n1 1\n2 2\n3 1\n5 1\n6 2\n", "6\n0 -1\n1 -1\n3 3\n2 0\n-2 -2\n1 -2\n", "8\n0 0\n1 0\n2 1\n1 1\n0 1\n6 0\n5 0\n7 0\n", "5\n0 -7\n0 10000\n1 1000000000\n100 0\n200 0\n", "12\n0 0\n1 1\n2 2\n3 3\n10 11\n20 11\n30 11\n40 11\n-1 1\n-2 2\n-3 3\n-4 4\n", "6\n1 1\n2 2\n3 2\n4 1\n5 2\n6 1\n", "6\n-1 -1\n-1 -2\n-1 -3\n1000000000 1\n999999999 1\n-1000000000 0\n", "5\n-1 1\n1 0\n1 1\n1 -1\n-1 -1\n", "5\n8 8\n3303829 10\n10 1308\n4 2\n6 3\n", "6\n-1 -1\n-1 -2\n-1 -3\n0 0\n65536 65536\n65536 131072\n", "5\n-65536 -65536\n65536 0\n131072 0\n0 65536\n0 131072\n", "5\n2 -1\n-4 1\n0 -9\n5 -9\n9 -10\n", "6\n0 0\n0 1\n0 -1\n1 1\n1 -1\n2 -1\n", "5\n1 1\n0 0\n-1 0\n0 1\n1 0\n", "5\n-1 2\n-1 1\n2 1\n-2 2\n1 1\n", "5\n0 0\n0 1\n0 2\n0 3\n1 0\n", "5\n10000000 40000100\n3 112\n2 400000100\n1 104\n1000000 701789036\n", "3\n-1 1\n-1 -1\n0 0\n", "5\n6 1\n10 5\n10 -2\n-2 -10\n-4 -9\n", "1\n0 0\n", "5\n0 0\n-1 -1\n0 -1\n-1 1\n-1 0\n", "59\n1 0\n0 2\n0 3\n0 4\n0 5\n6 0\n7 0\n8 0\n9 0\n10 0\n0 11\n12 0\n13 0\n14 0\n15 0\n0 16\n0 17\n18 0\n19 0\n20 0\n21 0\n0 22\n23 0\n24 0\n0 25\n26 0\n27 0\n0 28\n0 29\n30 0\n31 0\n0 32\n33 0\n34 0\n0 35\n0 36\n37 0\n0 38\n39 0\n40 0\n0 41\n42 0\n0 43\n0 44\n0 45\n0 46\n47 0\n0 48\n0 49\n50 0\n0 51\n0 52\n53 0\n0 54\n55 0\n0 56\n57 0\n0 58\n59 0\n", "6\n0 0\n1 1\n0 1\n1 0\n0 2\n2 0\n", "1\n-1000000000 1000000000\n", "5\n-1000000000 -1000000000\n134903170 -298591267\n-566505563 -732085704\n-298591267 -566505563\n-999999999 -999999999\n", "10\n416 -473\n-162 491\n-164 488\n-170 479\n-166 485\n-172 476\n416 -475\n416 -474\n-168 482\n-160 494\n", "5\n-1000000000 -1000000000\n229254610 -608716105\n-588442013 -868997024\n-182303377 -739719081\n-999999999 -999999999\n", "5\n-1000000000 -1000000000\n229254610 -608716105\n-588442013 -868997024\n-182303377 -739719081\n-176884026 -737994048\n", "10\n315 202\n315 203\n315 204\n-138 -298\n-136 -295\n-134 -292\n-132 -289\n-130 -286\n-128 -283\n-126 -280\n", "5\n0 0\n165580142 267914296\n331160283 535828592\n267914296 433494437\n535828592 866988874\n", "5\n0 0\n-1 1\n-1 0\n0 -1\n-1 -1\n", "10\n536870912 536870912\n268435456 368435456\n268435456 168435456\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n", "5\n0 0\n1 1\n0 -2\n1 -1\n1 2\n", "5\n-1000000000 -1000000000\n-588442013 -868997024\n-182303377 -739719081\n-999999999 -999999999\n229254610 -608716105\n", "5\n1 -1\n0 0\n0 1\n-1 1\n1 1\n", "6\n0 0\n2 0\n0 2\n0 -2\n-2 1\n-4 2\n", "6\n0 0\n1 0\n2 1\n1 1\n0 1\n6 0\n"], "output": ["YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n"]}, "generated_tests": {"input": ["5\n0 1\n2 0\n1 1\n0 2\n5 1\n", "9\n-65536 65536\n0 65536\n65536 65536\n-73920 0\n0 0\n65536 0\n-65536 -65536\n0 -65536\n65536 -65536\n", "4\n0 0\n-1 1\n-1 -1\n1 -1\n", "5\n3 3\n6 3\n0 -1\n10 0\n-10 0\n", "5\n-10 3\n4 -8\n-9 5\n-5 -3\n-4 -6\n", "5\n0 0\n0 1\n100 100\n100 99\n100 123\n", "5\n1000000000 1000000000\n713302725 999999999\n999999999 999999998\n-1000000000 1000000000\n-1000000000 999999999\n", "6\n-1 -1\n-1 -2\n-1 -3\n1000000000 1\n-1000000000 0\n449435506 1\n", "5\n514 2131\n312 52362\n1 1\n2 2\n0 3\n", "6\n1 0\n0 1\n0 2\n5 0\n5 1\n5 -1\n", "6\n1 1\n0 0\n-1 -1\n1 -1\n0 -1\n-1 -10\n", "7\n1 -1\n3 -4\n1 2\n0 -2\n1 -3\n0 1\n0 2\n", "5\n-1000000000 -1000000000\n134903170 -298591267\n-566505563 -414969649\n-298591267 -566505563\n-133011126 -464171408\n", "5\n3 0\n4 1\n0 -1\n1 1\n2 2\n", "5\n2 9\n-2 -4\n-3 -8\n-4 8\n7 2\n", "6\n0 0\n0 1\n-1 1\n0 -1\n1 0\n-2 -1\n", "6\n0 0\n165580141 267914296\n331160282 535828592\n455535293 433494437\n535828592 866988874\n433494437 701408733\n", "7\n0 0\n2 2\n2 -2\n-2 2\n-2 -2\n0 1\n-1 3\n", "5\n-999999998 -1378788414\n229254612 -608716103\n-588442011 -868997022\n-182303375 -739719079\n-176884024 -737994046\n", "7\n0 0\n4 0\n1 1\n0 2\n3 1\n5 1\n6 2\n", "6\n0 -1\n1 -1\n3 1\n2 0\n-2 -2\n1 -2\n", "5\n0 -7\n0 10010\n1 1000000000\n100 0\n200 0\n", "12\n0 0\n1 1\n2 2\n3 3\n10 11\n20 11\n30 11\n40 15\n-1 1\n-2 2\n-3 3\n-4 4\n", "6\n1 1\n2 2\n3 2\n4 0\n5 2\n6 1\n", "6\n-1 -1\n-1 -2\n-1 -3\n1000000000 2\n999999999 1\n-1000000000 0\n", "5\n-1 1\n1 0\n1 1\n2 -1\n-1 -1\n", "5\n8 8\n2485116 10\n10 1308\n4 2\n6 3\n", "6\n-1 -1\n-1 -2\n-1 -3\n0 0\n65536 36421\n65536 131072\n", "5\n-65536 -65536\n65536 0\n131072 0\n0 65536\n0 87048\n", "5\n2 -1\n-4 1\n0 -9\n5 -9\n1 -10\n", "6\n0 0\n-1 1\n0 -1\n1 1\n1 -1\n2 -1\n", "5\n1 1\n0 0\n-1 0\n-1 1\n1 0\n", "5\n-1 2\n-1 1\n2 1\n-4 2\n1 1\n", "5\n0 0\n0 1\n0 4\n0 3\n1 0\n", "5\n10000000 76667672\n3 112\n2 400000100\n1 104\n1000000 701789036\n", "3\n-1 1\n0 -1\n0 0\n", "5\n9 1\n10 5\n10 -2\n-2 -10\n-4 -9\n", "1\n0 1\n", "5\n0 0\n-1 -2\n0 -1\n-1 1\n-1 0\n", "59\n1 0\n0 2\n0 3\n0 4\n0 5\n6 0\n7 0\n8 0\n9 0\n10 0\n0 11\n12 0\n13 0\n14 0\n15 0\n0 16\n0 17\n18 0\n19 0\n20 0\n21 0\n0 22\n23 0\n24 0\n0 25\n26 0\n27 0\n0 28\n0 29\n30 0\n31 0\n0 32\n33 0\n34 1\n0 35\n0 36\n37 0\n0 38\n39 0\n40 0\n0 41\n42 0\n0 43\n0 44\n0 45\n0 46\n47 0\n0 48\n0 49\n50 0\n0 51\n0 52\n53 0\n0 54\n55 0\n0 56\n57 0\n0 58\n59 0\n", "6\n-1 0\n1 1\n0 1\n1 0\n0 2\n2 0\n", "1\n-1000000000 1001000000\n", "5\n-1000000000 -1719295120\n134903170 -298591267\n-566505563 -732085704\n-298591267 -566505563\n-999999999 -999999999\n", "10\n416 -473\n-162 491\n-164 488\n-170 479\n-166 485\n-172 476\n416 -475\n85 -474\n-168 482\n-160 494\n", "5\n-1000000000 -1000000000\n229254610 -608716105\n-588442013 -868997024\n-182303377 -739719081\n-999999999 -435508019\n", "5\n-1000000000 -1000000000\n229254610 -608716105\n-588442013 -868997024\n-29476787 -739719081\n-176884026 -737994048\n", "10\n315 202\n315 203\n315 204\n-138 -298\n-136 -295\n-134 -292\n-132 -289\n-130 -286\n-108 -283\n-126 -280\n", "5\n0 -1\n165580142 267914296\n331160283 535828592\n267914296 433494437\n535828592 866988874\n", "5\n0 0\n-1 1\n-1 0\n-1 -1\n-1 -1\n", "10\n536870912 536870912\n268435456 368435456\n268435456 168435456\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 6\n", "5\n0 0\n1 1\n1 -2\n1 -1\n1 2\n", "5\n-1000000000 -1000000000\n-588442013 -868997024\n-182303377 -739719081\n-1387388513 -999999999\n229254610 -608716105\n", "5\n1 -1\n0 -1\n0 1\n-1 1\n1 1\n", "6\n0 0\n2 0\n0 2\n0 -2\n0 1\n-4 2\n", "5\n0 0\n0 1\n2 1\n1 -1\n2 2\n", "5\n0 1\n2 0\n1 1\n0 2\n5 2\n", "9\n-65536 65536\n0 65536\n65536 65536\n-73920 0\n0 0\n65536 0\n-65536 -65536\n0 -65536\n65536 -64563\n", "4\n-1 0\n-1 1\n-1 -1\n1 -1\n", "5\n3 5\n6 3\n0 -1\n10 0\n-10 0\n", "5\n-10 3\n4 -8\n-9 5\n-5 -2\n-4 -6\n", "5\n0 0\n0 1\n100 100\n000 99\n100 123\n", "5\n1000000000 1100000000\n713302725 999999999\n999999999 999999998\n-1000000000 1000000000\n-1000000000 999999999\n", "6\n-1 -1\n-1 -2\n-1 -3\n1000000000 1\n-1000000000 0\n449435506 0\n", "5\n514 2131\n312 52362\n1 1\n1 2\n0 3\n", "6\n1 0\n0 1\n0 2\n5 0\n5 1\n5 -2\n", "6\n1 1\n0 0\n-1 0\n1 -1\n0 -1\n-1 -10\n", "7\n1 0\n3 -4\n1 2\n0 -2\n1 -3\n0 1\n0 2\n", "5\n-1000000000 -301105775\n134903170 -298591267\n-566505563 -414969649\n-298591267 -566505563\n-133011126 -464171408\n", "5\n3 0\n4 1\n0 -1\n1 1\n2 1\n", "5\n2 9\n0 -4\n-3 -8\n-4 8\n7 2\n", "6\n0 0\n0 1\n-1 0\n0 -1\n1 0\n-2 -1\n", "6\n0 0\n165580141 267914296\n331160282 535828592\n455535293 162343203\n535828592 866988874\n433494437 701408733\n", "7\n-1 0\n2 2\n2 -2\n-2 2\n-2 -2\n0 1\n-1 3\n", "5\n-999999998 -1378788414\n229254612 -608716103\n-588442011 -868997022\n-182303375 -739719079\n-307533159 -737994046\n", "6\n0 -1\n1 -1\n3 0\n2 0\n-2 -2\n1 -2\n", "5\n0 -7\n0 10010\n1 1000000000\n100 0\n200 1\n", "12\n0 0\n1 1\n2 2\n3 3\n10 11\n20 0\n30 11\n40 15\n-1 1\n-2 2\n-3 3\n-4 4\n", "6\n1 1\n0 2\n3 2\n4 0\n5 2\n6 1\n", "6\n-1 -1\n-1 -4\n-1 -3\n1000000000 2\n999999999 1\n-1000000000 0\n", "5\n8 8\n2485116 10\n10 1308\n4 2\n6 5\n", "5\n-65536 -65536\n65536 0\n131072 0\n0 56008\n0 87048\n", "5\n3 -1\n-4 1\n0 -9\n5 -9\n1 -10\n", "6\n0 0\n-1 1\n0 -1\n1 1\n1 0\n2 -1\n", "5\n1 1\n0 0\n-1 0\n-1 1\n2 0\n", "5\n-1 2\n-1 1\n2 1\n-5 2\n1 1\n", "5\n10000000 76667672\n3 112\n2 400000100\n2 104\n1000000 701789036\n", "3\n-2 1\n-1 -1\n0 0\n", "5\n9 2\n10 5\n10 -2\n-2 -10\n-4 -9\n"], "output": ["YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n"]}, "short_description": "1. One-sentence summary:\nDetermine whether a set of planar points can be covered by at most two straight lines (i.e. partitioned into two collinear subsets).\n\n2. Core algorithmic approach:\nA greedy \u201ctwo-line cover\u201d check: pick two initial points to define the first line, classify all other points into \u201con first line\u201d or \u201coff first line,\u201d then verify that the \u201coff\u201d set is itself collinear. If it fails, retry by swapping one of the initial defining points with the first outlier\u2014up to two swaps\u2014yielding an O(n) check per attempt.\n\n3. Reusable components:\n- Collinearity test (cross-product zero check) for any three points.  \n- Partitioning routine: iterate over points and split into two buckets based on a binary predicate.  \n- Validation of an entire bucket\u2019s collinearity by scanning and checking consecutive triples (or checking all against one reference line)."}
