{"name": "1349_D. Slime and Biscuits", "description": "Slime and his n friends are at a party. Slime has designed a game for his friends to play.\n\nAt the beginning of the game, the i-th player has a_i biscuits. At each second, Slime will choose a biscuit randomly uniformly among all a_1 + a_2 + \u2026 + a_n biscuits, and the owner of this biscuit will give it to a random uniform player among n-1 players except himself. The game stops when one person will have all the biscuits.\n\nAs the host of the party, Slime wants to know the expected value of the time that the game will last, to hold the next activity on time.\n\nFor convenience, as the answer can be represented as a rational number p/q for coprime p and q, you need to find the value of (p \u22c5 q^{-1})mod 998 244 353. You can prove that qmod 998 244 353 \u2260 0.\n\nInput\n\nThe first line contains one integer n\\ (2\u2264 n\u2264 100 000): the number of people playing the game.\n\nThe second line contains n non-negative integers a_1,a_2,...,a_n\\ (1\u2264 a_1+a_2+...+a_n\u2264 300 000), where a_i represents the number of biscuits the i-th person own at the beginning.\n\nOutput\n\nPrint one integer: the expected value of the time that the game will last, modulo 998 244 353.\n\nExamples\n\nInput\n\n\n2\n1 1\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n2\n1 2\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n5\n0 0 0 0 35\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n5\n8 4 2 0 1\n\n\nOutput\n\n\n801604029\n\nNote\n\nFor the first example, in the first second, the probability that player 1 will give the player 2 a biscuit is 1/2, and the probability that player 2 will give the player 1 a biscuit is 1/2. But anyway, the game will stop after exactly 1 second because only one player will occupy all biscuits after 1 second, so the answer is 1.", "solution": "import os\nimport sys\ninput = sys.stdin.buffer.readline\n#sys.setrecursionlimit(int(2e5)) \nfrom collections import deque\nimport math\n#  list(map(int, input().split()))\n#####################################################################################\n\nclass CF(object):\n    def __init__(self):\n        self.mod = 998244353\n        self.n = int(input())\n        self.a = list(map(int, input().split()))\n        self.tot = sum(self.a)\n        self.dp = [[0,0] for _ in range(self.tot+1)]\n\n    def inv(self, x):\n        return pow(x, self.mod - 2, self.mod)\n\n    def gao(self):\n        self.dp[0] = [0,1]\n        self.dp[1] = [(1-self.n+self.mod)%self.mod, 1]\n        for k in range(1, self.tot):\n            temp = self.inv(self.tot-k)\n            self.dp[k+1][0] = -self.tot*(self.n - 1) - self.dp[k][0] * (2*k - self.tot- k*self.n) - self.dp[k-1][0] *k*(self.n-1)\n            self.dp[k+1][0] *= temp\n            self.dp[k+1][0] = (self.dp[k+1][0] %self.mod+self.mod)%self.mod            \n            self.dp[k+1][1] = -self.dp[k][1]*(2*k - self.tot- k*self.n) - self.dp[k-1][1]*k*(self.n-1)\n            self.dp[k+1][1] *= temp\n            self.dp[k+1][1] = (self.dp[k+1][1] %self.mod+self.mod)%self.mod\n        \n        alpha = -self.dp[self.tot][0]*self.inv(self.dp[self.tot][1])\n        alpha = (alpha%self.mod + self.mod)%self.mod\n        #print(alpha)\n        ans=0\n        for i in range(self.n):\n            ans += self.dp[self.a[i]][0] + self.dp[self.a[i]][1] * alpha\n            ans = (ans%self.mod+self.mod)%self.mod\n        ans -= alpha * (self.n - 1)\n        ans = (ans%self.mod+self.mod)%self.mod\n        ans *= self.inv(self.n)\n        ans = (ans%self.mod+self.mod)%self.mod\n        print(ans)\n\n\n    def main(self):            \n        self.gao()\n        pass\n\nif __name__ == \"__main__\":\n    cf = CF()\n    cf.main()\n    pass\n\n'''\ndp[k+1] *(tot-k) = -tot*(n-1) - dp[k]*(2*k - tot- k*n ) - dp[k-1] *k*(n-1)\n\n'''", "difficulty": 10, "public_tests": {"input": ["2\n1 2\n", "5\n8 4 2 0 1\n", "2\n1 1\n", "5\n0 0 0 0 35\n"], "output": ["3\n", "801604029\n", "1\n", "0\n"]}, "private_tests": {"input": ["36\n110 7 51 3 36 69 30 7 122 22 11 96 98 17 133 44 38 75 7 10 4 3 68 50 43 25 4 29 42 36 11 7 36 12 75 1\n", "10\n7758 19921 15137 1138 90104 17467 82544 55151 3999 6781\n", "100\n4364 698 1003 1128 1513 39 4339 969 7452 3415 1154 1635 6649 136 1442 50 834 1680 107 978 983 3176 4017 1692 1113 1504 1118 396 1975 2053 2366 3022 3007 167 610 4649 14659 2331 4565 318 7232 204 7131 6122 2885 5748 1998 3833 6799 4219 8454 8698 4964 1736 1554 1665 2425 4227 1967 534 2719 80 2865 652 1920 1577 658 1165 3222 1222 1238 560 12018 768 7144 2701 501 2520 9194 8052 13092 7366 2733 6050 2914 1740 5467 546 2947 186 1789 2658 2150 19 1854 1489 7590 990 296 1647\n", "39\n79 194 29 36 51 363 57 446 559 28 41 34 98 168 555 26 111 97 167 121 749 21 719 20 207 217 226 63 168 248 478 1231 399 518 291 14 741 149 97\n", "2\n300000 0\n", "100\n9 0 2 8 3 6 55 1 11 12 3 8 32 18 38 16 0 27 6 3 3 4 25 2 0 0 7 3 6 16 10 26 5 4 2 38 13 1 7 4 14 8 1 9 5 26 4 8 1 11 3 4 18 2 6 11 5 6 13 9 1 1 1 2 27 0 25 3 2 6 9 5 3 17 17 2 5 1 15 41 2 2 4 4 22 64 10 31 17 7 0 0 3 5 17 20 5 1 1 4\n", "5\n24348 15401 19543 206086 34622\n", "2\n0 1\n", "2\n184931 115069\n"], "output": ["420723999\n", "663099907\n", "301328767\n", "918301015\n", "0\n", "241327503\n", "788526601\n", "0\n", "244559876\n"]}, "generated_tests": {"input": ["36\n110 7 51 3 36 69 30 7 122 22 11 96 98 17 133 44 38 75 7 10 4 3 68 50 43 26 4 29 42 36 11 7 36 12 75 1\n", "10\n7758 19921 15137 1138 90104 17467 82544 55151 3999 6249\n", "39\n79 194 29 36 51 363 57 446 559 28 41 34 98 168 555 26 110 97 167 121 749 21 719 20 207 217 226 63 168 248 478 1231 399 518 291 14 741 149 97\n", "100\n9 0 2 8 3 6 55 1 11 12 3 8 32 18 38 16 0 27 6 3 3 4 25 2 0 0 7 3 6 16 10 26 5 4 2 38 13 1 7 1 14 8 1 9 5 26 4 8 1 11 3 4 18 2 6 11 5 6 13 9 1 1 1 2 27 0 25 3 2 6 9 5 3 17 17 2 5 1 15 41 2 2 4 4 22 64 10 31 17 7 0 0 3 5 17 20 5 1 1 4\n", "2\n2 1\n", "2\n1 0\n", "5\n8 4 4 0 1\n", "5\n0 0 1 0 35\n", "36\n110 7 51 3 36 69 30 7 122 22 11 96 98 17 133 44 38 75 7 10 4 3 68 50 43 26 4 29 42 36 11 7 36 19 75 1\n", "10\n7758 15465 15137 1138 90104 17467 82544 55151 3999 6249\n", "39\n79 194 29 36 51 363 57 446 559 28 41 34 98 4 555 26 110 97 167 121 749 21 719 20 207 217 226 63 168 248 478 1231 399 518 291 14 741 149 97\n", "100\n9 0 2 8 3 6 55 1 11 12 3 8 32 18 38 16 0 27 6 3 3 4 25 2 0 0 7 3 6 16 10 26 5 4 2 38 13 1 7 1 14 8 1 9 5 26 4 8 1 11 3 4 18 2 6 11 5 6 13 9 1 1 1 2 27 0 25 3 2 6 9 5 3 17 17 2 5 1 15 41 2 2 4 4 22 64 10 31 17 7 0 0 3 5 17 20 5 1 2 4\n", "2\n2 2\n", "5\n8 4 3 0 1\n", "5\n0 0 1 0 22\n", "36\n110 7 51 3 36 69 30 7 122 36 11 96 98 17 133 44 38 75 7 10 4 3 68 50 43 26 4 29 42 36 11 7 36 19 75 1\n", "10\n7758 15465 15137 1138 90104 17467 7218 55151 3999 6249\n", "39\n79 194 29 36 51 363 57 446 559 28 40 34 98 4 555 26 110 97 167 121 749 21 719 20 207 217 226 63 168 248 478 1231 399 518 291 14 741 149 97\n", "100\n9 0 2 8 3 6 55 1 11 12 3 8 32 18 38 16 0 27 6 3 3 4 25 2 0 0 7 3 6 16 10 26 5 4 2 38 13 1 7 1 14 8 1 9 5 26 4 8 1 11 3 4 18 2 3 11 5 6 13 9 1 1 1 2 27 0 25 3 2 6 9 5 3 17 17 2 5 1 15 41 2 2 4 4 22 64 10 31 17 7 0 0 3 5 17 20 5 1 2 4\n", "2\n2 3\n", "2\n4 1\n", "5\n8 4 3 1 1\n", "36\n110 7 51 3 36 69 30 7 122 36 11 96 98 17 76 44 38 75 7 10 4 3 68 50 43 26 4 29 42 36 11 7 36 19 75 1\n", "10\n7758 15465 2476 1138 90104 17467 7218 55151 3999 6249\n", "39\n79 194 29 40 51 363 57 446 559 28 40 34 98 4 555 26 110 97 167 121 749 21 719 20 207 217 226 63 168 248 478 1231 399 518 291 14 741 149 97\n", "100\n9 0 2 8 3 6 55 1 11 12 3 8 4 18 38 16 0 27 6 3 3 4 25 2 0 0 7 3 6 16 10 26 5 4 2 38 13 1 7 1 14 8 1 9 5 26 4 8 1 11 3 4 18 2 3 11 5 6 13 9 1 1 1 2 27 0 25 3 2 6 9 5 3 17 17 2 5 1 15 41 2 2 4 4 22 64 10 31 17 7 0 0 3 5 17 20 5 1 2 4\n", "2\n4 3\n", "2\n4 2\n", "5\n8 4 0 1 1\n", "36\n110 7 51 3 36 69 30 7 122 36 11 96 98 17 76 44 38 75 7 10 4 3 68 50 43 26 4 29 42 36 11 7 36 19 75 0\n", "10\n7758 15465 2476 1138 90104 17467 7218 72818 3999 6249\n", "39\n79 194 29 40 51 363 57 446 559 28 40 34 98 4 555 26 110 97 167 121 749 21 719 20 207 184 226 63 168 248 478 1231 399 518 291 14 741 149 97\n", "100\n9 0 2 8 3 6 55 1 11 12 3 8 4 18 38 16 0 27 6 3 3 4 25 2 0 0 7 3 6 16 10 26 5 4 2 38 13 1 7 0 14 8 1 9 5 26 4 8 1 11 3 4 18 2 3 11 5 6 13 9 1 1 1 2 27 0 25 3 2 6 9 5 3 17 17 2 5 1 15 41 2 2 4 4 22 64 10 31 17 7 0 0 3 5 17 20 5 1 2 4\n", "2\n8 2\n", "5\n8 4 0 2 1\n", "36\n110 7 51 3 36 69 30 7 122 36 11 96 98 17 76 44 38 75 7 10 4 3 68 50 43 26 4 29 42 45 11 7 36 19 75 0\n", "10\n7758 15465 2476 1138 90104 17467 7218 72818 3999 6274\n", "39\n79 194 28 40 51 363 57 446 559 28 40 34 98 4 555 26 110 97 167 121 749 21 719 20 207 184 226 63 168 248 478 1231 399 518 291 14 741 149 97\n", "100\n9 0 2 8 3 6 55 1 11 12 3 8 4 18 38 16 0 27 6 3 3 4 25 2 0 0 7 3 6 16 10 26 5 4 2 38 13 1 7 0 14 8 1 9 5 26 4 8 1 11 3 4 18 2 3 11 5 6 13 9 1 1 1 2 27 0 25 3 2 6 9 5 3 17 17 0 5 1 15 41 2 2 4 4 22 64 10 31 17 7 0 0 3 5 17 20 5 1 2 4\n", "2\n1 3\n", "2\n8 4\n", "5\n8 1 0 2 1\n", "36\n010 7 51 3 36 69 30 7 122 36 11 96 98 17 76 44 38 75 7 10 4 3 68 50 43 26 4 29 42 45 11 7 36 19 75 0\n", "10\n7758 15465 2476 1138 90104 17467 7218 94259 3999 6274\n", "39\n79 194 28 40 51 363 57 446 559 28 40 34 98 4 503 26 110 97 167 121 749 21 719 20 207 184 226 63 168 248 478 1231 399 518 291 14 741 149 97\n", "100\n9 0 2 8 3 6 55 1 11 12 3 8 4 18 38 16 0 27 6 3 3 4 25 2 0 0 7 3 6 16 10 26 5 4 2 38 13 1 7 0 14 8 1 9 5 26 4 8 1 11 3 4 18 2 3 11 5 6 13 9 1 1 1 2 27 0 25 3 2 6 9 5 3 16 17 0 5 1 15 41 2 2 4 4 22 64 10 31 17 7 0 0 3 5 17 20 5 1 2 4\n", "2\n4 4\n", "36\n010 7 51 3 36 69 30 7 122 36 11 96 98 17 76 44 38 75 7 10 4 3 68 50 43 26 4 29 42 77 11 7 36 19 75 0\n", "39\n79 194 28 40 51 363 57 446 559 28 40 34 98 4 503 26 111 97 167 121 749 21 719 20 207 184 226 63 168 248 478 1231 399 518 291 14 741 149 97\n", "2\n2 0\n", "2\n3 0\n", "2\n0 3\n"], "output": ["436384350\n", "217539815\n", "782251506\n", "303418924\n", "3\n", "0\n", "887976517\n", "545314799\n", "101294486\n", "700652635\n", "944249001\n", "754583581\n", "8\n", "31419769\n", "939686190\n", "974453244\n", "84581656\n", "316198985\n", "230206020\n", "499122194\n", "15\n", "460157510\n", "35715792\n", "698445289\n", "276950653\n", "799009427\n", "665496310\n", "36\n", "934200297\n", "365388672\n", "179205393\n", "585732294\n", "275802614\n", "665496802\n", "801604029\n", "341583446\n", "120227225\n", "143220396\n", "277829212\n", "7\n", "199651149\n", "291996592\n", "399795430\n", "133103953\n", "127706559\n", "126425588\n", "332748267\n", "642561515\n", "394186241\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary  \nSolves for an unknown parameter in a system of linear recurrences by computing two\u2010coefficient DP states and then uses that solution to produce a final expected\u2010value answer under modular arithmetic.\n\n2. Core algorithmic approach  \nDynamic programming that builds a linear recurrence dp[k] = A_k\u00b7\u03b1 + B_k, combined with modular inverses to \u201cdivide out\u201d coefficients and thereby solve the underlying system of linear equations for \u03b1 and the desired expectation.\n\n3. Reusable components  \n- Modular inverse helper (pow(x, mod\u22122, mod)) for division in a prime modulus.  \n- Two\u2013coefficient DP state pattern: storing each dp[k] as a pair (A_k, B_k) so that you can propagate linear combinations of an unknown parameter.  \n- Recurrence solver template: updating dp[k+1] from dp[k] and dp[k\u22121] via precomputed multipliers and then normalizing by modular inverses."}
{"name": "1475_E. Advertising Agency", "description": "Masha works in an advertising agency. In order to promote the new brand, she wants to conclude contracts with some bloggers. In total, Masha has connections of n different bloggers. Blogger numbered i has a_i followers.\n\nSince Masha has a limited budget, she can only sign a contract with k different bloggers. Of course, Masha wants her ad to be seen by as many people as possible. Therefore, she must hire bloggers with the maximum total number of followers.\n\nHelp her, find the number of ways to select k bloggers so that the total number of their followers is maximum possible. Two ways are considered different if there is at least one blogger in the first way, which is not in the second way. Masha believes that all bloggers have different followers (that is, there is no follower who would follow two different bloggers).\n\nFor example, if n=4, k=3, a=[1, 3, 1, 2], then Masha has two ways to select 3 bloggers with the maximum total number of followers: \n\n  * conclude contracts with bloggers with numbers 1, 2 and 4. In this case, the number of followers will be equal to a_1 + a_2 + a_4 = 6. \n  * conclude contracts with bloggers with numbers 2, 3 and 4. In this case, the number of followers will be equal to a_2 + a_3 + a_4 = 6. \n\n\n\nSince the answer can be quite large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 1000) \u2014 the number of bloggers and how many of them you can sign a contract with.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026 a_n (1 \u2264 a_i \u2264 n) \u2014 the number of followers of each blogger.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 1000.\n\nOutput\n\nFor each test case, on a separate line output one integer \u2014 the number of ways to select k bloggers so that the total number of their followers is maximum possible.\n\nExample\n\nInput\n\n\n3\n4 3\n1 3 1 2\n4 2\n1 1 1 1\n2 1\n1 2\n\n\nOutput\n\n\n2\n6\n1\n\nNote\n\nThe test case is explained in the statements.\n\nIn the second test case, the following ways are valid: \n\n  * conclude contracts with bloggers with numbers 1 and 2. In this case, the number of followers will be equal to a_1 + a_2 = 2; \n  * conclude contracts with bloggers with numbers 1 and 3. In this case, the number of followers will be equal to a_1 + a_3 = 2; \n  * conclude contracts with bloggers with numbers 1 and 4. In this case, the number of followers will be equal to a_1 + a_4 = 2; \n  * conclude contracts with bloggers with numbers 2 and 3. In this case, the number of followers will be equal to a_2 + a_3 = 2; \n  * conclude contracts with bloggers with numbers 2 and 4. In this case, the number of followers will be equal to a_2 + a_4 = 2; \n  * conclude contracts with bloggers with numbers 3 and 4. In this case, the number of followers will be equal to a_3 + a_4 = 2. \n\n\n\nIn the third test case, the following ways are valid: \n\n  * concludes a contract with a blogger with the number 2. In this case, the number of followers will be equal to a_2 = 2. ", "solution": "\nimport math\ndef c (k, n):\n    return (math.factorial(n) // (math.factorial(k) * math.factorial(n - k))) % (10**9 + 7)\n\ndef solve():\n    n, k = map(int, input().split())\n    a = []\n    for i in input().split():\n        a.append(int(i))\n    \n    a.sort()\n    m = dict()\n\n    for i in a:\n        if(m.get(i, 0) == 0): m[i] = 1\n        else: m[i] += 1\n\n    ind = n - k\n    while ind < n - 1 and a[ind + 1] == a[ind]: ind += 1\n    print(c(ind - (n - k) + 1, m[a[n - k]]))\n\nt = int(input())\n\nwhile t > 0:\n    t -= 1\n    solve()\n", "difficulty": 11, "public_tests": {"input": ["3\n4 3\n1 3 1 2\n4 2\n1 1 1 1\n2 1\n1 2\n"], "output": ["\n2\n6\n1\n"]}, "private_tests": {"input": [], "output": []}, "generated_tests": {"input": ["3\n4 3\n1 3 1 2\n4 2\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 1 2\n4 2\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 2\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 2\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 3 1 2\n4 2\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 3 1 2\n4 4\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 2 2\n4 4\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 1 2 2\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n2 3 1 2\n4 2\n1 1 1 2\n2 1\n1 2\n", "3\n4 3\n1 3 2 2\n4 1\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 1 1 2\n4 2\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 1 1 2\n4 4\n1 1 1 2\n2 1\n2 2\n", "3\n4 3\n1 3 1 2\n4 1\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n1 1 1 2\n4 2\n1 1 1 2\n2 1\n1 2\n", "3\n4 3\n1 3 1 2\n4 2\n1 1 1 1\n2 1\n2 1\n", "3\n4 3\n1 1 1 2\n4 4\n1 1 1 2\n2 2\n2 2\n", "3\n4 3\n1 3 2 2\n4 2\n1 1 1 1\n2 2\n2 2\n", "3\n4 1\n1 3 1 2\n4 1\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n1 1 1 2\n4 2\n1 1 1 1\n2 1\n1 2\n", "3\n4 3\n1 1 1 1\n4 4\n1 1 1 2\n2 2\n2 2\n", "3\n4 3\n2 2 2 2\n4 2\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 1 2 2\n4 3\n1 1 1 1\n2 1\n2 2\n", "3\n4 2\n2 2 2 2\n4 4\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n1 1 1 2\n4 3\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n2 3 2 2\n4 2\n1 2 1 1\n2 1\n2 2\n", "3\n4 3\n1 2 2 4\n4 3\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n2 2 2 4\n4 3\n1 1 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 1 2\n4 2\n1 1 1 2\n2 1\n1 2\n", "3\n4 3\n1 4 2 2\n4 2\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 4\n4 2\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 1 2 2\n4 2\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 4\n4 2\n1 1 3 1\n2 1\n2 2\n", "3\n4 3\n1 1 2 2\n4 4\n1 1 1 2\n2 1\n2 2\n", "3\n4 3\n1 3 1 2\n4 1\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 1 2\n4 1\n1 1 1 2\n2 1\n1 2\n", "3\n4 3\n1 3 1 2\n4 2\n1 1 2 1\n2 2\n2 2\n", "3\n4 3\n1 1 2 2\n4 4\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 1 2 2\n4 4\n2 1 1 1\n2 1\n2 2\n", "3\n4 3\n2 1 2 2\n4 4\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 4 2 2\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 4 4\n4 2\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 1 2 2\n4 4\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n1 3 1 2\n4 2\n1 1 4 1\n2 2\n2 2\n", "3\n4 3\n1 3 1 2\n4 4\n1 1 4 1\n2 2\n2 2\n", "3\n4 3\n1 3 1 2\n4 1\n1 1 4 1\n2 2\n2 2\n", "3\n4 1\n1 3 2 4\n4 2\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 2 2 2\n4 4\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 2 2 2\n4 4\n2 1 1 1\n2 1\n2 2\n", "3\n4 3\n2 3 1 2\n4 2\n1 1 1 4\n2 1\n1 2\n", "3\n4 3\n1 3 4 4\n4 4\n1 1 2 1\n2 1\n2 2\n", "3\n4 2\n1 1 2 2\n4 4\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n1 3 1 2\n4 3\n1 1 4 1\n2 2\n2 2\n", "3\n4 3\n1 3 2 2\n4 1\n1 1 4 1\n2 2\n2 2\n", "3\n4 1\n1 2 2 2\n4 4\n2 1 1 1\n2 1\n2 2\n", "3\n4 2\n1 1 2 2\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 1 2\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 4\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n2 3 2 4\n4 2\n1 1 2 1\n2 1\n2 2\n", "3\n4 4\n1 3 1 2\n4 4\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 2 2 2\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 1 1 2\n4 4\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n2 1 1 2\n4 2\n1 1 1 2\n2 1\n1 2\n", "3\n4 3\n1 1 2 2\n4 4\n1 1 2 1\n2 2\n2 2\n", "3\n4 3\n1 3 1 1\n4 4\n1 1 4 1\n2 2\n2 2\n", "3\n4 3\n1 3 1 4\n4 2\n1 1 1 1\n2 1\n2 1\n", "3\n4 1\n1 3 2 4\n4 1\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 2 2 2\n4 2\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n4 3 1 2\n4 2\n1 1 1 4\n2 1\n1 2\n", "3\n4 4\n1 1 2 2\n4 4\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n1 3 1 2\n4 3\n1 1 4 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 2\n1 2 1 1\n2 2\n2 2\n", "3\n4 4\n1 1 2 3\n4 4\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n4 2 2 2\n4 2\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n4 2 3 2\n4 2\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n4 2 3 2\n4 2\n1 2 1 1\n2 1\n2 2\n", "3\n4 2\n1 3 1 2\n4 2\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 2 3\n4 2\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 4\n1 4 1 1\n2 1\n1 2\n", "3\n4 3\n1 1 2 2\n4 4\n1 1 1 3\n2 1\n2 2\n", "3\n4 3\n1 3 1 2\n4 2\n1 1 4 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 1\n1 1 2 1\n2 2\n2 2\n", "3\n4 3\n1 4 2 2\n4 4\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 3 4 4\n4 1\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 1 1 2\n4 2\n1 1 4 1\n2 2\n2 2\n", "3\n4 3\n1 3 4 2\n4 1\n1 1 4 1\n2 2\n2 2\n", "3\n4 2\n2 1 2 2\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 4\n1 3 1 2\n4 4\n1 1 1 1\n2 1\n1 2\n", "3\n4 2\n1 2 2 2\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 1 1\n4 4\n1 1 3 1\n2 2\n2 2\n", "3\n4 1\n1 3 2 2\n4 1\n1 1 1 1\n2 2\n2 2\n", "3\n4 1\n1 3 1 4\n4 2\n1 1 1 1\n2 1\n2 1\n", "3\n4 2\n1 3 2 4\n4 1\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 3\n1 2 1 1\n2 2\n2 2\n", "3\n4 4\n1 3 1 2\n4 2\n1 2 1 1\n2 1\n1 2\n", "3\n4 4\n1 3 1 3\n4 4\n1 1 1 1\n2 1\n1 2\n", "3\n4 2\n1 2 2 2\n4 4\n1 1 1 1\n2 2\n2 2\n", "3\n4 2\n1 3 2 4\n4 2\n1 1 2 1\n2 1\n2 2\n", "3\n4 4\n1 3 1 2\n4 2\n1 1 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 1 2\n4 2\n1 2 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 2\n1 2 1 1\n2 1\n2 2\n", "3\n4 3\n2 4 2 2\n4 2\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 1 2 3\n4 4\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n2 1 4 2\n4 4\n1 2 1 1\n2 1\n1 2\n", "3\n4 1\n1 3 2 2\n4 1\n1 1 4 1\n2 2\n2 2\n", "3\n4 3\n1 3 1 4\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 3\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n4 3 2 4\n4 2\n1 1 2 1\n2 1\n2 2\n", "3\n4 2\n1 3 1 1\n4 4\n1 1 4 1\n2 2\n2 2\n", "3\n4 1\n1 3 1 2\n4 2\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n1 1 1 3\n4 2\n1 1 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 1 1\n4 2\n1 1 1 1\n2 1\n2 1\n", "3\n4 1\n1 3 2 4\n4 1\n1 1 3 1\n2 1\n2 2\n", "3\n4 3\n1 2 2 2\n4 2\n1 4 1 1\n2 1\n1 2\n", "3\n4 3\n4 3 2 2\n4 2\n1 1 1 4\n2 1\n1 2\n", "3\n4 3\n1 1 2 1\n4 4\n1 1 1 2\n2 2\n2 2\n", "3\n4 3\n4 2 3 2\n4 2\n1 4 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 2 3\n4 3\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n1 1 2 4\n4 3\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 1\n4 1\n1 1 2 1\n2 2\n2 2\n", "3\n4 3\n1 1 1 1\n4 2\n1 1 4 1\n2 2\n2 2\n", "3\n4 2\n1 2 2 4\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 1\n1 3 2 2\n4 1\n2 1 1 1\n2 2\n2 2\n", "3\n4 3\n1 3 2 2\n4 1\n1 2 1 1\n2 2\n2 2\n", "3\n4 4\n1 3 1 4\n4 2\n1 2 1 1\n2 1\n1 2\n", "3\n4 2\n1 4 2 2\n4 4\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n2 3 2 4\n4 2\n1 1 3 1\n2 1\n2 2\n", "3\n4 3\n2 2 2 2\n4 4\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n1 3 1 2\n4 1\n1 2 1 1\n2 1\n2 2\n", "3\n4 3\n4 3 2 4\n4 2\n1 1 2 1\n2 1\n1 2\n", "3\n4 2\n1 3 1 1\n4 4\n1 1 2 1\n2 2\n2 2\n", "3\n4 1\n1 3 1 2\n4 2\n1 2 1 1\n2 2\n2 2\n", "3\n4 3\n1 3 1 1\n4 2\n1 1 1 2\n2 1\n2 1\n", "3\n4 3\n1 3 2 1\n4 1\n1 1 1 1\n2 2\n2 2\n", "3\n4 2\n1 2 2 4\n4 4\n1 1 1 1\n2 1\n2 1\n", "3\n4 1\n1 3 1 2\n4 1\n2 1 1 1\n2 2\n2 2\n", "3\n4 3\n2 2 2 2\n4 4\n1 1 1 2\n2 2\n2 2\n", "3\n4 3\n2 3 4 2\n4 2\n1 2 1 1\n2 1\n2 2\n", "3\n4 2\n4 3 2 4\n4 2\n1 1 2 1\n2 1\n1 2\n", "3\n4 2\n1 3 1 2\n4 4\n1 1 2 1\n2 2\n2 2\n", "3\n4 4\n1 3 2 1\n4 1\n1 1 1 1\n2 2\n2 2\n", "3\n4 4\n2 2 2 2\n4 4\n1 1 1 2\n2 2\n2 2\n", "3\n4 3\n1 3 1 4\n4 2\n1 1 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 1 2\n4 3\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 2 1 2\n4 2\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 1 2\n4 2\n1 1 3 1\n2 1\n2 2\n", "3\n4 3\n1 1 2 3\n4 2\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 2 2 4\n4 2\n1 1 3 1\n2 1\n2 2\n", "3\n4 3\n1 1 2 4\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n2 1 2 2\n4 3\n1 2 1 1\n2 1\n1 2\n", "3\n4 1\n1 2 2 2\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 1 1 2\n4 1\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 1 4 2\n4 4\n1 1 1 2\n2 1\n2 2\n", "3\n4 3\n1 3 1 2\n4 4\n1 1 3 1\n2 2\n2 2\n", "3\n4 1\n1 3 3 4\n4 2\n1 1 2 1\n2 1\n2 2\n", "3\n4 2\n1 2 2 2\n4 4\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 2 2 1\n4 4\n2 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 1\n1 3 1 2\n4 1\n1 1 2 1\n2 2\n2 2\n", "3\n4 2\n1 3 1 2\n4 2\n1 4 1 1\n2 1\n1 2\n", "3\n4 3\n1 2 2 2\n4 4\n1 1 1 3\n2 1\n2 2\n", "3\n4 3\n1 1 2 2\n4 1\n1 1 2 1\n2 2\n2 2\n", "3\n4 2\n1 3 4 4\n4 1\n1 1 2 1\n2 1\n2 2\n", "3\n4 3\n2 1 1 2\n4 2\n1 1 4 1\n2 2\n2 2\n", "3\n4 2\n1 2 2 2\n4 4\n1 1 2 1\n2 1\n2 2\n", "3\n4 1\n1 3 1 4\n4 1\n1 1 1 1\n2 1\n2 1\n", "3\n4 4\n1 3 1 2\n4 2\n1 2 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 1 4\n4 1\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 2 2\n4 3\n2 1 1 1\n2 2\n2 2\n", "3\n4 4\n1 3 1 1\n4 4\n1 1 4 1\n2 2\n2 2\n", "3\n4 3\n1 1 1 3\n4 2\n2 1 1 1\n2 1\n1 2\n", "3\n4 3\n4 2 2 2\n4 2\n1 4 1 1\n2 1\n1 2\n", "3\n4 1\n1 3 2 2\n4 1\n3 1 1 1\n2 2\n2 2\n", "3\n4 2\n1 4 2 2\n4 4\n1 1 1 2\n2 2\n2 2\n", "3\n4 3\n2 1 2 2\n4 4\n1 1 1 1\n2 2\n2 2\n", "3\n4 3\n2 3 2 2\n4 2\n1 4 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 1 4\n4 2\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 1 1 2\n4 4\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 1 2 3\n4 2\n1 1 1 1\n2 2\n2 2\n", "3\n4 2\n1 2 2 2\n4 1\n1 2 1 1\n2 1\n1 2\n", "3\n4 2\n1 2 1 2\n4 2\n1 4 1 1\n2 1\n1 2\n", "3\n4 3\n2 2 1 2\n4 2\n1 1 4 1\n2 2\n2 2\n", "3\n4 1\n1 3 2 4\n4 1\n1 1 1 1\n2 1\n2 1\n", "3\n4 4\n1 3 1 2\n4 2\n1 3 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 1 4\n4 1\n1 2 1 1\n2 1\n2 2\n", "3\n4 3\n1 3 3 2\n4 3\n2 1 1 1\n2 2\n2 2\n", "3\n4 3\n1 1 1 3\n4 4\n2 1 1 1\n2 1\n1 2\n", "3\n4 3\n2 2 2 4\n4 3\n1 1 1 1\n2 1\n2 2\n", "3\n4 1\n1 1 2 2\n4 1\n3 1 1 1\n2 2\n2 2\n", "3\n4 2\n1 4 3 2\n4 4\n1 1 1 2\n2 2\n2 2\n", "3\n4 3\n2 1 2 2\n4 4\n1 1 1 2\n2 2\n2 2\n", "3\n4 3\n1 1 4 3\n4 2\n1 1 1 1\n2 2\n2 2\n", "3\n4 2\n1 3 2 2\n4 1\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n4 2 2 4\n4 3\n1 1 1 1\n2 1\n2 2\n", "3\n4 2\n1 4 3 2\n4 4\n1 1 1 4\n2 2\n2 2\n", "3\n4 3\n3 1 2 2\n4 4\n1 1 1 2\n2 2\n2 2\n", "3\n4 2\n1 3 2 2\n4 2\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 2 2\n4 2\n1 1 1 1\n2 1\n1 2\n", "3\n4 3\n1 2 1 2\n4 2\n1 2 1 1\n2 1\n1 2\n", "3\n4 3\n1 3 2 2\n4 1\n1 1 1 1\n2 1\n2 2\n", "3\n4 3\n1 4 2 4\n4 2\n1 1 1 1\n2 1\n2 2\n"], "output": ["2\n3\n1\n", "2\n6\n2\n", "1\n6\n2\n", "1\n3\n2\n", "2\n3\n2\n", "2\n1\n1\n", "1\n1\n1\n", "2\n1\n2\n", "1\n3\n1\n", "1\n1\n2\n", "3\n6\n2\n", "3\n1\n2\n", "2\n4\n1\n", "3\n3\n1\n", "2\n6\n1\n", "3\n1\n1\n", "1\n6\n1\n", "1\n4\n1\n", "3\n6\n1\n", "4\n1\n1\n", "4\n3\n1\n", "2\n4\n2\n", "6\n1\n1\n", "3\n4\n2\n", "3\n3\n2\n", "1\n4\n2\n", "3\n4\n1\n", "2\n3\n1\n", "1\n6\n2\n", "1\n3\n2\n", "2\n6\n2\n", "1\n3\n2\n", "2\n1\n2\n", "2\n1\n1\n", "2\n1\n1\n", "2\n3\n1\n", "2\n1\n1\n", "2\n1\n2\n", "1\n1\n1\n", "1\n1\n2\n", "1\n3\n2\n", "2\n1\n1\n", "2\n3\n1\n", "2\n1\n1\n", "2\n1\n1\n", "1\n3\n2\n", "1\n1\n1\n", "1\n1\n2\n", "1\n3\n1\n", "1\n1\n2\n", "1\n1\n1\n", "2\n3\n1\n", "1\n1\n1\n", "3\n1\n2\n", "1\n1\n2\n", "2\n1\n2\n", "1\n1\n2\n", "2\n3\n2\n", "1\n1\n1\n", "1\n1\n2\n", "3\n1\n1\n", "2\n3\n1\n", "2\n1\n1\n", "3\n1\n1\n", "2\n6\n1\n", "1\n1\n2\n", "1\n3\n1\n", "1\n3\n1\n", "1\n1\n1\n", "2\n3\n2\n", "1\n3\n1\n", "1\n1\n1\n", "3\n3\n1\n", "2\n3\n1\n", "2\n3\n2\n", "1\n3\n1\n", "1\n3\n2\n", "1\n1\n1\n", "2\n1\n2\n", "2\n3\n2\n", "1\n1\n1\n", "1\n1\n2\n", "1\n1\n2\n", "3\n3\n1\n", "1\n1\n1\n", "3\n1\n2\n", "1\n1\n1\n", "3\n1\n2\n", "3\n1\n1\n", "1\n4\n1\n", "1\n6\n1\n", "1\n1\n2\n", "1\n3\n1\n", "1\n3\n1\n", "1\n1\n1\n", "3\n1\n1\n", "1\n3\n2\n", "1\n6\n1\n", "2\n3\n2\n", "1\n3\n2\n", "3\n6\n2\n", "2\n1\n1\n", "1\n1\n1\n", "1\n1\n1\n", "2\n1\n2\n", "1\n4\n1\n", "1\n3\n2\n", "3\n1\n1\n", "1\n6\n1\n", "3\n6\n1\n", "3\n6\n1\n", "1\n1\n2\n", "1\n3\n1\n", "2\n3\n1\n", "3\n1\n1\n", "2\n3\n1\n", "1\n3\n2\n", "2\n4\n2\n", "2\n1\n1\n", "4\n3\n1\n", "2\n1\n2\n", "1\n1\n1\n", "1\n1\n1\n", "1\n3\n1\n", "2\n1\n1\n", "2\n3\n2\n", "4\n1\n1\n", "2\n1\n2\n", "1\n3\n1\n", "3\n1\n1\n", "1\n3\n1\n", "3\n3\n1\n", "2\n4\n1\n", "2\n1\n1\n", "1\n1\n1\n", "4\n1\n1\n", "2\n3\n2\n", "1\n3\n1\n", "1\n1\n1\n", "1\n4\n1\n", "1\n1\n1\n", "2\n6\n1\n", "2\n3\n1\n", "2\n6\n2\n", "2\n3\n2\n", "2\n6\n2\n", "1\n3\n2\n", "2\n1\n2\n", "1\n3\n1\n", "3\n1\n2\n", "3\n4\n2\n", "2\n1\n2\n", "2\n1\n1\n", "1\n3\n2\n", "3\n1\n1\n", "2\n1\n2\n", "1\n1\n2\n", "1\n1\n1\n", "1\n3\n1\n", "1\n1\n2\n", "2\n1\n1\n", "1\n1\n2\n", "2\n3\n1\n", "3\n1\n2\n", "1\n4\n1\n", "1\n3\n2\n", "2\n4\n2\n", "1\n3\n1\n", "1\n1\n1\n", "3\n3\n1\n", "3\n3\n1\n", "1\n1\n1\n", "2\n1\n1\n", "1\n1\n1\n", "3\n3\n2\n", "2\n6\n2\n", "3\n1\n2\n", "2\n6\n1\n", "3\n1\n1\n", "1\n3\n1\n", "1\n3\n1\n", "1\n4\n1\n", "1\n3\n2\n", "2\n1\n2\n", "1\n3\n1\n", "3\n1\n1\n", "3\n4\n2\n", "2\n1\n1\n", "1\n1\n1\n", "1\n1\n1\n", "2\n6\n1\n", "2\n1\n1\n", "2\n4\n2\n", "1\n1\n1\n", "1\n1\n1\n", "2\n3\n1\n", "1\n6\n1\n", "2\n3\n1\n", "1\n4\n2\n", "1\n6\n2\n"]}, "short_description": "1. One-sentence summary:  \nGiven a multiset of size n and a target selection size k, the solution computes how many ways one can choose k elements so that the selection\u2019s k-th largest value matches a specific pivot value that may be duplicated.\n\n2. Core algorithmic approach:  \nPure combinatorial counting\u2014sort the input, identify how many copies of the pivot need to be chosen from how many are available, and compute the binomial coefficient C(needed, available) modulo 10^9+7 using factorials.\n\n3. Reusable components:  \n- A modular binomial\u2010coefficient function (\u201cn choose k mod M\u201d) implemented via factorials and inverses (or direct factorial division when M is prime).  \n- Frequency counting of elements in an array using a hash map (value\u2192count).  \n- Identifying a contiguous block of equal values in a sorted array (two-pointer or index arithmetic) to determine how many copies fall inside a selection window."}
{"name": "9_A. Die Roll", "description": "Yakko, Wakko and Dot, world-famous animaniacs, decided to rest from acting in cartoons, and take a leave to travel a bit. Yakko dreamt to go to Pennsylvania, his Motherland and the Motherland of his ancestors. Wakko thought about Tasmania, its beaches, sun and sea. Dot chose Transylvania as the most mysterious and unpredictable place.\n\nBut to their great regret, the leave turned to be very short, so it will be enough to visit one of the three above named places. That's why Yakko, as the cleverest, came up with a truly genius idea: let each of the three roll an ordinary six-sided die, and the one with the highest amount of points will be the winner, and will take the other two to the place of his/her dreams.\n\nYakko thrown a die and got Y points, Wakko \u2014 W points. It was Dot's turn. But she didn't hurry. Dot wanted to know for sure what were her chances to visit Transylvania.\n\nIt is known that Yakko and Wakko are true gentlemen, that's why if they have the same amount of points with Dot, they will let Dot win.\n\nInput\n\nThe only line of the input file contains two natural numbers Y and W \u2014 the results of Yakko's and Wakko's die rolls.\n\nOutput\n\nOutput the required probability in the form of irreducible fraction in format \u00abA/B\u00bb, where A \u2014 the numerator, and B \u2014 the denominator. If the required probability equals to zero, output \u00ab0/1\u00bb. If the required probability equals to 1, output \u00ab1/1\u00bb. \n\nExamples\n\nInput\n\n4 2\n\n\nOutput\n\n1/2\n\nNote\n\nDot will go to Transylvania, if she is lucky to roll 4, 5 or 6 points.", "solution": "x, y = input().split()\nx = int(x)\ny = int(y)\nz = 7 - max(x, y)\nans = z/6\nif ans == (1/6):\n    print(\"1/6\")\nelif ans == (2/6):\n    print(\"1/3\")\nelif ans == (3/6):\n    print(\"1/2\")\nelif ans == (4/6):\n    print(\"2/3\")\nelif ans == (5/6):\n    print(\"5/6\")\nelse:\n    print(\"1/1\")\n\n\n\n", "difficulty": 7, "public_tests": {"input": ["4 2\n"], "output": ["1/2\n"]}, "private_tests": {"input": ["6 6\n", "1 4\n", "4 4\n", "3 3\n", "6 4\n", "6 3\n", "5 4\n", "5 6\n", "3 4\n", "1 3\n", "3 2\n", "5 5\n", "1 1\n", "2 1\n", "3 1\n", "3 5\n", "1 6\n", "6 5\n", "2 3\n", "4 3\n", "2 2\n", "3 6\n", "1 2\n", "6 1\n", "2 5\n", "4 5\n", "1 5\n", "6 2\n", "4 6\n", "5 1\n", "4 1\n", "5 2\n", "2 4\n", "2 6\n", "5 3\n"], "output": ["1/6\n", "1/2\n", "1/2\n", "2/3\n", "1/6\n", "1/6\n", "1/3\n", "1/6\n", "1/2\n", "2/3\n", "2/3\n", "1/3\n", "1/1\n", "5/6\n", "2/3\n", "1/3\n", "1/6\n", "1/6\n", "2/3\n", "1/2\n", "5/6\n", "1/6\n", "5/6\n", "1/6\n", "1/3\n", "1/3\n", "1/3\n", "1/6\n", "1/6\n", "1/3\n", "1/2\n", "1/3\n", "1/2\n", "1/6\n", "1/3\n"]}, "generated_tests": {"input": ["0 4\n", "5 0\n", "0 2\n", "3 0\n", "6 0\n", "4 0\n", "2 0\n", "0 3\n", "-1 3\n", "2 -1\n", "-1 4\n", "-1 2\n", "4 -1\n", "0 5\n", "-2 2\n", "-1 5\n", "-4 2\n", "-5 2\n", "-9 2\n", "0 6\n", "2 -2\n", "-1 6\n", "5 -1\n", "4 -2\n", "3 -1\n", "-2 4\n", "4 -4\n", "2 -3\n", "-3 2\n", "-16 2\n", "3 -2\n", "6 -1\n", "-2 5\n", "5 -2\n", "6 -4\n", "-6 2\n", "-3 4\n", "-6 4\n", "-4 3\n", "-4 5\n", "-6 5\n", "2 -4\n", "6 -2\n", "3 -3\n", "-2 3\n", "-9 4\n", "-3 3\n", "-5 3\n", "-2 6\n", "-6 3\n", "-3 5\n", "4 -3\n", "4 -6\n", "-16 3\n", "-9 3\n", "-8 5\n", "-5 5\n", "3 -6\n", "5 -3\n", "-12 2\n", "-8 3\n", "5 -4\n", "5 -6\n", "-9 5\n", "-7 5\n", "3 -12\n", "-12 3\n", "-4 4\n", "-17 5\n", "-7 3\n", "-5 4\n", "-5 6\n", "3 -4\n", "6 -3\n", "2 -8\n", "3 -5\n"], "output": ["1/2\n", "1/3\n", "5/6\n", "2/3\n", "1/6\n", "1/2\n", "5/6\n", "2/3\n", "2/3\n", "5/6\n", "1/2\n", "5/6\n", "1/2\n", "1/3\n", "5/6\n", "1/3\n", "5/6\n", "5/6\n", "5/6\n", "1/6\n", "5/6\n", "1/6\n", "1/3\n", "1/2\n", "2/3\n", "1/2\n", "1/2\n", "5/6\n", "5/6\n", "5/6\n", "2/3\n", "1/6\n", "1/3\n", "1/3\n", "1/6\n", "5/6\n", "1/2\n", "1/2\n", "2/3\n", "1/3\n", "1/3\n", "5/6\n", "1/6\n", "2/3\n", "2/3\n", "1/2\n", "2/3\n", "2/3\n", "1/6\n", "2/3\n", "1/3\n", "1/2\n", "1/2\n", "2/3\n", "2/3\n", "1/3\n", "1/3\n", "2/3\n", "1/3\n", "5/6\n", "2/3\n", "1/3\n", "1/3\n", "1/3\n", "1/3\n", "2/3\n", "2/3\n", "1/2\n", "1/3\n", "2/3\n", "1/2\n", "1/6\n", "2/3\n", "1/6\n", "5/6\n", "2/3\n"]}, "short_description": "1. One-sentence summary:\nCompute the probability that a uniformly random integer from 1 to 6 exceeds the larger of two given integers, and output this probability in lowest-term fractional form.\n\n2. Core algorithmic approach:\nConstant-time arithmetic with direct fraction reduction (essentially O(1) math). No advanced data structures or graph/tree algorithms are needed\u2014just basic max, subtraction, division, and mapping to simplified fractions.\n\n3. Reusable components:\n- Fraction simplifier: compute gcd(numerator, denominator) and divide both by it to produce a reduced fraction.\n- Probability calculator for \u201cevents exceeding a threshold\u201d on a fixed discrete range: threshold = max(a, b); favorable = max_value \u2013 threshold; total = max_value.\n- Lookup or formatting routine: map small integer fractions to their string representations (e.g., via a dict) or format \u201c{num}/{den}\u201d."}
{"name": "167_B. Wizards and Huge Prize", "description": "One must train much to do well on wizardry contests. So, there are numerous wizardry schools and magic fees.\n\nOne of such magic schools consists of n tours. A winner of each tour gets a huge prize. The school is organised quite far away, so one will have to take all the prizes home in one go. And the bags that you've brought with you have space for no more than k huge prizes.\n\nBesides the fact that you want to take all the prizes home, you also want to perform well. You will consider your performance good if you win at least l tours.\n\nIn fact, years of organizing contests proved to the organizers that transporting huge prizes is an issue for the participants. Alas, no one has ever invented a spell that would shrink the prizes... So, here's the solution: for some tours the winner gets a bag instead of a huge prize. Each bag is characterized by number ai \u2014 the number of huge prizes that will fit into it.\n\nYou already know the subject of all tours, so you can estimate the probability pi of winning the i-th tour. You cannot skip the tour under any circumstances.\n\nFind the probability that you will perform well on the contest and will be able to take all won prizes home (that is, that you will be able to fit all the huge prizes that you won into the bags that you either won or brought from home).\n\nInput\n\nThe first line contains three integers n, l, k (1 \u2264 n \u2264 200, 0 \u2264 l, k \u2264 200) \u2014 the number of tours, the minimum number of tours to win, and the number of prizes that you can fit in the bags brought from home, correspondingly.\n\nThe second line contains n space-separated integers, pi (0 \u2264 pi \u2264 100) \u2014 the probability to win the i-th tour, in percents.\n\nThe third line contains n space-separated integers, ai (1 \u2264 ai \u2264 200) \u2014 the capacity of the bag that will be awarded to you for winning the i-th tour, or else -1, if the prize for the i-th tour is a huge prize and not a bag.\n\nOutput\n\nPrint a single real number \u2014 the answer to the problem. The answer will be accepted if the absolute or relative error does not exceed 10 - 6.\n\nExamples\n\nInput\n\n3 1 0\n10 20 30\n-1 -1 2\n\n\nOutput\n\n0.300000000000\n\n\nInput\n\n1 1 1\n100\n123\n\n\nOutput\n\n1.000000000000\n\nNote\n\nIn the first sample we need either win no tour or win the third one. If we win nothing we wouldn't perform well. So, we must to win the third tour. Other conditions will be satisfied in this case. Probability of wining the third tour is 0.3.\n\nIn the second sample we win the only tour with probability 1.0, and go back home with bag for it.", "solution": "from collections import *\n\n\n\nf = lambda: list(map(int, input().split()))\n\nn, l, a = f()\n\np, s = f(), f()\n\nm = s.count(-1)\n\nx = {(0, min(a, m)): 1}\n\nr = [1]\n\n\n\nfor p, s in zip(p, s):\n\n    p /= 100\n\n    if s > 0:\n\n        y = defaultdict(int)\n\n        for (k, a), q in x.items():\n\n            y[(k, a)] += q - q * p\n\n            a = min(m, a + s)\n\n            k = min(l, k + 1)\n\n            y[(k, a)] += q * p\n\n        x = y\n\n    else:\n\n        i = [0] + [q * p for q in r]\n\n        j = [q - q * p for q in r] + [0]\n\n        r = [a + b for a, b in zip(i, j)]\n\n\n\ny = [[0] * (m + 1) for i in range(n - m + 1)]\n\nfor (k, a), q in x.items():\n\n    if k + a >= l: y[k][a] = q\n\n\n\nfor k in range(n - m, -1, -1):\n\n    for a in range(m, 0, -1):\n\n        y[k][a - 1] += y[k][a]\n\nfor k in range(n - m, 0, -1):\n\n    for a in range(m, -1, -1):\n\n        y[k - 1][a] += y[k][a]\n\n\n\nd = 0\n\nfor k, p in enumerate(r):\n\n    if l - k <= n - m: d += y[max(0, l - k)][k] * p\n\nprint(d)\n\n\n\n# Made By Mostafa_Khaled", "difficulty": 8, "public_tests": {"input": ["3 1 0\n10 20 30\n-1 -1 2\n", "1 1 1\n100\n123\n"], "output": ["0.3000000\n", "1.0000000\n"]}, "private_tests": {"input": ["17 5 17\n69 43 30 9 17 75 43 42 3 10 47 90 82 47 1 51 31\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n", "12 6 12\n98 44 95 72 87 100 72 60 34 5 30 78\n6 1 3 1 3 1 1 1 1 3 1 5\n", "82 77 11\n100 56 83 61 74 15 44 60 25 4 78 16 85 93 4 10 40 16 74 89 73 20 75 20 57 48 19 46 44 43 48 40 95 60 97 63 48 50 38 23 23 23 16 75 18 72 63 31 18 52 78 80 51 34 62 5 18 60 21 36 96 45 74 69 29 49 22 91 21 78 87 70 78 57 75 18 17 75 2 53 45 97\n55 57 -1 -1 -1 -1 38 -1 -1 19 37 3 -1 -1 -1 -1 -1 -1 10 11 29 9 3 14 -1 -1 -1 35 -1 1 6 24 7 -1 -1 4 2 32 -1 -1 2 12 3 -1 39 5 -1 5 3 2 20 21 -1 -1 17 -1 7 35 24 2 22 -1 -1 -1 19 -1 -1 43 25 24 6 5 25 1 -1 7 13 10 -1 22 12 5\n", "47 38 17\n25 72 78 36 8 35 53 83 23 63 53 85 67 43 48 80 67 0 55 12 67 0 17 19 80 77 28 16 88 0 79 41 50 46 54 31 80 89 77 24 75 52 49 3 58 38 56\n4 -1 -1 7 -1 2 1 -1 -1 -1 -1 -1 -1 -1 17 -1 5 18 -1 -1 -1 -1 3 22 -1 1 -1 12 -1 7 -1 -1 -1 -1 -1 3 8 -1 1 22 -1 -1 5 -1 2 -1 23\n", "1 2 43\n18\n-1\n", "69 61 48\n55 30 81 52 50 99 58 15 6 98 95 56 97 71 38 87 28 88 22 73 51 21 78 7 73 28 47 36 74 48 49 8 69 83 63 72 53 36 19 48 91 47 2 74 64 40 14 50 41 57 45 97 9 84 50 57 91 24 24 67 18 63 77 96 38 10 17 55 43\n3 8 -1 -1 39 -1 3 -1 10 -1 -1 -1 26 12 38 8 14 24 2 11 6 9 27 32 20 6 -1 13 10 -1 20 13 13 -1 18 6 27 5 19 19 39 9 14 -1 35 -1 3 17 7 11 -1 -1 17 44 7 14 9 29 1 -1 24 1 16 4 14 3 2 -1 -1\n", "86 81 36\n84 44 92 12 39 24 70 73 17 43 50 59 9 89 87 67 80 35 7 49 6 23 1 19 2 70 40 84 4 28 18 60 13 97 3 76 69 5 13 26 55 27 21 62 17 3 6 40 55 69 16 56 13 55 20 72 35 13 38 24 14 73 73 92 75 46 92 39 22 86 3 70 12 95 48 40 37 69 4 83 42 9 4 63 66 56\n16 5 2 16 -1 21 11 -1 1 48 -1 17 -1 -1 2 12 20 34 41 12 30 3 -1 31 42 45 26 30 34 29 -1 3 18 16 19 24 2 7 -1 38 28 -1 18 24 3 41 16 1 46 18 8 12 6 34 8 -1 -1 3 -1 3 3 6 11 -1 13 -1 1 11 12 -1 2 4 55 17 -1 -1 -1 16 7 -1 15 -1 4 23 38 2\n", "1 0 0\n7\n-1\n", "5 1 2\n36 44 13 83 63\n-1 2 -1 2 1\n", "33 9 19\n32 7 0 39 72 86 95 87 33 6 65 79 85 36 87 80 63 56 62 20 20 96 28 63 38 26 76 10 16 16 99 60 49\n-1 -1 -1 -1 -1 6 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 9 -1 -1 -1 -1 11 -1 -1 -1 -1 -1 -1 -1\n", "26 25 5\n5 46 54 97 12 16 22 100 51 88 78 47 93 95 1 80 94 33 39 54 70 92 30 20 72 72\n-1 -1 4 5 6 -1 4 -1 3 -1 4 -1 -1 3 -1 6 10 14 5 5 2 8 10 1 -1 -1\n", "2 1 2\n80 35\n-1 -1\n", "11 6 2\n54 64 95 25 45 65 97 14 0 19 20\n2 2 2 3 1 2 2 3 4 1 3\n", "79 31 70\n76 69 67 55 50 32 53 6 1 20 30 20 59 12 99 6 60 44 95 59 32 91 24 71 36 99 87 83 14 13 19 82 16 16 12 6 29 14 36 8 9 46 80 76 22 100 57 65 13 90 28 20 72 28 14 70 12 12 27 51 74 83 47 0 18 61 47 88 63 1 22 56 8 70 79 23 26 20 91\n12 -1 -1 -1 23 24 7 -1 -1 -1 4 6 10 -1 -1 -1 -1 4 25 -1 15 -1 -1 -1 12 2 17 -1 -1 -1 19 -1 4 23 6 -1 40 -1 17 -1 13 -1 3 11 2 -1 1 -1 -1 -1 -1 9 25 -1 -1 2 3 -1 -1 -1 -1 6 -1 -1 -1 -1 -1 11 26 2 12 -1 -1 -1 5 5 19 20 -1\n", "46 33 12\n3 26 81 86 20 98 99 59 98 80 43 28 21 91 63 86 75 82 85 36 88 27 48 29 44 25 43 45 54 42 44 66 6 64 74 90 82 10 55 63 100 3 4 86 40 39\n-1 -1 8 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 13 -1 -1 -1 -1 10 -1 5 -1 14 10 -1 -1 -1 2 -1 -1 -1 -1 -1 5 -1 -1 10 -1 -1 -1 -1 5 -1 -1 -1\n", "66 30 30\n7 86 54 73 90 31 86 4 28 49 87 44 23 58 84 0 43 37 90 31 23 57 11 70 86 25 53 75 65 20 23 6 33 66 65 4 54 74 74 58 93 49 80 35 94 71 80 97 39 39 59 50 62 65 88 43 60 53 80 23 71 61 57 100 71 3\n-1 25 25 9 -1 7 23 3 23 8 37 14 33 -1 -1 11 -1 -1 5 40 21 -1 4 -1 19 -1 1 9 24 -1 -1 -1 -1 -1 5 2 24 -1 3 -1 2 3 -1 -1 -1 -1 -1 -1 8 28 2 -1 1 -1 -1 30 -1 10 42 17 22 -1 -1 -1 -1 -1\n", "76 43 67\n20 91 34 79 34 62 50 99 35 22 92 32 77 48 2 90 27 56 65 85 88 58 63 99 88 89 45 82 78 5 70 7 100 72 75 1 59 32 30 89 81 28 99 27 95 67 89 65 63 63 63 77 80 32 1 81 25 64 29 20 7 62 60 51 58 95 68 78 98 78 97 68 68 96 95 74\n9 24 -1 -1 13 -1 11 23 -1 -1 3 9 -1 -1 8 47 -1 -1 16 -1 10 -1 34 -1 12 23 -1 4 26 -1 13 11 9 11 -1 -1 -1 18 -1 2 13 30 -1 5 -1 9 -1 -1 28 29 -1 -1 8 40 -1 -1 -1 -1 -1 -1 10 24 -1 36 18 -1 -1 -1 -1 29 -1 6 10 -1 -1 2\n", "2 1 200\n20 30\n-1 -1\n", "4 0 3\n45 54 15 33\n1 -1 -1 -1\n", "3 1 200\n20 30 40\n-1 -1 -1\n", "38 35 36\n45 27 85 64 37 79 43 16 92 6 16 83 61 79 67 52 44 35 80 79 39 29 68 6 88 84 51 56 94 46 15 50 81 53 88 25 26 59\n2 3 -1 13 -1 7 -1 7 3 14 -1 -1 4 -1 2 1 10 -1 -1 -1 3 -1 -1 12 -1 9 -1 5 10 1 3 12 -1 -1 -1 -1 12 8\n", "2 2 0\n50 50\n1 -1\n", "9 9 2\n91 96 99 60 42 67 46 39 62\n5 -1 2 -1 -1 -1 7 -1 3\n", "2 1 2\n92 42\n-1 -1\n", "57 12 37\n27 40 10 0 81 52 8 79 61 9 90 26 24 22 8 10 0 93 63 74 65 46 64 23 27 37 6 21 5 9 40 53 66 78 65 10 53 1 36 90 5 0 25 60 76 62 36 79 71 29 7 72 45 43 34 35 72\n-1 10 13 -1 5 -1 -1 5 13 -1 16 9 3 15 -1 23 15 42 8 -1 14 28 -1 19 5 6 3 -1 5 -1 -1 -1 14 7 -1 -1 30 12 16 11 16 9 3 25 -1 -1 17 -1 39 29 10 2 18 24 7 -1 3\n", "7 0 3\n58 29 75 56 47 28 27\n-1 -1 1 -1 1 2 -1\n", "1 0 0\n3\n-1\n", "57 22 40\n100 99 89 78 37 82 12 100 4 30 23 4 63 33 71 16 88 13 75 32 53 46 54 26 60 41 34 5 83 63 71 46 5 46 29 16 81 74 84 86 81 19 36 21 42 70 49 28 34 37 29 22 24 18 52 48 66\n46 19 4 30 20 4 -1 5 6 19 12 1 24 15 5 24 7 -1 15 9 13 2 -1 5 6 24 10 10 10 7 7 5 14 1 23 20 8 -1 10 28 3 11 24 20 3 10 3 8 1 7 6 1 2 -1 23 6 2\n", "3 1 0\n20 20 20\n2 -1 -1\n", "4 3 0\n100 100 100 100\n200 200 200 200\n", "4 1 2\n38 15 28 15\n-1 1 -1 -1\n", "1 0 200\n50\n-1\n", "5 3 200\n100 100 100 100 100\n200 200 200 200 200\n"], "output": ["0.9242231\n", "0.9572470\n", "0.0000000\n", "0.0000000\n", "0.0000000\n", "0.0000000\n", "0.0000000\n", "0.9300000\n", "0.9803873\n", "0.9982280\n", "0.0000000\n", "0.8700000\n", "0.3370886\n", "0.8838304\n", "0.0036880\n", "0.9653988\n", "0.8651904\n", "0.4400000\n", "1.0000000\n", "0.6640000\n", "0.0000000\n", "0.2500000\n", "0.0162419\n", "0.9536000\n", "0.9999601\n", "0.9975738\n", "0.9700000\n", "0.9680765\n", "0.2000000\n", "1.0000000\n", "0.6639100\n", "1.0000000\n", "1.0000000\n"]}, "generated_tests": {"input": ["82 77 11\n100 56 83 61 74 15 44 60 25 4 78 16 85 93 4 10 40 16 74 89 73 20 75 20 57 48 19 46 44 43 48 40 95 60 97 63 48 50 38 23 23 23 16 75 18 72 63 31 18 52 78 80 51 34 62 5 18 60 21 36 96 45 74 69 29 49 22 91 21 78 87 70 78 57 75 18 17 75 2 53 45 97\n55 57 -1 -1 -1 -1 38 -1 -1 19 37 3 -1 -1 -1 -1 -1 -1 10 11 29 9 3 14 -1 -1 -1 35 -1 1 6 27 7 -1 -1 4 2 32 -1 -1 2 12 3 -1 39 5 -1 5 3 2 20 21 -1 -1 17 -1 7 35 24 2 22 -1 -1 -1 19 -1 -1 43 25 24 6 5 25 1 -1 7 13 10 -1 22 12 5\n", "5 1 2\n36 44 5 83 63\n-1 2 -1 2 1\n", "26 25 5\n5 46 54 97 12 16 22 100 51 88 78 47 93 95 1 80 94 33 39 54 70 92 30 20 72 72\n-1 -1 4 5 6 -1 4 -1 4 -1 4 -1 -1 3 -1 6 10 14 5 5 2 8 10 1 -1 -1\n", "11 6 2\n54 64 95 25 45 65 97 14 0 19 20\n3 2 2 3 1 2 2 3 4 1 3\n", "79 31 70\n76 69 67 55 50 32 53 6 1 20 30 20 59 3 99 6 60 44 95 59 32 91 24 71 36 99 87 83 14 13 19 82 16 16 12 6 29 14 36 8 9 46 80 76 22 100 57 65 13 90 28 20 72 28 14 70 12 12 27 51 74 83 47 0 18 61 47 88 63 1 22 56 8 70 79 23 26 20 91\n12 -1 -1 -1 23 24 7 -1 -1 -1 4 6 10 -1 -1 -1 -1 4 25 -1 15 -1 -1 -1 12 2 17 -1 -1 -1 19 -1 4 23 6 -1 40 -1 17 -1 13 -1 3 11 2 -1 1 -1 -1 -1 -1 9 25 -1 -1 2 3 -1 -1 -1 -1 6 -1 -1 -1 -1 -1 11 26 2 12 -1 -1 -1 5 5 19 20 -1\n", "46 33 12\n3 26 81 86 20 98 99 59 98 80 43 28 21 91 63 86 75 82 85 36 88 27 48 31 44 25 43 45 54 42 44 66 6 64 74 90 82 10 55 63 100 3 4 86 40 39\n-1 -1 8 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 13 -1 -1 -1 -1 10 -1 5 -1 14 10 -1 -1 -1 2 -1 -1 -1 -1 -1 5 -1 -1 10 -1 -1 -1 -1 5 -1 -1 -1\n", "66 30 30\n7 86 54 73 90 31 86 4 28 49 87 44 23 58 84 0 43 37 90 31 23 57 11 70 86 25 53 75 65 20 23 6 33 66 65 4 54 74 74 58 93 49 80 35 94 92 80 97 39 39 59 50 62 65 88 43 60 53 80 23 71 61 57 100 71 3\n-1 25 25 9 -1 7 23 3 23 8 37 14 33 -1 -1 11 -1 -1 5 40 21 -1 4 -1 19 -1 1 9 24 -1 -1 -1 -1 -1 5 2 24 -1 3 -1 2 3 -1 -1 -1 -1 -1 -1 8 28 2 -1 1 -1 -1 30 -1 10 42 17 22 -1 -1 -1 -1 -1\n", "38 35 36\n45 27 85 64 37 79 43 16 92 6 16 83 61 79 67 52 44 35 80 79 39 29 68 6 88 84 51 56 94 46 15 50 81 53 88 25 26 59\n2 3 -1 13 -1 7 -1 7 3 14 -1 -1 4 -1 2 1 10 -1 -1 -1 3 -1 -1 12 -1 9 -1 5 10 1 3 12 -1 -1 -1 -1 23 8\n", "2 2 0\n44 50\n1 -1\n", "7 0 3\n58 18 75 56 47 28 27\n-1 -1 1 -1 1 2 -1\n", "57 22 40\n100 99 89 78 37 82 12 100 4 30 23 4 63 33 71 16 88 13 75 32 53 46 54 26 60 41 34 5 83 63 71 46 5 46 29 16 81 74 84 86 81 19 36 21 42 70 49 28 34 37 29 22 24 18 52 48 66\n46 19 4 30 20 4 -1 5 6 19 12 1 24 15 5 24 7 -1 15 9 13 2 -1 5 6 24 15 10 10 7 7 5 14 1 23 20 8 -1 10 28 3 11 24 20 3 10 3 8 1 7 6 1 2 -1 23 6 2\n", "4 3 0\n100 100 100 100\n200 200 397 200\n", "3 1 0\n13 20 30\n-1 -1 2\n", "26 25 5\n5 46 54 97 12 16 22 100 51 88 78 47 93 95 1 80 94 33 39 36 70 92 30 20 72 72\n-1 -1 4 5 6 -1 4 -1 4 -1 4 -1 -1 3 -1 6 10 14 5 5 2 8 10 1 -1 -1\n", "11 6 2\n40 64 95 25 45 65 97 14 0 19 20\n3 2 2 3 1 2 2 3 4 1 3\n", "79 31 70\n76 69 67 55 50 32 53 6 1 20 30 20 59 3 99 12 60 44 95 59 32 91 24 71 36 99 87 83 14 13 19 82 16 16 12 6 29 14 36 8 9 46 80 76 22 100 57 65 13 90 28 20 72 28 14 70 12 12 27 51 74 83 47 0 18 61 47 88 63 1 22 56 8 70 79 23 26 20 91\n12 -1 -1 -1 23 24 7 -1 -1 -1 4 6 10 -1 -1 -1 -1 4 25 -1 15 -1 -1 -1 12 2 17 -1 -1 -1 19 -1 4 23 6 -1 40 -1 17 -1 13 -1 3 11 2 -1 1 -1 -1 -1 -1 9 25 -1 -1 2 3 -1 -1 -1 -1 6 -1 -1 -1 -1 -1 11 26 2 12 -1 -1 -1 5 5 19 20 -1\n", "46 33 12\n3 26 81 86 20 98 99 59 98 80 43 28 21 91 63 86 75 82 85 36 88 27 48 31 44 25 43 45 54 42 44 66 6 64 74 90 82 10 55 63 100 3 4 86 40 75\n-1 -1 8 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 13 -1 -1 -1 -1 10 -1 5 -1 14 10 -1 -1 -1 2 -1 -1 -1 -1 -1 5 -1 -1 10 -1 -1 -1 -1 5 -1 -1 -1\n", "2 2 0\n53 50\n1 -1\n", "7 0 3\n58 18 75 1 47 28 27\n-1 -1 1 -1 1 2 -1\n", "3 1 0\n13 20 16\n-1 -1 2\n", "26 25 5\n5 46 54 26 12 16 22 100 51 88 78 47 93 95 1 80 94 33 39 36 70 92 30 20 72 72\n-1 -1 4 5 6 -1 4 -1 4 -1 4 -1 -1 3 -1 6 10 14 5 5 2 8 10 1 -1 -1\n", "79 31 70\n76 69 67 55 50 32 53 6 1 20 30 20 59 3 99 12 60 44 95 59 32 91 24 71 36 99 87 83 14 13 19 82 16 16 12 6 29 14 36 8 9 46 80 76 22 100 57 65 13 90 28 20 72 28 14 70 12 12 27 51 74 83 47 0 14 61 47 88 63 1 22 56 8 70 79 23 26 20 91\n12 -1 -1 -1 23 24 7 -1 -1 -1 4 6 10 -1 -1 -1 -1 4 25 -1 15 -1 -1 -1 12 2 17 -1 -1 -1 19 -1 4 23 6 -1 40 -1 17 -1 13 -1 3 11 2 -1 1 -1 -1 -1 -1 9 25 -1 -1 2 3 -1 -1 -1 -1 6 -1 -1 -1 -1 -1 11 26 2 12 -1 -1 -1 5 5 19 20 -1\n", "46 33 12\n3 26 81 22 20 98 99 59 98 80 43 28 21 91 63 86 75 82 85 36 88 27 48 31 44 25 43 45 54 42 44 66 6 64 74 90 82 10 55 63 100 3 4 86 40 75\n-1 -1 8 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 13 -1 -1 -1 -1 10 -1 5 -1 14 10 -1 -1 -1 2 -1 -1 -1 -1 -1 5 -1 -1 10 -1 -1 -1 -1 5 -1 -1 -1\n", "11 6 2\n40 64 95 25 88 65 97 14 0 19 20\n3 4 2 3 1 2 2 3 4 1 3\n", "11 6 2\n40 64 95 26 88 65 97 14 0 19 20\n3 4 2 3 1 2 2 3 4 1 3\n", "57 22 40\n100 99 89 57 37 82 12 100 4 30 23 4 63 33 71 16 88 13 75 32 53 46 54 26 60 41 34 5 83 63 71 46 5 46 29 16 81 74 84 86 81 19 36 21 42 70 49 28 34 37 29 22 24 18 52 48 66\n50 28 4 30 20 4 -1 5 6 19 12 1 24 15 5 24 7 -1 15 9 13 2 -1 5 6 24 15 10 10 7 9 5 14 1 23 20 8 -1 10 28 3 11 24 20 3 10 3 8 1 7 6 1 2 -1 23 6 2\n", "69 45 48\n55 30 81 52 50 99 58 15 6 98 95 56 97 71 38 87 28 88 22 73 51 21 78 7 73 28 47 36 74 48 49 8 69 83 63 72 54 36 19 48 91 47 2 74 64 11 14 50 41 57 45 97 15 84 50 85 91 24 24 67 18 63 77 96 38 10 17 55 43\n3 8 -1 -1 39 -1 3 -1 10 -1 -1 -1 26 12 38 8 14 24 2 11 6 9 27 32 20 6 -1 13 10 -1 20 13 13 -1 18 6 27 5 19 19 39 9 18 -1 35 -1 3 17 7 11 -1 -1 17 44 7 14 9 29 1 -1 24 1 16 4 14 3 2 -1 -1\n", "69 45 48\n55 30 81 52 50 99 58 15 6 98 95 56 97 71 38 87 28 88 22 73 51 21 78 7 73 28 47 36 74 48 49 8 69 83 63 72 54 36 19 48 91 47 2 74 64 11 14 50 41 57 45 97 22 84 50 85 91 24 24 67 18 63 77 96 38 10 17 55 43\n3 8 -1 -1 39 -1 3 -1 10 -1 -1 -1 26 12 38 8 14 24 2 11 6 9 27 32 20 6 -1 13 10 -1 20 13 13 -1 18 6 27 5 19 19 39 9 18 -1 35 -1 3 17 7 11 -1 -1 17 44 7 14 9 29 1 -1 24 1 16 4 14 3 2 -1 -1\n", "1 2 43\n4\n-1\n", "69 61 48\n55 30 81 52 50 99 58 15 6 98 95 56 97 71 38 87 28 88 22 73 51 21 78 7 73 28 47 36 74 48 49 8 69 83 63 72 53 36 19 48 91 47 2 74 64 40 14 50 41 57 45 97 9 84 50 57 91 24 24 67 18 63 77 96 38 10 17 55 43\n3 8 -1 -1 39 -1 3 -1 10 -1 -1 -1 26 12 38 8 14 24 2 11 6 9 27 32 20 6 -1 13 10 -1 20 13 13 -1 18 6 27 5 19 19 39 9 18 -1 35 -1 3 17 7 11 -1 -1 17 44 7 14 9 29 1 -1 24 1 16 4 14 3 2 -1 -1\n", "86 81 36\n84 44 92 12 39 24 70 73 17 43 50 59 9 89 87 67 80 35 7 49 6 23 1 19 2 70 40 84 4 28 18 60 13 97 3 76 69 5 13 26 55 27 21 62 17 3 6 40 55 69 16 56 13 55 20 72 35 13 38 24 14 73 73 92 75 46 92 39 22 86 0 70 12 95 48 40 37 69 4 83 42 9 4 63 66 56\n16 5 2 16 -1 21 11 -1 1 48 -1 17 -1 -1 2 12 20 34 41 12 30 3 -1 31 42 45 26 30 34 29 -1 3 18 16 19 24 2 7 -1 38 28 -1 18 24 3 41 16 1 46 18 8 12 6 34 8 -1 -1 3 -1 3 3 6 11 -1 13 -1 1 11 12 -1 2 4 55 17 -1 -1 -1 16 7 -1 15 -1 4 23 38 2\n", "1 1 0\n7\n-1\n", "2 1 0\n92 42\n-1 -1\n", "1 0 176\n50\n-1\n", "1 2 1\n100\n123\n", "1 2 43\n7\n-1\n", "69 61 48\n55 30 81 52 50 99 58 15 6 98 95 56 97 71 38 87 28 88 22 73 51 21 78 7 73 28 47 36 74 48 49 8 69 83 63 72 54 36 19 48 91 47 2 74 64 40 14 50 41 57 45 97 9 84 50 57 91 24 24 67 18 63 77 96 38 10 17 55 43\n3 8 -1 -1 39 -1 3 -1 10 -1 -1 -1 26 12 38 8 14 24 2 11 6 9 27 32 20 6 -1 13 10 -1 20 13 13 -1 18 6 27 5 19 19 39 9 18 -1 35 -1 3 17 7 11 -1 -1 17 44 7 14 9 29 1 -1 24 1 16 4 14 3 2 -1 -1\n", "86 81 36\n84 44 92 12 39 24 70 73 17 43 50 59 9 89 87 67 80 35 7 49 6 23 1 19 2 70 40 84 4 28 18 60 1 97 3 76 69 5 13 26 55 27 21 62 17 3 6 40 55 69 16 56 13 55 20 72 35 13 38 24 14 73 73 92 75 46 92 39 22 86 0 70 12 95 48 40 37 69 4 83 42 9 4 63 66 56\n16 5 2 16 -1 21 11 -1 1 48 -1 17 -1 -1 2 12 20 34 41 12 30 3 -1 31 42 45 26 30 34 29 -1 3 18 16 19 24 2 7 -1 38 28 -1 18 24 3 41 16 1 46 18 8 12 6 34 8 -1 -1 3 -1 3 3 6 11 -1 13 -1 1 11 12 -1 2 4 55 17 -1 -1 -1 16 7 -1 15 -1 4 23 38 2\n", "66 30 30\n7 86 54 73 90 31 86 4 28 49 87 44 23 58 84 0 43 37 90 31 23 57 11 70 86 25 53 75 65 20 23 6 33 66 65 4 54 74 74 58 93 49 80 35 94 92 80 97 39 39 59 50 62 65 88 43 60 53 80 23 71 61 57 100 71 3\n-1 25 25 9 -1 7 23 3 23 8 37 14 33 -1 -1 11 -1 -1 5 40 21 -1 4 -1 19 -1 1 9 24 -1 -1 -1 -1 -1 7 2 24 -1 3 -1 2 3 -1 -1 -1 -1 -1 -1 8 28 2 -1 1 -1 -1 30 -1 10 42 17 22 -1 -1 -1 -1 -1\n", "57 22 40\n100 99 89 78 37 82 12 100 4 30 23 4 63 33 71 16 88 13 75 32 53 46 54 26 60 41 34 5 83 63 71 46 5 46 29 16 81 74 84 86 81 19 36 21 42 70 49 28 34 37 29 22 24 18 52 48 66\n46 19 4 30 20 4 -1 5 6 19 12 1 24 15 5 24 7 -1 15 9 13 2 -1 5 6 24 15 10 10 7 9 5 14 1 23 20 8 -1 10 28 3 11 24 20 3 10 3 8 1 7 6 1 2 -1 23 6 2\n", "4 3 0\n100 100 100 100\n200 200 397 140\n", "1 0 176\n23\n-1\n", "1 2 43\n0\n-1\n", "69 61 48\n55 30 81 52 50 99 58 15 6 98 95 56 97 71 38 87 28 88 22 73 51 21 78 7 73 28 47 36 74 48 49 8 69 83 63 72 54 36 19 48 91 47 2 74 64 40 14 50 41 57 45 97 9 84 50 85 91 24 24 67 18 63 77 96 38 10 17 55 43\n3 8 -1 -1 39 -1 3 -1 10 -1 -1 -1 26 12 38 8 14 24 2 11 6 9 27 32 20 6 -1 13 10 -1 20 13 13 -1 18 6 27 5 19 19 39 9 18 -1 35 -1 3 17 7 11 -1 -1 17 44 7 14 9 29 1 -1 24 1 16 4 14 3 2 -1 -1\n", "86 81 36\n84 44 92 12 39 24 70 73 17 43 50 59 9 89 87 67 80 35 7 49 6 23 1 19 2 70 40 84 4 28 18 60 1 97 3 76 69 5 13 26 55 27 21 62 17 1 6 40 55 69 16 56 13 55 20 72 35 13 38 24 14 73 73 92 75 46 92 39 22 86 0 70 12 95 48 40 37 69 4 83 42 9 4 63 66 56\n16 5 2 16 -1 21 11 -1 1 48 -1 17 -1 -1 2 12 20 34 41 12 30 3 -1 31 42 45 26 30 34 29 -1 3 18 16 19 24 2 7 -1 38 28 -1 18 24 3 41 16 1 46 18 8 12 6 34 8 -1 -1 3 -1 3 3 6 11 -1 13 -1 1 11 12 -1 2 4 55 17 -1 -1 -1 16 7 -1 15 -1 4 23 38 2\n", "11 6 2\n40 64 95 25 45 65 97 14 0 19 20\n3 4 2 3 1 2 2 3 4 1 3\n", "66 30 30\n7 86 54 73 90 31 86 4 28 49 87 44 23 58 84 0 43 37 90 31 23 57 11 70 86 25 53 75 65 20 23 6 33 66 65 4 54 74 74 58 93 49 80 35 94 92 80 97 39 39 59 50 62 65 88 43 60 53 80 23 71 61 57 100 71 3\n-1 25 25 9 -1 7 23 3 23 4 37 14 33 -1 -1 11 -1 -1 5 40 21 -1 4 -1 19 -1 1 9 24 -1 -1 -1 -1 -1 7 2 24 -1 3 -1 2 3 -1 -1 -1 -1 -1 -1 8 28 2 -1 1 -1 -1 30 -1 10 42 17 22 -1 -1 -1 -1 -1\n", "57 22 40\n100 99 89 78 37 82 12 100 4 30 23 4 63 33 71 16 88 13 75 32 53 46 54 26 60 41 34 5 83 63 71 46 5 46 29 16 81 74 84 86 81 19 36 21 42 70 49 28 34 37 29 22 24 18 52 48 66\n46 28 4 30 20 4 -1 5 6 19 12 1 24 15 5 24 7 -1 15 9 13 2 -1 5 6 24 15 10 10 7 9 5 14 1 23 20 8 -1 10 28 3 11 24 20 3 10 3 8 1 7 6 1 2 -1 23 6 2\n", "4 3 0\n100 100 000 100\n200 200 397 140\n", "1 2 36\n0\n-1\n", "69 61 48\n55 30 81 52 50 99 58 15 6 98 95 56 97 71 38 87 28 88 22 73 51 21 78 7 73 28 47 36 74 48 49 8 69 83 63 72 54 36 19 48 91 47 2 74 64 40 14 50 41 57 45 97 15 84 50 85 91 24 24 67 18 63 77 96 38 10 17 55 43\n3 8 -1 -1 39 -1 3 -1 10 -1 -1 -1 26 12 38 8 14 24 2 11 6 9 27 32 20 6 -1 13 10 -1 20 13 13 -1 18 6 27 5 19 19 39 9 18 -1 35 -1 3 17 7 11 -1 -1 17 44 7 14 9 29 1 -1 24 1 16 4 14 3 2 -1 -1\n", "86 81 36\n84 44 92 12 39 24 70 73 17 43 50 59 9 89 87 67 80 35 7 49 6 23 1 19 2 70 40 84 4 28 18 60 1 97 3 76 69 5 13 26 55 27 21 62 17 1 6 40 55 69 16 56 13 55 20 72 35 13 38 24 14 73 73 92 75 46 92 39 22 86 0 70 12 95 48 40 37 69 4 83 42 9 4 63 66 56\n16 5 2 16 -1 21 11 -1 1 48 -1 17 -1 -1 2 12 20 34 41 12 30 3 -1 31 42 45 26 30 34 29 -1 3 18 16 19 38 2 7 -1 38 28 -1 18 24 3 41 16 1 46 18 8 12 6 34 8 -1 -1 3 -1 3 3 6 11 -1 13 -1 1 11 12 -1 2 4 55 17 -1 -1 -1 16 7 -1 15 -1 4 23 38 2\n", "26 25 5\n5 46 54 26 12 16 22 100 51 88 78 47 93 95 1 80 94 33 39 36 70 92 30 20 72 72\n-1 -1 4 5 6 -1 4 -1 4 -1 4 -1 -1 3 -1 6 10 8 5 5 2 8 10 1 -1 -1\n", "57 22 40\n100 99 89 78 37 82 12 100 4 30 23 4 63 33 71 16 88 13 75 32 53 46 54 26 60 41 34 5 83 63 71 46 5 46 29 16 81 74 84 86 81 19 36 21 42 70 49 28 34 37 29 22 24 18 52 48 66\n50 28 4 30 20 4 -1 5 6 19 12 1 24 15 5 24 7 -1 15 9 13 2 -1 5 6 24 15 10 10 7 9 5 14 1 23 20 8 -1 10 28 3 11 24 20 3 10 3 8 1 7 6 1 2 -1 23 6 2\n", "69 61 48\n55 30 81 52 50 99 58 15 6 98 95 56 97 71 38 87 28 88 22 73 51 21 78 7 73 28 47 36 74 48 49 8 69 83 63 72 54 36 19 48 91 47 2 74 64 11 14 50 41 57 45 97 15 84 50 85 91 24 24 67 18 63 77 96 38 10 17 55 43\n3 8 -1 -1 39 -1 3 -1 10 -1 -1 -1 26 12 38 8 14 24 2 11 6 9 27 32 20 6 -1 13 10 -1 20 13 13 -1 18 6 27 5 19 19 39 9 18 -1 35 -1 3 17 7 11 -1 -1 17 44 7 14 9 29 1 -1 24 1 16 4 14 3 2 -1 -1\n", "86 81 36\n84 44 92 12 39 24 70 73 17 43 50 59 9 89 87 67 80 35 7 49 6 23 1 19 2 70 40 84 4 28 18 60 1 97 3 76 69 5 13 26 55 27 21 62 17 1 6 40 55 69 16 56 13 55 20 72 35 13 38 24 14 73 73 92 75 46 92 39 22 86 0 70 12 95 48 40 37 69 4 83 42 9 2 63 66 56\n16 5 2 16 -1 21 11 -1 1 48 -1 17 -1 -1 2 12 20 34 41 12 30 3 -1 31 42 45 26 30 34 29 -1 3 18 16 19 38 2 7 -1 38 28 -1 18 24 3 41 16 1 46 18 8 12 6 34 8 -1 -1 3 -1 3 3 6 11 -1 13 -1 1 11 12 -1 2 4 55 17 -1 -1 -1 16 7 -1 15 -1 4 23 38 2\n", "86 152 36\n84 44 92 12 39 24 70 73 17 43 50 59 9 89 87 67 80 35 7 49 6 23 1 19 2 70 40 84 4 28 18 60 1 97 3 76 69 5 13 26 55 27 21 62 17 1 6 40 55 69 16 56 13 55 20 72 35 13 38 24 14 73 73 92 75 46 92 39 22 86 0 70 12 95 48 40 37 69 4 83 42 9 2 63 66 56\n16 5 2 16 -1 21 11 -1 1 48 -1 17 -1 -1 2 12 20 34 41 12 30 3 -1 31 42 45 26 30 34 29 -1 3 18 16 19 38 2 7 -1 38 28 -1 18 24 3 41 16 1 46 18 8 12 6 34 8 -1 -1 3 -1 3 3 6 11 -1 13 -1 1 11 12 -1 2 4 55 17 -1 -1 -1 16 7 -1 15 -1 4 23 38 2\n", "11 6 2\n40 64 95 26 88 65 97 14 0 19 20\n6 4 2 3 1 2 2 3 4 1 3\n", "57 22 40\n100 99 89 57 37 82 12 100 4 30 23 4 63 33 71 16 88 13 75 32 53 46 54 26 60 41 34 5 83 63 71 46 5 46 29 16 81 74 84 86 81 19 36 21 42 70 49 28 34 37 29 22 24 18 52 48 66\n50 28 4 30 20 4 -1 5 6 19 12 1 24 15 5 24 7 -1 15 9 13 2 -1 5 6 24 15 10 10 7 9 5 17 1 23 20 8 -1 10 28 3 11 24 20 3 10 3 8 1 7 6 1 2 -1 23 6 2\n", "86 152 36\n84 44 92 12 39 24 70 73 17 43 50 59 9 89 87 67 80 35 7 49 6 23 1 19 2 70 40 84 4 28 18 60 1 97 3 76 69 5 13 26 55 27 21 62 17 1 6 40 55 69 16 56 13 55 20 72 35 13 38 24 14 73 73 92 75 46 92 39 22 86 0 70 12 95 48 40 37 69 4 83 42 9 2 63 66 56\n16 5 2 16 -1 21 11 -1 0 48 -1 17 -1 -1 2 12 20 34 41 12 30 3 -1 31 42 45 26 30 34 29 -1 3 18 16 19 38 2 7 -1 38 28 -1 18 24 3 41 16 1 46 18 8 12 6 34 8 -1 -1 3 -1 3 3 6 11 -1 13 -1 1 11 12 -1 2 4 55 17 -1 -1 -1 16 7 -1 15 -1 4 23 38 2\n", "11 6 2\n40 64 95 26 88 65 97 14 0 19 20\n6 4 2 3 1 2 3 3 4 1 3\n"], "output": ["0.000000000\n", "0.978583808\n", "0.000000012\n", "0.337088638\n", "0.879421934\n", "0.003786297\n", "0.970576879\n", "0.000000004\n", "0.220000000\n", "0.998494084\n", "0.968076497\n", "1.000000000\n", "0.300000000\n", "0.000000008\n", "0.296305584\n", "0.882391219\n", "0.005401936\n", "0.265000000\n", "0.999973109\n", "0.160000000\n", "0.000000002\n", "0.880369938\n", "0.002761148\n", "0.418529527\n", "0.421982789\n", "0.962371844\n", "0.007381475\n", "0.007913924\n", "0.000000000\n", "0.000000000\n", "0.000000000\n", "0.000000000\n", "0.000000000\n", "1.000000000\n", "0.000000000\n", "0.000000000\n", "0.000000000\n", "0.000000000\n", "0.970576879\n", "0.968076497\n", "1.000000000\n", "1.000000000\n", "0.000000000\n", "0.000000000\n", "0.000000000\n", "0.296305584\n", "0.970576879\n", "0.968076497\n", "1.000000000\n", "0.000000000\n", "0.000000000\n", "0.000000000\n", "0.000000002\n", "0.968076497\n", "0.000000000\n", "0.000000000\n", "0.000000000\n", "0.421982789\n", "0.962371844\n", "0.000000000\n", "0.421982789\n"]}, "short_description": "1. One-sentence summary:\nCompute the probability that a multi\u2010stage stochastic process reaches a certain cumulative threshold by dynamically tracking and combining partial success probabilities.\n\n2. Core algorithmic approach:\nNested dynamic programming over discrete states, augmented by probability convolutions and 2D prefix\u2010sum accumulation to efficiently aggregate outcomes.\n\n3. Reusable components:\n- A sparse\u2010state DP update using a dictionary (defaultdict) keyed by tuples to represent and propagate probability mass across discrete state dimensions.\n- Convolution of two probability arrays (`r`) via elementwise shifts and linear combination to simulate the effect of probabilistic trials.\n- 2D in\u2010place prefix\u2010sum folding over a matrix (`y`) to accumulate counts (or probabilities) of all states satisfying a threshold condition."}
{"name": "518_D. Ilya and Escalator", "description": "Ilya got tired of sports programming, left university and got a job in the subway. He was given the task to determine the escalator load factor. \n\nLet's assume that n people stand in the queue for the escalator. At each second one of the two following possibilities takes place: either the first person in the queue enters the escalator with probability p, or the first person in the queue doesn't move with probability (1 - p), paralyzed by his fear of escalators and making the whole queue wait behind him.\n\nFormally speaking, the i-th person in the queue cannot enter the escalator until people with indices from 1 to i - 1 inclusive enter it. In one second only one person can enter the escalator. The escalator is infinite, so if a person enters it, he never leaves it, that is he will be standing on the escalator at any following second. Ilya needs to count the expected value of the number of people standing on the escalator after t seconds. \n\nYour task is to help him solve this complicated task.\n\nInput\n\nThe first line of the input contains three numbers n, p, t (1 \u2264 n, t \u2264 2000, 0 \u2264 p \u2264 1). Numbers n and t are integers, number p is real, given with exactly two digits after the decimal point.\n\nOutput\n\nPrint a single real number \u2014 the expected number of people who will be standing on the escalator after t seconds. The absolute or relative error mustn't exceed 10 - 6.\n\nExamples\n\nInput\n\n1 0.50 1\n\n\nOutput\n\n0.5\n\n\nInput\n\n1 0.50 4\n\n\nOutput\n\n0.9375\n\n\nInput\n\n4 0.20 2\n\n\nOutput\n\n0.4", "solution": "import sys\n\nn, p, t = map(str, sys.stdin.readline().split())\nn = int(n)\np = float(p)\nt = int(t)\n\ndef CC(nn,k):\n    tmp = n\n    t = max(nn - k, k)\n    for i in range(1, min(nn - k, k) + 1):\n        tmp = tmp * (t + i) * (1 - p) / i\n    if k > nn - k:\n        tmp = tmp * pow(1-p,k + k - nn)\n    return tmp\n\ndef C(n, k):\n    tmp = 1\n    if n - k > k:\n        tmp = tmp * pow(1 - p, n - k - k)\n    else:\n        tmp = tmp * pow(p, k + k - n)\n    t = max(n - k, k)\n    for i in range(1, min(n - k, k) + 1):\n        tmp = tmp * (t + i) * p * (1 - p) / i\n\n    return tmp\n\n\nif n >= t:\n    print(t * p)\nelif p != 1 and p != 0:\n    a = 0\n    b = 0\n    for i in range(n):\n        q = C(t, i)\n        a = a + q * i\n        b = b + q\n    a = a + (1 - b) * n\n    print(a)\n    b = n\n    for i in range(t - n):\n        b = b + CC(i + 1,n + i)\n    b = b * pow(p,n)\n    #print(a + b)\nelse:\n    if p == 1:\n        print(n)\n    else:\n        print(0)\n", "difficulty": 10, "public_tests": {"input": ["1 0.50 1\n", "4 0.20 2\n", "1 0.50 4\n"], "output": ["0.500000000000\n", "0.400000000000\n", "0.937500000000\n"]}, "private_tests": {"input": ["4 0.20 2\n", "1 0.01 2000\n", "87 0.95 156\n", "2000 0.01 234\n", "211 0.78 379\n", "1 0.50 4\n", "2000 1.00 2000\n", "639 0.81 1150\n", "300 0.99 1000\n", "539 0.54 970\n", "415 0.72 747\n", "2000 0.99 2000\n", "400 0.96 1754\n", "100 0.01 53\n", "2000 0.93 100\n", "2000 0.01 2000\n", "132 0.34 241\n", "2000 0.61 2000\n", "559 0.92 1006\n", "1400 0.02 200\n", "1 0.50 1\n", "1000 0.90 1733\n", "2000 0.00 2000\n", "654 0.67 999\n", "300 0.05 55\n", "984 0.19 1565\n", "818 0.99 1472\n", "470 0.74 846\n", "246 0.98 442\n", "417 0.57 742\n", "439 0.83 790\n", "100 1.00 200\n", "1 1.00 1\n", "659 0.97 1186\n", "887 0.69 1596\n"], "output": ["0.400000000000\n", "0.999999998136\n", "87.000000000000\n", "2.340000000000\n", "211.000000000000\n", "0.937500000000\n", "2000.000000000000\n", "639.000000000000\n", "300.000000000000\n", "522.459296616033\n", "415.000000000000\n", "1980.000000000000\n", "400.000000000000\n", "0.530000000000\n", "93.000000000000\n", "20.000000000000\n", "81.939999999978\n", "1220.000000000000\n", "559.000000000000\n", "4.000000000000\n", "0.500000000000\n", "1000.000000000000\n", "0.000000000000\n", "652.821925126206\n", "2.750000000000\n", "297.350000000000\n", "818.000000000000\n", "470.000000000000\n", "246.000000000000\n", "414.074442142062\n", "439.000000000000\n", "100.000000000000\n", "1.000000000000\n", "659.000000000000\n", "887.000000000000\n"]}, "generated_tests": {"input": ["87 0.95 48\n", "1 0.50 7\n", "236 0.54 970\n", "415 0.72 1378\n", "420 0.96 1754\n", "101 0.01 53\n", "119 0.34 241\n", "2000 0.61 1608\n", "1 0.50 2\n", "974 0.67 999\n", "300 0.05 5\n", "818 0.99 1891\n", "246 0.98 462\n", "1 0.50 14\n", "87 0.95 41\n", "2 0.50 7\n", "297 0.54 970\n", "1 0.50 12\n", "297 0.54 506\n", "1378 0.67 819\n", "1 0.50 9\n", "297 0.54 175\n", "1378 0.67 1291\n", "1 0.50 6\n", "15 0.54 175\n", "1378 0.67 450\n", "15 0.54 4\n", "238 0.67 450\n", "8 0.20 2\n", "2000 0.01 19\n", "2 0.50 4\n", "979 0.81 1150\n", "305 0.54 970\n", "195 0.72 747\n", "400 0.96 36\n", "100 0.01 10\n", "2000 0.93 110\n", "132 0.34 200\n", "1400 0.02 75\n", "654 0.67 1204\n", "300 0.05 102\n", "984 0.19 6\n", "806 0.99 1472\n", "246 0.98 30\n", "2 0.50 1\n", "159 0.54 970\n", "183 0.34 241\n", "1 0.50 10\n", "300 0.05 1\n", "912 0.99 1891\n", "255 0.98 462\n", "2 0.50 14\n", "4 0.50 7\n", "1378 0.67 999\n", "55 0.95 41\n", "41 0.95 41\n"], "output": ["45.6\n", "0.9921875\n", "235.99999999999991\n", "415.0000000000001\n", "420.0000000000004\n", "0.5299999999999998\n", "81.93999935816343\n", "980.8800000000005\n", "0.75\n", "669.3299999999989\n", "0.24999999999999994\n", "818.0\n", "245.99999999999994\n", "0.99993896484375\n", "38.949999999999996\n", "1.9296875\n", "297.0\n", "0.999755859375\n", "273.17303666522014\n", "548.7299999999993\n", "0.998046875\n", "94.49999999999997\n", "864.9699999999999\n", "0.984375\n", "14.999999999999996\n", "301.50000000000006\n", "2.1599999999999997\n", "237.9999999995493\n", "0.4000000000000001\n", "0.18999999999999997\n", "1.625\n", "931.4996408243269\n", "304.9999999999998\n", "194.99999999999997\n", "34.559999999999995\n", "0.09999999999999998\n", "102.3\n", "67.99999999999923\n", "1.4999999999999967\n", "654.0000000000003\n", "5.099999999999977\n", "1.1400000000000008\n", "805.9999999999998\n", "29.4\n", "0.5\n", "158.99999999999994\n", "81.9399999999989\n", "0.9990234375\n", "0.05\n", "911.9999999999997\n", "254.99999999999991\n", "1.9990234375\n", "3.203125\n", "669.3299999999989\n", "38.949999999999996\n", "38.949999999999996\n"]}, "short_description": "1. One-sentence summary:  \n   The solution computes a capped expected count of \u201csuccesses\u201d over a fixed number of trials with a given per-trial success probability, handling both the truncated range and the tail beyond that range.\n\n2. Core algorithmic approach:  \n   Direct computation of expectations by summing weighted binomial probabilities (i.e. iterating over possible success counts and using multiplicative updates to evaluate C(n, k)\u00b7p^k\u00b7(1\u2013p)^(n\u2013k)).\n\n3. Reusable components:  \n   \u2022 A numerically stable routine for computing weighted binomial probabilities C(n, k)\u00b7p^k\u00b7(1\u2013p)^(n\u2013k) by iterative multiplication rather than factorials.  \n   \u2022 A pattern for computing expectations of a capped random variable by summing k\u00b7Pr(X=k) over the feasible range and adding the cap times the tail probability.  \n   \u2022 A combinatorial tail-adjustment function (CC) that accumulates additional probabilities beyond a certain cutoff using multiplicative updates."}
{"name": "817_B. Makes And The Product", "description": "After returning from the army Makes received a gift \u2014 an array a consisting of n positive integer numbers. He hadn't been solving problems for a long time, so he became interested to answer a particular question: how many triples of indices (i, j, k) (i < j < k), such that ai\u00b7aj\u00b7ak is minimum possible, are there in the array? Help him with it!\n\nInput\n\nThe first line of input contains a positive integer number n (3 \u2264 n \u2264 105) \u2014 the number of elements in array a. The second line contains n positive integer numbers ai (1 \u2264 ai \u2264 109) \u2014 the elements of a given array.\n\nOutput\n\nPrint one number \u2014 the quantity of triples (i, j, k) such that i, j and k are pairwise distinct and ai\u00b7aj\u00b7ak is minimum possible.\n\nExamples\n\nInput\n\n4\n1 1 1 1\n\n\nOutput\n\n4\n\n\nInput\n\n5\n1 3 2 3 4\n\n\nOutput\n\n2\n\n\nInput\n\n6\n1 3 3 1 3 2\n\n\nOutput\n\n1\n\nNote\n\nIn the first example Makes always chooses three ones out of four, and the number of ways to choose them is 4.\n\nIn the second example a triple of numbers (1, 2, 3) is chosen (numbers, not indices). Since there are two ways to choose an element 3, then the answer is 2.\n\nIn the third example a triple of numbers (1, 1, 2) is chosen, and there's only one way to choose indices.", "solution": "n=int(input())\na=list(map(int,(input().split(' '))))\na=sorted(a)\na.append(0)\nans=1\nt=0\nwhile a[3+t]==a[2]:t=t+1\nif a[3]==a[0]:ans=(t+3)*(t+2)*(t+1)/6\nelif a[3]==a[1]:ans=(t+2)*(t+1)/2\nelif a[3]==a[2]:ans=t+1\nprint(int(ans))\n", "difficulty": 8, "public_tests": {"input": ["5\n1 3 2 3 4\n", "6\n1 3 3 1 3 2\n", "4\n1 1 1 1\n"], "output": ["2\n", "1\n", "4\n"]}, "private_tests": {"input": ["4\n1 1 3 3\n", "3\n5 9 5\n", "9\n10 10 4 10 7 9 6 7 3\n", "6\n2 2 2 1 2 2\n", "9\n2 2 3 3 3 3 3 3 3\n", "5\n9 10 10 3 8\n", "10\n1 2 1 2 3 2 3 2 2 2\n", "8\n3 2 2 5 2 2 1 2\n", "3\n1 3 1\n", "3\n3 1 3\n", "6\n1 2 2 2 3 3\n", "5\n3 4 4 4 5\n", "5\n1 2 3 3 3\n", "6\n1 2 2 2 4 5\n", "8\n1 1 2 2 2 3 3 3\n", "5\n1 1 2 2 3\n", "4\n33554432 33554432 67108864 33554432\n", "3\n1000000000 1000000000 1000000000\n", "3\n1 2 2\n", "4\n1 2 2 2\n", "5\n2 9 5 10 5\n", "5\n1 1 2 2 2\n", "6\n3 2 8 2 5 3\n", "3\n1 1 2\n", "6\n1 2 2 2 5 6\n", "10\n2 2 2 2 2 1 2 2 2 2\n", "6\n1 2 2 2 2 3\n", "10\n9 6 4 7 1 8 9 5 9 4\n", "6\n2 2 3 3 3 3\n", "9\n7 1 9 6 6 8 3 1 3\n", "3\n1 2 3\n", "5\n1 2 2 2 2\n", "3\n7 6 7\n", "5\n6 3 7 6 3\n", "5\n1 2 3 2 3\n", "7\n2 2 2 3 3 3 1\n", "4\n5 7 2 7\n", "10\n1 2 2 2 2 2 2 2 2 2\n", "6\n1 2 2 3 3 4\n", "3\n2 1 2\n", "6\n1 2 2 2 2 2\n", "4\n1 1 2 2\n", "4\n1 2 2 3\n", "11\n1 2 2 2 2 2 2 2 2 2 2\n"], "output": ["2\n", "1\n", "1\n", "10\n", "7\n", "1\n", "6\n", "10\n", "1\n", "1\n", "3\n", "3\n", "3\n", "3\n", "3\n", "2\n", "1\n", "1\n", "1\n", "3\n", "1\n", "3\n", "2\n", "1\n", "3\n", "36\n", "6\n", "1\n", "4\n", "2\n", "1\n", "6\n", "1\n", "2\n", "1\n", "3\n", "2\n", "36\n", "1\n", "1\n", "10\n", "2\n", "1\n", "45\n"]}, "generated_tests": {"input": ["4\n2 1 3 3\n", "3\n9 9 5\n", "6\n2 2 3 1 2 2\n", "8\n1 1 2 2 2 3 3 2\n", "5\n1 2 2 3 2\n", "6\n2 2 2 2 2 3\n", "10\n1 2 2 2 2 2 2 2 2 1\n", "11\n1 2 2 2 2 2 2 2 2 2 4\n", "10\n1 2 2 2 3 2 2 2 2 2\n", "10\n1 2 2 2 3 3 2 2 2 2\n", "9\n7 10 4 10 7 9 6 7 3\n", "9\n2 2 3 3 3 5 3 3 3\n", "5\n13 10 10 3 8\n", "10\n1 2 1 2 4 2 3 2 2 2\n", "8\n3 2 2 5 4 2 1 2\n", "3\n1 3 2\n", "3\n3 2 3\n", "5\n3 4 4 5 5\n", "5\n1 2 3 3 2\n", "5\n1 1 4 2 3\n", "4\n33554432 9657327 67108864 33554432\n", "4\n2 2 2 2\n", "5\n2 9 5 2 5\n", "6\n3 2 8 2 8 3\n", "3\n1 1 4\n", "6\n1 2 2 2 9 6\n", "10\n9 6 4 7 1 6 9 5 9 4\n", "6\n2 2 3 6 3 3\n", "9\n7 1 9 6 6 8 5 1 3\n", "5\n2 2 2 3 2\n", "3\n7 6 8\n", "5\n1 1 3 2 3\n", "7\n2 4 2 3 3 3 1\n", "4\n5 7 1 7\n", "6\n1 2 4 3 3 4\n", "6\n1 2 2 2 3 2\n", "4\n1 1 2 3\n", "4\n1 3 2 3\n", "5\n1 3 2 2 4\n", "4\n2 1 1 1\n", "3\n10 9 5\n", "9\n7 10 4 5 7 9 6 7 3\n", "6\n2 2 3 1 4 2\n", "9\n2 2 1 3 3 5 3 3 3\n", "5\n13 10 15 3 8\n", "10\n1 1 1 2 4 2 3 2 2 2\n", "8\n3 3 2 5 4 2 1 2\n", "3\n5 2 3\n", "5\n5 4 4 5 5\n", "8\n1 1 2 2 2 4 3 2\n", "4\n33554432 9657327 67108864 61220571\n", "5\n1 2 2 1 2\n", "6\n2 2 8 2 8 3\n", "3\n1 1 5\n", "6\n1 4 2 2 9 6\n", "6\n2 2 2 2 2 5\n", "10\n9 6 4 7 1 6 9 5 9 1\n", "6\n2 2 3 6 6 3\n", "9\n7 2 9 6 6 8 5 1 3\n", "5\n2 2 4 3 2\n", "3\n10 6 8\n", "5\n1 1 6 2 3\n", "7\n2 4 2 3 3 3 2\n", "4\n8 7 2 7\n", "6\n1 3 4 3 3 4\n", "6\n1 2 2 2 5 2\n", "11\n1 2 1 2 2 2 2 2 2 2 4\n", "5\n1 3 2 2 1\n", "4\n3 1 1 1\n", "3\n13 9 5\n", "9\n7 10 4 5 10 9 6 7 3\n", "6\n2 2 3 1 4 1\n", "9\n1 2 1 3 3 5 3 3 3\n", "5\n13 10 15 2 8\n", "10\n1 1 1 2 8 2 3 2 2 2\n", "8\n3 3 2 5 4 1 1 2\n", "3\n4 2 3\n", "5\n8 4 4 5 5\n", "4\n33554432 9657327 117245990 61220571\n", "3\n1 1 7\n", "6\n1 4 2 4 9 6\n", "6\n1 2 2 2 2 5\n", "10\n9 6 4 7 1 6 9 5 9 2\n", "6\n3 2 3 6 6 3\n", "9\n7 2 9 4 6 8 5 1 3\n", "5\n2 2 4 3 3\n", "3\n8 6 8\n", "5\n1 1 6 3 3\n", "7\n2 4 4 3 3 3 2\n", "4\n13 7 2 7\n", "6\n2 3 4 3 3 4\n"], "output": ["2\n", "1\n", "6\n", "4\n", "3\n", "10\n", "8\n", "36\n", "28\n", "21\n", "1\n", "6\n", "2\n", "6\n", "6\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "4\n", "2\n", "2\n", "1\n", "3\n", "1\n", "3\n", "1\n", "4\n", "1\n", "1\n", "1\n", "2\n", "2\n", "6\n", "1\n", "2\n", "1\n", "1\n", "1\n", "1\n", "3\n", "1\n", "1\n", "1\n", "3\n", "1\n", "3\n", "4\n", "1\n", "3\n", "1\n", "1\n", "1\n", "10\n", "1\n", "2\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "3\n", "6\n", "8\n", "2\n", "1\n", "1\n", "1\n", "2\n", "1\n", "1\n", "1\n", "2\n", "1\n", "2\n", "1\n", "1\n", "2\n", "6\n", "1\n", "3\n", "1\n", "2\n", "1\n", "2\n", "3\n", "1\n", "3\n"]}, "short_description": "1. One-sentence summary  \nCompute the number of ways to choose a fixed-size subset from a multiset by sorting the elements, identifying how many copies of the \u201cthreshold\u201d value appear, and then applying appropriate binomial\u2010coefficient formulas.\n\n2. Core algorithmic approach  \n\u2013 Sort the input list  \n\u2013 Count how many elements equal the \u201cboundary\u201d element in the sorted order  \n\u2013 Use direct combinatorial (binomial coefficient) formulas based on the multiplicity cases\n\n3. Reusable components  \n\u2013 Counting duplicates around a pivot in a sorted array (i.e. find the run length of equal elements)  \n\u2013 Precomputed or on-the-fly calculation of small binomial coefficients C(n, k) for fixed k  \n\u2013 Case analysis driven by comparing pivot with earlier sorted positions to select the correct combinatorial formula"}
{"name": "28_C. Bath Queue", "description": "There are n students living in the campus. Every morning all students wake up at the same time and go to wash. There are m rooms with wash basins. The i-th of these rooms contains ai wash basins. Every student independently select one the rooms with equal probability and goes to it. After all students selected their rooms, students in each room divide into queues by the number of wash basins so that the size of the largest queue is the least possible. Calculate the expected value of the size of the largest queue among all rooms.\n\nInput\n\nThe first line contains two positive integers n and m (1 \u2264 n, m \u2264 50) \u2014 the amount of students and the amount of rooms. The second line contains m integers a1, a2, ... , am (1 \u2264 ai \u2264 50). ai means the amount of wash basins in the i-th room.\n\nOutput\n\nOutput single number: the expected value of the size of the largest queue. Your answer must have an absolute or relative error less than 10 - 9.\n\nExamples\n\nInput\n\n1 1\n2\n\n\nOutput\n\n1.00000000000000000000\n\n\nInput\n\n2 2\n1 1\n\n\nOutput\n\n1.50000000000000000000\n\n\nInput\n\n2 3\n1 1 1\n\n\nOutput\n\n1.33333333333333350000\n\n\nInput\n\n7 5\n1 1 2 3 1\n\n\nOutput\n\n2.50216960000000070000", "solution": "import sys\n\nMAX_N = 55\n\nline = list(map(int, sys.stdin.readline().split(\" \")))\nstudc = line[0]\nroomc = line[1]\n\narr = list(map(int, sys.stdin.readline().split(\" \")))\n\nncr = [[0 for i in range(MAX_N)] for j in range(MAX_N)]\nncr[0][0] = 1\nfor i in range(1, MAX_N):\n    ncr[i][0] = 1;\n    for j in range(1, MAX_N):\n        ncr[i][j] = ncr[i - 1][j - 1] + ncr[i - 1][j]\n\nupto = [0 for i in range(MAX_N)] # upto[i] of ways to pick such that no queue exceeds i people\nfor i in range(1, MAX_N):\n    dp = [[0 for j in range(MAX_N)] for k in range(MAX_N)]\n    dp[0][0] = 1\n    for j in range(roomc):\n        for k in range(0, min(studc, i * arr[j]) + 1):\n            for l in range(0, studc - k + 1):\n                dp[j + 1][k + l] += dp[j][l] * ncr[studc - l][k]\n    \n    upto[i] = dp[roomc][studc]\n    \nans = 0;\nfor i in range(1, MAX_N):\n    ans += (upto[i] - upto[i - 1]) * i\n\nprint('%.12f' % (ans / (roomc ** studc)))\n", "difficulty": 9, "public_tests": {"input": ["2 2\n1 1\n", "2 3\n1 1 1\n", "7 5\n1 1 2 3 1\n", "1 1\n2\n"], "output": ["1.500000000000000\n", "1.333333333333333\n", "2.502169600000002\n", "1.000000000000000\n"]}, "private_tests": {"input": ["35 40\n12 1 4 8 1 9 1 11 1 1 8 8 16 1 6 5 3 1 6 4 6 2 4 6 2 1 1 16 2 2 3 1 1 2 2 3 8 12 1 4\n", "7 4\n1 2 3 4\n", "1 50\n9 1 1 4 1 9 7 4 3 10 1 7 4 7 2 5 13 2 3 3 2 1 2 1 1 7 7 5 2 6 1 8 2 6 2 15 2 3 1 2 4 8 6 2 6 11 1 2 1 1\n", "50 50\n50 48 38 45 50 48 38 48 49 49 50 50 49 50 38 48 45 40 43 49 48 43 50 50 50 42 47 50 49 34 48 47 48 50 50 50 49 47 48 49 48 48 50 39 45 47 48 47 45 50\n", "1 1\n50\n", "50 50\n2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "19 17\n50 46 38 48 41 41 40 45 47 50 49 33 46 44 46 48 36\n", "50 1\n27\n", "5 5\n5 5 5 5 5\n", "50 1\n4\n", "50 50\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 49 49 49 50 49 50 50 50 50 48 50 49 50 50 50 50 48 50 50 50 49 50 50 50 50 50 50 50 50 50 50 49 50 50\n", "12 34\n47 50 49 45 48 50 49 45 50 48 43 49 50 47 49 49 50 50 45 43 45 44 50 47 50 49 47 49 49 42 50 50 50 49\n", "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10 4\n8 4 7 6\n", "44 5\n40 48 45 43 17\n", "50 50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n", "1 50\n47 24 49 50 4 21 42 22 34 48 45 15 31 18 12 10 4 45 45 42 49 13 12 9 7 5 30 18 22 50 15 16 25 18 5 41 3 26 19 18 22 5 8 10 16 50 43 44 6 43\n", "10 6\n1 1 1 1 1 1\n", "20 35\n48 40 49 37 36 44 48 42 37 42 18 44 47 47 41 45 49 47 47 50 16 24 42 24 36 37 45 48 36 43 44 25 34 30 42\n", "50 50\n3 12 1 3 6 2 5 14 2 4 4 1 6 9 4 2 3 19 7 6 4 1 7 4 1 3 6 3 2 4 4 1 6 1 3 1 1 4 1 6 1 2 2 4 12 12 1 5 5 2\n", "50 1\n48\n", "3 49\n4 2 9 21 22 25 6 9 15 10 37 3 8 6 14 1 3 3 18 1 9 11 8 5 20 21 10 25 35 16 14 18 2 5 12 6 9 8 3 6 19 18 1 13 12 33 4 2 16\n", "50 50\n21 35 15 42 44 1 50 4 26 21 43 41 50 33 47 3 21 14 33 34 43 44 16 41 35 27 3 4 7 14 15 35 27 36 46 13 3 48 32 20 15 33 38 36 39 22 45 7 16 50\n", "20 20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "50 50\n2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1\n", "1 50\n46 45 44 49 48 48 47 42 48 47 47 48 39 47 48 49 50 48 50 46 48 46 50 47 45 50 41 49 39 44 46 47 43 47 42 47 49 40 49 50 50 50 48 50 48 47 49 46 46 42\n", "3 49\n4 2 9 21 22 25 6 9 15 10 37 3 8 6 14 1 3 3 18 1 9 11 8 5 20 21 10 25 35 16 14 18 2 5 12 6 9 8 3 6 19 18 1 13 12 33 4 2 16\n", "50 50\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "20 20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"], "output": ["2.659784922284758\n", "2.117126464843750\n", "1.000000000000000\n", "1.000000000000001\n", "1.000000000000000\n", "3.714033841551387\n", "3.805454679815829\n", "1.000000000000000\n", "2.000000000000000\n", "1.000000000000000\n", "13.000000000000000\n", "1.000000000000001\n", "1.000000000000000\n", "3.492989809072452\n", "1.082107543945312\n", "1.001215336210412\n", "1.441589380500519\n", "1.000000000000000\n", "3.444746696070212\n", "0.999999999999999\n", "2.836144035860763\n", "2.000000000000000\n", "1.003748438150770\n", "1.408980032771846\n", "3.231236843797547\n", "3.714033841551387\n", "1.000000000000000\n", "1.003748438150770\n", "1.000000000000001\n", "3.231236843797547\n"]}, "generated_tests": {"input": ["35 40\n12 1 4 8 1 9 1 11 1 1 8 6 16 1 6 5 3 1 6 4 6 2 4 6 2 1 1 16 2 2 3 1 1 2 2 3 8 12 1 4\n", "3 4\n1 2 3 4\n", "1 50\n9 1 1 4 1 9 7 4 3 10 1 7 4 7 2 5 13 2 3 3 2 1 2 1 1 7 7 5 2 6 1 8 2 6 2 8 2 3 1 2 4 8 6 2 6 11 1 2 1 1\n", "50 50\n2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 2 1 2 1 1\n", "5 5\n5 5 3 5 5\n", "50 1\n7\n", "44 5\n40 48 45 31 17\n", "50 50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 71 46 47 48 49 50\n", "10 6\n1 1 1 1 1 2\n", "50 50\n3 12 1 3 6 2 5 14 2 4 4 1 6 9 4 2 3 19 7 6 4 1 7 4 1 3 6 3 2 4 4 1 6 1 3 1 1 4 1 6 1 2 2 4 12 12 1 5 1 2\n", "3 49\n4 2 9 21 22 25 6 9 15 10 37 3 8 6 14 1 3 3 18 1 9 11 8 5 20 21 10 25 35 16 14 18 2 5 12 6 9 8 3 6 19 18 1 13 12 39 4 2 16\n", "50 50\n21 35 15 42 44 1 50 4 26 21 43 41 50 33 47 3 33 14 33 34 43 44 16 41 35 27 3 4 7 14 15 35 27 36 46 13 3 48 32 20 15 33 38 36 39 22 45 7 16 50\n", "20 20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1\n", "7 5\n1 1 3 3 1\n", "6 4\n1 2 3 4\n", "50 50\n2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 2 1 1 2 1 2 1 1\n", "32 1\n7\n", "50 50\n50 50 50 50 50 50 50 50 49 50 50 50 50 50 50 50 49 49 49 50 49 50 50 50 50 48 50 49 50 50 50 50 48 50 50 12 49 50 50 50 50 50 50 50 50 50 50 49 50 50\n", "44 5\n40 48 45 37 17\n", "50 50\n3 12 1 3 6 4 5 14 2 4 4 1 6 9 4 2 3 19 7 6 4 1 7 4 1 3 6 3 2 4 4 1 6 1 3 1 1 4 1 6 1 2 2 4 12 12 1 5 1 2\n", "20 20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2\n", "14 5\n1 1 3 3 1\n", "3 1\n2\n", "50 50\n3 12 1 3 6 4 5 14 2 4 4 1 6 9 4 2 3 19 7 6 4 1 7 4 1 3 6 3 2 4 4 1 6 1 2 1 1 4 1 6 1 2 2 4 12 12 1 5 1 2\n", "14 5\n1 1 3 3 2\n", "50 50\n50 48 38 45 50 48 38 48 49 49 50 50 49 50 38 48 45 40 43 49 48 43 50 50 50 42 47 50 49 34 48 47 48 50 50 50 15 47 48 49 48 48 50 39 45 47 48 47 45 50\n", "1 1\n81\n", "19 17\n50 46 38 48 41 41 40 45 47 50 49 33 46 44 43 48 36\n", "50 50\n50 50 50 50 50 50 50 50 49 50 50 50 50 50 50 50 49 49 49 50 49 50 50 50 50 48 50 49 50 50 50 50 48 50 50 50 49 50 50 50 50 50 50 50 50 50 50 49 50 50\n", "1 50\n47 24 49 50 4 21 42 22 34 48 45 15 31 18 12 10 4 45 45 42 49 13 12 9 7 5 30 18 22 50 13 16 25 18 5 41 3 26 19 18 22 5 8 10 16 50 43 44 6 43\n", "20 35\n48 40 49 37 36 44 48 42 37 42 18 44 47 47 41 45 49 47 47 50 16 24 42 24 36 37 45 48 53 43 44 25 34 30 42\n", "50 1\n68\n", "1 50\n46 45 44 49 48 48 47 42 48 47 47 48 39 47 48 49 50 48 50 46 48 46 50 47 45 50 41 49 39 44 46 47 43 47 42 47 81 40 49 50 50 50 48 50 48 47 49 46 46 42\n", "3 49\n4 2 9 21 22 25 6 9 15 10 37 3 8 6 14 1 3 3 18 1 9 11 8 5 20 21 10 7 35 16 14 18 2 5 12 6 9 8 3 6 19 18 1 13 12 33 4 2 16\n", "50 50\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 24 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "20 20\n1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "2 1\n2\n", "1 50\n9 1 1 4 1 9 7 4 3 10 1 7 4 7 2 5 13 2 3 3 2 1 2 1 1 7 7 5 2 6 1 8 2 6 2 8 2 3 1 2 4 8 6 2 6 11 1 2 2 1\n", "50 50\n50 48 38 45 50 53 38 48 49 49 50 50 49 50 38 48 45 40 43 49 48 43 50 50 50 42 47 50 49 34 48 47 48 50 50 50 15 47 48 49 48 48 50 39 45 47 48 47 45 50\n", "2 1\n81\n", "19 17\n73 46 38 48 41 41 40 45 47 50 49 33 46 44 43 48 36\n", "1 50\n47 24 49 73 4 21 42 22 34 48 45 15 31 18 12 10 4 45 45 42 49 13 12 9 7 5 30 18 22 50 13 16 25 18 5 41 3 26 19 18 22 5 8 10 16 50 43 44 6 43\n", "50 1\n84\n", "50 50\n21 35 15 42 44 1 50 4 26 21 43 41 50 33 47 3 33 14 33 34 43 44 16 41 35 27 3 4 7 14 15 35 27 36 46 13 3 48 32 20 15 33 38 36 39 22 45 7 31 50\n", "1 50\n46 45 44 49 48 48 47 42 48 47 47 48 39 47 48 49 50 48 50 46 48 46 50 47 45 50 41 49 39 44 46 47 43 47 42 47 81 40 49 50 50 50 48 50 48 47 49 81 46 42\n", "3 49\n4 2 9 21 22 49 6 9 15 10 37 3 8 6 14 1 3 3 18 1 9 11 8 5 20 21 10 7 35 16 14 18 2 5 12 6 9 8 3 6 19 18 1 13 12 33 4 2 16\n", "50 50\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 24 50 50 98 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "20 20\n1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1\n", "1 50\n9 1 1 4 1 9 7 4 3 10 1 7 4 7 2 5 13 2 3 3 2 1 2 1 1 7 7 5 2 6 1 8 2 6 2 8 2 3 1 2 4 8 6 2 6 11 1 2 2 2\n", "50 50\n50 63 38 45 50 53 38 48 49 49 50 50 49 50 38 48 45 40 43 49 48 43 50 50 50 42 47 50 49 34 48 47 48 50 50 50 15 47 48 49 48 48 50 39 45 47 48 47 45 50\n", "2 1\n151\n", "19 17\n73 46 38 48 41 41 40 81 47 50 49 33 46 44 43 48 36\n", "50 50\n50 50 50 50 50 50 54 50 49 50 50 50 50 50 50 50 49 49 49 50 49 50 50 50 50 48 50 49 50 50 50 50 48 50 50 12 49 50 50 50 50 50 50 50 50 50 50 49 50 50\n", "1 50\n47 24 49 73 4 21 42 22 34 48 45 15 31 18 12 10 4 45 45 42 49 13 4 9 7 5 30 18 22 50 13 16 25 18 5 41 3 26 19 18 22 5 8 10 16 50 43 44 6 43\n", "50 50\n21 35 15 42 44 1 50 4 26 21 43 41 50 33 47 3 33 14 33 34 43 44 16 41 52 27 3 4 7 14 15 35 27 36 46 13 3 48 32 20 15 33 38 36 39 22 45 7 31 50\n", "1 50\n46 45 44 49 48 48 47 42 48 47 47 48 39 47 48 49 50 48 50 46 48 46 50 47 45 50 41 49 39 44 46 47 43 47 42 47 81 13 49 50 50 50 48 50 48 47 49 81 46 42\n", "3 49\n4 2 9 21 22 49 6 9 15 10 37 3 8 6 14 1 3 3 18 1 9 11 8 5 20 21 10 7 35 16 14 18 2 5 12 6 9 8 3 6 19 18 1 13 7 33 4 2 16\n", "50 50\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 80 50 50 50 50 50 50 50 50 24 50 50 98 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "3 1\n4\n"], "output": ["2.6597864241887\n", "1.1875000000000\n", "1.0000000000000\n", "3.6998103451900\n", "1.0067200000000\n", "8.0000000000000\n", "1.0012153362105\n", "1.4415893805005\n", "3.2840339531311\n", "2.8911024687316\n", "1.0037484381508\n", "1.4089800327718\n", "3.1962882333514\n", "2.4652416000000\n", "1.8527832031250\n", "3.6852437072895\n", "5.0000000000000\n", "1.0000000000145\n", "1.0012153362104\n", "2.8889212841771\n", "3.1594545013644\n", "4.2554422840525\n", "2.0000000000000\n", "2.8909197701963\n", "3.8256216753766\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0037484381508\n", "1.0000000000000\n", "3.1962882333514\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.4089800327718\n", "1.0000000000000\n", "1.0037484381508\n", "1.0000000000000\n", "3.1594545013644\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000000\n", "1.0000000000145\n", "1.0000000000000\n", "1.4089800327718\n", "1.0000000000000\n", "1.0037484381508\n", "1.0000000000000\n", "1.0000000000000\n"]}, "short_description": "1. One-sentence summary:  \nCompute the expected maximum \u201cload\u201d (number of items assigned to any bin) when distributing a fixed number of indistinguishable items into labeled bins with per-bin capacity constraints, by counting valid distributions and forming the distribution of the maximum load.\n\n2. Core algorithmic approach:  \nNested dynamic programming combined with combinatorial (nCr) precomputation to count, for each possible load limit i, the number of ways to assign all items so that no bin exceeds i items; then obtaining the probability mass function of the maximum load via differences and computing its expectation.\n\n3. Reusable components:  \n- nCr table precomputation (Pascal\u2019s triangle) for fast lookup of binomial coefficients  \n- DP over bins and total items: dp[bins_used][items_assigned] accumulation pattern to enforce per-bin limits  \n- \u201cPrefix\u2010difference\u201d technique on cumulative counts (upto[i] \u2013 upto[i\u20131]) to derive the exact count/probability of a maximum\u2010load value"}
{"name": "1245_E. Hyakugoku and Ladders", "description": "Hyakugoku has just retired from being the resident deity of the South Black Snail Temple in order to pursue her dream of becoming a cartoonist. She spent six months in that temple just playing \"Cat's Cradle\" so now she wants to try a different game \u2014 \"Snakes and Ladders\". Unfortunately, she already killed all the snakes, so there are only ladders left now. \n\nThe game is played on a 10 \u00d7 10 board as follows:\n\n  * At the beginning of the game, the player is at the bottom left square. \n  * The objective of the game is for the player to reach the Goal (the top left square) by following the path and climbing vertical ladders. Once the player reaches the Goal, the game ends. \n  * The path is as follows: if a square is not the end of its row, it leads to the square next to it along the direction of its row; if a square is the end of its row, it leads to the square above it. The direction of a row is determined as follows: the direction of the bottom row is to the right; the direction of any other row is opposite the direction of the row below it. See Notes section for visualization of path. \n  * During each turn, the player rolls a standard six-sided dice. Suppose that the number shown on the dice is r. If the Goal is less than r squares away on the path, the player doesn't move (but the turn is performed). Otherwise, the player advances exactly r squares along the path and then stops. If the player stops on a square with the bottom of a ladder, the player chooses whether or not to climb up that ladder. If she chooses not to climb, then she stays in that square for the beginning of the next turn. \n  * Some squares have a ladder in them. Ladders are only placed vertically \u2014 each one leads to the same square of some of the upper rows. In order for the player to climb up a ladder, after rolling the dice, she must stop at the square containing the bottom of the ladder. After using the ladder, the player will end up in the square containing the top of the ladder. She cannot leave the ladder in the middle of climbing. And if the square containing the top of the ladder also contains the bottom of another ladder, she is not allowed to use that second ladder. \n  * The numbers on the faces of the dice are 1, 2, 3, 4, 5, and 6, with each number having the same probability of being shown. \n\n\n\nPlease note that: \n\n  * it is possible for ladders to overlap, but the player cannot switch to the other ladder while in the middle of climbing the first one; \n  * it is possible for ladders to go straight to the top row, but not any higher; \n  * it is possible for two ladders to lead to the same tile; \n  * it is possible for a ladder to lead to a tile that also has a ladder, but the player will not be able to use that second ladder if she uses the first one; \n  * the player can only climb up ladders, not climb down. \n\n\n\nHyakugoku wants to finish the game as soon as possible. Thus, on each turn she chooses whether to climb the ladder or not optimally. Help her to determine the minimum expected number of turns the game will take.\n\nInput\n\nInput will consist of ten lines. The i-th line will contain 10 non-negative integers h_{i1}, h_{i2}, ..., h_{i10}. If h_{ij} is 0, then the tile at the i-th row and j-th column has no ladder. Otherwise, the ladder at that tile will have a height of h_{ij}, i.e. climbing it will lead to the tile h_{ij} rows directly above. It is guaranteed that 0 \u2264 h_{ij} < i. Also, the first number of the first line and the first number of the last line always contain 0, i.e. the Goal and the starting tile never have ladders.\n\nOutput\n\nPrint only one line containing a single floating-point number \u2014 the minimum expected number of turns Hyakugoku can take to finish the game. Your answer will be considered correct if its absolute or relative error does not exceed 10^{-6}.\n\nExamples\n\nInput\n\n\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n\n\nOutput\n\n\n33.0476190476\n\n\nInput\n\n\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 3 0 0 0 4 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 4 0 0 0\n0 0 3 0 0 0 0 0 0 0\n0 0 4 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 9\n\n\nOutput\n\n\n20.2591405923\n\n\nInput\n\n\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 6 6 6 6 6 6 0 0 0\n1 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n\n\nOutput\n\n\n15.9047592939\n\nNote\n\nA visualization of the path and the board from example 2 is as follows: <image>\n\nThe tile with an 'S' is the starting tile and the tile with an 'E' is the Goal.\n\nFor the first example, there are no ladders.\n\nFor the second example, the board looks like the one in the right part of the image (the ladders have been colored for clarity).\n\nIt is possible for ladders to overlap, as is the case with the red and yellow ladders and green and blue ladders. It is also possible for ladders to go straight to the top, as is the case with the black and blue ladders. However, it is not possible for ladders to go any higher (outside of the board). It is also possible that two ladders lead to the same tile, as is the case with the red and yellow ladders. Also, notice that the red and yellow ladders lead to the tile with the orange ladder. So if the player chooses to climb either of the red and yellow ladders, they will not be able to climb the orange ladder. Finally, notice that the green ladder passes through the starting tile of the blue ladder. The player cannot transfer from the green ladder to the blue ladder while in the middle of climbing the green ladder.", "solution": "X = [[int(a) for a in input().split()] for _ in range(10)]\nY = [(i//10, 9-i%10 if (i//10)&1 else i%10) for i in range(100)]\nZ = [[i * 10 + 9 - j if i & 1 else i * 10 + j for j in range(10)] for i in range(10)]\nE = [0] * 100\nF = [0] * 100\nfor i in range(1, 6):\n    F[i] = E[i] = (sum(E[:i]) + 6) / i\nfor i in range(6, 100):\n    F[i] = E[i] = sum(F[i-6:i])/6 + 1\n    x, y = Y[i]\n    if X[x][y]: F[i] = min(E[i], E[Z[x-X[x][y]][y]])\n\nprint(F[99])", "difficulty": 11, "public_tests": {"input": ["0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 6 6 6 6 6 6 0 0 0\n1 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 3 0 0 0 4 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 4 0 0 0\n0 0 3 0 0 0 0 0 0 0\n0 0 4 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 9\n"], "output": ["15.90475929388076714588\n", "33.04761904761904389716\n", "20.25914059228779251498\n"]}, "private_tests": {"input": ["0 0 0 0 0 0 0 0 0 0\n1 0 0 1 1 1 1 0 1 0\n2 1 0 1 0 0 0 1 0 2\n1 0 2 3 3 1 2 1 0 3\n3 4 0 1 3 1 0 2 1 4\n4 1 5 5 3 3 2 1 1 1\n3 4 3 6 2 1 0 5 1 3\n5 5 3 6 2 6 2 7 4 0\n5 0 4 7 7 2 4 3 7 6\n0 8 4 6 4 6 6 3 9 8\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 0 0 0 1\n1 2 0 0 0 0 2 2 0 0\n0 3 1 1 3 1 2 2 0 3\n4 2 4 1 1 0 3 1 1 4\n1 0 5 4 2 5 3 2 2 5\n5 5 6 4 6 5 4 3 4 0\n0 0 0 3 1 5 0 7 3 0\n1 2 0 3 1 1 0 6 3 6\n0 3 3 3 3 8 2 5 1 1\n", "0 0 0 0 0 0 0 0 0 0\n1 0 0 1 1 1 0 1 1 0\n0 1 0 0 0 1 1 0 0 2\n3 0 1 1 3 1 2 1 2 0\n3 4 0 1 0 1 2 1 0 4\n4 1 4 2 1 0 4 3 5 0\n1 4 5 5 2 4 0 0 5 5\n5 6 5 7 3 0 1 3 6 0\n5 2 3 1 4 6 5 2 0 0\n0 9 2 3 0 3 2 6 1 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 0 0 1 0 0 1 1 0\n2 1 1 0 0 2 0 1 2 2\n3 0 3 1 0 3 2 2 0 1\n0 4 3 1 2 4 1 4 2 3\n5 5 5 3 2 2 0 3 0 5\n6 2 1 0 0 6 4 6 4 1\n0 2 6 3 4 5 0 1 3 5\n0 8 4 2 1 5 0 6 0 7\n0 5 5 7 1 6 8 2 2 0\n", "0 0 0 0 0 0 0 0 0 0\n0 1 0 1 0 1 1 1 1 1\n1 0 2 2 0 2 1 1 0 2\n1 0 1 3 1 2 1 2 0 1\n0 0 0 4 4 3 3 0 0 2\n5 0 0 0 1 0 3 0 1 0\n4 4 1 5 6 6 4 5 6 5\n3 7 0 7 6 6 4 1 2 3\n7 7 1 1 1 1 1 0 3 3\n0 9 7 1 1 0 0 3 4 4\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 1 1 0 1 0 1\n2 0 0 0 2 2 0 0 0 2\n2 3 1 3 3 2 2 1 1 0\n1 2 3 1 4 2 1 3 0 4\n4 0 1 1 4 2 5 0 5 3\n1 5 2 3 3 1 4 4 3 0\n0 1 2 4 3 7 7 3 5 0\n1 5 8 6 7 5 0 5 5 1\n0 6 9 8 9 6 6 6 3 2\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 0 1 0 1 1 1 1\n1 1 0 0 0 2 2 2 2 2\n2 0 3 0 1 3 2 3 3 0\n3 3 3 1 0 2 3 2 3 1\n0 1 5 1 5 5 5 5 4 1\n2 4 4 1 3 1 4 2 5 2\n1 1 4 2 3 3 1 5 1 4\n8 6 5 8 7 8 0 7 7 3\n0 4 8 0 8 9 4 9 0 9\n", "0 0 0 0 0 0 0 0 0 0\n0 1 0 1 0 1 1 1 0 0\n2 1 2 0 2 1 1 1 0 0\n0 0 0 1 2 3 2 2 3 1\n2 3 2 4 2 0 1 4 0 2\n0 1 1 3 0 3 2 1 0 1\n6 0 5 5 1 3 0 1 4 2\n6 3 4 5 5 5 2 1 1 3\n5 0 4 6 4 1 6 3 0 2\n0 5 4 6 0 1 6 5 6 7\n", "0 0 0 0 0 0 0 0 0 0\n0 1 0 1 1 0 0 1 0 0\n2 0 1 0 0 2 1 1 0 2\n3 3 0 1 3 2 3 0 2 1\n3 1 2 4 3 2 1 3 3 1\n4 0 3 2 3 5 4 4 1 1\n5 5 6 3 3 6 4 5 0 2\n7 2 3 5 5 0 6 0 7 1\n1 7 5 8 3 2 8 5 7 3\n0 7 7 5 4 3 2 9 5 3\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 1 1 1 1 0 1\n0 1 2 0 0 2 1 0 0 1\n0 2 1 3 0 3 3 1 0 2\n1 1 2 4 1 1 4 1 4 2\n0 2 3 0 1 5 2 2 5 0\n6 0 0 4 3 6 4 0 1 5\n2 4 1 5 2 4 0 6 5 7\n2 0 5 4 1 5 1 5 6 4\n0 6 8 9 4 9 2 6 6 9\n", "0 0 0 0 0 0 0 0 0 0\n1 1 1 1 0 1 1 0 1 0\n2 0 2 0 0 2 2 0 2 2\n3 0 0 0 1 3 1 1 1 2\n1 4 3 2 3 0 1 2 4 4\n3 1 2 1 4 3 4 2 3 4\n0 4 4 4 6 2 4 0 3 0\n2 0 1 0 7 7 3 5 4 3\n8 0 7 3 7 7 1 8 5 4\n0 0 3 6 7 6 4 6 6 5\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 5 5 5 5 5 5 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 5 5 5 0 0 0 0 0 0\n3 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n", "0 0 0 0 0 0 0 0 0 0\n0 1 1 0 0 0 1 0 0 1\n1 2 2 0 0 0 0 1 0 0\n1 0 2 2 0 1 2 0 2 1\n2 3 0 2 4 0 0 2 2 2\n4 1 2 0 3 3 0 5 1 0\n3 0 6 0 0 5 4 5 2 6\n2 7 5 1 6 1 1 7 6 7\n0 5 3 7 1 7 1 7 2 8\n0 0 8 9 2 4 2 2 7 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 1 0 1 0\n0 0 0 0 1 0 0 1 2 2\n0 0 0 2 1 3 2 0 2 3\n1 4 4 1 1 3 1 0 0 4\n2 1 4 4 2 0 0 1 5 2\n6 4 1 4 3 5 4 1 2 0\n2 1 3 1 1 1 2 1 7 4\n8 2 6 6 1 2 2 7 7 8\n0 1 0 3 2 3 0 8 8 6\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 0 0 0 1 0 0\n0 0 1 0 2 0 1 2 1 0\n1 3 3 2 1 0 2 3 3 3\n1 1 0 1 3 4 2 1 3 1\n3 0 0 5 4 5 0 0 4 4\n4 5 2 1 5 0 0 0 3 3\n4 5 1 7 2 2 7 5 0 4\n6 7 8 5 0 7 5 1 5 4\n0 0 7 7 7 1 0 2 2 0\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0 1\n2 2 0 0 0 1 0 1 0 0\n3 3 3 1 1 3 2 0 2 3\n4 2 2 2 4 1 4 4 4 4\n5 0 4 4 0 2 5 4 1 0\n6 5 5 2 5 4 0 5 5 4\n5 4 7 6 1 0 0 1 6 4\n6 5 2 2 4 1 4 2 3 0\n0 7 0 0 2 4 4 9 0 9\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 9 9 9 9 9 9 9 9 9\n", "0 0 0 0 0 0 0 0 0 0\n0 1 1 0 0 1 0 0 0 0\n0 1 2 0 0 2 1 2 0 0\n3 0 2 0 0 1 2 3 3 2\n4 3 4 2 2 3 0 4 2 2\n1 2 4 1 5 2 2 3 4 1\n2 5 2 0 6 1 4 1 0 5\n1 0 6 2 0 3 0 3 0 7\n0 0 1 1 7 4 0 6 1 3\n0 1 6 6 8 1 8 2 9 0\n", "0 0 0 0 0 0 0 0 0 0\n1 1 0 1 0 0 1 0 0 0\n0 2 2 2 0 2 2 2 0 0\n2 0 0 3 2 3 2 1 0 2\n4 2 3 2 2 4 4 1 3 4\n0 2 3 0 3 0 3 5 3 5\n2 5 2 2 0 6 0 4 1 2\n5 4 6 6 7 6 1 5 3 3\n6 3 3 0 0 7 4 2 1 5\n0 6 2 3 6 8 0 8 8 8\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 1 0 0 1 0 1\n0 2 1 0 2 2 2 1 0 0\n2 3 3 0 1 0 3 3 0 0\n1 1 1 1 1 1 2 3 2 3\n2 0 2 2 1 4 1 4 0 2\n1 5 5 6 4 3 0 1 0 5\n4 5 2 0 4 4 6 1 2 4\n5 2 7 7 4 4 5 0 5 6\n0 1 3 2 1 9 4 3 4 1\n", "0 0 0 0 0 0 0 0 0 0\n0 1 0 0 0 0 1 0 1 1\n1 0 2 0 1 1 2 0 2 2\n0 0 2 1 3 1 2 2 3 3\n1 0 1 1 0 4 0 0 3 2\n5 1 3 4 0 0 1 2 4 3\n6 4 0 6 4 2 0 4 2 3\n6 4 2 5 0 4 3 3 1 0\n4 6 8 5 4 5 6 3 5 2\n0 5 7 9 9 9 2 2 7 7\n", "0 0 0 0 0 0 0 0 0 0\n1 1 1 0 0 0 1 0 1 0\n0 0 2 0 0 2 1 2 2 0\n2 0 2 0 3 0 1 3 2 2\n1 0 3 4 1 2 2 3 2 0\n1 0 1 1 4 1 5 4 2 5\n3 4 3 2 5 6 0 3 6 2\n6 4 0 4 6 2 4 7 7 7\n4 4 0 2 7 8 6 4 3 7\n0 4 1 4 5 3 8 9 5 6\n"], "output": ["8.67088121765232600069\n", "9.84637366920859058439\n", "9.41534979726746001916\n", "8.26948072861727467853\n", "9.72568693047290366849\n", "8.72394910378532273398\n", "8.83594556866638569659\n", "9.99392400951869852577\n", "8.79370282010773962611\n", "8.60921566316350705961\n", "7.71351689436088872043\n", "16.02428937655203355916\n", "9.61100302189687027976\n", "9.42190290852628997698\n", "10.76252088846644916487\n", "8.93655189839348551573\n", "7.00000000000000000000\n", "10.11234180645211289118\n", "9.63563249982875724697\n", "9.75886650772723562852\n", "8.12686901237985637181\n", "9.976210584\n"]}, "generated_tests": {"input": ["0 0 0 0 0 0 0 0 0 0\n1 0 0 1 1 1 1 0 1 0\n2 1 0 2 0 0 0 1 0 2\n1 0 2 3 3 1 2 1 0 3\n3 4 0 1 3 1 0 2 1 4\n4 1 5 5 3 3 2 1 1 1\n3 4 3 6 2 1 0 5 1 3\n5 5 3 6 2 6 2 7 4 0\n5 0 4 7 7 2 4 3 7 6\n0 8 4 6 4 6 6 3 9 8\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 0 0 0 1\n1 2 0 0 0 0 2 2 0 0\n0 3 1 1 3 1 2 2 0 3\n4 2 4 1 1 0 3 1 1 4\n1 0 5 4 2 5 3 2 2 5\n5 5 6 4 6 5 4 3 4 0\n0 0 0 3 1 5 0 7 3 0\n1 2 0 3 1 1 0 8 3 6\n0 3 3 3 3 8 2 5 1 1\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 1 1 0 1 0 1\n2 0 0 0 2 2 0 0 0 2\n2 3 1 3 3 2 2 1 1 0\n1 4 3 1 4 2 1 3 0 4\n4 0 1 1 4 2 5 0 5 3\n1 5 2 3 3 1 4 4 3 0\n0 1 2 4 3 7 7 3 5 0\n1 5 8 6 7 5 0 5 5 1\n0 6 9 8 9 6 6 6 3 2\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 0 1 0 1 1 1 1\n1 1 0 0 0 2 2 2 2 2\n2 0 3 0 1 3 2 3 3 0\n3 3 3 1 0 2 3 2 3 1\n0 1 5 1 5 5 5 5 4 1\n2 4 4 1 3 1 4 2 5 2\n1 1 4 2 3 3 1 5 1 4\n8 6 5 8 7 8 0 7 7 3\n1 4 8 0 8 9 4 9 0 9\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 1 1 1 1 0 1\n0 1 2 0 0 2 1 0 0 1\n0 2 1 3 0 3 3 1 0 2\n1 1 2 4 1 1 4 1 4 2\n0 2 3 0 1 5 2 2 5 0\n6 0 0 4 3 6 4 0 1 5\n2 4 1 5 2 4 0 6 5 7\n4 0 5 4 1 5 1 5 6 4\n0 6 8 9 4 9 2 6 6 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 1 0 1 0\n0 0 0 0 1 0 0 1 2 2\n0 0 0 2 1 3 2 0 2 3\n1 4 4 1 1 3 1 0 0 4\n2 1 4 4 2 0 0 1 5 2\n6 4 1 4 2 5 4 1 2 0\n2 1 3 1 1 1 2 1 7 4\n8 2 6 6 1 2 2 7 7 8\n0 1 0 3 2 3 0 8 8 6\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 0 0 0 1 0 0\n0 0 1 0 2 0 1 2 1 0\n1 3 3 2 1 0 2 3 3 3\n1 1 0 1 3 0 2 1 3 1\n3 0 0 5 4 5 0 0 4 4\n4 5 2 1 5 0 0 0 3 3\n4 5 1 7 2 2 7 5 0 4\n6 7 8 5 0 7 5 1 5 4\n0 0 7 7 7 1 0 2 2 0\n", "0 0 0 0 0 0 0 0 0 0\n1 1 0 1 0 0 1 0 0 0\n0 2 2 2 0 2 2 2 0 0\n2 0 0 3 2 3 2 1 0 2\n4 2 3 2 2 4 4 1 3 4\n0 2 3 0 3 0 3 5 3 5\n2 5 2 2 0 0 0 4 1 2\n5 4 6 6 7 6 1 5 3 3\n6 3 3 0 0 7 4 2 1 5\n0 6 2 3 6 8 0 8 8 8\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 1 0 0 1 0 1\n0 2 1 0 2 2 2 1 0 0\n2 3 3 0 1 0 3 3 0 0\n1 1 1 1 1 1 2 3 2 3\n2 0 2 2 1 4 1 4 0 2\n1 5 5 6 4 3 0 0 0 5\n4 5 2 0 4 4 6 1 2 4\n5 2 7 7 4 4 5 0 5 6\n0 1 3 2 1 9 4 3 4 1\n", "0 0 0 0 0 0 0 0 0 0\n1 1 1 0 0 0 1 0 1 0\n0 0 2 0 0 2 1 2 2 0\n2 0 2 0 3 0 1 3 2 2\n1 0 3 4 1 2 2 3 2 0\n1 0 1 1 4 1 5 4 2 5\n3 4 3 2 5 6 0 3 6 2\n6 2 0 4 6 2 4 7 7 7\n4 4 0 2 7 8 6 4 3 7\n0 4 1 4 5 3 8 9 5 6\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 3 0 0 0 4 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 4 0 0 0\n0 0 3 0 0 0 0 0 0 0\n0 0 4 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 0 1 1 1 1 0 1 0\n2 1 0 2 0 0 0 1 0 2\n1 0 2 3 3 1 2 1 0 3\n3 4 0 1 3 1 0 2 1 0\n4 1 5 5 3 3 2 1 1 1\n3 4 3 6 2 1 0 5 1 3\n5 5 3 6 2 6 2 7 4 0\n5 0 4 7 7 2 4 3 7 6\n0 8 4 6 4 6 6 3 9 8\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 0 1 0 1 1 1 1\n1 1 0 0 0 2 2 2 2 2\n2 0 3 0 1 3 2 3 3 0\n3 3 3 1 0 2 3 2 3 1\n0 1 5 1 5 5 5 5 4 1\n2 4 4 1 3 1 4 2 5 2\n1 1 4 2 3 3 1 5 1 4\n4 6 5 8 7 8 0 7 7 3\n1 4 8 0 8 9 4 9 0 9\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 1 1 1 1 0 1\n0 1 2 0 0 2 1 0 0 1\n0 2 1 3 0 3 3 1 0 2\n1 1 2 4 1 1 4 1 4 2\n0 2 3 0 1 5 2 2 5 0\n6 0 0 4 3 6 4 0 2 5\n2 4 1 5 2 4 0 6 5 7\n4 0 5 4 1 5 1 5 6 4\n0 6 8 9 4 9 2 6 6 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 1 0 1 0\n0 0 0 0 1 0 0 1 2 2\n0 0 0 2 1 3 2 0 2 3\n1 4 4 1 1 3 1 0 0 4\n2 1 4 4 2 0 0 1 5 2\n6 4 1 4 2 5 4 1 2 0\n2 1 3 1 1 2 2 1 7 4\n8 2 6 6 1 2 2 7 7 8\n0 1 0 3 2 3 0 8 8 6\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 0 1 0 0 1 0 1\n0 2 1 0 2 2 2 1 0 0\n2 3 3 0 1 0 3 3 0 0\n1 1 1 1 1 1 2 3 2 3\n2 0 2 2 1 4 1 4 0 2\n1 5 5 6 4 3 0 0 0 5\n4 5 2 0 4 4 6 1 2 4\n5 2 7 7 4 4 5 0 5 6\n0 1 3 2 1 9 4 3 4 1\n", "0 0 0 0 0 0 0 0 0 0\n1 1 1 0 0 0 1 0 1 0\n0 0 2 0 0 2 1 2 2 0\n2 0 2 0 3 0 1 3 2 2\n1 0 3 4 1 2 2 3 2 0\n1 0 1 1 4 1 5 4 2 5\n3 4 3 2 5 6 0 3 6 2\n6 2 0 4 6 2 4 7 7 7\n4 4 0 2 7 8 6 4 3 4\n0 4 1 4 5 3 8 9 5 6\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 1 1 0 1 0 1\n2 0 0 0 2 2 0 0 0 2\n2 3 1 2 3 2 2 1 1 0\n1 4 3 1 4 2 1 3 0 4\n4 0 1 1 4 2 5 0 5 3\n1 5 2 3 3 1 4 3 3 0\n0 1 2 4 3 7 7 3 5 0\n1 5 8 6 7 5 0 5 5 1\n0 6 9 8 9 6 6 6 3 2\n", "0 0 0 0 0 0 0 0 0 0\n1 0 0 1 1 1 1 0 1 0\n2 1 0 2 0 0 0 1 0 2\n1 0 2 3 3 1 2 1 0 3\n3 4 0 1 3 1 0 2 1 0\n4 1 4 5 3 3 2 1 1 1\n3 4 3 6 2 1 0 1 1 3\n5 5 3 6 2 6 2 7 4 0\n5 0 4 7 7 2 4 3 7 6\n0 8 4 6 4 6 6 3 9 8\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 0 0 0 1\n1 2 0 0 0 0 2 2 0 0\n0 3 1 1 3 1 2 2 0 3\n4 2 4 1 1 0 3 1 1 4\n1 0 5 4 2 5 3 2 2 5\n5 5 6 4 6 5 4 3 4 0\n1 0 0 3 1 5 0 7 3 0\n1 2 1 3 1 1 0 8 3 6\n0 3 3 3 3 7 2 5 1 1\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 0 1 0 0 1 0 1\n0 2 1 0 2 2 2 1 0 0\n2 3 3 0 1 0 3 3 0 0\n1 1 1 1 1 1 2 3 2 4\n2 0 2 2 1 4 0 4 0 2\n1 5 5 6 4 3 0 0 0 5\n4 5 2 0 4 4 6 1 2 4\n5 2 7 7 4 4 5 0 5 6\n0 1 3 2 1 9 4 3 4 1\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 1 1 1 1 0 1\n0 1 2 0 0 2 1 0 0 1\n0 2 1 3 0 3 3 1 0 2\n1 1 2 4 1 1 4 1 4 2\n0 4 3 0 1 5 2 2 5 0\n6 0 0 4 3 6 2 0 1 5\n2 4 1 6 4 4 0 6 5 7\n4 0 5 4 1 5 1 5 6 4\n0 6 8 9 4 9 2 6 6 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 0 0 1 1\n1 2 0 0 0 0 2 2 0 0\n0 3 1 1 3 1 2 2 0 3\n4 2 4 1 1 0 3 1 1 4\n1 0 5 4 2 5 3 2 2 5\n5 5 6 4 6 5 4 3 4 0\n0 0 0 3 1 5 0 7 3 0\n1 2 0 3 1 1 0 6 3 6\n0 3 3 3 3 8 2 5 1 1\n", "0 0 0 0 0 0 0 0 0 0\n1 0 0 1 1 1 0 1 1 0\n0 1 0 0 0 1 1 0 0 2\n3 0 1 1 3 1 2 1 2 0\n3 4 0 1 0 1 2 1 0 4\n4 2 4 2 1 0 4 3 5 0\n1 4 5 5 2 4 0 0 5 5\n5 6 5 7 3 0 1 3 6 0\n5 2 3 1 4 6 5 2 0 0\n0 9 2 3 0 3 2 6 1 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 0 0 1 0 0 1 1 0\n2 1 1 0 0 2 0 1 2 2\n3 0 3 1 0 3 2 2 0 1\n0 4 3 1 2 4 1 4 2 3\n5 5 5 3 2 2 0 3 0 5\n6 2 1 0 0 6 4 6 4 1\n0 4 6 3 4 5 0 1 3 5\n0 8 4 2 1 5 0 6 0 7\n0 5 5 7 1 6 8 2 2 0\n", "0 0 0 0 0 0 0 0 0 0\n0 1 0 1 0 1 1 1 1 1\n1 0 2 2 0 2 1 1 0 2\n1 0 1 3 1 2 1 2 0 1\n0 0 0 4 4 3 3 0 0 2\n5 0 1 0 1 0 3 0 1 0\n4 4 1 5 6 6 4 5 6 5\n3 7 0 7 6 6 4 1 2 3\n7 7 1 1 1 1 1 0 3 3\n0 9 7 1 1 0 0 3 4 4\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 0 1 0 1 1 1 1\n1 1 0 0 0 2 2 2 2 2\n2 0 3 0 1 2 2 3 3 0\n3 3 3 1 0 2 3 2 3 1\n0 1 5 1 5 5 5 5 4 1\n2 4 4 1 3 1 4 2 5 2\n1 1 4 2 3 3 1 5 1 4\n8 6 5 8 7 8 0 7 7 3\n0 4 8 0 8 9 4 9 0 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 1 1 1 1 1 0 1\n0 1 2 0 0 2 1 0 0 1\n0 2 1 3 0 3 3 1 0 2\n1 1 2 4 1 1 4 1 4 2\n0 2 3 0 1 5 2 2 5 0\n6 0 0 4 3 6 4 0 1 5\n2 4 1 5 2 4 0 6 5 7\n2 0 5 4 1 5 1 5 6 4\n0 6 8 9 4 9 2 6 6 9\n", "0 0 0 0 0 0 0 0 0 0\n1 1 1 1 0 1 1 0 1 0\n2 0 2 0 0 2 2 0 2 2\n3 0 0 0 1 3 1 1 1 2\n2 4 3 2 3 0 1 2 4 4\n3 1 2 1 4 3 4 2 3 4\n0 4 4 4 6 2 4 0 3 0\n2 0 1 0 7 7 3 5 4 3\n8 0 7 3 7 7 1 8 5 4\n0 0 3 6 7 6 4 6 6 5\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 1 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 5 5 5 5 5 5 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 5 5 5 0 0 0 0 0 0\n3 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n", "0 0 0 0 0 0 0 0 0 0\n0 1 1 0 0 0 1 0 0 1\n1 2 2 0 0 0 0 1 0 0\n1 0 2 2 0 1 2 0 2 1\n2 3 0 2 4 0 0 2 1 2\n4 1 2 0 3 3 0 5 1 0\n3 0 6 0 0 5 4 5 2 6\n2 7 5 1 6 1 1 7 6 7\n0 5 3 7 1 7 1 7 2 8\n0 0 8 9 2 4 2 2 7 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 1 0 1 0\n0 0 0 0 1 0 0 1 2 2\n0 0 0 2 1 3 2 0 2 3\n1 4 4 1 1 3 1 0 0 4\n2 0 4 4 2 0 0 1 5 2\n6 4 1 4 3 5 4 1 2 0\n2 1 3 1 1 1 2 1 7 4\n8 2 6 6 1 2 2 7 7 8\n0 1 0 3 2 3 0 8 8 6\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 0 0 0 1 0 0\n0 0 0 0 2 0 1 2 1 0\n1 3 3 2 1 0 2 3 3 3\n1 1 0 1 3 4 2 1 3 1\n3 0 0 5 4 5 0 0 4 4\n4 5 2 1 5 0 0 0 3 3\n4 5 1 7 2 2 7 5 0 4\n6 7 8 5 0 7 5 1 5 4\n0 0 7 7 7 1 0 2 2 0\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n1 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 9 9 9 9 9 9 9 9 9\n", "0 0 0 0 0 0 0 0 0 0\n1 1 0 1 0 0 1 0 0 0\n0 2 1 2 0 2 2 2 0 0\n2 0 0 3 2 3 2 1 0 2\n4 2 3 2 2 4 4 1 3 4\n0 2 3 0 3 0 3 5 3 5\n2 5 2 2 0 6 0 4 1 2\n5 4 6 6 7 6 1 5 3 3\n6 3 3 0 0 7 4 2 1 5\n0 6 2 3 6 8 0 8 8 8\n", "0 0 0 0 0 0 0 0 0 0\n0 1 0 0 0 0 1 0 1 1\n1 0 2 0 1 1 2 0 2 2\n0 0 2 1 3 1 2 2 3 3\n1 0 1 1 0 4 0 0 3 2\n5 1 3 4 0 0 1 2 4 3\n6 4 0 6 4 2 0 2 2 3\n6 4 2 5 0 4 3 3 1 0\n4 6 8 5 4 5 6 3 5 2\n0 5 7 9 9 9 2 2 7 7\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 6 6 6 6 6 6 0 0 0\n1 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 1 0 0 0\n0 0 0 0 0 0 0 0 0 0\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 3 0 0 0 4 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 4 0 0 0\n0 0 3 0 0 0 0 0 0 0\n0 0 4 0 0 0 0 0 0 0\n0 0 0 0 0 1 0 0 0 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 0 0 0 1\n1 2 0 0 0 0 2 2 0 0\n0 3 1 1 3 1 2 2 0 3\n4 2 4 1 1 0 3 1 1 4\n1 0 5 4 2 5 3 2 2 5\n5 5 6 4 6 5 4 3 4 0\n1 0 0 3 1 5 0 7 3 0\n1 2 0 3 1 1 0 8 3 6\n0 3 3 3 3 8 2 5 1 1\n", "0 0 0 0 0 0 0 0 0 0\n0 0 0 0 1 1 0 1 0 1\n2 0 0 0 2 2 0 0 0 2\n2 3 1 3 3 2 2 1 1 0\n1 4 3 1 4 2 1 3 0 4\n4 0 1 1 4 2 5 0 5 3\n1 5 2 3 3 1 4 3 3 0\n0 1 2 4 3 7 7 3 5 0\n1 5 8 6 7 5 0 5 5 1\n0 6 9 8 9 6 6 6 3 2\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 0 0 0 1 0 0\n0 0 1 0 2 0 1 2 1 0\n1 3 3 2 1 0 2 3 3 3\n1 1 0 1 3 0 2 1 3 1\n3 0 0 5 4 5 1 0 4 4\n4 5 2 1 5 0 0 0 3 3\n4 5 1 7 2 2 7 5 0 4\n6 7 8 5 0 7 5 1 5 4\n0 0 7 7 7 1 0 2 2 0\n", "0 0 0 0 0 0 0 0 0 0\n1 0 0 1 1 1 1 0 1 0\n2 1 0 2 0 0 0 1 0 2\n1 0 2 3 3 1 2 1 0 3\n3 4 0 1 3 1 0 2 1 0\n4 1 5 5 3 3 2 1 1 1\n3 4 3 6 2 1 0 1 1 3\n5 5 3 6 2 6 2 7 4 0\n5 0 4 7 7 2 4 3 7 6\n0 8 4 6 4 6 6 3 9 8\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 0 0 0 1\n1 2 0 0 0 0 2 2 0 0\n0 3 1 1 3 1 2 2 0 3\n4 2 4 1 1 0 3 1 1 4\n1 0 5 4 2 5 3 2 2 5\n5 5 6 4 6 5 4 3 4 0\n1 0 0 3 1 5 0 7 3 0\n1 2 1 3 1 1 0 8 3 6\n0 3 3 3 3 8 2 5 1 1\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 1 1 1 1 0 1\n0 1 2 0 0 2 1 0 0 1\n0 2 1 3 0 3 3 1 0 2\n1 1 2 4 1 1 4 1 4 2\n0 2 3 0 1 5 2 2 5 0\n6 0 0 4 3 6 4 0 2 5\n2 4 1 5 4 4 0 6 5 7\n4 0 5 4 1 5 1 5 6 4\n0 6 8 9 4 9 2 6 6 9\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 0 1 0 0 1 0 1\n0 2 1 0 2 2 2 1 0 0\n2 3 3 0 1 0 3 3 0 0\n1 1 1 1 1 1 2 3 2 3\n2 0 2 2 1 4 0 4 0 2\n1 5 5 6 4 3 0 0 0 5\n4 5 2 0 4 4 6 1 2 4\n5 2 7 7 4 4 5 0 5 6\n0 1 3 2 1 9 4 3 4 1\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 1 1 1 1 0 1\n0 1 2 0 0 2 1 0 0 1\n0 2 1 3 0 3 3 1 0 2\n1 1 2 4 1 1 4 1 4 2\n0 2 3 0 1 5 2 2 5 0\n6 0 0 4 3 6 4 0 2 5\n2 4 1 6 4 4 0 6 5 7\n4 0 5 4 1 5 1 5 6 4\n0 6 8 9 4 9 2 6 6 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 0 0 0 1\n1 2 0 0 0 0 2 2 0 0\n0 3 1 1 3 1 2 2 0 3\n4 2 4 1 1 0 3 1 1 4\n1 0 5 4 0 5 3 2 2 5\n5 5 6 4 6 5 4 3 4 0\n1 0 0 3 1 5 0 7 3 0\n1 2 1 3 1 1 0 8 3 6\n0 3 3 3 3 7 2 5 1 1\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 1 1 1 1 0 1\n0 1 2 0 0 2 1 0 0 1\n0 2 1 3 0 3 3 1 0 2\n1 1 2 4 1 1 4 1 4 2\n0 2 3 0 1 5 2 2 5 0\n6 0 0 4 3 6 4 0 1 5\n2 4 1 6 4 4 0 6 5 7\n4 0 5 4 1 5 1 5 6 4\n0 6 8 9 4 9 2 6 6 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 0 0 0 1\n1 2 0 0 0 0 2 2 0 0\n0 3 1 1 3 1 2 2 0 3\n4 2 4 1 1 0 3 1 1 4\n1 0 5 4 0 5 3 2 2 5\n5 5 6 4 6 5 4 3 4 0\n1 0 0 3 1 5 0 7 3 0\n1 4 1 3 1 1 0 8 3 6\n0 3 3 3 3 7 2 5 1 1\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 1 1 1 1 1 0 1\n0 1 2 0 0 2 1 0 0 1\n0 2 1 3 0 3 3 1 0 2\n1 1 2 4 1 1 4 1 4 2\n0 2 3 0 1 5 2 2 5 0\n6 0 0 4 3 6 2 0 1 5\n2 4 1 6 4 4 0 6 5 7\n4 0 5 4 1 5 1 5 6 4\n0 6 8 9 4 9 2 6 6 9\n", "0 0 0 0 0 0 0 0 0 0\n1 0 0 1 1 1 1 0 1 0\n2 1 0 1 0 0 0 1 0 2\n1 0 2 3 3 1 2 1 0 3\n3 4 0 1 3 1 0 2 1 4\n4 1 5 5 3 3 2 1 1 1\n3 4 3 6 2 1 0 5 1 3\n5 5 4 6 2 6 2 7 4 0\n5 0 4 7 7 2 4 3 7 6\n0 8 4 6 4 6 6 3 9 8\n", "0 0 0 0 0 0 0 0 0 0\n0 0 1 0 1 0 0 1 0 1\n0 2 1 0 2 2 2 1 0 0\n2 3 3 0 1 0 3 3 0 0\n1 1 1 1 1 1 2 3 2 3\n2 0 2 2 1 4 1 4 0 2\n1 5 5 6 4 3 0 1 0 5\n4 5 2 0 4 4 6 1 2 4\n5 2 7 7 4 4 5 0 5 6\n0 1 3 2 1 9 4 3 4 1\n", "0 0 0 0 0 0 0 0 0 0\n1 1 1 0 0 0 1 0 1 0\n0 0 2 0 0 2 1 2 2 0\n2 0 2 0 3 0 1 3 2 2\n1 0 3 4 1 2 2 3 2 0\n1 0 1 1 4 1 5 4 2 5\n3 4 3 2 5 6 0 3 6 2\n6 4 0 4 6 2 4 7 7 0\n4 4 0 2 7 8 6 4 3 7\n0 4 1 4 5 3 8 9 5 6\n", "0 0 0 0 0 0 0 0 0 0\n1 0 0 1 1 1 1 0 1 0\n2 1 0 2 0 0 0 1 0 2\n1 0 2 3 3 1 2 1 0 3\n3 4 0 1 3 1 0 2 1 4\n4 1 5 5 3 3 2 1 1 1\n3 4 3 6 2 1 0 5 1 3\n5 5 3 6 2 6 2 7 4 0\n5 0 4 7 7 3 4 3 7 6\n0 8 4 6 4 6 6 3 9 8\n", "0 0 0 0 0 0 0 0 0 0\n1 0 1 0 0 1 0 0 0 1\n1 2 0 0 0 0 2 2 0 0\n0 3 1 1 3 1 2 0 0 3\n4 2 4 1 1 0 3 1 1 4\n1 0 5 4 2 5 3 2 2 5\n5 5 6 4 6 5 4 3 4 0\n0 0 0 3 1 5 0 7 3 0\n1 2 0 3 1 1 0 8 3 6\n0 3 3 3 3 8 2 5 1 1\n"], "output": ["8.670881217652324\n", "9.84637366920859\n", "8.723949103785323\n", "8.835945568666384\n", "8.609215663163509\n", "9.42190290852629\n", "10.800401228007063\n", "9.66322166673395\n", "9.758866507727236\n", "9.97621058447125\n", "19.933544952783\n", "8.672373612512665\n", "8.87369667380361\n", "8.608396390018148\n", "9.438285238347289\n", "10.05792569534722\n", "10.032093374687129\n", "8.781633717411294\n", "8.674173048142798\n", "9.51188376282882\n", "10.043857844213841\n", "8.59993301940271\n", "9.7896086566101\n", "9.467206847869754\n", "8.269480728617276\n", "9.722952158949896\n", "8.838829653700179\n", "8.427761717580923\n", "7.713516894360889\n", "15.640533362510432\n", "9.611168063266529\n", "9.444470272341078\n", "10.76415850076563\n", "7.0\n", "9.66370097104281\n", "8.126869012379855\n", "14.880263051888852\n", "32.09799226784779\n", "20.2591405922878\n", "9.84637366920859\n", "8.723949103785323\n", "10.800401228007063\n", "8.672373612512665\n", "9.84637366920859\n", "8.608396390018148\n", "10.05792569534722\n", "8.608396390018148\n", "9.51188376282882\n", "8.609215663163509\n", "9.51188376282882\n", "8.609215663163509\n", "8.670881217652324\n", "10.05792569534722\n", "9.97621058447125\n", "8.670881217652324\n", "9.84637366920859\n"]}, "short_description": "1. One-sentence summary:\nComputes the expected number of random \u201csix\u2010sided die\u201d moves needed to reach the final cell on a 100-cell linear board that includes instantaneous jumps at certain cells.\n\n2. Core algorithmic approach:\nDynamic programming on a Markov chain with a fixed\u2010size (6) sliding\u2010window average to compute expectations, incorporating conditional transitions (jumps).\n\n3. Reusable components:\n- Sliding-window expectation: maintain a rolling sum of the last six E-values to compute the next E in O(1).\n- Board-index mappings: functions/arrays converting between 2D zigzag coordinates and linear indices (Y and Z).\n- DP recurrence for expected steps on a stochastic process with immediate state redirects (snakes/ladders style jumps)."}
{"name": "1172_C1. Nauuo and Pictures (easy version)", "description": "The only difference between easy and hard versions is constraints.\n\nNauuo is a girl who loves random picture websites.\n\nOne day she made a random picture website by herself which includes n pictures.\n\nWhen Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The i-th picture has a non-negative weight w_i, and the probability of the i-th picture being displayed is \\frac{w_i}{\u2211_{j=1}^nw_j}. That is to say, the probability of a picture to be displayed is proportional to its weight.\n\nHowever, Nauuo discovered that some pictures she does not like were displayed too often. \n\nTo solve this problem, she came up with a great idea: when she saw a picture she likes, she would add 1 to its weight; otherwise, she would subtract 1 from its weight.\n\nNauuo will visit the website m times. She wants to know the expected weight of each picture after all the m visits modulo 998244353. Can you help her?\n\nThe expected weight of the i-th picture can be denoted by \\frac {q_i} {p_i} where \\gcd(p_i,q_i)=1, you need to print an integer r_i satisfying 0\u2264 r_i<998244353 and r_i\u22c5 p_i\u2261 q_i\\pmod{998244353}. It can be proved that such r_i exists and is unique.\n\nInput\n\nThe first line contains two integers n and m (1\u2264 n\u2264 50, 1\u2264 m\u2264 50) \u2014 the number of pictures and the number of visits to the website.\n\nThe second line contains n integers a_1,a_2,\u2026,a_n (a_i is either 0 or 1) \u2014 if a_i=0 , Nauuo does not like the i-th picture; otherwise Nauuo likes the i-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\n\nThe third line contains n integers w_1,w_2,\u2026,w_n (1\u2264 w_i\u226450) \u2014 the initial weights of the pictures.\n\nOutput\n\nThe output contains n integers r_1,r_2,\u2026,r_n \u2014 the expected weights modulo 998244353.\n\nExamples\n\nInput\n\n\n2 1\n0 1\n2 1\n\n\nOutput\n\n\n332748119\n332748119\n\n\nInput\n\n\n1 2\n1\n1\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n3 3\n0 1 1\n4 3 5\n\n\nOutput\n\n\n160955686\n185138929\n974061117\n\nNote\n\nIn the first example, if the only visit shows the first picture with a probability of \\frac 2 3, the final weights are (1,1); if the only visit shows the second picture with a probability of \\frac1 3, the final weights are (2,2).\n\nSo, both expected weights are \\frac2 3\u22c5 1+\\frac 1 3\u22c5 2=\\frac4 3 .\n\nBecause 332748119\u22c5 3\u2261 4\\pmod{998244353}, you need to print 332748119 instead of \\frac4 3 or 1.3333333333.\n\nIn the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, w_1 will be increased by 1.\n\nSo, the expected weight is 1+2=3.\n\nNauuo is very naughty so she didn't give you any hint of the third example.", "solution": "P = 998244353\nN, M = map(int, input().split())\nA = [int(a) for a in input().split()]\nB = [int(a) for a in input().split()]\nli = sum([A[i]*B[i] for i in range(N)])\ndi = sum([(A[i]^1)*B[i] for i in range(N)])\nX = [[] for _ in range(M+1)]\n\nX[0] = [1]\ndef calc(L):\n    su = sum(L)\n    pl = 0\n    pd = 0\n    RE = []\n    for i in range(len(L)):\n        a = li + i\n        b = di - (len(L) - 1 - i)\n        pd = b * L[i] * pow(su*(a+b), P-2, P)\n        RE.append((pl+pd)%P)\n        pl = a * L[i] * pow(su*(a+b), P-2, P)\n    RE.append(pl%P)\n    return RE\n\nfor i in range(M):\n    X[i+1] = calc(X[i])\nne = 0\npo = 0\nfor i in range(M+1):\n    po = (po + X[M][i] * (li + i)) % P\n    ne = (ne + X[M][i] * (di - M + i)) % P\nfor i in range(N):\n    print(po * B[i] * pow(li, P-2, P) % P if A[i] else ne * B[i] * pow(di, P-2, P) % P)\n", "difficulty": 9, "public_tests": {"input": ["1 2\n1\n1\n", "2 1\n0 1\n2 1\n", "3 3\n0 1 1\n4 3 5\n"], "output": ["3\n", "332748119\n332748119\n", "160955686\n185138929\n974061117\n"]}, "private_tests": {"input": ["10 10\n0 1 0 0 1 1 1 1 1 1\n12 18 6 18 7 2 9 18 1 9\n", "50 50\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1\n1 9 24 8 8 11 21 11 8 5 16 32 31 15 29 14 16 20 5 18 5 10 31 23 21 4 4 20 20 11 1 4 4 15 9 14 5 30 13 16 32 27 19 10 19 24 21 1 21 15\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n", "45 50\n0 1 0 1 0 1 0 1 1 0 0 1 0 0 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0\n4 4 23 23 13 23 9 16 4 18 20 15 21 24 22 20 22 1 15 7 10 17 20 6 15 7 4 10 16 7 14 9 13 17 10 14 22 23 3 5 20 11 4 24 24\n", "47 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n30 32 21 7 15 4 39 36 23 17 13 4 8 18 38 24 13 27 37 27 32 16 8 12 7 23 28 38 11 36 19 33 10 34 4 8 5 22 3 29 21 30 7 32 35 26 23\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n126679203 179924771 16639504 67055540 14134870 36407782 15024189 39367944 121531542 5400023 5834434 8539193 3686913 11287136 36370086 71808281 138206490 59846864 19052959 21446598\n", "10 50\n0 0 0 0 0 0 0 0 1 0\n3 1 3 3 1 3 1 2 2 1\n", "20 30\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n3 4 1 2 1 1 1 2 5 2 1 2 3 1 1 2 3 2 1 2\n", "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1\n2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 2 1 2 1 2 1 1 1 1 2 1\n", "20 20\n1 1 1 1 0 1 1 1 0 1 0 1 0 0 1 0 1 1 0 1\n1 13 7 11 17 15 19 18 14 11 15 1 12 4 5 16 14 11 18 9\n", "30 30\n0 1 1 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0\n5 20 47 27 17 5 18 30 43 23 44 6 47 8 23 41 2 46 49 33 45 27 33 16 36 2 42 36 8 23\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n61 849 320 1007 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 62 2521\n", "20 30\n0 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0\n244 1901 938 1350 1010 763 318 2158 1645 534 1356 563 295 1449 2306 224 1302 195 639 810\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n765 451 7275 385 1686 78 554 114 1980 394 776 232 627 760 782 7 486 32 1100 1516\n", "30 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 2 1 2 2 1 2 1 2 1 1 2 2 1 2 1 2 1 2 2 2 1 1 2 1 2 2\n", "10 10\n0 0 0 0 0 0 0 1 0 0\n8 33 37 18 30 48 45 34 25 48\n", "30 30\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n2 1 1 2 1 2 2 2 2 2 1 1 2 2 2 1 2 2 2 1 2 1 1 1 1 1 2 1 1 1\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n2 1 1 2 2 1 2 1 1 2 2 2 1 2 2 1 1 1 2 1 2 1 2 2 2 1 2 1 1 2 2 2 2 2 1 2 2 2 2 2 2 1 2 1 2 2 2 1 1 2\n", "50 50\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "20 30\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n128 574 205 490 611 1294 283 1690 1466 1896 272 19 1020 5032 357 1500 36 1749 1202 176\n", "50 50\n0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 2 1 1 1 1 1 2 1 1 1 2 2 2 1 1 1 1 2 2 1 2 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 1 1 2 2 2 1\n", "50 50\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n", "10 10\n1 1 1 1 1 1 1 0 1 1\n2 1 2 2 1 1 1 1 1 1\n", "48 50\n1 0 1 0 1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1\n42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42\n", "10 10\n1 1 1 1 1 1 1 1 1 1\n1 2 2 1 2 2 2 1 1 1\n", "50 50\n0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n12 29 36 24 44 22 38 43 30 19 15 2 39 8 13 50 29 18 37 19 32 39 42 41 20 11 14 25 4 35 14 23 17 29 1 19 3 6 8 31 26 46 9 31 36 49 21 38 17 27\n", "50 50\n0 0 1 0 0 0 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 1 1 0 0 1 1 0 0 1 1 0 1 0 0 0 0\n1 1 1 1 1 2 2 1 1 2 2 2 1 1 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 1 1 2 2 1 1 2 1 1 2 2 2 2 2 2 2 2 2 1 2 1\n", "50 50\n0 0 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 1 1 0 0\n45 49 17 22 28 34 24 38 5 46 22 36 11 12 43 21 47 39 38 38 38 27 10 49 19 46 23 7 46 35 11 38 25 16 7 32 12 13 44 14 41 36 7 31 4 46 40 28 28 46\n", "20 30\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661\n", "30 30\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n41 39 15 34 45 27 18 7 48 33 46 11 24 16 35 43 7 31 26 17 30 15 5 9 29 20 21 37 3 7\n", "10 10\n0 0 1 0 0 0 1 0 0 0\n2 1 2 1 1 2 1 1 1 1\n", "44 50\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n2 6 6 11 2 4 11 10 5 15 15 20 20 7 9 8 17 4 16 19 12 16 12 13 2 11 20 2 6 10 2 18 7 5 18 10 15 6 11 9 7 5 17 11\n", "20 30\n0 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1\n66166717 200301718 6725634 95379617 42880832 48874211 64912554 36809296 13248978 58406666 53142218 45080678 19902257 58554006 23570140 14484661 7589423 78746789 11072716 52395211\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n13 18 27 40 3 1 20 11 25 11 2 31 22 15 36 12 11 24 8 39 31 36 19 24 10 39 27 4 10 22 14 3 25 5 24 19 20 33 17 19 30 15 37 33 3 27 26 29 37 34\n", "10 10\n1 0 0 0 1 1 1 0 1 0\n1 2 1 2 1 1 2 2 2 1\n", "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n34095514 37349809 60555988 40280455 19504485 77297461 41415742 66290058 20631093 185280391 7151718 64927972 15611855 4317891 24600598 24588269 60808977 9108470 13217752 191209824\n", "30 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\n1 2 1 1 2 1 1 1 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 2 2 1 1 2 2 2\n", "47 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\n", "50 50\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1\n33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47\n", "30 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\n", "10 10\n0 0 1 0 0 0 0 0 1 0\n47 34 36 9 3 16 17 46 47 1\n", "10 10\n1 1 1 1 1 1 1 1 1 1\n43 43 43 43 43 43 43 43 43 43\n", "20 20\n0 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 1 1 1 0\n109 1 24 122 136 42 25 112 110 15 26 48 35 10 86 13 41 6 24 15\n", "50 50\n1 0 1 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 1 0 1 1 0 0 1 1 0 0 1 0 0 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "49 50\n0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0\n2 3 2 3 4 2 1 1 1 1 1 1 3 1 2 3 2 4 1 2 2 1 1 2 4 3 2 4 1 2 1 1 2 3 1 3 3 2 2 1 4 3 4 1 3 3 4 1 3\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n32 22 24 45 22 17 10 5 27 1 48 15 14 43 11 16 38 31 24 19 5 28 2 4 34 29 18 32 47 11 2 34 39 29 36 11 39 24 23 16 41 45 17 39 30 15 16 3 3 8\n", "50 50\n0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n2 1 1 1 1 2 2 2 1 1 2 2 2 1 2 1 2 2 2 1 1 1 1 2 2 1 1 1 1 2 1 2 2 2 2 1 1 1 2 1 2 1 1 2 2 1 1 2 2 1\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\n144831196 28660251 62050800 52660762 23189000 12771861 73096012 25119113 119648684 16011144 51600638 74708999 6312006 26945863 68746869 58112898 5070 19157938 74351320 60263898\n", "30 30\n1 1 1 0 1 0 0 1 1 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 1 0 1 0\n1 1 1 2 2 1 2 1 2 1 1 2 2 2 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "20 30\n1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 1 3 1 4 1 5 1 1 2 3 1 1 3 3 2 2 1 2\n", "40 40\n1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n28 13 22 35 22 13 23 35 14 36 30 10 10 15 3 9 35 35 9 29 14 28 8 29 22 30 4 31 39 24 4 19 37 4 20 7 11 17 3 25\n", "49 50\n0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\n", "50 50\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n49 34 4 15 32 20 22 35 3 28 15 46 4 46 16 11 45 42 11 4 15 36 29 10 27 32 1 1 23 11 6 34 35 19 11 5 2 37 9 20 39 33 27 4 21 33 6 23 37 50\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\n1 2 2 2 2 2 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 2 2 1 1 1 1 2 2 2 1 2 2 1 2 2 1 1 2 2 2 2 2 1 2 2 1\n", "5 5\n0 1 0 0 1\n9 8 3 8 8\n", "10 10\n1 1 1 1 1 1 1 1 1 1\n17 10 8 34 5 4 3 44 20 14\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 3 2 1 3 2 1 1 2 1 1 2 2 4 2 1 5 2 3\n", "5 5\n0 1 0 0 1\n2 4 1 2 1\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n25 31 26 45 2 6 25 14 35 23 31 16 24 36 44 8 18 41 36 3 27 21 15 44 45 45 25 8 3 43 7 25 48 45 44 33 25 49 8 46 14 12 12 46 45 43 29 40 1 47\n", "5 50\n1 1 1 1 1\n1 1 4 2 3\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\n1 1 3 2 3 1 2 2 3 2 2 2 2 2 2 3 3 1 1 2\n", "20 30\n0 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1\n1 2 2 2 2 2 1 1 2 1 4 1 2 5 3 4 1 1 2 1\n", "10 3000\n1 1 1 1 1 0 0 0 1 1\n6 22 5 2 4 15 4 7 31 4\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10 10\n1 1 1 1 1 1 1 1 0 1\n40 36 29 4 36 35 9 38 40 18\n", "42 50\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0\n2 4 6 8 1 3 6 1 4 1 3 4 3 7 6 6 8 7 4 1 7 4 6 9 3 1 9 7 1 2 9 3 1 6 1 5 1 8 2 6 8 8\n", "20 50\n1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1\n1 2 2 1 2 2 2 2 2 2 1 1 2 2 2 1 1 1 2 2\n", "20 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 2 2 2 2 2 1 2 1 2 1 2 1 1 2 1 2 2 1\n", "30 30\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n29 38 18 19 46 28 12 5 46 17 31 20 24 33 9 6 47 2 2 41 34 2 50 5 47 10 40 21 49 28\n", "46 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n29 22 30 33 13 31 19 11 12 21 5 4 24 21 20 6 28 16 27 18 21 11 3 24 21 8 8 33 24 7 34 12 13 32 26 33 33 22 18 2 3 7 24 17 9 30\n", "50 50\n0 0 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 1 1 0 0\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "30 30\n0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0\n1 12 9 1 5 32 38 25 34 31 27 43 13 38 48 40 5 42 20 45 1 4 35 38 1 44 31 42 8 37\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\n779 1317 1275 234 857 1531 785 265 679 767 1994 11 918 1146 1807 71 813 245 3926 580\n", "43 50\n1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n13 7 13 15 8 9 11 1 15 9 3 7 3 15 4 7 7 16 9 13 12 16 16 1 5 5 14 5 17 2 1 13 4 13 10 17 17 6 11 15 14 3 6\n", "50 50\n0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0\n2 50 37 21 21 2 26 49 15 44 8 27 30 28 26 40 26 45 41 37 27 34 8 35 2 23 2 49 13 1 39 37 12 42 7 11 4 50 42 21 27 50 28 31 17 22 10 43 46 13\n", "10 10\n1 0 0 1 1 0 1 0 0 1\n24 7 10 9 6 13 27 17 6 39\n", "41 50\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 2 4 2 3 2 4 3 1 1 3 1 3 2 5 3 3 5 4 4 1 1 2 3 2 1 5 5 5 4 2 2 2 1 2 4 4 5 2 1 4\n", "100 3000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n10 8 1 9 7 5 12 9 15 7 16 5 17 5 17 21 11 3 4 4 30 17 3 84 12 30 2 8 2 2 22 24 15 11 15 13 7 17 1 12 8 4 3 6 5 15 1 3 4 2 27 3 11 11 3 3 3 5 14 2 5 13 6 2 6 5 6 19 3 16 4 12 11 2 2 3 25 14 6 11 22 4 10 32 9 19 14 2 2 3 4 3 2 5 18 14 2 7 3 8\n", "48 50\n1 0 1 0 1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1\n9 42 15 12 2 9 41 13 23 14 17 42 25 10 10 2 38 36 41 31 9 20 31 41 20 41 40 28 7 37 14 25 23 38 27 17 6 40 2 19 19 3 8 32 13 22 41 20\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n", "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n23 45 44 49 17 36 32 26 40 8 36 11 5 19 41 16 7 38 23 40 13 16 24 44 22 13 1 2 32 31\n", "10 10\n0 0 0 1 0 0 0 0 0 0\n2 2 2 2 2 2 2 1 2 2\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0\n9380933 34450681 12329733 7732927 73910078 16165679 149467043 56914401 21809098 36934833 71019254 168559440 12033996 40465391 7156881 3312348 37150678 130625432 42709585 66115911\n", "10 10\n0 0 0 0 0 1 0 0 0 0\n34 34 34 34 34 34 34 34 34 34\n", "40 50\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n33 26 4 19 42 43 19 32 13 23 19 1 18 43 43 43 19 31 4 25 28 23 33 37 36 23 5 12 18 32 34 1 21 22 34 35 37 16 41 39\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 2 2 1 1 2 1 1 1 2 1 1 2 1 2 1 2 1 2 1 2 2 2 1 2 2 2 2 1\n"], "output": ["199115375\n823101465\n598679864\n797795239\n486469073\n424203836\n910672909\n823101465\n212101918\n910672909\n", "475420905\n285810733\n429413837\n935878068\n808634181\n787710167\n1395475\n787710167\n808634181\n85801616\n619024009\n748779213\n762627113\n143603104\n896947114\n666426552\n619024009\n343206464\n380615819\n571621466\n380615819\n171603232\n132672278\n952237285\n1395475\n467939034\n467939034\n524218923\n343206464\n238408190\n616106935\n467939034\n467939034\n143603104\n285810733\n639542266\n85801616\n514809696\n23435331\n619024009\n748779213\n662977597\n725343882\n761231638\n48798018\n429413837\n959313399\n616106935\n1395475\n257404848\n", "9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n", "630266647\n555616275\n379739073\n948743787\n301438985\n948743787\n669416691\n225976394\n555616275\n340589029\n156600176\n835755590\n563727926\n786866823\n560278630\n781592669\n970855676\n388465157\n835755590\n853405544\n889918511\n614441551\n156600176\n446277794\n117450132\n853405544\n630266647\n78300088\n225976394\n722767393\n708566735\n669416691\n58825276\n931705632\n78300088\n708566735\n970855676\n948743787\n223138897\n39150044\n781592669\n280139315\n555616275\n338964591\n786866823\n", "243227082\n658739962\n369907828\n456050727\n121613541\n831025760\n116546336\n491521369\n785420708\n537126421\n704345014\n831025760\n663807167\n744882861\n907034249\n993177148\n704345014\n618202115\n699277809\n618202115\n658739962\n329369981\n663807167\n496588574\n456050727\n785420708\n825958555\n907034249\n288832134\n491521369\n952639301\n866496402\n81075694\n76008489\n831025760\n663807167\n40537847\n577664268\n623269320\n35470642\n369907828\n243227082\n456050727\n658739962\n283764929\n410445675\n785420708\n", "615913610\n488825486\n773371096\n742795989\n193664548\n323188752\n32686082\n709701410\n293733249\n161181348\n193396792\n354491196\n708550409\n644392716\n323187536\n646345011\n487479735\n1930544\n322628919\n966734748\n", "187134581\n727874429\n187134581\n187134581\n727874429\n187134581\n727874429\n457504505\n124563167\n727874429\n", "441078046\n920852179\n479774133\n959548266\n479774133\n479774133\n479774133\n959548266\n402381959\n263018694\n479774133\n959548266\n441078046\n479774133\n479774133\n959548266\n441078046\n959548266\n479774133\n959548266\n", "720162001\n859203177\n859203177\n859203177\n720162001\n859203177\n859203177\n720162001\n859203177\n859203177\n859203177\n720162001\n859203177\n859203177\n859203177\n859203177\n720162001\n720162001\n720162001\n720162001\n859203177\n720162001\n859203177\n720162001\n427819009\n859203177\n859203177\n859203177\n720162001\n859203177\n", "688505688\n964619120\n826562404\n585852097\n851622699\n345141790\n104431483\n414170148\n349014804\n585852097\n516550769\n688505688\n13942874\n670143860\n447795381\n684086734\n654880455\n585852097\n20914311\n207085074\n", "114252107\n760713694\n489959522\n18014766\n787754905\n689300600\n484993454\n142826188\n936763395\n126261951\n805769671\n827160720\n475023194\n781749983\n176049701\n138271795\n444998584\n252523902\n765679762\n354766165\n214239282\n727490181\n354766165\n565255613\n24019688\n275720240\n798903275\n969986908\n104636607\n126261951\n", "514012356\n393871659\n166092575\n569465276\n74319433\n306884170\n254628439\n656312237\n485609669\n216694535\n825782618\n110704962\n294216114\n131255421\n733108087\n613768340\n14181299\n610566194\n624888021\n887363731\n", "300071414\n595185476\n40756239\n113904636\n440148868\n947268885\n456535325\n542868956\n183161324\n427608407\n61171180\n375813928\n43680359\n55509680\n30410255\n360521133\n535772284\n722568686\n663107799\n390646234\n", "491636110\n498623506\n486651408\n182179980\n6989399\n10980766\n871467875\n92836839\n509106603\n951327263\n211628580\n83852758\n11480438\n618912260\n58897200\n820057743\n605934809\n183676993\n948333237\n341401087\n", "593179614\n593179614\n593179614\n593179614\n188114875\n593179614\n188114875\n188114875\n593179614\n188114875\n593179614\n188114875\n593179614\n275307283\n188114875\n188114875\n593179614\n188114875\n275307283\n188114875\n593179614\n188114875\n188114875\n188114875\n593179614\n593179614\n188114875\n593179614\n188114875\n188114875\n", "211347083\n497465085\n104016450\n725092025\n542990473\n269838145\n315363533\n227335634\n286118002\n269838145\n", "188114875\n593179614\n593179614\n550614566\n593179614\n188114875\n188114875\n188114875\n188114875\n188114875\n593179614\n593179614\n188114875\n188114875\n188114875\n593179614\n188114875\n188114875\n188114875\n593179614\n188114875\n593179614\n593179614\n593179614\n593179614\n593179614\n188114875\n593179614\n593179614\n593179614\n", "714792256\n357396128\n357396128\n714792256\n714792256\n357396128\n714792256\n357396128\n357396128\n714792256\n714792256\n714792256\n357396128\n714792256\n714792256\n357396128\n357396128\n357396128\n714792256\n357396128\n714792256\n357396128\n714792256\n714792256\n714792256\n357396128\n714792256\n357396128\n357396128\n714792256\n714792256\n714792256\n714792256\n714792256\n357396128\n714792256\n714792256\n714792256\n714792256\n714792256\n714792256\n357396128\n714792256\n357396128\n714792256\n714792256\n714792256\n357396128\n357396128\n714792256\n", "80661140\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n", "389864218\n157345415\n537589523\n962131647\n753565149\n104281847\n378440811\n873692367\n690552162\n658861420\n578900375\n198248582\n923070965\n228091231\n572635926\n887695253\n795942304\n70748620\n510359933\n785624388\n", "311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n273616393\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n", "964858256\n964858256\n964858256\n931472159\n964858256\n964858256\n964858256\n964858256\n964858256\n931472159\n964858256\n964858256\n964858256\n931472159\n931472159\n931472159\n964858256\n964858256\n964858256\n824636640\n931472159\n931472159\n964858256\n931472159\n964858256\n931472159\n931472159\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n931472159\n964858256\n931472159\n931472159\n964858256\n964858256\n931472159\n931472159\n931472159\n964858256\n", "382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n798399400\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n", "771370640\n385685320\n771370640\n771370640\n385685320\n385685320\n385685320\n635246407\n385685320\n385685320\n", "612040887\n271232481\n612040887\n271232481\n612040887\n271232481\n271232481\n612040887\n271232481\n271232481\n271232481\n612040887\n612040887\n271232481\n271232481\n271232481\n612040887\n271232481\n612040887\n271232481\n612040887\n271232481\n271232481\n612040887\n271232481\n612040887\n612040887\n271232481\n271232481\n271232481\n271232481\n271232481\n271232481\n612040887\n612040887\n271232481\n271232481\n612040887\n271232481\n612040887\n271232481\n271232481\n271232481\n271232481\n271232481\n271232481\n271232481\n612040887\n", "665496237\n332748121\n332748121\n665496237\n332748121\n332748121\n332748121\n665496237\n665496237\n665496237\n", "820896192\n985588111\n466199870\n643548031\n15219645\n506731999\n603015902\n945055982\n986069299\n301507951\n27875887\n136816032\n671423918\n547264128\n889304208\n425667741\n985588111\n233099935\n534607886\n301507951\n192567806\n671423918\n876647966\n808239950\n369915967\n752488176\n957712224\n711956047\n273632064\n397791854\n957712224\n575140015\n164691919\n985588111\n68408016\n301507951\n205224048\n410448096\n547264128\n124159790\n780364063\n152035677\n615672144\n124159790\n466199870\n357259725\n438323983\n603015902\n164691919\n848772079\n", "525100120\n525100120\n392384920\n525100120\n525100120\n51955887\n784769840\n525100120\n392384920\n784769840\n784769840\n51955887\n392384920\n392384920\n525100120\n784769840\n784769840\n51955887\n392384920\n392384920\n392384920\n392384920\n784769840\n392384920\n525100120\n392384920\n51955887\n784769840\n525100120\n392384920\n525100120\n51955887\n51955887\n525100120\n392384920\n784769840\n525100120\n525100120\n784769840\n784769840\n51955887\n51955887\n784769840\n784769840\n51955887\n784769840\n51955887\n525100120\n51955887\n525100120\n", "644620779\n102973792\n443172276\n267699221\n201448503\n886344552\n745782947\n99391617\n196964962\n259647944\n267699221\n619552244\n632971787\n371547745\n416322096\n28657358\n254279678\n338433480\n344697565\n344697565\n99391617\n464664183\n143249062\n102973792\n548817985\n15237815\n129823972\n675048688\n259647944\n380510381\n756520580\n344697565\n984824810\n829936749\n675048688\n658045869\n371547745\n112811160\n535398442\n599846428\n188023413\n619552244\n299923214\n44774351\n956167452\n259647944\n577475343\n703706046\n201448503\n259647944\n", "76898501\n989279651\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n", "61128841\n655563720\n98563838\n955457225\n295691514\n377063779\n916872088\n578393446\n115755411\n17191573\n235712813\n338478642\n556999882\n38585137\n895478524\n415648916\n578393446\n137148975\n437042480\n976850789\n197127676\n98563838\n698350848\n458436044\n257106377\n796914686\n736935985\n775521122\n818308250\n578393446\n", "44896189\n521570271\n482402083\n521570271\n521570271\n44896189\n740323218\n521570271\n521570271\n521570271\n", "327775237\n983325711\n983325711\n305397274\n327775237\n853173373\n305397274\n640631832\n320315916\n960947748\n960947748\n272889453\n283019311\n648091153\n975866390\n312856595\n290478632\n655550474\n625713190\n618253869\n968407069\n625713190\n968407069\n633172511\n327775237\n305397274\n283019311\n327775237\n983325711\n640631832\n327775237\n953488427\n648091153\n816905628\n953488427\n640631832\n960947748\n983325711\n305397274\n975866390\n648091153\n320315916\n290478632\n305397274\n", "823107880\n742699237\n987770596\n549924308\n730188349\n913535291\n936423447\n122869154\n581668441\n749452306\n615454312\n176148736\n874336841\n897418997\n235568492\n24727530\n143875067\n15270097\n200154604\n356406452\n", "30685719\n733580163\n601248068\n631933787\n621385537\n539876630\n815089070\n947421165\n519739161\n947421165\n81508907\n764265882\n896597977\n112194626\n468915973\n489053442\n947421165\n978106884\n326035628\n92057157\n764265882\n468915973\n275212440\n978106884\n407544535\n92057157\n601248068\n163017814\n407544535\n896597977\n570562349\n621385537\n519739161\n702894444\n978106884\n275212440\n815089070\n845774789\n193703533\n275212440\n224389252\n112194626\n10548250\n845774789\n621385537\n601248068\n61371438\n682756975\n10548250\n387407066\n", "910950063\n595918255\n797081304\n595918255\n910950063\n910950063\n823655773\n595918255\n823655773\n797081304\n", "23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n", "313283482\n21804622\n682197550\n361027027\n756362680\n151917509\n716108102\n131732975\n237068086\n731869119\n190595295\n847684643\n847454143\n501579235\n129856516\n246699402\n205385635\n639100445\n614421017\n227076269\n", "346646202\n693292404\n346646202\n346646202\n693292404\n346646202\n346646202\n346646202\n346646202\n346646202\n346646202\n693292404\n346646202\n346646202\n693292404\n346646202\n346646202\n346646202\n693292404\n346646202\n346646202\n693292404\n346646202\n542025302\n693292404\n346646202\n346646202\n693292404\n693292404\n693292404\n", "573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n", "677141055\n677141055\n677141055\n677141057\n677141055\n677141057\n677141055\n677141057\n677141055\n677141057\n677141055\n677141057\n677141055\n677141055\n677141057\n677141055\n677141055\n677141057\n677141055\n677141055\n677141055\n677141057\n677141057\n677141055\n677141055\n677141057\n677141057\n677141055\n677141057\n677141055\n677141057\n677141057\n677141057\n677141055\n677141055\n677141057\n677141057\n677141057\n677141057\n677141055\n677141057\n677141057\n677141057\n677141055\n677141055\n677141055\n677141057\n677141057\n677141055\n677141057\n", "529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n988406960\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n", "417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n142843895\n", "167709201\n57603825\n597597985\n690531016\n562925123\n673030499\n527924089\n312815611\n253346183\n853137943\n", "44\n44\n44\n44\n44\n44\n44\n44\n44\n44\n", "217595927\n149660176\n322657182\n290143118\n388896876\n296261274\n86540143\n507489163\n979723241\n248413934\n896431517\n195977977\n246884395\n633562669\n891842900\n947337935\n146601098\n897961056\n597111165\n451221827\n", "996306346\n996306344\n996306346\n996306344\n996306344\n996306346\n996306346\n996306346\n996306344\n996306344\n996306344\n996306346\n996306346\n996306346\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306344\n996306346\n996306344\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306346\n996306344\n996306344\n996306346\n996306346\n996306344\n996306344\n996306346\n996306344\n996306344\n996306346\n", "136570933\n703978576\n136570933\n703978576\n273141866\n136570933\n567407643\n478951804\n567407643\n567407643\n478951804\n478951804\n703978576\n567407643\n136570933\n703978576\n136570933\n273141866\n567407643\n136570933\n136570933\n567407643\n567407643\n136570933\n273141866\n703978576\n957903608\n273141866\n567407643\n136570933\n567407643\n567407643\n136570933\n703978576\n567407643\n438611059\n438611059\n136570933\n136570933\n478951804\n273141866\n703978576\n917562863\n478951804\n703978576\n703978576\n273141866\n567407643\n703978576\n", "118672439\n268758118\n837687594\n821980974\n268758118\n842923134\n848158674\n424079337\n692837455\n284464738\n677130835\n273993658\n987773273\n253051498\n134379059\n558458396\n827216514\n832452054\n837687594\n413608257\n424079337\n977302193\n568929476\n139614599\n687601915\n263522578\n129143519\n118672439\n392666097\n134379059\n568929476\n687601915\n113436899\n263522578\n258287038\n134379059\n113436899\n837687594\n553222856\n558458396\n682366375\n821980974\n842923134\n113436899\n547987316\n273993658\n558458396\n853394214\n853394214\n279229198\n", "303976482\n151988241\n151988241\n151988241\n480354901\n303976482\n303976482\n303976482\n151988241\n151988241\n303976482\n303976482\n303976482\n151988241\n303976482\n151988241\n303976482\n303976482\n303976482\n151988241\n151988241\n151988241\n151988241\n303976482\n303976482\n151988241\n151988241\n151988241\n151988241\n303976482\n151988241\n303976482\n303976482\n303976482\n303976482\n151988241\n151988241\n151988241\n303976482\n151988241\n303976482\n151988241\n151988241\n303976482\n303976482\n151988241\n151988241\n303976482\n303976482\n480354901\n", "504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n", "132556548\n711988928\n6999755\n208709864\n320161276\n865416376\n320896979\n458941660\n671806481\n158009043\n351362956\n78248147\n927871852\n882014191\n988190329\n830735503\n1958329\n787106839\n942059547\n341315444\n", "297674502\n297674502\n297674502\n101192689\n595349004\n549718521\n101192689\n297674502\n595349004\n297674502\n549718521\n101192689\n101192689\n101192689\n549718521\n595349004\n297674502\n549718521\n297674502\n549718521\n297674502\n101192689\n549718521\n595349004\n297674502\n101192689\n297674502\n101192689\n297674502\n549718521\n", "834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n982795629\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n", "902255482\n806266611\n902255482\n710277740\n902255482\n537377994\n902255482\n518299998\n902255482\n902255482\n806266611\n710277740\n902255482\n902255482\n710277740\n710277740\n806266611\n806266611\n902255482\n806266611\n", "368107101\n848286965\n360530176\n210572788\n199380339\n848286965\n195418938\n210572788\n683175727\n45461550\n37884625\n544374860\n345376326\n518064489\n502910639\n510487564\n210572788\n210572788\n510487564\n202995863\n683175727\n526005255\n675598802\n202995863\n360530176\n37884625\n337799401\n871017740\n548372189\n30307700\n337799401\n855863890\n878594665\n337799401\n690752652\n840710040\n180265088\n187842013\n502910639\n863440815\n", "371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n872512215\n371008012\n371008012\n872512215\n872512215\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n872512215\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n872512215\n872512215\n371008012\n371008012\n872512215\n371008012\n371008012\n872512215\n872512215\n371008012\n371008012\n371008012\n371008012\n371008012\n", "41887747\n858571128\n101008368\n378781380\n808066944\n505041840\n555546024\n883823220\n75756276\n707058576\n378781380\n163351879\n101008368\n163351879\n404033472\n277773012\n138099787\n62343511\n277773012\n101008368\n378781380\n909075312\n732310668\n252520920\n681806484\n808066944\n25252092\n25252092\n580798116\n277773012\n151512552\n858571128\n883823220\n479789748\n277773012\n126260460\n50504184\n934327404\n227268828\n505041840\n984831588\n833319036\n681806484\n101008368\n530293932\n833319036\n151512552\n580798116\n934327404\n264360247\n", "512801870\n27359387\n27359387\n27359387\n27359387\n27359387\n27359387\n512801870\n512801870\n27359387\n27359387\n512801870\n512801870\n27359387\n512801870\n27359387\n27359387\n512801870\n27359387\n512801870\n27359387\n27359387\n512801870\n27359387\n27359387\n27359387\n512801870\n512801870\n512801870\n512801870\n27359387\n27359387\n27359387\n512801870\n27359387\n27359387\n512801870\n27359387\n27359387\n512801870\n512801870\n27359387\n27359387\n27359387\n27359387\n27359387\n96131098\n27359387\n27359387\n512801870\n", "45170585\n105647559\n680553097\n483815788\n105647559\n", "709444118\n6278277\n803618104\n420643883\n502261315\n401809052\n301356789\n426922160\n12556554\n408087329\n", "584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n705829341\n584830027\n584830027\n584830027\n", "249561090\n249561090\n748683270\n499122180\n249561090\n748683270\n499122180\n249561090\n249561090\n499122180\n249561090\n249561090\n499122180\n499122180\n7\n499122180\n249561090\n249561097\n499122180\n748683270\n", "665717847\n333191345\n831981100\n665717847\n831981101\n", "26673909\n312584066\n906195896\n646959648\n760799621\n285910157\n26673909\n334375582\n835938955\n264118641\n312584066\n96930850\n145396275\n717216589\n765682014\n48465425\n857730471\n123604759\n717216589\n642077255\n787473530\n501563373\n215653216\n765682014\n646959648\n108381283\n26673909\n48465425\n642077255\n884404380\n167187791\n26673909\n290792550\n646959648\n765682014\n75139334\n614792020\n172070184\n48465425\n528237282\n334375582\n571820314\n571820314\n528237282\n646959648\n884404380\n550028798\n242327125\n879521987\n409514916\n", "635246412\n635246412\n544496942\n272248471\n907494883\n", "550803098\n550803098\n654164941\n103361843\n654164941\n550803098\n103361843\n103361843\n654164941\n103361843\n103361843\n103361843\n103361843\n103361843\n276551708\n654164941\n654164941\n138275854\n550803098\n103361843\n", "297511613\n595023226\n756311680\n756311680\n756311680\n595023226\n297511613\n378155840\n595023226\n297511613\n514379007\n297511613\n595023226\n892534847\n136223167\n514379007\n378155840\n297511613\n595023226\n378155840\n", "561258918\n61460660\n467715765\n187086306\n374172612\n538110090\n143496024\n251118042\n903349037\n374172612\n", "2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n", "59109317\n951618303\n17898146\n105735367\n951618303\n675623373\n487465664\n505363810\n736385984\n974931328\n", "11284873\n329090227\n33854619\n45139492\n504764613\n995500935\n33854619\n504764613\n22569746\n504764613\n516049486\n22569746\n516049486\n538619232\n33854619\n33854619\n45139492\n538619232\n22569746\n504764613\n538619232\n22569746\n33854619\n549904105\n516049486\n504764613\n549904105\n538619232\n504764613\n11284873\n990014099\n516049486\n504764613\n33854619\n504764613\n527334359\n504764613\n45139492\n663667290\n33854619\n45139492\n45139492\n", "853605709\n708967065\n708967065\n853605709\n708967065\n708967065\n708967065\n922030188\n708967065\n922030188\n853605709\n853605709\n708967065\n922030188\n708967065\n461015094\n853605709\n853605709\n708967065\n708967065\n", "436731907\n873463814\n873463814\n873463814\n873463814\n873463814\n873463814\n436731907\n873463814\n436731907\n873463814\n436731907\n873463814\n436731907\n436731907\n873463814\n436731907\n873463814\n873463814\n436731907\n", "528451192\n658031067\n259159750\n828137710\n218632982\n957717585\n838269402\n848401094\n218632982\n688426143\n942792071\n398871317\n678294451\n807874326\n129579875\n419134701\n787610942\n139711567\n139711567\n368476241\n378607933\n139711567\n498056116\n848401094\n787610942\n698557835\n797742634\n967849277\n927322509\n957717585\n", "265429165\n98093399\n859759619\n646262275\n738585431\n455845720\n311590743\n548168876\n144254977\n502007298\n975163564\n380833110\n288509954\n502007298\n905921197\n571249665\n669343064\n525088087\n75012610\n715504642\n502007298\n548168876\n784747009\n288509954\n502007298\n761666220\n761666220\n646262275\n288509954\n167335766\n242348376\n144254977\n738585431\n51931821\n478926509\n646262275\n646262275\n98093399\n715504642\n190416555\n784747009\n167335766\n288509954\n121174188\n357752321\n859759619\n", "123180764\n123180764\n123180764\n123180766\n123180764\n123180764\n123180766\n123180766\n123180766\n123180764\n123180766\n123180766\n123180766\n123180764\n123180764\n123180766\n123180766\n123180766\n123180764\n123180764\n123180766\n123180766\n123180764\n123180764\n123180766\n123180766\n123180764\n123180766\n123180764\n123180766\n123180764\n123180764\n123180766\n123180766\n123180766\n123180764\n123180764\n123180766\n123180766\n123180764\n123180764\n123180766\n123180764\n123180764\n123180766\n123180764\n123180766\n123180766\n123180764\n123180764\n", "399967190\n806628868\n604971651\n399967190\n3347244\n800038448\n225087925\n16736220\n621707871\n420050654\n816670600\n228435169\n208351705\n225087925\n231782413\n26777952\n3347244\n51806110\n13388976\n30125196\n399967190\n601624407\n23430708\n225087925\n399967190\n628402359\n420050654\n826712332\n205004461\n823365088\n", "552990868\n90431251\n712871250\n952916426\n537881559\n151361542\n321464532\n89445141\n86037605\n17799187\n586392419\n241031286\n40642277\n699465709\n481837969\n920500985\n572000768\n195703359\n903238702\n911489090\n", "175780254\n94650906\n163530008\n802992688\n561362014\n881093354\n522311681\n319731340\n802992688\n881093354\n959194020\n241630674\n959194020\n802992688\n280681007\n241630674\n241630674\n124479675\n881093354\n163530008\n842043021\n124479675\n124479675\n13521558\n600412347\n600412347\n483261348\n67607790\n444211015\n639462680\n319731340\n163530008\n280681007\n163530008\n202580341\n444211015\n444211015\n920143687\n522311681\n802992688\n483261348\n959194020\n920143687\n", "380563607\n529890998\n551838435\n502062638\n635094670\n380563607\n954349479\n816391328\n358616170\n386444530\n907437062\n645509106\n717232340\n336668733\n954349479\n623561669\n954349479\n77604157\n314721296\n453480088\n645509106\n480115201\n907437062\n725742999\n380563607\n362831759\n725981442\n838731371\n976296916\n362990721\n932402042\n551838435\n286892936\n5880923\n832850448\n998164872\n761127214\n529890998\n5880923\n502062638\n645509106\n181137696\n181296658\n408391967\n739179777\n193222265\n904573682\n695284903\n725663518\n976296916\n", "976715988\n573793375\n391885813\n865390672\n244178997\n209978251\n599683310\n965679188\n634429229\n89796951\n", "394710173\n789420346\n580596339\n789420346\n185886166\n789420346\n580596339\n185886166\n394710173\n394710173\n185886166\n394710173\n581788048\n789420346\n636898629\n185886166\n185886166\n975306512\n580596339\n580596339\n394710173\n394710173\n55110581\n185886166\n55110581\n394710173\n975306512\n975306512\n975306512\n580596339\n789420346\n789420346\n789420346\n394710173\n789420346\n580596339\n580596339\n975306512\n789420346\n394710173\n580596339\n", "23677346\n418239618\n800963217\n220958482\n615520754\n11838673\n627359427\n220958482\n35516019\n615520754\n836479236\n11838673\n639198100\n11838673\n639198100\n848317909\n824640563\n406400945\n209119809\n209119809\n71032038\n639198100\n406400945\n398538577\n627359427\n71032038\n603682081\n418239618\n19778681\n603682081\n651036773\n256474501\n35516019\n824640563\n35516019\n430078291\n615520754\n639198100\n800963217\n627359427\n418239618\n209119809\n406400945\n812801890\n11838673\n35516019\n800963217\n406400945\n209119809\n603682081\n662875446\n406400945\n824640563\n824640563\n406400945\n406400945\n406400945\n11838673\n232797155\n603682081\n11838673\n430078291\n812801890\n603682081\n812801890\n11838673\n812801890\n244635828\n406400945\n836479236\n209119809\n118672086\n824640563\n603682081\n603682081\n406400945\n59193365\n232797155\n812801890\n824640563\n651036773\n209119809\n23677346\n674714119\n220958482\n244635828\n232797155\n603682081\n603682081\n406400945\n209119809\n406400945\n603682081\n11838673\n441916964\n232797155\n603682081\n615520754\n406400945\n418239618\n", "386033769\n373559702\n643389615\n677156688\n85785282\n507867516\n317129978\n557604333\n299639299\n790016136\n959305308\n803246569\n74071672\n564297240\n564297240\n112859448\n631676005\n34981358\n760353928\n751077091\n386033769\n130350127\n751077091\n760353928\n130350127\n760353928\n717461287\n581787919\n395008068\n91411082\n790016136\n412498747\n299639299\n631676005\n159856954\n959305308\n338578344\n717461287\n112859448\n814960179\n73920403\n169289172\n451437792\n807506815\n733586412\n243209575\n317129978\n857852820\n", "459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n533798960\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n", "42365832\n603712812\n124449607\n524276926\n161519661\n283321379\n362757265\n481911094\n203885493\n839372581\n283321379\n280673490\n399827319\n121801718\n683148698\n680500809\n360109376\n243603436\n42365832\n203885493\n240955547\n680500809\n521629037\n124449607\n561346980\n240955547\n479263205\n958526410\n362757265\n881738413\n", "973938381\n973938381\n973938381\n791643586\n973938381\n973938381\n973938381\n986091367\n973938381\n973938381\n", "813231583\n458087744\n445793615\n651101155\n484645642\n506668954\n896602699\n556862659\n145127201\n302005399\n558418033\n213871822\n57299634\n564466143\n767349204\n290138481\n12657688\n925337836\n827843024\n119362169\n", "971203339\n971203339\n971203339\n971203339\n971203339\n754874965\n971203339\n971203339\n971203339\n971203339\n", "729284231\n60340485\n239647233\n389641092\n20685064\n829280137\n389641092\n918933511\n529292419\n629288325\n366487398\n808595073\n579290372\n829280137\n829280137\n41331201\n389641092\n110338438\n239647233\n249989765\n679286278\n629288325\n426374038\n968931464\n160336391\n629288325\n49997953\n718941699\n579290372\n918933511\n539634951\n808595073\n89829960\n818937605\n539634951\n349985671\n968931464\n958588932\n210334344\n589632904\n", "51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n", "260411572\n520823144\n520823144\n520823144\n260411572\n260411572\n520823144\n260411572\n260411572\n260411572\n520823144\n260411572\n260411572\n520823144\n260411572\n520823144\n260411572\n520823144\n260411572\n520823144\n260411572\n520823144\n520823144\n520823144\n260411572\n520823144\n520823144\n520823144\n520823144\n260411572\n"]}, "generated_tests": {"input": ["10 10\n0 1 0 0 0 1 1 1 1 1\n12 18 6 18 7 2 9 18 1 9\n", "50 50\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1\n1 10 24 8 8 11 21 11 8 5 16 32 31 15 29 14 16 20 5 18 5 10 31 23 21 4 4 20 20 11 1 4 4 15 9 14 5 30 13 16 32 27 19 10 19 24 21 1 21 15\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 5 8 8\n", "45 50\n0 1 0 1 0 1 0 1 1 0 0 1 0 0 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0\n4 4 23 23 13 38 9 16 4 18 20 15 21 24 22 20 22 1 15 7 10 17 20 6 15 7 4 10 16 7 14 9 13 17 10 14 22 23 3 5 20 11 4 24 24\n", "47 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n30 32 21 7 15 4 39 36 23 17 13 4 8 18 38 24 13 27 37 27 32 16 8 12 7 23 28 38 11 36 19 33 10 34 4 8 5 22 3 29 21 30 7 32 35 26 15\n", "20 30\n0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n3 4 1 2 1 1 1 2 5 2 1 2 3 1 1 2 3 2 1 2\n", "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1\n2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 2 1 2 1 2 1 1 1 1 2 1\n", "20 20\n1 1 1 1 0 1 1 1 0 1 0 1 0 0 1 0 0 1 0 1\n1 13 7 11 17 15 19 18 14 11 15 1 12 4 5 16 14 11 18 9\n", "30 30\n0 1 1 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0\n5 20 47 27 17 5 18 30 43 23 44 6 47 8 23 41 2 46 27 33 45 27 33 16 36 2 42 36 8 23\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n61 1264 320 1007 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 62 2521\n", "20 30\n0 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0\n244 1901 938 1350 1010 763 266 2158 1645 534 1356 563 295 1449 2306 224 1302 195 639 810\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n765 451 7275 385 1686 78 554 114 1980 394 776 232 627 760 1353 7 486 32 1100 1516\n", "30 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 2 1 2 2 0 2 1 2 1 1 2 2 1 2 1 2 1 2 2 2 1 1 2 1 2 2\n", "10 10\n0 0 0 0 0 0 0 1 0 0\n8 33 37 18 30 48 45 32 25 48\n", "30 30\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n3 1 1 2 1 2 2 2 2 2 1 1 2 2 2 1 2 2 2 1 2 1 1 1 1 1 2 1 1 1\n", "50 50\n1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n2 1 1 2 2 1 2 1 1 2 2 2 1 2 2 1 1 1 2 1 2 1 2 2 2 1 2 1 1 2 2 2 2 2 1 2 2 2 2 2 2 1 2 1 2 2 2 1 1 2\n", "50 50\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "20 30\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n128 673 205 490 611 1294 283 1690 1466 1896 272 19 1020 5032 357 1500 36 1749 1202 176\n", "50 50\n0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 20 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "10 10\n1 1 1 0 1 1 1 0 1 1\n2 1 2 2 1 1 1 1 1 1\n", "48 50\n1 0 1 0 1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1\n42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 13 42 42\n", "10 10\n1 1 1 1 1 1 1 1 1 1\n1 2 0 1 2 2 2 1 1 1\n", "50 50\n0 0 1 0 0 0 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 1 1 0 0 1 1 0 0 1 1 0 1 0 0 0 0\n1 1 1 1 1 2 2 1 1 2 2 2 1 1 1 2 2 2 1 1 1 1 2 1 1 1 2 1 1 1 1 2 2 1 1 2 1 1 2 2 2 2 2 2 2 2 2 1 2 1\n", "20 30\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 22866628 26210661 26210661 26210661 26210661 26210661\n", "30 30\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n41 39 15 34 45 27 18 7 48 12 46 11 24 16 35 43 7 31 26 17 30 15 5 9 29 20 21 37 3 7\n", "44 50\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n2 6 6 11 2 4 11 10 5 15 15 20 20 7 9 8 17 4 16 19 12 16 12 13 1 11 20 2 6 10 2 18 7 5 18 10 15 6 11 9 7 5 17 11\n", "20 30\n0 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1\n66166717 200301718 6725634 95379617 42880832 48874211 64912554 36809296 13248978 58406666 53142218 45080678 19902257 58554006 23570140 2842081 7589423 78746789 11072716 52395211\n", "10 10\n1 0 0 0 1 1 1 0 1 0\n1 2 0 2 1 1 2 2 2 1\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n34095514 37349809 60555988 40280455 19504485 77297461 41415742 66290058 20631093 185280391 7151718 64927972 13085370 4317891 24600598 24588269 60808977 9108470 13217752 191209824\n", "30 50\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\n1 2 1 1 2 1 1 1 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 2 2 1 1 2 2 2\n", "47 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 1 39 39 39 39 39 39 39 39 39 39 39 39 39 39\n", "50 50\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1\n33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 59 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33\n", "50 50\n1 0 1 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 1 0 1 1 0 0 1 1 0 0 1 0 0 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0\n", "49 50\n0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0\n2 3 2 3 4 2 1 1 1 1 1 1 3 1 2 3 2 4 1 2 2 1 1 2 4 3 2 4 1 2 1 1 2 3 1 3 3 2 2 1 4 3 4 1 3 0 4 1 3\n", "50 50\n0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n2 1 1 1 1 2 2 1 1 1 2 2 2 1 2 1 2 2 2 1 1 1 1 2 2 1 1 1 1 2 1 2 2 2 2 1 1 1 2 1 2 1 1 2 2 1 1 2 2 1\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 8618772 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "20 30\n1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 4 1 3 1 4 1 5 1 1 2 3 1 1 3 3 2 2 1 2\n", "40 40\n1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1\n28 13 22 35 22 13 23 35 14 36 30 10 10 15 3 9 35 35 9 29 14 28 8 29 22 30 4 31 39 24 4 19 37 4 20 7 11 17 3 25\n", "50 50\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n49 34 4 15 32 20 22 35 3 28 15 17 4 46 16 11 45 42 11 4 15 36 29 10 27 32 1 1 23 11 6 34 35 19 11 5 2 37 9 20 39 33 27 4 21 33 6 23 37 50\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\n1 2 2 2 2 2 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 3 1 2 2 2 1 1 1 1 2 2 2 1 2 2 1 2 2 1 1 2 2 2 2 2 1 2 2 1\n", "5 5\n0 1 0 0 1\n9 8 2 8 8\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 3 2 0 3 2 1 1 2 1 1 2 2 4 2 1 5 2 3\n", "5 5\n0 1 0 0 1\n2 4 0 2 1\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n25 31 0 45 2 6 25 14 35 23 31 16 24 36 44 8 18 41 36 3 27 21 15 44 45 45 25 8 3 43 7 25 48 45 44 33 25 49 8 46 14 12 12 46 45 43 29 40 1 47\n", "5 50\n1 1 1 1 1\n1 1 4 1 3\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0\n1 1 3 2 3 1 2 2 3 2 2 2 2 2 2 3 3 1 1 2\n", "20 30\n0 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1\n1 2 2 2 2 2 1 1 2 1 4 1 2 5 3 4 0 1 2 1\n"], "output": ["473555370\n903639530\n236777685\n710333055\n775362809\n987732706\n451819765\n903639530\n493866353\n451819765\n", "677900013\n789534012\n297690664\n847224799\n431978339\n541031378\n260479331\n541031378\n431978339\n155173867\n863956678\n394166137\n51768990\n186056665\n700359558\n506401005\n863956678\n620695468\n394767006\n223267998\n394767006\n310347734\n163482493\n618035004\n260479331\n922734576\n922734576\n580823671\n620695468\n469189672\n230683644\n922734576\n922734576\n186056665\n111633999\n234837957\n155173867\n931043202\n4154313\n863956678\n394166137\n238992270\n390011824\n789534012\n901168011\n297690664\n851379112\n230683644\n260479331\n465521601\n", "492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n492836012\n807144684\n492836012\n492836012\n", "3734563\n860782237\n770157002\n207837186\n261698418\n690598604\n257963855\n448395889\n860782237\n515927710\n18672815\n482761418\n269167544\n22407378\n242202715\n310933773\n519662273\n963878824\n482761418\n755218750\n654589063\n414030360\n18672815\n504724021\n762687876\n755218750\n3734563\n508458584\n448395889\n757685650\n512193147\n257963855\n551492476\n265432981\n508458584\n512193147\n519662273\n207837186\n751484187\n254229292\n310933773\n620223534\n860782237\n173471657\n22407378\n", "447524112\n876656794\n512915749\n503720034\n223762056\n858265364\n382132475\n736677805\n942048431\n652894738\n792873727\n858265364\n718286375\n867461079\n167566134\n158370419\n792873727\n802069442\n951244146\n802069442\n876656794\n438328397\n718286375\n578307386\n503720034\n942048431\n18391430\n167566134\n363741045\n736677805\n83783067\n92978782\n149174704\n307545123\n858265364\n718286375\n74587352\n727482090\n643699023\n232957771\n512915749\n447524112\n503720034\n876656794\n522111464\n587503101\n223762056\n", "654164941\n206723686\n550803098\n103361843\n138275854\n550803098\n550803098\n103361843\n757526784\n276551708\n550803098\n103361843\n654164941\n550803098\n550803098\n103361843\n654164941\n103361843\n550803098\n103361843\n", "469266404\n234633202\n234633202\n234633202\n469266404\n234633202\n234633202\n469266404\n234633202\n234633202\n234633202\n469266404\n234633202\n234633202\n234633202\n234633202\n469266404\n469266404\n469266404\n469266404\n83247817\n469266404\n234633202\n469266404\n83247817\n234633202\n234633202\n234633202\n469266404\n234633202\n", "469654603\n116043721\n292849162\n174978868\n723986658\n57108574\n937482633\n467828030\n9021746\n174978868\n580091501\n469654603\n863370942\n287790314\n351784309\n152916903\n9021746\n174978868\n296812060\n233914015\n", "467316474\n766182644\n3689378\n327371383\n390982788\n191545661\n489915509\n151029613\n449399461\n352815945\n718354171\n828801405\n200148573\n947355229\n681461170\n238315416\n985522072\n705631890\n235751087\n289204540\n725666596\n235751087\n289204540\n896466105\n769243295\n276267135\n810388070\n979831018\n106824187\n352815945\n", "453937228\n302660253\n619971041\n706285442\n60962524\n177463139\n821223786\n634387021\n805983155\n748440221\n802416041\n49141483\n121777524\n716396688\n657256034\n354926278\n93153581\n44307146\n326007287\n713419670\n", "563460600\n610229033\n938740725\n337784704\n267501806\n868238190\n221512548\n761310666\n663006606\n774936856\n703090578\n4811724\n43011303\n891425400\n312266703\n328161256\n410070771\n417577304\n231905902\n659519498\n", "392630928\n908712899\n915270848\n921815063\n935792078\n75265111\n253019176\n340366936\n605179433\n738529431\n390447234\n44693395\n873773795\n938120436\n729649991\n633856783\n85019402\n901142302\n779874953\n515792643\n", "946870976\n946870976\n946870976\n946870976\n895497599\n946870976\n895497599\n895497599\n0\n895497599\n946870976\n895497599\n946870976\n917647784\n895497599\n895497599\n946870976\n895497599\n917647784\n895497599\n946870976\n895497599\n895497599\n895497599\n946870976\n946870976\n895497599\n946870976\n895497599\n895497599\n", "838220147\n88583415\n8571312\n139067713\n897275757\n38099117\n846791459\n148582349\n248607621\n38099117\n", "278570322\n92856774\n92856774\n92720632\n92856774\n185713548\n185713548\n185713548\n185713548\n185713548\n92856774\n92856774\n185713548\n185713548\n185713548\n92856774\n185713548\n185713548\n185713548\n92856774\n185713548\n92856774\n92856774\n92856774\n92856774\n92856774\n185713548\n92856774\n92856774\n92856774\n", "67189527\n532716940\n532716940\n67189527\n67189527\n532716940\n67189527\n532716940\n691092245\n67189527\n67189527\n67189527\n532716940\n67189527\n67189527\n532716940\n532716940\n532716940\n67189527\n532716940\n67189527\n532716940\n67189527\n67189527\n67189527\n532716940\n67189527\n532716940\n532716940\n67189527\n67189527\n67189527\n67189527\n67189527\n532716940\n67189527\n67189527\n67189527\n67189527\n67189527\n67189527\n532716940\n67189527\n532716940\n67189527\n67189527\n67189527\n532716940\n532716940\n67189527\n", "216777946\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n216777946\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n632935184\n", "173882576\n290339261\n322099890\n416083148\n954798153\n10916549\n509224052\n49743592\n743693437\n579146951\n369500474\n150591239\n886504601\n846292651\n360188828\n540319908\n548026651\n254673136\n385060624\n239088542\n", "172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n784246292\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n468478780\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n172952597\n", "557665834\n278832917\n557665834\n860641749\n278832917\n278832917\n278832917\n929443051\n278832917\n278832917\n", "439342695\n358554319\n439342695\n358554319\n439342695\n358554319\n358554319\n439342695\n358554319\n358554319\n358554319\n439342695\n439342695\n358554319\n358554319\n358554319\n439342695\n358554319\n439342695\n358554319\n439342695\n358554319\n358554319\n439342695\n358554319\n439342695\n439342695\n358554319\n358554319\n358554319\n358554319\n358554319\n358554319\n439342695\n439342695\n358554319\n358554319\n439342695\n358554319\n439342695\n358554319\n358554319\n358554319\n358554319\n358554319\n705174166\n358554319\n439342695\n", "614304219\n230364085\n0\n614304219\n230364085\n230364085\n230364085\n614304219\n614304219\n614304219\n", "468763086\n468763086\n510052969\n468763086\n468763086\n937526172\n21861585\n468763086\n510052969\n21861585\n21861585\n937526172\n510052969\n510052969\n468763086\n21861585\n21861585\n937526172\n510052969\n510052969\n510052969\n510052969\n21861585\n510052969\n468763086\n510052969\n937526172\n510052969\n468763086\n510052969\n468763086\n937526172\n937526172\n468763086\n510052969\n21861585\n468763086\n468763086\n21861585\n21861585\n937526172\n937526172\n21861585\n21861585\n937526172\n21861585\n937526172\n468763086\n937526172\n468763086\n", "851159088\n10736347\n851159088\n851159088\n851159088\n851159088\n851159088\n851159088\n851159088\n851159088\n851159088\n851159088\n851159088\n851159088\n131985893\n851159088\n851159088\n851159088\n851159088\n851159088\n", "634100655\n703007975\n423963737\n894434847\n273646858\n563485856\n708405355\n330948991\n558088476\n139522119\n35712613\n377456364\n279044238\n186029492\n656500602\n749515348\n330948991\n609993229\n801420101\n946339600\n847927474\n423963737\n806817481\n853324854\n87617366\n232536865\n992846973\n180632112\n284441618\n330948991\n", "590956814\n774626089\n774626089\n255529418\n590956814\n125460364\n255529418\n958295364\n479147682\n439198693\n439198693\n627301820\n918346375\n71860143\n662816957\n367338550\n31911154\n183669275\n734677100\n622867968\n551007825\n734677100\n551007825\n846486232\n295478407\n255529418\n918346375\n590956814\n774626089\n958295364\n590956814\n327389561\n71860143\n156825455\n327389561\n958295364\n439198693\n774626089\n255529418\n662816957\n71860143\n479147682\n31911154\n255529418\n", "257484996\n53426016\n246435348\n184679567\n536414098\n49683679\n619243195\n68894089\n967920890\n949732543\n723199797\n157392070\n755807488\n975623289\n815353140\n589915470\n524226709\n375742693\n28950530\n705602268\n", "587583930\n34317168\n0\n34317168\n587583930\n587583930\n176923507\n34317168\n176923507\n17158584\n", "125362281\n172923094\n815127088\n772368490\n231859318\n573470614\n435211850\n222287395\n646718514\n115903685\n115590371\n273653272\n449592667\n524916535\n789953876\n591766835\n873287656\n666242591\n469554293\n533332806\n", "509504188\n940750486\n509504188\n509504188\n20764023\n509504188\n509504188\n509504188\n509504188\n509504188\n509504188\n20764023\n509504188\n509504188\n20764023\n509504188\n509504188\n509504188\n20764023\n509504188\n509504188\n20764023\n509504188\n940750486\n20764023\n509504188\n509504188\n20764023\n20764023\n20764023\n", "230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n364261868\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n230791910\n", "169197020\n169197020\n169197020\n683936409\n169197020\n683936409\n169197020\n683936409\n169197020\n683936409\n169197020\n683936409\n169197020\n169197020\n683936409\n169197020\n169197020\n683936409\n169197020\n169197020\n169197020\n683936409\n683936409\n169197020\n169197020\n683936409\n683936409\n169197020\n683936409\n60505132\n683936409\n683936409\n683936409\n169197020\n169197020\n683936409\n683936409\n683936409\n683936409\n169197020\n683936409\n683936409\n683936409\n169197020\n169197020\n169197020\n683936409\n683936409\n169197020\n683936409\n", "959079206\n321769424\n959079206\n321769424\n321769424\n959079206\n959079206\n959079206\n321769424\n321769424\n321769424\n959079206\n959079206\n959079206\n959079206\n321769424\n959079206\n321769424\n959079206\n321769424\n959079206\n321769424\n959079206\n321769424\n959079206\n321769424\n321769424\n959079206\n321769424\n321769424\n959079206\n321769424\n959079206\n321769424\n959079206\n321769424\n959079206\n321769424\n959079206\n959079206\n321769424\n321769424\n959079206\n959079206\n321769424\n321769424\n959079206\n321769424\n321769424\n0\n", "20049058\n30073587\n20049058\n30073587\n40098116\n20049058\n10024529\n873385585\n10024529\n10024529\n873385585\n873385585\n30073587\n10024529\n20049058\n30073587\n20049058\n40098116\n10024529\n20049058\n20049058\n10024529\n10024529\n20049058\n40098116\n30073587\n748526817\n40098116\n10024529\n20049058\n10024529\n10024529\n20049058\n30073587\n10024529\n623668049\n623668049\n20049058\n20049058\n873385585\n40098116\n30073587\n498809281\n873385585\n30073587\n0\n40098116\n10024529\n30073587\n", "552462596\n276231298\n276231298\n276231298\n322889716\n552462596\n552462596\n276231298\n276231298\n276231298\n552462596\n552462596\n552462596\n276231298\n552462596\n276231298\n552462596\n552462596\n552462596\n276231298\n276231298\n276231298\n276231298\n552462596\n552462596\n276231298\n276231298\n276231298\n276231298\n552462596\n276231298\n552462596\n552462596\n552462596\n552462596\n276231298\n276231298\n276231298\n552462596\n276231298\n552462596\n276231298\n276231298\n552462596\n552462596\n276231298\n276231298\n552462596\n552462596\n322889716\n", "316931566\n316931566\n316931566\n316931566\n316931566\n316931566\n316931566\n316931566\n316931566\n85954423\n316931566\n316931566\n316931566\n316931566\n316931566\n316931566\n316931566\n316931566\n316931566\n316931566\n", "363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n737096722\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n737096722\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n363460481\n", "973081250\n897591941\n973081250\n922755044\n973081250\n42046375\n973081250\n872428838\n973081250\n973081250\n947918147\n922755044\n973081250\n973081250\n922755044\n922755044\n947918147\n947918147\n973081250\n947918147\n", "66353234\n387322699\n194741020\n582063719\n798027782\n387322699\n838839291\n582063719\n33176617\n227917637\n356305423\n90491441\n451516592\n677274888\n934050460\n805662674\n582063719\n582063719\n805662674\n710451505\n33176617\n652673776\n161564403\n710451505\n194741020\n356305423\n579904378\n2159341\n53443314\n484693209\n579904378\n258934913\n872015908\n579904378\n903033184\n515710485\n97370510\n967227077\n934050460\n130547127\n", "97874741\n237403268\n791293125\n222177248\n340878882\n961732566\n858256952\n185665461\n843030932\n547830110\n222177248\n118701634\n791293125\n614793937\n170439441\n429128476\n666531744\n821745165\n429128476\n791293125\n222177248\n133927654\n496092303\n480866283\n599567917\n340878882\n946506546\n946506546\n806519145\n429128476\n687817511\n237403268\n185665461\n15226020\n429128476\n739555318\n894768739\n82189847\n532604090\n961732566\n976958586\n289141075\n599567917\n791293125\n909994759\n289141075\n687817511\n806519145\n82189847\n407842709\n", "380501342\n761002684\n761002684\n761002684\n761002684\n761002684\n761002684\n380501342\n380501342\n761002684\n761002684\n380501342\n380501342\n761002684\n380501342\n761002684\n761002684\n380501342\n761002684\n380501342\n761002684\n143259673\n380501342\n761002684\n761002684\n761002684\n380501342\n380501342\n380501342\n380501342\n761002684\n761002684\n761002684\n380501342\n761002684\n761002684\n380501342\n761002684\n761002684\n380501342\n380501342\n761002684\n761002684\n761002684\n761002684\n761002684\n873278082\n761002684\n761002684\n380501342\n", "386843019\n241960240\n418713233\n676608579\n241960240\n", "169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n339403084\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n169701542\n499122177\n169701542\n169701542\n169701542\n", "614304219\n614304219\n844668304\n230364085\n0\n844668304\n230364085\n614304219\n614304219\n230364085\n614304219\n614304219\n230364085\n230364085\n460728170\n230364085\n614304219\n76788036\n230364085\n844668304\n", "524385771\n40421756\n0\n524385771\n10105439\n", "494435980\n213802874\n0\n889984764\n239203749\n717611247\n494435980\n676181890\n692210372\n255232231\n213802874\n915385639\n873956282\n312690070\n271260713\n956814996\n156345035\n411577266\n312690070\n857927800\n733639729\n16028482\n296661588\n271260713\n889984764\n61554052\n494435980\n956814996\n857927800\n650781015\n338090945\n494435980\n749668211\n889984764\n271260713\n453006623\n256028774\n370147909\n956814996\n510464462\n676181890\n436978141\n436978141\n510464462\n889984764\n650781015\n972843478\n791097568\n618724051\n130944160\n", "6\n6\n24\n6\n18\n", "298464886\n298464886\n895394658\n596929772\n895394658\n298464886\n596929772\n596929772\n895394658\n596929772\n596929772\n596929772\n596929772\n596929772\n387868983\n82681298\n895394658\n693056668\n298464886\n596929772\n", "392487127\n784974254\n490608912\n490608912\n490608912\n784974254\n392487127\n245304456\n784974254\n392487127\n981217824\n392487127\n784974254\n228277927\n735913368\n981217824\n0\n392487127\n784974254\n245304456\n"]}, "short_description": "1. One-sentence summary  \nCompute, for each item, its expected weighted contribution after M iterative updates of two competing weight sums, using modular arithmetic.  \n\n2. Core algorithmic approach  \nDynamic programming over the number of \u201cgood\u201d increments (from 0 to M), maintaining a probability distribution that is updated in O(k) per step via prefix-accumulation, combined with modular inverses to handle division in the transition.  \n\n3. Reusable components  \n- The `calc(L)` routine: given a distribution array L of size k+1, it builds the next-step distribution of size k+2 in O(k) using running prefix sums (`pl`, `pd`) and modular inverses.  \n- Prefix-accumulation pattern: updating two cumulative terms (`pl`, `pd`) to avoid nested loops during transition, a common trick for linear DP updates.  \n- Modular-inverse power function (`pow(x, P-2, P)`): to perform division under a prime modulus, reusable in any DP or probability computation requiring normalization."}
{"name": "1541_D. Tree Array", "description": "You are given a tree consisting of n nodes. You generate an array from the tree by marking nodes one by one.\n\nInitially, when no nodes are marked, a node is equiprobably chosen and marked from the entire tree. \n\nAfter that, until all nodes are marked, a node is equiprobably chosen and marked from the set of unmarked nodes with at least one edge to a marked node. \n\nIt can be shown that the process marks all nodes in the tree. \n\nThe final array a is the list of the nodes' labels in order of the time each node was marked.\n\nFind the expected number of inversions in the array that is generated by the tree and the aforementioned process.\n\nThe number of inversions in an array a is the number of pairs of indices (i, j) such that i < j and a_i > a_j. For example, the array [4, 1, 3, 2] contains 4 inversions: (1, 2), (1, 3), (1, 4), (3, 4).\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 200) \u2014 the number of nodes in the tree.\n\nThe next n - 1 lines each contains two integers x and y (1 \u2264 x, y \u2264 n; x \u2260 y), denoting an edge between node x and y.\n\nIt's guaranteed that the given edges form a tree.\n\nOutput\n\nOutput the expected number of inversions in the generated array modulo 10^9+7.\n\nFormally, let M = 10^9+7. It can be shown that the answer can be expressed as an irreducible fraction p/q, where p and q are integers and q not \u2261 0 \\pmod{M}. Output the integer equal to p \u22c5 q^{-1} mod M. In other words, output such an integer x that 0 \u2264 x < M and x \u22c5 q \u2261 p \\pmod{M}.\n\nExamples\n\nInput\n\n\n3\n1 2\n1 3\n\n\nOutput\n\n\n166666669\n\n\nInput\n\n\n6\n2 1\n2 3\n6 1\n1 4\n2 5\n\n\nOutput\n\n\n500000009\n\n\nInput\n\n\n5\n1 2\n1 3\n1 4\n2 5\n\n\nOutput\n\n\n500000007\n\nNote\n\nThis is the tree from the first sample:\n\n<image>\n\nFor the first sample, the arrays are almost fixed. If node 2 is chosen initially, then the only possible array is [2, 1, 3] (1 inversion). If node 3 is chosen initially, then the only possible array is [3, 1, 2] (2 inversions). If node 1 is chosen initially, the arrays [1, 2, 3] (0 inversions) and [1, 3, 2] (1 inversion) are the only possibilities and equiprobable. In total, the expected number of inversions is 1/3\u22c5 1 + 1/3 \u22c5 2 + 1/3 \u22c5 (1/2 \u22c5 0 + 1/2 \u22c5 1) = 7/6. \n\n166666669 \u22c5 6 = 7 \\pmod {10^9 + 7}, so the answer is 166666669.\n\nThis is the tree from the second sample: \n\n<image>\n\nThis is the tree from the third sample: \n\n<image>", "solution": "from functools import lru_cache\nfrom collections import deque\n\nM = 10 ** 9 + 7\n\n\n@lru_cache(None)\ndef inv(x):\n    return pow(x, M - 2, M)\n\n\n@lru_cache(None)\ndef dp(u, v):\n    # u before v\n    if u == 0:\n        return 0\n    if v == 0:\n        return 1\n    return (dp(u - 1, v) * inv(2) + dp(u, v - 1) * inv(2)) % M\n\n\ndef calc(n, link, start):\n    res = 0\n    for u in range(1, n + 1):\n        for v in range(u + 1, n + 1):\n            lca = (link[start][u] + link[start][v] - link[u][v]) // 2\n            res += dp(link[start][u] - lca, link[start][v] - lca)\n            res %= M\n    return res\n\n\ndef main():\n    n = int(input())\n    graph = [[] for i in range(n + 1)]\n    ans = 0\n    for _ in range(n - 1):\n        u, v = [int(word) for word in input().split()]\n        graph[u].append(v)\n        graph[v].append(u)\n    link = [[-1 for j in range(n + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        link[i][i] = 0\n        q = deque()\n        q.append(i)\n        while len(q) != 0:\n            u = q.popleft()\n            for v in graph[u]:\n                if link[i][v] >= 0:\n                    continue\n                link[i][v] = link[i][u] + 1\n                q.append(v)\n    for root in range(1, n + 1):\n        ans += calc(n, link, start=root)\n        ans %= M\n    ans *= inv(n)\n    ans %= M\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "difficulty": 10, "public_tests": {"input": ["5\n1 2\n1 3\n1 4\n2 5\n", "3\n1 2\n1 3\n", "6\n2 1\n2 3\n6 1\n1 4\n2 5\n"], "output": ["500000007", "166666669", "500000009"]}, "private_tests": {"input": ["4\n1 2\n2 3\n3 4\n", "2\n1 2\n"], "output": ["3", "500000004"]}, "generated_tests": {"input": ["5\n1 2\n1 3\n1 4\n1 5\n", "6\n2 1\n2 3\n6 1\n1 4\n1 5\n", "6\n2 1\n1 3\n6 1\n1 4\n2 5\n", "2\n2 1\n", "5\n1 2\n1 3\n2 4\n2 5\n", "3\n1 2\n2 3\n", "6\n2 1\n2 3\n6 1\n1 4\n4 5\n", "5\n1 2\n1 3\n2 4\n3 5\n", "6\n2 1\n1 3\n6 1\n2 4\n4 5\n", "5\n1 2\n2 3\n2 4\n3 5\n", "6\n2 1\n2 3\n6 1\n2 4\n4 5\n", "6\n2 1\n2 3\n6 4\n1 4\n4 5\n", "5\n1 2\n4 3\n2 4\n3 5\n", "5\n1 2\n2 3\n3 4\n3 5\n", "5\n1 2\n2 3\n5 4\n3 5\n", "6\n3 1\n2 3\n6 1\n1 4\n1 5\n", "5\n1 2\n2 3\n2 4\n2 5\n", "5\n1 2\n4 3\n2 4\n2 5\n", "6\n3 1\n2 3\n6 1\n1 4\n3 5\n", "4\n1 2\n2 4\n3 4\n", "6\n3 1\n2 6\n6 1\n1 4\n3 5\n", "5\n1 2\n1 3\n1 4\n3 5\n", "6\n2 1\n1 3\n6 2\n1 4\n1 5\n", "5\n1 2\n4 3\n1 4\n3 5\n", "5\n1 2\n2 4\n5 4\n3 5\n", "6\n3 1\n2 3\n6 2\n1 4\n3 5\n", "5\n1 3\n2 4\n5 4\n3 5\n", "5\n1 4\n2 3\n2 4\n3 5\n", "5\n1 3\n2 4\n3 4\n3 5\n", "4\n1 2\n3 4\n3 2\n", "6\n2 1\n2 3\n6 2\n2 4\n2 5\n", "4\n1 2\n1 3\n3 4\n", "6\n2 1\n4 3\n6 1\n1 4\n2 5\n", "6\n2 1\n5 3\n6 1\n1 4\n2 5\n", "5\n1 4\n2 4\n5 4\n3 5\n", "5\n1 2\n2 3\n2 4\n4 5\n", "6\n2 1\n4 3\n6 2\n2 4\n2 5\n", "5\n1 3\n4 3\n2 4\n4 5\n", "5\n1 5\n4 3\n2 4\n4 5\n", "4\n1 3\n2 3\n3 4\n", "5\n1 4\n4 3\n2 4\n2 5\n", "6\n2 1\n5 3\n6 1\n1 4\n4 5\n", "5\n1 5\n2 5\n5 4\n3 5\n", "6\n2 1\n5 3\n6 2\n1 4\n4 5\n", "6\n2 1\n4 3\n6 2\n1 4\n4 5\n", "6\n3 1\n2 6\n6 1\n1 4\n2 5\n", "6\n2 1\n4 3\n6 2\n2 4\n4 5\n", "6\n2 1\n5 3\n6 2\n2 4\n2 5\n", "6\n2 1\n6 3\n6 2\n2 4\n2 5\n", "6\n2 1\n4 3\n6 2\n2 4\n3 5\n", "6\n2 1\n2 3\n6 5\n1 6\n4 5\n", "6\n2 1\n4 3\n6 3\n2 4\n3 5\n", "6\n2 1\n4 3\n6 3\n2 4\n6 5\n", "4\n1 4\n2 4\n3 4\n", "5\n1 2\n1 3\n2 4\n4 5\n", "4\n1 2\n1 3\n1 4\n", "5\n1 2\n2 3\n1 4\n2 5\n", "5\n1 2\n2 3\n1 4\n4 5\n", "6\n2 1\n1 3\n6 1\n1 4\n4 5\n", "6\n2 1\n2 3\n6 2\n1 4\n4 5\n", "5\n1 2\n1 3\n3 4\n3 5\n", "6\n2 1\n1 3\n6 2\n1 4\n2 5\n", "6\n2 1\n2 3\n6 1\n1 4\n3 5\n", "5\n1 2\n2 3\n1 4\n3 5\n", "5\n1 2\n1 3\n5 4\n3 5\n", "5\n1 2\n5 3\n2 4\n2 5\n", "5\n1 2\n1 3\n1 4\n4 5\n", "6\n2 1\n4 3\n6 1\n1 4\n1 5\n", "6\n2 1\n5 3\n6 1\n1 4\n1 5\n", "6\n2 1\n2 3\n6 2\n1 4\n2 5\n", "6\n3 1\n2 3\n6 1\n1 4\n2 5\n", "5\n1 2\n2 3\n1 4\n1 5\n", "5\n1 2\n2 4\n5 2\n3 5\n", "6\n3 1\n2 1\n6 1\n1 4\n2 5\n", "5\n1 3\n4 3\n2 4\n3 5\n", "5\n1 2\n2 3\n3 4\n2 5\n", "5\n1 3\n5 3\n2 4\n2 5\n", "5\n1 2\n4 3\n1 4\n1 5\n", "6\n3 1\n2 1\n6 1\n2 4\n2 5\n", "5\n1 4\n5 3\n2 4\n2 5\n", "5\n1 3\n2 3\n1 4\n4 5\n", "6\n2 1\n2 3\n6 4\n1 4\n1 5\n", "5\n1 2\n2 5\n5 4\n3 5\n", "5\n1 5\n2 4\n3 4\n3 5\n", "5\n1 3\n2 3\n3 4\n2 5\n", "5\n1 3\n5 3\n2 4\n2 1\n", "5\n1 4\n2 4\n5 4\n3 4\n", "5\n1 5\n2 4\n5 4\n3 5\n", "5\n1 3\n2 1\n3 4\n2 5\n", "6\n1 2\n2 3\n6 1\n1 4\n4 5\n", "6\n3 1\n2 3\n6 2\n1 4\n4 5\n", "6\n2 1\n1 3\n6 2\n2 4\n4 5\n", "5\n1 4\n2 3\n5 4\n3 5\n", "6\n2 1\n2 3\n6 3\n1 4\n2 5\n", "5\n1 5\n2 4\n3 4\n3 1\n", "5\n1 3\n4 3\n2 4\n2 5\n", "6\n3 1\n2 4\n6 2\n1 4\n4 5\n", "5\n1 2\n4 3\n1 4\n4 5\n", "6\n2 1\n2 3\n6 5\n1 4\n4 5\n", "5\n1 2\n4 3\n2 4\n4 5\n"], "output": ["600000008\n", "750000011\n", "416666675\n", "500000004\n", "300000006\n", "500000005\n", "666666677\n", "200000005\n", "500000009\n", "100000005\n", "583333343\n", "41666673\n", "400000008\n", "300000007\n", "200000007\n", "416666676\n", "800000010\n", "5\n", "166666674\n", "500000007\n", "583333344\n", "900000010\n", "250000007\n", "200000006\n", "6\n", "916666679\n", "800000012\n", "600000009\n", "800000011\n", "3\n", "500000010\n", "500000006\n", "83333340\n", "291666675\n", "700000011\n", "500000008\n", "83333341\n", "900000012\n", "100000007\n", "250000005\n", "700000010\n", "7\n", "400000009\n", "666666678\n", "125000007\n", "791666679\n", "166666675\n", "250000009\n", "416666677\n", "833333346\n", "500000011\n", "541666678\n", "166666676\n", "750000009\n", "4\n", "250000004\n", "600000008\n", "600000008\n", "750000011\n", "500000009\n", "100000005\n", "500000009\n", "416666675\n", "600000008\n", "5\n", "400000008\n", "300000006\n", "416666676\n", "583333344\n", "916666679\n", "750000011\n", "900000010\n", "400000008\n", "416666675\n", "800000011\n", "800000010\n", "200000007\n", "800000010\n", "500000009\n", "200000007\n", "800000010\n", "500000009\n", "700000011\n", "6\n", "500000008\n", "200000005\n", "200000007\n", "800000012\n", "200000005\n", "666666677\n", "666666677\n", "6\n", "800000012\n", "583333343\n", "600000009\n", "400000008\n", "416666676\n", "300000007\n", "6\n", "500000009\n"]}, "short_description": "1. One-sentence summary:  \n   Computes the sum of pairwise expected values derived from distances in a tree, averaged over all possible starting nodes, under a simple probabilistic \u201crace\u201d model along edges.\n\n2. Core algorithmic approach:  \n   - Breadth-First Search (BFS) for all-pairs shortest distances in an unweighted tree (O(n\u00b7(n+n\u22121))).  \n   - Recursive dynamic programming with memoization (via lru_cache) to compute the probability that one of two walkers meets first, using modular inverses to handle division by two under modulus.\n\n3. Reusable components:  \n   a. BFS distance matrix construction: a routine that, for each node in an unweighted graph, runs BFS to fill a row of the all-pairs distance table.  \n   b. Modular inverse caching: a memoized `inv(x)` wrapper around fast exponentiation to compute x^(M\u22122) mod M, reusable whenever modular division is needed repeatedly.  \n   c. Two-dimensional DP with symmetry: the `dp(u,v)` function that blends results from two smaller subproblems with equal weights, illustrating how to set up and cache binomial-like or random-walk probabilities."}
{"name": "1543_C. Need for Pink Slips", "description": "After defeating a Blacklist Rival, you get a chance to draw 1 reward slip out of x hidden valid slips. Initially, x=3 and these hidden valid slips are Cash Slip, Impound Strike Release Marker and Pink Slip of Rival's Car. Initially, the probability of drawing these in a random guess are c, m, and p, respectively. There is also a volatility factor v. You can play any number of Rival Races as long as you don't draw a Pink Slip. Assume that you win each race and get a chance to draw a reward slip. In each draw, you draw one of the x valid items with their respective probabilities. Suppose you draw a particular item and its probability of drawing before the draw was a. Then,\n\n  * If the item was a Pink Slip, the quest is over, and you will not play any more races. \n  * Otherwise, \n    1. If a\u2264 v, the probability of the item drawn becomes 0 and the item is no longer a valid item for all the further draws, reducing x by 1. Moreover, the reduced probability a is distributed equally among the other remaining valid items. \n    2. If a > v, the probability of the item drawn reduces by v and the reduced probability is distributed equally among the other valid items. \n\n\n\nFor example,\n\n  * If (c,m,p)=(0.2,0.1,0.7) and v=0.1, after drawing Cash, the new probabilities will be (0.1,0.15,0.75). \n  * If (c,m,p)=(0.1,0.2,0.7) and v=0.2, after drawing Cash, the new probabilities will be (Invalid,0.25,0.75). \n  * If (c,m,p)=(0.2,Invalid,0.8) and v=0.1, after drawing Cash, the new probabilities will be (0.1,Invalid,0.9). \n  * If (c,m,p)=(0.1,Invalid,0.9) and v=0.2, after drawing Cash, the new probabilities will be (Invalid,Invalid,1.0). \n\n\n\nYou need the cars of Rivals. So, you need to find the expected number of races that you must play in order to draw a pink slip.\n\nInput\n\nThe first line of input contains a single integer t (1\u2264 t\u2264 10) \u2014 the number of test cases.\n\nThe first and the only line of each test case contains four real numbers c, m, p and v (0 < c,m,p < 1, c+m+p=1, 0.1\u2264 v\u2264 0.9).\n\nAdditionally, it is guaranteed that each of c, m, p and v have at most 4 decimal places.\n\nOutput\n\nFor each test case, output a single line containing a single real number \u2014 the expected number of races that you must play in order to draw a Pink Slip.\n\nYour answer is considered correct if its absolute or relative error does not exceed 10^{-6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is accepted if and only if \\frac{|a - b|}{max{(1, |b|)}} \u2264 10^{-6}.\n\nExample\n\nInput\n\n\n4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.1666\n0.3125 0.6561 0.0314 0.2048\n\n\nOutput\n\n\n1.532000000000\n1.860000000000\n5.005050776521\n4.260163673896\n\nNote\n\nFor the first test case, the possible drawing sequences are: \n\n  * P with a probability of 0.6; \n  * CP with a probability of 0.2\u22c5 0.7 = 0.14; \n  * CMP with a probability of 0.2\u22c5 0.3\u22c5 0.9 = 0.054; \n  * CMMP with a probability of 0.2\u22c5 0.3\u22c5 0.1\u22c5 1 = 0.006; \n  * MP with a probability of 0.2\u22c5 0.7 = 0.14; \n  * MCP with a probability of 0.2\u22c5 0.3\u22c5 0.9 = 0.054; \n  * MCCP with a probability of 0.2\u22c5 0.3\u22c5 0.1\u22c5 1 = 0.006. \n\nSo, the expected number of races is equal to 1\u22c5 0.6 + 2\u22c5 0.14 + 3\u22c5 0.054 + 4\u22c5 0.006 + 2\u22c5 0.14 + 3\u22c5 0.054 + 4\u22c5 0.006 = 1.532.\n\nFor the second test case, the possible drawing sequences are: \n\n  * P with a probability of 0.4; \n  * CP with a probability of 0.4\u22c5 0.6 = 0.24; \n  * CMP with a probability of 0.4\u22c5 0.4\u22c5 1 = 0.16; \n  * MP with a probability of 0.2\u22c5 0.5 = 0.1; \n  * MCP with a probability of 0.2\u22c5 0.5\u22c5 1 = 0.1. \n\n\n\nSo, the expected number of races is equal to 1\u22c5 0.4 + 2\u22c5 0.24 + 3\u22c5 0.16 + 2\u22c5 0.1 + 3\u22c5 0.1 = 1.86.", "solution": "a = 0\n\n\ndef dp(c, m, p, v, h, ans):\n    global a\n    a += h*p*ans\n    if (c > 1e-6):\n        if (m < 1e-6):\n            dp(c-min(c, v), 0, p+min(c, v), v, h+1, ans*c)\n        else:\n            dp(c-min(c, v), m+min(c, v)/2.0, p+min(c, v)/2.0, v, h+1, ans*c)\n    if (m > 1e-6):\n        if (c < 1e-6):\n            dp(0, m-min(m, v), p+min(m, v), v, h+1, ans*m)\n        else:\n            dp(c+min(m, v)/2.0, m-min(m, v), p+min(m, v)/2.0, v, h+1, ans*m)\n\n\nfor _ in range(int(input())):\n    c, m, p, v = map(float, input().split())\n    dp(c, m, p, v, 1.0, 1.0)\n    print(\"%.12f\" % round(a, 12))\n    a = 0\n\n\n\n", "difficulty": 9, "public_tests": {"input": ["4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.1666\n0.3125 0.6561 0.0314 0.2048\n"], "output": ["1.53200000000000002842\n1.86000000000000031974\n5.00505077652118934850\n4.26016367389582129022\n"]}, "private_tests": {"input": ["10\n0.1816 0.7813 0.0371 0.6860\n0.4789 0.1463 0.3748 0.6186\n0.1431 0.3218 0.5351 0.6905\n0.7071 0.0774 0.2155 0.1087\n0.7082 0.0144 0.2774 0.7364\n0.0824 0.4306 0.4870 0.5198\n0.2039 0.7827 0.0134 0.3187\n0.2667 0.5149 0.2184 0.7938\n0.6990 0.2677 0.0333 0.3471\n0.3924 0.5833 0.0243 0.4838\n", "10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.1310\n0.6241 0.0182 0.3577 0.1915\n0.3619 0.4496 0.1885 0.1625\n0.0894 0.1814 0.7292 0.1540\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.1728 0.0840 0.7432 0.1812\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 0.6589\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n", "10\n0.8842 0.1093 0.0065 0.1000\n0.0898 0.3545 0.5557 0.1000\n0.7055 0.0025 0.2920 0.1000\n0.1386 0.3284 0.5330 0.1000\n0.3404 0.4233 0.2363 0.1000\n0.5464 0.1655 0.2881 0.1000\n0.5785 0.2594 0.1621 0.1000\n0.0824 0.5823 0.3353 0.1000\n0.1321 0.3332 0.5347 0.1000\n0.1425 0.2665 0.5910 0.1000\n", "10\n0.5000 0.4999 0.0001 0.1\n0.9998 0.0001 0.0001 0.1\n0.9000 0.0999 0.0001 0.1\n0.4999 0.5000 0.0001 0.1\n0.0001 0.9998 0.0001 0.1\n0.0999 0.9000 0.0001 0.1\n0.7499 0.2499 0.0002 0.1\n0.2499 0.7499 0.0002 0.1\n0.3333 0.6666 0.0001 0.1\n0.6666 0.3333 0.0001 0.1\n", "10\n0.1000 0.1000 0.8000 0.1000\n0.1111 0.1111 0.7778 0.1111\n0.0001 0.0001 0.9998 0.9000\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.1000\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.1111\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.1111\n", "10\n0.5065 0.1174 0.3761 0.2298\n0.6989 0.0765 0.2246 0.1514\n0.3849 0.3842 0.2309 0.2577\n0.0346 0.7749 0.1905 0.2588\n0.0437 0.5817 0.3746 0.2835\n0.4325 0.1767 0.3908 0.2674\n0.0685 0.2148 0.7167 0.1334\n0.0878 0.6096 0.3026 0.3753\n0.8743 0.0866 0.0391 0.3724\n0.5461 0.4521 0.0018 0.1941\n", "10\n0.8515 0.0799 0.0686 0.2153\n0.2236 0.2385 0.5379 0.3363\n0.4637 0.3721 0.1642 0.2219\n0.8111 0.0485 0.1404 0.2490\n0.2948 0.4015 0.3037 0.3669\n0.5501 0.1663 0.2836 0.2424\n0.3575 0.6380 0.0045 0.1191\n0.2614 0.7216 0.0170 0.1361\n0.6003 0.1250 0.2747 0.2130\n0.6938 0.0928 0.2134 0.1655\n", "10\n0.1967 0.7817 0.0216 0.2460\n0.3944 0.5700 0.0356 0.1765\n0.5452 0.3509 0.1039 0.1948\n0.5852 0.0564 0.3584 0.2917\n0.5459 0.1901 0.2640 0.1710\n0.3139 0.2597 0.4264 0.1246\n0.0005 0.2591 0.7404 0.1090\n0.0838 0.8508 0.0654 0.2077\n0.3263 0.4209 0.2528 0.1546\n0.8442 0.0500 0.1058 0.1459\n", "10\n0.5152 0.0641 0.4207 0.3549\n0.5282 0.2963 0.1755 0.5889\n0.3034 0.4603 0.2363 0.4396\n0.2605 0.5686 0.1709 0.4258\n0.5002 0.2449 0.2549 0.1656\n0.3176 0.6277 0.0547 0.5538\n0.7793 0.0018 0.2189 0.3909\n0.9114 0.0771 0.0115 0.1272\n0.1484 0.5567 0.2949 0.5768\n0.0445 0.5753 0.3802 0.5287\n", "10\n0.8364 0.1603 0.0033 0.2798\n0.6620 0.3277 0.0103 0.8276\n0.7076 0.1964 0.0960 0.2560\n0.9330 0.0252 0.0418 0.2643\n0.4571 0.0927 0.4502 0.2549\n0.3186 0.4040 0.2774 0.1129\n0.5609 0.3346 0.1045 0.8026\n0.0905 0.8255 0.0840 0.6710\n0.9730 0.0206 0.0064 0.1903\n0.2420 0.7569 0.0011 0.1418\n"], "output": ["2.82425254469650033329\n1.89070059000000001426\n1.61901558500000009033\n3.22301388833152913094\n1.99387346000000031943\n1.68006593999999997990\n3.68630126561879967184\n2.22437310999999970917\n3.41825818584635054975\n3.09346908695883104912\n", "4.43232336497016632393\n2.03806293676083827293\n2.22627888042582400274\n3.17204317134115854060\n1.33231514217809232647\n4.46909397903456895307\n4.71374200641801532896\n6.05744576510617260823\n1.70334021728854789757\n5.71408133564027931328\n", "1.30489457152000021267\n1.09623004499999998629\n1.93009580269875025138\n2.25928334437324984663\n2.15994210302955025327\n2.53745448561999920045\n1.88398440835374980651\n1.84386738881924161504\n1.77115748500000025345\n3.52979508102473893416\n", "6.28944069117671844538\n6.28944069117671844538\n6.28944069117671844538\n6.28944069117671844538\n6.28944069117671844538\n6.28944069117671844538\n6.28944069117671844538\n6.28944069117671844538\n6.28944069117671844538\n6.28944069117671844538\n", "6.13989828581307328648\n1.69959667830082317153\n2.75202845471630253016\n1.76339130375850761112\n3.13013581048105438143\n2.77737692001620839477\n3.78250026648057069423\n2.50146318126271482996\n1.75879577216819837915\n1.61586488906203928906\n", "6.28944069117671844538\n6.25684880459003345266\n6.15600612750523623617\n6.28944069117671844538\n6.25684880459003345266\n6.15600612750523712435\n6.28068243527533631720\n6.28068243527533542903\n6.28958575885908732772\n6.28958575885908643954\n", "1.23150000000000026112\n1.26128662594650009510\n1.00020003000000023974\n4.44895310884444938893\n4.44895310884445027710\n2.59445026024975078371\n2.59445026024975033963\n5.99704932610435026419\n5.99704932610435026419\n2.49031138921144901133\n", "2.10912660565376031130\n2.96872223770577647883\n2.62597969090580818374\n2.82469399375676832875\n2.06165445200080466037\n2.01906716429382004918\n1.35680306656810056865\n2.20099645869917459606\n3.35655776069218481084\n4.68270579006357401397\n", "3.77511705309783529572\n1.62382897581874985349\n3.09412616726048206317\n3.13931219439470998722\n2.17957527148326501987\n2.42273310909097361332\n5.73941215388832848276\n5.19298118501708927397\n2.52088410373593019287\n2.98227012384405831824\n", "3.97644148614788628393\n4.46421287881283213039\n3.64126898700564538558\n2.10343973427000996423\n2.68569763793642923844\n2.07143790097682334306\n1.32209423142512161320\n3.84805010376990175303\n2.79607997875974501056\n3.92761205704551397133\n", "1.88970615095774996384\n2.33843098406225013974\n2.33285389651745145301\n2.59573693982444453354\n2.74507253230467362926\n2.88436049587855158904\n2.44005770758965567779\n5.39568205780730103527\n2.04136242779599985653\n1.89733515577587530387\n", "3.95644149031171554753\n2.69639044500000002458\n3.35692287608623640693\n3.77081985683845255508\n1.86601494444802185058\n2.79497614060432564287\n2.48413726499999976127\n2.68316703096875031065\n4.64142163673974295079\n5.36601257479024429387\n"]}, "generated_tests": {"input": ["10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.1310\n0.6241 0.0182 0.3577 0.1915\n0.3619 0.4496 0.1885 0.7542640009541799\n0.0894 0.1814 0.7292 0.1540\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.9971573550382836\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n", "10\n0.1000 0.1000 0.8000 0.1000\n0.1111 0.1111 0.7778 0.1111\n0.0001 0.0001 0.9998 0.9000\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.1000\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.1111\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "10\n0.1728 0.0840 0.7432 0.2522626254977407\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 0.6589\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.8364 0.1603 0.0033 0.2798\n0.6620 0.3277 0.0103 0.8276\n0.7076 0.1964 0.0960 0.2560\n0.9330 0.0252 0.0418 0.2643\n0.4571 0.0927 0.4502 0.2549\n0.3186 0.4040 0.2774 0.9475320384280188\n0.5609 0.3346 0.1045 0.8026\n0.0905 0.8255 0.0840 0.6710\n0.9730 0.0206 0.0064 0.1903\n0.2420 0.7569 0.0011 0.1418\n", "10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.1310\n0.6241 0.0182 0.3577 0.1915\n0.3619 0.4496 0.1885 0.7542640009541799\n0.0894 0.1814 0.7292 0.5561305806546627\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.1310\n0.6241 0.0182 0.3577 0.8301052767645739\n0.3619 0.4496 0.1885 0.1625\n0.0894 0.1814 0.7292 0.1540\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.2048\n", "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.8740983965193789\n", "10\n0.8842 0.1093 0.0065 0.1000\n0.0898 0.3545 0.5557 0.1000\n0.7055 0.0025 0.2920 0.1000\n0.1386 0.3284 0.5330 0.1000\n0.3404 0.4233 0.2363 0.6274914323814702\n0.5464 0.1655 0.2881 0.1000\n0.5785 0.2594 0.1621 0.1000\n0.0824 0.5823 0.3353 0.1000\n0.1321 0.3332 0.5347 0.1000\n0.1425 0.2665 0.5910 0.1000\n", "10\n0.8364 0.1603 0.0033 0.2798\n0.6620 0.3277 0.0103 0.8276\n0.7076 0.1964 0.0960 0.2560\n0.9330 0.0252 0.0418 0.2643\n0.4571 0.0927 0.4502 0.9228796247257093\n0.3186 0.4040 0.2774 0.1129\n0.5609 0.3346 0.1045 0.8026\n0.0905 0.8255 0.0840 0.6710\n0.9730 0.0206 0.0064 0.1903\n0.2420 0.7569 0.0011 0.1418\n", "10\n0.1816 0.7813 0.0371 0.6860\n0.4789 0.1463 0.3748 0.6186\n0.1431 0.3218 0.5351 0.6905\n0.7071 0.0774 0.2155 0.1087\n0.7082 0.0144 0.2774 0.7364\n0.0824 0.4306 0.4870 0.5198\n0.2039 0.7827 0.0134 0.3187\n0.2667 0.5149 0.2184 0.7938\n0.6990 0.2677 0.0333 0.9787872624945568\n0.3924 0.5833 0.0243 0.4838\n", "10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.1310\n0.6241 0.0182 0.3577 0.1915\n0.3619 0.4496 0.1885 0.1625\n0.0894 0.1814 0.7292 0.2830359811448656\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 1.5055413890260585\n0.4998 0.4998 0.0004 0.1666\n0.3125 0.6561 0.0314 0.2048\n", "10\n0.1000 0.1000 0.8000 0.1000\n0.1111 0.1111 0.7778 0.1111\n0.0001 0.0001 0.9998 0.9000\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.1000\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.873181103672425\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "10\n0.8842 0.1093 0.0065 0.1000\n0.0898 0.3545 0.5557 0.1000\n0.7055 0.0025 0.2920 0.1000\n0.1386 0.3284 0.5330 0.1000\n0.3404 0.4233 0.2363 0.1000\n0.5464 0.1655 0.2881 0.1000\n0.5785 0.2594 0.1621 0.1000\n0.0824 0.5823 0.3353 0.1000\n0.1321 0.3332 0.5347 0.8276849040090917\n0.1425 0.2665 0.5910 0.1000\n", "4\n0.2 0.2 0.6 0.7675117957901618\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.1666\n0.3125 0.6561 0.0314 0.2048\n", "4\n0.2 0.2 0.6 0.6227555837710543\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.2048\n", "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.1666\n0.3125 0.6561 0.0314 0.9441797836929343\n", "10\n0.1000 0.1000 0.8000 0.1000\n0.1111 0.1111 0.7778 0.1111\n0.0001 0.0001 0.9998 0.9000\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.992075111118174\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.873181103672425\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "10\n0.1728 0.0840 0.7432 0.1812\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.7369820988078326\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 0.6589\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.8842 0.1093 0.0065 0.1000\n0.0898 0.3545 0.5557 0.1000\n0.7055 0.0025 0.2920 0.1000\n0.1386 0.3284 0.5330 0.5213939317440749\n0.3404 0.4233 0.2363 0.1000\n0.5464 0.1655 0.2881 0.1000\n0.5785 0.2594 0.1621 0.1000\n0.0824 0.5823 0.3353 0.1000\n0.1321 0.3332 0.5347 0.8276849040090917\n0.1425 0.2665 0.5910 0.1000\n", "4\n0.2 0.2 0.6 0.6227555837710543\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.9551951921010092\n", "10\n0.1728 0.0840 0.7432 0.2956237598531952\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.7369820988078326\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 0.6589\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.1816 0.7813 0.0371 0.6860\n0.4789 0.1463 0.3748 0.6186\n0.1431 0.3218 0.5351 0.6905\n0.7071 0.0774 0.2155 0.1087\n0.7082 0.0144 0.2774 0.7364\n0.0824 0.4306 0.4870 0.5198\n0.2039 0.7827 0.0134 0.3187\n0.2667 0.5149 0.2184 0.7938\n0.6990 0.2677 0.0333 0.3471\n0.3924 0.5833 0.0243 0.8570637179074134\n", "10\n0.1728 0.0840 0.7432 0.1812\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.8346253136681514\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 0.6589\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.5152 0.0641 0.4207 0.3549\n0.5282 0.2963 0.1755 0.5889\n0.3034 0.4603 0.2363 0.4396\n0.2605 0.5686 0.1709 0.4258\n0.5002 0.2449 0.2549 0.7360562957326762\n0.3176 0.6277 0.0547 0.5538\n0.7793 0.0018 0.2189 0.3909\n0.9114 0.0771 0.0115 0.1272\n0.1484 0.5567 0.2949 0.5768\n0.0445 0.5753 0.3802 0.5287\n", "10\n0.8842 0.1093 0.0065 0.1000\n0.0898 0.3545 0.5557 0.6547649018583258\n0.7055 0.0025 0.2920 0.1000\n0.1386 0.3284 0.5330 0.1000\n0.3404 0.4233 0.2363 0.6274914323814702\n0.5464 0.1655 0.2881 0.1000\n0.5785 0.2594 0.1621 0.1000\n0.0824 0.5823 0.3353 0.1000\n0.1321 0.3332 0.5347 0.1000\n0.1425 0.2665 0.5910 0.1000\n", "4\n0.2 0.2 0.6 0.5300647097278774\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.1666\n0.3125 0.6561 0.0314 0.9441797836929343\n", "10\n0.1000 0.1000 0.8000 0.1000\n0.1111 0.1111 0.7778 0.7283931005478222\n0.0001 0.0001 0.9998 0.9000\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.992075111118174\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.873181103672425\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "10\n0.1816 0.7813 0.0371 0.6860\n0.4789 0.1463 0.3748 0.6236374442119204\n0.1431 0.3218 0.5351 0.6905\n0.7071 0.0774 0.2155 0.1087\n0.7082 0.0144 0.2774 0.7364\n0.0824 0.4306 0.4870 0.5198\n0.2039 0.7827 0.0134 0.3187\n0.2667 0.5149 0.2184 0.7938\n0.6990 0.2677 0.0333 0.3471\n0.3924 0.5833 0.0243 0.4838\n", "10\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.9971573550382836\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.1\n0.5000 0.4999 0.0001 0.7985597000700355\n", "10\n0.8364 0.1603 0.0033 0.2798\n0.6620 0.3277 0.0103 0.8276\n0.7076 0.1964 0.0960 0.2560\n0.9330 0.0252 0.0418 0.2643\n0.4571 0.0927 0.4502 0.8242341375792421\n0.3186 0.4040 0.2774 0.9475320384280188\n0.5609 0.3346 0.1045 0.8026\n0.0905 0.8255 0.0840 0.6710\n0.9730 0.0206 0.0064 0.1903\n0.2420 0.7569 0.0011 0.1418\n", "10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.8340004771310924\n0.6241 0.0182 0.3577 0.1915\n0.3619 0.4496 0.1885 0.1625\n0.0894 0.1814 0.7292 0.2830359811448656\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.5065 0.1174 0.3761 0.2298\n0.6989 0.0765 0.2246 0.1514\n0.3849 0.3842 0.2309 0.2577\n0.0346 0.7749 0.1905 0.2588\n0.0437 0.5817 0.3746 0.2835\n0.4325 0.1767 0.3908 0.2674\n0.0685 0.2148 0.7167 0.453221071622639\n0.0878 0.6096 0.3026 0.3753\n0.8743 0.0866 0.0391 0.3724\n0.5461 0.4521 0.0018 0.1941\n", "10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.9698660028939496\n0.6241 0.0182 0.3577 0.1915\n0.3619 0.4496 0.1885 0.7719803386274371\n0.0894 0.1814 0.7292 0.2830359811448656\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.1000 0.1000 0.8000 0.5460931614544986\n0.1111 0.1111 0.7778 0.1111\n0.0001 0.0001 0.9998 0.9000\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.992075111118174\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.873181103672425\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "10\n0.1728 0.0840 0.7432 0.4641002017300012\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.8346253136681514\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 0.6589\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.5417 0.3601 0.0982 0.939531206190627\n0.5651 0.0015 0.4334 0.8340004771310924\n0.6241 0.0182 0.3577 0.1915\n0.3619 0.4496 0.1885 0.1625\n0.0894 0.1814 0.7292 0.2830359811448656\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.1000 0.1000 0.8000 0.9563646134357469\n0.1111 0.1111 0.7778 0.7283931005478222\n0.0001 0.0001 0.9998 0.9000\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.992075111118174\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.9244765137091563\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "10\n0.5417 0.3601 0.0982 0.9103878471732239\n0.5651 0.0015 0.4334 0.1310\n0.6241 0.0182 0.3577 0.8301052767645739\n0.3619 0.4496 0.1885 0.1625\n0.0894 0.1814 0.7292 0.1540\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.8842 0.1093 0.0065 0.1000\n0.0898 0.3545 0.5557 0.6547649018583258\n0.7055 0.0025 0.2920 0.1000\n0.1386 0.3284 0.5330 0.5000829982031926\n0.3404 0.4233 0.2363 0.6274914323814702\n0.5464 0.1655 0.2881 0.1000\n0.5785 0.2594 0.1621 0.1000\n0.0824 0.5823 0.3353 0.1000\n0.1321 0.3332 0.5347 0.1000\n0.1425 0.2665 0.5910 0.1000\n", "10\n0.5417 0.3601 0.0982 0.939531206190627\n0.5651 0.0015 0.4334 0.8340004771310924\n0.6241 0.0182 0.3577 0.1915\n0.3619 0.4496 0.1885 0.1625\n0.0894 0.1814 0.7292 0.2830359811448656\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.9514108521356196\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.1000 0.1000 0.8000 0.1000\n0.1111 0.1111 0.7778 0.6899657826144154\n0.0001 0.0001 0.9998 0.9000\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.1000\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.1111\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.1111\n", "10\n0.5152 0.0641 0.4207 0.3549\n0.5282 0.2963 0.1755 0.5889\n0.3034 0.4603 0.2363 0.9612479226331125\n0.2605 0.5686 0.1709 0.4258\n0.5002 0.2449 0.2549 0.9830714221623377\n0.3176 0.6277 0.0547 0.5538\n0.7793 0.0018 0.2189 0.3909\n0.9114 0.0771 0.0115 0.1272\n0.1484 0.5567 0.2949 0.5768\n0.0445 0.5753 0.3802 0.5287\n", "10\n0.1728 0.0840 0.7432 0.2522626254977407\n0.0037 0.0880 0.9083 0.8879727875514158\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.9012861626225454\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 1.5863911111808382\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.1728 0.0840 0.7432 0.4641002017300012\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.8346253136681514\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.6623665945688747\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 0.6589\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.5152 0.0641 0.4207 0.7464392863349594\n0.5282 0.2963 0.1755 0.5889\n0.3034 0.4603 0.2363 0.9612479226331125\n0.2605 0.5686 0.1709 0.4258\n0.5002 0.2449 0.2549 0.9830714221623377\n0.3176 0.6277 0.0547 0.5538\n0.7793 0.0018 0.2189 0.3909\n0.9114 0.0771 0.0115 0.1272\n0.1484 0.5567 0.2949 0.5768\n0.0445 0.5753 0.3802 0.5287\n", "10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.1310\n0.6241 0.0182 0.3577 0.8301052767645739\n0.3619 0.4496 0.1885 0.1625\n0.0894 0.1814 0.7292 0.6611753370330722\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.5417 0.3601 0.0982 0.9103878471732239\n0.5651 0.0015 0.4334 0.1310\n0.6241 0.0182 0.3577 0.8301052767645739\n0.3619 0.4496 0.1885 0.1625\n0.0894 0.1814 0.7292 0.1540\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.5895490956949867\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.1728 0.0840 0.7432 0.2522626254977407\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 1.5863911111808382\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.1728 0.0840 0.7432 0.2522626254977407\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 1.6498650458228492\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.1310\n0.6241 0.0182 0.3577 0.9655893661019724\n0.3619 0.4496 0.1885 0.1625\n0.0894 0.1814 0.7292 0.1540\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.1310\n0.6241 0.0182 0.3577 0.1915\n0.3619 0.4496 0.1885 0.7719803386274371\n0.0894 0.1814 0.7292 0.2830359811448656\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "10\n0.1728 0.0840 0.7432 0.2522626254977407\n0.0037 0.0880 0.9083 0.8879727875514158\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 1.5863911111808382\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.8842 0.1093 0.0065 0.1000\n0.0898 0.3545 0.5557 0.1000\n0.7055 0.0025 0.2920 0.1000\n0.1386 0.3284 0.5330 0.1000\n0.3404 0.4233 0.2363 0.1000\n0.5464 0.1655 0.2881 0.1000\n0.5785 0.2594 0.1621 0.1000\n0.0824 0.5823 0.3353 0.1000\n0.1321 0.3332 0.5347 0.5535599517852537\n0.1425 0.2665 0.5910 0.1000\n", "10\n0.8842 0.1093 0.0065 0.1000\n0.0898 0.3545 0.5557 0.1000\n0.7055 0.0025 0.2920 0.1000\n0.1386 0.3284 0.5330 0.1000\n0.3404 0.4233 0.2363 0.1000\n0.5464 0.1655 0.2881 0.1000\n0.5785 0.2594 0.1621 0.1000\n0.0824 0.5823 0.3353 0.1000\n0.1321 0.3332 0.5347 1.464457049004213\n0.1425 0.2665 0.5910 0.1000\n", "4\n0.2 0.2 0.6 0.6581745197047592\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.9551951921010092\n", "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 1.6909725000326161\n0.4998 0.4998 0.0004 0.1666\n0.3125 0.6561 0.0314 0.9441797836929343\n", "10\n0.5152 0.0641 0.4207 0.3549\n0.5282 0.2963 0.1755 0.5889\n0.3034 0.4603 0.2363 0.4396\n0.2605 0.5686 0.1709 0.4258\n0.5002 0.2449 0.2549 0.9830714221623377\n0.3176 0.6277 0.0547 0.5538\n0.7793 0.0018 0.2189 0.3909\n0.9114 0.0771 0.0115 0.1272\n0.1484 0.5567 0.2949 0.5768\n0.0445 0.5753 0.3802 0.5287\n", "10\n0.1000 0.1000 0.8000 0.1000\n0.1111 0.1111 0.7778 0.7283931005478222\n0.0001 0.0001 0.9998 0.9000\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.992075111118174\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.9244765137091563\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "4\n0.2 0.2 0.6 0.5516960220526486\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.8740983965193789\n", "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 1.6909725000326161\n0.4998 0.4998 0.0004 0.8326198680113017\n0.3125 0.6561 0.0314 0.9441797836929343\n", "4\n0.2 0.2 0.6 0.5351589464679942\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.2048\n", "10\n0.8842 0.1093 0.0065 0.1000\n0.0898 0.3545 0.5557 0.1000\n0.7055 0.0025 0.2920 0.1000\n0.1386 0.3284 0.5330 0.1000\n0.3404 0.4233 0.2363 0.1000\n0.5464 0.1655 0.2881 0.1000\n0.5785 0.2594 0.1621 0.1000\n0.0824 0.5823 0.3353 0.1000\n0.1321 0.3332 0.5347 0.5967161739788988\n0.1425 0.2665 0.5910 0.1000\n", "10\n0.1000 0.1000 0.8000 0.5460931614544986\n0.1111 0.1111 0.7778 0.1111\n0.0001 0.0001 0.9998 1.174827513717328\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.992075111118174\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.873181103672425\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "10\n0.1728 0.0840 0.7432 0.4641002017300012\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.8346253136681514\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 1.6448966068512099\n0.8939 0.0752 0.0309 0.3336\n", "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 1.6909725000326161\n0.4998 0.4998 0.0004 0.9660452447590766\n0.3125 0.6561 0.0314 0.9441797836929343\n", "10\n0.1000 0.1000 0.8000 0.5460931614544986\n0.1111 0.1111 0.7778 0.1111\n0.0001 0.0001 0.9998 1.174827513717328\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.992075111118174\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 1.833696523486998\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 0.9915532308827002\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.8740983965193789\n", "4\n0.2 0.2 0.6 0.5300647097278774\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.7626949020556049\n0.3125 0.6561 0.0314 0.9441797836929343\n", "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 1.6909725000326161\n0.4998 0.4998 0.0004 0.1666\n0.3125 0.6561 0.0314 1.8762386290990163\n", "10\n0.1000 0.1000 0.8000 0.1000\n0.1111 0.1111 0.7778 0.7283931005478222\n0.0001 0.0001 0.9998 1.6684685853757126\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.992075111118174\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.9244765137091563\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "4\n0.2 0.2 0.6 0.7465364321856245\n0.4 0.2 0.4 0.9915532308827002\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.8740983965193789\n", "10\n0.1728 0.0840 0.7432 0.2522626254977407\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 1.8400375015286947\n0.8939 0.0752 0.0309 0.3336\n", "4\n0.2 0.2 0.6 0.6227555837710543\n0.4 0.2 0.4 1.6339602853402928\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.2048\n", "4\n0.2 0.2 0.6 0.2\n0.4 0.2 0.4 0.9915532308827002\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.9640745843939621\n", "10\n0.1728 0.0840 0.7432 0.7743390258565918\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.1289\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 0.6589\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.1000 0.1000 0.8000 0.6512969890532325\n0.1111 0.1111 0.7778 0.1111\n0.0001 0.0001 0.9998 1.174827513717328\n0.8000 0.1000 0.1000 0.1000\n0.1000 0.8000 0.1000 0.992075111118174\n0.9000 0.0999 0.0001 0.9000\n0.0999 0.9000 0.0001 0.9000\n0.3333 0.6666 0.0001 0.873181103672425\n0.6666 0.3333 0.0001 0.1111\n0.3333 0.3333 0.3334 0.8159773028139516\n", "4\n0.2 0.2 0.6 0.9023539395585998\n0.4 0.2 0.4 0.9915532308827002\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.9640745843939621\n", "10\n0.1728 0.0840 0.7432 0.4641002017300012\n0.0037 0.0880 0.9083 0.41383213988150436\n0.2245 0.4101 0.3654 0.8346253136681514\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 0.6623665945688747\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 0.6589\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.1728 0.0840 0.7432 0.1812\n0.0037 0.0880 0.9083 0.2447\n0.2245 0.4101 0.3654 0.5047\n0.4838 0.3003 0.2159 0.5311\n0.2491 0.3508 0.4001 1.6767999884098734\n0.5538 0.3570 0.0892 0.6781\n0.4929 0.1311 0.3760 0.5492\n0.0892 0.4530 0.4578 0.2609\n0.4224 0.1357 0.4419 0.6589\n0.8939 0.0752 0.0309 0.3336\n", "10\n0.5417 0.3601 0.0982 0.1086\n0.5651 0.0015 0.4334 0.9698660028939496\n0.6241 0.0182 0.3577 0.1915\n0.3619 0.4496 0.1885 0.7719803386274371\n0.0894 0.1814 0.7292 0.6368233931459525\n0.7853 0.1498 0.0649 0.1417\n0.9355 0.0597 0.0048 0.1810\n0.9060 0.0888 0.0052 0.1004\n0.0523 0.4169 0.5308 0.1969\n0.9919 0.0024 0.0057 0.1176\n", "4\n0.2 0.2 0.6 1.343088170177062\n0.4 0.2 0.4 0.8\n0.4998 0.4998 0.0004 0.7981553462596285\n0.3125 0.6561 0.0314 0.2048\n"], "output": ["4.432323364970166\n2.0380629367608383\n2.2262788804258244\n2.303476365\n1.3323151421780923\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "6.2894406911767184\n6.2894406911767184\n6.2894406911767184\n6.2894406911767184\n2.749750005\n6.2894406911767184\n6.2894406911767184\n6.2894406911767184\n6.2894406911767184\n6.2894406911767184\n", "1.2315000000000003\n1.2612866259465\n1.0002000300000002\n4.448953108844449\n4.448953108844449\n2.5944502602497503\n2.5944502602497503\n5.997049326104349\n5.997049326104349\n1.9998666699999998\n", "1.3042883200000002\n1.096230045\n1.93009580269875\n2.25928334437325\n2.1599421030295503\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "3.9564414903117155\n2.696390445\n3.3569228760862364\n3.770819856838453\n1.866014944448022\n2.11238978\n2.4841372649999998\n2.68316703096875\n4.641421636739741\n5.366012574790244\n", "4.432323364970166\n2.0380629367608383\n2.2262788804258244\n2.303476365\n1.32368348\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "4.432323364970166\n2.0380629367608383\n1.859933265\n3.1720431713411585\n1.3323151421780923\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "1.532\n1.8600000000000003\n2.7490001200000003\n4.26016367389582\n", "1.532\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "6.139898285813073\n1.6995966783008234\n2.7520284547163025\n1.7633913037585076\n2.1994101649999998\n2.777376920016209\n3.7825002664805707\n2.501463181262715\n1.7587957721681984\n1.6158648890620395\n", "3.9564414903117155\n2.696390445\n3.3569228760862364\n3.770819856838453\n1.74331319\n2.7949761406043256\n2.4841372649999998\n2.68316703096875\n4.641421636739741\n5.366012574790244\n", "2.8242525446965003\n1.89070059\n1.6190155849999999\n3.2230138883315287\n1.9938734600000003\n1.68006594\n3.6863012656187992\n2.22437311\n2.621076745\n3.093469086958831\n", "4.432323364970166\n2.0380629367608383\n2.2262788804258244\n3.1720431713411585\n1.32368348\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "1.532\n1.8600000000000003\n5.005050776521189\n4.26016367389582\n", "1.2315000000000003\n1.2612866259465\n1.0002000300000002\n4.448953108844449\n4.448953108844449\n2.5944502602497503\n2.5944502602497503\n2.721977785\n5.997049326104349\n1.9998666699999998\n", "6.139898285813073\n1.6995966783008234\n2.7520284547163025\n1.7633913037585076\n3.1301358104810544\n2.777376920016209\n3.7825002664805707\n2.501463181262715\n1.6175677649999998\n1.6158648890620395\n", "1.52\n1.8600000000000003\n5.005050776521189\n4.26016367389582\n", "1.52\n1.8600000000000003\n2.7490001200000003\n4.26016367389582\n", "1.532\n1.8600000000000003\n5.005050776521189\n2.64272423\n", "1.2315000000000003\n1.2612866259465\n1.0002000300000002\n4.448953108844449\n2.3850000000000002\n2.5944502602497503\n2.5944502602497503\n2.721977785\n5.997049326104349\n1.9998666699999998\n", "1.3048945715200002\n1.096230045\n1.93009580269875\n2.25928334437325\n1.8672242849999998\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "6.139898285813073\n1.6995966783008234\n2.7520284547163025\n1.62156074\n3.1301358104810544\n2.777376920016209\n3.7825002664805707\n2.501463181262715\n1.6175677649999998\n1.6158648890620395\n", "1.52\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "1.3042883200000002\n1.096230045\n1.93009580269875\n2.25928334437325\n1.8672242849999998\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "2.8242525446965003\n1.89070059\n1.6190155849999999\n3.2230138883315287\n1.9938734600000003\n1.68006594\n3.6863012656187992\n2.22437311\n3.4182581858463497\n2.680582165\n", "1.3048945715200002\n1.096230045\n1.92802603\n2.25928334437325\n2.1599421030295503\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "1.88970615095775\n2.33843098406225\n2.3328538965174515\n2.595736939824445\n2.1451859850000004\n2.884360495878551\n2.4400577075896557\n5.395682057807302\n2.041362427796\n1.8973351557758753\n", "6.139898285813073\n1.5748353449999999\n2.7520284547163025\n1.7633913037585076\n2.1994101649999998\n2.777376920016209\n3.7825002664805707\n2.501463181262715\n1.7587957721681984\n1.6158648890620395\n", "1.52\n1.8600000000000003\n5.005050776521189\n2.64272423\n", "1.2315000000000003\n1.25922963\n1.0002000300000002\n4.448953108844449\n2.3850000000000002\n2.5944502602497503\n2.5944502602497503\n2.721977785\n5.997049326104349\n1.9998666699999998\n", "2.8242525446965003\n1.89070059\n1.6190155849999999\n3.2230138883315287\n1.9938734600000003\n1.68006594\n3.6863012656187992\n2.22437311\n3.4182581858463497\n3.093469086958831\n", "6.2894406911767184\n6.2894406911767184\n6.2894406911767184\n6.2894406911767184\n2.749750005\n6.2894406911767184\n6.2894406911767184\n6.2894406911767184\n6.2894406911767184\n2.749750005\n", "3.9564414903117155\n2.696390445\n3.3569228760862364\n3.770819856838453\n1.74331319\n2.11238978\n2.4841372649999998\n2.68316703096875\n4.641421636739741\n5.366012574790244\n", "4.432323364970166\n1.7279654300000002\n2.2262788804258244\n3.1720431713411585\n1.32368348\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "2.10912660565376\n2.968722237705776\n2.625979690905808\n2.8246939937567683\n2.0616544520008047\n2.01906716429382\n1.338143245\n2.2009964586991746\n3.3565577606921857\n4.682705790063574\n", "4.432323364970166\n1.7279654300000002\n2.2262788804258244\n2.303476365\n1.32368348\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "1.2300000000000002\n1.2612866259465\n1.0002000300000002\n4.448953108844449\n2.3850000000000002\n2.5944502602497503\n2.5944502602497503\n2.721977785\n5.997049326104349\n1.9998666699999998\n", "1.3042883200000002\n1.096230045\n1.92802603\n2.25928334437325\n2.1599421030295503\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "2.5034877899999994\n1.7279654300000002\n2.2262788804258244\n3.1720431713411585\n1.32368348\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "1.2300000000000002\n1.25922963\n1.0002000300000002\n4.448953108844449\n2.3850000000000002\n2.5944502602497503\n2.5944502602497503\n2.721977785\n5.997049326104349\n1.9998666699999998\n", "2.5034877899999994\n2.0380629367608383\n1.859933265\n3.1720431713411585\n1.3323151421780923\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "6.139898285813073\n1.5748353449999999\n2.7520284547163025\n1.62156074\n2.1994101649999998\n2.777376920016209\n3.7825002664805707\n2.501463181262715\n1.7587957721681984\n1.6158648890620395\n", "2.5034877899999994\n1.7279654300000002\n2.2262788804258244\n3.1720431713411585\n1.32368348\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.60107819\n5.714081335640281\n", "1.2315000000000003\n1.25922963\n1.0002000300000002\n4.448953108844449\n4.448953108844449\n2.5944502602497503\n2.5944502602497503\n5.997049326104349\n5.997049326104349\n2.490311389211449\n", "1.88970615095775\n2.33843098406225\n2.1949738649999997\n2.595736939824445\n2.1451859850000004\n2.884360495878551\n2.4400577075896557\n5.395682057807302\n2.041362427796\n1.8973351557758753\n", "1.3042883200000002\n1.096230045\n1.93009580269875\n2.236791545\n2.1599421030295503\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "1.3042883200000002\n1.096230045\n1.92802603\n2.25928334437325\n1.8672242849999998\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "1.780118565\n2.33843098406225\n2.1949738649999997\n2.595736939824445\n2.1451859850000004\n2.884360495878551\n2.4400577075896557\n5.395682057807302\n2.041362427796\n1.8973351557758753\n", "4.432323364970166\n2.0380629367608383\n1.859933265\n3.1720431713411585\n1.32368348\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "2.5034877899999994\n2.0380629367608383\n1.859933265\n3.1720431713411585\n1.3323151421780923\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.60107819\n5.714081335640281\n", "1.3042883200000002\n1.096230045\n1.93009580269875\n2.25928334437325\n2.1599421030295503\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "1.3042883200000002\n1.096230045\n1.93009580269875\n2.25928334437325\n2.1599421030295503\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "4.432323364970166\n2.0380629367608383\n1.859933265\n3.1720431713411585\n1.3323151421780923\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "4.432323364970166\n2.0380629367608383\n2.2262788804258244\n2.303476365\n1.32368348\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "1.3042883200000002\n1.096230045\n1.93009580269875\n2.25928334437325\n2.1599421030295503\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "6.139898285813073\n1.6995966783008234\n2.7520284547163025\n1.7633913037585076\n3.1301358104810544\n2.777376920016209\n3.7825002664805707\n2.501463181262715\n1.6175677649999998\n1.6158648890620395\n", "6.139898285813073\n1.6995966783008234\n2.7520284547163025\n1.7633913037585076\n3.1301358104810544\n2.777376920016209\n3.7825002664805707\n2.501463181262715\n1.6175677649999998\n1.6158648890620395\n", "1.52\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "1.532\n1.8600000000000003\n5.005050776521189\n2.64272423\n", "1.88970615095775\n2.33843098406225\n2.3328538965174515\n2.595736939824445\n2.1451859850000004\n2.884360495878551\n2.4400577075896557\n5.395682057807302\n2.041362427796\n1.8973351557758753\n", "1.2315000000000003\n1.25922963\n1.0002000300000002\n4.448953108844449\n2.3850000000000002\n2.5944502602497503\n2.5944502602497503\n2.721977785\n5.997049326104349\n1.9998666699999998\n", "1.52\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "1.532\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "1.52\n1.8600000000000003\n2.7490001200000003\n4.26016367389582\n", "6.139898285813073\n1.6995966783008234\n2.7520284547163025\n1.7633913037585076\n3.1301358104810544\n2.777376920016209\n3.7825002664805707\n2.501463181262715\n1.6175677649999998\n1.6158648890620395\n", "1.2300000000000002\n1.2612866259465\n1.0002000300000002\n4.448953108844449\n2.3850000000000002\n2.5944502602497503\n2.5944502602497503\n2.721977785\n5.997049326104349\n1.9998666699999998\n", "1.3042883200000002\n1.096230045\n1.92802603\n2.25928334437325\n2.1599421030295503\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "1.532\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "1.2300000000000002\n1.2612866259465\n1.0002000300000002\n4.448953108844449\n2.3850000000000002\n2.5944502602497503\n2.5944502602497503\n2.721977785\n5.997049326104349\n1.9998666699999998\n", "1.532\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "1.52\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "1.532\n1.8600000000000003\n5.005050776521189\n2.64272423\n", "1.2315000000000003\n1.25922963\n1.0002000300000002\n4.448953108844449\n2.3850000000000002\n2.5944502602497503\n2.5944502602497503\n2.721977785\n5.997049326104349\n1.9998666699999998\n", "1.52\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "1.3042883200000002\n1.096230045\n1.93009580269875\n2.25928334437325\n2.1599421030295503\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "1.52\n1.8600000000000003\n2.7490001200000003\n4.26016367389582\n", "1.532\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "1.3042883200000002\n1.096230045\n1.93009580269875\n2.25928334437325\n2.1599421030295503\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "1.2300000000000002\n1.2612866259465\n1.0002000300000002\n4.448953108844449\n2.3850000000000002\n2.5944502602497503\n2.5944502602497503\n2.721977785\n5.997049326104349\n1.9998666699999998\n", "1.52\n1.8600000000000003\n2.7490001200000003\n2.64272423\n", "1.3042883200000002\n1.096230045\n1.92802603\n2.25928334437325\n1.8672242849999998\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "1.3048945715200002\n1.096230045\n1.93009580269875\n2.25928334437325\n1.8672242849999998\n2.537454485619999\n1.8839844083537503\n1.8438673888192414\n1.7711574849999998\n3.529795081024739\n", "4.432323364970166\n1.7279654300000002\n2.2262788804258244\n2.303476365\n1.32368348\n4.46909397903457\n4.713742006418015\n6.0574457651061735\n1.7033402172885481\n5.714081335640281\n", "1.52\n1.8600000000000003\n2.7490001200000003\n4.26016367389582\n"]}, "short_description": "1. One-sentence summary  \nCompute the total expected accumulated score over all possible sequences of probabilistic state\u2010transition steps in a continuous Markov\u2010chain\u2013like process.  \n\n2. Core algorithmic approach  \nDepth\u2010first recursion to exhaustively explore all reachable continuous states, carrying forward probability mass and a running product to accumulate the expected contribution (i.e. a DFS\u2010style expected\u2010value calculation without memoization).  \n\n3. Reusable components  \n- A generic recursive\u2010DFS framework that threads a \u201ccurrent probability\u201d or \u201cweight\u201d parameter and accumulates a global or passed\u2010in expectation.  \n- A state\u2010transition helper that, given the current (c,m,p) and limit v, computes all possible next states with their associated transition probabilities and updates.  \n- Pruning logic based on small\u2010epsilon thresholds to stop recursion when a probability pool becomes negligible."}
{"name": "521_D. Shop", "description": "Vasya plays one very well-known and extremely popular MMORPG game. His game character has k skill; currently the i-th of them equals to ai. Also this game has a common rating table in which the participants are ranked according to the product of all the skills of a hero in the descending order.\n\nVasya decided to 'upgrade' his character via the game store. This store offers n possible ways to improve the hero's skills; Each of these ways belongs to one of three types:\n\n  1. assign the i-th skill to b; \n  2. add b to the i-th skill; \n  3. multiply the i-th skill by b. \n\n\n\nUnfortunately, a) every improvement can only be used once; b) the money on Vasya's card is enough only to purchase not more than m of the n improvements. Help Vasya to reach the highest ranking in the game. To do this tell Vasya which of improvements he has to purchase and in what order he should use them to make his rating become as high as possible. If there are several ways to achieve it, print any of them.\n\nInput\n\nThe first line contains three numbers \u2014 k, n, m (1 \u2264 k \u2264 105, 0 \u2264 m \u2264 n \u2264 105) \u2014 the number of skills, the number of improvements on sale and the number of them Vasya can afford.\n\nThe second line contains k space-separated numbers ai (1 \u2264 ai \u2264 106), the initial values of skills.\n\nNext n lines contain 3 space-separated numbers tj, ij, bj (1 \u2264 tj \u2264 3, 1 \u2264 ij \u2264 k, 1 \u2264 bj \u2264 106) \u2014 the type of the j-th improvement (1 for assigning, 2 for adding, 3 for multiplying), the skill to which it can be applied and the value of b for this improvement.\n\nOutput\n\nThe first line should contain a number l (0 \u2264 l \u2264 m) \u2014 the number of improvements you should use.\n\nThe second line should contain l distinct space-separated numbers vi (1 \u2264 vi \u2264 n) \u2014 the indices of improvements in the order in which they should be applied. The improvements are numbered starting from 1, in the order in which they appear in the input. \n\nExamples\n\nInput\n\n2 4 3\n13 20\n1 1 14\n1 2 30\n2 1 6\n3 2 2\n\n\nOutput\n\n3\n2 3 4", "solution": "def euclid(a, b):\n\tif b == 0:\n\t\treturn (1, 0, a)\n\telse:\n\t\t(x, y, g) = euclid(b, a%b)\n\t\treturn (y, x - a//b*y, g)\n\ndef modDivide(a, b, p):\n\t(x, y, g) = euclid(b, p)\n\treturn a // g * (x + p) % p\n\ndef comb(n, k):\n\treturn modDivide(fac[n], fac[k] * fac[n-k] % P, P)\n\nk, n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nskill = []\nl = [[[], [], []] for i in range(k)]\nfor j in range(n):\n\tt = list(map(int, input().split()))\n\tskill.append(t)\n\t(t, i, b) = t\n\tl[i-1][t-1].append((b, j+1))\nfor i in range(k):\n\tfor j in range(3):\n\t\tl[i][j].sort(reverse=True)\nop = []\nfor i in range(k):\n\tt = l[i][1][:]\n\tif len(l[i][0]) != 0 and l[i][0][0][0] > a[i]:\n\t\tt.append((l[i][0][0][0] - a[i], l[i][0][0][1]))\n\t\tt.sort(reverse=True)\n\ts = a[i]\n\tfor (add, index) in t:\n\t\top.append(((s+add)/s, index))\n\t\ts += add\n\tfor (mul, index) in l[i][2]:\n\t\top.append((mul, index))\nop.sort(reverse=True)\nst = set(map(lambda t : t[1], op[:m]))\nprint(len(st))\nfor i in range(k):\n\tfor j in range(3):\n\t\tfor (mul, index) in l[i][j]:\n\t\t\tif index in st:\n\t\t\t\tprint(index, end=' ')\n", "difficulty": 10, "public_tests": {"input": ["2 4 3\n13 20\n1 1 14\n1 2 30\n2 1 6\n3 2 2\n"], "output": ["3\n2 3 4 "]}, "private_tests": {"input": ["10 6 6\n2 2 1 8 5 3 8 5 3 4\n3 8 5\n3 10 1\n3 7 8\n2 3 5\n1 5 1\n3 8 5\n", "1 1 1\n8\n2 1 8\n", "10 10 10\n8 8 8 8 8 8 8 8 8 8\n2 5 8\n2 4 8\n2 1 8\n2 7 8\n2 10 8\n2 9 8\n2 6 8\n2 3 8\n2 2 8\n2 8 8\n", "10 7 7\n4 7 6 3 4 3 5 4 3 6\n2 10 7\n3 6 4\n3 7 3\n3 7 3\n1 10 4\n2 5 5\n2 10 6\n", "10 8 4\n3 4 6 6 1 8 4 8 5 4\n2 7 3\n3 6 4\n2 3 2\n2 5 2\n2 1 6\n3 5 1\n3 8 2\n3 6 7\n", "10 7 6\n4 7 6 3 4 3 5 4 3 6\n3 7 3\n2 10 6\n3 7 3\n3 6 4\n1 10 4\n2 5 5\n2 10 7\n", "10 8 6\n3 4 6 6 1 8 4 8 5 4\n3 8 2\n3 6 4\n3 6 7\n2 1 6\n2 7 3\n3 5 1\n2 5 2\n2 3 2\n", "1 1 1\n8\n1 1 8\n", "10 2 1\n7 4 3 6 2 3 5 7 2 3\n3 2 2\n3 2 1\n", "10 9 0\n2 4 1 2 5 1 4 1 6 8\n2 1 1\n2 1 2\n2 1 2\n2 1 3\n2 1 4\n2 1 5\n2 1 6\n2 1 7\n2 1 8\n", "10 4 4\n2 7 5 7 2 2 4 5 8 5\n2 9 3\n1 3 3\n3 9 1\n2 7 7\n", "2 10 10\n8 8\n1 2 8\n1 1 8\n1 1 8\n1 1 8\n1 2 8\n1 2 8\n1 2 8\n1 1 8\n1 1 8\n1 2 8\n", "10 4 2\n2 7 5 7 2 2 4 5 8 5\n2 9 3\n3 9 1\n1 3 3\n2 7 7\n", "1 10 10\n8\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n", "1 1 1\n1\n3 1 8\n", "4 10 10\n8 8 8 8\n3 4 8\n3 1 8\n3 2 8\n3 1 8\n3 3 8\n3 1 8\n3 2 8\n3 3 8\n3 2 8\n3 4 8\n", "10 0 0\n1 1 1 4 4 8 5 6 1 7\n", "10 6 4\n2 2 1 8 5 3 8 5 3 4\n3 8 5\n3 7 8\n3 8 5\n1 5 1\n2 3 5\n3 10 1\n", "1 0 0\n8\n", "10 10 10\n8 8 8 8 8 8 8 8 8 8\n1 1 8\n1 9 8\n1 10 8\n1 5 8\n1 2 8\n1 7 8\n1 3 8\n1 4 8\n1 8 8\n1 6 8\n", "10 6 2\n2 2 1 8 5 3 8 5 3 4\n3 10 1\n3 7 8\n2 3 5\n3 8 5\n1 5 1\n3 8 5\n", "4 10 10\n8 8 8 8\n1 4 8\n1 3 8\n1 1 8\n1 2 8\n1 4 8\n1 3 8\n1 1 8\n1 2 8\n1 1 8\n1 2 8\n", "9 10 10\n8 8 8 8 8 8 8 8 8\n3 8 8\n3 6 8\n3 1 8\n3 2 8\n3 7 8\n3 3 8\n3 4 8\n3 9 8\n3 1 8\n3 5 8\n", "10 1 1\n3 5 2 8 5 1 8 1 6 8\n1 6 1\n", "10 7 2\n4 7 6 3 4 3 5 4 3 6\n2 5 5\n3 6 4\n2 10 7\n3 7 3\n3 7 3\n1 10 4\n2 10 6\n", "2 10 10\n8 8\n2 1 8\n2 1 8\n2 2 8\n2 2 8\n2 2 8\n2 1 8\n2 1 8\n2 1 8\n2 2 8\n2 2 8\n", "10 4 4\n2 7 5 7 2 2 4 5 8 5\n1 3 3\n2 7 7\n3 9 1\n2 9 3\n", "4 10 10\n8 8 8 8\n2 2 8\n2 1 8\n2 1 8\n2 3 8\n2 2 8\n2 4 8\n2 1 8\n2 4 8\n2 3 8\n2 2 8\n", "1 10 10\n8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n", "10 9 7\n3 3 6 2 1 8 4 1 2 5\n1 1 8\n1 1 8\n1 1 8\n1 1 5\n1 1 4\n1 1 4\n1 1 4\n1 1 3\n1 1 3\n", "10 8 8\n3 4 6 6 1 8 4 8 5 4\n2 5 2\n3 5 1\n2 3 2\n3 6 4\n3 6 7\n3 8 2\n2 7 3\n2 1 6\n", "2 10 10\n8 8\n3 1 8\n3 2 8\n3 1 8\n3 1 8\n3 2 8\n3 2 8\n3 2 8\n3 2 8\n3 1 8\n3 1 8\n", "1 1 1\n1\n2 1 8\n", "10 3 2\n3 3 7 2 7 2 7 2 5 5\n2 9 1\n3 5 5\n1 6 1\n", "10 3 3\n3 3 7 2 7 2 7 2 5 5\n3 5 5\n1 6 1\n2 9 1\n", "10 7 4\n5 2 8 1 3 3 1 2 5 7\n2 8 4\n3 4 7\n3 4 4\n2 4 3\n3 5 3\n1 5 5\n2 5 8\n", "10 7 6\n7 1 8 7 1 2 1 3 3 5\n3 1 5\n3 1 7\n3 1 3\n3 1 5\n3 1 5\n3 1 3\n3 1 7\n", "10 1 1\n7 4 3 6 2 3 5 7 2 3\n3 2 1\n", "1 1 1\n8\n3 1 8\n", "10 7 7\n5 2 8 1 3 3 1 2 5 7\n2 8 4\n2 4 3\n3 4 7\n3 5 3\n2 5 8\n3 4 4\n1 5 5\n", "1 10 10\n8\n3 1 8\n3 1 8\n3 1 8\n3 1 8\n3 1 8\n3 1 8\n3 1 8\n3 1 8\n3 1 8\n3 1 8\n", "10 7 4\n4 7 6 3 4 3 5 4 3 6\n3 7 3\n1 10 4\n2 10 6\n3 6 4\n2 10 7\n3 7 3\n2 5 5\n", "10 8 4\n1 1 5 1 4 8 5 8 4 2\n3 1 8\n3 1 7\n3 1 6\n3 1 5\n3 1 3\n3 1 3\n3 1 1\n3 1 1\n", "1 0 0\n1\n", "10 8 4\n1 3 3 2 6 7 5 3 7 2\n2 1 8\n2 1 8\n2 1 7\n2 1 6\n2 1 5\n2 1 4\n2 1 3\n2 1 3\n", "10 9 5\n1 6 1 8 8 1 2 5 7 8\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n1 1 6\n1 1 7\n", "9 10 10\n8 8 8 8 8 8 8 8 8\n2 5 8\n2 1 8\n2 6 8\n2 7 8\n2 8 8\n2 2 8\n2 1 8\n2 4 8\n2 3 8\n2 9 8\n", "10 2 1\n3 5 2 8 5 1 8 1 6 8\n1 6 2\n1 6 1\n", "10 2 2\n3 5 2 8 5 1 8 1 6 8\n1 6 1\n1 6 2\n", "10 7 2\n5 2 8 1 3 3 1 2 5 7\n3 5 3\n2 8 4\n2 4 3\n3 4 4\n1 5 5\n3 4 7\n2 5 8\n", "10 10 10\n8 8 8 8 8 8 8 8 8 8\n3 1 8\n3 2 8\n3 3 8\n3 6 8\n3 9 8\n3 8 8\n3 4 8\n3 7 8\n3 5 8\n3 10 8\n", "10 8 2\n3 4 6 6 1 8 4 8 5 4\n2 1 6\n3 6 7\n2 7 3\n2 5 2\n2 3 2\n3 5 1\n3 6 4\n3 8 2\n", "10 7 6\n5 2 8 1 3 3 1 2 5 7\n1 5 5\n3 4 7\n2 4 3\n3 5 3\n2 8 4\n2 5 8\n3 4 4\n", "10 8 8\n7 8 8 8 5 1 3 1 3 1\n3 1 1\n3 1 1\n3 1 2\n3 1 5\n3 1 6\n3 1 7\n3 1 7\n3 1 7\n", "10 6 6\n2 2 1 8 5 3 8 5 3 4\n3 7 8\n2 3 5\n3 8 5\n3 10 1\n1 5 1\n3 8 5\n", "10 1 1\n4 2 6 1 4 7 4 6 4 2\n2 5 1\n", "10 0 0\n4 2 6 1 4 7 4 6 4 2\n", "1 1 1\n1\n1 1 8\n", "9 10 10\n8 8 8 8 8 8 8 8 8\n1 6 8\n1 5 8\n1 1 8\n1 1 8\n1 2 8\n1 3 8\n1 9 8\n1 4 8\n1 8 8\n1 7 8\n"], "output": ["5\n4 3 1 6 2 ", "1\n1 ", "10\n3 9 8 2 1 7 4 10 6 5 ", "6\n6 1 7 2 3 4 ", "4\n5 4 8 2 ", "6\n6 7 2 4 1 3 ", "6\n4 7 5 3 2 1 ", "0\n", "1\n1 ", "0\n", "3\n4 1 3 ", "0\n", "2\n4 1 ", "10\n1 2 3 4 5 6 7 8 9 10 ", "1\n1 ", "10\n1 2 3 4 5 6 7 8 9 10 ", "0\n", "4\n5 2 1 3 ", "0\n", "0\n", "2\n3 2 ", "0\n", "10\n1 2 3 4 5 6 7 8 9 10 ", "0\n", "2\n2 4 ", "10\n1 2 3 4 5 6 7 8 9 10 \n", "3\n2 4 3 ", "10\n1 2 3 4 5 6 7 8 9 10 \n", "0\n", "1\n1 ", "8\n8 1 7 3 5 4 6 2 ", "10\n1 2 3 4 5 6 7 8 9 10 ", "1\n1 ", "2\n1 2 ", "2\n3 1 ", "4\n4 7 2 3 ", "6\n2 7 1 4 5 3 ", "1\n1 ", "1\n1 ", "7\n7 2 5 1 3 6 4 ", "10\n1 2 3 4 5 6 7 8 9 10 ", "4\n7 4 1 6 ", "4\n1 2 3 4 ", "0\n", "4\n1 2 3 4 ", "1\n9 ", "10\n1 2 3 4 5 6 7 8 9 10 \n", "1\n1 ", "1\n2 ", "2\n6 4 ", "10\n1 2 3 4 5 6 7 8 9 10 ", "2\n2 7 ", "6\n3 6 5 2 7 4 ", "8\n6 7 8 5 4 3 1 2 ", "5\n2 1 3 6 4 ", "1\n1 ", "0\n", "1\n1 ", "0\n"]}, "generated_tests": {"input": ["10 6 6\n2 2 1 8 3 3 8 5 3 4\n3 8 5\n3 10 1\n3 7 8\n2 3 5\n1 5 1\n3 8 5\n", "1 1 1\n15\n2 1 8\n", "10 10 10\n8 8 8 8 8 8 8 8 8 8\n2 5 8\n2 4 8\n2 2 8\n2 7 8\n2 10 8\n2 9 8\n2 6 8\n2 3 8\n2 2 8\n2 8 8\n", "10 7 7\n4 7 6 3 4 3 5 4 3 6\n2 10 3\n3 6 4\n3 7 3\n3 7 3\n1 10 4\n2 5 5\n2 10 6\n", "10 8 4\n3 4 6 6 1 8 4 8 5 4\n2 7 3\n3 6 4\n2 3 2\n2 3 2\n2 1 6\n3 5 1\n3 8 2\n3 6 7\n", "10 7 6\n4 7 6 3 4 5 5 4 3 6\n3 7 3\n2 10 6\n3 7 3\n3 6 4\n1 10 4\n2 5 5\n2 10 7\n", "10 8 6\n3 4 6 6 1 8 4 8 5 4\n3 8 2\n2 6 4\n3 6 7\n2 1 6\n2 7 3\n3 5 1\n2 5 2\n2 3 2\n", "1 1 1\n8\n1 0 8\n", "10 4 4\n1 7 5 7 2 2 4 5 8 5\n2 9 3\n1 3 3\n3 9 1\n2 7 7\n", "10 4 2\n2 7 7 7 2 2 4 5 8 5\n2 9 3\n3 9 1\n1 3 3\n2 7 7\n", "1 10 10\n8\n2 1 8\n2 1 8\n2 1 4\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n2 1 8\n", "4 10 10\n8 8 8 8\n3 4 9\n3 1 8\n3 2 8\n3 1 8\n3 3 8\n3 1 8\n3 2 8\n3 3 8\n3 2 8\n3 4 8\n", "10 10 10\n8 8 8 8 8 8 8 8 8 8\n1 1 8\n1 9 14\n1 10 8\n1 5 8\n1 2 8\n1 7 8\n1 3 8\n1 4 8\n1 8 8\n1 6 8\n", "10 6 2\n2 2 1 8 5 3 8 0 3 4\n3 10 1\n3 7 8\n2 3 5\n3 8 5\n1 5 1\n3 8 5\n", "10 7 2\n4 7 6 3 4 3 5 4 3 6\n2 5 5\n3 6 4\n2 10 4\n3 7 3\n3 7 3\n1 10 4\n2 10 6\n", "10 4 4\n2 7 5 7 2 2 4 5 8 5\n1 3 3\n2 7 7\n3 5 1\n2 9 3\n", "4 10 10\n8 4 8 8\n2 2 8\n2 1 8\n2 1 8\n2 3 8\n2 2 8\n2 4 8\n2 1 8\n2 4 8\n2 3 8\n2 2 8\n", "10 9 7\n3 3 6 2 1 8 4 1 2 5\n1 1 8\n1 1 8\n1 1 8\n1 1 5\n1 1 4\n1 2 4\n1 1 4\n1 1 3\n1 1 3\n", "10 3 2\n3 3 7 2 7 2 7 2 5 7\n2 9 1\n3 5 5\n1 6 1\n", "10 7 4\n5 2 8 1 3 3 1 2 3 7\n2 8 4\n3 4 7\n3 4 4\n2 4 3\n3 5 3\n1 5 5\n2 5 8\n", "10 7 4\n4 7 6 3 4 3 5 4 3 6\n3 7 3\n1 10 4\n2 10 6\n3 6 4\n3 10 7\n3 7 3\n2 5 5\n", "10 8 4\n1 1 5 1 4 8 5 8 4 2\n3 1 8\n3 1 7\n3 1 6\n3 1 5\n3 1 3\n2 1 3\n3 1 1\n3 1 1\n", "9 10 10\n8 8 8 8 8 8 8 8 8\n2 5 8\n2 1 8\n2 6 8\n2 7 8\n2 8 3\n2 2 8\n2 1 8\n2 4 8\n2 3 8\n2 9 8\n", "10 7 2\n5 2 8 1 3 2 1 2 5 7\n3 5 3\n2 8 4\n2 4 3\n3 4 4\n1 5 5\n3 4 7\n2 5 8\n", "10 8 8\n7 8 8 8 5 0 3 1 3 1\n3 1 1\n3 1 1\n3 1 2\n3 1 5\n3 1 6\n3 1 7\n3 1 7\n3 1 7\n", "10 6 6\n2 2 1 8 5 3 12 5 3 4\n3 7 8\n2 3 5\n3 8 5\n3 10 1\n1 5 1\n3 8 5\n", "10 2 1\n7 4 3 6 2 3 5 1 2 3\n3 2 2\n3 2 1\n", "1 1 1\n1\n2 1 2\n", "1 0 1\n8\n", "4 10 10\n8 8 8 8\n1 4 8\n1 3 8\n1 1 8\n1 2 8\n1 4 8\n1 1 8\n1 1 8\n1 2 8\n1 1 8\n1 2 8\n", "9 10 10\n8 8 8 8 8 8 8 8 8\n3 8 8\n3 6 8\n3 2 8\n3 2 8\n3 7 8\n3 3 8\n3 4 8\n3 9 8\n3 1 8\n3 5 8\n", "10 1 1\n3 5 2 8 1 1 8 1 6 8\n1 6 1\n", "1 10 10\n8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 1 8\n1 0 8\n1 1 8\n", "2 10 11\n8 8\n3 1 8\n3 2 8\n3 1 8\n3 1 8\n3 2 8\n3 2 8\n3 2 8\n3 2 8\n3 1 8\n3 1 8\n", "1 1 1\n0\n2 1 8\n", "10 1 1\n7 4 3 6 2 3 5 7 2 3\n3 1 1\n", "10 2 1\n3 5 2 8 5 1 8 1 9 8\n1 6 2\n1 6 1\n", "10 10 10\n8 8 8 8 8 8 8 8 6 8\n3 1 8\n3 2 8\n3 3 8\n3 6 8\n3 9 8\n3 8 8\n3 4 8\n3 7 8\n3 5 8\n3 10 8\n", "10 8 2\n0 4 6 6 1 8 4 8 5 4\n2 1 6\n3 6 7\n2 7 3\n2 5 2\n2 3 2\n3 5 1\n3 6 4\n3 8 2\n", "10 1 1\n4 2 6 1 4 7 4 6 2 2\n2 5 1\n", "10 0 0\n4 2 6 1 4 7 4 6 0 2\n"], "output": ["5\n4 3 1 6 2 ", "1\n1 ", "10\n3 8 2 1 7 4 10 6 5 9 ", "6\n6 7 1 2 3 4 ", "4\n5 8 2 7 ", "6\n6 7 2 4 1 3 ", "6\n4 7 5 2 3 1 ", "0\n", "3\n4 1 3 ", "2\n4 1 ", "10\n1 2 4 5 6 7 8 9 10 3 ", "10\n1 2 3 4 5 6 7 8 9 10 ", "1\n2 ", "2\n3 2 ", "2\n2 4 ", "3\n2 4 3 ", "10\n1 2 4 6 5 3 9 8 10 7 ", "2\n1 6 ", "2\n1 2 ", "4\n4 7 2 3 ", "4\n5 4 1 6 ", "4\n1 2 3 4 ", "10\n2 6 9 8 1 3 4 10 7 5 ", "2\n6 4 ", "8\n6 7 8 5 4 3 1 2 ", "5\n2 1 3 6 4 ", "1\n1 ", "1\n1 ", "0\n", "0\n", "10\n1 2 3 4 5 6 7 8 9 10 ", "0\n", "0\n", "10\n1 2 3 4 5 6 7 8 9 10 ", "1\n1 ", "1\n1 ", "1\n1 ", "10\n1 2 3 4 5 6 7 8 9 10 ", "2\n1 2 ", "1\n1 ", "0\n"]}, "short_description": "1. One-sentence summary  \nSelects a fixed number of transformation operations across multiple categories to maximize the overall multiplicative benefit by ranking them on their individual gain ratios.  \n\n2. Core algorithmic approach  \nGreedy selection with sorting: compute a \u201cbenefit ratio\u201d for each candidate operation, collect them in one list, sort descending, and pick the top-m.  \n\n3. Reusable components  \n- Extended Euclidean / modular inverse (euclid and modDivide) for computing inverses in modular arithmetic.  \n- Pattern of converting additive and multiplicative updates into comparable \u201cgain ratios\u201d to enable uniform ranking.  \n- Aggregation of per-category candidates into a global list, followed by a single global sort and selection of the best m."}
{"name": "148_D. Bag of mice", "description": "The dragon and the princess are arguing about what to do on the New Year's Eve. The dragon suggests flying to the mountains to watch fairies dancing in the moonlight, while the princess thinks they should just go to bed early. They are desperate to come to an amicable agreement, so they decide to leave this up to chance.\n\nThey take turns drawing a mouse from a bag which initially contains w white and b black mice. The person who is the first to draw a white mouse wins. After each mouse drawn by the dragon the rest of mice in the bag panic, and one of them jumps out of the bag itself (the princess draws her mice carefully and doesn't scare other mice). Princess draws first. What is the probability of the princess winning?\n\nIf there are no more mice in the bag and nobody has drawn a white mouse, the dragon wins. Mice which jump out of the bag themselves are not considered to be drawn (do not define the winner). Once a mouse has left the bag, it never returns to it. Every mouse is drawn from the bag with the same probability as every other one, and every mouse jumps out of the bag with the same probability as every other one.\n\nInput\n\nThe only line of input data contains two integers w and b (0 \u2264 w, b \u2264 1000).\n\nOutput\n\nOutput the probability of the princess winning. The answer is considered to be correct if its absolute or relative error does not exceed 10 - 9.\n\nExamples\n\nInput\n\n1 3\n\n\nOutput\n\n0.500000000\n\n\nInput\n\n5 5\n\n\nOutput\n\n0.658730159\n\nNote\n\nLet's go through the first sample. The probability of the princess drawing a white mouse on her first turn and winning right away is 1/4. The probability of the dragon drawing a black mouse and not winning on his first turn is 3/4 * 2/3 = 1/2. After this there are two mice left in the bag \u2014 one black and one white; one of them jumps out, and the other is drawn by the princess on her second turn. If the princess' mouse is white, she wins (probability is 1/2 * 1/2 = 1/4), otherwise nobody gets the white mouse, so according to the rule the dragon wins.", "solution": "w,b = list( map(int, input().split()) )\np = []\nfor i in range(w+1): p.append([0]*(b+1))\nfor i in range(1,w+1): p[i][0] = 1\n\nfor i in range(1,w+1):\n    for j in range(1,b+1):\n        p[i][j] = i/(i+j)\n        if j>=3:\n            p[i][j] += (j/(i+j)) * ((j-1)/(i+j-1)) * ((j-2)/(i+j-2)) * p[i][j-3]\n        if j>=2:\n            p[i][j] += (j/(i+j)) * ((j-1)/(i+j-1)) * ((i)/(i+j-2)) * p[i-1][j-2]\n\nprint(\"%.9f\" % p[w][b])", "difficulty": 10, "public_tests": {"input": ["1 3\n", "5 5\n"], "output": ["0.500000000\n", "0.658730159\n"]}, "private_tests": {"input": ["773 467\n", "50 372\n", "329 31\n", "155 534\n", "267 270\n", "459 487\n", "377 720\n", "0 1000\n", "713 65\n", "1000 483\n", "100 1\n", "67 420\n", "1000 0\n", "132 781\n", "10 583\n", "815 665\n", "691 417\n", "226 72\n", "574 969\n", "551 654\n", "962 35\n", "778 218\n", "743 715\n", "459 52\n", "95 334\n", "581 406\n", "958 285\n", "858 934\n", "93 633\n", "1 100\n", "980 133\n", "219 20\n", "513 488\n", "193 700\n", "429 19\n", "100 100\n", "666 436\n", "864 70\n", "215 269\n", "840 837\n", "695 168\n", "387 102\n", "32 1000\n", "277 451\n", "817 522\n", "315 898\n", "888 385\n", "544 519\n", "900 853\n", "827 466\n", "1000 1000\n", "141 883\n", "391 852\n", "0 0\n", "455 299\n", "581 685\n", "399 649\n", "73 405\n", "705 268\n"], "output": ["0.726347987\n", "0.531448979\n", "0.920544382\n", "0.563323504\n", "0.665290172\n", "0.660077510\n", "0.603697168\n", "0.000000000\n", "0.922816830\n", "0.754259888\n", "0.990099010\n", "0.536897227\n", "1.000000000\n", "0.538939829\n", "0.504240929\n", "0.689921745\n", "0.726476058\n", "0.805082561\n", "0.614216493\n", "0.648141838\n", "0.966054554\n", "0.820333392\n", "0.670910005\n", "0.907503322\n", "0.562182792\n", "0.708455368\n", "0.813405050\n", "0.657333867\n", "0.534192877\n", "0.336633663\n", "0.893190920\n", "0.922525319\n", "0.672187379\n", "0.560544099\n", "0.959234268\n", "0.666295063\n", "0.716435071\n", "0.930218970\n", "0.642626672\n", "0.667020172\n", "0.836944656\n", "0.827219303\n", "0.507870202\n", "0.617396161\n", "0.719439426\n", "0.574579114\n", "0.767717438\n", "0.671862905\n", "0.672635039\n", "0.735005881\n", "0.666629617\n", "0.536951107\n", "0.593281183\n", "0.000000000\n", "0.715932720\n", "0.648844385\n", "0.617507391\n", "0.541293398\n", "0.783946132\n"]}, "generated_tests": {"input": ["773 872\n", "17 372\n", "329 13\n", "31 534\n", "267 111\n", "768 487\n", "377 205\n", "0 0000\n", "713 84\n", "110 1\n", "67 348\n", "32 781\n", "815 180\n", "691 646\n", "251 72\n", "624 969\n", "605 654\n", "934 35\n", "783 218\n", "459 34\n", "95 368\n", "581 269\n", "958 270\n", "971 934\n", "93 782\n", "79 133\n", "428 20\n", "572 488\n", "193 556\n", "429 26\n", "237 436\n", "864 79\n", "215 145\n", "64 837\n", "695 165\n", "387 64\n", "17 1000\n", "277 468\n", "817 139\n", "326 898\n", "888 494\n", "605 519\n", "511 853\n", "827 201\n", "391 114\n", "863 299\n", "399 864\n", "73 417\n", "705 41\n", "5 0\n", "773 816\n", "13 372\n", "329 11\n", "31 944\n", "422 111\n", "377 39\n", "713 148\n", "100 2\n", "119 348\n", "32 262\n", "815 50\n", "167 72\n", "934 31\n", "170 34\n", "95 71\n", "581 415\n", "958 518\n", "971 515\n", "137 133\n", "428 36\n", "0 583\n", "0 100\n", "000 100\n", "0 000\n"], "output": ["0.653513533580981\n", "0.5111551612488813\n", "0.9632839254160269\n", "0.5140912584777024\n", "0.7727518243505415\n", "0.7203654732552364\n", "0.7393583121158366\n", "0\n", "0.9045659729405209\n", "0.990990990990991\n", "0.5438531272295324\n", "0.5100314702028914\n", "0.8467179193191173\n", "0.6741736873703197\n", "0.8174268617228548\n", "0.6217438932678389\n", "0.6580720476228722\n", "0.9651070512527175\n", "0.821070506128679\n", "0.9353767135050778\n", "0.5570991019651751\n", "0.7594950944012531\n", "0.8196826335014007\n", "0.6709712708298388\n", "0.5280467770674159\n", "0.6142363755573926\n", "0.9571809540745422\n", "0.6846792186864759\n", "0.5738980600825727\n", "0.9458451545849706\n", "0.6067772169832\n", "0.92263648558411\n", "0.7126286090498851\n", "0.5184017634739614\n", "0.8389176912817232\n", "0.875546027301806\n", "0.5042121047074638\n", "0.6141070441961461\n", "0.872972687763642\n", "0.5767836816486983\n", "0.7366072818647472\n", "0.6840435810158829\n", "0.615205814044133\n", "0.8363627070118038\n", "0.815643473910384\n", "0.7952628101619313\n", "0.5937582418642102\n", "0.5402017492876523\n", "0.9478439280978029\n", "1\n", "0.6606614980519656\n", "0.5085751894220918\n", "0.9685766017172632\n", "0.5080729823657987\n", "0.8274638352197248\n", "0.914128766431732\n", "0.8532171771692261\n", "0.9805862939235099\n", "0.5729295954668687\n", "0.5287281852513795\n", "0.9453018410721309\n", "0.7680869348522001\n", "0.9688461146581434\n", "0.8567102106563629\n", "0.6999126828540192\n", "0.7057964469698416\n", "0.7401580245784809\n", "0.7425662257689035\n", "0.6696960898701624\n", "0.9278760984429589\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary  \nComputes the probability of reaching a designated absorbing state in a two-parameter random removal process by filling a table of subproblem probabilities.\n\n2. Core algorithmic approach  \nTwo-dimensional dynamic programming over state (i,j) where i and j track counts; each cell aggregates weighted contributions from smaller states according to transition probabilities.\n\n3. Reusable components  \n\u2022 DP table setup and iteration over all (i,j) states in increasing order  \n\u2022 Transition-accumulation pattern: p[i][j] = \u2211 (transition_prob * p[next_i][next_j])  \n\u2022 Handling boundary/absorbing conditions by initializing base cases (e.g. p[i][0]=1)"}
{"name": "442_B. Andrey and Problem", "description": "Andrey needs one more problem to conduct a programming contest. He has n friends who are always willing to help. He can ask some of them to come up with a contest problem. Andrey knows one value for each of his fiends \u2014 the probability that this friend will come up with a problem if Andrey asks him.\n\nHelp Andrey choose people to ask. As he needs only one problem, Andrey is going to be really upset if no one comes up with a problem or if he gets more than one problem from his friends. You need to choose such a set of people that maximizes the chances of Andrey not getting upset.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of Andrey's friends. The second line contains n real numbers pi (0.0 \u2264 pi \u2264 1.0) \u2014 the probability that the i-th friend can come up with a problem. The probabilities are given with at most 6 digits after decimal point.\n\nOutput\n\nPrint a single real number \u2014 the probability that Andrey won't get upset at the optimal choice of friends. The answer will be considered valid if it differs from the correct one by at most 10 - 9.\n\nExamples\n\nInput\n\n4\n0.1 0.2 0.3 0.8\n\n\nOutput\n\n0.800000000000\n\n\nInput\n\n2\n0.1 0.2\n\n\nOutput\n\n0.260000000000\n\nNote\n\nIn the first sample the best strategy for Andrey is to ask only one of his friends, the most reliable one.\n\nIn the second sample the best strategy for Andrey is to ask all of his friends to come up with a problem. Then the probability that he will get exactly one problem is 0.1\u00b70.8 + 0.9\u00b70.2 = 0.26.", "solution": "n=int(input())\nfrom itertools import combinations\n\na = sorted(list(map(float, input().split())), reverse=True)\n#a=[0.01]*100\nif max(a) == 1:\n    print(1)\n    quit()\nn=len(a)\npre = [1]*100\npre[0] = 1 - a[0]\nfor i in range(1, n):\n    pre[i] = pre[i-1] * (1-a[i])\n\nans = 0\nfor i in range(1,n+1):\n    anss=0\n    for j in range(i):\n        anss = anss + pre[i-1] / (1-a[j]) * a[j]\n    ans = max(ans, anss)\nprint(ans)", "difficulty": 8, "public_tests": {"input": ["2\n0.1 0.2\n", "4\n0.1 0.2 0.3 0.8\n"], "output": ["0.2600000000\n", "0.8000000000\n"]}, "private_tests": {"input": ["20\n0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001\n", "4\n0.801024 0.610878 0.808545 0.732504\n", "5\n0.01 0.01 0.01 0.01 0.01\n", "2\n0.057750 0.013591\n", "7\n0.14 0.28 0.13 0.31 0.15 0.17 0.27\n", "5\n0.057095 0.046954 0.054676 0.025927 0.080810\n", "10\n0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01\n", "3\n1.0 1.0 0\n", "3\n0.4 0.2 0.4\n", "10\n0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n", "3\n0.2 0.2 0.2\n", "3\n0.087234 0.075148 0.033833\n", "3\n0.1 0.2 0.3\n", "7\n0.016061 0.043107 0.088973 0.014785 0.044298 0.028315 0.086014\n", "7\n0.745337 0.892271 0.792853 0.892917 0.768246 0.901623 0.815793\n", "4\n0.1 0.1 0.1 0.1\n", "2\n1.0 1.0\n", "5\n1.0 1.0 1.0 0.1 0\n", "5\n0.239482 0.686259 0.543226 0.764939 0.401318\n", "5\n0.5 0.5 0.5 1 0.5\n", "6\n0.010924 0.032857 0.021824 0.020356 0.007107 0.082489\n", "5\n0.31 0.21 0.05 0.37 0.18\n", "100\n0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n", "100\n0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01\n", "1\n1.0\n", "3\n0.2 0.8 1\n", "7\n0.1 0.1 0.1 0.1 0.1 0.1 0.1\n", "5\n0.00001 0.00001 0.00001 0.00001 0.00001\n", "4\n0.016717 0.061051 0.036222 0.096258\n", "3\n0.388818 0.399762 0.393874\n", "20\n0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n", "1\n0.057695\n", "2\n0.608183 0.375030\n", "5\n1 1 1 1 1\n", "5\n0.0001 0.0001 0.0001 0.0001 0.0001\n", "2\n0.0 1.0\n", "4\n1 1 1 1\n", "6\n0.462434 0.775020 0.479749 0.373861 0.492031 0.746333\n", "3\n0.1 0.1 0.1\n", "1\n0.217266\n"], "output": ["0.0196234007\n", "0.8085450000\n", "0.0480298005\n", "0.0697712395\n", "0.4381080000\n", "0.2146346890\n", "0.0913517247\n", "1.0000000000\n", "0.4800000000\n", "0.3874204890\n", "0.3840000000\n", "0.1727817110\n", "0.3980000000\n", "0.2464828558\n", "0.9016230000\n", "0.2916000000\n", "1.0000000000\n", "1.0000000000\n", "0.7649390000\n", "1.0000000000\n", "0.1546293813\n", "0.4506000000\n", "0.3874204890\n", "0.3697296376\n", "1.0000000000\n", "1.0000000000\n", "0.3720087000\n", "0.0000499980\n", "0.1818329375\n", "0.4787242840\n", "0.3874204890\n", "0.0576950000\n", "0.6081830000\n", "1.0000000000\n", "0.0004998000\n", "1.0000000000\n", "1.0000000000\n", "0.7750200000\n", "0.2430000000\n", "0.2172660000\n"]}, "generated_tests": {"input": ["20\n0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.694870102452492 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001\n", "4\n0.801024 0.610878 0.808545 0.8548120026371425\n", "5\n0.01 0.01 0.01 0.01 0.9793498834909693\n", "2\n0.14413628136855564 0.013591\n", "7\n0.14 0.28 0.13355738960313945 0.31 0.15 0.17 0.27\n", "5\n0.057095 0.046954 0.5643105134757609 0.025927 0.080810\n", "10\n0.01 0.01 0.01 0.01 0.01 0.01 0.24675405141566176 0.01 0.01 0.01\n", "3\n0.4 0.734913142529507 0.4\n", "10\n0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.27444736993736407 0.1 0.1\n", "3\n0.1 0.3217190352533718 0.3\n", "7\n0.016061 0.043107 0.088973 0.014785 0.044298 0.028315 0.23732429147876605\n", "5\n0.239482 0.686259 0.543226 0.764939 0.6841335368628767\n", "5\n0.9983357909679074 0.5 0.5 1 0.5\n", "6\n0.010924 0.7241143687202743 0.021824 0.020356 0.007107 0.082489\n", "5\n0.31 0.21 0.05 0.5139450233664515 0.18\n", "100\n0.1 0.1 0.1 0.1 0.1 0.1 0.5525185673035166 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n", "100\n0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.3966605501182364 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01\n", "7\n0.1 0.1 0.1 0.1 0.1 0.1 0.15057814867569833\n", "5\n0.00001 0.00001 0.00001 0.9665345299262758 0.00001\n", "4\n0.016717 0.10321807959067444 0.036222 0.096258\n", "20\n0.1 0.1 0.1 0.1 0.1 0.1 0.9627567991765824 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n", "1\n0.5702694299810724\n", "5\n0.0001 0.433453602211058 0.0001 0.0001 0.0001\n", "3\n0.6226578820526764 0.1 0.1\n", "4\n0.1 0.7121991027768098 0.3 0.8\n", "2\n0.14413628136855564 0.30039052251815146\n", "7\n0.14 0.28 0.13355738960313945 0.5071526242800191 0.15 0.17 0.27\n", "10\n0.01 0.01 0.01 0.01 0.01 0.01 0.24675405141566176 0.01 0.4058214260744366 0.01\n", "3\n0.9312541841427612 0.734913142529507 0.4\n", "10\n0.1 0.1 0.6208724631576858 0.1 0.1 0.1 0.1 0.27444736993736407 0.1 0.1\n", "3\n0.1 0.34845653710074903 0.3\n", "7\n0.016061 0.043107 0.46297227764454507 0.014785 0.044298 0.028315 0.23732429147876605\n", "100\n0.1 0.1 0.1 0.1 0.1 0.1 0.5525185673035166 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.7679982435847161 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n", "100\n0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.3966605501182364 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.31609602827509053 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01\n", "7\n0.1 0.1 0.5870208806691574 0.1 0.1 0.1 0.15057814867569833\n", "4\n0.016717 0.27993595793035964 0.036222 0.096258\n", "3\n0.6226578820526764 0.9686003134761191 0.1\n", "2\n0.8486953067516955 0.30039052251815146\n", "7\n0.14 0.28 0.8592846970865995 0.5071526242800191 0.15 0.17 0.27\n", "3\n0.1 0.9722321304587611 0.3\n", "5\n0.31 0.21 0.05 0.5139450233664515 0.5833541059269916\n", "5\n0.057095 0.44699241933017647 0.5643105134757609 0.3834356058221267 0.8444942246802258\n", "10\n0.01 0.01 0.01 0.01 0.01 0.2313296767422881 0.9115169099777338 0.01 0.4058214260744366 0.01\n", "5\n0.5964468371599057 0.21 0.05 0.5139450233664515 0.5833541059269916\n", "100\n0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.8612181095398133 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.3966605501182364 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.31609602827509053 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.2560918345319213 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01\n", "20\n0.001 0.001 0.001 0.001 0.001 0.4162398597275926 0.5797383525934786 0.694870102452492 0.001 0.001 0.001 0.001 0.9927173207082086 0.001 0.001 0.5204942707486157 0.001 0.001 0.001 0.001\n", "7\n0.9325762961546502 0.28 0.8592846970865995 0.5071526242800191 0.15 0.17 0.7294606259336883\n", "10\n0.01 0.01 0.01 0.01 0.01 0.2313296767422881 0.9644592515800791 0.01 0.4058214260744366 0.01\n", "7\n0.1 0.1 0.8271976499972014 0.31294161064692017 0.13597978091670884 0.1 0.15057814867569833\n", "10\n0.1 0.1 0.6208724631576858 0.1 0.22694647992376296 0.1 0.1 0.9289331930287208 0.5376437537642383 0.5501938420660337\n", "7\n0.1 0.1 0.8271976499972014 0.31294161064692017 0.13597978091670884 0.8864202955748698 0.15057814867569833\n", "7\n0.1 0.1 0.8271976499972014 0.31294161064692017 0.13597978091670884 0.9277162674422772 0.15057814867569833\n", "7\n0.1 0.1 0.8271976499972014 0.31294161064692017 0.9887285523722837 0.9277162674422772 0.15057814867569833\n", "20\n0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.08802989802171979 0.001 0.001 0.001 0.001 0.001\n", "4\n0.9211688035267876 0.610878 0.808545 0.732504\n", "5\n0.04331630558380483 0.01 0.01 0.01 0.01\n", "2\n0.17445891127327287 0.013591\n", "7\n0.14 0.28 0.13 0.9528572677739673 0.15 0.17 0.27\n", "5\n0.057095 0.046954 0.054676 0.025927 0.8012944295028549\n", "5\n1 1 0 1 1\n", "2\n0.30557252549016156 1.0\n", "4\n1 1 1 0\n", "20\n0.001 0.001 0.001 0.001 0.001 0.4162398597275926 0.001 0.694870102452492 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001\n", "5\n0.01 0.01 0.8991260394435807 0.01 0.9793498834909693\n", "5\n0.057095 0.046954 0.5643105134757609 0.3834356058221267 0.080810\n", "6\n0.010924 0.7241143687202743 0.021824 0.08237850635221251 0.007107 0.082489\n", "5\n0.31 0.21 0.05 0.5139450233664515 0.28380798763951093\n", "5\n0.725286883730052 0.00001 0.00001 0.9665345299262758 0.00001\n", "5\n1 1 0 1 0\n", "4\n0 1 1 0\n", "4\n0.44645497047456506 0.7121991027768098 0.3 0.8\n", "20\n0.001 0.001 0.001 0.001 0.001 0.4162398597275926 0.001 0.694870102452492 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.5204942707486157 0.001 0.001 0.001 0.001\n", "5\n0.5434980485693214 0.01 0.8991260394435807 0.01 0.9793498834909693\n", "5\n0.057095 0.44699241933017647 0.5643105134757609 0.3834356058221267 0.080810\n", "10\n0.01 0.01 0.01 0.01 0.01 0.2313296767422881 0.24675405141566176 0.01 0.4058214260744366 0.01\n", "10\n0.1 0.1 0.6208724631576858 0.1 0.1 0.1 0.1 0.27444736993736407 0.5376437537642383 0.1\n", "6\n0.10808709972252147 0.7241143687202743 0.021824 0.08237850635221251 0.007107 0.082489\n", "100\n0.1 0.1 0.1 0.1 0.7051500028189452 0.1 0.5525185673035166 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.7679982435847161 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n", "100\n0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.3966605501182364 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.31609602827509053 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.2560918345319213 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01\n", "7\n0.1 0.1 0.5870208806691574 0.1 0.13597978091670884 0.1 0.15057814867569833\n", "5\n1 1 1 1 0\n", "3\n0.6226578820526764 0.9686003134761191 0.8915395659632279\n", "4\n0.44645497047456506 0.7121991027768098 0.3412242871317845 0.8\n", "20\n0.001 0.001 0.001 0.001 0.001 0.4162398597275926 0.5797383525934786 0.694870102452492 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.5204942707486157 0.001 0.001 0.001 0.001\n", "7\n0.14 0.28 0.8592846970865995 0.5071526242800191 0.15 0.17 0.7294606259336883\n", "10\n0.1 0.1 0.6208724631576858 0.1 0.1 0.1 0.1 0.27444736993736407 0.5376437537642383 0.5501938420660337\n", "3\n0.1 0.9722321304587611 0.3145437225638344\n", "7\n0.1 0.1 0.5870208806691574 0.31294161064692017 0.13597978091670884 0.1 0.15057814867569833\n", "5\n1 0 1 1 0\n", "5\n0.5263393037712704 0.44699241933017647 0.5643105134757609 0.3834356058221267 0.8444942246802258\n", "10\n0.1 0.1 0.6208724631576858 0.1 0.22694647992376296 0.1 0.1 0.27444736993736407 0.5376437537642383 0.5501938420660337\n", "20\n0.001 0.001 0.001 0.001 0.001 0.4162398597275926 0.5797383525934786 0.694870102452492 0.001 0.001 0.001 0.38530192038295497 0.9927173207082086 0.001 0.001 0.5204942707486157 0.001 0.001 0.001 0.001\n", "7\n0.9325762961546502 0.28 0.8592846970865995 0.6728580155800027 0.15 0.17 0.7294606259336883\n", "20\n0.001 0.001 0.001 0.001 0.001 0.4162398597275926 0.5797383525934786 0.694870102452492 0.001 0.001 0.001 0.38530192038295497 0.9927173207082086 0.001 0.001 0.5204942707486157 0.001 0.001 0.001 0.4211646956872722\n"], "output": ["0.694870102452492\n", "0.8548120026371425\n", "0.9793498834909693\n", "0.15380936896839564\n", "0.438108\n", "0.5643105134757609\n", "0.2879689150936696\n", "0.7349131425295069\n", "0.4029115282422943\n", "0.4332985202234778\n", "0.3355960646084175\n", "0.7649389999999999\n", "1.0\n", "0.7241143687202743\n", "0.5139450233664515\n", "0.5525185673035165\n", "0.4290803832165208\n", "0.38096846730345413\n", "0.9665345299262758\n", "0.21212900715260988\n", "0.9627567991765824\n", "0.5702694299810723\n", "0.4335067973560019\n", "0.6226578820526764\n", "0.8\n", "0.35793245813845964\n", "0.5071526242800191\n", "0.4522993154198009\n", "0.9312541841427612\n", "0.620872463157686\n", "0.44105239575921723\n", "0.4805474335907066\n", "0.7679982435847161\n", "0.4619909294617529\n", "0.5870208806691574\n", "0.33909670827642946\n", "0.9686003134761191\n", "0.8486953067516955\n", "0.8592846970865995\n", "0.9722321304587612\n", "0.5833541059269916\n", "0.8444942246802258\n", "0.9115169099777338\n", "0.5964468371599057\n", "0.8612181095398133\n", "0.9927173207082085\n", "0.9325762961546502\n", "0.9644592515800791\n", "0.8271976499972014\n", "0.9289331930287208\n", "0.8864202955748699\n", "0.9277162674422772\n", "0.9887285523722837\n", "0.10339047328456828\n", "0.9211688035267876\n", "0.07874023959207754\n", "0.18330776914704283\n", "0.9528572677739673\n", "0.801294429502855\n", "1.0\n", "1.0\n", "1.0\n", "0.694870102452492\n", "0.9793498834909693\n", "0.5643105134757609\n", "0.7241143687202743\n", "0.5139450233664515\n", "0.9665345299262758\n", "1.0\n", "1.0\n", "0.8\n", "0.694870102452492\n", "0.9793498834909693\n", "0.5643105134757609\n", "0.4522993154198009\n", "0.620872463157686\n", "0.7241143687202743\n", "0.7679982435847161\n", "0.4619909294617529\n", "0.5870208806691574\n", "1.0\n", "0.9686003134761191\n", "0.8\n", "0.694870102452492\n", "0.8592846970865995\n", "0.620872463157686\n", "0.9722321304587612\n", "0.5870208806691574\n", "1.0\n", "0.8444942246802258\n", "0.620872463157686\n", "0.9927173207082085\n", "0.9325762961546502\n", "0.9927173207082085\n"]}, "short_description": "1. One-sentence summary  \nGiven a set of probabilities, the solution finds a subset that maximizes the probability of observing exactly one \u201csuccess.\u201d\n\n2. Core algorithmic approach  \n- Sort the probabilities in descending order.  \n- Precompute prefix products of (1\u2013p) to enable fast evaluation.  \n- For each prefix length i, compute the probability of exactly one success among the first i by summing, for each element j in the prefix, p[j] times the product of (1\u2013p[k]) for k\u2260j.  \n- Take the maximum over all prefix lengths.\n\n3. Reusable components  \n- Prefix\u2010product array: pre[i] = \u220f_{k=0..i}(1\u2212p[k]) for O(1) updates and range\u2010product queries.  \n- Exact\u2010one\u2010success formula: \u2211_{j in S} p[j] * \u220f_{k\u2208S\\{j}} (1\u2212p[k]).  \n- Greedy prefix enumeration: sort elements by a heuristic (here descending p) and test all prefixes for optimum."}
{"name": "261_B. Maxim and Restaurant", "description": "Maxim has opened his own restaurant! The restaurant has got a huge table, the table's length is p meters.\n\nMaxim has got a dinner party tonight, n guests will come to him. Let's index the guests of Maxim's restaurant from 1 to n. Maxim knows the sizes of all guests that are going to come to him. The i-th guest's size (ai) represents the number of meters the guest is going to take up if he sits at the restaurant table.\n\nLong before the dinner, the guests line up in a queue in front of the restaurant in some order. Then Maxim lets the guests in, one by one. Maxim stops letting the guests in when there is no place at the restaurant table for another guest in the queue. There is no place at the restaurant table for another guest in the queue, if the sum of sizes of all guests in the restaurant plus the size of this guest from the queue is larger than p. In this case, not to offend the guest who has no place at the table, Maxim doesn't let any other guest in the restaurant, even if one of the following guests in the queue would have fit in at the table.\n\nMaxim is now wondering, what is the average number of visitors who have come to the restaurant for all possible n! orders of guests in the queue. Help Maxim, calculate this number.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 50) \u2014 the number of guests in the restaurant. The next line contains integers a1, a2, ..., an (1 \u2264 ai \u2264 50) \u2014 the guests' sizes in meters. The third line contains integer p (1 \u2264 p \u2264 50) \u2014 the table's length in meters. \n\nThe numbers in the lines are separated by single spaces.\n\nOutput\n\nIn a single line print a real number \u2014 the answer to the problem. The answer will be considered correct, if the absolute or relative error doesn't exceed 10 - 4.\n\nExamples\n\nInput\n\n3\n1 2 3\n3\n\n\nOutput\n\n1.3333333333\n\nNote\n\nIn the first sample the people will come in the following orders: \n\n  * (1, 2, 3) \u2014 there will be two people in the restaurant; \n  * (1, 3, 2) \u2014 there will be one person in the restaurant; \n  * (2, 1, 3) \u2014 there will be two people in the restaurant; \n  * (2, 3, 1) \u2014 there will be one person in the restaurant; \n  * (3, 1, 2) \u2014 there will be one person in the restaurant; \n  * (3, 2, 1) \u2014 there will be one person in the restaurant. \n\n\n\nIn total we get (2 + 1 + 2 + 1 + 1 + 1) / 6 = 8 / 6 = 1.(3).", "solution": "import math\n\nn = int(input())\na = [int(x) for x in input().split()]\np = int(input())\n\nsum=0;\nfor x in range(n):\n\tsum+=a[x]\nif(sum<=p):\n\tprint(n)\nelse:\n\tans=0\n\tfor i in range(n):\n\t\tdp = [[[0 for z in range(55)] for y in range(55)] for x in range(55)]\n\t\tdp[-1][0][0]=1\n\t\tfor j in range(n):\n\t\t\tif(j==i):\n\n\t\t\t\tfor k in range(n):\n\t\t\t\t\tfor z in range(p+1):\n\t\t\t\t\t\tdp[j][k][z]=dp[j-1][k][z]\n\t\t\t\tcontinue\n\n\t\t\tfor k in range(n):\n\n\t\t\t\tfor z in range(p+1):\n\n\t\t\t\t\tif(z+a[j]<=p):\n\t\t\t\t\t\tdp[j][k+1][z+a[j]]+=dp[j-1][k][z]\n\t\t\t\t\tdp[j][k][z]+=dp[j-1][k][z]\n\n\n\t\tfor k in range(n):\n\t\t\tfor z in range(p+1):\n\t\t\t\tif(z+a[i]>p):\n\t\t\t\t\tans+=k*dp[n-1][k][z]*math.factorial(k)*math.factorial(n-k-1)\n\n\tprint(ans/math.factorial(n))\n", "difficulty": 8, "public_tests": {"input": ["3\n1 2 3\n3\n"], "output": ["1.3333333333\n"]}, "private_tests": {"input": ["23\n2 1 2 1 1 1 2 2 2 1 1 2 2 1 1 1 2 1 2 2 1 1 1\n37\n", "50\n1 5 2 4 3 4 1 4 1 2 5 1 4 5 4 2 1 2 5 3 4 5 5 2 1 2 2 2 2 2 3 2 5 1 2 2 3 2 5 5 1 3 4 5 2 1 3 4 2 2\n29\n", "28\n3 5 4 24 21 3 13 24 22 13 12 21 1 15 11 3 17 6 2 12 22 12 23 4 21 16 25 14\n25\n", "23\n16 21 14 27 15 30 13 10 4 15 25 21 6 10 17 4 5 3 9 9 8 6 19\n30\n", "24\n15 4 49 1 9 19 31 47 49 32 40 49 10 8 23 23 39 43 39 30 41 8 9 42\n38\n", "7\n2 1 1 2 1 1 2\n2\n", "40\n1 26 39 14 16 17 19 28 38 18 23 41 19 22 4 24 18 36 15 21 31 29 34 13 19 19 38 45 4 10 2 14 3 24 21 27 4 30 9 17\n45\n", "35\n5 1 2 3 1 4 1 2 2 2 3 2 3 3 2 5 2 2 3 3 3 3 2 1 2 4 5 5 1 5 3 2 1 4 3\n6\n", "20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n20\n", "42\n3 2 3 1 1 3 1 3 2 3 3 2 1 3 2 3 3 2 3 3 1 3 3 2 3 2 3 1 2 2 2 3 3 1 2 1 1 3 1 3 3 2\n3\n", "50\n3 2 3 2 1 5 5 5 2 1 4 2 3 5 1 4 4 2 3 2 5 5 4 3 5 1 3 5 5 4 4 4 2 5 4 2 2 3 4 4 3 2 3 3 1 3 4 3 3 4\n19\n", "38\n2 4 2 4 1 2 5 1 5 3 5 4 2 5 4 3 1 1 1 5 4 3 4 3 5 4 2 5 4 1 1 3 2 4 5 3 5 1\n48\n", "3\n1 1 1\n50\n", "50\n1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 5 5 5 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7\n50\n", "1\n1\n1\n", "36\n5 2 4 5 1 4 3 3 5 2 2 3 3 2 5 1 4 5 2 3 1 4 4 3 5 2 3 5 1 4 3 5 1 2 4 1\n10\n", "44\n24 19 6 4 23 10 11 16 21 15 18 17 13 9 25 3 1 11 24 26 12 12 21 17 19 2 6 24 21 18 7 2 12 2 4 25 17 26 22 10 22 11 13 27\n27\n", "2\n1 2\n2\n", "9\n2 2 2 2 2 2 2 1 2\n9\n", "30\n2 3 1 4 1 2 2 2 5 5 2 3 2 4 3 1 1 2 1 2 1 2 3 2 1 1 3 5 4 4\n5\n", "7\n42 35 1 20 29 50 36\n50\n", "6\n1 1 1 1 1 1\n1\n", "5\n2 3 2 3 6\n30\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n25\n", "14\n8 13 28 2 17 31 2 11 39 12 24 3 8 10\n41\n", "8\n3 1 5 6 1 5 4 4\n7\n", "10\n42 18 35 1 20 25 29 9 50 36\n50\n", "3\n1 2 3\n10\n", "23\n2 2 1 1 2 2 1 1 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1\n2\n", "16\n3 5 3 1 4 2 3 2 1 4 5 3 5 2 2 4\n39\n", "41\n31 21 49 18 37 34 36 27 36 39 4 30 25 49 24 10 8 17 45 6 19 27 12 26 6 2 50 47 35 16 15 43 26 14 43 47 49 23 27 7 24\n50\n", "2\n1 3\n3\n", "8\n9 14 13 2 1 11 4 19\n25\n", "50\n15 28 34 29 17 21 20 34 37 17 10 20 37 10 18 25 31 25 16 1 37 27 39 3 5 18 2 32 10 35 20 17 29 20 3 29 3 25 9 32 37 5 25 23 25 33 35 8 31 29\n39\n", "4\n1 2 3 4\n11\n", "3\n36 44 44\n46\n", "50\n2 1 2 1 2 1 1 1 2 2 2 1 1 1 1 1 1 2 2 1 2 1 2 2 1 2 2 1 1 2 1 1 1 2 2 2 1 2 1 2 2 2 2 2 1 1 2 2 1 2\n3\n", "10\n35 5 7 41 17 27 32 9 45 40\n30\n", "3\n2 2 1\n22\n", "3\n1 2 3\n7\n", "49\n46 42 3 1 42 37 25 21 47 22 49 50 19 35 32 35 4 50 19 39 1 39 28 18 29 44 49 34 8 22 11 18 14 15 10 17 36 2 1 50 20 7 49 4 25 9 45 10 40\n34\n", "50\n1 2 3 4 4 4 4 4 4 4 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\n50\n", "18\n2 1 2 2 1 2 1 1 2 2 1 2 2 1 2 1 1 2\n8\n", "1\n2\n1\n", "41\n37 6 18 6 25 32 3 1 1 42 25 17 31 8 42 8 38 8 38 4 34 46 10 10 9 22 39 23 47 7 31 14 19 1 42 13 6 11 10 25 38\n12\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n50\n", "2\n1 2\n3\n", "5\n1 2 3 4 5\n20\n", "35\n2 2 1 2 2 2 2 2 2 1 2 1 2 1 1 2 2 2 2 2 2 1 1 1 2 2 1 1 2 2 2 1 2 1 1\n35\n", "19\n8 11 13 11 7 11 3 11 6 7 3 14 4 10 10 8 2 1 8\n15\n", "9\n1 2 2 7 4 4 1 4 7\n7\n", "5\n1 2 3 1 2\n3\n", "27\n38 39 19 33 30 42 34 16 40 9 5 31 28 7 24 37 22 46 25 23 21 30 28 24 48 13 37\n24\n", "40\n5 8 2 14 14 19 14 2 12 10 17 15 2 9 11 24 7 19 14 21 8 3 24 18 20 10 14 1 9 9 18 18 13 2 23 7 23 2 17 13\n24\n"], "output": ["23.0000000000\n", "9.8873093486\n", "1.6461894466\n", "1.9401705846\n", "0.8604837192\n", "1.2857142857\n", "1.8507376624\n", "1.9851721334\n", "20.0000000000\n", "1.2020905923\n", "5.5762635183\n", "15.0079078318\n", "3.0000000000\n", "12.0011471293\n", "1.0000000000\n", "2.9649127243\n", "1.5513891043\n", "1.0000000000\n", "4.5555555556\n", "1.8614767098\n", "1.3142857143\n", "1.0000000000\n", "5.0000000000\n", "25.0000000000\n", "2.4931734932\n", "1.6250000000\n", "1.5269841270\n", "3.0000000000\n", "1.1778656126\n", "12.3395604396\n", "1.5535424434\n", "1.0000000000\n", "2.3500000000\n", "1.4997987526\n", "4.0000000000\n", "1.0000000000\n", "1.8379591837\n", "0.6500000000\n", "3.0000000000\n", "3.0000000000\n", "0.9154259295\n", "2.3167627104\n", "4.9849398967\n", "0.0000000000\n", "0.5001534565\n", "50.0000000000\n", "2.0000000000\n", "5.0000000000\n", "21.2873098934\n", "1.6128310974\n", "1.7341269841\n", "1.5000000000\n", "0.4333903134\n", "1.6715713966\n"]}, "generated_tests": {"input": ["50\n1 5 2 4 3 4 1 4 1 2 5 1 4 5 4 2 1 2 5 3 4 5 5 2 1 2 2 2 2 2 3 2 5 1 2 2 3 2 5 5 1 3 4 5 2 1 2 4 2 2\n29\n", "28\n3 5 4 24 21 3 13 24 22 13 12 21 1 15 11 3 17 6 1 12 22 12 23 4 21 16 25 14\n25\n", "23\n16 21 14 27 15 30 13 10 4 15 25 21 11 10 17 4 5 3 9 9 8 6 19\n30\n", "24\n15 4 49 1 9 19 31 47 49 32 40 49 10 8 23 23 39 43 39 30 41 8 16 42\n38\n", "40\n1 26 39 14 16 17 17 28 38 18 23 41 19 22 4 24 18 36 15 21 31 29 34 13 19 19 38 45 4 10 2 14 3 24 21 27 4 30 9 17\n45\n", "35\n5 1 2 3 1 4 1 2 2 2 3 2 3 3 2 5 2 2 3 3 3 3 2 1 2 4 5 5 2 5 3 2 1 4 3\n6\n", "20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1\n20\n", "42\n1 2 3 1 1 3 1 3 2 3 3 2 1 3 2 3 3 2 3 3 1 3 3 2 3 2 3 1 2 2 2 3 3 1 2 1 1 3 1 3 3 2\n3\n", "50\n1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 1 4 4 4 5 5 5 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7\n50\n", "1\n1\n0\n", "44\n24 19 6 4 23 10 11 16 21 15 18 17 13 9 25 3 1 11 24 26 12 12 21 17 19 2 6 24 21 18 7 2 12 2 4 25 17 26 22 17 22 11 13 27\n27\n", "9\n2 2 2 2 4 2 2 1 2\n9\n", "7\n42 35 1 20 29 50 36\n3\n", "6\n1 1 2 1 1 1\n1\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1\n25\n", "14\n8 13 28 2 17 16 2 11 39 12 24 3 8 10\n41\n", "8\n3 1 5 6 1 5 4 8\n7\n", "10\n42 18 35 1 20 25 46 9 50 36\n50\n", "3\n1 2 3\n20\n", "23\n2 2 1 1 2 2 1 1 2 2 2 2 1 2 2 2 2 1 2 1 2 1 1\n2\n", "16\n3 5 3 1 4 2 3 2 1 4 7 3 5 2 2 4\n39\n", "41\n31 21 49 18 37 34 36 27 36 39 4 30 25 49 24 10 8 17 45 6 19 27 21 26 6 2 50 47 35 16 15 43 26 14 43 47 49 23 27 7 24\n50\n", "2\n2 3\n3\n", "8\n9 14 13 2 1 11 4 19\n31\n", "50\n15 28 34 29 17 21 20 34 37 17 10 20 37 10 18 25 31 25 16 1 37 27 39 3 5 18 2 32 10 35 20 17 29 20 3 29 2 25 9 32 37 5 25 23 25 33 35 8 31 29\n39\n", "4\n1 2 3 2\n11\n", "50\n2 1 2 1 2 1 1 1 2 2 2 1 1 1 1 1 1 2 2 1 2 1 2 2 1 2 2 1 1 2 1 1 1 2 2 2 1 2 1 2 2 2 2 3 1 1 2 2 1 2\n3\n", "10\n35 5 7 41 17 34 32 9 45 40\n30\n", "3\n1 2 5\n7\n", "18\n2 1 2 1 1 2 1 1 2 2 1 2 2 1 2 1 1 2\n8\n", "41\n37 6 18 6 25 32 3 1 1 42 25 17 31 8 42 8 38 8 38 4 34 46 10 10 9 22 39 23 47 7 29 14 19 1 42 13 6 11 10 25 38\n12\n", "5\n1 2 3 4 3\n20\n", "35\n2 2 1 2 2 2 4 2 2 1 2 1 2 1 1 2 2 2 2 2 2 1 1 1 2 2 1 1 2 2 2 1 2 1 1\n35\n", "19\n8 11 13 11 7 11 3 11 6 7 3 14 4 8 10 8 2 1 8\n15\n", "9\n1 2 2 7 6 4 1 4 7\n7\n", "27\n38 39 19 33 30 47 34 16 40 9 5 31 28 7 24 37 22 46 25 23 21 30 28 24 48 13 37\n24\n", "40\n5 8 2 14 14 38 14 2 12 10 17 15 2 9 11 24 7 19 14 21 8 3 24 18 20 10 14 1 9 9 18 18 13 2 23 7 23 2 17 13\n24\n", "50\n1 5 2 4 3 4 1 4 1 2 5 1 4 5 4 2 1 2 5 3 4 5 5 2 1 2 2 2 2 2 3 2 5 1 2 2 3 2 5 5 1 3 4 5 2 1 2 4 4 2\n29\n", "28\n3 5 4 24 21 3 13 24 22 13 12 21 1 15 11 3 26 6 1 12 22 12 23 4 21 16 25 14\n25\n", "23\n16 21 14 27 15 30 13 10 4 15 25 21 11 10 17 4 5 3 18 9 8 6 19\n30\n", "24\n15 4 49 1 9 19 31 47 49 32 40 49 10 8 23 23 39 43 4 30 41 8 16 42\n38\n", "40\n1 26 39 14 16 17 17 28 38 18 23 41 19 22 4 24 18 36 15 21 31 29 34 13 17 19 38 45 4 10 2 14 3 24 21 27 4 30 9 17\n45\n", "35\n5 1 2 3 1 5 1 2 2 2 3 2 3 3 2 5 2 2 3 3 3 3 2 1 2 4 5 5 2 5 3 2 1 4 3\n6\n", "42\n1 2 3 1 1 3 1 3 2 3 3 2 1 3 1 3 3 2 3 3 1 3 3 2 3 2 3 1 2 2 2 3 3 1 2 1 1 3 1 3 3 2\n3\n", "50\n1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 1 4 4 4 5 5 5 5 5 5 5 6 6 6 6 6 6 6 7 13 7 7 7 7 7 7\n50\n", "44\n24 19 6 4 23 10 11 16 21 15 18 16 13 9 25 3 1 11 24 26 12 12 21 17 19 2 6 24 21 18 7 2 12 2 4 25 17 26 22 17 22 11 13 27\n27\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1\n25\n", "8\n3 1 5 6 1 5 4 8\n1\n", "23\n2 2 1 1 2 2 1 1 2 2 2 2 1 2 2 2 2 1 2 1 3 1 1\n2\n", "16\n3 5 3 1 4 2 3 2 1 1 7 3 5 2 2 4\n39\n", "41\n31 31 49 18 37 34 36 27 36 39 4 30 25 49 24 10 8 17 45 6 19 27 21 26 6 2 50 47 35 16 15 43 26 14 43 47 49 23 27 7 24\n50\n", "2\n4 3\n3\n", "8\n9 14 26 2 1 11 4 19\n31\n", "50\n15 10 34 29 17 21 20 34 37 17 10 20 37 10 18 25 31 25 16 1 37 27 39 3 5 18 2 32 10 35 20 17 29 20 3 29 2 25 9 32 37 5 25 23 25 33 35 8 31 29\n39\n", "3\n36 44 44\n35\n", "3\n2 2 2\n22\n", "1\n3\n1\n", "2\n2 2\n3\n", "3\n1 2 3\n6\n", "1\n2\n0\n", "7\n42 25 1 20 29 50 36\n3\n", "3\n1 2 3\n24\n"], "output": ["9.961153425\n", "1.658089672\n", "1.898913291\n", "0.844767551\n", "1.857016752\n", "1.950168807\n", "19.000000000\n", "1.231562137\n", "12.191466672\n", "0.000000000\n", "1.528912066\n", "4.000000000\n", "0.142857143\n", "0.833333333\n", "24.500000000\n", "2.715950716\n", "1.375000000\n", "1.435317460\n", "3\n", "1.142292490\n", "11.826265401\n", "1.534313854\n", "1.000000000\n", "2.975000000\n", "1.505241937\n", "4\n", "1.818367347\n", "0.550000000\n", "2.000000000\n", "5.187988482\n", "0.500153457\n", "5\n", "20.544862006\n", "1.636566907\n", "1.619047619\n", "0.433390313\n", "1.634080059\n", "9.815875433\n", "1.588767328\n", "1.821983813\n", "0.969679634\n", "1.863292845\n", "1.928472855\n", "1.249128920\n", "11.844924761\n", "1.532660941\n", "24.019591837\n", "0.250000000\n", "1.098814229\n", "12.562316850\n", "1.515725956\n", "0.500000000\n", "2.539285714\n", "1.537144871\n", "0.000000000\n", "3\n", "0.000000000\n", "1.000000000\n", "3\n", "0.000000000\n", "0.142857143\n", "3\n"]}, "short_description": "1. One-sentence summary:\nCompute the expected number of other items that appear before a particular \u201cbad\u201d item in a random ordering, conditioned on the running sum of values exceeding a given threshold when that item is inserted.\n\n2. Core algorithmic approach:\nMulti-dimensional dynamic programming (a knapsack\u2010style count of ways to choose k items with total weight z) combined with factorial weighting to account for permutations and an expectation calculation over all possible \u201cbad\u201d items.\n\n3. Reusable components:\n- Knapsack DP over two dimensions (count of items k and sum z) to count subsets with bounded total weight.\n- Use of factorials (math.factorial) to weight arrangement counts when converting subset counts into permutation counts.\n- Expectation accumulation pattern: sum over outcomes (here positions k) times their weighted probability."}
{"name": "623_D. Birthday", "description": "A MIPT student named Misha has a birthday today, and he decided to celebrate it in his country house in suburban Moscow. n friends came by, and after a typical party they decided to play blind man's buff.\n\nThe birthday boy gets blindfolded and the other players scatter around the house. The game is played in several rounds. In each round, Misha catches exactly one of his friends and has to guess who it is. The probability of catching the i-th friend does not change between rounds and is equal to pi percent (as we know, it is directly proportional to the amount of alcohol consumed by the i-th friend) and p1 + p2 + ... + pn = 100 holds. Misha has no information about who he caught. After Misha makes an attempt to guess the caught person, the round ends. Even then, Misha isn't told whether he guessed correctly, and a new round begins.\n\nThe game ends when Misha guesses every friend at least once, that is, there exists such set of rounds k1, k2, ..., kn, that during round number ki Misha caught the i-th friend and guessed him. Misha wants to minimize the expectation of the number of rounds of the game. Despite the fact that at any point in the game Misha has no information about who he has already guessed, his friends are honest, and if they see that the condition for the end of the game is fulfilled, the game ends immediately. Find the expectation of the number of rounds in the game if Misha plays optimally.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of Misha's friends.\n\nThe second line contains n integers pi (<image>), giving the probability to catch the i-th friend in one particular round in percent.\n\nOutput\n\nPrint a single real value \u2014 the expectation of the number of rounds provided that Misha plays optimally. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if <image>.\n\nExamples\n\nInput\n\n2\n50 50\n\n\nOutput\n\n5.0000000000\n\n\nInput\n\n4\n50 20 20 10\n\n\nOutput\n\n39.2846263444\n\nNote\n\nThe optimal strategy in the first sample is to guess friends alternately.", "solution": "import random\n\nN = int(input())\nprob = [float(x)/100 for x in input().strip().split()]\nprob_sum = []\ncur = 0\nfor i in range(N):\n    cur += prob[i]\n    prob_sum.append(cur)\n\ndef experiment():\n    cur_prob = [1.] * N\n    cur_exp = 0\n    for i in range(200000):\n\n        bp = [prob[i] * cur_prob[i] / (1-cur_prob[i]+1E-100) for i in range(N)]\n        mn = max(bp)\n        for j in range(N):\n            if bp[j] == mn:\n                choice = j\n        cur_prob[choice] *= 1-prob[choice]\n        tp = 1\n        for j in range(N):\n            tp *= (1-cur_prob[j])\n        tp = 1 - tp\n        cur_exp += tp\n\n    return cur_exp + 1\n\nans = experiment()\nprint(ans)\n", "difficulty": 10, "public_tests": {"input": ["4\n50 20 20 10\n", "2\n50 50\n"], "output": ["39.284626344368\n", "5.000000000000\n"]}, "private_tests": {"input": ["6\n14 14 18 21 20 13\n", "12\n6 10 11 9 6 9 9 12 8 8 5 7\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "4\n25 25 25 25\n", "2\n52 48\n", "36\n1 1 1 1 1 1 1 43 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 23 1 1 1 1 1 1 1 1 1 1 1\n", "5\n20 20 20 20 20\n", "20\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n", "2\n99 1\n", "95\n1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "53\n1 2 1 1 2 2 3 1 3 1 2 2 4 2 1 2 1 2 2 2 1 1 2 2 2 3 2 4 1 1 2 1 4 1 2 1 3 3 4 2 3 1 1 1 2 2 1 2 3 2 1 1 1\n", "14\n11 8 5 8 7 4 8 6 8 7 5 6 9 8\n", "50\n2 2 4 2 1 2 1 1 3 1 2 3 1 6 1 3 4 1 3 1 2 2 2 2 1 1 1 1 3 3 3 2 2 3 1 2 3 1 3 2 2 4 1 1 2 2 1 1 1 1\n", "2\n51 49\n", "1\n100\n", "34\n1 1 1 1 1 1 1 1 19 1 1 1 1 1 1 1 1 1 16 1 16 13 1 1 1 1 1 1 1 1 1 7 1 1\n", "32\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 1 20 1 1 1 1 10 1 1 1 1 1 1 17 17 1\n", "95\n1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2\n", "92\n1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1\n", "32\n20 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 28 1 1 1 1 1 1 1 1 1 1 1 1 1 23\n", "34\n8 4 5 4 4 6 1 1 1 1 1 1 7 1 1 6 5 2 5 1 1 4 5 1 1 1 4 5 1 1 1 3 6 1\n", "46\n1 1 2 1 4 2 3 3 1 2 2 3 3 2 3 2 1 4 2 2 1 2 2 4 2 4 1 2 2 1 3 1 1 1 3 3 3 2 4 2 2 3 2 1 2 2\n", "54\n2 2 2 2 1 2 2 1 1 2 1 2 14 2 1 2 1 2 1 2 2 2 1 1 2 2 2 2 2 1 2 2 1 2 2 2 1 1 1 2 2 1 2 2 1 2 1 2 1 2 1 2 1 2\n", "55\n1 1 2 2 1 2 2 2 1 1 1 1 2 2 1 2 2 1 2 2 2 2 1 2 1 2 2 14 2 1 2 1 2 2 1 2 1 2 2 1 2 2 1 2 1 2 1 2 2 2 1 1 2 2 1\n", "10\n10 10 10 10 10 10 10 10 10 10\n", "97\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1\n", "43\n2 2 4 3 3 1 3 2 4 2 1 1 3 2 1 3 2 1 2 3 3 2 3 3 3 2 1 2 2 4 2 1 1 5 1 1 3 1 1 4 3 4 3\n", "9\n14 7 17 11 9 10 9 9 14\n", "93\n1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1\n", "10\n6 12 11 8 13 7 12 10 13 8\n", "91\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 2 2 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "79\n2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 2 2 2 1 1 1 2 2 2 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 2 1 1 1 1 3 1 1 2 1 1 3 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1\n", "20\n5 5 5 6 7 3 7 4 4 4 7 6 6 5 3 7 2 2 3 9\n", "25\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\n", "96\n1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "8\n18 18 9 7 18 11 9 10\n", "2\n41 59\n", "2\n10 90\n", "75\n1 1 2 1 1 1 2 1 2 2 1 2 1 2 1 1 2 1 2 1 1 2 1 1 1 2 2 2 1 1 1 2 1 1 1 1 1 2 1 1 2 1 2 1 2 1 1 1 1 1 1 2 1 1 2 1 1 1 1 2 1 1 1 2 1 2 1 2 1 2 1 1 1 2 1\n", "8\n12 16 12 12 12 12 12 12\n", "94\n1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1\n", "7\n18 17 14 13 14 12 12\n", "99\n1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "32\n1 1 1 1 1 37 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 33 1 1 1 1\n", "32\n1 1 1 1 1 1 4 1 4 1 5 5 6 1 1 6 6 6 1 6 1 12 4 1 1 8 1 1 5 1 5 1\n", "3\n33 33 34\n", "63\n2 1 2 1 3 1 1 2 2 1 2 2 1 2 2 1 1 3 1 1 1 3 1 1 1 1 1 4 1 1 2 1 3 2 1 2 1 2 2 1 1 1 1 1 1 2 2 1 1 3 2 2 1 4 1 1 1 3 2 1 1 2 1\n", "36\n1 1 1 1 23 1 1 1 1 1 28 1 1 1 1 1 1 1 1 1 16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "14\n6 5 10 9 5 8 4 6 8 9 9 7 6 8\n", "93\n1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 2 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1\n", "36\n1 6 7 1 6 3 4 1 1 1 1 8 4 1 5 1 1 3 1 1 4 1 1 1 4 1 1 1 3 1 6 6 7 1 1 4\n", "23\n5 4 2 3 7 5 3 4 4 6 2 3 4 3 6 7 7 3 6 5 3 3 5\n", "36\n1 1 1 1 19 12 13 1 1 1 1 1 1 1 1 1 1 14 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 11 1\n", "44\n1 3 3 3 3 3 3 3 3 1 3 3 1 1 3 3 3 1 7 1 1 1 3 1 3 1 1 3 3 1 3 3 1 3 1 3 3 1 1 3 3 3 1 1\n", "91\n1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 3 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "98\n1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "34\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 67 1 1 1\n", "94\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1\n", "50\n2 4 2 2 4 3 2 2 2 1 2 2 3 3 3 1 3 2 1 1 1 1 2 1 2 2 1 4 2 1 2 2 1 2 2 3 3 2 3 1 1 2 1 2 1 2 3 1 2 2\n", "2\n46 54\n", "36\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 65 1 1 1 1 1 1 1\n", "79\n1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 3 2 2 1 1 1 1 1 1 1 1 3 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 2 2 3 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 2 1 1\n", "69\n2 2 1 1 2 1 1 1 1 1 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 3 2 3 2 1 1 1 2 1 2 1 1 1 1 2 3 2 2 2 1 2 2 1 1 1 2 1 1 1 1 1 3 2\n", "20\n1 1 1 1 1 1 81 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "34\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 23 1 1 33 1 1 1 1 1 13 1 1 1 1 1 1\n", "34\n1 1 1 1 1 1 1 33 35 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "84\n1 1 1 1 2 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 2 2 1 2 1 1 2 1 2 1 2 1 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2\n", "32\n1 1 1 1 1 69 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "42\n3 1 1 2 1 6 2 3 2 1 4 2 3 3 5 1 2 3 2 5 2 1 2 5 2 2 1 2 3 2 2 2 4 1 2 3 3 2 2 3 1 1\n", "92\n1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "89\n1 1 2 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 3 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1\n", "58\n3 1 2 1 1 2 2 1 1 1 1 3 1 2 2 3 2 2 1 2 1 1 2 1 3 1 2 1 2 3 1 3 1 2 3 1 3 1 1 1 2 2 1 2 1 1 3 1 3 1 2 4 1 1 2 1 3 1\n", "10\n10 8 9 12 3 8 12 14 12 12\n", "74\n1 1 1 1 1 2 1 1 2 2 1 1 1 1 2 1 2 1 2 1 1 1 1 2 1 2 1 3 3 1 1 2 2 1 3 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2 2 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 2 3 1 1 1 1 1\n", "29\n5 1 7 4 4 2 4 4 3 2 4 4 3 5 3 2 3 3 3 3 8 1 3 5 2 4 3 3 2\n"], "output": ["83.755142422869\n", "452.779598074335\n", "51614.556434047350\n", "29.586872586873\n", "4.987131436200\n", "13980.506519384644\n", "51.774356923897\n", "1403.400672569005\n", "101.739358224840\n", "47194.148820571827\n", "15416.819636134000\n", "651.837635823289\n", "14041.834822044068\n", "4.990136228919\n", "1.000000000000\n", "11708.586074806612\n", "10717.845279109268\n", "47194.148820571827\n", "44740.019651570503\n", "11524.751488497597\n", "8053.919033978538\n", "11140.789094817141\n", "16349.347104192328\n", "17092.125728176659\n", "278.591429630813\n", "48955.302722382126\n", "9945.986986877972\n", "230.600481375109\n", "45442.692554121080\n", "295.612891604642\n", "43870.006761155644\n", "33968.004795680157\n", "1623.396180649602\n", "2337.538306785904\n", "48073.533029060214\n", "181.939612251533\n", "5.096693592729\n", "11.961389607456\n", "30178.210309967468\n", "164.759741508484\n", "46317.188703984852\n", "120.616130820166\n", "50725.850121016636\n", "11966.118567853353\n", "7820.778548866847\n", "14.189750571421\n", "22191.535848726337\n", "13529.262883622790\n", "653.185538236296\n", "45442.692554121095\n", "9268.863808825810\n", "2179.715799751672\n", "12689.561892283800\n", "11085.232484708733\n", "43870.006761155972\n", "49839.420501778084\n", "13434.835490978499\n", "46317.188703984852\n", "13211.778374381722\n", "4.998086623176\n", "14450.921967962468\n", "33968.004795680157\n", "25941.034715195594\n", "6713.312821761126\n", "12530.531716387490\n", "12964.856269990716\n", "37690.402117878119\n", "12430.836185608867\n", "9484.347571593637\n", "44570.701576638276\n", "42305.483110875160\n", "18743.599427275098\n", "321.675488450290\n", "29990.260237688723\n", "3952.703459384203\n"]}, "generated_tests": {"input": [], "output": []}, "short_description": "1. One-sentence summary  \nThis code estimates the expected cumulative \u201ccoverage\u201d probability over a series of steps by repeatedly picking and updating the item that currently offers the highest marginal increase.\n\n2. Core algorithmic approach  \nA greedy iterative update: at each of a fixed number of iterations it computes a hazard-rate\u2013style ratio for each item, picks the maximum, updates that item\u2019s residual probability multiplicatively, and accumulates the current union probability.\n\n3. Reusable components  \n- Hazard-rate selection: computing bp[i] = p[i] * cur_remain[i] / (1 \u2013 cur_remain[i]) and choosing the argmax.  \n- Multiplicative state updates: maintaining per-item \u201cremaining\u201d probabilities via cur_remain[i] *= (1 \u2013 p[i]).  \n- Incremental union probability calculation: updating the probability that at least one event has occurred by 1 \u2013 \u220f(1 \u2013 cur_remain[j])."}
{"name": "54_C. First Digit Law", "description": "In the probability theory the following paradox called Benford's law is known: \"In many lists of random numbers taken from real sources, numbers starting with digit 1 occur much more often than numbers starting with any other digit\" (that's the simplest form of the law).\n\nHaving read about it on Codeforces, the Hedgehog got intrigued by the statement and wishes to thoroughly explore it. He finds the following similar problem interesting in particular: there are N random variables, the i-th of which can take any integer value from some segment [Li;Ri] (all numbers from this segment are equiprobable). It means that the value of the i-th quantity can be equal to any integer number from a given interval [Li;Ri] with probability 1 / (Ri - Li + 1).\n\nThe Hedgehog wants to know the probability of the event that the first digits of at least K% of those values will be equal to one. In other words, let us consider some set of fixed values of these random variables and leave only the first digit (the MSD \u2014 most significant digit) of each value. Then let's count how many times the digit 1 is encountered and if it is encountered in at least K per cent of those N values, than such set of values will be called a good one. You have to find the probability that a set of values of the given random variables will be a good one.\n\nInput\n\nThe first line contains number N which is the number of random variables (1 \u2264 N \u2264 1000). Then follow N lines containing pairs of numbers Li, Ri, each of whom is a description of a random variable. It is guaranteed that 1 \u2264 Li \u2264 Ri \u2264 1018.\n\nThe last line contains an integer K (0 \u2264 K \u2264 100).\n\nAll the numbers in the input file are integers.\n\nPlease, do not use %lld specificator to read or write 64-bit integers in C++. It is preffered to use cin (also you may use %I64d).\n\nOutput\n\nPrint the required probability. Print the fractional number with such a precision that the relative or absolute error of the result won't exceed 10 - 9.\n\nExamples\n\nInput\n\n1\n1 2\n50\n\n\nOutput\n\n0.500000000000000\n\nInput\n\n2\n1 2\n9 11\n50\n\n\nOutput\n\n0.833333333333333", "solution": "def num_ones(a,b):\n    '''returns how many nums start\n    with digit 1 in [a,b]'''\n    if a==0:\n        if b==0:\n            return 0\n        ans=0\n        b=str(b)\n        for i in range(1,len(b)):\n            ans+=10**(i-1)\n        if b[0]=='1':\n            x=b[1:]\n            if x=='':\n                x=0\n            else:\n                x=int(x)\n            ans+=x+1\n        else:\n            ans+=10**(len(b)-1)\n        return ans\n    return num_ones(0,b)-num_ones(0,a-1)\n        \n        \ndef dp(far,need):\n    '''returns prob that the first\n    far vars have at least need 1s'''\n\n    if DP[far][need]!=-1:\n        return DP[far][need]\n    if need>(far+1):\n        return 0\n    if need==0:\n        return 1\n    if far==0:\n        return L[0]\n    ans=L[far]*dp(far-1,need-1)+(1-L[far])*dp(far-1,need)\n    DP[far][need]=ans\n    return ans\n\nn=int(input())\nL=[]\nfor i in range(n):\n    s=list(map(int,input().split()))\n    L.append(num_ones(s[0],s[1])/(s[1]-s[0]+1))\nk=int(input())\natLeast=int((n*k-1)/100)+1\nif k==0:\n    atLeast=0\nDP=[]\nfor i in range(n):\n    DP.append([-1]*(atLeast+5))\n\nprint(round(dp(n-1,atLeast),10))\n\n\n", "difficulty": 9, "public_tests": {"input": ["2\n1 2\n9 11\n50\n", "1\n1 2\n50\n"], "output": ["0.833333333333333\n", "0.500000000"]}, "private_tests": {"input": ["1\n1 1000000000000000000\n50\n", "1\n1 1\n100\n", "15\n11 20\n16 18\n10 17\n11 17\n2 19\n12 20\n5 24\n17 17\n16 18\n22 23\n3 17\n4 5\n14 21\n23 25\n14 15\n73\n", "1\n1000000000000000000 1000000000000000000\n100\n", "10\n5 20\n13 16\n12 30\n7 16\n10 29\n21 21\n22 26\n14 22\n2 10\n1 29\n48\n", "20\n3 21\n15 28\n21 26\n4 6\n13 28\n20 23\n22 27\n4 13\n1 7\n5 35\n3 3\n16 30\n9 32\n9 16\n3 7\n21 22\n24 29\n6 25\n15 25\n28 33\n32\n", "20\n7 18\n8 16\n8 15\n3 18\n16 18\n1 19\n2 12\n11 15\n8 13\n8 20\n9 14\n1 6\n1 12\n6 9\n1 5\n7 10\n3 8\n15 16\n2 11\n17 19\n65\n", "3\n2 9\n20 99\n5 5\n100\n", "1\n1000000000000000000 1000000000000000000\n50\n", "4\n1 100\n11 19\n101 199\n15 15\n100\n", "1\n100000000000 1000000000000000000\n100\n", "3\n2 9\n20 99\n5 5\n0\n", "10\n10 17\n10 12\n3 6\n17 18\n6 15\n9 18\n3 10\n10 15\n17 19\n2 13\n59\n", "20\n10 21\n9 29\n4 8\n1 27\n24 29\n5 5\n22 22\n4 5\n1 4\n7 12\n11 23\n11 21\n13 13\n10 27\n13 16\n1 24\n4 26\n10 24\n4 19\n26 27\n42\n", "15\n15 35\n9 12\n2 23\n26 32\n7 32\n1 22\n2 7\n12 27\n8 14\n26 34\n25 35\n22 25\n9 21\n18 34\n19 30\n75\n"], "output": ["0.111111111111111\n", "1.000000000000000\n", "0.377283950617284\n", "1.000000000000000\n", "0.470619916649862\n", "0.120023958942805\n", "0.194241434778525\n", "0.000000000000000\n", "1.000000000000000\n", "0.120000000000000\n", "0.111111111111111\n", "1.000000000000000\n", "0.976666666666667\n", "0.556819904295018\n", "0.000000000000000\n"]}, "generated_tests": {"input": ["1\n1 1000000000100000000\n50\n", "10\n5 20\n13 16\n12 30\n7 16\n10 29\n21 21\n22 26\n14 22\n2 10\n2 29\n48\n", "20\n3 21\n15 28\n21 26\n4 6\n13 28\n20 23\n22 27\n4 13\n1 7\n5 35\n3 3\n16 30\n9 32\n9 16\n3 7\n21 22\n24 29\n6 25\n29 25\n28 33\n32\n", "20\n7 18\n8 16\n8 15\n3 18\n16 18\n1 19\n2 18\n11 15\n8 13\n8 20\n9 14\n1 6\n1 12\n6 9\n1 5\n7 10\n3 8\n15 16\n2 11\n17 19\n65\n", "3\n2 9\n20 99\n5 5\n000\n", "10\n10 17\n10 12\n3 6\n17 18\n1 15\n9 18\n3 10\n10 15\n17 19\n2 13\n59\n", "20\n10 21\n18 29\n4 8\n1 27\n24 29\n5 5\n22 22\n4 5\n1 4\n7 12\n11 23\n11 21\n13 13\n10 27\n13 16\n1 24\n4 26\n10 24\n4 19\n26 27\n42\n", "15\n15 35\n9 12\n2 23\n26 32\n7 32\n1 22\n2 7\n12 27\n8 14\n26 34\n25 35\n22 25\n9 21\n18 32\n19 30\n75\n", "2\n1 2\n9 11\n39\n", "20\n3 21\n15 28\n21 26\n4 6\n13 28\n2 23\n22 27\n4 13\n1 7\n5 35\n3 3\n16 30\n9 32\n9 16\n3 7\n21 22\n24 29\n6 25\n29 25\n28 33\n32\n", "20\n3 21\n15 28\n21 26\n4 6\n13 28\n2 23\n15 27\n4 13\n1 7\n5 35\n3 3\n16 30\n9 32\n9 16\n3 7\n21 22\n24 29\n6 25\n29 25\n28 33\n32\n", "1\n100000000000 1000000000100000000\n001\n", "2\n1 2\n4 11\n25\n", "1\n100000000100 1000000000100000000\n001\n", "2\n1 4\n4 11\n8\n", "1\n1 1000000000000000001\n50\n", "15\n16 20\n16 18\n10 17\n11 17\n2 19\n12 20\n5 24\n17 17\n16 18\n22 23\n3 17\n4 5\n14 21\n23 25\n14 15\n73\n", "10\n5 20\n13 16\n12 30\n7 16\n10 29\n38 21\n22 26\n14 22\n2 10\n1 29\n48\n", "20\n3 21\n15 28\n21 26\n4 6\n13 28\n20 23\n22 27\n4 13\n1 7\n5 35\n3 3\n16 30\n9 32\n9 16\n3 7\n21 22\n24 29\n6 25\n15 25\n28 33\n51\n", "10\n10 17\n10 12\n3 6\n17 18\n8 15\n9 18\n3 10\n10 15\n17 19\n2 13\n59\n", "20\n10 21\n9 29\n4 8\n1 27\n24 29\n5 5\n22 22\n4 5\n1 4\n7 12\n11 23\n11 21\n13 13\n10 27\n13 16\n1 24\n4 26\n10 24\n4 19\n26 31\n42\n", "2\n1 2\n9 2\n50\n", "10\n5 20\n13 16\n12 30\n7 16\n10 35\n21 21\n22 26\n14 22\n2 10\n2 29\n48\n", "20\n3 21\n15 28\n21 26\n4 6\n13 28\n20 23\n22 27\n4 13\n1 7\n5 35\n3 3\n16 30\n9 32\n9 18\n3 7\n21 22\n24 29\n6 25\n29 25\n28 33\n32\n", "20\n7 18\n8 16\n8 15\n3 18\n16 18\n1 19\n2 18\n11 15\n8 13\n8 20\n9 14\n1 6\n1 12\n6 9\n1 5\n7 10\n3 15\n15 16\n2 11\n17 19\n65\n", "10\n10 17\n10 12\n3 6\n17 18\n1 16\n9 18\n3 10\n10 15\n17 19\n2 13\n59\n", "1\n1000000000000000000 1000000000000000000\n27\n", "1\n100000000000 1000000000000000000\n000\n", "3\n2 9\n20 99\n5 1\n0\n", "1\n2 1000000000100000000\n50\n", "3\n2 9\n20 86\n5 5\n000\n", "1\n100000000000 1000000000100000000\n000\n", "15\n15 35\n9 12\n2 23\n26 32\n7 32\n1 22\n1 7\n12 27\n8 14\n26 34\n25 35\n22 25\n9 21\n18 32\n19 30\n75\n", "2\n1 2\n9 11\n25\n", "3\n2 8\n20 86\n5 5\n000\n", "15\n15 35\n9 12\n2 23\n26 32\n7 32\n1 12\n1 7\n12 27\n8 14\n26 34\n25 35\n22 25\n9 21\n18 32\n19 30\n75\n", "20\n3 21\n15 28\n21 26\n4 6\n13 28\n2 23\n15 27\n4 13\n1 7\n5 35\n3 3\n16 30\n9 32\n9 16\n3 7\n21 22\n32 29\n6 25\n29 25\n28 33\n32\n", "3\n2 6\n20 86\n5 5\n000\n", "15\n15 35\n9 12\n2 23\n26 32\n7 32\n1 12\n1 7\n12 34\n8 14\n26 34\n25 35\n22 25\n9 21\n18 32\n19 30\n75\n", "2\n1 2\n4 11\n8\n", "20\n3 21\n15 28\n21 26\n4 6\n13 28\n2 23\n15 27\n4 13\n1 7\n5 35\n3 3\n16 30\n9 32\n9 16\n3 7\n21 22\n32 29\n6 25\n29 25\n28 30\n32\n", "3\n2 6\n20 86\n5 3\n000\n", "15\n15 35\n9 12\n2 23\n26 32\n7 32\n1 12\n2 7\n12 34\n8 14\n26 34\n25 35\n22 25\n9 21\n18 32\n19 30\n75\n", "15\n15 35\n9 12\n2 23\n26 32\n7 32\n1 12\n2 7\n12 34\n8 14\n26 34\n25 35\n22 25\n9 21\n18 32\n19 39\n75\n", "2\n1 4\n4 11\n4\n", "2\n1 4\n4 11\n7\n", "2\n1 4\n4 11\n5\n", "2\n1 4\n4 11\n1\n", "2\n1 1\n4 11\n1\n", "3\n2 9\n20 99\n1 5\n100\n", "1\n1000000000000000000 1000000000000000000\n84\n", "1\n100000000000 1000000000000000000\n001\n", "3\n2 2\n20 99\n5 5\n0\n", "1\n1 1000000000100000000\n6\n", "3\n2 9\n20 99\n7 5\n000\n", "1\n100000000000 1000010000000000000\n000\n", "20\n10 21\n18 29\n8 8\n1 27\n24 29\n5 5\n22 22\n4 5\n1 4\n7 12\n11 23\n11 21\n13 13\n10 27\n13 16\n1 24\n4 26\n10 24\n4 19\n26 27\n42\n"], "output": ["0.1111111112\n", "0.46301604706209964\n", "0.06051871455111473\n", "0.24463944815877967\n", "1.0\n", "0.9688888888888889\n", "0.47944225927759204\n", "0.0\n", "0.8333333333333333\n", "0.12002395894280501\n", "0.18792441698339254\n", "0.11111111120000002\n", "0.625\n", "0.11111111119999992\n", "0.4375\n", "0.11111111111111112\n", "0.3463374485596708\n", "0.4706199166498622\n", "3.349496664437241e-05\n", "0.9854166666666666\n", "0.5568199042950182\n", "0.5\n", "0.42300355589829264\n", "0.06184886238734316\n", "0.34895802512338847\n", "0.9708333333333333\n", "1.0\n", "1.0\n", "1.0\n", "0.1111111112\n", "1.0\n", "1.0\n", "0.0\n", "0.8333333333333333\n", "1.0\n", "0.0\n", "0.18792441698339254\n", "1.0\n", "0.0\n", "0.625\n", "0.18792441698339254\n", "1.0\n", "0.0\n", "0.0\n", "0.4375\n", "0.4375\n", "0.4375\n", "0.4375\n", "1.0\n", "0.0\n", "1.0\n", "0.11111111111111112\n", "1.0\n", "0.1111111112\n", "1.0\n", "1.0\n", "0.47944225927759204\n"]}, "short_description": "1. One-sentence summary  \nCompute the probability that at least a given number of independent Bernoulli trials succeed, where each trial\u2019s success probability is derived from counting how many integers in a specified interval start with the digit \u201c1.\u201d\n\n2. Core algorithmic approach  \n- Positional\u2010digit counting: a closed\u2010form method to count numbers in [a,b] whose leading digit is 1 (\u201cnum_ones\u201d function).  \n- Poisson\u2010binomial DP: a prefix dynamic program over trials to compute the distribution of the total number of successes and sum probabilities for \u201cat least\u201d a threshold.\n\n3. Reusable components  \n- Leading\u2010digit counter: a function that, for any digit d and range [a,b], returns how many integers in that range begin with d.  \n- Poisson\u2010binomial DP routine: a 2D DP template that, given an array of success probabilities L[0..n\u20131], computes the probability of exactly k successes.  \n- Probability-threshold computation: a small helper to translate a percentage k into an absolute \u201cat least\u201d count (ceiling of n\u00b7k/100)."}
{"name": "1264_C. Beautiful Mirrors with queries", "description": "Creatnx has n mirrors, numbered from 1 to n. Every day, Creatnx asks exactly one mirror \"Am I beautiful?\". The i-th mirror will tell Creatnx that he is beautiful with probability (p_i)/(100) for all 1 \u2264 i \u2264 n.\n\nSome mirrors are called checkpoints. Initially, only the 1st mirror is a checkpoint. It remains a checkpoint all the time.\n\nCreatnx asks the mirrors one by one, starting from the 1-st mirror. Every day, if he asks i-th mirror, there are two possibilities:\n\n  * The i-th mirror tells Creatnx that he is beautiful. In this case, if i = n Creatnx will stop and become happy, otherwise he will continue asking the i+1-th mirror next day; \n  * In the other case, Creatnx will feel upset. The next day, Creatnx will start asking from the checkpoint with a maximal number that is less or equal to i. \n\n\n\nThere are some changes occur over time: some mirrors become new checkpoints and some mirrors are no longer checkpoints. You are given q queries, each query is represented by an integer u: If the u-th mirror isn't a checkpoint then we set it as a checkpoint. Otherwise, the u-th mirror is no longer a checkpoint.\n\nAfter each query, you need to calculate [the expected number](https://en.wikipedia.org/wiki/Expected_value) of days until Creatnx becomes happy.\n\nEach of this numbers should be found by modulo 998244353. Formally, let M = 998244353. It can be shown that the answer can be expressed as an irreducible fraction p/q, where p and q are integers and q not \u2261 0 \\pmod{M}. Output the integer equal to p \u22c5 q^{-1} mod M. In other words, output such an integer x that 0 \u2264 x < M and x \u22c5 q \u2261 p \\pmod{M}.\n\nInput\n\nThe first line contains two integers n, q (2 \u2264 n, q \u2264 2 \u22c5 10^5) \u2014 the number of mirrors and queries.\n\nThe second line contains n integers: p_1, p_2, \u2026, p_n (1 \u2264 p_i \u2264 100).\n\nEach of q following lines contains a single integer u (2 \u2264 u \u2264 n) \u2014 next query.\n\nOutput\n\nPrint q numbers \u2013 the answers after each query by modulo 998244353.\n\nExamples\n\nInput\n\n\n2 2\n50 50\n2\n2\n\n\nOutput\n\n\n4\n6\n\n\nInput\n\n\n5 5\n10 20 30 40 50\n2\n3\n4\n5\n3\n\n\nOutput\n\n\n117\n665496274\n332748143\n831870317\n499122211\n\nNote\n\nIn the first test after the first query, the first and the second mirrors are checkpoints. Creatnx will ask the first mirror until it will say that he is beautiful, after that he will ask the second mirror until it will say that he is beautiful because the second mirror is a checkpoint. After that, he will become happy. Probabilities that the mirrors will say, that he is beautiful are equal to 1/2. So, the expected number of days, until one mirror will say, that he is beautiful is equal to 2 and the answer will be equal to 4 = 2 + 2.", "solution": "import sys\ninput = sys.stdin.readline\n\nmod = 998244353 #\u51fa\u529b\u306e\u5236\u9650\n#\u4e92\u3044\u306b\u7d20\u306aa,b\u306b\u3064\u3044\u3066\u3001a*x+b*y=1\u306e\u4e00\u3064\u306e\u89e3\ndef extgcd(a,b):\n    r = [1,0,a]\n    w = [0,1,b]\n    while w[2]!=1:\n        q = r[2]//w[2]\n        r2 = w\n        w2 = [r[0]-q*w[0],r[1]-q*w[1],r[2]-q*w[2]]\n        r = r2\n        w = w2\n    #[x,y]\n    return [w[0],w[1]]\n\n# a\u306e\u9006\u5143(mod m)\u3092\u6c42\u3081\u308b\u3002(a\u3068m\u306f\u4e92\u3044\u306b\u7d20\u3067\u3042\u308b\u3053\u3068\u304c\u524d\u63d0)\ndef mod_inv(a,m=mod):\n    x = extgcd(a,m)[0]\n    return (m+x%m)%m\n\nN = int(input())\nA = list(map(int, input().split()))\n\nK = 0\nP = 0\nQ = 1\nfor i, a in enumerate(A):\n    p0 = a * mod_inv(100) % mod\n    q0 = (100-a) * mod_inv(100) % mod\n\n    P = (P + (i+1)*Q*q0) % mod\n    K = (K + Q*q0) % mod\n    Q = Q * p0 % mod\n\ninv = (mod + 1 - K) % mod\nw = (N*Q + P) % mod\nans = w * mod_inv(inv) % mod\nprint(ans)", "difficulty": 9, "public_tests": {"input": ["2 2\n50 50\n2\n2\n", "5 5\n10 20 30 40 50\n2\n3\n4\n5\n3\n"], "output": ["4\n6\n", "117\n665496274\n332748143\n831870317\n499122211\n"]}, "private_tests": {"input": ["2 2\n38 4\n2\n2\n", "2\n18 73\n", "3\n74 11 63\n", "5\n30 48 49 17 25\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 55 21 22 31 7 15 17 65 76 9 100 89 50 96 14 38 27 87 29 93 54 12 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 75 26 26 43 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 78 93 6 7\n", "1\n50\n", "4\n42 20 51 84\n", "3\n10 20 50\n"], "output": ["262695910\n577931032\n", "112435446", "221287072", "626083602", "211104883", "2", "970992516", "112"]}, "generated_tests": {"input": ["2 2\n38 2\n2\n2\n", "2\n18 18\n", "5\n10 48 49 17 25\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 55 21 22 31 7 15 13 65 76 9 100 89 50 96 14 38 27 87 29 93 54 12 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 75 26 26 43 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 78 93 6 7\n", "1\n55\n", "4\n42 20 21 84\n", "3\n5 20 50\n", "5 5\n10 39 30 40 50\n2\n3\n4\n5\n3\n", "2\n18 20\n", "5\n10 48 49 9 25\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 55 21 22 31 7 15 13 65 76 9 100 89 50 96 14 38 27 87 29 93 54 20 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 75 26 26 43 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 78 93 6 7\n", "1\n92\n", "4\n42 20 21 48\n", "3\n3 20 50\n", "5 3\n10 39 30 40 50\n2\n3\n4\n5\n3\n", "2\n14 20\n", "5\n10 48 24 9 25\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 84 21 22 31 7 15 13 65 76 9 100 89 50 96 14 38 27 87 29 93 54 20 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 75 26 26 43 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 78 93 6 7\n", "1\n75\n", "4\n74 20 21 48\n", "3\n1 20 50\n", "2\n7 20\n", "5\n10 55 24 9 25\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 84 21 3 31 7 15 13 65 76 9 100 89 50 96 14 38 27 87 29 93 54 20 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 75 26 26 43 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 78 93 6 7\n", "1\n60\n", "3\n2 20 50\n", "2\n7 15\n", "5\n10 55 1 9 25\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 84 21 3 31 7 15 13 65 76 9 100 89 50 96 14 38 27 87 29 93 54 20 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 75 26 26 48 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 78 93 6 7\n", "1\n58\n", "3\n2 20 86\n", "5 3\n10 39 30 23 50\n2\n4\n4\n5\n5\n", "2\n6 15\n", "5\n10 55 1 1 25\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 84 21 3 4 7 15 13 65 76 9 100 89 50 96 14 38 27 87 29 93 54 20 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 75 26 26 48 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 78 93 6 7\n", "2\n6 27\n", "5\n10 55 1 1 23\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 84 12 3 4 7 15 13 65 76 9 100 89 50 96 14 38 27 87 29 93 54 20 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 75 26 26 48 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 78 93 6 7\n", "2\n6 33\n", "5\n15 55 1 1 23\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 84 12 3 4 7 15 13 65 76 9 100 89 50 96 14 38 27 87 29 93 54 20 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 44 26 26 48 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 78 93 6 7\n", "2\n6 6\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 84 12 3 4 7 15 13 65 76 9 100 89 50 96 14 38 27 87 29 93 54 20 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 44 26 26 48 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 3 93 6 7\n", "2\n6 12\n", "100\n60 79 48 35 18 24 87 1 44 65 60 78 11 43 71 79 90 6 94 49 22 91 58 93 84 12 3 4 7 15 13 65 76 9 100 89 50 96 14 38 27 87 29 93 54 20 99 35 27 51 36 44 6 26 91 1 53 8 49 63 18 4 31 55 95 15 77 1 16 98 44 26 26 48 2 11 18 70 3 65 11 74 64 69 26 54 9 51 25 82 98 12 90 75 19 23 3 93 5 7\n", "5 3\n10 39 30 12 50\n2\n5\n7\n4\n5\n", "2 2\n38 2\n3\n2\n", "2 2\n38 2\n3\n0\n", "5 3\n10 39 30 40 50\n2\n3\n4\n5\n5\n", "2 2\n38 2\n3\n1\n", "5 3\n10 39 30 40 50\n2\n4\n4\n5\n5\n", "5 3\n10 39 30 23 50\n2\n5\n4\n5\n5\n", "5 3\n10 39 30 23 50\n2\n5\n4\n9\n5\n", "5 3\n10 39 30 23 50\n2\n5\n4\n4\n5\n", "5 3\n10 39 30 23 50\n2\n5\n7\n4\n5\n"], "output": ["420313546", "123240080", "676682222", "522617641", "453747435", "823408872", "212", "558850717", "110916072", "834513370", "560806335", "434019285", "442721173", "332748463", "58309389", "285212713", "603880691", "270509128", "332748119", "879512930", "1012", "570425421", "332752055", "409743030", "665496237", "512", "760567228", "111009421", "121195730", "137688878", "835739756", "318417275", "110916157", "840404", "77857639", "948948401", "44315411", "199182155", "50416435", "108497194", "455864206", "776412569", "994952014", "887328461", "452389466", "194364630", "420313546", "420313546", "58309389", "420313546", "58309389", "318417275", "318417275", "318417275", "318417275"]}, "short_description": "1. One-sentence summary:\n   Computes a normalized weighted sum over a sequence of probabilities by accumulating prefix products and correcting with modular inverses.\n\n2. Core algorithmic approach:\n   Iterative prefix\u2013product accumulation combined with modular arithmetic and use of the extended Euclidean algorithm to compute inverses.\n\n3. Reusable components:\n   - Extended GCD (extgcd) for solving a\u00b7x + b\u00b7y = 1 and deriving modular inverses.\n   - Modular-inverse function (mod_inv) to normalize values under a prime modulus.\n   - Prefix accumulation pattern: maintaining running products (`Q`) and weighted sums (`P`, `K`) for one-pass computation of expectations or normalized aggregates."}
{"name": "540_D. Bad Luck Island", "description": "The Bad Luck Island is inhabited by three kinds of species: r rocks, s scissors and p papers. At some moments of time two random individuals meet (all pairs of individuals can meet equiprobably), and if they belong to different species, then one individual kills the other one: a rock kills scissors, scissors kill paper, and paper kills a rock. Your task is to determine for each species what is the probability that this species will be the only one to inhabit this island after a long enough period of time.\n\nInput\n\nThe single line contains three integers r, s and p (1 \u2264 r, s, p \u2264 100) \u2014 the original number of individuals in the species of rock, scissors and paper, respectively.\n\nOutput\n\nPrint three space-separated real numbers: the probabilities, at which the rocks, the scissors and the paper will be the only surviving species, respectively. The answer will be considered correct if the relative or absolute error of each number doesn't exceed 10 - 9.\n\nExamples\n\nInput\n\n2 2 2\n\n\nOutput\n\n0.333333333333 0.333333333333 0.333333333333\n\n\nInput\n\n2 1 2\n\n\nOutput\n\n0.150000000000 0.300000000000 0.550000000000\n\n\nInput\n\n1 1 3\n\n\nOutput\n\n0.057142857143 0.657142857143 0.285714285714", "solution": "A, B, C = map(lambda x: int(x)+1, input().split())\nM = max(max(A, B), C)\np = [[[0] * (M) for i in range(M)] for j in range(M)]\n\nfor a in range(M):\n    for b in range(M):\n        for c in range(M):\n            val=0    \n            if a == 0 or b == 0:\n                val=0\n            elif c == 0:\n                val=1\n            else:\n                div = a*b + b*c + c*a\n                val = (a*b) / div * p[a][b-1][c] + \\\n                      (b*c) / div * p[a][b][c-1] + \\\n                      (a*c) / div * p[a-1][b][c]\n            \n            p[a][b][c]=val    \n            \nprint(p[A-1][B-1][C-1], p[B-1][C-1][A-1], p[C-1][A-1][B-1])        ", "difficulty": 10, "public_tests": {"input": ["2 1 2\n", "2 2 2\n", "1 1 3\n"], "output": ["0.15 0.3 0.55\n", "0.333333333333333 0.333333333333333 0.333333333333333\n", "0.0571428571428571 0.657142857142857 0.285714285714286\n"]}, "private_tests": {"input": ["98 100 99\n", "100 99 100\n", "100 1 100\n", "39 96 87\n", "78 80 80\n", "50 93 89\n", "99 1 100\n", "5 5 5\n", "4 4 4\n", "100 99 98\n", "100 50 40\n", "100 2 100\n", "100 99 99\n", "100 98 99\n", "80 80 80\n", "3 1 2\n", "100 100 100\n", "68 1 100\n", "100 90 5\n", "99 100 100\n", "100 1 99\n", "2 3 3\n", "48 16 81\n", "50 41 100\n", "2 2 1\n", "100 50 41\n", "1 2 3\n", "1 1 2\n", "79 80 80\n", "41 100 50\n", "40 100 50\n", "50 40 100\n", "3 2 1\n", "3 2 3\n", "1 3 2\n", "1 99 100\n", "100 5 90\n", "100 68 1\n", "100 100 99\n", "100 99 1\n", "5 90 100\n", "1 100 68\n", "35 38 78\n", "1 100 69\n", "80 1 89\n", "81 80 80\n", "80 78 80\n", "3 3 3\n", "100 69 1\n", "99 100 1\n", "80 80 78\n", "99 100 99\n", "2 100 100\n", "69 1 100\n", "3 3 2\n", "18 47 22\n", "99 99 100\n", "1 100 100\n", "49 85 47\n", "27 71 76\n", "94 62 53\n", "2 3 1\n", "19 18 23\n", "100 100 2\n", "2 1 3\n", "99 99 99\n", "80 79 80\n", "98 99 100\n", "99 98 100\n", "10 2 69\n", "86 25 84\n", "2 1 1\n", "80 81 80\n", "80 80 79\n", "2 4 3\n", "1 2 2\n", "3 2 4\n", "1 2 1\n", "92 42 99\n", "90 5 100\n", "90 100 5\n", "44 54 32\n", "80 80 81\n", "1 1 1\n", "100 100 1\n", "90 92 97\n", "1 100 99\n", "99 100 98\n", "67 95 88\n", "5 100 90\n", "4 3 2\n", "57 88 2\n", "100 91 51\n"], "output": ["0.329240307785886 0.316221888918141 0.354537803295973\n", "0.341631521601132 0.337638054868783 0.320730423530084\n", "2.54804253118816e-30 0.366003713150524 0.633996286849476\n", "0.856896275912874 0.00182201355088989 0.141281710536236\n", "0.347997020160457 0.304007530347089 0.347995449492453\n", "0.693218455166739 0.0117065515191654 0.295074993314096\n", "2.54831374058549e-30 0.369700913625661 0.630299086374338\n", "0.333333333333333 0.333333333333333 0.333333333333333\n", "0.333333333333333 0.333333333333333 0.333333333333333\n", "0.316221888918141 0.354537803295973 0.329240307785886\n", "0.00313739131835583 0.491912333551917 0.504950275129727\n", "2.39735119621221e-18 0.594637667763193 0.405362332236807\n", "0.328877908412637 0.346125932336117 0.324996159251246\n", "0.33695194279149 0.350590779088643 0.312457278119866\n", "0.333333333333333 0.333333333333333 0.333333333333333\n", "0.133766233766234 0.174025974025974 0.692207792207792\n", "0.333333333333333 0.333333333333333 0.333333333333333\n", "2.39812002406878e-30 0.504856156200627 0.495143843799373\n", "0.0824415566379253 1.84935101217478e-09 0.917558441512724\n", "0.337638054868783 0.320730423530084 0.341631521601133\n", "5.06896412264331e-30 0.362287378787362 0.637712621212638\n", "0.356915584415584 0.448942486085343 0.194141929499072\n", "0.00980003392225896 0.990059771027087 0.000140195050654077\n", "0.524596110914467 0.471692521593504 0.00371136749202907\n", "0.55 0.15 0.3\n", "0.00371136749202907 0.524596110914467 0.471692521593504\n", "0.174025974025974 0.692207792207792 0.133766233766234\n", "0.133333333333333 0.533333333333333 0.333333333333333\n", "0.340633450700151 0.318598848470135 0.340767700829713\n", "0.471692521593504 0.00371136749202908 0.524596110914467\n", "0.504950275129727 0.00313739131835583 0.491912333551917\n", "0.491912333551917 0.504950275129727 0.00313739131835583\n", "0.487662337662338 0.0720779220779221 0.44025974025974\n", "0.194141929499072 0.356915584415584 0.448942486085343\n", "0.44025974025974 0.487662337662338 0.0720779220779221\n", "0.362287378787362 0.637712621212638 5.06896412264331e-30\n", "5.0967277275073e-09 0.850289405957849 0.149710588945423\n", "0.495143843799373 2.39812002406878e-30 0.504856156200627\n", "0.320730423530084 0.341631521601133 0.337638054868783\n", "0.630299086374338 2.54831374058549e-30 0.369700913625661\n", "0.85028940595785 0.149710588945423 5.0967277275073e-09\n", "0.504856156200627 0.495143843799373 2.39812002406878e-30\n", "0.686231300287332 0.30168638259816 0.0120823171145081\n", "0.499807252267535 0.500192747732465 2.40879540356878e-30\n", "4.89880831613474e-27 0.404923676688104 0.595076323311895\n", "0.326087835543961 0.348184483745099 0.325727680710939\n", "0.347995449492453 0.347997020160457 0.304007530347089\n", "0.333333333333333 0.333333333333333 0.333333333333333\n", "0.500192747732465 2.40879540356878e-30 0.499807252267535\n", "0.637712621212638 5.06896412264331e-30 0.362287378787362\n", "0.304007530347089 0.347995449492453 0.347997020160457\n", "0.324996159251246 0.328877908412637 0.346125932336117\n", "0.594637667763193 0.405362332236807 2.39735119621221e-18\n", "2.40879540356878e-30 0.499807252267535 0.500192747732465\n", "0.448942486085343 0.194141929499072 0.356915584415584\n", "0.741659614574191 0.00827677944912059 0.250063605976688\n", "0.346125932336117 0.324996159251246 0.328877908412637\n", "0.366003713150524 0.633996286849476 2.54804253118816e-30\n", "0.185241468441539 0.0362598088326359 0.778498722725824\n", "0.954421631610453 0.00261353721004614 0.0429648311795009\n", "0.0327415799031986 0.688734095294333 0.278524324802468\n", "0.692207792207792 0.133766233766234 0.174025974025974\n", "0.367367874267757 0.441556405078493 0.19107572065375\n", "0.405362332236807 2.39735119621221e-18 0.594637667763193\n", "0.0720779220779221 0.44025974025974 0.487662337662338\n", "0.333333333333333 0.333333333333333 0.333333333333333\n", "0.340767700829713 0.340633450700151 0.318598848470135\n", "0.350590779088643 0.312457278119866 0.33695194279149\n", "0.354537803295973 0.329240307785886 0.316221888918141\n", "5.0830945805494e-13 0.979592460371317 0.0204075396281752\n", "0.0160234212820144 0.983316299664539 0.000660279053446187\n", "0.333333333333333 0.133333333333333 0.533333333333333\n", "0.325727680710939 0.326087835543961 0.348184483745099\n", "0.318598848470135 0.340767700829713 0.340633450700151\n", "0.490992766631864 0.38003304965711 0.128974183711026\n", "0.3 0.55 0.15\n", "0.128974183711026 0.490992766631864 0.38003304965711\n", "0.533333333333333 0.333333333333333 0.133333333333333\n", "0.156634527799755 0.84125217887819 0.00211329332205525\n", "1.84935101217478e-09 0.917558441512724 0.0824415566379253\n", "0.149710588945423 5.0967277275073e-09 0.85028940595785\n", "0.106782618787274 0.143399200448775 0.74981818076395\n", "0.348184483745099 0.325727680710939 0.326087835543961\n", "0.333333333333333 0.333333333333333 0.333333333333333\n", "0.633996286849476 2.54804253118816e-30 0.366003713150524\n", "0.412664975931298 0.267301641052373 0.32003338301633\n", "0.369700913625661 0.630299086374338 2.54831374058549e-30\n", "0.312457278119867 0.33695194279149 0.350590779088643\n", "0.41968720704769 0.0747187637640232 0.505594029188287\n", "0.917558441512724 0.0824415566379253 1.84935101217478e-09\n", "0.38003304965711 0.128974183711026 0.490992766631864\n", "0.628039075773577 3.61535319945111e-11 0.371960924190269\n", "0.00856927433916203 0.316910121953255 0.674520603707583\n"]}, "generated_tests": {"input": ["51 93 89\n", "5 5 10\n", "2 4 4\n", "100 50 65\n", "100 98 48\n", "100 2 99\n", "39 16 81\n", "50 52 100\n", "1 4 3\n", "79 8 80\n", "41 100 14\n", "40 100 41\n", "3 3 1\n", "3 2 2\n", "1 4 2\n", "100 3 90\n", "35 34 78\n", "2 100 69\n", "80 2 89\n", "81 80 74\n", "80 13 80\n", "3 2 6\n", "40 100 99\n", "69 2 100\n", "18 87 22\n", "64 85 47\n", "21 62 53\n", "4 3 1\n", "19 30 23\n", "2 1 4\n", "99 99 65\n", "80 2 80\n", "10 2 47\n", "86 25 68\n", "45 80 79\n", "2 4 2\n", "1 3 4\n", "3 1 4\n", "92 42 87\n", "90 100 9\n", "31 54 32\n", "80 80 5\n", "82 92 97\n", "95 100 98\n", "67 95 93\n", "57 88 4\n", "100 20 51\n", "4 1 3\n", "51 21 89\n"], "output": ["0.6761886516783857 0.013421251306851675 0.3103900970147626\n", "0.16903470604255427 0.7121096051962641 0.11885568876118158\n", "0.38662282579575813 0.4987960671325333 0.11458110707170854\n", "0.05791995031420165 0.8942232720439731 0.04785677764182528\n", "0.004177052873310631 0.2032410618501373 0.792581885276552\n", "3.545217697097368e-18 0.589882988359704 0.410117011640296\n", "0.015517101139791982 0.9843603428087337 0.00012255605147426518\n", "0.7991734244116924 0.18350478406131185 0.017321791526995783\n", "0.40819190834228425 0.5548989356508154 0.03690915600690037\n", "6.078765534005006e-06 0.966282494714959 0.03371142651950698\n", "0.4173857423600942 0.00010886157125061876 0.5825053960686551\n", "0.4282590362107614 0.002582786272725638 0.5691581775165129\n", "0.6310389610389611 0.06999999999999999 0.2989610389610389\n", "0.29707792207792205 0.2082792207792208 0.49464285714285716\n", "0.5466501752216038 0.4182436611008039 0.03510616367759234\n", "1.8155025399955786e-12 0.6877971768846719 0.31220282311351255\n", "0.5553625582457431 0.43787326143192806 0.006764180322328839\n", "0.7464107946114571 0.25358920538854307 -1.6653345369377348e-16\n", "2.1972760618462023e-16 0.6419791808376343 0.3580208191623655\n", "0.24119844322199793 0.38928535620768656 0.36951620057031553\n", "0.0003197372960800745 0.9932878909521052 0.006392371751814729\n", "0.05678160495346588 0.6884903613406476 0.2547280337058866\n", "0.9045773443027885 0.0010832240781027485 0.09433943161910878\n", "3.1154107811593234e-18 0.7464107946114574 0.25358920538854257\n", "0.9570280325446047 7.115107577179132e-05 0.04290081637962354\n", "0.04932014090751875 0.12082686724095325 0.8298529918515279\n", "0.9385965507786639 0.0028309498291962058 0.05857249939213991\n", "0.5548989356508154 0.03690915600690037 0.40819190834228425\n", "0.5638702787857692 0.10211938427259455 0.33401033694163623\n", "0.03510616367759225 0.5466501752216038 0.418243661100804\n", "0.035854716261235035 0.40304651971603256 0.5610987640227324\n", "7.344687242019038e-15 0.5931373164734765 0.4068626835265162\n", "4.286077066166376e-09 0.958468253266902 0.04153174244702096\n", "0.014611304660811023 0.9795827227564619 0.005805972582727081\n", "0.7152844212581715 0.017834951458950435 0.2668806272828781\n", "0.6217779839208412 0.2466604823747681 0.13156153370439075\n", "0.20509195065586044 0.7332578198743612 0.061650229469778384\n", "0.03690915600690037 0.40819190834228425 0.5548989356508154\n", "0.13703138872888043 0.8585035784386434 0.0044650328324761235\n", "0.038080247258220824 2.4272655951980827e-06 0.961917325476184\n", "0.37798590044367886 0.04357020419254279 0.5784438953637784\n", "0.11445408742314055 5.126629038717239e-08 0.885545861310569\n", "0.458335430869812 0.17662916359690373 0.3650354055332843\n", "0.3292303167894649 0.2864192895545633 0.3843503936559718\n", "0.4899662703610996 0.06283138666304128 0.4472023429758591\n", "0.4069490927190905 1.030860758471707e-07 0.5930508041948336\n", "0.0009036148508225851 0.8542640784167436 0.14483230673243386\n", "0.06165022946977833 0.20509195065586044 0.7332578198743613\n", "0.03466446216738225 0.9651624630542661 0.00017307477835160068\n"]}, "short_description": "1. One-sentence summary:  \n   Compute, via state-space dynamic programming, the expected value (or probability) for each player to \u201cwin\u201d starting from a triple of counts, where each step randomly picks a pair to decrement based on their pairwise weights.  \n\n2. Core algorithmic approach:  \n   Three-dimensional dynamic programming over all states (a, b, c), using weighted transitions to previously computed states.  \n\n3. Reusable components:  \n   \u2022 N-dimensional DP array initialization via nested list comprehensions.  \n   \u2022 Triple-nested loops (or more generally, k-nested loops) to fill a DP table over a k-dimensional state space in lexicographic order.  \n   \u2022 Weighted transition update pattern: for each state, distribute probability mass (or expected value) to predecessor states in proportion to given weights."}
{"name": "262_D. Maxim and Restaurant", "description": "Maxim has opened his own restaurant! The restaurant has got a huge table, the table's length is p meters.\n\nMaxim has got a dinner party tonight, n guests will come to him. Let's index the guests of Maxim's restaurant from 1 to n. Maxim knows the sizes of all guests that are going to come to him. The i-th guest's size (ai) represents the number of meters the guest is going to take up if he sits at the restaurant table.\n\nLong before the dinner, the guests line up in a queue in front of the restaurant in some order. Then Maxim lets the guests in, one by one. Maxim stops letting the guests in when there is no place at the restaurant table for another guest in the queue. There is no place at the restaurant table for another guest in the queue, if the sum of sizes of all guests in the restaurant plus the size of this guest from the queue is larger than p. In this case, not to offend the guest who has no place at the table, Maxim doesn't let any other guest in the restaurant, even if one of the following guests in the queue would have fit in at the table.\n\nMaxim is now wondering, what is the average number of visitors who have come to the restaurant for all possible n! orders of guests in the queue. Help Maxim, calculate this number.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 50) \u2014 the number of guests in the restaurant. The next line contains integers a1, a2, ..., an (1 \u2264 ai \u2264 50) \u2014 the guests' sizes in meters. The third line contains integer p (1 \u2264 p \u2264 50) \u2014 the table's length in meters. \n\nThe numbers in the lines are separated by single spaces.\n\nOutput\n\nIn a single line print a real number \u2014 the answer to the problem. The answer will be considered correct, if the absolute or relative error doesn't exceed 10 - 4.\n\nExamples\n\nInput\n\n3\n1 2 3\n3\n\n\nOutput\n\n1.3333333333\n\nNote\n\nIn the first sample the people will come in the following orders: \n\n  * (1, 2, 3) \u2014 there will be two people in the restaurant; \n  * (1, 3, 2) \u2014 there will be one person in the restaurant; \n  * (2, 1, 3) \u2014 there will be two people in the restaurant; \n  * (2, 3, 1) \u2014 there will be one person in the restaurant; \n  * (3, 1, 2) \u2014 there will be one person in the restaurant; \n  * (3, 2, 1) \u2014 there will be one person in the restaurant. \n\n\n\nIn total we get (2 + 1 + 2 + 1 + 1 + 1) / 6 = 8 / 6 = 1.(3).", "solution": "n=int(input())\narr=list(map(int,input().split()))\np=int(input())\ndp=[[[0 for k in range(n+1)] for i in range(p+1)] for i in range(n+1)]\nfor j in range(p+1):\n    for k in range(n+1):\n        dp[0][j][k]=1\nfor i in range(1,n+1):\n    for j in range(p+1):\n        for k in range(1,n+1):\n            if j>=arr[k-1]:\n                dp[i][j][k]=dp[i][j][k-1]+i*dp[i-1][j-arr[k-1]][k-1]\n            else:\n                dp[i][j][k]=dp[i][j][k-1]\nfact=n\nans=0\nfor i in range(1,n+1):\n    ans+=dp[i][p][n]/fact\n    fact*=(n-i)\nprint(ans)\n", "difficulty": 10, "public_tests": {"input": ["3\n1 2 3\n3\n"], "output": ["1.3333333333\n"]}, "private_tests": {"input": ["20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n20\n", "5\n1 2 3 1 2\n3\n", "2\n1 2\n3\n", "1\n2\n1\n", "23\n2 1 2 1 1 1 2 2 2 1 1 2 2 1 1 1 2 1 2 2 1 1 1\n37\n", "5\n1 2 3 4 5\n20\n", "4\n1 2 3 4\n11\n", "2\n1 2\n2\n", "5\n2 3 2 3 6\n30\n", "3\n1 1 1\n50\n", "2\n1 3\n3\n", "1\n1\n1\n", "3\n1 2 3\n10\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n50\n", "3\n1 2 3\n7\n", "6\n1 1 1 1 1 1\n1\n", "3\n2 2 1\n22\n", "44\n24 19 6 4 23 10 11 16 21 15 18 17 13 9 25 3 1 11 24 26 12 12 21 17 19 2 6 24 21 18 7 2 12 2 4 25 17 26 22 10 22 11 13 27\n27\n", "23\n16 21 14 27 15 30 13 10 4 15 25 21 6 10 17 4 5 3 9 9 8 6 19\n30\n", "38\n2 4 2 4 1 2 5 1 5 3 5 4 2 5 4 3 1 1 1 5 4 3 4 3 5 4 2 5 4 1 1 3 2 4 5 3 5 1\n48\n", "42\n3 2 3 1 1 3 1 3 2 3 3 2 1 3 2 3 3 2 3 3 1 3 3 2 3 2 3 1 2 2 2 3 3 1 2 1 1 3 1 3 3 2\n3\n", "27\n38 39 19 33 30 42 34 16 40 9 5 31 28 7 24 37 22 46 25 23 21 30 28 24 48 13 37\n24\n", "8\n9 14 13 2 1 11 4 19\n25\n", "35\n2 2 1 2 2 2 2 2 2 1 2 1 2 1 1 2 2 2 2 2 2 1 1 1 2 2 1 1 2 2 2 1 2 1 1\n35\n", "7\n42 35 1 20 29 50 36\n50\n", "19\n8 11 13 11 7 11 3 11 6 7 3 14 4 10 10 8 2 1 8\n15\n", "41\n31 21 49 18 37 34 36 27 36 39 4 30 25 49 24 10 8 17 45 6 19 27 12 26 6 2 50 47 35 16 15 43 26 14 43 47 49 23 27 7 24\n50\n", "41\n37 6 18 6 25 32 3 1 1 42 25 17 31 8 42 8 38 8 38 4 34 46 10 10 9 22 39 23 47 7 31 14 19 1 42 13 6 11 10 25 38\n12\n", "28\n3 5 4 24 21 3 13 24 22 13 12 21 1 15 11 3 17 6 2 12 22 12 23 4 21 16 25 14\n25\n", "40\n5 8 2 14 14 19 14 2 12 10 17 15 2 9 11 24 7 19 14 21 8 3 24 18 20 10 14 1 9 9 18 18 13 2 23 7 23 2 17 13\n24\n", "50\n1 5 2 4 3 4 1 4 1 2 5 1 4 5 4 2 1 2 5 3 4 5 5 2 1 2 2 2 2 2 3 2 5 1 2 2 3 2 5 5 1 3 4 5 2 1 3 4 2 2\n29\n", "14\n8 13 28 2 17 31 2 11 39 12 24 3 8 10\n41\n", "50\n2 1 2 1 2 1 1 1 2 2 2 1 1 1 1 1 1 2 2 1 2 1 2 2 1 2 2 1 1 2 1 1 1 2 2 2 1 2 1 2 2 2 2 2 1 1 2 2 1 2\n3\n", "36\n5 2 4 5 1 4 3 3 5 2 2 3 3 2 5 1 4 5 2 3 1 4 4 3 5 2 3 5 1 4 3 5 1 2 4 1\n10\n", "50\n15 28 34 29 17 21 20 34 37 17 10 20 37 10 18 25 31 25 16 1 37 27 39 3 5 18 2 32 10 35 20 17 29 20 3 29 3 25 9 32 37 5 25 23 25 33 35 8 31 29\n39\n", "50\n3 2 3 2 1 5 5 5 2 1 4 2 3 5 1 4 4 2 3 2 5 5 4 3 5 1 3 5 5 4 4 4 2 5 4 2 2 3 4 4 3 2 3 3 1 3 4 3 3 4\n19\n", "9\n2 2 2 2 2 2 2 1 2\n9\n", "10\n35 5 7 41 17 27 32 9 45 40\n30\n", "8\n3 1 5 6 1 5 4 4\n7\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n25\n", "10\n42 18 35 1 20 25 29 9 50 36\n50\n", "24\n15 4 49 1 9 19 31 47 49 32 40 49 10 8 23 23 39 43 39 30 41 8 9 42\n38\n", "23\n2 2 1 1 2 2 1 1 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1\n2\n", "50\n1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 5 5 5 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7\n50\n", "49\n46 42 3 1 42 37 25 21 47 22 49 50 19 35 32 35 4 50 19 39 1 39 28 18 29 44 49 34 8 22 11 18 14 15 10 17 36 2 1 50 20 7 49 4 25 9 45 10 40\n34\n", "35\n5 1 2 3 1 4 1 2 2 2 3 2 3 3 2 5 2 2 3 3 3 3 2 1 2 4 5 5 1 5 3 2 1 4 3\n6\n", "18\n2 1 2 2 1 2 1 1 2 2 1 2 2 1 2 1 1 2\n8\n", "9\n1 2 2 7 4 4 1 4 7\n7\n", "16\n3 5 3 1 4 2 3 2 1 4 5 3 5 2 2 4\n39\n", "3\n36 44 44\n46\n", "7\n2 1 1 2 1 1 2\n2\n", "50\n1 2 3 4 4 4 4 4 4 4 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\n50\n", "30\n2 3 1 4 1 2 2 2 5 5 2 3 2 4 3 1 1 2 1 2 1 2 3 2 1 1 3 5 4 4\n5\n", "40\n1 26 39 14 16 17 19 28 38 18 23 41 19 22 4 24 18 36 15 21 31 29 34 13 19 19 38 45 4 10 2 14 3 24 21 27 4 30 9 17\n45\n"], "output": ["20\n", "1.5000000000\n", "2\n", "0.0000000000\n", "23\n", "5\n", "4\n", "1.0000000000\n", "5\n", "3\n", "1.0000000000\n", "1\n", "3\n", "50\n", "3\n", "1.0000000000\n", "3\n", "1.551389104", "1.940170585", "15.00790783", "1.202090592", "0.4333903134", "2.35", "21.28730989", "1.314285714", "1.612831097", "1.553542443", "0.5001534565", "1.646189447", "1.671571397", "9.887309349", "2.493173493", "1.837959184", "2.964912724", "1.499798753", "5.576263518", "4.555555556", "0.65", "1.625", "25", "1.526984127", "0.8604837192", "1.177865613", "12.00114713", "0.9154259295", "1.985172133", "4.984939897", "1.734126984", "12.33956044", "1", "1.285714286", "2.31676271", "1.86147671", "1.850737662"]}, "generated_tests": {"input": ["5\n1 2 3 1 4\n3\n", "2\n1 1\n3\n", "1\n3\n1\n", "5\n1 2 3 4 5\n15\n", "4\n1 2 1 4\n11\n", "5\n2 3 2 3 6\n6\n", "3\n1 2 1\n50\n", "2\n1 5\n3\n", "1\n1\n2\n", "44\n24 19 6 4 23 10 11 16 21 15 18 17 13 9 25 3 1 11 24 26 12 12 21 17 25 2 6 24 21 18 7 2 12 2 4 25 17 26 22 10 22 11 13 27\n27\n", "23\n16 21 14 27 15 30 13 10 4 15 25 21 6 10 17 4 5 3 9 9 8 2 19\n30\n", "42\n3 2 3 1 1 3 1 3 2 3 3 3 1 3 2 3 3 2 3 3 1 3 3 2 3 2 3 1 2 2 2 3 3 1 2 1 1 3 1 3 3 2\n3\n", "27\n38 39 19 33 30 42 34 16 40 9 5 31 28 7 24 37 22 46 25 23 21 30 28 24 42 13 37\n24\n", "8\n9 14 12 2 1 11 4 19\n25\n", "35\n2 2 1 2 2 2 2 2 2 1 2 1 2 1 1 2 2 2 2 2 2 1 1 1 2 2 1 1 3 2 2 1 2 1 1\n35\n", "7\n42 35 1 20 29 50 13\n50\n", "19\n8 11 13 11 8 11 3 11 6 7 3 14 4 10 10 8 2 1 8\n15\n", "41\n31 21 49 18 37 34 36 27 36 39 4 30 25 49 24 10 8 17 45 6 19 27 12 26 6 2 50 47 35 16 15 43 26 14 43 47 49 23 27 7 10\n50\n", "41\n37 6 18 4 25 32 3 1 1 42 25 17 31 8 42 8 38 8 38 4 34 46 10 10 9 22 39 23 47 7 31 14 19 1 42 13 6 11 10 25 38\n12\n", "50\n1 5 2 4 3 4 1 4 1 2 5 1 4 5 4 2 1 2 5 3 4 5 5 2 1 2 2 2 2 2 3 2 5 1 2 1 3 2 5 5 1 3 4 5 2 1 3 4 2 2\n29\n", "14\n8 13 28 2 17 31 2 11 31 12 24 3 8 10\n41\n", "50\n2 1 2 1 2 1 1 1 2 2 2 1 1 1 1 1 1 2 2 1 2 1 2 2 1 2 2 1 1 2 1 1 1 2 2 2 2 2 1 2 2 2 2 2 1 1 2 2 1 2\n3\n", "50\n15 28 34 29 17 21 20 34 37 17 10 20 37 10 18 25 31 25 16 1 37 27 39 3 5 18 2 32 10 35 20 17 29 20 3 29 3 12 9 32 37 5 25 23 25 33 35 8 31 29\n39\n", "10\n35 5 7 41 17 27 32 9 45 40\n7\n", "50\n1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n25\n", "24\n15 4 49 1 9 19 31 47 49 32 40 49 9 8 23 23 39 43 39 30 41 8 9 42\n38\n", "23\n2 2 1 1 2 2 1 1 1 2 2 2 1 2 2 3 2 1 2 1 2 1 1\n2\n", "50\n1 1 1 1 1 1 1 2 2 2 3 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 5 5 5 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7\n50\n", "49\n46 42 3 2 42 37 25 21 47 22 49 50 19 35 32 35 4 50 19 39 1 39 28 18 29 44 49 34 8 22 11 18 14 15 10 17 36 2 1 50 20 7 49 4 25 9 45 10 40\n34\n", "18\n2 1 2 2 2 2 1 1 2 2 1 2 2 1 2 1 1 2\n8\n", "9\n1 2 2 7 4 4 1 4 7\n6\n", "50\n1 2 3 4 4 4 4 4 4 4 4 5 6 7 8 9 8 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\n50\n", "30\n2 3 1 4 1 2 2 2 5 5 2 3 2 4 3 1 1 2 1 2 1 2 3 2 1 1 5 5 4 4\n5\n", "3\n1 2 3\n1\n", "44\n24 19 6 4 23 10 11 16 21 15 18 17 13 9 25 3 1 11 24 26 12 12 21 17 25 2 6 7 21 18 7 2 12 2 4 25 17 26 22 10 22 11 13 27\n27\n", "23\n16 21 14 27 15 35 13 10 4 15 25 21 6 10 17 4 5 3 9 9 8 2 19\n30\n", "42\n3 2 3 1 1 3 1 3 2 3 3 3 1 3 2 3 3 2 3 3 1 3 3 2 3 2 3 1 2 2 2 3 3 1 2 1 1 3 2 3 3 2\n3\n", "27\n38 39 19 33 30 42 34 16 40 9 5 31 28 7 24 37 22 46 25 23 21 30 28 11 42 13 37\n24\n", "8\n9 14 12 2 2 11 4 19\n25\n", "35\n2 2 1 2 2 2 2 1 2 1 2 1 2 1 1 2 2 2 2 2 2 1 1 1 2 2 1 1 3 2 2 1 2 1 1\n35\n", "7\n42 35 1 20 29 32 13\n50\n", "19\n8 11 13 11 8 11 3 11 6 7 3 14 4 2 10 8 2 1 8\n15\n", "50\n1 5 2 4 3 4 1 8 1 2 5 1 4 5 4 2 1 2 5 3 4 5 5 2 1 2 2 2 2 2 3 2 5 1 2 1 3 2 5 5 1 3 4 5 2 1 3 4 2 2\n29\n", "14\n8 13 28 2 20 31 2 11 31 12 24 3 8 10\n41\n", "50\n15 28 34 29 17 21 20 34 37 17 10 20 37 10 18 25 22 25 16 1 37 27 39 3 5 18 2 32 10 35 20 17 29 20 3 29 3 12 9 32 37 5 25 23 25 33 35 8 31 29\n39\n", "2\n1 2\n5\n", "3\n1 3 3\n7\n", "5\n1 2 3 2 4\n3\n", "2\n1 1\n6\n", "1\n1\n0\n", "4\n1 1 1 4\n11\n", "2\n1 1\n5\n", "3\n1 2 2\n50\n", "2\n1 10\n3\n", "1\n1\n3\n", "3\n1 3 3\n9\n"], "output": ["1.100000\n", "2.000000\n", "0.000000\n", "5.000000\n", "4.000000\n", "1.600000\n", "3.000000\n", "0.500000\n", "1.000000\n", "1.542601\n", "1.981289\n", "1.190476\n", "0.433390\n", "2.385714\n", "20.910670\n", "1.542857\n", "1.592449\n", "1.583823\n", "0.506060\n", "9.962539\n", "2.557359\n", "1.803827\n", "1.523769\n", "0.200000\n", "24.500000\n", "0.860766\n", "1.134387\n", "11.938916\n", "0.914331\n", "4.795437\n", "1.369048\n", "2.325002\n", "1.813201\n", "0.333333\n", "1.587120\n", "1.937811\n", "1.174564\n", "0.445128\n", "2.371429\n", "21.284518\n", "1.666667\n", "1.725785\n", "9.693669\n", "2.509074\n", "1.534861\n", "2.000000\n", "3.000000\n", "1.000000\n", "2.000000\n", "0.000000\n", "4.000000\n", "2.000000\n", "3.000000\n", "0.500000\n", "1.000000\n", "3.000000\n"]}, "short_description": "1. One-sentence summary:  \nCompute a weighted count of ways to select a variable\u2010sized collection of items (or positions) whose values sum to a target, then aggregate these counts to produce an expectation-like quantity.  \n\n2. Core algorithmic approach:  \nA three-dimensional dynamic\u2010programming over (number of selected items i, total sum j, first k items considered), i.e. a variation on the classic subset\u2010sum DP augmented with extra multiplicative weights to account for ordering or labeling, followed by a simple accumulation and normalization.  \n\n3. Reusable components:  \n- The 3D knapsack/subset\u2010sum DP pattern dp[i][j][k]=dp[i][j][k\u22121]+ weight*dp[i\u22121][j\u2212value][k\u22121] for counting combinations with extra weights.  \n- A prefix\u2010based DP traversal that builds answers incrementally over items (the \u201cfirst k items\u201d dimension).  \n- A falling\u2010factorial or factorial\u2010style normalization loop to convert raw counts into expected values or probabilities."}
{"name": "1111_D. Destroy the Colony", "description": "There is a colony of villains with several holes aligned in a row, where each hole contains exactly one villain.\n\nEach colony arrangement can be expressed as a string of even length, where the i-th character of the string represents the type of villain in the i-th hole. \n\nIron Man can destroy a colony only if the colony arrangement is such that all villains of a certain type either live in the first half of the colony or in the second half of the colony.\n\nHis assistant Jarvis has a special power. It can swap villains of any two holes, i.e. swap any two characters in the string; he can do this operation any number of times.\n\nNow Iron Man asks Jarvis q questions. In each question, he gives Jarvis two numbers x and y. Jarvis has to tell Iron Man the number of distinct colony arrangements he can create from the original one using his powers such that all villains having the same type as those originally living in x-th hole or y-th hole live in the same half and the Iron Man can destroy that colony arrangement.\n\nTwo colony arrangements are considered to be different if there exists a hole such that different types of villains are present in that hole in the arrangements.\n\nInput\n\nThe first line contains a string s (2 \u2264 |s| \u2264 10^{5}), representing the initial colony arrangement. String s can have both lowercase and uppercase English letters and its length is even.\n\nThe second line contains a single integer q (1 \u2264 q \u2264 10^{5}) \u2014 the number of questions.\n\nThe i-th of the next q lines contains two integers x_i and y_i (1 \u2264 x_i, y_i \u2264 |s|, x_i \u2260 y_i) \u2014 the two numbers given to the Jarvis for the i-th question.\n\nOutput\n\nFor each question output the number of arrangements possible modulo 10^9+7.\n\nExamples\n\nInput\n\n\nabba\n2\n1 4\n1 2\n\n\nOutput\n\n\n2\n0\n\n\nInput\n\n\nAAaa\n2\n1 2\n1 3\n\n\nOutput\n\n\n2\n0\n\n\nInput\n\n\nabcd\n1\n1 3\n\n\nOutput\n\n\n8\n\nNote\n\nConsider the first example. For the first question, the possible arrangements are \"aabb\" and \"bbaa\", and for the second question, index 1 contains 'a' and index 2 contains 'b' and there is no valid arrangement in which all 'a' and 'b' are in the same half.", "solution": "from sys import stdin\nMOD = 1000000007\ns = stdin.readline().strip()\nn = len(s)\nbuc = [0] * 101\nfac = [0] * (n + 1)\ninv = [0] * (n + 1)\ndp = [0] * (n + 1)\n# temp_dp = [0] * (n+1)\nans = [[0] * 55 for _ in range(55)]\n\n\ndef find(c: 'str') -> 'int':\n    if 'A' <= c <= 'Z':\n        return ord(c) - ord('A') + 26\n    else:\n        return ord(c) - ord('a')\n\n\ndef add(a: 'int', b: 'int') -> 'int':\n    a += b\n    if a >= MOD:\n        a -= MOD\n    return a\n\n\ndef sub(a: 'int', b: 'int') -> 'int':\n    a -= b\n    if a < 0:\n        a += MOD\n    return a\n\n\n# c = Counter(s)\n\n# # store frequency\n# for k in c.keys():\n#     buc[find(k)] = c[k]\n\nfor i in s:\n    buc[find(i)] += 1  # naive count is fater than counter\n\n# compute factorial and inv\n\nfac[0] = 1\nfor i in range(1, n + 1):\n    fac[i] = (fac[i - 1] * i) % MOD\ninv[n] = pow(fac[n], MOD - 2, MOD)\nfor i in range(n - 1, -1, -1):\n    inv[i] = (inv[i + 1] * (i + 1)) % MOD\n\nnum = pow(fac[n // 2], 2, MOD)\nfor i in range(0, 52):\n    num = (num * inv[buc[i]]) % MOD\n\ndp[0] = 1\n\nfor i in range(0, 52):\n    if not buc[i]:\n        continue\n    for j in range(n, buc[i] - 1, -1):\n        dp[j] = add(dp[j], dp[j - buc[i]])\n\nfor i in range(52):\n    ans[i][i] = dp[n // 2]\n\nfor i in range(52):\n    if not buc[i]:\n        continue\n    temp_dp = dp.copy()\n    for k in range(buc[i], n + 1):\n        temp_dp[k] = sub(temp_dp[k], temp_dp[k - buc[i]])\n\n    for j in range(i + 1, 52):\n        if not buc[j]:\n            continue\n        for k in range(buc[j], n + 1):\n            temp_dp[k] = sub(temp_dp[k], temp_dp[k - buc[j]])\n\n        ans[i][j] = (2 * temp_dp[n // 2]) % MOD\n\n        for k in range(n, buc[j] - 1, -1):\n            temp_dp[k] = add(temp_dp[k], temp_dp[k - buc[j]])\n\nq = int(input())\nl = stdin.read().splitlines()\nfor i in l:\n    x, y = map(int, i.split())\n    l, r = find(s[x - 1]), find(s[y - 1])\n    if l > r:\n        l, r = r, l\n    print(num * ans[l][r] % MOD)\n", "difficulty": 10, "public_tests": {"input": ["abcd\n1\n1 3\n", "abba\n2\n1 4\n1 2\n", "AAaa\n2\n1 2\n1 3\n"], "output": ["8\n", "2\n0\n", "2\n0\n"]}, "private_tests": {"input": ["sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n23 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 1\n33 22\n48 8\n5 33\n8 34\n31 4\n49 3\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 12\n42 20\n17 43\n25 23\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n36 1\n48 18\n8 35\n41 1\n29 43\n7 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 6\n47 9\n47 29\n35 26\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 27\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 4\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 14\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "lFEDyIhUkNCqZpkLctYFIZZkqrgqKonRVqfrOsAHMQtpCYReXKYeKszlIBcGNCQmCCKaSyvJEppHrqONDhXu\n54\n68 44\n38 70\n57 44\n42 3\n55 42\n36 76\n15 67\n1 62\n49 81\n29 63\n40 44\n47 45\n23 24\n79 80\n1 29\n14 3\n34 84\n73 3\n15 27\n62 68\n14 81\n9 58\n4 59\n73 81\n34 12\n21 1\n4 46\n63 55\n49 30\n24 22\n21 64\n10 71\n41 17\n49 50\n46 68\n58 15\n14 78\n75 30\n82 57\n21 62\n51 13\n40 30\n69 50\n4 59\n55 67\n74 63\n69 34\n70 54\n28 65\n80 24\n13 31\n15 12\n42 57\n29 59\n"], "output": ["772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n752934171\n752934171\n981246811\n306118655\n981246811\n148292855\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n306118655\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n772303774\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n772303774\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n887102601\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n544782098\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "958723905\n44768214\n112406852\n44768214\n386141591\n648917628\n112406852\n755798651\n44768214\n94371083\n94371083\n755798651\n815703711\n648917628\n94371083\n94371083\n372391256\n604938277\n730732243\n372391256\n94371083\n730732243\n44768214\n44768214\n604938277\n648917628\n648917628\n386141591\n386141591\n815703711\n730732243\n730732243\n386141591\n94371083\n730732243\n730732243\n296666819\n958723905\n648917628\n383707329\n815703711\n386141591\n958723905\n44768214\n958723905\n94371083\n372391256\n44768214\n545129554\n815703711\n730732243\n383707329\n648917628\n94371083\n"]}, "generated_tests": {"input": ["sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n23 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 1\n33 22\n48 8\n5 33\n8 34\n31 4\n49 3\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 12\n42 20\n17 43\n25 23\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n36 1\n48 18\n8 35\n41 1\n29 43\n7 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 2\n47 9\n47 29\n35 26\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 27\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 14\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "lFEDyIhUkNCqZpkLctYFIZZkqrgqKonRVqfrOsAHMQtpCYReXKYeKszlIBcGNCQmCCKaSyvJEppHrqONDhXu\n54\n68 44\n38 70\n57 44\n42 3\n55 42\n36 76\n15 67\n1 62\n49 81\n29 63\n40 44\n47 45\n23 24\n79 80\n1 29\n14 3\n34 84\n73 3\n15 27\n62 68\n14 81\n9 58\n4 59\n73 81\n34 12\n21 1\n4 46\n63 55\n49 30\n24 22\n21 64\n10 71\n8 17\n49 50\n46 68\n58 15\n14 78\n75 30\n82 57\n21 62\n51 13\n40 30\n69 50\n4 59\n55 67\n74 63\n69 34\n70 54\n28 65\n80 24\n13 31\n15 12\n42 57\n29 59\n", "abbd\n1\n1 3\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 27\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "lFEDyIhUkNCqZpkLctYFIZZkqrgqKonRVqfrOsAHMQtpCYReXKYeKszlIBcGNCQmCCKaSyvJEppHrqONDhXu\n54\n68 44\n38 70\n57 44\n42 3\n55 42\n36 76\n15 67\n1 62\n49 81\n29 63\n40 44\n47 41\n23 24\n79 80\n1 29\n14 3\n34 84\n73 3\n15 27\n62 68\n14 81\n9 58\n4 59\n73 81\n34 12\n21 1\n4 46\n63 55\n49 30\n24 22\n21 64\n10 71\n8 17\n49 50\n46 68\n58 15\n14 78\n75 30\n82 57\n21 62\n51 13\n40 30\n69 50\n4 59\n55 67\n74 63\n69 34\n70 54\n28 65\n80 24\n13 31\n15 12\n42 57\n29 59\n", "abbd\n1\n2 3\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 3\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n23 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 1\n33 22\n48 8\n5 33\n8 34\n31 4\n49 3\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 12\n42 20\n17 43\n25 23\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n36 1\n48 18\n8 35\n41 1\n29 43\n7 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 6\n47 9\n47 29\n35 7\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "lFEDyIhUkNCqZpkLctYFIZZkqrgqKonRVqfrOsAHMQtpCYReXKYeKszlIBcGNCQmCCKaSyvJEppHrqONDhXu\n54\n68 44\n38 70\n57 44\n42 3\n55 42\n36 76\n15 67\n1 62\n49 81\n29 63\n40 44\n47 45\n23 24\n79 80\n1 29\n14 3\n34 84\n73 3\n15 27\n62 68\n14 81\n9 58\n4 59\n73 81\n34 12\n21 1\n4 46\n63 55\n49 30\n24 22\n21 64\n10 71\n41 17\n49 50\n63 68\n58 15\n14 78\n75 30\n82 57\n21 62\n51 13\n40 30\n69 50\n4 59\n55 67\n74 63\n69 34\n70 54\n28 65\n80 24\n13 31\n15 12\n42 57\n29 59\n", "abbb\n2\n1 4\n1 2\n", "sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n23 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 1\n33 22\n48 8\n5 33\n8 34\n31 4\n49 2\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 12\n42 20\n17 43\n25 23\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n36 1\n48 18\n8 35\n41 1\n29 43\n7 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 2\n47 9\n47 29\n35 26\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 27\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n1 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 14\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n26 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 3\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 52\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n23 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 1\n7 22\n48 8\n5 33\n8 34\n31 4\n49 2\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 12\n42 20\n17 43\n25 23\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n36 1\n48 18\n8 35\n41 1\n29 43\n7 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 2\n47 9\n47 29\n35 26\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n44 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n26 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n28 13\n22 27\n26 36\n18 10\n26 3\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 52\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n23 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 1\n7 22\n48 8\n5 33\n8 34\n31 4\n49 2\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 12\n42 20\n17 43\n25 23\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n36 1\n48 18\n8 35\n41 1\n29 43\n13 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 2\n47 9\n47 29\n35 26\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n28 13\n22 27\n26 36\n18 10\n26 3\n16 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 52\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNCvaCHQFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n44 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n26 47\n4 55\n31 38\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n26 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n28 13\n22 27\n26 36\n18 10\n26 3\n16 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 52\n24 34\n34 7\n33 43\n31 49\n5 12\n15 49\n50 42\n53 1\n29 41\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n28 13\n22 27\n26 36\n18 10\n26 3\n16 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n38 41\n13 43\n57 52\n23 47\n4 55\n31 52\n24 34\n34 7\n33 43\n31 49\n5 12\n15 49\n50 42\n53 1\n29 41\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n39 37\n25 4\n53 14\n3 45\n7 48\n28 13\n22 27\n26 36\n18 10\n26 3\n16 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n38 41\n13 43\n57 52\n23 47\n4 55\n31 52\n24 34\n34 7\n33 43\n31 49\n5 12\n15 49\n50 42\n53 1\n29 41\n23 32\n24 34\n55 50\n4 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n39 37\n25 4\n53 18\n3 45\n7 48\n28 13\n22 27\n26 36\n18 10\n26 3\n16 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n38 41\n13 43\n57 52\n23 47\n4 55\n31 52\n24 34\n34 7\n33 43\n31 49\n5 12\n15 49\n50 42\n53 1\n29 41\n23 32\n24 34\n55 50\n4 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 27\n25 4\n53 14\n3 45\n7 48\n54 13\n22 2\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 4\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 14\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "lFEDyIhUkNCqZpkLctYFIZZkqrgqKonRVqfrOsAHMQtpCYReXKYeKszlIBcGNCQmCCKaSyvJEppHrqONDhXu\n54\n68 44\n38 70\n57 44\n42 3\n55 42\n36 76\n15 67\n1 62\n49 81\n29 63\n40 44\n47 45\n23 24\n79 80\n1 29\n14 3\n34 84\n73 3\n15 27\n62 68\n14 81\n14 58\n4 59\n73 81\n34 12\n21 1\n4 46\n63 55\n49 30\n24 22\n21 64\n10 71\n41 17\n49 50\n46 68\n58 15\n14 78\n75 30\n82 57\n21 62\n51 13\n40 30\n69 50\n4 59\n55 67\n74 63\n69 34\n70 54\n28 65\n80 24\n13 31\n15 12\n42 57\n29 59\n", "abba\n2\n1 1\n1 2\n", "lFEDyIhUkNCqZpkLctYFIZZkqrgqKonRVqfrOsAHMQtpCYReXKYeKszlIBcGNCQmCCKaSyvJEppHrqONDhXu\n54\n68 44\n38 70\n57 44\n42 3\n55 42\n36 76\n15 67\n1 62\n49 81\n29 63\n40 44\n47 45\n23 24\n79 80\n1 29\n14 3\n34 84\n73 3\n15 27\n62 68\n14 81\n9 58\n4 59\n73 81\n34 12\n21 1\n4 46\n63 55\n49 30\n24 22\n21 64\n10 71\n8 17\n49 50\n46 68\n58 15\n14 78\n75 30\n82 57\n21 62\n51 13\n40 30\n69 50\n4 59\n55 67\n74 63\n69 34\n70 54\n28 65\n80 11\n13 31\n15 12\n42 57\n29 59\n", "lFEDyIhUkNCqZpkLctYFIZZkqrgqKonRVqfrOsAHMQtpCYReXKYeKszlIBcGNCQmCCKaSyvJEppHrqONDhXu\n54\n68 44\n38 70\n57 44\n42 3\n55 42\n36 76\n15 67\n1 62\n49 81\n29 63\n40 44\n47 41\n23 24\n79 80\n1 29\n14 3\n34 84\n73 3\n15 27\n62 68\n14 81\n9 58\n4 59\n73 81\n34 12\n21 1\n4 46\n63 55\n49 30\n24 22\n21 64\n10 71\n8 17\n49 50\n46 68\n58 15\n14 78\n75 30\n82 57\n21 62\n51 13\n40 30\n69 50\n4 59\n73 67\n74 63\n69 34\n70 54\n28 65\n80 24\n13 31\n15 12\n42 57\n29 59\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n43 34\n55 50\n24 33\n4 39\n", "AaaA\n2\n1 2\n2 3\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 27\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n1 5\n45 20\n58 41\n10 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 14\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 40\n7 48\n54 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n26 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 27\n25 4\n53 14\n3 45\n7 48\n54 13\n10 27\n26 36\n18 10\n26 10\n30 8\n38 1\n37 1\n53 5\n49 43\n1 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 14\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n23 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 1\n7 22\n48 8\n5 33\n8 34\n31 4\n49 2\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 7\n42 20\n17 43\n25 23\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n36 1\n48 18\n8 35\n41 1\n29 43\n13 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 2\n47 9\n47 29\n35 26\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n23 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 1\n33 22\n48 8\n5 33\n8 34\n31 4\n49 3\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 12\n42 20\n17 43\n25 23\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n39 1\n48 18\n8 35\n41 1\n29 43\n7 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 2\n47 9\n47 29\n35 26\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "abbd\n1\n2 4\n", "babd\n1\n1 3\n", "AaaA\n2\n1 2\n1 3\n", "dbba\n1\n1 3\n", "abbb\n2\n1 4\n1 3\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 27\n25 4\n53 14\n3 45\n7 48\n54 13\n10 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n1 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 14\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNCvaCHQFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n44 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n26 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n14 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 1\n7 22\n48 8\n5 33\n8 34\n31 4\n49 2\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 12\n42 20\n17 43\n25 23\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n36 1\n48 18\n8 35\n41 1\n29 43\n13 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 2\n47 9\n47 29\n35 26\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n28 13\n22 27\n26 36\n18 10\n26 3\n16 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 52\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n29 41\n23 32\n24 34\n55 50\n24 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n28 13\n22 27\n26 36\n18 10\n26 3\n16 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n38 41\n13 43\n57 52\n23 47\n4 55\n31 52\n24 34\n34 7\n33 43\n31 49\n5 12\n15 49\n50 42\n53 1\n29 41\n23 32\n24 34\n55 50\n4 33\n4 39\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 27\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 10\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 14\n33 43\n31 49\n5 12\n11 49\n50 42\n40 1\n29 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n23 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 1\n33 22\n48 8\n5 33\n8 34\n31 4\n49 3\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 12\n42 20\n17 43\n25 9\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n39 1\n48 18\n8 35\n41 1\n29 43\n7 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 2\n47 9\n47 29\n35 26\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "dbba\n1\n2 3\n", "abbd\n1\n2 2\n", "MQrIlIwgIgWFfHFzxnJsfMTJoNhOeUVqfGLJhFOUqhaRtYNQvaCHCFhyyp\n38\n39 47\n44 37\n25 4\n53 14\n3 45\n7 48\n54 13\n22 27\n26 36\n18 10\n26 3\n30 8\n52 1\n37 1\n53 5\n49 43\n15 5\n45 20\n58 41\n13 43\n57 52\n23 47\n4 55\n31 38\n24 34\n34 7\n33 43\n31 49\n5 12\n11 49\n50 42\n53 1\n16 56\n23 32\n24 34\n55 50\n24 33\n4 39\n", "sYDMlMKcqjyzmIKKjjcNyUgaixfaNUJYXjHXRHiRzNyHysnxTt\n68\n19 15\n46 34\n38 30\n50 39\n22 11\n4 14\n23 2\n10 47\n42 15\n9 5\n38 40\n43 16\n11 46\n29 46\n49 5\n28 2\n33 22\n48 8\n5 33\n8 34\n31 4\n49 3\n22 21\n31 22\n13 48\n17 50\n48 41\n7 9\n23 16\n18 12\n42 20\n17 43\n25 23\n34 30\n47 5\n42 19\n38 1\n28 38\n35 8\n11 39\n29 15\n48 42\n12 5\n36 1\n48 18\n8 35\n41 1\n29 43\n7 46\n19 8\n50 14\n1 26\n19 5\n43 24\n43 3\n43 45\n43 6\n49 6\n47 9\n47 29\n35 7\n6 36\n22 11\n42 33\n42 25\n29 32\n19 29\n45 30\n", "aabb\n2\n1 4\n1 3\n"], "output": ["772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n752934171\n752934171\n981246811\n306118655\n981246811\n148292855\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n306118655\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n772303774\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n772303774\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n544782098\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "958723905\n44768214\n112406852\n44768214\n386141591\n648917628\n112406852\n755798651\n44768214\n94371083\n94371083\n755798651\n815703711\n648917628\n94371083\n94371083\n372391256\n604938277\n730732243\n372391256\n94371083\n730732243\n44768214\n44768214\n604938277\n648917628\n648917628\n386141591\n386141591\n815703711\n730732243\n730732243\n386141591\n94371083\n730732243\n730732243\n296666819\n958723905\n648917628\n383707329\n815703711\n386141591\n958723905\n44768214\n958723905\n94371083\n372391256\n44768214\n545129554\n815703711\n730732243\n383707329\n648917628\n94371083\n", "0\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "958723905\n44768214\n112406852\n44768214\n386141591\n648917628\n112406852\n755798651\n44768214\n94371083\n94371083\n386141591\n815703711\n648917628\n94371083\n94371083\n372391256\n604938277\n730732243\n372391256\n94371083\n730732243\n44768214\n44768214\n604938277\n648917628\n648917628\n386141591\n386141591\n815703711\n730732243\n730732243\n386141591\n94371083\n730732243\n730732243\n296666819\n958723905\n648917628\n383707329\n815703711\n386141591\n958723905\n44768214\n958723905\n94371083\n372391256\n44768214\n545129554\n815703711\n730732243\n383707329\n648917628\n94371083\n", "4\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n544782098\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n752934171\n752934171\n981246811\n306118655\n981246811\n148292855\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n306118655\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n772303774\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n93007815\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "958723905\n44768214\n112406852\n44768214\n386141591\n648917628\n112406852\n755798651\n44768214\n94371083\n94371083\n755798651\n815703711\n648917628\n94371083\n94371083\n372391256\n604938277\n730732243\n372391256\n94371083\n730732243\n44768214\n44768214\n604938277\n648917628\n648917628\n386141591\n386141591\n815703711\n730732243\n730732243\n386141591\n94371083\n386141591\n730732243\n296666819\n958723905\n648917628\n383707329\n815703711\n386141591\n958723905\n44768214\n958723905\n94371083\n372391256\n44768214\n545129554\n815703711\n730732243\n383707329\n648917628\n94371083\n", "0\n0\n", "772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n752934171\n752934171\n981246811\n306118655\n981246811\n981246811\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n306118655\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n772303774\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n772303774\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n544782098\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n544782098\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n393135678\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n544782098\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n544782098\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n772303774\n752934171\n981246811\n306118655\n981246811\n981246811\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n306118655\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n772303774\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n772303774\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n982143631\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n393135678\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n887102601\n244713018\n887102601\n544782098\n544782098\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n544782098\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n772303774\n752934171\n981246811\n306118655\n981246811\n981246811\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n306118655\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n981246811\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n772303774\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n887102601\n244713018\n887102601\n544782098\n544782098\n544782098\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n544782098\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n982143631\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n5748177\n691868719\n634327375\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n393135678\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n887102601\n244713018\n887102601\n544782098\n544782098\n544782098\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n544782098\n982143631\n514546187\n887102601\n514546187\n634327375\n634327375\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n887102601\n244713018\n887102601\n544782098\n544782098\n544782098\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n244713018\n887102601\n393135678\n544782098\n691868719\n544782098\n982143631\n514546187\n887102601\n514546187\n634327375\n634327375\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n244713018\n982143631\n393135678\n514546187\n544782098\n887102601\n244713018\n887102601\n544782098\n544782098\n544782098\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n244713018\n887102601\n393135678\n544782098\n691868719\n544782098\n982143631\n514546187\n887102601\n514546187\n634327375\n634327375\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n244713018\n982143631\n544782098\n514546187\n544782098\n887102601\n244713018\n887102601\n544782098\n544782098\n544782098\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n244713018\n887102601\n393135678\n544782098\n691868719\n544782098\n982143631\n514546187\n887102601\n514546187\n634327375\n634327375\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n393135678\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n887102601\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n544782098\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "958723905\n44768214\n112406852\n44768214\n386141591\n648917628\n112406852\n755798651\n44768214\n94371083\n94371083\n755798651\n815703711\n648917628\n94371083\n94371083\n372391256\n604938277\n730732243\n372391256\n94371083\n958723905\n44768214\n44768214\n604938277\n648917628\n648917628\n386141591\n386141591\n815703711\n730732243\n730732243\n386141591\n94371083\n730732243\n730732243\n296666819\n958723905\n648917628\n383707329\n815703711\n386141591\n958723905\n44768214\n958723905\n94371083\n372391256\n44768214\n545129554\n815703711\n730732243\n383707329\n648917628\n94371083\n", "2\n0\n", "958723905\n44768214\n112406852\n44768214\n386141591\n648917628\n112406852\n755798651\n44768214\n94371083\n94371083\n755798651\n815703711\n648917628\n94371083\n94371083\n372391256\n604938277\n730732243\n372391256\n94371083\n730732243\n44768214\n44768214\n604938277\n648917628\n648917628\n386141591\n386141591\n815703711\n730732243\n730732243\n386141591\n94371083\n730732243\n730732243\n296666819\n958723905\n648917628\n383707329\n815703711\n386141591\n958723905\n44768214\n958723905\n94371083\n372391256\n44768214\n545129554\n383707329\n730732243\n383707329\n648917628\n94371083\n", "958723905\n44768214\n112406852\n44768214\n386141591\n648917628\n112406852\n755798651\n44768214\n94371083\n94371083\n386141591\n815703711\n648917628\n94371083\n94371083\n372391256\n604938277\n730732243\n372391256\n94371083\n730732243\n44768214\n44768214\n604938277\n648917628\n648917628\n386141591\n386141591\n815703711\n730732243\n730732243\n386141591\n94371083\n730732243\n730732243\n296666819\n958723905\n648917628\n383707329\n815703711\n386141591\n958723905\n44768214\n94371083\n94371083\n372391256\n44768214\n545129554\n815703711\n730732243\n383707329\n648917628\n94371083\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n544782098\n244713018\n239586159\n887102601\n", "0\n2\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n544782098\n514546187\n544782098\n393135678\n393135678\n544782098\n691868719\n634327375\n982143631\n544782098\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n544782098\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n393135678\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n244713018\n244713018\n544782098\n544782098\n544782098\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n544782098\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n772303774\n752934171\n981246811\n306118655\n981246811\n981246811\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n338059102\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n981246811\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n772303774\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n752934171\n752934171\n981246811\n306118655\n981246811\n148292855\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n306118655\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n772303774\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n772303774\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "0\n", "4\n", "0\n0\n", "0\n", "0\n0\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n544782098\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n544782098\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n982143631\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n393135678\n544782098\n982143631\n244713018\n239586159\n887102601\n", "772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n772303774\n752934171\n981246811\n306118655\n981246811\n981246811\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n306118655\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n981246811\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n772303774\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n887102601\n244713018\n887102601\n544782098\n544782098\n544782098\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n544782098\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n887102601\n244713018\n887102601\n544782098\n544782098\n544782098\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n244713018\n887102601\n393135678\n544782098\n691868719\n544782098\n982143631\n514546187\n887102601\n514546187\n634327375\n634327375\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n393135678\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n544782098\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n752934171\n752934171\n981246811\n306118655\n981246811\n148292855\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n306118655\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n772303774\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n772303774\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "4\n", "4\n", "393135678\n634327375\n982143631\n393135678\n514546187\n544782098\n691868719\n244713018\n887102601\n544782098\n544782098\n393135678\n393135678\n244713018\n544782098\n544782098\n634327375\n514546187\n544782098\n887102601\n393135678\n544782098\n691868719\n634327375\n982143631\n514546187\n887102601\n514546187\n634327375\n514546187\n244713018\n393135678\n544782098\n544782098\n982143631\n244713018\n239586159\n887102601\n", "772303774\n306118655\n772303774\n981246811\n306118655\n981246811\n981246811\n479372370\n93007815\n148292855\n772303774\n338059102\n306118655\n772303774\n148292855\n752934171\n752934171\n752934171\n981246811\n306118655\n981246811\n148292855\n306118655\n981246811\n981246811\n479372370\n752934171\n967281149\n967281149\n306118655\n358786146\n121067681\n981246811\n306118655\n148292855\n772303774\n772303774\n772303774\n772303774\n306118655\n93007815\n772303774\n981246811\n752934171\n306118655\n772303774\n752934171\n338059102\n772303774\n358786146\n148292855\n752934171\n981246811\n306118655\n479372370\n358786146\n306118655\n981246811\n148292855\n967281149\n93007815\n752934171\n306118655\n772303774\n772303774\n772303774\n772303774\n306118655\n", "0\n0\n"]}, "short_description": "1. One-sentence summary:  \nCompute, for a multiset of items, the number of half\u2010sequences (subset sums) that use exactly half the total elements\u2014and then quickly answer pair\u2010exclusion queries by temporarily removing one or two item types from that count.  \n\n2. Core algorithmic approach:  \n- Precompute factorials and modular inverses for combinations (O(n) preprocessing).  \n- Use a 1D subset\u2010sum (knapsack) DP over item frequencies to count ways to pick exactly n/2 items from a multiset.  \n- Handle queries by inclusion\u2010exclusion: subtract contributions of one or two item types via roll\u2010back on the DP state.  \n\n3. Reusable components:  \n- Factorial and inverse\u2010factorial tables with fast modular exponentiation for nCr computations under a prime modulus.  \n- 1D knapsack/subset\u2010sum DP over frequency array to count ways to select a given total size from a multiset.  \n- Inclusion\u2010exclusion pattern on DP: make a copy of the DP state, subtract contributions of selected item types, then restore."}
{"name": "50_D. Bombing", "description": "The commanding officers decided to drop a nuclear bomb on the enemy's forces. You are ordered to determine the power of the warhead that needs to be used.\n\nThe enemy has N strategically important objects. Their positions are known due to the intelligence service. The aim of the strike is to deactivate at least K important objects of the enemy. The bombing impact point is already determined and has coordinates of [X0; Y0].\n\nThe nuclear warhead is marked by the estimated impact radius R \u2265 0. All the buildings that are located closer than R to the bombing epicentre will be destroyed. All the buildings that are located further than R from the epicentre, can also be deactivated with some degree of probability. Let's assume that D is the distance between a building and the epicentre. This building's deactivation probability P(D, R) is calculated according to the following formula: \n\n<image> We should regard <image> as ea, where e \u2248 2.7182818284590452353602874713527\n\nIf the estimated impact radius of the warhead is equal to zero, then all the buildings located in the impact point will be completely demolished and all the rest of important objects will not be damaged.\n\nThe commanding officers want the probability of failing the task to be no more than \u03b5. Nuclear warheads are too expensive a luxury, that's why you have to minimise the estimated impact radius of the warhead. \n\nInput\n\nThe first line contains an integer N which represents the number of the enemy's objects (1 \u2264 N \u2264 100). The second line contains two integers: K is the required number of deactivated objects, and \u03b5 is the maximally permitted probability of not completing the task, given in per mils (1 \u2264 K \u2264 N, 1 \u2264 \u03b5 \u2264 999). The third line contains X0 and Y0 which are the coordinates of the strike impact point. The next N lines contain two numbers Xi and Yi each which are the coordinates of every strategically important object. All the coordinates are integer, their absolute values do not exceed 1000.\n\nLet us remind you that there are a thousand per mils in unity (number one).\n\nThere can be several objects in one point.\n\nOutput\n\nPrint the sought estimated impact radius of the warhead. The absolute or relative measure of the inaccuracy of your answer should not exceed 10 - 6.\n\nExamples\n\nInput\n\n1\n1 500\n5 5\n1 2\n\n\nOutput\n\n3.84257761518762740\n\n\nInput\n\n5\n3 100\n0 0\n3 4\n60 70\n100 100\n10 10\n5 12\n\n\nOutput\n\n13.45126176453737600", "solution": "import math \n\nn = int(input())\nk, epsilon = list(map(int, input().split(\" \")))\nx0, y0 = list(map(int, input().split(\" \")))\nepsilon /= 1000.0\n\nl = []\nfor i in range(n):\n    l.append(list(map(int, input().split(\" \"))))\n    \nd = sorted([(p[0] - x0) ** 2 + (p[1] - y0) ** 2 for p in l])\n\nrmin = 0\nrmax = math.sqrt(d[k - 1])\n\nwhile(1):\n    if(rmax - rmin < 10e-9):\n        print((rmin + rmax)/2) \n        break\n    \n    r = (rmin + rmax)/2\n    p = [math.exp(1 - i/(r**2)) if i > r**2 else 1.0 for i in d]\n    \n    dp = [[0] * (n + 1) for i in range(n + 1)]\n    \n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if(j > 0):\n                dp[i][j] = p[i - 1] * dp[i - 1][j - 1]\n            if(i != j):\n                dp[i][j] += (1 - p[i - 1]) * dp[i - 1][j]\n                \n    s = 0\n    for j in range(k, n + 1):\n        s += dp[n][j]\n    \n    if(s > 1 - epsilon):\n        rmax = r\n    else:\n        rmin = r\n\n   \n    \n    \n    \n    ", "difficulty": 10, "public_tests": {"input": ["5\n3 100\n0 0\n3 4\n60 70\n100 100\n10 10\n5 12\n", "1\n1 500\n5 5\n1 2\n"], "output": ["13.451261761474598\n", "3.842577611976594\n"]}, "private_tests": {"input": ["3\n2 17\n0 0\n1 0\n35 27\n0 5\n", "12\n10 186\n-267 -417\n-410 930\n-354 852\n-132 -613\n-342 356\n212 220\n319 475\n-674 124\n-900 -647\n986 326\n-412 -744\n909 628\n871 -153\n", "3\n2 107\n2 4\n2 -2\n7 9\n1 -1\n", "5\n3 209\n-480 -231\n749 -448\n82 -187\n689 206\n-695 -353\n821 598\n", "4\n3 544\n413 -272\n378 -109\n366 450\n-232 -909\n-519 -662\n", "2\n1 500\n0 0\n1 0\n0 1\n", "30\n27 998\n4 -6\n-6 5\n12 -1\n7 1\n2 -10\n10 -3\n1 5\n-8 -2\n1 11\n-10 -5\n10 3\n-3 2\n3 0\n-9 -7\n-7 -9\n8 -12\n-5 7\n-11 -3\n-12 -9\n12 -12\n-7 -5\n-9 0\n-2 -11\n5 -7\n-10 1\n1 9\n-11 8\n5 -5\n3 5\n-5 -7\n8 6\n", "5\n5 340\n-369 16\n-374 801\n675 -337\n-514 342\n-586 271\n-965 943\n", "7\n5 479\n-2 1\n-1 -2\n0 5\n5 1\n4 -4\n-1 2\n-5 -3\n-3 0\n", "10\n7 998\n-3 -2\n-2 -7\n-2 -7\n0 -3\n-2 -7\n-4 -5\n2 -1\n2 -1\n-2 1\n2 -1\n0 2\n", "11\n7 723\n4 10\n0 0\n1 0\n4 9\n10 3\n5 2\n7 3\n5 6\n4 5\n4 5\n3 2\n4 3\n", "4\n1 41\n49 -20\n14 -158\n48 -116\n49 -20\n216 179\n", "11\n7 13\n4 10\n0 0\n1 0\n4 9\n10 3\n5 2\n7 3\n5 6\n4 5\n4 5\n3 2\n4 3\n", "4\n3 13\n-1000 -1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n", "57\n3 998\n-1 2\n0 -2\n2 4\n1 -1\n-2 -4\n0 -2\n-2 -1\n-1 1\n-4 -2\n3 1\n2 3\n-1 -3\n4 0\n-2 0\n-1 -3\n-5 5\n-5 -4\n-3 1\n-1 5\n5 4\n0 5\n4 -1\n0 -1\n2 -5\n3 -5\n3 2\n-4 4\n-5 -1\n-2 3\n0 4\n0 1\n4 -1\n-2 2\n-2 -4\n5 5\n5 3\n2 4\n-1 3\n4 -4\n-3 -3\n-4 -5\n-3 3\n-5 1\n-4 3\n3 3\n0 0\n4 1\n-3 2\n-1 3\n3 3\n-5 3\n-5 1\n5 1\n-4 1\n0 3\n5 0\n-2 2\n0 4\n", "30\n5 541\n4 2\n9 -76\n-21 14\n-85 47\n-29 76\n107 1\n-60 123\n-41 -105\n-35 -43\n79 -67\n-81 -49\n-26 39\n57 16\n-63 38\n50 5\n45 -118\n-83 -87\n-115 57\n-10 10\n95 -110\n-13 -103\n-37 -56\n-6 82\n-4 -105\n106 -98\n93 -84\n-40 66\n9 -28\n30 -8\n39 1\n75 -59\n", "15\n10 227\n5 4\n-10 -7\n-10 -7\n-10 -7\n-10 -7\n-10 -7\n-10 -7\n5 4\n5 4\n-10 -7\n-10 -7\n-10 -7\n5 4\n-10 -7\n-10 -7\n5 4\n", "13\n7 300\n4 10\n0 0\n1 0\n4 9\n10 3\n5 2\n4 10\n4 10\n7 3\n5 6\n4 5\n4 5\n3 2\n4 3\n", "10\n9 1\n0 0\n0 1\n2 0\n0 3\n4 0\n0 5\n6 0\n0 7\n8 0\n0 9\n100 0\n", "5\n3 700\n1 1\n1 1\n0 0\n1 0\n0 1\n2 1\n", "6\n3 2\n5 -5\n2 -8\n2 -8\n2 -8\n8 -2\n8 -8\n8 -8\n", "2\n1 3\n-4 4\n-4 -4\n-9 9\n", "76\n35 639\n-2 0\n-1 -2\n-2 -7\n4 0\n-6 -7\n8 3\n2 4\n8 6\n6 6\n7 8\n-2 6\n9 8\n9 2\n4 8\n-5 2\n2 -3\n-5 1\n0 9\n-7 -5\n4 -3\n0 -9\n-1 5\n-9 4\n9 0\n-2 0\n5 -4\n5 4\n-7 4\n4 7\n0 5\n8 -3\n-1 -9\n4 -3\n-5 -4\n3 -1\n-6 -5\n3 4\n0 5\n1 -4\n-1 7\n-3 5\n9 -7\n7 -2\n-9 -8\n4 1\n4 9\n-6 -7\n8 2\n-8 -4\n3 6\n-1 4\n-2 -1\n9 -6\n-4 -8\n0 -8\n-6 -7\n-2 1\n4 8\n-1 -8\n-3 7\n7 -2\n-2 6\n9 -3\n-9 -1\n-2 -6\n2 -8\n9 7\n9 5\n-4 3\n-3 7\n6 8\n1 -6\n-4 -3\n-2 -2\n1 -6\n-3 -9\n-9 5\n", "10\n10 850\n-3 4\n-8 4\n0 7\n-6 -4\n0 -2\n0 4\n-4 -6\n-5 -5\n-8 -5\n7 -9\n2 8\n", "12\n5 998\n-345 483\n645 671\n645 671\n-363 -396\n645 671\n369 -30\n645 671\n369 996\n369 996\n429 66\n369 996\n534 465\n-733 -447\n", "10\n10 1\n0 0\n0 1\n2 0\n0 3\n4 0\n0 5\n6 0\n0 7\n8 0\n0 9\n100 0\n", "7\n4 555\n6 -2\n0 6\n6 -12\n3 -10\n-8 6\n7 -9\n0 -1\n-3 -8\n", "3\n3 2\n18 9\n-10 -24\n-34 -29\n18 9\n", "2\n1 753\n-1 1\n-1 1\n5 1\n", "15\n14 5\n0 -1\n-1 0\n1 1\n-3 1\n-3 -2\n-3 -2\n-2 1\n3 1\n-2 -3\n0 -2\n-2 0\n-1 -3\n0 -3\n2 1\n-3 -2\n-3 0\n", "9\n4 3\n4 6\n-7 -9\n11 -9\n-4 6\n-7 1\n-8 -10\n3 2\n1 7\n-5 -1\n-7 -10\n", "5\n3 833\n0 0\n1 0\n2 0\n4 0\n10 0\n16 0\n", "2\n1 500\n0 0\n0 0\n0 0\n", "6\n2 5\n23 141\n3 -69\n-87 321\n133 321\n203 251\n905 -344\n233 121\n", "5\n2 768\n2 0\n-7 1\n-7 -1\n-7 -1\n-7 1\n-7 1\n"], "output": ["4.957678079335892\n", "1141.348355008631188\n", "5.399081323957944\n", "953.165504147364118\n", "653.386317094373226\n", "0.669957967147639\n", "10.608229699755611\n", "1002.805930743306817\n", "3.991012649748882\n", "2.839013545781199\n", "5.517129825420852\n", "0.000000004547474\n", "7.325851925088500\n", "2761.208648475985683\n", "0.511088614985056\n", "26.771725420076109\n", "15.208389900180919\n", "4.927037812194612\n", "8.995501125355077\n", "0.697884947840066\n", "4.009803647022636\n", "7.029684097688005\n", "5.217988441472698\n", "9.859005390353559\n", "495.729998788192461\n", "99.950012486260675\n", "6.862755094516615\n", "64.340595931753342\n", "0.000000004547474\n", "3.480198370198195\n", "11.162565519953205\n", "2.394839580119879\n", "0.000000004547474\n", "192.195395625276433\n", "5.522946223639\n"]}, "generated_tests": {"input": ["3\n2 17\n0 0\n1 0\n16 27\n0 5\n", "12\n10 186\n-267 -417\n-410 930\n-354 852\n-132 -613\n-342 356\n165 220\n319 475\n-674 124\n-900 -647\n986 326\n-412 -744\n909 628\n871 -153\n", "3\n2 48\n2 4\n2 -2\n7 9\n1 -1\n", "5\n3 209\n-325 -231\n749 -448\n82 -187\n689 206\n-695 -353\n821 598\n", "4\n3 544\n413 -272\n378 -109\n366 681\n-232 -909\n-519 -662\n", "2\n1 500\n0 0\n0 0\n0 1\n", "30\n27 998\n4 -6\n-6 5\n12 -1\n7 1\n2 -10\n10 -3\n1 5\n-8 -2\n1 11\n-10 -5\n8 3\n-3 2\n3 0\n-9 -7\n-7 -9\n8 -12\n-5 7\n-11 -3\n-12 -9\n12 -12\n-7 -5\n-9 0\n-2 -11\n5 -7\n-10 1\n1 9\n-11 8\n5 -5\n3 5\n-5 -7\n8 6\n", "5\n5 340\n-369 16\n-374 801\n675 -11\n-514 342\n-586 271\n-965 943\n", "7\n5 479\n-2 1\n-1 -2\n0 5\n5 1\n4 -4\n-1 2\n-5 -3\n0 0\n", "10\n7 998\n-3 -2\n-2 -7\n-3 -7\n0 -3\n-2 -7\n-4 -5\n2 -1\n2 -1\n-2 1\n2 -1\n0 2\n", "11\n7 723\n4 10\n1 0\n1 0\n4 9\n10 3\n5 2\n7 3\n5 6\n4 5\n4 5\n3 2\n4 3\n", "11\n7 13\n4 10\n0 0\n1 -1\n4 9\n10 3\n5 2\n7 3\n5 6\n4 5\n4 5\n3 2\n4 3\n", "4\n3 13\n-1000 -1000\n1000 1000\n1000 1000\n1000 1001\n1000 1000\n", "57\n3 998\n-1 2\n0 -2\n2 4\n1 -1\n-2 -4\n0 -2\n-2 -1\n-1 1\n-4 -2\n3 1\n2 3\n-1 -3\n4 0\n-2 0\n-1 -3\n-5 5\n-5 -4\n-3 1\n-1 5\n5 4\n0 5\n4 -1\n0 -1\n2 -5\n3 -5\n3 2\n-4 4\n-5 -1\n-2 3\n0 4\n0 1\n4 -1\n-2 2\n-2 -4\n5 5\n5 3\n2 4\n-1 3\n4 -4\n-3 -3\n-4 -4\n-3 3\n-5 1\n-4 3\n3 3\n0 0\n4 1\n-3 2\n-1 3\n3 3\n-5 3\n-5 1\n5 1\n-4 1\n0 3\n5 0\n-2 2\n0 4\n", "30\n5 541\n4 2\n9 -76\n-21 14\n-85 47\n-29 76\n107 1\n-60 123\n-41 -105\n-35 -43\n79 -67\n-81 -49\n-26 39\n57 16\n-63 38\n50 5\n45 -118\n-83 -87\n-115 57\n-10 10\n95 -110\n-13 -103\n-37 -56\n-6 82\n-4 -105\n106 -98\n93 -84\n-40 66\n9 -28\n30 -8\n28 1\n75 -59\n", "15\n10 227\n5 4\n-10 -7\n-10 -7\n-10 -7\n-10 -7\n-10 -7\n-10 -7\n4 4\n5 4\n-10 -7\n-10 -7\n-10 -7\n5 4\n-10 -7\n-10 -7\n5 4\n", "13\n7 300\n4 10\n1 0\n1 0\n4 9\n10 3\n5 2\n4 10\n4 10\n7 3\n5 6\n4 5\n4 5\n3 2\n4 3\n", "10\n9 1\n0 0\n1 1\n2 0\n0 3\n4 0\n0 5\n6 0\n0 7\n8 0\n0 9\n100 0\n", "5\n3 700\n1 1\n1 1\n0 0\n1 0\n0 1\n0 1\n", "6\n3 2\n5 -5\n4 -8\n2 -8\n2 -8\n8 -2\n8 -8\n8 -8\n", "76\n35 639\n-2 0\n-1 -2\n-2 -7\n4 0\n-6 -7\n8 3\n2 4\n8 6\n6 6\n7 8\n-2 6\n9 8\n9 2\n4 8\n-5 2\n2 -3\n-5 1\n0 9\n-7 -5\n4 -3\n0 -9\n-1 5\n-9 4\n9 0\n-2 0\n5 -4\n5 4\n-7 4\n4 7\n0 5\n8 -3\n-1 -9\n4 -3\n-5 -4\n3 -1\n-6 -5\n3 4\n1 5\n1 -4\n-1 7\n-3 5\n9 -7\n7 -2\n-9 -8\n4 1\n4 9\n-6 -7\n8 2\n-8 -4\n3 6\n-1 4\n-2 -1\n9 -6\n-4 -8\n0 -8\n-6 -7\n-2 1\n4 8\n-1 -8\n-3 7\n7 -2\n-2 6\n9 -3\n-9 -1\n-2 -6\n2 -8\n9 7\n9 5\n-4 3\n-3 7\n6 8\n1 -6\n-4 -3\n-2 -2\n1 -6\n-3 -9\n-9 5\n", "10\n10 850\n-3 4\n-8 4\n0 7\n-6 -4\n0 -2\n0 4\n-4 -6\n-5 -3\n-8 -5\n7 -9\n2 8\n", "12\n5 998\n-345 483\n645 671\n645 671\n-363 -396\n645 671\n369 -30\n508 671\n369 996\n369 996\n429 66\n369 996\n534 465\n-733 -447\n", "10\n10 1\n0 0\n0 1\n2 0\n0 3\n4 0\n0 7\n6 0\n0 7\n8 0\n0 9\n100 0\n", "7\n4 401\n6 -2\n0 6\n6 -12\n3 -10\n-8 6\n7 -9\n0 -1\n-3 -8\n", "2\n1 753\n-1 2\n-1 1\n5 1\n", "15\n14 5\n0 -1\n-1 0\n1 1\n-3 1\n-3 -2\n-2 -2\n-2 1\n3 1\n-2 -3\n0 -2\n-2 0\n-1 -3\n0 -3\n2 1\n-3 -2\n-3 0\n", "9\n4 3\n4 6\n-7 -9\n11 -1\n-4 6\n-7 1\n-8 -10\n3 2\n1 7\n-5 -1\n-7 -10\n", "5\n3 833\n0 0\n1 0\n2 -1\n4 0\n10 0\n16 0\n", "6\n2 5\n23 141\n3 -110\n-87 321\n133 321\n203 251\n905 -344\n233 121\n", "5\n2 768\n2 0\n-7 1\n-8 -1\n-7 -1\n-7 1\n-7 1\n", "5\n3 100\n0 0\n1 4\n60 70\n100 100\n10 10\n5 12\n", "3\n2 17\n1 0\n1 0\n16 27\n0 5\n", "12\n10 186\n-267 -417\n-410 930\n-354 852\n-132 -613\n-342 356\n165 220\n319 475\n-674 124\n-900 -647\n986 326\n-412 -744\n909 628\n1257 -153\n", "3\n2 48\n2 7\n2 -2\n7 9\n1 -1\n", "2\n1 500\n0 0\n1 -1\n0 1\n", "30\n27 998\n4 -6\n-6 5\n12 -1\n7 1\n2 -10\n10 -3\n1 5\n-8 -2\n1 11\n-10 -5\n15 3\n-3 2\n3 0\n-9 -7\n-7 -9\n8 -12\n-5 7\n-11 -3\n-12 -9\n12 -12\n-7 -5\n-9 0\n-2 -11\n5 -7\n-10 1\n1 9\n-11 8\n5 -5\n3 5\n-5 -7\n8 6\n", "10\n7 998\n-3 -2\n-2 -7\n-3 -7\n0 -3\n-2 -7\n-4 -5\n2 0\n2 -1\n-2 1\n2 -1\n0 2\n", "11\n7 13\n4 10\n1 0\n1 -1\n4 9\n10 3\n5 2\n7 3\n5 6\n4 5\n4 5\n3 2\n4 3\n", "4\n3 13\n-1000 -1000\n1000 1000\n1000 1000\n1000 1001\n1000 1010\n", "30\n5 541\n4 2\n9 -76\n-21 14\n-85 47\n-29 76\n107 1\n-60 123\n-41 -105\n-35 -43\n137 -67\n-81 -49\n-26 39\n57 16\n-63 38\n50 5\n45 -118\n-83 -87\n-115 57\n-10 10\n95 -110\n-13 -103\n-37 -56\n-6 82\n-4 -105\n106 -98\n93 -84\n-40 66\n9 -28\n30 -8\n28 1\n75 -59\n", "15\n10 227\n5 4\n-10 -7\n-10 -7\n-10 -7\n-10 -7\n-10 -7\n-10 -7\n4 4\n5 4\n-10 -7\n-10 -14\n-10 -7\n5 4\n-10 -7\n-10 -7\n5 4\n", "13\n7 300\n4 10\n1 0\n1 0\n4 9\n10 3\n5 0\n4 10\n4 10\n7 3\n5 6\n4 5\n4 5\n3 2\n4 3\n", "5\n3 700\n1 1\n1 1\n0 0\n1 0\n0 1\n1 1\n", "6\n3 2\n5 -5\n4 -8\n2 -8\n3 -8\n8 -2\n8 -8\n8 -8\n", "10\n10 850\n-3 4\n-14 4\n0 7\n-6 -4\n0 -2\n0 4\n-4 -6\n-5 -3\n-8 -5\n7 -9\n2 8\n", "12\n5 998\n-345 483\n645 671\n645 671\n-363 -396\n645 671\n369 -30\n508 671\n369 996\n369 996\n429 66\n369 996\n305 465\n-733 -447\n", "2\n1 500\n0 0\n0 0\n0 -1\n", "5\n3 209\n-325 -231\n749 -448\n153 -187\n689 206\n-695 -353\n821 598\n", "4\n3 544\n413 -272\n598 -109\n366 681\n-232 -909\n-519 -662\n", "5\n5 340\n-369 16\n-374 801\n675 -11\n-514 386\n-586 271\n-965 943\n", "7\n5 479\n-2 1\n-1 -2\n0 5\n5 1\n4 -4\n-1 2\n-5 -3\n1 0\n", "11\n7 723\n4 10\n1 0\n1 0\n4 6\n10 3\n5 2\n7 3\n5 6\n4 5\n4 5\n3 2\n4 3\n", "57\n3 998\n-1 2\n0 -2\n2 4\n2 -1\n-2 -4\n0 -2\n-2 -1\n-1 1\n-4 -2\n3 1\n2 3\n-1 -3\n4 0\n-2 0\n-1 -3\n-5 5\n-5 -4\n-3 1\n-1 5\n5 4\n0 5\n4 -1\n0 -1\n2 -5\n3 -5\n3 2\n-4 4\n-5 -1\n-2 3\n0 4\n0 1\n4 -1\n-2 2\n-2 -4\n5 5\n5 3\n2 4\n-1 3\n4 -4\n-3 -3\n-4 -4\n-3 3\n-5 1\n-4 3\n3 3\n0 0\n4 1\n-3 2\n-1 3\n3 3\n-5 3\n-5 1\n5 1\n-4 1\n0 3\n5 0\n-2 2\n0 4\n", "10\n9 1\n0 0\n1 1\n2 0\n0 3\n4 0\n0 5\n5 0\n0 7\n8 0\n0 9\n100 0\n", "76\n35 639\n-2 0\n-1 -2\n-2 -7\n4 0\n-6 -7\n8 3\n2 4\n8 6\n6 6\n7 8\n-2 6\n9 8\n9 2\n4 8\n-5 2\n2 -3\n-5 1\n0 9\n-7 -5\n4 -3\n0 -9\n-1 5\n-9 4\n9 0\n-2 0\n5 -4\n5 4\n-7 4\n4 7\n0 5\n8 -3\n-1 -9\n4 -3\n-5 -4\n3 -1\n-6 -5\n3 4\n1 5\n1 -4\n-1 7\n-3 5\n9 -7\n7 -2\n-9 -8\n4 1\n4 9\n-6 -7\n8 2\n-8 -4\n3 6\n-1 4\n-2 -2\n9 -6\n-4 -8\n0 -8\n-6 -7\n-2 1\n4 8\n-1 -8\n-3 7\n7 -2\n-2 6\n9 -3\n-9 -1\n-2 -6\n2 -8\n9 7\n9 5\n-4 3\n-3 7\n6 8\n1 -6\n-4 -3\n-2 -2\n1 -6\n-3 -9\n-9 5\n", "10\n10 1\n0 0\n0 1\n2 0\n0 3\n4 0\n0 7\n6 0\n0 2\n8 0\n0 9\n100 0\n"], "output": ["4.957678076\n", "1141.348355009\n", "5.670547912\n", "845.110019625\n", "721.014446790\n", "0.000000651\n", "10.599902110\n", "976.900514119\n", "3.991012653\n", "2.832759459\n", "5.505783628\n", "7.357899502\n", "2761.381026312\n", "0.511088617\n", "24.925853863\n", "15.208389898\n", "4.924097595\n", "8.995501124\n", "0.697884947\n", "3.943137073\n", "5.230168113\n", "9.859005388\n", "490.014897606\n", "99.950012490\n", "7.212176055\n", "0.645716948\n", "3.480198369\n", "9.760897068\n", "2.394839581\n", "196.502266564\n", "5.624164794\n", "13.451261765\n", "5.055859450\n", "1213.211205862\n", "7.525682752\n", "0.749417923\n", "10.755047433\n", "2.849171408\n", "7.345243781\n", "2763.088397319\n", "24.925854286\n", "15.463298120\n", "4.988358632\n", "0.593775046\n", "3.813711341\n", "10.063996239\n", "474.810967629\n", "0.000000651\n", "845.110019625\n", "721.014446790\n", "976.900514119\n", "3.991012653\n", "5.505783628\n", "0.511088617\n", "8.995501124\n", "5.230168113\n", "99.950012490\n"]}, "short_description": "1. One-sentence summary:  \nDetermine the smallest real threshold R such that, under independent inclusion probabilities that decay with squared distance, the probability of selecting at least K items is at least 1\u2013\u03b5.\n\n2. Core algorithmic approach:  \n- Continuous binary search on the radius R (root-finding on a monotonic success probability function)  \n- Dynamic programming to compute the tail of the Poisson-binomial distribution (probability of \u2265K successes given nonidentical success probabilities)\n\n3. Reusable components:  \n- Continuous-value binary search template that stops when the interval width falls below a desired precision  \n- DP for Poisson-binomial (dp[i][j] = probability of j successes among first i trials with distinct p_i) and summation of tail probabilities  \n- Preprocessing distances and converting them to inclusion probabilities via a kernel function (e.g., p\u1d62 = exp(1 \u2013 d\u1d62/R\u00b2) clipped at 1)"}
{"name": "908_D. New Year and Arbitrary Arrangement", "description": "You are given three integers k, pa and pb.\n\nYou will construct a sequence with the following algorithm: Initially, start with the empty sequence. Each second, you do the following. With probability pa / (pa + pb), add 'a' to the end of the sequence. Otherwise (with probability pb / (pa + pb)), add 'b' to the end of the sequence.\n\nYou stop once there are at least k subsequences that form 'ab'. Determine the expected number of times 'ab' is a subsequence in the resulting sequence. It can be shown that this can be represented by P / Q, where P and Q are coprime integers, and <image>. Print the value of <image>.\n\nInput\n\nThe first line will contain three integers integer k, pa, pb (1 \u2264 k \u2264 1 000, 1 \u2264 pa, pb \u2264 1 000 000).\n\nOutput\n\nPrint a single integer, the answer to the problem.\n\nExamples\n\nInput\n\n1 1 1\n\n\nOutput\n\n2\n\n\nInput\n\n3 1 4\n\n\nOutput\n\n370000006\n\nNote\n\nThe first sample, we will keep appending to our sequence until we get the subsequence 'ab' at least once. For instance, we get the sequence 'ab' with probability 1/4, 'bbab' with probability 1/16, and 'aab' with probability 1/8. Note, it's impossible for us to end with a sequence like 'aabab', since we would have stopped our algorithm once we had the prefix 'aab'. \n\nThe expected amount of times that 'ab' will occur across all valid sequences is 2. \n\nFor the second sample, the answer is equal to <image>.", "solution": "k, pa, pb = map(int, input().split())\n\nMOD = 10**9 + 7\nINF = ((pa + pb) * pow(pb, MOD-2, MOD)) % MOD\nrAB = pow(pa+pb, MOD-2, MOD)\nrB = pow(pb, MOD-2, MOD)\n\nmemo = {}\n\ndef dfs(a, ab):\n    if ab >= k:\n        return ab\n    if a + ab >= k:\n        #return INF\n        #return (pa + pb) / pb\n        return ((a + MOD-1) + (pa + pb) * rB + ab) % MOD\n        return a - 1 + (pa + pb) / pb + ab\n    if (a, ab) in memo:\n        return memo[a, ab]\n    #res = (((dfs(a+1, ab)+1) * pa * rAB) + ((dfs(a, ab+a)+1) * pb * rAB)) % MOD\n    #res = (dfs(a+1, ab)) * pa / (pa + pb) + (dfs(a, ab+a)) * pb / (pa + pb)\n    res = (dfs(a+1, ab) * pa * rAB) + (dfs(a, ab+a) * pb * rAB)\n    #print(a, ab, res)\n    memo[a, ab] = res = res % MOD\n    return res\n#print((dfs(1, 0) * pa * rAB + 1) % MOD)\n#print((pb + dfs(1, 0)*pa) / pa)\nprint(dfs(1, 0))\n", "difficulty": 10, "public_tests": {"input": ["1 1 1\n", "3 1 4\n"], "output": ["2\n", "370000006\n"]}, "private_tests": {"input": ["734 32585 49636\n", "270 967166 795005\n", "99 534023 117289\n", "892 777143 664073\n", "192 42070 61266\n", "38 592277 400426\n", "97 119368 2062\n", "757 869978 224540\n", "78 535199 331023\n", "842 171735 282219\n", "57 339480 774350\n", "66 199449 266025\n", "628 446579 365440\n", "156 78149 46740\n", "305 337309 378395\n", "1000 123456 654321\n", "108 531040 908573\n", "1000 1000000 1\n", "781 817338 452871\n", "177 2501 570142\n", "908 879494 944888\n", "575 39377 68346\n"], "output": ["684730644\n", "530539317\n", "29694885\n", "527873013\n", "904814024\n", "499077928\n", "2436614\n", "921904658\n", "684367478\n", "948183028\n", "622654301\n", "27912582\n", "214808787\n", "114906561\n", "174667130\n", "977760856\n", "145579983\n", "478180868\n", "711597307\n", "779148936\n", "114377456\n", "899189133\n"]}, "generated_tests": {"input": ["734 32585 16425\n", "270 967166 652936\n", "99 534023 17265\n", "565 777143 664073\n", "115 42070 61266\n", "38 592277 38230\n", "97 190473 2062\n", "757 848627 224540\n", "78 535199 192416\n", "808 171735 282219\n", "48 339480 774350\n", "2 199449 266025\n", "825 446579 365440\n", "4 78149 46740\n", "305 337309 460205\n", "108 44604 908573\n", "238 817338 452871\n", "252 2501 570142\n", "908 879494 453030\n", "575 75790 68346\n", "1 1 2\n", "3 1 2\n", "734 32585 1522\n", "41 967166 652936\n", "171 534023 17265\n", "855 777143 664073\n", "115 42070 96429\n", "38 1061692 38230\n", "97 105162 2062\n", "757 848627 229764\n", "78 475789 192416\n", "808 170805 282219\n", "9 339480 774350\n", "3 199449 266025\n", "825 131202 365440\n", "7 78149 46740\n", "305 337309 548997\n", "108 44604 705326\n", "341 817338 452871\n", "252 2501 734474\n", "133 879494 453030\n", "422 75790 68346\n", "3 1 1\n", "734 32585 411\n"], "output": ["792067890", "842909942", "605153756", "454582741", "272189032", "471289873", "42102296", "745709873", "893905950", "873936138", "42513590", "243371868", "425023285", "604608981", "735340251", "702489388", "895934805", "547586588", "644299130", "696523617", "500000005", "722222231", "78627061", "298411581", "77583596", "572411130", "514584535", "145343573", "880090513", "284492455", "219324062", "827469392", "904180032", "619776867", "565939447", "556254979", "640996099", "565342873", "720603868", "956999535", "711277983", "827910507", "250000006", "591169223"]}, "short_description": "1. One-sentence summary  \nCompute the expected \u201cscore\u201d of a two\u2010action random process that accumulates value until a threshold, using modular arithmetic.\n\n2. Core algorithmic approach  \nTop\u2010down recursion with memoized dynamic programming (DFS + state cache) to compute expectations under two probabilistic transitions, all performed under a prime modulus via modular inverses.\n\n3. Reusable components  \n- State\u2010memoization pattern for 2D DP: using a dict keyed by (a, ab) to avoid recomputation.  \n- Modular arithmetic utilities: precomputing inverses with pow(x, MOD\u22122, MOD) for division under a modulus.  \n- Recursive expectation\u2010transition template: combining substate results weighted by transition probabilities (pa/(pa+pb) and pb/(pa+pb))."}
{"name": "145_C. Lucky Subsequence", "description": "Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya has sequence a consisting of n integers.\n\nThe subsequence of the sequence a is such subsequence that can be obtained from a by removing zero or more of its elements.\n\nTwo sequences are considered different if index sets of numbers included in them are different. That is, the values \u200bof the elements \u200bdo not matter in the comparison of subsequences. In particular, any sequence of length n has exactly 2n different subsequences (including an empty subsequence).\n\nA subsequence is considered lucky if it has a length exactly k and does not contain two identical lucky numbers (unlucky numbers can be repeated any number of times).\n\nHelp Petya find the number of different lucky subsequences of the sequence a. As Petya's parents don't let him play with large numbers, you should print the result modulo prime number 1000000007 (109 + 7).\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 105). The next line contains n integers ai (1 \u2264 ai \u2264 109) \u2014 the sequence a. \n\nOutput\n\nOn the single line print the single number \u2014 the answer to the problem modulo prime number 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n3 2\n10 10 10\n\n\nOutput\n\n3\n\n\nInput\n\n4 2\n4 4 7 7\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample all 3 subsequences of the needed length are considered lucky.\n\nIn the second sample there are 4 lucky subsequences. For them the sets of indexes equal (the indexation starts from 1): {1, 3}, {1, 4}, {2, 3} and {2, 4}.", "solution": "import sys\n\ninput = sys.stdin.readline\n\ndef solve():\n\tn, k = map(int, input().split())\n\ta = [4,7]\n\td = dict()\n\tidx = 0\n\tfor p in range(1,10):\n\t\tfor m in range(1<<p):\n\t\t\tv = 0\n\t\t\tfor i in range(p):\n\t\t\t\tv = v*10+a[(m >> i)&1]\n\t\t\td[v] = idx\n\t\t\tidx += 1\n\t#print(d)\n\tc = [0]*idx\n\tb = 0\n\tfor v in map(int, input().split()):\n\t\tif v in d:\n\t\t\tc[d[v]] += 1\n\t\telse:\n\t\t\tb += 1\n\t#print(c,b)\n\tdp = [[0]*(idx+1) for i in range(idx+1)]\n\tdp[0][0] = 1\n\tMOD = int(1e9+7)\n\tfor m in range(1,idx+1):\n\t\tdp[m][0] = dp[m-1][0]\n\t\tcc = c[m-1]\n\t\tfor p in range(1,idx+1):\n\t\t\tdp[m][p] = (dp[m-1][p]+dp[m-1][p-1]*cc) % MOD\n\tres = 0\n\td = dp[idx]\n\tF = [0]*(max(idx,n)+2)\n\tFI = [0]*(max(idx,n)+2)\n\tF[0] = 1\n\tfor p in range(1,len(F)):\n\t\tF[p] = (F[p-1] * p) % MOD\n\tFI[-1] = pow(F[-1], MOD-2, MOD)\n\tfor p in range(len(FI)-2,-1,-1):\n\t\tFI[p] = (FI[p+1] * (p+1)) % MOD\n\t#print(d)\n\tdef C(n, k):\n\t\tif n < k:\n\t\t\treturn 0\n\t\treturn (F[n]*FI[k]*FI[n-k])%MOD\n\tfor p in range(max(0,k-b),min(idx,k)+1):\n\t\t#if b >= k - p:\n\t\t#if p >= k - b\n\t\tres = (res + d[p]*F[b]*FI[k-p]*FI[b-k+p]) % MOD\n\tprint(res)\n\nsolve()\n", "difficulty": 9, "public_tests": {"input": ["3 2\n10 10 10\n", "4 2\n4 4 7 7\n"], "output": ["3\n", "4\n"]}, "private_tests": {"input": ["7 4\n1 2 3 4 5 6 7\n", "10 1\n1 2 3 4 5 6 7 8 9 10\n", "2 2\n44 44\n", "10 7\n1 2 3 4 5 6 7 8 9 10\n", "13 5\n44 44 44 44 44 44 44 44 77 55 66 99 55\n", "7 4\n7 7 7 7 7 7 7\n", "2 2\n47 47\n", "3 2\n1 47 47\n", "5 2\n47 47 47 47 47\n", "20 7\n1 4 5 8 47 777777777 1 5 4 8 5 9 5 4 7 4 5 7 7 44474\n"], "output": ["35\n", "10\n", "0\n", "120\n", "41\n", "0\n", "0\n", "2\n", "0\n", "29172\n"]}, "generated_tests": {"input": ["7 4\n1 2 2 4 5 6 7\n", "2 2\n88 44\n", "10 7\n1 2 3 4 10 6 7 8 9 10\n", "13 5\n44 44 44 44 44 44 44 44 77 102 66 99 55\n", "3 2\n1 47 5\n", "5 2\n74 47 47 47 47\n", "4 2\n4 4 10 7\n", "13 5\n44 44 49 44 44 44 44 44 77 102 66 99 55\n", "5 2\n128 79 47 47 47\n", "10 6\n1 2 3 4 10 6 7 16 9 10\n", "5 2\n128 79 10 47 47\n", "5 2\n128 79 10 25 47\n", "10 6\n2 2 3 4 9 4 5 16 12 20\n", "13 6\n44 44 44 44 44 44 44 44 77 55 66 99 55\n", "7 4\n7 9 7 7 7 7 7\n", "20 7\n1 2 5 8 47 777777777 1 5 4 8 5 9 5 4 7 4 5 7 7 44474\n", "2 2\n47 71\n", "3 3\n10 10 10\n", "7 4\n1 2 2 2 5 6 7\n", "2 2\n33 44\n", "10 7\n1 2 3 4 10 6 7 16 9 10\n", "2 2\n54 71\n", "3 2\n1 55 5\n", "5 2\n128 47 47 47 47\n", "4 2\n4 4 10 9\n", "7 4\n1 2 2 2 1 6 7\n", "2 2\n33 62\n", "10 3\n1 2 3 4 10 6 7 16 9 10\n", "2 2\n45 71\n", "2 2\n1 62\n", "2 2\n1 71\n", "10 6\n1 2 3 4 10 6 7 16 14 10\n", "10 6\n1 2 3 4 10 6 7 16 17 10\n", "5 2\n128 24 10 25 47\n", "10 6\n1 2 3 4 10 6 7 16 12 10\n", "5 2\n136 24 10 25 47\n", "10 6\n2 2 3 4 10 6 7 16 12 10\n", "5 2\n136 24 12 25 47\n", "10 6\n2 2 3 4 9 6 7 16 12 10\n", "5 4\n136 24 12 25 47\n", "10 6\n2 2 3 4 9 6 7 16 12 20\n", "5 4\n136 24 12 15 47\n", "10 6\n2 2 3 4 9 6 5 16 12 20\n", "5 4\n153 24 12 15 47\n", "5 4\n153 24 12 4 47\n", "10 6\n2 2 3 4 9 4 5 16 12 19\n", "7 4\n1 2 3 4 5 6 9\n", "10 1\n1 2 3 4 9 6 7 8 9 10\n", "2 2\n44 82\n", "10 7\n1 2 3 4 5 2 7 8 9 10\n", "2 2\n16 47\n", "3 2\n19 10 10\n", "4 2\n1 4 7 7\n"], "output": ["35\n", "1\n", "120\n", "41\n", "3\n", "4\n", "5\n", "111\n", "7\n", "210\n", "9\n", "10\n", "140\n", "8\n", "0\n", "39468\n", "1\n", "1\n", "35\n", "1\n", "120\n", "1\n", "3\n", "4\n", "5\n", "35\n", "1\n", "120\n", "1\n", "1\n", "1\n", "210\n", "210\n", "10\n", "210\n", "10\n", "210\n", "10\n", "210\n", "5\n", "210\n", "5\n", "210\n", "5\n", "5\n", "140\n", "35\n", "10\n", "1\n", "120\n", "1\n", "3\n", "5\n"]}, "short_description": "1. One-sentence summary:  \nCompute the number of ways to choose exactly k elements from a multiset whose items are partitioned into labeled types, given the counts of each type and an additional pool of \u201cother\u201d items.\n\n2. Core algorithmic approach:  \n- A two-dimensional prefix-sum/knapsack-style DP to count ways to pick p items from the first m types.  \n- Precomputation of factorials and modular inverses for fast binomial-coefficient (n choose k) calculations.\n\n3. Reusable components:  \n- Bit-mask enumeration of all patterns of length up to P over a small alphabet, mapping each generated value to a type index.  \n- 2D DP where dp[m][p] = number of ways to pick p items from the first m groups given their counts.  \n- Factorial and inverse-factorial arrays (F, FI) plus a C(n,k) function for O(1) modular binomial coefficients."}
{"name": "1461_C. Random Events", "description": "Ron is a happy owner of a permutation a of length n.\n\nA permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\n<image>\n\nRon's permutation is subjected to m experiments of the following type: (r_i, p_i). This means that elements in range [1, r_i] (in other words, the prefix of length r_i) have to be sorted in ascending order with the probability of p_i. All experiments are performed in the same order in which they are specified in the input data.\n\nAs an example, let's take a look at a permutation [4, 2, 1, 5, 3] and an experiment (3, 0.6). After such an experiment with the probability of 60\\% the permutation will assume the form [1, 2, 4, 5, 3] and with a 40\\% probability it will remain unchanged.\n\nYou have to determine the probability of the permutation becoming completely sorted in ascending order after m experiments.\n\nInput\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100).\n\nThe first line of each test case contains two integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the length of the permutation and the number of experiments, respectively.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 n) \u2014 contents of the permutation.\n\nThe following m lines of each test case each contain an integer r_i and a real number p_i (1 \u2264 r_i \u2264 n, 0 \u2264 p_i \u2264 1) \u2014 the length of the prefix and the probability of it being sorted. All probabilities are given with at most 6 decimal places.\n\nIt is guaranteed that the sum of n and the sum of m does not exceed 10^5 (\u2211 n, \u2211 m \u2264 10^5).\n\nOutput\n\nFor each test case, print a single number \u2014 the probability that after all experiments the permutation becomes sorted in ascending order. Your answer will be considered correct if its absolute or relative error does not exceed 10^{-6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is accepted if and only if \\frac{|a - b|}{max{(1, |b|)}} \u2264 10^{-6}.\n\nExample\n\nInput\n\n\n4\n4 3\n4 3 2 1\n1 0.3\n3 1\n4 0.6\n5 3\n4 2 1 3 5\n3 0.8\n4 0.6\n5 0.3\n6 5\n1 3 2 4 5 6\n4 0.9\n5 0.3\n2 0.4\n6 0.7\n3 0.5\n4 2\n1 2 3 4\n2 0.5\n4 0.1\n\n\nOutput\n\n\n0.600000\n0.720000\n0.989500\n1.000000\n\nNote\n\nExplanation of the first test case: It can be demonstrated that whether the final permutation is sorted or not depends solely on sorting being performed in the (4, 0.6) experiment.", "solution": "# by the authority of GOD     author: manhar singh sachdev #\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\ndef main():\n    for _ in range(int(input())):\n        n,m = map(int,input().split())\n        a = list(map(int,input().split()))\n        j = n-1\n        while j != -1 and a[j] == j+1:\n            j -= 1\n        if j == -1:\n            for _ in range(m):\n                x = input()\n            print(1)\n            continue\n        ans = 0\n        fac = 1\n        for _ in range(m):\n            r,p = map(float,input().split())\n            r = int(r)\n            if r >= j+1:\n                ans += fac*p\n                fac *= (1-p)\n        print(ans)\n\n#Fast IO Region\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\nif __name__ == '__main__':\n    main()", "difficulty": 9, "public_tests": {"input": ["4\n4 3\n4 3 2 1\n1 0.3\n3 1\n4 0.6\n5 3\n4 2 1 3 5\n3 0.8\n4 0.6\n5 0.3\n6 5\n1 3 2 4 5 6\n4 0.9\n5 0.3\n2 0.4\n6 0.7\n3 0.5\n4 2\n1 2 3 4\n2 0.5\n4 0.1\n"], "output": ["\n0.600000\n0.720000\n0.989500\n1.000000\n"]}, "private_tests": {"input": ["1\n5 5\n1 2 3 5 4\n5 0.5\n5 0.5\n5 0.5\n5 0.5\n5 0.5\n", "4\n9 1\n1 2 3 4 5 6 7 8 9\n6 0.000000\n6 1\n1 2 3 4 5 6\n1 0.000033\n4 1\n1 2 3 4\n1 0.000048\n15 1\n2 1 3 4 5 6 7 8 9 10 11 12 13 14 15\n6 0.000097\n", "2\n5 12\n3 2 1 4 5\n4 0.024816\n5 0.054959\n2 0.063211\n4 0.057224\n3 0.033510\n5 0.064656\n4 0.080912\n5 0.094426\n2 0.065718\n1 0.002728\n2 0.047829\n4 0.022481\n15 15\n3 8 5 7 9 2 4 6 1 10 11 12 13 14 15\n7 0.035821\n11 0.044624\n4 0.014940\n15 0.000655\n12 0.002577\n15 0.021032\n9 0.087483\n9 0.009845\n13 0.010765\n5 0.098312\n10 0.040318\n14 0.057622\n11 0.029710\n6 0.068983\n15 0.044438\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 2 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n"], "output": ["0.968750\n", "1.000000\n1.000000\n1.000000\n0.000097\n", "0.360971\n0.301294\n", "0.036247\n0.000000\n1.000000\n0.011117\n1.000000\n0.009130\n0.000000\n0.060138\n", "0.044144\n0.000000\n0.326778\n0.000000\n"]}, "generated_tests": {"input": ["8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "2\n5 12\n3 2 1 4 5\n4 0.024816\n5 0.054959\n2 0.063211\n4 0.057224\n3 0.033510\n5 0.064656\n4 0.080912\n5 0.094426\n2 0.065718\n1 0.002728\n2 0.047829\n4 0.022481\n15 15\n0 8 5 7 9 2 4 6 1 10 11 12 13 14 15\n7 0.035821\n11 0.044624\n4 0.014940\n15 0.000655\n12 0.002577\n15 0.021032\n9 0.087483\n9 0.009845\n13 0.010765\n5 0.098312\n10 0.040318\n14 0.057622\n11 0.029710\n6 0.068983\n15 0.044438\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 7 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n4 3\n4 5 2 1\n1 0.3\n3 1\n4 0.6\n5 3\n4 2 1 3 5\n3 0.8\n4 0.6\n5 0.3\n6 5\n1 3 2 4 5 6\n4 0.9\n5 0.3\n2 0.4\n6 0.7\n3 0.5\n4 2\n1 2 3 4\n2 0.5\n4 0.1\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.8105457460412552\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 4 5 6\n5 0.036247\n11 1\n3 2 2 9 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 0 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 5 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "1\n5 5\n1 2 3 8 4\n5 0.5\n5 0.5\n5 0.5\n5 0.5\n5 0.5\n", "4\n4 3\n4 3 2 1\n1 0.3\n3 1\n4 0.6\n5 3\n4 2 1 3 2\n3 0.8\n4 0.6\n5 0.3\n6 5\n1 3 2 4 5 6\n4 0.9\n5 0.3\n2 0.4\n6 0.7\n3 0.5\n4 2\n1 2 3 4\n2 0.5\n4 0.1\n", "2\n5 12\n3 2 1 4 5\n4 0.024816\n5 0.054959\n2 0.063211\n4 0.057224\n3 0.033510\n5 0.064656\n4 0.080912\n5 0.094426\n2 0.065718\n1 0.002728\n3 0.047829\n4 0.022481\n15 15\n0 8 5 7 9 2 4 6 1 10 11 12 13 14 15\n7 0.035821\n11 0.044624\n4 0.014940\n15 0.000655\n12 0.002577\n15 0.021032\n9 0.087483\n9 0.009845\n13 0.010765\n5 0.098312\n10 0.040318\n14 0.057622\n11 0.029710\n6 0.068983\n15 0.044438\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.33750244022421916\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 11 3 6 15 5\n15 0.45293260430418164\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 6 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n3 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 0 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.4426361365989963\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n10 0.657535\n", "8\n6 1\n2 4 1 4 5 6\n5 0.036247\n11 1\n3 2 2 9 5 2 4 8 9 10 3\n6 0.3391434884890079\n5 1\n1 0 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 9 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 6 11 12 13 5 15\n12 0.060138\n", "2\n5 12\n3 2 1 4 5\n4 0.024816\n5 0.054959\n2 0.063211\n4 0.057224\n3 0.033510\n5 0.064656\n4 0.080912\n5 0.094426\n2 0.065718\n1 0.002728\n2 0.047829\n4 0.22982062043492948\n15 15\n3 8 5 7 9 2 4 6 1 10 11 12 13 14 15\n7 0.035821\n11 0.044624\n4 0.014940\n12 0.000655\n12 0.002577\n15 0.021032\n9 0.087483\n9 0.009845\n13 0.010765\n3 0.098312\n10 0.040318\n14 0.057622\n11 0.029710\n6 0.068983\n15 0.044438\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n12 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 1 14 2 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n4 7 2 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.445888464896613\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 3 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n1 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 2 13 12 13\n13 0.49980229731207027\n15 1\n6 13 4 1 2 15 15 3 10 10 5 9 12 8 9\n11 0.657535\n", "4\n9 1\n1 2 3 4 5 6 7 8 9\n6 0.000000\n6 1\n1 2 3 4 5 6\n1 0.000033\n4 1\n1 2 3 4\n1 0.000048\n15 1\n2 1 3 4 5 6 7 8 3 10 11 12 13 14 15\n6 0.000097\n", "2\n5 12\n3 2 1 4 5\n4 0.024816\n5 0.26306968124507313\n2 0.063211\n4 0.057224\n3 0.033510\n5 0.064656\n4 0.080912\n5 0.094426\n2 0.065718\n1 0.002728\n2 0.047829\n4 0.022481\n15 15\n3 8 5 7 9 2 4 6 1 10 11 12 13 14 15\n7 0.035821\n11 0.044624\n4 0.014940\n15 0.000655\n12 0.002577\n15 0.021032\n9 0.087483\n9 0.009845\n13 0.010765\n5 0.098312\n10 0.040318\n14 0.057622\n11 0.029710\n6 0.068983\n15 0.044438\n", "8\n6 1\n2 4 1 3 5 6\n5 0.058685102227104186\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 3 12 13 14 15\n12 0.060138\n", "2\n5 12\n3 2 1 4 5\n4 0.024816\n5 0.054959\n2 0.063211\n4 0.057224\n3 0.033510\n5 0.064656\n4 0.080912\n5 0.094426\n2 0.065718\n1 0.002728\n2 0.047829\n4 0.022481\n15 15\n0 8 5 7 9 2 4 6 1 10 11 12 13 14 15\n7 0.035821\n11 0.044624\n4 0.014940\n15 0.000655\n12 0.002577\n15 0.021032\n9 0.087483\n9 0.009845\n13 0.010765\n10 0.098312\n10 0.040318\n14 0.057622\n11 0.029710\n6 0.068983\n15 0.044438\n", "4\n4 3\n4 5 2 1\n1 0.3\n3 1\n4 0.6\n5 3\n4 2 1 3 5\n3 0.8\n4 0.6\n5 0.3\n6 5\n1 3 2 4 5 6\n4 0.9\n5 0.35479162678898185\n2 0.4\n6 0.7\n3 0.5\n4 2\n1 2 3 4\n2 0.5\n4 0.1\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.8105457460412552\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 7 14 15\n12 0.060138\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 11 3 6 15 3\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 3 13 12 13\n4 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 2 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 0 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 10\n12 0.060138\n", "1\n5 5\n1 2 3 8 4\n5 0.5\n5 0.5\n5 0.5\n5 0.789679814579917\n5 0.5\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 7 3 6 15 5\n15 0.8637858408018791\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 11 3 6 15 5\n15 0.8046632547098242\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 2 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.4470805642722162\n", "2\n5 12\n3 2 1 4 5\n4 0.5085176363523032\n5 0.054959\n2 0.063211\n4 0.057224\n3 0.033510\n5 0.064656\n4 0.080912\n5 0.094426\n2 0.065718\n1 0.002728\n2 0.047829\n4 0.022481\n15 15\n3 8 5 7 9 2 4 6 1 10 11 12 13 14 15\n7 0.035821\n11 0.044624\n4 0.014940\n12 0.000655\n12 0.002577\n15 0.021032\n9 0.087483\n9 0.009845\n13 0.010765\n3 0.098312\n10 0.040318\n14 0.057622\n11 0.029710\n6 0.068983\n15 0.044438\n", "2\n5 12\n3 2 1 4 5\n4 0.024816\n5 0.054959\n2 0.063211\n4 0.057224\n3 0.033510\n5 0.064656\n4 0.080912\n5 0.094426\n2 0.065718\n1 0.002728\n2 0.047829\n4 0.22982062043492948\n15 15\n3 8 5 7 9 2 4 6 1 0 11 12 13 14 15\n7 0.035821\n11 0.044624\n4 0.014940\n12 0.000655\n12 0.002577\n15 0.021032\n9 0.087483\n9 0.009845\n13 0.010765\n3 0.098312\n10 0.040318\n14 0.057622\n11 0.029710\n6 0.068983\n15 0.044438\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n4 7 2 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.445888464896613\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 3 12 13 9 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.5782316383237981\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n2 0.011117\n3 1\n1 2 3\n3 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 0 0 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 2 16 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n12 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.4624936523770503\n15 1\n6 13 4 1 1 14 2 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 11 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n0 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 11 3 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 6 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 11 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n0 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 11 3 10 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 3 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 6 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 13 1 4 5 11 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n0 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 11 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 11 3 10 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 3 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 6 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 1 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 13 1 4 5 11 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 1 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n0 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 11 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 11 3 10 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 6 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 1 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 1 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 13 1 4 5 11 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 11 3 6 15 3\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 6 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 7 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 6 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 0 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 2 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 0 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 2 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 0 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 2 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 2 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 5 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 2 2 9 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 5 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 4 5 6\n5 0.036247\n11 1\n3 2 2 9 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 5 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 4 5 6\n5 0.036247\n11 1\n3 2 2 9 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 0 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 9 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 4 5 6\n5 0.036247\n11 1\n3 2 2 9 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 0 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 9 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n1 2 10 12 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "2\n5 12\n3 2 1 4 5\n4 0.024816\n5 0.054959\n2 0.063211\n4 0.057224\n3 0.033510\n5 0.064656\n4 0.080912\n5 0.094426\n2 0.065718\n1 0.002728\n2 0.047829\n4 0.022481\n15 15\n3 8 5 7 9 2 4 6 1 10 11 12 13 14 15\n7 0.035821\n11 0.044624\n4 0.014940\n12 0.000655\n12 0.002577\n15 0.021032\n9 0.087483\n9 0.009845\n13 0.010765\n5 0.098312\n10 0.040318\n14 0.057622\n11 0.029710\n6 0.068983\n15 0.044438\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 9 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 2 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 1 14 9 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 6 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 0 7 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n4 3\n1 5 2 1\n1 0.3\n3 1\n4 0.6\n5 3\n4 2 1 3 5\n3 0.8\n4 0.6\n5 0.3\n6 5\n1 3 2 4 5 6\n4 0.9\n5 0.3\n2 0.4\n6 0.7\n3 0.5\n4 2\n1 2 3 4\n2 0.5\n4 0.1\n", "8\n6 1\n2 4 1 3 6 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.8105457460412552\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n3 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 3 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n1 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 0 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 6 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n2 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 13 1 4 5 11 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 0 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n0 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 11 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 11 3 10 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 3 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 3 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 6 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 22 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 3 8 3 4 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 7 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 0\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 3 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 23 8 11\n11 0.657535\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n10 0.657535\n", "4\n15 1\n4 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 7 8 11\n11 0.657535\n", "4\n15 1\n14 0 12 4 2 10 9 1 7 13 11 3 6 15 3\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 2 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 0 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 7 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 8 1 1 14 15 6 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 2 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 0 3 6 6 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 4 5 6\n5 0.036247\n11 1\n3 0 2 9 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 5 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 4 5 6\n5 0.036247\n11 1\n3 2 2 9 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 0 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 5 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 2 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 4 5 6\n5 0.036247\n11 1\n3 2 2 9 5 2 4 8 9 10 3\n6 0.3391434884890079\n5 1\n1 0 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 9 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "2\n5 12\n3 2 1 4 5\n4 0.024816\n5 0.054959\n2 0.063211\n4 0.057224\n3 0.033510\n5 0.064656\n4 0.080912\n5 0.094426\n2 0.065718\n1 0.002728\n2 0.047829\n4 0.022481\n15 15\n3 8 5 7 9 2 4 6 1 10 11 12 13 14 15\n7 0.035821\n11 0.044624\n4 0.014940\n12 0.000655\n12 0.002577\n15 0.021032\n9 0.087483\n9 0.009845\n13 0.010765\n3 0.098312\n10 0.040318\n14 0.057622\n11 0.029710\n6 0.068983\n15 0.044438\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 9 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 11 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 2 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n4 3\n4 3 2 1\n1 0.3\n3 1\n4 0.6\n5 3\n4 3 1 3 2\n3 0.8\n4 0.6\n5 0.3\n6 5\n1 3 2 4 5 6\n4 0.9\n5 0.3\n2 0.4\n6 0.7\n3 0.5\n4 2\n1 2 3 4\n2 0.5\n4 0.1\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 1 14 2 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 6 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 8 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n3 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 0 7 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n3 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 3 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 7 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n1 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 2 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 6 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 0 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n2 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 13 1 4 5 11 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 0 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 4 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n0 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 11 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 11 3 10 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 3 6 5 2 4 8 18 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 3 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 22 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 7 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 3 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 0\n15 0.044144\n12 1\n11 1 5 9 7 10 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n4 7 2 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 3 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n2 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 23 8 11\n11 0.657535\n", "4\n15 1\n4 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 16 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 7 8 11\n11 0.657535\n", "4\n15 1\n14 0 12 4 2 10 9 1 7 13 11 3 6 15 3\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 8 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 2 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 0 14 15 3 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 11 11 12 13 14 15\n12 0.33750244022421916\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 11 3 6 15 5\n15 0.45293260430418164\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 1 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 6 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 0 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.6237949348952141\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 4 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 8 1 1 14 15 6 7 10 5 9 7 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n3 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 0 3 6 4 5 9 10 11 12 13\n5 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 2 2 6 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.7639974040556413\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 0 3 6 6 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 4 5 6\n5 0.036247\n11 1\n3 0 2 9 5 2 4 8 9 10 3\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 5 3 0 3 6 4 5 9 10 11 7 13\n7 0.064301\n15 1\n3 2 10 12 9 8 1 4 5 3 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 9 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 11 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 2 14 15 3 7 10 5 9 9 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n2 0.011117\n3 1\n1 2 3\n3 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 0 7 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n3 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 3 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 1 8 1 4 5 6 11 7 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n1 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 2 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 9\n11 0.657535\n", "8\n6 1\n2 6 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 0 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n2 0.011117\n3 1\n1 2 3\n2 0.026590087378265737\n6 1\n1 4 3 2 5 6\n5 0.009130\n13 1\n1 4 7 0 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 13 1 4 5 11 3 12 13 14 15\n12 0.060138\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 3 6 5 2 4 8 18 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 4 3 8 3 6 3 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 3 1 6 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 22 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 7 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 24 4 1 2 15 15 3 7 10 5 9 12 3 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 0\n15 0.044144\n12 1\n11 1 5 9 7 10 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 3 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 10 2 10 6\n2 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 23 8 11\n11 0.657535\n", "4\n15 1\n14 15 12 4 2 10 9 1 5 13 11 3 6 15 5\n15 0.4426361365989963\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n10 0.657535\n", "4\n15 1\n4 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 16 2 10 7\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 7 8 11\n11 0.657535\n", "4\n15 1\n14 0 12 4 2 10 9 1 7 13 11 3 6 15 3\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 1 13 12 13\n13 0.326778\n15 1\n6 8 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 4 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 7 1 4 5 11 11 12 13 14 15\n12 0.33750244022421916\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 11 3 6 15 5\n15 0.45293260430418164\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 1 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 6 7 10 5 9 7 8 11\n11 1.208692373631065\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 4 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 8 1 1 23 15 6 7 10 5 9 7 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 9 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 20 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 2 14 15 3 7 10 5 9 9 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 16 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n12 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 1 14 2 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 1 6 5 2 4 8 9 10 11\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.031733\n4 1\n2 1 3 4\n2 0.011117\n3 1\n1 2 3\n3 0.012880\n6 1\n1 4 3 2 5 6\n5 0.9036602665451088\n13 1\n1 0 0 8 3 6 2 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\n12 0.060138\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n1 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 2 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 10 10 5 9 12 8 9\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 3 1 6 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 22 7\n13 0.326778\n15 1\n6 21 5 1 1 14 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 15 12 4 2 10 9 1 7 13 7 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 24 4 1 2 15 15 3 7 2 5 9 12 3 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 0\n15 0.044144\n12 1\n11 1 5 9 7 10 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 0 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 3 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 10 2 10 6\n2 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 23 8 11\n11 0.9515042979977137\n", "4\n15 1\n14 15 12 4 2 10 9 1 5 17 11 3 6 15 5\n15 0.4426361365989963\n12 1\n11 1 5 9 7 12 3 4 14 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n10 0.657535\n", "4\n15 1\n4 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 16 2 10 7\n1 0.458573\n13 1\n12 8 10 9 5 2 4 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 7 8 11\n11 0.657535\n", "4\n15 1\n14 0 12 4 2 10 9 1 7 13 11 3 6 15 3\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 1 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 1 13 12 13\n13 0.326778\n15 1\n6 8 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 5 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 7 1 4 5 11 11 12 13 14 15\n12 0.33750244022421916\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 11 3 6 15 5\n15 0.45293260430418164\n12 1\n11 1 5 9 1 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 1 6 1 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 6 7 10 5 9 7 8 11\n11 1.208692373631065\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 4 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 0 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 8 1 1 23 15 6 7 10 5 9 7 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 9 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 20 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 2 14 15 3 7 1 5 9 9 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 2 16 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n12 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 1 14 2 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 3 1 6 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 22 7\n13 0.326778\n15 1\n6 21 5 1 1 6 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 16 12 4 2 10 9 1 7 13 7 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 24 4 1 2 15 15 3 7 2 5 9 12 3 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 0\n15 0.044144\n12 1\n11 1 5 9 7 10 5 4 8 2 10 6\n1 0.7482180517876534\n13 1\n11 8 10 9 5 2 4 6 1 0 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 3 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 10 2 10 6\n2 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 1 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 23 8 11\n11 0.9515042979977137\n", "4\n15 1\n14 15 12 4 2 10 9 1 5 17 11 3 6 15 5\n15 0.4426361365989963\n12 1\n11 1 5 9 7 12 3 4 21 2 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 6 1 3 13 12 13\n13 0.326778\n15 1\n6 13 4 1 2 15 15 3 7 10 5 9 12 8 11\n10 0.657535\n", "4\n15 1\n14 0 12 4 2 10 9 1 7 13 11 3 6 15 3\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 1 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 1 1 1 13 12 13\n13 0.326778\n15 1\n6 8 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 6 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 3 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 7 1 4 5 11 11 12 13 14 15\n12 0.33750244022421916\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 13 4 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 0 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 8 1 1 23 15 6 7 10 5 9 7 14 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 9 12 3 5 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 20 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 2 14 15 3 7 1 5 9 9 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 2 16 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n12 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 1 14 2 3 7 10 5 9 12 8 11\n11 0.8797001767040666\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n1 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 2 13 12 13\n13 0.49980229731207027\n15 1\n6 13 4 1 2 15 15 3 10 10 5 9 6 8 9\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 3 2 6 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 22 7\n13 0.326778\n15 1\n6 21 5 1 1 6 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 0\n15 0.044144\n12 1\n11 1 5 9 7 10 5 4 8 2 10 6\n1 0.7482180517876534\n13 1\n11 8 10 9 5 2 4 6 1 0 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 3 11\n10 0.657535\n", "4\n15 1\n14 8 7 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 10 2 10 6\n2 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 1 12 7\n13 0.41604547963058514\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 23 8 11\n11 0.9515042979977137\n", "4\n15 1\n14 0 12 4 2 10 9 1 7 4 11 3 6 15 3\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 1 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 1 1 1 13 12 13\n13 0.326778\n15 1\n6 8 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 6 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 5 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 8 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 7 1 4 5 11 11 12 13 14 15\n12 0.33750244022421916\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 3 4 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 0 1 13 12 7\n13 0.41604547963058514\n15 1\n6 21 8 1 1 23 15 6 7 10 5 9 7 14 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 6 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 9 12 3 5 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 20 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 2 14 15 3 7 1 5 9 9 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 2 16 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n11 1 5 18 7 12 3 4 8 2 10 6\n12 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 3 13 12 7\n13 0.326778\n15 1\n6 13 4 1 1 14 2 3 7 10 5 9 12 8 11\n11 0.8797001767040666\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n1 1 5 9 7 12 3 4 8 2 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 2 13 12 13\n13 0.49980229731207027\n15 1\n6 13 4 1 0 15 15 3 10 10 5 9 6 8 9\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 3 2 6 13 11 1 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 22 7\n13 0.326778\n15 1\n6 21 5 1 1 6 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 0\n15 0.044144\n12 1\n6 1 5 9 7 10 5 4 8 2 10 6\n1 0.7482180517876534\n13 1\n11 8 10 9 5 2 4 6 1 0 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 3 11\n10 0.657535\n", "4\n15 1\n14 0 12 7 2 10 9 1 7 4 11 3 6 15 3\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 1 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 1 1 1 13 12 13\n13 0.326778\n15 1\n6 8 4 1 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 6 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 5 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 2 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n3 2 10 7 9 7 1 4 5 11 11 12 13 14 15\n12 0.33750244022421916\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 3 4 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 0 1 13 12 11\n13 0.41604547963058514\n15 1\n6 21 8 1 1 23 15 6 7 10 5 9 7 14 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n1 1 5 9 7 12 3 4 8 0 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 2 13 12 13\n13 0.49980229731207027\n15 1\n6 13 4 1 0 15 15 3 10 10 5 9 6 8 9\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 3 2 6 13 11 1 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 7 7\n13 0.326778\n15 1\n6 21 5 1 1 6 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 1 0\n15 0.044144\n12 1\n6 1 5 9 7 10 5 4 8 2 10 6\n1 0.7482180517876534\n13 1\n11 8 10 9 5 2 4 6 1 0 13 12 7\n13 0.326778\n15 1\n6 21 4 1 1 14 15 3 7 10 5 9 12 3 11\n10 0.657535\n", "4\n15 1\n14 0 12 7 2 10 9 1 7 4 11 3 6 15 3\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 14 1 10 6\n6 0.458573\n13 1\n11 1 10 9 5 2 0 1 1 1 13 12 13\n13 0.326778\n15 1\n6 8 4 2 2 15 15 3 7 10 5 9 12 8 11\n11 0.657535\n", "8\n6 1\n2 4 1 3 5 6\n5 0.036247\n11 1\n3 7 2 6 5 2 6 8 9 10 5\n6 0.020413\n5 1\n1 2 3 4 5\n5 0.08219664706805084\n4 1\n2 1 5 4\n4 0.011117\n3 1\n1 2 3\n2 0.012880\n6 1\n1 4 3 3 5 6\n5 0.9036602665451088\n13 1\n1 2 3 8 3 6 4 5 9 10 11 12 13\n7 0.064301\n15 1\n4 2 10 7 9 7 1 4 5 11 11 12 13 14 15\n12 0.33750244022421916\n", "4\n15 1\n14 8 12 4 2 10 3 1 7 3 4 3 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 5 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 11 5 2 4 6 0 1 13 12 11\n13 0.41604547963058514\n15 1\n6 21 8 1 1 23 15 6 7 10 5 9 7 14 11\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\n15 0.044144\n12 1\n1 1 5 9 7 12 3 4 8 0 10 6\n6 0.458573\n13 1\n11 8 10 9 5 2 4 12 1 2 13 12 13\n13 0.49980229731207027\n15 1\n6 13 4 1 0 15 15 3 10 10 5 9 6 8 9\n11 0.657535\n", "4\n15 1\n14 8 12 4 2 10 3 2 6 13 11 1 6 15 5\n15 0.044144\n12 1\n11 1 5 9 7 12 3 4 8 2 10 6\n1 0.458573\n13 1\n11 8 10 9 5 2 4 6 1 1 13 7 7\n13 0.326778\n15 1\n6 21 5 1 1 6 15 3 7 10 5 9 12 8 11\n4 0.657535\n"], "output": ["0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.36097078475712274\n0.3012944667873305\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.6\n0.72\n0.9895\n1\n", "0.03624700000000003\n0\n1\n0.8105457460412552\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.03624700000000003\n0\n0.08219664706805085\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.96875\n", "0.6\n0.30000000000000004\n0.9895\n1\n", "0.3915349130929743\n0.3012944667873305\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.33750244022421916\n", "0.4529326043041817\n0\n0.41604547963058514\n0\n", "0\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.44263613659899637\n0\n0.326778\n0\n", "0.03624700000000003\n0\n0.08219664706805085\n0.011117000000000044\n1\n0.9036602665451088\n0\n0\n", "0.4965140068687022\n0.3012944667873305\n", "0.04414399999999996\n0.458573\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.44588846489661305\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.49980229731207027\n0\n", "1\n1\n1\n0\n", "0.5016935738421462\n0.3012944667873305\n", "0.05868510222710421\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.36097078475712274\n0.3699856051685344\n", "0.6\n0.72\n0.9903218744018347\n1\n", "0.03624700000000003\n0\n1\n0.8105457460412552\n1\n0.009129999999999971\n0\n0\n", "0.04414399999999996\n0\n0\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0\n", "0.9868549884112449\n", "0.8637858408018791\n0\n0.326778\n0\n", "0.8046632547098242\n0\n0.41604547963058514\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.4470805642722162\n", "0.677936072425817\n0.3012944667873305\n", "0.4965140068687022\n0.22669639701449684\n", "0.03624700000000003\n0\n1\n0.44588846489661305\n1\n0.9036602665451088\n0\n0\n", "0.5782316383237981\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0.458573\n0.4624936523770503\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n0.08219664706805085\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n0.08219664706805085\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.36097078475712274\n0.3012944667873305\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.6\n0.72\n0.9895\n1\n", "0.03624700000000003\n0\n1\n0.8105457460412552\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n0.08219664706805085\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n0.08219664706805085\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.36097078475712274\n0.3012944667873305\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.6\n0.30000000000000004\n0.9895\n1\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.33750244022421916\n", "0.4529326043041817\n0\n0.41604547963058514\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.009129999999999971\n0\n0.060138000000000025\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.44263613659899637\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.33750244022421916\n", "0.4529326043041817\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0.458573\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.060138000000000025\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.44263613659899637\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.33750244022421916\n", "0.4529326043041817\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0.458573\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.44263613659899637\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.33750244022421916\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0.458573\n0.326778\n0\n", "0.04414399999999996\n0\n0.49980229731207027\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.33750244022421916\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0.458573\n0.326778\n0\n", "0.04414399999999996\n0\n0.49980229731207027\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.33750244022421916\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.49980229731207027\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.04414399999999996\n0\n0.326778\n0\n", "0.03624700000000003\n0\n1\n0.011117000000000044\n1\n0.9036602665451088\n0\n0.33750244022421916\n", "0.04414399999999996\n0\n0.41604547963058514\n0\n", "0.04414399999999996\n0\n0.49980229731207027\n0\n", "0.04414399999999996\n0\n0.326778\n0\n"]}, "short_description": "1. One-sentence summary  \n   The solution computes the probability that at least one of a sequence of independent operations (each with its own success probability and applicable range) will \u201cfix\u201d the first misplaced element in an array.  \n\n2. Core algorithmic approach  \n   It uses a simple probabilistic accumulation: maintain the probability that no applicable operation has succeeded yet (the running product of complements) and add to the answer the incremental success probability of each operation when its range covers the target index.  \n\n3. Reusable components  \n   - Suffix scan to find the last index where an array deviates from a desired sorted state.  \n   - Probability-accumulation pattern:  \n       fac = 1  \n       for each operation with success probability p and applicability test:  \n         if applicable:  \n           ans += fac * p  \n           fac *= (1 \u2013 p)  \n   - Fast I/O wrapper for handling large volumes of input/output efficiently."}
{"name": "785_D. Anton and School - 2", "description": "As you probably know, Anton goes to school. One of the school subjects that Anton studies is Bracketology. On the Bracketology lessons students usually learn different sequences that consist of round brackets (characters \"(\" and \")\" (without quotes)).\n\nOn the last lesson Anton learned about the regular simple bracket sequences (RSBS). A bracket sequence s of length n is an RSBS if the following conditions are met:\n\n  * It is not empty (that is n \u2260 0). \n  * The length of the sequence is even. \n  * First <image> charactes of the sequence are equal to \"(\". \n  * Last <image> charactes of the sequence are equal to \")\". \n\n\n\nFor example, the sequence \"((()))\" is an RSBS but the sequences \"((())\" and \"(()())\" are not RSBS.\n\nElena Ivanovna, Anton's teacher, gave him the following task as a homework. Given a bracket sequence s. Find the number of its distinct subsequences such that they are RSBS. Note that a subsequence of s is a string that can be obtained from s by deleting some of its elements. Two subsequences are considered distinct if distinct sets of positions are deleted.\n\nBecause the answer can be very big and Anton's teacher doesn't like big numbers, she asks Anton to find the answer modulo 109 + 7.\n\nAnton thought of this task for a very long time, but he still doesn't know how to solve it. Help Anton to solve this task and write a program that finds the answer for it!\n\nInput\n\nThe only line of the input contains a string s \u2014 the bracket sequence given in Anton's homework. The string consists only of characters \"(\" and \")\" (without quotes). It's guaranteed that the string is not empty and its length doesn't exceed 200 000.\n\nOutput\n\nOutput one number \u2014 the answer for the task modulo 109 + 7.\n\nExamples\n\nInput\n\n)(()()\n\n\nOutput\n\n6\n\n\nInput\n\n()()()\n\n\nOutput\n\n7\n\n\nInput\n\n)))\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample the following subsequences are possible:\n\n  * If we delete characters at the positions 1 and 5 (numbering starts with one), we will get the subsequence \"(())\". \n  * If we delete characters at the positions 1, 2, 3 and 4, we will get the subsequence \"()\". \n  * If we delete characters at the positions 1, 2, 4 and 5, we will get the subsequence \"()\". \n  * If we delete characters at the positions 1, 2, 5 and 6, we will get the subsequence \"()\". \n  * If we delete characters at the positions 1, 3, 4 and 5, we will get the subsequence \"()\". \n  * If we delete characters at the positions 1, 3, 5 and 6, we will get the subsequence \"()\". \n\n\n\nThe rest of the subsequnces are not RSBS. So we got 6 distinct subsequences that are RSBS, so the answer is 6.", "solution": "mod = 10 ** 9 + 7\n\nfact, inv, invfact = [1, 1], [0, 1], [1, 1]\nfor i in range(2, 200200):\n    fact.append(fact[-1] * i % mod)\n    inv.append(inv[mod % i] * (mod - mod // i) % mod)\n    invfact.append(invfact[-1] * inv[-1] % mod)\n\ndef C(n, k):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * invfact[k] * invfact[n - k] % mod\n\ns = input()\nop, cl = 0, s.count(')')\nans = 0\nfor x in s:\n    if x == '(':\n        op += 1\n        cur = C(cl + op - 1, op)\n        ans += cur\n    else:\n        cl -= 1\n\nprint(ans % mod)\n", "difficulty": 10, "public_tests": {"input": [")(()()\n", "()()()\n", ")))\n"], "output": ["6\n", "7\n", "0\n"]}, "private_tests": {"input": ["())(()(())(()()))()()(()((()(())()))(()()(()()(())()()())))()()(()(((((()())(((())(((())((()(()()())()(()())()((((())()()(((()(((()(())()()((()(()(((()(((()()())(()((())()))())((()()())(()())(((((((()((((()())(()(\n", "((\n", "()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", "(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", ")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))())))))()))))))))))))))))))))))))))))))))))))))))))))))))))))())))))))())))))))))))))))))))))))))))))))))))))))))))))))\n", "))())(()()(((()))(()((())(()()(()()(((((()))((()())()())()()()))(((())()(()((())))(())())(((())))(()))())(((()(((())(()()))())))()((((())()()())(((((((())((())()(()(())(())()()(()())()))()()(()))()())()()())())))(()())(())())))(())))))(())())(()((((()()(()\n", "))\n", "))(\n", "))())(()((())()((((()((())(()()()))((()())()(()))))()))()))()))(())))((()))())()(())()))()()())(())(()())())((()())())()())(((((()())((((())()()((()))))())()))(())())())))()())))())()((((()(()(())((()((())))(((())))((()()())()))\n", "))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", ")(())()())(())))\n", ")(()()))((\n", "((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()\n", "()(\n", ")())))(((())))())))))))()())(())))))))())))(((())))())()()))(())())((()())(((((()()()())()()()))((()\n", ")))()(())(((((()))\n", ")()\n", "(()\n", ")(\n", ")())((((((()))()((()))()((()()()((()()()))\n", "(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n", ")((\n", "(\n", ")\n", "(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())\n", "(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", "((((()())))())((((((()(()())(()())()((()()))(((())()()()(())))))()())())))(()()(()))))()(((()(((())()))())())))))(()()()((((((())(()())())()())(()))))()(()))(((()()()))())()(((()(()(((()))(()))()(()))((((((((())))))()))())(())))))()(()(()(((()((()()()())(((())())((()())(((((()()(())()()(()())()()))((()()())(())))))(()()(((()()()))(()())((()))()())))))()))))()(()()()))(()(()))))))(())))))()(()(())()()(\n", ")()))()(()))\n", "()\n"], "output": ["933002737\n", "0\n", "199\n", "407336794\n", "286866\n", "546547243\n", "0\n", "0\n", "587599278\n", "0\n", "404\n", "24\n", "199\n", "1\n", "99037306\n", "256\n", "1\n", "2\n", "0\n", "4344426\n", "0\n", "0\n", "0\n", "0\n", "19899\n", "211518470\n", "702597744\n", "42\n", "1\n"]}, "generated_tests": {"input": ["()(())()((((()(((((((())()(())()()((())()))())((()(())()()(((()(((()(()((()()())(()(((()(((()()())((((()())()(()())()()(()((())(((())(((())()(((((()(()()())))()()())(()()(()()(()))())(()((()(()()()))()(())(()(())(\n", "*(\n", "())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))())))))))))))))))))))))))))\n", "(((((((((((((((((((((((((((((((((((((((()((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", "))))))))))))))))))))))))))))))))))))))))))))))))())))))))()))))))))))))))))))))))))))))))))))))))))))))))))))))())))))()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", "))())(()((())()((((()((())(()()())))(()())()(()))))()))()))()))(())))((()))())()(())()))()()())(())(()())())((()())())()())(((((()())((((())()()((()))))())()))(())())())))()())))())()((((()(()(())((()((())))(((())))((()()())()))\n", ")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))())))))))))))))))\n", ")(())()())()))))\n", "(()))()(()\n", ")))()(())((((((())\n", ")())((((((())(()((()))()((()()()((()))()))\n", "((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((\n", ")(()))\n", "()(())()((((()(((((((())()(())()()((())()))())((()(())()()(((()(((()(()((()()())(()(((()(((()()())((((()())()(()())()()(()((())(((())(((())()(((((()(()()())))()()())(()())()()(()))())(()((()(()()()))()(())(()(())(\n", "()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))())))))))))))))))))))))))))\n", "))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))()))))))))))))))((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()((((((((((((((((((((((((((((((((((((((((\n", ")))())()()((())))(((())))((()((())(()(()((((()())())))()())))())())(()))())()))))((()()())((((())()(((((())()())())()((())())()(())(())()()()))())(()())()))((())))(()))()))()))()))))(()())()(())))()()(())((()((((()())((()(())())\n", ")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))()())))))))))))))))\n", ")(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n", ")))))(())((((((())\n", ")(()((((()())(()((()))()((()()()((()))()))\n", "((()))\n", "()(())()((((()(((((((())()(())()()((())()))())((()(())()()(((()(((()(()((()()())(()(((()((())()())((((()())()(()())()()(()((())(((())(((())()(((((()(()()())))()()())(()())()()(()))())(()((()(()()()))()(())(()(())(\n", "()))))))))))))))))))))))))))))()))))))))))))))))))))))))))))))))))))))())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))())))))))))))))))))))))))))\n", "))))))))))))))))()()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", "(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()\n", "))((((((())(()))))\n", ")(()((((()())(()((()))))((()()()((()))()))\n", "())(()(())(()()))()()(()((()(())()))(()()())()(())()()())))()()(()(((((()())(((())(((())((()(()()())()(()())()((((())()())((()(((()(())()()((()(()(((()(((()()())(()((())()))())((()()())(()())(((((((()((((()())(()(\n", "))))))))))))))))))))))))))())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))()))))))))))))))))))))))))))))))))))))))()))))))))))))))))))))))))))))(\n", ")))()))((()()()((()))))((()(())()((((()(()\n", "(()())\n", "())(()(())(()()))()()(()((()(())()))(()()())()(())()()())))()()(()(((((()())(((())(((())((()(()()())()(()())()((((())()())((()(((())())()()((()(()(((()(((()()())(()((())()))())((()()())(()())(((((((()((((()())(()(\n", "())())\n", "())(()(())(()()()()()(()((()(())()))(()()())()(())()()())))()()(()(((((()())(((())(((())((()(()()())()(()())()((((())()())((()(((())())()()((()(()(((()(((()()())(()((())()))())((()()())(()())(((((((()((((()())(()(\n", ")))())\n", "())(()(())(()()()()()(((((()(())()))(()()())()(())()()())))()()(()(((((()())(((())(((())((()(()()())()(()())()((((())()())((()(((())())()()((()(()(((()(((()()())(()((())()))())((()()())(()())(((((((()((((()())(()(\n", "())(()(())(()()()()()(((((()(())()))(()()())()(())()()())))()()(()(((((()())(((()))((())((()(()()())()(()())()((((())()())((()(((())())()()((()(()(((()(((()()())(()((())()))())((()()())(()())(((((((()((((()())(()(\n", "))()))\n", "()(())()((((()(((((((())()(())()()((())()))())((()(())()()(((()(((()(()((()()())())(((()((())()())((((()())()(()())()()(()((())((()))(((())()(((((()(()()())))()()())(()())()()(()))())(()(((((()()()()()(())(()(())(\n", "())))))))))))))())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", ")))))))))))))))()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))())))))()))))))))))))))))))))))))))))))))))))))))))))))))))))())))))))())))))))))))))))))))))))))))))))))))))))))))))))\n", "))())(()()(((()))(()((())(()()(()()(((((()))((()())()())()()()))(((())()(()((())))(())())(((())))(()))())(((()(((())(()()))())))()((((())()()())(((((((())((())()(()(())(())()()(()())()))()()(()))()())()()())())))(()())(())())))(())()))(())())(()((((()()(()\n", "))'\n", ")(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n", "(((\n", "'(\n", ")*\n", "))*\n", "&(\n", ")((())\n", "))))))\n", "))())(\n", "))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n"], "output": ["31047720\n", "0\n", "549\n", "893315182\n", "2053083\n", "884461294\n", "16\n", "521\n", "26\n", "91\n", "15615782\n", "143\n", "9\n", "702530357\n", "11729\n", "75\n", "187576390\n", "153\n", "120\n", "63\n", "15716746\n", "19\n", "658038868\n", "395735\n", "19306\n", "3279\n", "4641\n", "24279625\n", "90720086\n", "7011\n", "196442\n", "13\n", "35373917\n", "7\n", "207351936\n", "2\n", "371654780\n", "116249802\n", "3\n", "40084722\n", "17218\n", "3282751\n", "273155769\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "9\n", "0\n", "2\n", "0\n"]}, "short_description": "1. One-sentence summary  \nCompute the total number of ways to pick a non\u2010empty subsequence consisting of some \u201ctype-A\u201d elements before some \u201ctype-B\u201d elements in a given sequence, modulo a prime.\n\n2. Core algorithmic approach  \n\u2013 Precompute factorials and modular inverses (O(N)) to enable O(1) binomial\u2010coefficient queries.  \n\u2013 Scan the sequence once, maintaining the count of seen A\u2019s and remaining B\u2019s, and at each A add C(remaining_B + seen_A \u2013 1, seen_A) to the answer.\n\n3. Reusable components  \n\u2013 Factorial and inverse\u2010factorial arrays with linear modular\u2010inverse precomputation for fast nCk mod-prime.  \n\u2013 A generic C(n, k) function using those precomputed arrays.  \n\u2013 One-pass scan pattern that combines prefix counts of one symbol with suffix counts of another to accumulate combinatorial contributions."}
{"name": "108_D. Basketball Team", "description": "As a German University in Cairo (GUC) student and a basketball player, Herr Wafa was delighted once he heard the news. GUC is finally participating in the Annual Basketball Competition (ABC). \n\nA team is to be formed of n players, all of which are GUC students. However, the team might have players belonging to different departments. There are m departments in GUC, numbered from 1 to m. Herr Wafa's department has number h. For each department i, Herr Wafa knows number si \u2014 how many students who play basketball belong to this department.\n\nHerr Wafa was also able to guarantee a spot on the team, using his special powers. But since he hates floating-point numbers, he needs your help at finding the probability that he will have at least one teammate belonging to his department. \n\nNote that every possible team containing Herr Wafa is equally probable. Consider all the students different from each other.\n\nInput\n\nThe first line contains three integers n, m and h (1 \u2264 n \u2264 100, 1 \u2264 m \u2264 1000, 1 \u2264 h \u2264 m) \u2014 the number of players on the team, the number of departments in GUC and Herr Wafa's department, correspondingly. \n\nThe second line contains a single-space-separated list of m integers si (1 \u2264 si \u2264 100), denoting the number of students in the i-th department. Note that sh includes Herr Wafa.\n\nOutput\n\nPrint the probability that Herr Wafa will have at least one teammate from his department. If there is not enough basketball players in GUC to participate in ABC, print -1. The answer will be accepted if it has absolute or relative error not exceeding 10 - 6.\n\nExamples\n\nInput\n\n3 2 1\n2 1\n\n\nOutput\n\n1\n\n\nInput\n\n3 2 1\n1 1\n\n\nOutput\n\n-1\n\n\nInput\n\n3 2 1\n2 2\n\n\nOutput\n\n0.666667\n\nNote\n\nIn the first example all 3 players (2 from department 1 and 1 from department 2) must be chosen for the team. Both players from Wafa's departments will be chosen, so he's guaranteed to have a teammate from his department.\n\nIn the second example, there are not enough players.\n\nIn the third example, there are three possibilities to compose the team containing Herr Wafa. In two of them the other player from Herr Wafa's department is part of the team.", "solution": "import sys\nimport math\n\n\nn,m,h = [int(x) for x in input().split()]  \narr = [int(x) for x in input().split()]\n\ntotal = sum(arr)\n\nif (total < n):\n\tprint (\"-1\")\n\tsys.exit()\n\ntotal1 = total - arr[h-1]\nrem  = total - total1-1\ntotal = total - 1\nans = 1\n'''\n#start = total - (n-1)\n#print (start)\nx = start\n#print (rem)\nfor i in range(rem-1):\n\tstart = float(float(start) * float(x-(i+1)))\n\nprint (start)\n'''\nfor i in range(n-1):\n\tx = float(total1 - i)\n\ty = float(total - i)\n\t#print (i,x,y)\n\tans = float(ans * float(x/y))\n\n#print (ans)\n\nans = float(ans) \n\nprint(\"{0:.10f}\".format(round(1-ans,10)))\n", "difficulty": 10, "public_tests": {"input": ["3 2 1\n1 1\n", "3 2 1\n2 2\n", "3 2 1\n2 1\n"], "output": ["-1\n", "0.6666666667\n", "1\n"]}, "private_tests": {"input": ["42 71 67\n2 1 4 1 10 5 1 8 8 5 2 1 1 7 2 2 8 10 8 2 10 8 2 2 9 6 5 10 7 1 7 2 10 3 5 6 10 10 4 6 10 5 6 6 9 4 1 6 1 8 10 6 1 5 3 2 4 1 8 5 10 10 9 3 10 7 5 9 1 9 3\n", "67 108 14\n33 40 13 10 26 31 27 24 48 1 42 28 38 29 9 28 48 41 12 19 27 50 6 45 46 7 34 47 8 18 40 27 42 4 33 3 10 25 10 29 39 3 5 39 1 17 40 10 6 8 41 50 27 43 40 42 43 25 18 34 6 15 5 9 11 37 13 4 16 25 49 33 14 40 13 16 50 24 4 43 45 12 31 38 40 36 3 4 4 19 18 12 20 44 4 44 8 50 21 5 44 34 9 9 6 39 43 21\n", "74 146 112\n10 31 40 32 9 17 31 26 32 7 20 18 50 10 15 28 6 41 21 27 11 5 14 36 48 45 10 42 45 40 4 11 41 23 47 31 34 4 42 49 48 9 37 34 25 27 30 27 44 33 30 25 22 13 25 41 8 34 32 22 11 12 32 9 37 9 42 7 37 13 20 40 28 26 2 6 2 49 41 46 11 9 32 18 43 28 39 48 45 36 18 10 28 35 26 5 20 12 16 2 34 28 31 13 18 39 40 1 39 12 33 31 1 31 46 1 47 38 39 49 32 12 2 8 16 27 48 41 16 27 38 42 21 27 26 8 31 41 20 43 47 5 39 25 47 34\n", "17 5 1\n10 4 9 6 2\n", "21 67 49\n4 4 3 5 7 5 10 2 8 5 2 2 6 3 6 2 8 6 2 6 2 9 3 3 4 1 9 9 3 3 6 3 6 7 8 9 10 6 10 5 1 5 2 3 3 9 10 5 10 7 1 6 4 5 4 7 8 5 4 2 9 3 3 5 7 1 10\n", "1 1 1\n100\n", "63 25 24\n6 7 7 1 2 5 5 9 9 1 9 8 1 2 10 10 5 10 2 9 5 4 9 5 7\n", "14 8 4\n6 2 10 6 2 8 4 2\n", "14 8 4\n6 2 10 6 2 8 4 2\n", "65 173 136\n26 18 8 11 1 22 44 6 15 22 13 49 30 36 37 41 25 27 9 36 36 1 45 20 7 47 28 30 30 21 33 32 9 11 16 5 19 12 44 40 25 40 32 36 15 34 4 43 28 19 29 33 7 11 18 13 40 18 10 26 1 48 20 38 1 20 34 8 46 8 32 35 16 49 26 36 11 16 4 29 35 44 14 21 22 42 10 1 3 12 35 30 14 45 2 24 32 15 2 28 35 17 48 31 7 26 44 43 37 4 14 26 25 41 18 40 15 32 16 7 40 22 43 8 25 21 35 21 47 45 7 21 50 38 23 13 4 49 10 27 31 38 43 40 10 24 39 35 31 33 9 6 15 18 2 14 20 14 12 12 29 47 9 49 25 17 41 35 9 40 19 50 34\n", "14 9 9\n9 4 7 2 1 2 4 3 9\n", "63 25 24\n6 7 7 1 2 5 5 9 9 1 9 8 1 2 10 10 5 10 2 9 5 4 9 5 7\n", "1 1 1\n1\n", "3 2 1\n1 2\n", "82 135 73\n22 18 8 45 35 8 19 46 40 6 30 40 10 41 43 38 41 40 1 43 19 23 5 13 29 16 30 9 4 42 42 3 24 16 21 26 5 4 24 24 31 30 1 10 45 50 33 21 21 47 42 37 47 15 30 23 4 2 28 15 38 33 45 30 31 32 6 14 6 4 39 12 50 29 26 45 19 12 40 4 33 9 16 12 44 36 47 42 43 17 18 12 12 42 45 38 6 10 19 10 14 31 6 21 2 15 21 26 5 3 3 6 6 22 44 48 9 11 33 31 34 43 39 40 48 26 1 29 48 11 22 38 23 11 20\n", "100 1 1\n100\n", "6 5 3\n5 2 3 10 5\n", "3 2 1\n1 1\n", "6 5 3\n5 2 3 10 5\n", "3 2 1\n2 1\n", "33 90 4\n5 10 2 3 9 6 9 3 3 8 6 4 8 4 9 3 5 9 5 6 4 1 10 6 4 5 4 5 9 5 7 1 3 9 6 6 5 6 2 4 8 7 8 5 4 5 10 9 3 1 1 8 6 9 5 1 5 9 4 6 6 4 9 4 5 7 3 7 9 1 5 6 4 1 1 4 2 4 4 2 6 4 5 5 4 9 1 10 2 2\n", "17 5 1\n10 4 9 6 2\n", "100 10 8\n1 8 9 7 6 4 4 6 8 5\n", "27 47 44\n8 5 2 5 10 6 7 9 5 10 8 5 9 5 10 5 10 8 5 1 1 2 2 10 3 2 5 9 6 3 3 1 5 4 10 5 2 2 4 4 4 4 4 1 1 3 7\n", "77 155 26\n15 18 38 46 13 15 43 37 36 28 22 26 9 46 14 32 20 11 8 28 20 42 38 40 31 20 2 43 1 42 25 28 40 47 6 50 42 45 36 28 38 43 31 14 9 22 49 4 41 9 24 35 38 40 19 31 4 9 13 19 15 48 2 34 46 49 41 15 13 29 15 24 15 50 8 26 10 23 24 15 2 46 47 46 25 36 41 29 44 36 24 22 41 7 48 17 42 41 4 46 15 26 48 27 35 19 35 22 47 7 40 1 15 46 6 34 44 6 9 5 29 24 5 25 12 38 46 10 35 12 8 15 1 9 1 16 2 12 24 31 37 49 27 41 33 5 26 48 42 37 20 18 49 40 16\n", "3 2 1\n1 2\n", "1 1 1\n2\n", "1 1 1\n1\n", "7 10 6\n9 10 2 3 3 6 9 9 3 7\n", "5 8 3\n9 7 2 5 2 10 3 4\n", "3 2 1\n2 2\n", "100 2 1\n100 1\n", "100 10 5\n10 8 7 5 8 1 2 4 3 10\n", "44 35 7\n10 2 2 6 4 2 8 3 10 1 9 9 7 9 10 6 6 1 4 5 7 4 9 7 10 10 7 9 6 1 7 7 2 10 7\n", "78 124 41\n5 28 46 46 13 48 36 2 28 31 31 12 9 28 40 35 34 50 50 30 17 11 6 36 16 30 29 8 18 16 21 8 15 30 29 20 12 5 29 20 11 44 12 42 49 10 11 7 25 15 2 38 30 29 17 34 4 5 44 49 25 15 16 33 26 8 8 34 21 9 33 16 14 8 43 50 45 17 15 43 44 22 37 36 22 47 6 13 49 48 37 44 50 9 35 13 38 31 15 6 35 48 22 14 18 8 40 18 4 23 2 26 41 41 27 40 43 33 2 17 11 40 42 32\n", "50 113 86\n2 17 43 22 48 40 42 47 32 29 10 4 9 14 20 50 8 29 12 11 50 41 3 22 30 4 48 37 27 19 50 50 23 34 13 21 3 36 31 39 22 27 7 21 31 21 14 18 36 19 27 42 19 8 5 41 7 8 22 40 38 32 44 25 21 48 4 12 10 16 23 30 25 41 16 45 3 26 19 34 34 25 26 6 9 21 46 33 36 45 3 13 28 44 30 29 22 41 20 1 20 38 4 33 36 15 41 18 13 11 13 18 6\n", "42 71 67\n2 1 4 1 10 5 1 8 8 5 2 1 1 7 2 2 8 10 8 2 10 8 2 2 9 6 5 10 7 1 7 2 10 3 5 6 10 10 4 6 10 5 6 6 9 4 1 6 1 8 10 6 1 5 3 2 4 1 8 5 10 10 9 3 10 7 5 9 1 9 3\n", "73 121 102\n11 21 12 1 48 30 22 42 42 35 33 12 23 11 27 15 50 49 24 2 48 2 21 32 16 48 36 26 32 13 38 46 36 15 27 24 7 21 43 49 19 13 3 41 35 17 5 22 42 19 37 20 40 42 11 31 48 16 21 5 42 23 29 44 9 30 46 21 44 27 9 17 39 24 30 33 48 3 43 18 16 18 17 46 19 26 37 5 24 36 42 12 18 29 7 49 1 9 27 12 21 29 19 38 6 19 43 46 33 42 9 30 19 38 25 10 44 23 50 25 46\n", "44 94 2\n2 4 10 9 5 1 9 8 1 3 6 5 5 9 4 6 6 2 6 2 4 5 7 3 8 6 5 10 2 1 1 9 1 9 3 1 9 6 2 4 9 7 4 6 1 4 5 2 7 8 2 1 1 1 4 2 5 5 5 8 2 8 2 1 1 8 1 7 7 7 1 2 5 3 8 9 8 7 2 10 5 2 2 8 9 1 4 7 7 2 6 2 8 5\n", "1 1 1\n2\n", "7 10 6\n9 10 2 3 3 6 9 9 3 7\n", "100 2 1\n100 1\n", "21 67 49\n4 4 3 5 7 5 10 2 8 5 2 2 6 3 6 2 8 6 2 6 2 9 3 3 4 1 9 9 3 3 6 3 6 7 8 9 10 6 10 5 1 5 2 3 3 9 10 5 10 7 1 6 4 5 4 7 8 5 4 2 9 3 3 5 7 1 10\n", "44 94 2\n2 4 10 9 5 1 9 8 1 3 6 5 5 9 4 6 6 2 6 2 4 5 7 3 8 6 5 10 2 1 1 9 1 9 3 1 9 6 2 4 9 7 4 6 1 4 5 2 7 8 2 1 1 1 4 2 5 5 5 8 2 8 2 1 1 8 1 7 7 7 1 2 5 3 8 9 8 7 2 10 5 2 2 8 9 1 4 7 7 2 6 2 8 5\n", "24 55 54\n8 3 6 4 8 9 10 2 2 6 6 8 3 4 5 6 6 6 10 4 8 2 3 2 2 2 10 7 10 1 6 1 6 8 10 9 2 8 9 6 6 4 1 2 7 2 2 9 3 7 3 7 6 8 4\n", "99 1 1\n100\n", "1 1 1\n100\n", "14 9 9\n9 4 7 2 1 2 4 3 9\n", "33 90 4\n5 10 2 3 9 6 9 3 3 8 6 4 8 4 9 3 5 9 5 6 4 1 10 6 4 5 4 5 9 5 7 1 3 9 6 6 5 6 2 4 8 7 8 5 4 5 10 9 3 1 1 8 6 9 5 1 5 9 4 6 6 4 9 4 5 7 3 7 9 1 5 6 4 1 1 4 2 4 4 2 6 4 5 5 4 9 1 10 2 2\n", "51 153 26\n19 32 28 7 25 50 22 31 29 39 5 4 28 26 24 1 19 23 36 2 50 50 33 28 15 17 31 35 10 40 16 7 6 43 50 29 20 25 31 37 10 18 38 38 44 30 36 47 37 6 16 48 41 49 14 16 30 7 29 42 36 8 31 37 26 15 43 42 32 3 46 12 16 37 33 12 18 16 15 14 46 11 2 50 34 34 34 32 28 24 44 12 9 38 35 12 11 15 2 6 28 35 14 46 25 30 9 1 26 5 35 26 4 32 2 30 36 29 22 4 5 1 44 38 6 48 48 6 43 45 24 19 44 18 37 18 40 45 25 35 20 27 21 29 43 18 26 46 22 39 29 41 1\n", "46 73 68\n4 2 6 4 1 9 8 10 7 8 7 2 6 4 7 9 7 9 9 1 5 1 5 1 8 2 10 2 1 7 10 2 8 3 5 3 8 9 10 5 3 4 10 4 9 6 8 1 1 6 3 1 9 6 9 4 4 3 4 5 8 1 6 2 4 10 5 7 2 6 7 4 2\n", "46 73 68\n4 2 6 4 1 9 8 10 7 8 7 2 6 4 7 9 7 9 9 1 5 1 5 1 8 2 10 2 1 7 10 2 8 3 5 3 8 9 10 5 3 4 10 4 9 6 8 1 1 6 3 1 9 6 9 4 4 3 4 5 8 1 6 2 4 10 5 7 2 6 7 4 2\n", "44 35 7\n10 2 2 6 4 2 8 3 10 1 9 9 7 9 10 6 6 1 4 5 7 4 9 7 10 10 7 9 6 1 7 7 2 10 7\n", "24 55 54\n8 3 6 4 8 9 10 2 2 6 6 8 3 4 5 6 6 6 10 4 8 2 3 2 2 2 10 7 10 1 6 1 6 8 10 9 2 8 9 6 6 4 1 2 7 2 2 9 3 7 3 7 6 8 4\n", "50 93 28\n2 5 9 5 5 8 1 3 9 2 7 10 3 1 10 10 8 5 2 7 5 4 3 9 5 2 8 9 10 8 2 7 8 9 8 1 9 8 4 3 3 6 10 10 1 2 10 1 8 10 5 8 5 2 4 1 5 6 9 8 6 7 4 6 6 1 5 1 4 6 8 4 1 7 2 8 7 5 1 3 3 7 4 2 1 5 7 5 8 3 8 7 2\n", "100 10 8\n1 8 9 7 6 4 4 6 8 5\n", "99 1 1\n100\n", "100 10 5\n10 8 7 5 8 1 2 4 3 10\n", "100 1 1\n100\n", "27 47 44\n8 5 2 5 10 6 7 9 5 10 8 5 9 5 10 5 10 8 5 1 1 2 2 10 3 2 5 9 6 3 3 1 5 4 10 5 2 2 4 4 4 4 4 1 1 3 7\n", "50 93 28\n2 5 9 5 5 8 1 3 9 2 7 10 3 1 10 10 8 5 2 7 5 4 3 9 5 2 8 9 10 8 2 7 8 9 8 1 9 8 4 3 3 6 10 10 1 2 10 1 8 10 5 8 5 2 4 1 5 6 9 8 6 7 4 6 6 1 5 1 4 6 8 4 1 7 2 8 7 5 1 3 3 7 4 2 1 5 7 5 8 3 8 7 2\n", "5 8 3\n9 7 2 5 2 10 3 4\n"], "output": ["0.3622396242\n", "0.5045577611\n", "0.4371110171\n", "0.9998600700\n", "0.4148600545\n", "0.0000000000\n", "0.8915600093\n", "0.8857504121\n", "0.8857504121\n", "0.1657312956\n", "0.9711321228\n", "0.8915600093\n", "0.0000000000\n", "0.0000000000\n", "0.7067680293\n", "1\n", "0.3804347826\n", "-1\n", "0.3804347826\n", "1\n", "0.1322132543\n", "0.9998600700\n", "-1\n", "0.0000000000\n", "0.2998539365\n", "0.0000000000\n", "0.0000000000\n", "0.0000000000\n", "0.4209460677\n", "0.0975609756\n", "0.6666666667\n", "1\n", "-1\n", "0.7937429317\n", "0.2187090073\n", "0.2988849906\n", "0.3622396242\n", "0.4705376965\n", "0.2596273113\n", "0.0000000000\n", "0.4209460677\n", "1\n", "0.4148600545\n", "0.2596273113\n", "0.4334791474\n", "1\n", "0.0000000000\n", "0.9711321228\n", "0.1322132543\n", "0.1834884748\n", "0.5251579213\n", "0.5251579213\n", "0.7937429317\n", "0.4334791474\n", "0.5637389838\n", "-1\n", "1\n", "-1\n", "1\n", "0.0000000000\n", "0.5637389838\n", "0.09756098\n"]}, "generated_tests": {"input": ["42 71 67\n2 1 4 1 10 5 1 8 8 5 2 1 1 7 2 2 8 10 8 2 10 8 2 2 9 6 5 10 7 1 7 2 10 3 5 6 10 10 4 6 10 5 6 6 9 4 1 6 1 8 10 6 1 5 3 2 4 1 8 5 10 10 9 3 10 7 5 9 1 2 3\n", "67 108 14\n33 40 13 10 26 31 27 24 48 1 42 28 38 29 9 28 48 12 12 19 27 50 6 45 46 7 34 47 8 18 40 27 42 4 33 3 10 25 10 29 39 3 5 39 1 17 40 10 6 8 41 50 27 43 40 42 43 25 18 34 6 15 5 9 11 37 13 4 16 25 49 33 14 40 13 16 50 24 4 43 45 12 31 38 40 36 3 4 4 19 18 12 20 44 4 44 8 50 21 5 44 34 9 9 6 39 43 21\n", "74 146 112\n10 31 40 32 9 17 31 26 32 7 20 18 50 10 15 28 6 41 21 27 11 5 14 36 48 45 10 42 45 40 4 11 41 23 47 31 34 4 42 49 48 9 37 34 25 27 30 27 44 33 30 25 22 13 25 41 8 34 32 22 11 12 32 9 37 9 42 7 37 13 20 40 28 26 2 6 2 49 41 46 11 9 32 18 43 28 39 48 45 36 18 10 28 35 26 5 20 12 16 1 34 28 31 13 18 39 40 1 39 12 33 31 1 31 46 1 47 38 39 49 32 12 2 8 16 27 48 41 16 27 38 42 21 27 26 8 31 41 20 43 47 5 39 25 47 34\n", "21 67 49\n4 4 3 5 7 5 10 2 8 5 2 2 6 3 6 2 8 6 2 6 2 9 3 3 4 1 9 9 3 3 6 3 6 7 8 9 10 6 10 5 1 5 2 3 3 9 10 5 10 7 1 6 4 5 4 7 8 5 4 2 9 3 3 5 7 1 18\n", "63 25 24\n6 7 7 1 2 5 5 9 9 1 9 8 1 2 10 10 5 10 3 9 5 4 9 5 7\n", "14 8 4\n6 2 20 6 2 8 4 2\n", "65 173 136\n26 18 8 11 1 22 44 6 15 22 13 49 30 36 37 41 25 27 9 36 36 1 45 20 7 47 28 30 30 21 33 32 9 11 16 5 19 12 44 40 25 40 32 36 15 34 4 43 28 19 29 33 7 11 18 13 40 18 10 26 1 48 20 38 1 20 34 8 46 8 32 35 16 49 26 36 11 16 4 29 35 44 14 21 22 42 1 1 3 12 35 30 14 45 2 24 32 15 2 28 35 17 48 31 7 26 44 43 37 4 14 26 25 41 18 40 15 32 16 7 40 22 43 8 25 21 35 21 47 45 7 21 50 38 23 13 4 49 10 27 31 38 43 40 10 24 39 35 31 33 9 6 15 18 2 14 20 14 12 12 29 47 9 49 25 17 41 35 9 40 19 50 34\n", "14 9 9\n9 4 7 2 1 2 3 3 9\n", "3 2 2\n1 1\n", "82 135 73\n22 18 8 45 35 8 19 46 40 6 30 40 10 41 43 38 41 40 1 43 19 23 5 13 29 16 30 9 4 42 42 3 24 16 21 26 5 4 24 24 31 30 1 10 45 50 33 21 21 47 42 37 47 15 30 23 4 2 28 15 38 33 45 30 31 32 6 14 6 4 39 12 50 29 26 45 19 12 40 4 33 9 16 12 44 36 47 42 43 17 18 12 12 42 45 38 6 1 19 10 14 31 6 21 2 15 21 26 5 3 3 6 6 22 44 48 9 11 33 31 34 43 39 40 48 26 1 29 48 11 22 38 23 11 20\n", "6 5 3\n5 2 3 13 5\n", "6 5 3\n5 2 3 19 5\n", "33 90 4\n5 10 2 3 9 6 9 3 3 8 6 4 8 4 9 3 5 9 5 6 4 1 10 6 4 5 4 5 9 5 7 1 3 9 6 6 5 6 2 4 8 7 8 5 4 5 10 9 3 1 1 8 6 9 5 1 5 9 4 6 6 4 9 6 5 7 3 7 9 1 5 6 4 1 1 4 2 4 4 2 6 4 5 5 4 9 1 10 2 2\n", "17 5 1\n10 4 9 5 2\n", "27 47 37\n8 5 2 5 10 6 7 9 5 10 8 5 9 5 10 5 10 8 5 1 1 2 2 10 3 2 5 9 6 3 3 1 5 4 10 5 2 2 4 4 4 4 4 1 1 3 7\n", "77 155 26\n15 18 38 46 13 15 43 37 36 28 22 26 9 46 14 32 20 11 8 28 20 42 38 40 31 20 2 43 1 42 25 28 40 47 6 50 42 45 36 28 38 43 31 14 9 22 49 4 41 9 24 35 38 40 19 31 4 9 13 19 15 48 2 34 46 49 41 15 13 29 15 24 15 50 8 26 10 23 24 15 2 46 47 46 25 36 41 29 44 36 11 22 41 7 48 17 42 41 4 46 15 26 48 27 35 19 35 22 47 7 40 1 15 46 6 34 44 6 9 5 29 24 5 25 12 38 46 10 35 12 8 15 1 9 1 16 2 12 24 31 37 49 27 41 33 5 26 48 42 37 20 18 49 40 16\n", "7 10 6\n9 10 2 3 3 6 0 9 3 7\n", "10 8 3\n9 7 2 5 2 10 3 4\n", "2 2 1\n2 2\n", "44 35 7\n10 2 2 6 4 2 8 3 10 1 9 9 7 9 10 6 6 1 4 5 7 4 9 7 10 10 7 9 2 1 7 7 2 10 7\n", "78 124 41\n5 28 46 46 13 48 36 2 28 31 31 12 9 28 40 35 34 50 50 30 17 11 6 36 16 30 29 8 18 16 21 8 15 30 29 20 12 5 29 20 11 44 12 42 49 10 11 7 25 15 2 38 30 29 17 34 4 5 44 49 25 15 16 33 26 8 8 34 21 9 33 16 14 8 43 50 45 17 15 43 44 22 37 36 22 47 6 13 49 48 37 44 50 9 35 13 38 31 15 6 43 48 22 14 18 8 40 18 4 23 2 26 41 41 27 40 43 33 2 17 11 40 42 32\n", "50 113 86\n2 17 43 22 48 40 42 47 32 29 10 4 9 14 20 50 8 29 12 11 50 41 3 22 30 4 48 37 27 19 50 50 23 34 13 21 3 36 31 39 22 27 7 21 7 21 14 18 36 19 27 42 19 8 5 41 7 8 22 40 38 32 44 25 21 48 4 12 10 16 23 30 25 41 16 45 3 26 19 34 34 25 26 6 9 21 46 33 36 45 3 13 28 44 30 29 22 41 20 1 20 38 4 33 36 15 41 18 13 11 13 18 6\n", "42 71 67\n2 1 4 1 10 5 1 8 8 5 3 1 1 7 2 2 8 10 8 2 10 8 2 2 9 6 5 10 7 1 7 2 10 3 5 6 10 10 4 6 10 5 6 6 9 4 1 6 1 8 10 6 1 5 3 2 4 1 8 5 10 10 9 3 10 7 5 9 1 9 3\n", "73 121 102\n11 21 12 1 48 30 22 42 42 35 33 12 23 11 27 15 50 49 24 2 48 2 21 32 16 48 36 26 32 13 38 46 36 15 27 24 7 21 43 49 19 13 3 41 35 17 5 22 42 19 37 20 40 42 11 31 48 16 21 5 42 23 29 44 9 30 46 21 44 27 9 2 39 24 30 33 48 3 43 18 16 18 17 46 19 26 37 5 24 36 42 12 18 29 7 49 1 9 27 12 21 29 19 38 6 19 43 46 33 42 9 30 19 38 25 10 44 23 50 25 46\n", "44 94 2\n2 4 10 9 5 1 9 8 1 3 6 5 5 9 4 6 6 2 6 2 4 5 7 3 8 6 5 10 2 2 1 9 1 9 3 1 9 6 2 4 9 7 4 6 1 4 5 2 7 8 2 1 1 1 4 2 5 5 5 8 2 8 2 1 1 8 1 7 7 7 1 2 5 3 8 9 8 7 2 10 5 2 2 8 9 1 4 7 7 2 6 2 8 5\n", "7 10 6\n9 10 2 3 3 6 3 9 3 7\n", "100 2 2\n100 1\n", "21 67 49\n4 4 3 5 7 5 10 2 8 5 2 2 6 3 6 2 8 6 2 6 2 9 3 3 2 1 9 9 3 3 6 3 6 7 8 9 10 6 10 5 1 5 2 3 3 9 10 5 10 7 1 6 4 5 4 7 8 5 4 2 9 3 3 5 7 1 10\n", "44 94 2\n2 4 7 9 5 1 9 8 1 3 6 5 5 9 4 6 6 2 6 2 4 5 7 3 8 6 5 10 2 1 1 9 1 9 3 1 9 6 2 4 9 7 4 6 1 4 5 2 7 8 2 1 1 1 4 2 5 5 5 8 2 8 2 1 1 8 1 7 7 7 1 2 5 3 8 9 8 7 2 10 5 2 2 8 9 1 4 7 7 2 6 2 8 5\n", "24 55 54\n8 3 6 4 8 9 10 2 2 6 6 8 3 4 5 4 6 6 10 4 8 2 3 2 2 2 10 7 10 1 6 1 6 8 10 9 2 8 9 6 6 4 1 2 7 2 2 9 3 7 3 7 6 8 4\n", "14 9 9\n9 4 7 2 1 2 4 3 11\n", "33 90 4\n5 10 2 3 9 6 15 3 3 8 6 4 8 4 9 3 5 9 5 6 4 1 10 6 4 5 4 5 9 5 7 1 3 9 6 6 5 6 2 4 8 7 8 5 4 5 10 9 3 1 1 8 6 9 5 1 5 9 4 6 6 4 9 4 5 7 3 7 9 1 5 6 4 1 1 4 2 4 4 2 6 4 5 5 4 9 1 10 2 2\n", "51 153 26\n19 32 28 7 25 50 22 31 29 39 5 4 28 26 24 1 19 23 36 2 50 50 33 28 15 7 31 35 10 40 16 7 6 43 50 29 20 25 31 37 10 18 38 38 44 30 36 47 37 6 16 48 41 49 14 16 30 7 29 42 36 8 31 37 26 15 43 42 32 3 46 12 16 37 33 12 18 16 15 14 46 11 2 50 34 34 34 32 28 24 44 12 9 38 35 12 11 15 2 6 28 35 14 46 25 30 9 1 26 5 35 26 4 32 2 30 36 29 22 4 5 1 44 38 6 48 48 6 43 45 24 19 44 18 37 18 40 45 25 35 20 27 21 29 43 18 26 46 22 39 29 41 1\n", "46 73 68\n4 2 6 4 1 9 8 10 7 8 7 2 6 4 7 9 7 9 9 1 5 1 5 1 8 2 10 0 1 7 10 2 8 3 5 3 8 9 10 5 3 4 10 4 9 6 8 1 1 6 3 1 9 6 9 4 4 3 4 5 8 1 6 2 4 10 5 7 2 6 7 4 2\n", "46 73 68\n4 2 6 4 1 9 8 10 7 8 7 2 6 4 7 9 7 9 9 1 5 1 5 1 8 2 10 2 1 7 10 2 8 3 5 3 8 9 10 5 3 1 10 4 9 6 8 1 1 6 3 1 9 6 9 4 4 3 4 5 8 1 6 2 4 10 5 7 2 6 7 4 2\n", "44 35 7\n10 2 2 6 4 2 8 3 10 1 9 9 7 9 10 6 6 1 4 5 7 4 9 7 10 10 7 9 6 1 7 7 0 10 7\n", "24 55 54\n8 3 6 4 8 9 10 2 2 6 6 8 3 4 5 6 6 6 10 4 8 2 2 2 2 2 10 7 10 1 6 1 6 8 10 9 2 8 9 6 6 4 1 2 7 2 2 9 3 7 3 7 6 8 4\n", "50 93 28\n2 5 9 5 5 8 1 3 9 2 7 10 3 1 10 10 8 5 2 7 5 4 3 9 5 2 8 9 10 8 2 7 8 9 8 1 9 8 4 3 3 6 10 10 1 2 10 1 8 10 5 8 5 2 4 1 5 6 9 8 6 7 4 6 6 1 5 1 4 6 16 4 1 7 2 8 7 5 1 3 3 7 4 2 1 5 7 5 8 3 8 7 2\n", "50 93 28\n2 5 9 5 5 8 1 3 9 2 7 7 3 1 10 10 8 5 2 7 5 4 3 9 5 2 8 9 10 8 2 7 8 9 8 1 9 8 4 3 3 6 10 10 1 2 10 1 8 10 5 8 5 2 4 1 5 6 9 8 6 7 4 6 6 1 5 1 4 6 8 4 1 7 2 8 7 5 1 3 3 7 4 2 1 5 7 5 8 3 8 7 2\n", "5 8 3\n9 7 2 5 2 16 3 4\n", "42 71 67\n2 1 4 1 10 5 1 8 8 5 2 1 1 7 2 2 8 5 8 2 10 8 2 2 9 6 5 10 7 1 7 2 10 3 5 6 10 10 4 6 10 5 6 6 9 4 1 6 1 8 10 6 1 5 3 2 4 1 8 5 10 10 9 3 10 7 5 9 1 2 3\n", "67 108 14\n33 40 13 10 26 31 27 24 48 1 42 28 38 29 9 28 48 12 12 19 27 50 6 45 46 7 34 47 8 18 40 27 42 4 33 3 10 25 10 29 39 3 5 39 1 17 40 10 6 8 41 50 27 43 40 42 43 25 18 34 6 15 5 9 11 37 13 4 16 25 49 33 14 40 13 16 90 24 4 43 45 12 31 38 40 36 3 4 4 19 18 12 20 44 4 44 8 50 21 5 44 34 9 9 6 39 43 21\n", "74 146 112\n10 31 40 32 9 17 31 26 32 7 20 18 50 10 15 28 6 41 21 27 11 5 14 36 48 45 10 42 45 40 4 11 41 23 47 31 34 4 42 49 48 9 37 34 25 27 30 27 44 33 30 25 22 13 25 41 8 34 32 22 11 12 32 9 37 9 42 7 37 13 20 40 28 26 2 6 2 49 41 46 11 9 32 18 43 28 39 48 45 36 18 10 28 35 26 5 20 12 16 1 34 28 31 13 18 39 40 1 39 12 33 31 1 31 46 1 47 38 39 49 32 12 2 8 16 27 48 41 16 27 38 58 21 27 26 8 31 41 20 43 47 5 39 25 47 34\n", "21 67 49\n4 4 3 5 7 5 10 2 8 5 2 2 6 3 6 2 8 6 2 6 2 9 3 3 4 1 9 9 3 3 6 3 6 7 8 9 10 6 10 5 1 5 2 3 3 9 10 5 10 7 1 6 4 5 4 7 8 5 4 2 9 3 3 5 7 1 27\n", "14 8 4\n6 2 27 6 2 8 4 2\n", "65 173 136\n26 18 8 11 1 22 44 6 15 22 13 49 30 36 37 41 25 27 9 36 36 1 45 20 7 47 28 30 30 21 33 32 9 11 16 5 19 12 44 40 25 40 32 36 15 34 4 43 28 19 29 33 7 11 18 13 40 18 10 26 1 48 20 38 1 20 34 8 46 8 32 51 16 49 26 36 11 16 4 29 35 44 14 21 22 42 1 1 3 12 35 30 14 45 2 24 32 15 2 28 35 17 48 31 7 26 44 43 37 4 14 26 25 41 18 40 15 32 16 7 40 22 43 8 25 21 35 21 47 45 7 21 50 38 23 13 4 49 10 27 31 38 43 40 10 24 39 35 31 33 9 6 15 18 2 14 20 14 12 12 29 47 9 49 25 17 41 35 9 40 19 50 34\n", "6 9 9\n9 4 7 2 1 2 3 3 9\n", "82 135 73\n22 18 8 45 35 8 19 46 40 6 30 40 10 41 43 38 41 40 1 43 19 23 5 13 29 16 30 9 4 42 42 3 24 16 21 26 5 4 24 24 31 30 1 10 45 50 33 21 21 47 42 37 47 15 30 23 4 2 28 15 38 33 45 30 31 32 6 14 6 4 39 12 50 29 26 45 19 12 40 4 33 9 16 13 44 36 47 42 43 17 18 12 12 42 45 38 6 1 19 10 14 31 6 21 2 15 21 26 5 3 3 6 6 22 44 48 9 11 33 31 34 43 39 40 48 26 1 29 48 11 22 38 23 11 20\n", "6 5 3\n5 2 3 6 5\n", "6 5 3\n5 2 3 19 2\n", "33 90 4\n5 10 2 3 9 6 9 3 3 8 6 4 8 4 9 3 5 9 5 6 4 1 10 6 4 5 4 5 9 5 7 1 3 9 6 6 5 2 2 4 8 7 8 5 4 5 10 9 3 1 1 8 6 9 5 1 5 9 4 6 6 4 9 6 5 7 3 7 9 1 5 6 4 1 1 4 2 4 4 2 6 4 5 5 4 9 1 10 2 2\n", "9 5 1\n10 4 9 5 2\n", "101 1 1\n100\n", "3 2 1\n1 0\n", "100 10 6\n1 8 9 7 6 4 4 6 8 5\n", "149 1 1\n100\n", "100 10 8\n1 8 9 7 6 0 4 6 8 5\n", "100 10 5\n10 8 7 5 13 1 2 4 3 10\n", "27 47 44\n8 5 2 5 10 11 7 9 5 10 8 5 9 5 10 5 10 8 5 1 1 2 2 10 3 2 5 9 6 3 3 1 5 4 10 5 2 2 4 4 4 4 4 1 1 3 7\n", "3 2 1\n2 0\n", "2 2 2\n1 1\n", "100 10 6\n1 8 9 7 6 4 4 6 8 1\n"], "output": ["0.3678362041\n", "0.5084203804\n", "0.4371959189\n", "0.4075168308\n", "0.8893440306\n", "0.8022994582\n", "0.1660529210\n", "0.9746069599\n", "-1\n", "0.7077699009\n", "0.3418803419\n", "0.2840909091\n", "0.1316699179\n", "0.9999286071\n", "0.1087866109\n", "0.3006570228\n", "0.4798945110\n", "0.2195121951\n", "0.3333333333\n", "0.8006339776\n", "0.2182156332\n", "0.3010655375\n", "0.3614537093\n", "0.4721358900\n", "0.2591092902\n", "0.4585617121\n", "0.0000000000\n", "0.4167361032\n", "0.2611937789\n", "0.4357644764\n", "0.9863875051\n", "0.1305965156\n", "0.0732896204\n", "0.5271183065\n", "0.5281036287\n", "0.7971808713\n", "0.4346189144\n", "0.5576674471\n", "0.5660470515\n", "0.0851063830\n", "0.3719385519\n", "0.5031070377\n", "0.4358412913\n", "0.3995517451\n", "0.7479988565\n", "0.1654820000\n", "0.7048911259\n", "0.7076584755\n", "0.4473684211\n", "0.3103448276\n", "0.1327610873\n", "0.9706510381\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "0.0000000000\n", "-1\n", "0.0000000000\n", "-1\n"]}, "short_description": "1. One-sentence summary:  \n   Compute the probability that a distinguished element is selected when drawing a fixed-size sample without replacement from a multiset of items, or determine it\u2019s impossible.\n\n2. Core algorithmic approach:  \n   Direct combinatorial probability via an iterative product of ratio terms (i.e., computing hypergeometric probability complement) without explicit factorials.\n\n3. Reusable components:  \n   - Early feasibility check and early exit when the total available items are insufficient for the required sample size.  \n   - Iterative ratio multiplication to compute \u201cC(A, k)/C(B, k)\u201d (or 1 minus that) in O(k) time without overflow by updating a running product of (A\u2013i)/(B\u2013i).  \n   - Floating-point formatting to a fixed number of decimal places for probability output."}
{"name": "160_C. Find Pair", "description": "You've got another problem dealing with arrays. Let's consider an arbitrary sequence containing n (not necessarily different) integers a1, a2, ..., an. We are interested in all possible pairs of numbers (ai, aj), (1 \u2264 i, j \u2264 n). In other words, let's consider all n2 pairs of numbers, picked from the given array.\n\nFor example, in sequence a = {3, 1, 5} are 9 pairs of numbers: (3, 3), (3, 1), (3, 5), (1, 3), (1, 1), (1, 5), (5, 3), (5, 1), (5, 5).\n\nLet's sort all resulting pairs lexicographically by non-decreasing. Let us remind you that pair (p1, q1) is lexicographically less than pair (p2, q2) only if either p1 < p2, or p1 = p2 and q1 < q2.\n\nThen the sequence, mentioned above, will be sorted like that: (1, 1), (1, 3), (1, 5), (3, 1), (3, 3), (3, 5), (5, 1), (5, 3), (5, 5)\n\nLet's number all the pair in the sorted list from 1 to n2. Your task is formulated like this: you should find the k-th pair in the ordered list of all possible pairs of the array you've been given.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 105, 1 \u2264 k \u2264 n2). The second line contains the array containing n integers a1, a2, ..., an ( - 109 \u2264 ai \u2264 109). The numbers in the array can coincide. All numbers are separated with spaces.\n\nPlease do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout, streams or the %I64d specificator instead.\n\nOutput\n\nIn the single line print two numbers \u2014 the sought k-th pair.\n\nExamples\n\nInput\n\n2 4\n2 1\n\n\nOutput\n\n2 2\n\n\nInput\n\n3 2\n3 1 5\n\n\nOutput\n\n1 3\n\nNote\n\nIn the first sample the sorted sequence for the given array looks as: (1, 1), (1, 2), (2, 1), (2, 2). The 4-th of them is pair (2, 2).\n\nThe sorted sequence for the array from the second sample is given in the statement. The 2-nd pair there is (1, 3).", "solution": "#import math\n#from functools import lru_cache\n#import heapq\n#from collections import defaultdict\nfrom collections import Counter\n#from collections import deque\n#from sys import stdout\n#from sys import setrecursionlimit\n#setrecursionlimit(10**7)\n#from bisect import bisect_left\nfrom sys import stdin\ninput = stdin.readline\n\nINF = 10**9 + 7\nMAX = 10**7 + 7\nMOD = 10**9 + 7\n\nn, k = [int(x) for x in input().strip().split()]\na = [int(x) for x in input().strip().split()]\nc = list(Counter(a).items())\nc.sort()\n#c.append((0, 0))\ns = 0\nfi = 0\ni = 0\nwhile(i<len(c)):\n    s += c[i][1]*n\n    #print(i, s)\n    if(s>=k):\n        fi = i\n        k -= (s - c[i][1]*n)\n        break\n    i+=1\nsi = 0\ni = 0\ns = 0\nwhile(i<len(c)):\n    s += c[i][1]*c[fi][1]\n    #print(i, s)\n    if(s>=k):\n        si = i\n        break\n    i+=1\nprint(c[fi][0], c[si][0])\n", "difficulty": 9, "public_tests": {"input": ["2 4\n2 1\n", "3 2\n3 1 5\n"], "output": ["2 2\n", "1 3\n"]}, "private_tests": {"input": ["5 16\n1 1 2 2 3\n", "10 90\n1 1 1 1 1 1 1 1 1 2\n", "3 3\n1 1 2\n", "5 15\n1 1 1 2 2\n", "100 4755\n5 4 3 5 1 2 5 1 1 3 5 4 4 1 1 1 1 5 4 4 5 1 5 5 1 2 1 3 1 5 1 3 3 3 2 2 2 1 1 5 1 3 4 1 1 3 2 5 2 2 5 5 4 4 1 3 4 3 3 4 5 3 3 3 1 2 1 4 2 4 4 1 5 1 3 5 5 5 5 3 4 4 3 1 2 5 2 3 5 4 2 4 5 3 2 4 2 4 3 1\n", "6 36\n1 1 2 2 2 2\n", "50 622\n4 9 8 1 3 7 1 2 3 8 9 8 8 5 2 10 5 8 1 3 1 8 2 3 7 9 10 2 9 9 7 3 8 6 10 6 5 4 8 1 1 5 6 8 9 5 9 5 3 2\n", "9 76\n1 1 2 2 2 2 3 3 9\n", "10 25\n1 2 2 3 4 5 6 7 8 9\n", "5 13\n3 3 3 4 5\n", "5 7\n1 3 3 3 5\n", "100 9043\n4 1 4 2 1 4 2 2 1 1 4 2 4 2 4 1 4 2 2 1 2 2 2 2 1 1 2 3 2 1 1 3 2 3 1 4 2 2 2 4 1 4 3 3 4 3 4 1 1 4 2 2 4 4 4 4 4 1 1 2 3 1 3 4 1 3 1 4 1 3 2 2 3 2 3 1 2 3 4 3 3 2 3 4 4 4 2 3 2 1 1 2 2 4 1 2 3 2 2 1\n", "4 5\n3 1 3 1\n", "3 7\n5 4 3\n", "5 3\n0 1 2 3 4\n", "5 17\n1 3 3 3 5\n", "3 5\n1 1 2\n", "1 1\n-4\n", "10 50\n1 1 -9 -9 -9 7 7 7 7 7\n", "100 6819\n4 3 4 6 2 5 2 2 5 6 6 6 1 3 1 3 2 2 2 3 4 5 2 1 6 4 5 3 2 3 4 4 4 3 5 6 3 2 4 5 2 3 2 1 1 6 4 1 5 6 4 3 4 2 4 1 3 2 3 1 2 2 5 1 3 2 5 1 3 2 4 5 1 3 5 5 5 2 6 6 6 3 1 5 4 6 3 3 4 3 1 4 1 1 1 1 2 4 2 6\n", "10 90\n2 1 1 1 1 1 2 1 2 2\n", "3 6\n10 1 3\n", "5 10\n1 2 2 1 3\n", "10 91\n1 1 1 1 1 1 1 1 1 2\n", "5 17\n1 3 3 5 5\n", "4 12\n-1 -2 -3 -4\n", "8 26\n4 4 1 1 1 3 3 5\n", "50 2069\n9 97 15 22 69 27 7 23 84 73 74 60 94 43 98 13 4 63 49 7 31 93 23 6 75 32 63 49 32 99 43 68 48 16 54 20 38 40 65 34 28 21 55 79 50 2 18 22 95 25\n", "5 20\n1 2 2 3 3\n", "10 18\n1 1 1 3 4 4 4 1 2 3\n", "10 6\n3 1 1 3 2 2 2 3 3 3\n"], "output": ["2 2\n", "1 2\n", "1 1\n", "1 2\n", "3 3\n", "2 2\n", "3 3\n", "9 2\n", "2 7\n", "3 5\n", "3 1\n", "4 3\n", "1 3\n", "5 3\n", "0 2\n", "3 3\n", "1 2\n", "-4 -4\n", "1 7\n", "4 4\n", "2 2\n", "3 10\n", "1 3\n", "2 1\n", "5 1\n", "-2 -1\n", "3 1\n", "75 28\n", "3 2\n", "1 2\n", "1 2\n"]}, "generated_tests": {"input": ["5 6\n1 1 2 2 3\n", "100 4755\n5 4 3 5 1 2 5 1 1 3 5 4 4 1 1 1 1 5 4 4 5 1 5 5 1 2 1 3 1 5 1 3 3 3 2 2 2 1 1 5 1 3 4 1 1 3 2 5 2 2 5 5 4 4 1 3 4 3 3 4 5 3 3 3 1 2 1 4 2 4 4 1 5 1 2 5 5 5 5 3 4 4 3 1 2 5 2 3 5 4 2 4 5 3 2 4 2 4 3 1\n", "6 36\n1 1 2 1 2 2\n", "50 622\n4 9 8 1 3 7 1 2 3 8 9 8 8 5 2 10 5 8 1 3 1 8 2 3 7 9 10 2 9 9 7 3 8 6 10 6 5 4 8 1 1 5 11 8 9 5 9 5 3 2\n", "9 76\n1 1 2 2 2 3 3 3 9\n", "10 25\n1 2 2 3 4 5 6 7 4 9\n", "5 13\n3 3 3 7 5\n", "5 7\n1 3 3 1 5\n", "100 9043\n4 1 4 2 1 4 2 2 1 1 4 2 4 2 4 1 4 2 2 1 1 2 2 2 1 1 2 3 2 1 1 3 2 3 1 4 2 2 2 4 1 4 3 3 4 3 4 1 1 4 2 2 4 4 4 4 4 1 1 2 3 1 3 4 1 3 1 4 1 3 2 2 3 2 3 1 2 3 4 3 3 2 3 4 4 4 2 3 2 1 1 2 2 4 1 2 3 2 2 1\n", "4 1\n3 1 3 1\n", "3 7\n5 0 3\n", "5 3\n-1 1 2 3 4\n", "10 50\n1 1 -9 -9 -9 7 7 7 7 13\n", "100 6819\n4 3 4 6 2 5 2 2 5 6 6 6 1 0 1 3 2 2 2 3 4 5 2 1 6 4 5 3 2 3 4 4 4 3 5 6 3 2 4 5 2 3 2 1 1 6 4 1 5 6 4 3 4 2 4 1 3 2 3 1 2 2 5 1 3 2 5 1 3 2 4 5 1 3 5 5 5 2 6 6 6 3 1 5 4 6 3 3 4 3 1 4 1 1 1 1 2 4 2 6\n", "10 90\n2 1 1 1 1 1 2 1 2 4\n", "10 91\n1 1 1 1 0 1 1 1 1 2\n", "4 12\n-1 -3 -3 -4\n", "8 26\n4 8 1 1 1 3 3 5\n", "50 2069\n9 97 15 22 69 27 7 23 84 73 74 60 94 43 98 13 4 63 49 7 31 93 23 6 75 32 63 29 32 99 43 68 48 16 54 20 38 40 65 34 28 21 55 79 50 2 18 22 95 25\n", "10 6\n3 0 1 3 2 2 2 3 3 3\n", "3 3\n3 1 5\n", "9 76\n1 1 2 2 2 3 3 3 15\n", "10 25\n1 4 2 3 4 5 6 7 4 9\n", "3 7\n5 1 3\n", "5 5\n-1 1 2 3 4\n", "10 90\n2 1 1 1 1 1 2 1 2 8\n", "10 91\n1 1 1 1 0 1 2 1 1 2\n", "3 3\n3 0 5\n", "10 50\n1 1 -9 -9 -9 7 17 7 7 13\n", "50 2069\n9 97 15 22 69 27 7 23 84 73 74 60 94 43 98 13 4 63 49 7 31 93 23 6 75 32 63 11 32 99 43 68 48 16 54 20 38 40 65 34 28 21 55 79 45 2 18 22 95 25\n", "10 3\n3 0 1 3 2 2 2 3 3 6\n", "3 3\n3 0 6\n", "5 17\n1 3 3 0 5\n", "5 10\n1 2 2 1 0\n", "5 17\n1 3 3 5 1\n", "10 18\n1 1 1 4 4 4 4 1 2 3\n", "2 4\n2 0\n", "5 6\n1 1 2 2 6\n", "100 4755\n5 4 3 5 1 2 5 1 1 3 5 4 4 2 1 1 1 5 4 4 5 1 5 5 1 2 1 3 1 5 1 3 3 3 2 2 2 1 1 5 1 3 4 1 1 3 2 5 2 2 5 5 4 4 1 3 4 3 3 4 5 3 3 3 1 2 1 4 2 4 4 1 5 1 2 5 5 5 5 3 4 4 3 1 2 5 2 3 5 4 2 4 5 3 2 4 2 4 3 1\n", "6 36\n1 1 2 1 3 2\n", "50 622\n4 9 8 1 3 7 1 2 3 8 9 8 8 5 2 10 5 8 1 3 1 8 2 3 7 9 10 2 9 9 7 3 8 6 10 6 5 4 8 1 1 5 11 8 9 5 0 5 3 2\n", "5 13\n4 3 3 7 5\n", "5 7\n0 3 3 1 5\n", "100 9043\n4 1 4 2 1 4 2 2 1 1 4 2 4 2 4 1 4 2 2 1 1 2 2 2 1 1 2 3 2 1 1 3 2 3 1 4 2 2 2 4 1 4 3 3 4 3 4 1 1 4 2 2 4 4 4 4 4 1 1 2 3 1 5 4 1 3 1 4 1 3 2 2 3 2 3 1 2 3 4 3 3 2 3 4 4 4 2 3 2 1 1 2 2 4 1 2 3 2 2 1\n", "4 1\n4 1 3 1\n", "10 50\n1 1 -9 -9 -9 7 12 7 7 13\n", "100 6819\n4 3 4 6 2 5 2 2 5 6 6 6 1 0 1 3 2 2 2 3 4 5 2 1 6 4 5 3 2 3 4 4 4 3 5 6 3 2 3 5 2 3 2 1 1 6 4 1 5 6 4 3 4 2 4 1 3 2 3 1 2 2 5 1 3 2 5 1 3 2 4 5 1 3 5 5 5 2 6 6 6 3 1 5 4 6 3 3 4 3 1 4 1 1 1 1 2 4 2 6\n", "5 10\n1 2 3 1 0\n", "4 12\n-1 -3 -3 -8\n", "8 26\n4 8 1 1 1 3 3 0\n", "50 2069\n9 97 15 22 69 27 7 23 84 73 74 60 94 43 98 13 4 63 49 7 31 93 23 6 75 32 63 29 32 99 43 68 48 16 54 20 38 40 65 34 28 21 55 79 45 2 18 22 95 25\n", "10 18\n1 1 2 4 4 4 4 1 2 3\n", "10 6\n3 0 1 3 2 2 2 3 3 6\n", "5 6\n1 1 3 2 6\n", "100 4755\n5 4 3 5 1 2 5 1 1 3 5 4 4 2 1 1 1 5 4 4 5 1 5 5 1 2 1 3 1 5 1 3 3 3 2 2 2 1 1 5 1 3 4 1 1 3 2 5 2 2 5 5 4 4 1 3 4 3 3 4 5 3 3 3 1 2 1 4 2 4 5 1 5 1 2 5 5 5 5 3 4 4 3 1 2 5 2 3 5 4 2 4 5 3 2 4 2 4 3 1\n", "6 36\n0 1 2 1 3 2\n", "50 622\n4 9 8 1 3 7 1 2 3 8 9 14 8 5 2 10 5 8 1 3 1 8 2 3 7 9 10 2 9 9 7 3 8 6 10 6 5 4 8 1 1 5 11 8 9 5 0 5 3 2\n", "10 25\n1 4 2 3 4 5 6 7 4 4\n", "5 13\n4 3 0 7 5\n", "5 7\n0 3 3 1 7\n", "100 9043\n4 1 4 2 1 4 2 2 1 1 4 2 4 2 4 1 4 2 2 1 1 2 2 2 1 1 2 3 2 1 1 3 2 3 1 4 2 2 2 4 1 4 3 3 4 3 4 1 1 4 2 2 4 4 4 4 4 1 1 2 3 1 5 4 1 3 1 4 1 3 2 2 3 2 3 1 2 3 4 3 3 2 3 4 0 4 2 3 2 1 1 2 2 4 1 2 3 2 2 1\n", "4 1\n4 1 3 2\n", "3 7\n5 1 2\n", "5 9\n-1 1 2 3 4\n", "100 6819\n4 3 4 6 2 5 2 2 5 6 6 6 1 0 1 3 2 2 2 3 4 5 2 1 6 2 5 3 2 3 4 4 4 3 5 6 3 2 3 5 2 3 2 1 1 6 4 1 5 6 4 3 4 2 4 1 3 2 3 1 2 2 5 1 3 2 5 1 3 2 4 5 1 3 5 5 5 2 6 6 6 3 1 5 4 6 3 3 4 3 1 4 1 1 1 1 2 4 2 6\n", "10 90\n2 1 1 1 2 1 2 1 2 8\n", "5 8\n1 2 3 1 0\n", "4 12\n-1 -3 -3 -3\n", "8 26\n4 8 1 2 1 3 3 0\n", "10 18\n1 1 2 4 4 4 4 1 2 0\n"], "output": ["1 2\n", "3 2\n", "2 2\n", "3 3\n", "9 2\n", "2 6\n", "3 7\n", "1 3\n", "4 3\n", "1 1\n", "5 0\n", "-1 2\n", "1 13\n", "4 4\n", "2 4\n", "2 0\n", "-3 -1\n", "3 1\n", "75 28\n", "0 3\n", "1 5\n", "15 2\n", "3 4\n", "5 1\n", "-1 4\n", "2 8\n", "2 1\n", "0 5\n", "1 17\n", "75 27\n", "0 2\n", "0 6\n", "3 3\n", "1 1\n", "3 3\n", "1 2\n", "2 2\n", "1 2\n", "3 2\n", "3 3\n", "3 1\n", "4 4\n", "1 1\n", "4 3\n", "1 1\n", "1 13\n", "4 4\n", "1 1\n", "-3 -1\n", "1 3\n", "75 28\n", "1 3\n", "0 3\n", "1 2\n", "3 2\n", "3 3\n", "3 1\n", "3 4\n", "4 4\n", "1 1\n", "4 3\n", "1 1\n", "5 1\n", "1 3\n", "4 4\n", "2 8\n", "1 1\n", "-3 -1\n", "2 1\n", "1 1\n"]}, "short_description": "1. One-sentence summary:  \nSelect the k-th element in the weighted Cartesian product of a multiset with itself (i.e., all ordered pairs) in sorted order without explicitly enumerating all pairs.\n\n2. Core algorithmic approach:  \nUse cumulative frequency sums (a weighted prefix-sum search) twice\u2014first to choose the first element of the pair, then to choose the second\u2014effectively a two-phase \u201ckth-order statistic in a Cartesian product\u201d via prefix sums.\n\n3. Reusable components:  \n- Frequency counting and sorting of unique values (using Counter then sorting by key).  \n- Weighted prefix-sum search: accumulate weights until the running total reaches k, then identify the corresponding index.  \n- Adjustment of k between phases: subtract the excess weight from k after the first selection to reuse in the second selection."}
{"name": "1187_F. Expected Square Beauty", "description": "Let x be an array of integers x = [x_1, x_2, ..., x_n]. Let's define B(x) as a minimal size of a partition of x into subsegments such that all elements in each subsegment are equal. For example, B([3, 3, 6, 1, 6, 6, 6]) = 4 using next partition: [3, 3\\ |\\ 6\\ |\\ 1\\ |\\ 6, 6, 6].\n\nNow you don't have any exact values of x, but you know that x_i can be any integer value from [l_i, r_i] (l_i \u2264 r_i) uniformly at random. All x_i are independent.\n\nCalculate expected value of (B(x))^2, or E((B(x))^2). It's guaranteed that the expected value can be represented as rational fraction P/Q where (P, Q) = 1, so print the value P \u22c5 Q^{-1} mod 10^9 + 7.\n\nInput\n\nThe first line contains the single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the size of the array x.\n\nThe second line contains n integers l_1, l_2, ..., l_n (1 \u2264 l_i \u2264 10^9).\n\nThe third line contains n integers r_1, r_2, ..., r_n (l_i \u2264 r_i \u2264 10^9).\n\nOutput\n\nPrint the single integer \u2014 E((B(x))^2) as P \u22c5 Q^{-1} mod 10^9 + 7.\n\nExamples\n\nInput\n\n\n3\n1 1 1\n1 2 3\n\n\nOutput\n\n\n166666673\n\n\nInput\n\n\n3\n3 4 5\n4 5 6\n\n\nOutput\n\n\n500000010\n\nNote\n\nLet's describe all possible values of x for the first sample: \n\n  * [1, 1, 1]: B(x) = 1, B^2(x) = 1; \n  * [1, 1, 2]: B(x) = 2, B^2(x) = 4; \n  * [1, 1, 3]: B(x) = 2, B^2(x) = 4; \n  * [1, 2, 1]: B(x) = 3, B^2(x) = 9; \n  * [1, 2, 2]: B(x) = 2, B^2(x) = 4; \n  * [1, 2, 3]: B(x) = 3, B^2(x) = 9; \n\nSo E = 1/6 (1 + 4 + 4 + 9 + 4 + 9) = 31/6 or 31 \u22c5 6^{-1} = 166666673.\n\nAll possible values of x for the second sample: \n\n  * [3, 4, 5]: B(x) = 3, B^2(x) = 9; \n  * [3, 4, 6]: B(x) = 3, B^2(x) = 9; \n  * [3, 5, 5]: B(x) = 2, B^2(x) = 4; \n  * [3, 5, 6]: B(x) = 3, B^2(x) = 9; \n  * [4, 4, 5]: B(x) = 2, B^2(x) = 4; \n  * [4, 4, 6]: B(x) = 2, B^2(x) = 4; \n  * [4, 5, 5]: B(x) = 2, B^2(x) = 4; \n  * [4, 5, 6]: B(x) = 3, B^2(x) = 9; \n\nSo E = 1/8 (9 + 9 + 4 + 9 + 4 + 4 + 4 + 9) = 52/8 or 13 \u22c5 2^{-1} = 500000010.", "solution": "mod = 10 ** 9 + 7\n\ndef pow_(x, y, p) : \n    res = 1     \n    x   = x % p  \n      \n    if x == 0: \n        return 0\n  \n    while y > 0: \n        if (y & 1) == 1: \n            res = (res * x) % p \n  \n        y = y >> 1 \n        x = (x * x) % p \n          \n    return res \n    \ndef reverse(x, mod):\n    return pow_(x, mod-2, mod)\n\ndef prob(l_arr, r_arr):\n    l_, r_ = max(l_arr), min(r_arr)\n   \n    if l_ > r_:\n        return 1\n  \n    p = (r_-l_+1)\n    for l, r in zip(l_arr, r_arr):\n        p *= reverse(r-l+1 ,mod)\n        \n    return (1-p) % mod\n\nn = int(input())\nL = list(map(int, input().split()))\nR = list(map(int, input().split()))\n\nEX, EX2 = 0, 0\nP       = [0] * n\npre     = [0] * n\n\nfor i in range(1, n):\n    P[i]   =  prob(L[i-1: i+1], R[i-1: i+1])\n    pre[i] = (pre[i-1] + P[i]) % mod\n    \n    if i >= 2:\n        pA, pB, pAB = 1-P[i-1], 1-P[i], 1-prob(L[i-2: i+1], R[i-2: i+1])\n        p_          = 1 - (pA+pB-pAB)\n        \n        EX2  += 2 * (P[i]*pre[i-2] + p_) % mod\n\nEX    = sum(P) % mod\nEX2  += EX\nans   = (EX2 + 2*EX + 1) % mod\nprint(ans)", "difficulty": 12, "public_tests": {"input": ["3\n1 1 1\n1 2 3\n", "3\n3 4 5\n4 5 6\n"], "output": ["166666673\n", "500000010\n"]}, "private_tests": {"input": ["10\n9 10 10 1 3 3 3 9 4 7\n10 10 10 8 5 9 4 9 9 7\n", "10\n10 6 9 1 3 7 8 5 7 3\n10 6 10 5 8 7 9 8 10 4\n", "10\n7 4 3 9 2 6 4 7 5 9\n7 5 7 10 8 6 4 7 9 9\n", "10\n3 6 3 10 2 3 3 4 2 9\n3 9 6 10 8 9 5 8 10 10\n", "10\n7 1 9 1 9 5 5 4 7 1\n8 3 9 2 10 5 9 8 10 2\n", "10\n9 6 7 2 10 3 8 7 3 3\n10 8 10 4 10 5 10 7 10 4\n", "10\n8 1 6 5 8 1 4 1 9 1\n10 2 10 6 10 1 9 3 10 6\n", "1\n1\n1000000000\n", "10\n8 1 8 3 7 3 9 8 7 2\n10 1 10 6 10 4 10 8 10 3\n", "10\n9 3 8 4 3 9 2 5 5 9\n10 9 9 4 6 10 4 5 5 10\n", "10\n10 1 9 3 9 4 10 3 8 5\n10 1 10 7 10 4 10 4 10 7\n", "10\n1 9 4 3 7 6 4 2 9 1\n4 9 7 6 8 10 7 8 9 2\n", "10\n10 7 8 3 7 3 3 6 1 4\n10 9 9 6 7 10 3 10 8 4\n", "5\n1 1 2 2 3\n1 2 2 3 3\n", "10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n", "5\n1 1 1 1 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n"], "output": ["35714347\n", "279166759\n", "377142946\n", "615806970\n", "940000098\n", "166666760\n", "700000103\n", "1\n", "250000097\n", "285714361\n", "100\n", "525000092\n", "116666753\n", "9\n", "1\n", "530612279\n"]}, "generated_tests": {"input": ["10\n9 10 10 1 3 3 3 5 4 7\n10 10 10 8 5 9 4 9 9 7\n", "10\n10 6 9 1 3 7 8 5 7 3\n10 6 10 3 8 7 9 8 10 4\n", "10\n7 4 3 9 2 6 4 7 5 9\n7 5 7 10 8 6 4 7 13 9\n", "10\n3 6 3 10 2 3 3 4 2 9\n3 9 6 10 10 9 5 8 10 10\n", "10\n7 1 9 1 9 5 5 4 7 1\n8 3 9 2 10 7 9 8 10 2\n", "10\n9 6 7 2 10 3 8 7 3 4\n10 8 10 4 10 5 10 7 10 4\n", "10\n8 1 6 5 8 1 7 1 9 1\n10 2 10 6 10 1 9 3 10 6\n", "10\n8 1 8 3 7 3 9 8 7 2\n10 1 10 6 10 4 10 14 10 3\n", "10\n9 3 8 4 3 9 2 5 5 9\n9 9 9 4 6 10 4 5 5 10\n", "10\n10 1 9 3 9 4 10 3 8 5\n10 1 10 7 12 4 10 4 10 7\n", "10\n10 7 8 3 7 3 3 9 1 4\n10 9 9 6 7 10 3 10 8 4\n", "5\n1 1 2 2 3\n2 2 2 3 3\n", "3\n1 1 1\n1 4 3\n", "10\n9 10 10 1 3 3 3 5 4 7\n17 10 10 8 5 9 4 9 9 7\n", "10\n10 6 9 1 3 7 8 5 6 3\n10 6 10 3 8 7 9 8 10 4\n", "10\n7 1 3 9 2 6 4 7 5 9\n7 5 7 10 8 6 4 7 13 9\n", "10\n3 6 3 10 2 3 1 4 2 9\n3 9 6 10 10 9 5 8 10 10\n", "10\n10 1 9 3 9 4 10 3 8 5\n10 1 10 14 12 4 10 4 10 7\n", "10\n10 7 8 3 7 3 3 9 1 4\n10 9 13 6 7 10 3 10 8 4\n", "5\n2 1 2 2 3\n2 2 2 3 3\n", "10\n9 10 10 1 3 5 3 5 4 7\n17 10 10 8 5 9 4 9 9 7\n", "10\n10 6 9 1 3 7 8 5 6 3\n10 6 10 3 8 7 10 8 10 4\n", "10\n3 6 3 10 2 3 1 1 2 9\n3 9 6 10 10 9 5 8 10 10\n", "10\n10 7 6 3 7 3 3 9 1 4\n10 9 13 6 7 10 3 10 8 4\n", "5\n2 1 2 2 3\n2 3 2 3 3\n", "10\n9 10 10 1 3 5 3 5 4 7\n17 10 10 7 5 9 4 9 9 7\n", "10\n3 6 3 10 2 3 1 1 2 9\n3 9 6 10 10 9 5 8 8 10\n", "10\n7 1 9 1 9 5 5 4 7 1\n8 3 9 2 9 5 10 8 10 2\n", "10\n10 1 9 3 9 4 1 3 8 5\n10 2 10 14 12 4 10 4 10 7\n", "10\n9 10 10 1 3 5 3 5 4 7\n34 10 10 7 5 9 4 9 9 7\n", "10\n3 6 3 10 2 3 1 1 2 9\n3 9 6 10 10 9 9 8 8 10\n", "10\n7 1 9 1 9 4 5 4 7 1\n8 3 9 2 9 5 10 8 10 2\n", "10\n10 1 9 3 9 4 1 3 8 5\n10 2 10 14 12 4 10 7 10 7\n", "5\n2 2 2 2 1\n2 3 2 3 3\n", "10\n9 10 10 1 3 5 3 5 4 7\n40 10 10 7 5 9 4 9 9 7\n", "10\n10 1 9 3 9 4 1 3 8 5\n10 2 10 14 11 4 10 7 10 7\n", "10\n9 10 10 1 3 5 4 5 4 2\n40 10 10 7 5 9 4 9 9 7\n", "10\n9 10 10 1 3 5 4 5 4 1\n40 10 10 7 5 9 4 9 9 7\n", "10\n9 10 10 1 3 5 3 5 4 1\n40 10 10 7 5 9 4 9 9 10\n", "10\n9 10 10 1 3 3 3 9 4 7\n10 10 10 15 5 9 4 9 9 7\n", "10\n10 6 9 1 3 7 8 5 7 1\n10 6 10 5 8 7 9 8 10 4\n", "10\n7 4 5 9 2 6 4 7 5 9\n7 5 7 10 8 6 4 7 9 9\n", "10\n7 1 9 1 9 5 5 4 7 1\n8 3 9 2 9 7 9 8 10 2\n", "10\n7 1 9 1 9 5 5 4 7 1\n8 3 9 2 9 5 9 8 10 2\n", "10\n10 1 9 3 9 4 10 3 8 5\n10 2 10 14 12 4 10 4 10 7\n", "5\n2 2 2 2 3\n2 3 2 3 3\n", "10\n9 10 10 1 3 5 4 5 4 7\n40 10 10 7 5 9 4 9 9 7\n", "10\n9 10 10 1 3 5 3 5 4 1\n40 10 10 7 5 9 4 9 9 7\n"], "output": ["502381017\n", "701388985\n", "73015963\n", "448434833\n", "940000098\n", "166666760\n", "700000103\n", "321428669\n", "178571502\n", "100\n", "354166756\n", "500000013\n", "666666678\n", "201455095\n", "325000093\n", "494603269\n", "433567110\n", "875000103\n", "409722316\n", "10\n", "513888963\n", "814814912\n", "35251410\n", "273437592\n", "12\n", "28571499\n", "452083425\n", "733333431\n", "441666763\n", "15506787\n", "811811161\n", "466666764\n", "21666760\n", "500000015\n", "749504045\n", "35555649\n", "917195846\n", "712726835\n", "397400869\n", "912698480\n", "279166759\n", "414285804\n", "940000098\n", "940000098\n", "875000103\n", "10\n", "749504045\n", "712726835\n"]}, "short_description": "1. One-sentence summary:  \n   Compute a weighted sum of pairwise and triple-wise interaction probabilities over adjacent segments in two aligned sequences of intervals, all under modular arithmetic.\n\n2. Core algorithmic approach:  \n   - Use modular arithmetic with fast exponentiation for computing inverses (Fermat\u2019s little theorem).  \n   - Perform a single pass (O(n)) over the sequences, maintaining prefix sums of pairwise probabilities and accumulating contributions from overlapping triples.\n\n3. Reusable components:  \n   a. Modular exponentiation / modular inverse function (pow_ and reverse).  \n   b. Sliding\u2010window probability evaluator for adjacent pairs or triples (prob).  \n   c. Prefix\u2010sum accumulation to reuse partial sums of computed probabilities."}
{"name": "1172_C2. Nauuo and Pictures (hard version)", "description": "The only difference between easy and hard versions is constraints.\n\nNauuo is a girl who loves random picture websites.\n\nOne day she made a random picture website by herself which includes n pictures.\n\nWhen Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The i-th picture has a non-negative weight w_i, and the probability of the i-th picture being displayed is \\frac{w_i}{\u2211_{j=1}^nw_j}. That is to say, the probability of a picture to be displayed is proportional to its weight.\n\nHowever, Nauuo discovered that some pictures she does not like were displayed too often. \n\nTo solve this problem, she came up with a great idea: when she saw a picture she likes, she would add 1 to its weight; otherwise, she would subtract 1 from its weight.\n\nNauuo will visit the website m times. She wants to know the expected weight of each picture after all the m visits modulo 998244353. Can you help her?\n\nThe expected weight of the i-th picture can be denoted by \\frac {q_i} {p_i} where \\gcd(p_i,q_i)=1, you need to print an integer r_i satisfying 0\u2264 r_i<998244353 and r_i\u22c5 p_i\u2261 q_i\\pmod{998244353}. It can be proved that such r_i exists and is unique.\n\nInput\n\nThe first line contains two integers n and m (1\u2264 n\u2264 2\u22c5 10^5, 1\u2264 m\u2264 3000) \u2014 the number of pictures and the number of visits to the website.\n\nThe second line contains n integers a_1,a_2,\u2026,a_n (a_i is either 0 or 1) \u2014 if a_i=0 , Nauuo does not like the i-th picture; otherwise Nauuo likes the i-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\n\nThe third line contains n positive integers w_1,w_2,\u2026,w_n (w_i \u2265 1) \u2014 the initial weights of the pictures. It is guaranteed that the sum of all the initial weights does not exceed 998244352-m.\n\nOutput\n\nThe output contains n integers r_1,r_2,\u2026,r_n \u2014 the expected weights modulo 998244353.\n\nExamples\n\nInput\n\n\n2 1\n0 1\n2 1\n\n\nOutput\n\n\n332748119\n332748119\n\n\nInput\n\n\n1 2\n1\n1\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n3 3\n0 1 1\n4 3 5\n\n\nOutput\n\n\n160955686\n185138929\n974061117\n\nNote\n\nIn the first example, if the only visit shows the first picture with a probability of \\frac 2 3, the final weights are (1,1); if the only visit shows the second picture with a probability of \\frac1 3, the final weights are (2,2).\n\nSo, both expected weights are \\frac2 3\u22c5 1+\\frac 1 3\u22c5 2=\\frac4 3 .\n\nBecause 332748119\u22c5 3\u2261 4\\pmod{998244353}, you need to print 332748119 instead of \\frac4 3 or 1.3333333333.\n\nIn the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, w_1 will be increased by 1.\n\nSo, the expected weight is 1+2=3.\n\nNauuo is very naughty so she didn't give you any hint of the third example.", "solution": "P = 998244353\nN, M = map(int, input().split())\nA = [int(a) for a in input().split()]\nB = [int(a) for a in input().split()]\nli = sum([A[i]*B[i] for i in range(N)])\ndi = sum([(A[i]^1)*B[i] for i in range(N)])\nX = [1]\nSU = li+di\nPO = [0] * (5*M+10)\nfor i in range(-M-5, 2*M+5):\n    PO[i] = pow((SU+i)%P, P-2, P)\n\ndef calc(L):\n    su = sum(L)\n    pl = 0\n    pd = 0\n    RE = []\n    for i in range(len(L)):\n        a = li + i\n        b = di - (len(L) - 1 - i)\n        pd = b * L[i] * PO[a+b-SU]\n        RE.append((pl+pd)%P)\n        pl = a * L[i] * PO[a+b-SU]\n    RE.append(pl%P)\n    return RE\n\nfor i in range(M):\n    X = calc(X)\nne = 0\npo = 0\nfor i in range(M+1):\n    po = (po + X[i] * (li + i)) % P\n    ne = (ne + X[i] * (di - M + i)) % P\ninvli = pow(li, P-2, P)\ninvdi = pow(di, P-2, P)\nfor i in range(N):\n    print(po * B[i] * invli % P if A[i] else ne * B[i] * invdi % P)\n", "difficulty": 9, "public_tests": {"input": ["2 1\n0 1\n2 1\n", "3 3\n0 1 1\n4 3 5\n", "1 2\n1\n1\n"], "output": ["332748119\n332748119\n", "160955686\n185138929\n974061117\n", "3\n"]}, "private_tests": {"input": ["20 30\n1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 1 3 1 4 1 5 1 1 2 3 1 1 3 3 2 2 1 2\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n126679203 179924771 16639504 67055540 14134870 36407782 15024189 39367944 121531542 5400023 5834434 8539193 3686913 11287136 36370086 71808281 138206490 59846864 19052959 21446598\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n34095514 37349809 60555988 40280455 19504485 77297461 41415742 66290058 20631093 185280391 7151718 64927972 15611855 4317891 24600598 24588269 60808977 9108470 13217752 191209824\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 3 2 1 3 2 1 1 2 1 1 2 2 4 2 1 5 2 3\n", "20 30\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\n1 1 3 2 3 1 2 2 3 2 2 2 2 2 2 3 3 1 1 2\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0\n9380933 34450681 12329733 7732927 73910078 16165679 149467043 56914401 21809098 36934833 71019254 168559440 12033996 40465391 7156881 3312348 37150678 130625432 42709585 66115911\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\n144831196 28660251 62050800 52660762 23189000 12771861 73096012 25119113 119648684 16011144 51600638 74708999 6312006 26945863 68746869 58112898 5070 19157938 74351320 60263898\n", "5 5\n0 1 0 0 1\n2 4 1 2 1\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803\n", "20 30\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n3 4 1 2 1 1 1 2 5 2 1 2 3 1 1 2 3 2 1 2\n", "20 20\n0 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 1 1 1 0\n109 1 24 122 136 42 25 112 110 15 26 48 35 10 86 13 41 6 24 15\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n61 849 320 1007 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 62 2521\n", "20 30\n0 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0\n244 1901 938 1350 1010 763 318 2158 1645 534 1356 563 295 1449 2306 224 1302 195 639 810\n", "20 30\n0 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1\n1 2 2 2 2 2 1 1 2 1 4 1 2 5 3 4 1 1 2 1\n", "100 3000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n10 8 1 9 7 5 12 9 15 7 16 5 17 5 17 21 11 3 4 4 30 17 3 84 12 30 2 8 2 2 22 24 15 11 15 13 7 17 1 12 8 4 3 6 5 15 1 3 4 2 27 3 11 11 3 3 3 5 14 2 5 13 6 2 6 5 6 19 3 16 4 12 11 2 2 3 25 14 6 11 22 4 10 32 9 19 14 2 2 3 4 3 2 5 18 14 2 7 3 8\n", "20 30\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n128 574 205 490 611 1294 283 1690 1466 1896 272 19 1020 5032 357 1500 36 1749 1202 176\n", "20 30\n0 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1\n66166717 200301718 6725634 95379617 42880832 48874211 64912554 36809296 13248978 58406666 53142218 45080678 19902257 58554006 23570140 14484661 7589423 78746789 11072716 52395211\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n765 451 7275 385 1686 78 554 114 1980 394 776 232 627 760 782 7 486 32 1100 1516\n", "10 3000\n1 1 1 1 1 0 0 0 1 1\n6 22 5 2 4 15 4 7 31 4\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\n779 1317 1275 234 857 1531 785 265 679 767 1994 11 918 1146 1807 71 813 245 3926 580\n"], "output": ["902255482\n806266611\n902255482\n710277740\n902255482\n537377994\n902255482\n518299998\n902255482\n902255482\n806266611\n710277740\n902255482\n902255482\n710277740\n710277740\n806266611\n806266611\n902255482\n806266611\n", "615913610\n488825486\n773371096\n742795989\n193664548\n323188752\n32686082\n709701410\n293733249\n161181348\n193396792\n354491196\n708550409\n644392716\n323187536\n646345011\n487479735\n1930544\n322628919\n966734748\n", "313283482\n21804622\n682197550\n361027027\n756362680\n151917509\n716108102\n131732975\n237068086\n731869119\n190595295\n847684643\n847454143\n501579235\n129856516\n246699402\n205385635\n639100445\n614421017\n227076269\n", "249561090\n249561090\n748683270\n499122180\n249561090\n748683270\n499122180\n249561090\n249561090\n499122180\n249561090\n249561090\n499122180\n499122180\n7\n499122180\n249561090\n249561097\n499122180\n748683270\n", "76898501\n989279651\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n", "550803098\n550803098\n654164941\n103361843\n654164941\n550803098\n103361843\n103361843\n654164941\n103361843\n103361843\n103361843\n103361843\n103361843\n276551708\n654164941\n654164941\n138275854\n550803098\n103361843\n", "813231583\n458087744\n445793615\n651101155\n484645642\n506668954\n896602699\n556862659\n145127201\n302005399\n558418033\n213871822\n57299634\n564466143\n767349204\n290138481\n12657688\n925337836\n827843024\n119362169\n", "132556548\n711988928\n6999755\n208709864\n320161276\n865416376\n320896979\n458941660\n671806481\n158009043\n351362956\n78248147\n927871852\n882014191\n988190329\n830735503\n1958329\n787106839\n942059547\n341315444\n", "665717847\n333191345\n831981100\n665717847\n831981101\n", "504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n", "441078046\n920852179\n479774133\n959548266\n479774133\n479774133\n479774133\n959548266\n402381959\n263018694\n479774133\n959548266\n441078046\n479774133\n479774133\n959548266\n441078046\n959548266\n479774133\n959548266\n", "217595927\n149660176\n322657182\n290143118\n388896876\n296261274\n86540143\n507489163\n979723241\n248413934\n896431517\n195977977\n246884395\n633562669\n891842900\n947337935\n146601098\n897961056\n597111165\n451221827\n", "514012356\n393871659\n166092575\n569465276\n74319433\n306884170\n254628439\n656312237\n485609669\n216694535\n825782618\n110704962\n294216114\n131255421\n733108087\n613768340\n14181299\n610566194\n624888021\n887363731\n", "300071414\n595185476\n40756239\n113904636\n440148868\n947268885\n456535325\n542868956\n183161324\n427608407\n61171180\n375813928\n43680359\n55509680\n30410255\n360521133\n535772284\n722568686\n663107799\n390646234\n", "297511613\n595023226\n756311680\n756311680\n756311680\n595023226\n297511613\n378155840\n595023226\n297511613\n514379007\n297511613\n595023226\n892534847\n136223167\n514379007\n378155840\n297511613\n595023226\n378155840\n", "23677346\n418239618\n800963217\n220958482\n615520754\n11838673\n627359427\n220958482\n35516019\n615520754\n836479236\n11838673\n639198100\n11838673\n639198100\n848317909\n824640563\n406400945\n209119809\n209119809\n71032038\n639198100\n406400945\n398538577\n627359427\n71032038\n603682081\n418239618\n19778681\n603682081\n651036773\n256474501\n35516019\n824640563\n35516019\n430078291\n615520754\n639198100\n800963217\n627359427\n418239618\n209119809\n406400945\n812801890\n11838673\n35516019\n800963217\n406400945\n209119809\n603682081\n662875446\n406400945\n824640563\n824640563\n406400945\n406400945\n406400945\n11838673\n232797155\n603682081\n11838673\n430078291\n812801890\n603682081\n812801890\n11838673\n812801890\n244635828\n406400945\n836479236\n209119809\n118672086\n824640563\n603682081\n603682081\n406400945\n59193365\n232797155\n812801890\n824640563\n651036773\n209119809\n23677346\n674714119\n220958482\n244635828\n232797155\n603682081\n603682081\n406400945\n209119809\n406400945\n603682081\n11838673\n441916964\n232797155\n603682081\n615520754\n406400945\n418239618\n", "389864218\n157345415\n537589523\n962131647\n753565149\n104281847\n378440811\n873692367\n690552162\n658861420\n578900375\n198248582\n923070965\n228091231\n572635926\n887695253\n795942304\n70748620\n510359933\n785624388\n", "823107880\n742699237\n987770596\n549924308\n730188349\n913535291\n936423447\n122869154\n581668441\n749452306\n615454312\n176148736\n874336841\n897418997\n235568492\n24727530\n143875067\n15270097\n200154604\n356406452\n", "491636110\n498623506\n486651408\n182179980\n6989399\n10980766\n871467875\n92836839\n509106603\n951327263\n211628580\n83852758\n11480438\n618912260\n58897200\n820057743\n605934809\n183676993\n948333237\n341401087\n", "561258918\n61460660\n467715765\n187086306\n374172612\n538110090\n143496024\n251118042\n903349037\n374172612\n", "552990868\n90431251\n712871250\n952916426\n537881559\n151361542\n321464532\n89445141\n86037605\n17799187\n586392419\n241031286\n40642277\n699465709\n481837969\n920500985\n572000768\n195703359\n903238702\n911489090\n"]}, "generated_tests": {"input": ["20 30\n1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n126679203 179924771 16639504 67055540 14134870 36407782 15024189 39367944 121531542 5400023 5834434 8539193 3686913 11287136 36370086 71808281 138206490 59846864 19052959 21446598\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n34095514 37349809 60555988 40280455 19504485 77297461 41415742 66290058 20631093 185280391 7151718 57616123 15611855 4317891 24600598 24588269 60808977 9108470 13217752 191209824\n", "20 30\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n26210661 26210661 26210661 26210661 26210661 26210661 25627661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\n1 1 3 2 3 1 2 2 3 2 2 2 2 2 2 3 3 1 1 2\n", "20 30\n1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\n144831196 28660251 62050800 52660762 23189000 12771861 73096012 25119113 119648684 16011144 51600638 74708999 6312006 26945863 68746869 58112898 5070 19157938 74351320 60263898\n", "20 30\n0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n3 4 1 2 1 1 1 2 5 2 1 2 3 1 1 2 3 2 1 2\n", "20 20\n0 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 1 0 1 0\n109 1 24 122 136 42 25 112 110 15 26 48 35 10 86 13 41 6 24 15\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n61 849 320 1007 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 101 2521\n", "20 30\n0 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0\n244 1901 938 1350 1010 763 318 3400 1645 534 1356 563 295 1449 2306 224 1302 195 639 810\n", "20 30\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n128 633 205 490 611 1294 283 1690 1466 1896 272 19 1020 5032 357 1500 36 1749 1202 176\n", "10 3000\n1 1 1 1 1 0 0 0 1 1\n6 22 5 2 4 15 4 7 31 2\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\n779 1317 1275 234 857 1531 785 265 679 767 1994 11 918 1146 1807 71 813 245 3926 489\n", "3 3\n0 1 1\n0 3 5\n", "20 30\n1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n126679203 179924771 16639504 67055540 14134870 36407782 15024189 39367944 121531542 5400023 5834434 8539193 3686913 11287136 36370086 71808281 138206490 59846864 19052959 21446598\n", "20 33\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n26210661 26210661 26210661 26210661 26210661 26210661 25627661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\n1 1 3 2 3 1 2 2 3 2 2 2 2 2 2 3 3 0 1 2\n", "20 30\n0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n3 4 1 2 1 1 1 2 5 2 1 2 3 1 1 2 3 2 1 4\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n61 849 320 51 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 101 2521\n", "20 30\n0 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0\n244 1901 938 1350 1010 763 480 3400 1645 534 1356 563 295 1449 2306 224 1302 195 639 810\n", "10 3000\n1 1 1 1 1 0 0 0 1 1\n10 22 5 2 4 15 4 7 31 2\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\n779 1317 1275 234 857 1531 785 265 679 767 678 11 918 1146 1807 71 813 245 3926 489\n", "3 5\n0 1 1\n0 3 5\n", "20 30\n1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n126679203 179924771 16639504 67055540 14134870 36407782 15024189 39367944 121531542 5400023 5834434 8539193 3686913 11287136 32598365 71808281 138206490 59846864 19052959 21446598\n", "20 33\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n26210661 26210661 26210661 26210661 26210661 26210661 25627661 26210661 26210661 26210661 26210661 26210661 26210661 48133331 26210661 26210661 26210661 26210661 26210661 26210661\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\n1 1 4 2 3 1 2 2 3 2 2 2 2 2 2 3 3 0 1 2\n", "20 30\n0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n3 4 1 2 1 1 1 2 5 2 1 2 3 1 1 2 3 2 1 4\n", "20 30\n1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n61 849 320 51 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 101 2521\n", "10 3000\n1 1 1 1 1 0 0 0 1 1\n10 22 5 2 4 15 1 7 31 2\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\n779 1317 1275 234 857 1531 785 265 679 767 678 16 918 1146 1807 71 813 245 3926 489\n", "20 33\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n26210661 26210661 26210661 26210661 26210661 26210661 25627661 26210661 26210661 26210661 26210661 26210661 46754954 48133331 26210661 26210661 26210661 26210661 26210661 26210661\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\n1 1 4 2 2 1 2 2 3 2 2 2 2 2 2 3 3 0 1 2\n", "20 30\n0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n3 4 1 2 1 1 1 2 5 2 2 2 3 1 1 2 3 2 1 4\n", "20 30\n1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n98 849 320 51 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 101 2521\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\n1078 1317 1275 234 857 1531 785 265 679 767 678 16 918 1146 1807 71 813 245 3926 489\n", "20 33\n0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n26210661 26210661 26210661 26210661 26210661 26210661 25627661 26210661 26210661 26210661 26210661 26210661 46754954 48133331 26210661 26210661 26210661 26210661 26210661 26210661\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\n1 1 6 2 2 1 2 2 3 2 2 2 2 2 2 3 3 0 1 2\n", "20 30\n1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n98 849 320 51 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 101 2521\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\n1078 1317 1275 234 857 1531 785 265 679 767 678 16 918 1146 1807 71 813 245 6580 489\n", "20 33\n0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n23828771 26210661 26210661 26210661 26210661 26210661 25627661 26210661 26210661 26210661 26210661 26210661 46754954 48133331 26210661 26210661 26210661 26210661 26210661 26210661\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0\n1 1 6 2 2 1 2 2 3 2 2 2 2 2 2 3 3 0 1 2\n", "20 30\n1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n98 849 320 51 624 441 1332 7535 1176 718 419 634 657 914 858 882 1019 1567 101 2521\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\n1078 1317 1275 234 857 1531 785 265 679 767 678 16 918 1146 1137 71 813 245 6580 489\n"], "output": ["517694863\n749171159\n848795893\n402996774\n552786743\n104465235\n496722067\n561247817\n398125323\n862608150\n621726993\n742875176\n420127946\n340704006\n302955263\n557720200\n850777591\n586778333\n442184121\n756339135\n", "944384526\n844113204\n366742999\n654835879\n836240630\n573471891\n406204176\n325731272\n869012484\n793630460\n703064603\n952146761\n750373209\n291011206\n508845031\n553992757\n386501735\n307355742\n344355590\n352178741\n", "788577720\n529765198\n788577720\n788577720\n788577720\n788577720\n781996048\n788577720\n788577720\n788577720\n788577720\n788577720\n788577720\n788577720\n788577720\n788577720\n788577720\n788577720\n788577720\n788577720\n", "282385835\n308666302\n925998906\n617332604\n925998906\n308666302\n617332604\n617332604\n925998906\n617332604\n617332604\n617332604\n617332604\n617332604\n564771670\n925998906\n925998906\n282385835\n308666302\n617332604\n", "478734738\n873255727\n868311646\n116886948\n774510053\n567873185\n401956071\n799293239\n508304568\n603959904\n61501352\n254394849\n84757745\n575510461\n404774169\n14295641\n803845498\n657516840\n719283637\n153121780\n", "654164941\n206723686\n550803098\n103361843\n138275854\n550803098\n550803098\n103361843\n757526784\n276551708\n550803098\n103361843\n654164941\n550803098\n550803098\n103361843\n654164941\n103361843\n550803098\n103361843\n", "601865832\n264434261\n489690915\n317160546\n26262788\n125551079\n385314159\n288735564\n497489076\n971780856\n885824668\n713912292\n270999958\n952721146\n779970680\n442912334\n859361171\n371983817\n356956146\n430837366\n", "914075906\n770235159\n988730738\n172830227\n231009539\n657584474\n397131482\n522393634\n89818009\n633751683\n627043399\n698639279\n775943328\n815095410\n763517221\n316924595\n733985915\n405742489\n730082962\n96623800\n", "300773374\n971803165\n468935957\n323597956\n79422354\n718247520\n784743405\n329044272\n623536583\n281862710\n316162886\n633335069\n944585424\n910640686\n469935940\n55172171\n383078516\n641306371\n550393498\n360247188\n", "901100106\n510036910\n919504160\n174034560\n74404105\n31774299\n385726510\n885454318\n805895662\n245588187\n667032284\n149354615\n504882359\n361165018\n126796608\n390152521\n440605221\n193377819\n569523767\n490329381\n", "147827914\n209287567\n455938046\n382024089\n764048178\n178753964\n580064712\n16868893\n431029438\n382024089\n", "391870934\n881635179\n617033117\n190754463\n455455755\n185821534\n857490237\n766339548\n950252159\n458876681\n345688433\n687261330\n520388140\n89539456\n641178059\n352232595\n701143494\n878015793\n538451049\n513809957\n", "0\n873463813\n124780551\n", "936394128\n834544098\n435800009\n842908348\n162193520\n37578531\n333256299\n442747776\n418774894\n432067310\n549129244\n247726778\n851336174\n837067303\n830094792\n296104325\n961440966\n892316785\n623964751\n313700649\n", "839219963\n126068588\n839219963\n839219963\n839219963\n839219963\n464983414\n839219963\n839219963\n839219963\n839219963\n839219963\n839219963\n839219963\n839219963\n839219963\n839219963\n839219963\n839219963\n839219963\n", "566864730\n130425757\n391277271\n260851514\n391277271\n130425757\n260851514\n260851514\n391277271\n260851514\n260851514\n260851514\n260851514\n260851514\n135485107\n391277271\n391277271\n0\n130425757\n260851514\n", "220056319\n626156543\n406100224\n812200448\n288081145\n406100224\n406100224\n812200448\n34012414\n576162290\n406100224\n812200448\n220056319\n406100224\n406100224\n812200448\n220056319\n812200448\n406100224\n626156543\n", "805183370\n531894571\n410944643\n187155333\n352132095\n32896260\n425317472\n538296504\n87723360\n990686342\n10882843\n271388707\n884274397\n7062549\n671971437\n65792520\n157501328\n524336560\n781682746\n208425557\n", "437102512\n392132172\n371163784\n277948547\n548089211\n462481229\n794415148\n968633651\n630764355\n334752458\n61788437\n680107758\n446640795\n975642525\n774990042\n914221737\n10740721\n447511698\n882872404\n92770121\n", "738182303\n426107843\n868213328\n946231943\n894219533\n856214881\n694171333\n466116568\n192051998\n946231943\n", "624605444\n711267829\n704502364\n37693305\n637169879\n745739484\n625571939\n541809039\n608497194\n622672454\n109213935\n500894084\n351505518\n184600545\n790198254\n510559034\n630082249\n538587389\n632409895\n577891519\n", "0\n124780549\n873463817\n", "869764575\n408070519\n766348330\n456186238\n435759596\n140284373\n183541922\n41657450\n905450148\n187423251\n788380044\n58004972\n134132696\n150837458\n24098047\n36383352\n957352069\n20279248\n565206300\n905780795\n", "717526457\n185839349\n717526457\n717526457\n717526457\n717526457\n139580951\n717526457\n717526457\n717526457\n717526457\n717526457\n717526457\n320372400\n717526457\n717526457\n717526457\n717526457\n717526457\n717526457\n", "138275854\n550803098\n206723686\n103361843\n654164941\n550803098\n103361843\n103361843\n654164941\n103361843\n103361843\n103361843\n103361843\n103361843\n276551708\n654164941\n654164941\n0\n550803098\n103361843\n", "514504026\n686005368\n171501342\n941028896\n470514448\n171501342\n171501342\n343002684\n857506710\n941028896\n171501342\n343002684\n514504026\n171501342\n171501342\n343002684\n514504026\n343002684\n171501342\n686005368\n", "858741462\n506434639\n422512629\n619491858\n536713416\n541721540\n149039799\n811710753\n779094538\n30875712\n157049246\n830864119\n53278191\n826221037\n737980947\n85198727\n574918793\n537310351\n404753232\n792442746\n", "75972856\n766086895\n37986428\n614141183\n230038013\n680372620\n710854410\n983003458\n35866983\n614141183\n", "450559774\n951383038\n500370355\n373689906\n575123076\n397273319\n229777485\n64851707\n802783414\n892124352\n7710168\n742239700\n616237895\n755089980\n223731555\n548516698\n530452607\n135296435\n945716318\n473763977\n", "396907859\n142125813\n396907859\n396907859\n396907859\n396907859\n515717869\n396907859\n396907859\n396907859\n396907859\n396907859\n254190601\n523077898\n396907859\n396907859\n396907859\n396907859\n396907859\n396907859\n", "566864730\n130425757\n521703028\n260851514\n260851514\n130425757\n260851514\n260851514\n391277271\n260851514\n260851514\n260851514\n260851514\n260851514\n135485107\n391277271\n391277271\n0\n130425757\n260851514\n", "256372653\n341830204\n85457551\n300710421\n649477387\n85457551\n85457551\n170915102\n427287755\n300710421\n170915102\n170915102\n256372653\n85457551\n85457551\n170915102\n256372653\n170915102\n85457551\n341830204\n", "201639001\n283679302\n454956072\n496762474\n957948136\n302556922\n995334732\n434310372\n474070341\n671422163\n421015345\n851469500\n410003400\n251311710\n318934334\n605113844\n275813627\n955101465\n318288272\n265038331\n", "499833164\n132825780\n126315973\n321481597\n584417793\n213530242\n715864460\n445125068\n937112174\n42862\n675512229\n192621708\n576247081\n320231070\n541521646\n605197741\n54708096\n204347933\n846189186\n147095921\n", "103730670\n78873013\n103730670\n103730670\n103730670\n103730670\n691670518\n103730670\n103730670\n78873013\n103730670\n103730670\n891087045\n475015978\n103730670\n103730670\n103730670\n103730670\n103730670\n103730670\n", "391050036\n319837842\n920782699\n639675684\n639675684\n319837842\n639675684\n639675684\n959513526\n639675684\n639675684\n639675684\n639675684\n639675684\n782100072\n959513526\n959513526\n0\n319837842\n639675684\n", "779776430\n567687671\n222199959\n996599698\n625799979\n608812138\n188702119\n623231911\n292506564\n891619872\n175521068\n870726546\n234718825\n940370966\n735694427\n219379923\n467365447\n461063190\n809456586\n555745342\n", "611323652\n511650449\n474868432\n775353725\n156335232\n794134474\n378493018\n541057407\n761016667\n933154641\n736373182\n394295760\n362630583\n290591926\n608025863\n751443082\n70266245\n48187707\n438546114\n71731929\n", "412334498\n495308009\n669220974\n669220974\n669220974\n669220974\n927436129\n669220974\n669220974\n495308009\n669220974\n669220974\n573124765\n149943136\n669220974\n669220974\n669220974\n669220974\n669220974\n669220974\n", "618507002\n336661393\n23479652\n673322786\n673322786\n336661393\n673322786\n673322786\n11739826\n673322786\n673322786\n673322786\n673322786\n673322786\n238769651\n11739826\n11739826\n0\n618507002\n673322786\n", "415389157\n280934094\n7121772\n694921751\n281736164\n371678270\n878152076\n105305203\n325645818\n290496673\n396144757\n837661602\n675958772\n344770976\n886509402\n743356540\n908620256\n571430767\n114550299\n417969788\n", "204038033\n933599876\n951578767\n898076246\n465015304\n509245028\n495836260\n52935818\n873959674\n503541499\n708013684\n658647134\n605016041\n507677470\n12407913\n801477407\n151102215\n726993430\n843536371\n289796517\n"]}, "short_description": "1. One-sentence summary:  \nCompute how a probability distribution over \u201cstates\u201d evolves through M sequential random updates, then use the final distribution to calculate expected weighted outcomes for each of N items.\n\n2. Core algorithmic approach:  \nRepeated one-dimensional dynamic-programming transitions on the distribution (size grows by 1 each step), implemented with prefix/suffix accumulators to make each transition O(current_length) and relying on precomputed modular inverses for constant-time probability updates.\n\n3. Reusable components:  \n- Precomputation of modular inverses: building an array PO[i] = (base+i)^{-1} mod P for a contiguous range of bases.  \n- A transition function (calc) that takes a probability distribution L over k states and produces the next distribution over k+1 states using running prefix/suffix sums.  \n- The pattern of accumulating prefix contributions (pl) and suffix contributions (pd) in one pass to avoid nested loops in DP updates."}
