{"name": "1277_E. Two Fairs", "description": "There are n cities in Berland and some pairs of them are connected by two-way roads. It is guaranteed that you can pass from any city to any other, moving along the roads. Cities are numerated from 1 to n.\n\nTwo fairs are currently taking place in Berland \u2014 they are held in two different cities a and b (1 \u2264 a, b \u2264 n; a \u2260 b).\n\nFind the number of pairs of cities x and y (x \u2260 a, x \u2260 b, y \u2260 a, y \u2260 b) such that if you go from x to y you will have to go through both fairs (the order of visits doesn't matter). Formally, you need to find the number of pairs of cities x,y such that any path from x to y goes through a and b (in any order).\n\nPrint the required number of pairs. The order of two cities in a pair does not matter, that is, the pairs (x,y) and (y,x) must be taken into account only once.\n\nInput\n\nThe first line of the input contains an integer t (1 \u2264 t \u2264 4\u22c510^4) \u2014 the number of test cases in the input. Next, t test cases are specified.\n\nThe first line of each test case contains four integers n, m, a and b (4 \u2264 n \u2264 2\u22c510^5, n - 1 \u2264 m \u2264 5\u22c510^5, 1 \u2264 a,b \u2264 n, a \u2260 b) \u2014 numbers of cities and roads in Berland and numbers of two cities where fairs are held, respectively.\n\nThe following m lines contain descriptions of roads between cities. Each of road description contains a pair of integers u_i, v_i (1 \u2264 u_i, v_i \u2264 n, u_i \u2260 v_i) \u2014 numbers of cities connected by the road.\n\nEach road is bi-directional and connects two different cities. It is guaranteed that from any city you can pass to any other by roads. There can be more than one road between a pair of cities.\n\nThe sum of the values of n for all sets of input data in the test does not exceed 2\u22c510^5. The sum of the values of m for all sets of input data in the test does not exceed 5\u22c510^5.\n\nOutput\n\nPrint t integers \u2014 the answers to the given test cases in the order they are written in the input.\n\nExample\n\nInput\n\n\n3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 2 3\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n\n\nOutput\n\n\n4\n0\n1", "solution": "import sys\nimport threading\nfrom collections import deque\n\ndef func():\n    lines = sys.stdin.readlines()\n    nxt = 0\n    t = int(lines[nxt])\n    nxt += 1\n    ans = []\n    for _ in range(t):\n        n,m,a,b = map(int, lines[nxt].split())\n        nxt += 1\n        g = [[] for _ in range(n)]\n        for _ in range(m):\n            u,v = map(int, lines[nxt].split())\n            nxt += 1\n            g[u-1].append(v-1)\n            g[v-1].append(u-1)\n        a -= 1\n        b -= 1\n        sigs = [0]*n\n        sigs[a] = -1\n        sigs[b] = -1\n        cur_sig = 0\n        inv = {}\n        cnt = {}\n        for i in range(n):\n            if sigs[i]:\n                continue\n            cur_sig += 1\n            cnt[cur_sig] = 1\n            inv[cur_sig] = set()\n            sigs[i] = cur_sig\n            q = deque()\n            q.append(i)\n            while len(q):\n                node = q.popleft()\n                # if node == a:\n                #     inv[cur_sig].add(\"A\")\n                # if node == b:\n                #     inv[cur_sig].add(\"B\")\n                # if sigs[node]:\n                #     continue\n                # sigs[node] = cur_sig\n                # cnt[cur_sig] += 1\n                for v in g[node]:\n                    if v == a:\n                        inv[cur_sig].add(\"A\")\n                    if v == b:\n                        inv[cur_sig].add(\"B\")\n                    if sigs[v]:\n                        continue\n                    sigs[v] = cur_sig\n                    cnt[cur_sig] += 1\n                    q.append(v)\n        A = 0\n        B = 0\n        for k,v in inv.items():\n            if v == {\"A\"}:\n                A += cnt[k]\n            if v == {\"B\"}:\n                B += cnt[k]\n        ans.append(str(A*B))\n    print(\"\\n\".join(ans))\n            \n\nfunc()\n        \n        \n        \n            \n        \n        \n    \n        \n\n", "difficulty": 11, "public_tests": {"input": ["3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 2 3\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n"], "output": ["4\n0\n1\n"]}, "private_tests": {"input": [], "output": []}, "generated_tests": {"input": ["3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n3 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 4 5\n1 2\n4 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 1\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 6 5\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 1\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n2 5\n5 6\n6 7\n7 1\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n2 5\n5 6\n6 7\n7 1\n4 5 2 4\n1 2\n2 1\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n5 6\n6 4\n7 5\n4 5 2 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n2 3\n3 4\n4 1\n4 4\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n5 6\n5 7\n7 5\n4 5 1 4\n1 2\n2 3\n3 4\n4 1\n4 4\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 3\n4 5 2 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 1\n2 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n2 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n4 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n4 6\n6 5\n7 5\n4 5 2 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 2\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 1\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 1\n4 2\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n2 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 6\n4 5 2 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 7\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n2 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n4 7\n5 2\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n7 6\n6 7\n7 5\n4 5 1 4\n2 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n7 6\n6 7\n7 5\n4 5 1 4\n2 2\n2 2\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 6 5\n1 2\n4 3\n1 4\n2 5\n7 6\n6 7\n7 5\n4 5 1 4\n2 2\n2 2\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 7\n6 7\n7 5\n4 5 2 3\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n1 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 3\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n1 4\n2 5\n5 6\n6 4\n7 5\n4 5 2 4\n1 2\n2 3\n3 2\n4 2\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n5 6\n6 7\n5 5\n4 5 1 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 3\n2 3\n1 4\n2 5\n5 6\n6 7\n7 3\n4 5 2 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 4 5\n1 2\n4 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n3 3\n3 4\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 2\n", "3\n7 7 3 1\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 1\n4 2\n4 2\n4 3 2 1\n1 2\n2 3\n4 2\n", "3\n7 7 3 5\n1 3\n2 3\n1 4\n2 5\n5 6\n6 7\n7 3\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 4 5\n1 2\n4 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n2 2\n3 3\n3 4\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n2 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n2 3\n2 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 2\n", "3\n7 7 6 1\n1 2\n2 3\n1 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 4\n4 5 2 4\n1 2\n2 3\n3 1\n4 2\n4 2\n4 3 2 1\n1 2\n2 3\n4 2\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n2 3\n2 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 2\n", "3\n7 7 6 1\n1 2\n2 3\n1 4\n2 5\n5 6\n6 4\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 1 4\n1 2\n2 3\n2 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 2\n", "3\n7 7 6 1\n2 2\n2 3\n1 4\n2 5\n5 6\n6 4\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n6 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 1 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 1\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n2 4\n2 5\n5 6\n6 7\n7 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n2 4\n2 5\n5 6\n6 4\n7 5\n4 5 2 4\n1 2\n2 3\n3 2\n4 1\n4 2\n4 3 3 1\n1 2\n2 3\n4 1\n", "3\n7 7 3 5\n1 2\n4 3\n1 4\n2 5\n5 6\n5 7\n7 5\n4 5 1 4\n1 2\n2 3\n3 4\n4 1\n4 4\n4 3 3 1\n1 2\n4 3\n4 1\n", "3\n7 7 3 5\n1 2\n2 3\n3 4\n3 5\n5 6\n6 7\n1 5\n4 5 2 4\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n"], "output": ["4\n0\n1\n", "2\n0\n1\n", "0\n0\n1\n", "0\n0\n0\n", "6\n0\n1\n", "2\n0\n0\n", "4\n0\n0\n", "0\n0\n1\n", "0\n0\n1\n", "4\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "0\n0\n0\n", "0\n0\n0\n", "0\n0\n0\n", "0\n0\n0\n", "0\n0\n1\n", "4\n0\n1\n", "0\n0\n1\n", "0\n0\n0\n", "0\n0\n0\n", "0\n0\n1\n", "2\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "4\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "4\n0\n1\n", "2\n0\n1\n", "0\n0\n1\n", "0\n0\n0\n", "0\n0\n0\n", "0\n0\n1\n", "2\n0\n0\n", "2\n0\n0\n", "0\n0\n0\n", "4\n0\n0\n", "0\n0\n1\n", "2\n0\n0\n", "2\n0\n0\n", "0\n0\n0\n", "0\n0\n0\n", "4\n0\n0\n", "0\n0\n0\n", "0\n0\n0\n", "0\n0\n0\n", "0\n0\n1\n", "0\n0\n1\n", "0\n0\n1\n", "0\n0\n0\n", "0\n0\n0\n", "2\n0\n1\n"]}, "short_description": "1. One-sentence summary:\nThe solution partitions a graph\u2019s vertices (excluding two special nodes) into connected components, classifies each component by which of the two special nodes it is adjacent to, and computes the product of the total sizes of components adjacent exclusively to one special node with those adjacent exclusively to the other.\n\n2. Core algorithmic approach:\nBreadth-first search (BFS) to label connected components and track their adjacency to the two distinguished nodes.\n\n3. Reusable components:\n- BFS-based connected-component labeling: traverse unvisited nodes, assign a component ID, and count its size.\n- Adjacency-flag aggregation: during the BFS, inspect neighbors of each node to mark whether the component touches each special node.\n- Component-size aggregation by category: after traversal, accumulate sizes of components satisfying specific adjacency patterns (e.g., adjacent only to A or only to B)."}
{"name": "920_E. Connected Components?", "description": "You are given an undirected graph consisting of n vertices and <image> edges. Instead of giving you the edges that exist in the graph, we give you m unordered pairs (x, y) such that there is no edge between x and y, and if some pair of vertices is not listed in the input, then there is an edge between these vertices.\n\nYou have to find the number of connected components in the graph and the size of each component. A connected component is a set of vertices X such that for every two vertices from this set there exists at least one path in the graph connecting these vertices, but adding any other vertex to X violates this rule.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 200000, <image>).\n\nThen m lines follow, each containing a pair of integers x and y (1 \u2264 x, y \u2264 n, x \u2260 y) denoting that there is no edge between x and y. Each pair is listed at most once; (x, y) and (y, x) are considered the same (so they are never listed in the same test). If some pair of vertices is not listed in the input, then there exists an edge between those vertices. \n\nOutput\n\nFirstly print k \u2014 the number of connected components in this graph.\n\nThen print k integers \u2014 the sizes of components. You should output these integers in non-descending order.\n\nExample\n\nInput\n\n5 5\n1 2\n3 4\n3 2\n4 2\n2 5\n\n\nOutput\n\n2\n1 4 ", "solution": "n,m=map(int,input().split())\nnon=[{i} for i in range(n)]\nfor i in range(m):\n    u,v=map(int,input().split())\n    u,v=u-1,v-1\n    non[u].add(v)\n    non[v].add(u)\nvertex=set(range(n))\nans=[]\nwhile(vertex):\n    a=next(iter(vertex))\n    vertex.remove(a)\n    stk=[a]\n    cou=1\n    while(stk):\n        v=stk.pop()\n        s=vertex-non[v]\n        cou+=len(s)\n        stk.extend(s)\n        vertex&=non[v]\n    ans.append(cou)\nans.sort()\nprint(len(ans))\nprint(\" \".join(map(str,ans)))\n    ", "difficulty": 11, "public_tests": {"input": ["5 5\n1 2\n3 4\n3 2\n4 2\n2 5\n"], "output": ["2\n1 4 \n"]}, "private_tests": {"input": ["7 20\n4 6\n6 7\n4 5\n1 2\n2 4\n1 7\n3 5\n2 1\n6 2\n6 1\n7 3\n3 2\n3 6\n3 1\n3 4\n2 5\n1 6\n7 4\n6 3\n7 5\n", "8 23\n1 2\n1 4\n1 6\n1 8\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n3 4\n3 5\n3 6\n3 7\n3 8\n4 5\n4 6\n4 7\n5 6\n5 7\n5 8\n6 8\n7 8\n", "4 4\n2 1\n3 1\n1 4\n3 2\n", "8 18\n1 4\n1 6\n1 7\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n3 4\n3 8\n4 7\n5 6\n5 7\n5 8\n6 7\n6 8\n7 8\n", "10 34\n7 10\n2 3\n2 4\n2 5\n9 10\n2 7\n2 8\n2 10\n4 5\n4 6\n4 7\n4 8\n4 9\n6 7\n6 8\n6 9\n6 10\n1 2\n1 3\n1 5\n8 9\n1 6\n1 7\n1 8\n1 9\n1 10\n3 4\n3 5\n3 6\n3 8\n3 10\n5 6\n5 9\n5 10\n", "5 7\n1 2\n2 3\n3 4\n1 5\n2 5\n3 5\n4 5\n", "2 0\n", "8 23\n2 7\n7 5\n8 6\n8 2\n6 3\n3 5\n8 1\n8 4\n8 3\n3 4\n1 2\n2 6\n5 2\n6 4\n7 6\n6 5\n7 8\n7 1\n5 4\n3 7\n1 4\n3 1\n3 2\n", "2 1\n1 2\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n2 6\n3 5\n4 6\n5 6\n", "12 56\n9 5\n2 6\n9 8\n5 4\n1 11\n1 6\n4 1\n1 10\n10 3\n8 4\n5 1\n9 1\n5 10\n2 7\n11 5\n6 11\n5 8\n7 6\n3 2\n12 7\n8 6\n12 3\n1 2\n8 1\n2 11\n10 12\n4 6\n5 12\n2 4\n10 2\n7 3\n12 11\n7 10\n7 1\n9 2\n11 9\n9 10\n8 7\n11 3\n7 9\n5 7\n4 12\n3 5\n12 2\n4 10\n9 12\n5 2\n9 4\n11 8\n8 2\n3 6\n4 11\n8 10\n6 10\n3 9\n3 4\n", "12 58\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 10\n1 11\n1 12\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n4 5\n4 6\n4 8\n4 11\n4 12\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11\n6 7\n6 8\n6 9\n6 10\n6 11\n6 12\n7 8\n7 9\n7 10\n7 11\n7 12\n8 9\n8 10\n8 11\n9 10\n9 11\n9 12\n10 12\n", "4 3\n2 1\n3 1\n4 2\n", "3 1\n2 3\n", "6 10\n1 2\n1 3\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n3 6\n4 6\n", "11 49\n10 3\n6 4\n11 3\n7 6\n10 6\n6 1\n4 3\n10 2\n4 5\n9 2\n10 1\n5 7\n1 5\n9 7\n2 11\n8 6\n3 9\n2 5\n9 5\n6 5\n1 4\n11 9\n1 7\n8 10\n3 6\n3 7\n11 5\n6 9\n4 10\n8 7\n4 9\n8 2\n4 2\n8 11\n7 4\n9 10\n8 1\n10 7\n3 2\n5 8\n8 9\n1 3\n2 7\n10 11\n5 3\n10 5\n4 11\n1 11\n8 3\n", "5 4\n1 4\n2 3\n4 3\n4 2\n", "4 3\n1 2\n3 1\n4 3\n", "4 3\n1 3\n1 4\n2 3\n", "10 36\n7 8\n7 9\n2 3\n2 4\n2 5\n9 10\n2 7\n2 8\n2 9\n2 10\n4 5\n4 6\n4 7\n4 8\n4 10\n6 7\n6 9\n6 10\n1 2\n1 3\n1 4\n8 9\n1 5\n8 10\n1 7\n1 8\n1 9\n1 10\n3 4\n3 6\n3 7\n3 9\n5 6\n5 7\n5 9\n5 10\n", "8 15\n2 1\n4 5\n2 4\n3 4\n2 5\n3 5\n2 6\n3 6\n5 6\n4 6\n2 7\n3 8\n2 8\n3 7\n6 7\n"], "output": ["3\n1 2 4 \n", "3\n1 2 5 \n", "2\n1 3 \n", "1\n8 \n", "1\n10 \n", "2\n1 4 \n", "1\n2 \n", "3\n1 3 4 \n", "2\n1 1 \n", "1\n6 \n", "3\n1 4 7 \n", "4\n1 1 1 9 \n", "1\n4 \n", "1\n3 \n", "1\n6 \n", "5\n1 1 1 2 6 \n", "1\n5 \n", "1\n4 \n", "1\n4 \n", "2\n2 8 \n", "1\n8 \n"]}, "generated_tests": {"input": ["5 7\n2 2\n2 3\n3 4\n1 5\n2 5\n3 5\n4 5\n", "4 0\n", "6 9\n1 2\n1 4\n1 5\n2 6\n2 5\n2 6\n3 5\n4 6\n5 6\n", "12 56\n9 5\n2 6\n9 8\n5 4\n1 11\n1 6\n4 1\n1 10\n10 3\n8 4\n5 1\n9 1\n5 10\n2 7\n11 5\n6 11\n5 8\n7 6\n3 2\n12 7\n8 6\n12 3\n1 2\n8 1\n2 11\n10 12\n4 6\n5 12\n2 4\n10 2\n7 3\n12 11\n7 10\n7 1\n9 2\n11 9\n9 9\n8 7\n11 3\n7 9\n5 7\n4 12\n3 5\n12 2\n4 10\n9 12\n5 2\n9 4\n11 8\n8 2\n3 6\n4 11\n8 10\n6 10\n3 9\n3 4\n", "12 58\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 10\n1 11\n1 12\n2 3\n2 7\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n4 5\n4 6\n4 8\n4 11\n4 12\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11\n6 7\n6 8\n6 9\n6 10\n6 11\n6 12\n7 8\n7 9\n7 10\n7 11\n7 12\n8 9\n8 10\n8 11\n9 10\n9 11\n9 12\n10 12\n", "6 10\n1 2\n1 3\n1 4\n2 6\n2 3\n2 4\n2 5\n3 5\n3 6\n4 6\n", "11 49\n10 3\n6 4\n11 3\n7 6\n10 6\n6 1\n4 3\n10 2\n4 5\n9 2\n10 1\n5 7\n1 5\n9 7\n2 11\n8 6\n3 9\n2 5\n9 5\n6 5\n1 4\n11 9\n1 7\n8 10\n3 6\n3 7\n11 5\n6 9\n4 10\n8 7\n4 9\n8 2\n4 2\n8 11\n7 4\n9 10\n8 1\n10 7\n5 2\n5 8\n8 9\n1 3\n2 7\n10 11\n5 3\n10 5\n4 11\n1 11\n8 3\n", "8 15\n2 1\n6 5\n2 4\n3 4\n2 5\n3 5\n2 6\n3 6\n5 6\n4 6\n2 7\n3 8\n2 8\n3 7\n6 7\n", "5 7\n2 2\n2 3\n3 4\n1 5\n2 4\n3 5\n4 5\n", "3 0\n", "7 20\n4 1\n6 7\n4 5\n1 2\n2 4\n1 7\n3 5\n2 1\n6 2\n6 1\n7 3\n3 2\n3 6\n3 1\n3 4\n2 5\n1 6\n7 4\n6 3\n7 5\n", "5 7\n1 3\n2 3\n3 4\n1 5\n2 5\n3 5\n4 5\n", "1 0\n", "12 56\n9 5\n2 6\n9 8\n5 6\n1 11\n1 6\n4 1\n1 10\n10 3\n8 4\n5 1\n9 1\n5 10\n2 7\n11 5\n6 11\n5 8\n7 6\n3 2\n12 7\n8 6\n12 3\n1 2\n8 1\n2 11\n10 12\n4 6\n5 12\n2 4\n10 2\n7 3\n12 11\n7 10\n7 1\n9 2\n11 9\n9 10\n8 7\n11 3\n7 9\n5 7\n4 12\n3 5\n12 2\n4 10\n9 12\n5 2\n9 4\n11 8\n8 2\n3 6\n4 11\n8 10\n6 10\n3 9\n3 4\n", "12 58\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 10\n1 11\n1 12\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n4 5\n4 6\n4 8\n4 11\n4 12\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11\n6 7\n6 8\n6 9\n4 10\n6 11\n6 12\n7 8\n7 9\n7 10\n7 11\n7 12\n8 9\n8 10\n8 11\n9 10\n9 11\n9 12\n10 12\n", "12 56\n9 5\n2 6\n9 8\n5 6\n1 11\n1 6\n4 1\n1 10\n10 3\n7 4\n5 1\n9 1\n5 10\n2 7\n11 5\n6 11\n5 8\n7 6\n3 2\n12 7\n8 6\n12 3\n1 2\n8 1\n2 11\n10 12\n4 6\n5 12\n2 4\n10 2\n7 3\n12 11\n7 10\n7 1\n9 2\n11 9\n9 10\n8 7\n11 3\n7 9\n5 7\n4 12\n3 5\n12 2\n4 10\n9 12\n5 2\n9 4\n11 8\n8 2\n3 6\n4 11\n8 10\n6 10\n3 9\n3 4\n", "7 10\n1 2\n1 3\n1 4\n1 6\n2 3\n2 4\n2 5\n5 5\n3 6\n4 6\n", "4 3\n2 1\n3 1\n4 4\n", "8 15\n2 1\n6 5\n2 4\n3 4\n2 5\n3 5\n2 6\n3 6\n5 6\n4 6\n4 7\n3 8\n2 8\n3 7\n6 7\n", "5 7\n2 2\n2 3\n3 4\n1 5\n2 4\n2 5\n4 5\n", "8 18\n1 4\n1 6\n1 7\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n3 4\n3 8\n4 7\n5 6\n2 7\n5 8\n6 7\n6 8\n7 8\n", "3 1\n1 2\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n2 6\n3 5\n2 6\n5 6\n", "3 1\n2 1\n", "6 10\n1 2\n1 3\n1 4\n1 6\n2 3\n2 4\n2 5\n5 5\n3 6\n4 6\n", "5 4\n1 4\n4 3\n4 3\n4 2\n", "4 3\n1 2\n3 2\n4 3\n", "4 3\n2 3\n1 4\n2 3\n", "5 5\n1 2\n3 4\n3 2\n4 2\n4 5\n", "5 7\n2 2\n2 3\n3 3\n1 5\n2 5\n3 5\n4 5\n", "6 9\n1 2\n1 4\n1 5\n2 6\n2 5\n1 6\n3 5\n4 6\n5 6\n", "12 56\n9 5\n2 6\n9 8\n5 4\n1 11\n1 6\n4 1\n1 10\n10 3\n8 4\n5 1\n9 1\n5 10\n2 7\n11 5\n6 11\n2 8\n7 6\n3 2\n12 7\n8 6\n12 3\n1 2\n8 1\n2 11\n10 12\n4 6\n5 12\n2 4\n10 2\n7 3\n12 11\n7 10\n7 1\n9 2\n11 9\n9 9\n8 7\n11 3\n7 9\n5 7\n4 12\n3 5\n12 2\n4 10\n9 12\n5 2\n9 4\n11 8\n8 2\n3 6\n4 11\n8 10\n6 10\n3 9\n3 4\n", "8 15\n2 1\n6 5\n2 4\n3 4\n2 5\n3 4\n2 6\n3 6\n5 6\n4 6\n2 7\n3 8\n2 8\n3 7\n6 7\n", "5 7\n2 2\n2 3\n3 4\n1 5\n2 4\n3 2\n4 5\n", "6 0\n", "8 15\n2 1\n6 5\n2 4\n1 4\n2 5\n3 5\n2 6\n3 6\n5 6\n4 6\n4 7\n3 8\n2 8\n3 7\n6 7\n", "3 1\n1 1\n", "12 58\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 10\n1 11\n1 12\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n4 5\n4 6\n4 8\n4 11\n4 12\n5 6\n5 7\n5 8\n3 9\n5 10\n5 11\n6 7\n6 8\n6 9\n4 10\n6 11\n6 12\n7 8\n7 9\n7 10\n7 11\n7 12\n8 9\n8 10\n8 11\n9 10\n9 11\n9 12\n10 12\n", "5 4\n1 4\n4 3\n4 3\n4 1\n", "5 5\n1 2\n3 4\n3 1\n4 2\n4 5\n", "6 9\n1 4\n1 4\n1 5\n2 6\n2 5\n1 6\n3 5\n4 6\n5 6\n", "12 56\n9 5\n2 6\n9 8\n5 4\n1 11\n1 6\n4 1\n1 10\n10 3\n8 4\n5 1\n9 2\n5 10\n2 7\n11 5\n6 11\n2 8\n7 6\n3 2\n12 7\n8 6\n12 3\n1 2\n8 1\n2 11\n10 12\n4 6\n5 12\n2 4\n10 2\n7 3\n12 11\n7 10\n7 1\n9 2\n11 9\n9 9\n8 7\n11 3\n7 9\n5 7\n4 12\n3 5\n12 2\n4 10\n9 12\n5 2\n9 4\n11 8\n8 2\n3 6\n4 11\n8 10\n6 10\n3 9\n3 4\n", "8 15\n2 1\n6 5\n2 4\n3 4\n2 5\n3 4\n2 6\n3 6\n5 6\n4 6\n2 7\n3 8\n2 1\n3 7\n6 7\n", "5 7\n2 2\n2 3\n3 4\n1 5\n2 4\n3 2\n4 3\n", "8 15\n2 1\n6 5\n2 4\n1 4\n2 5\n3 5\n2 6\n3 6\n5 6\n4 6\n4 7\n3 8\n2 8\n3 7\n5 7\n", "12 56\n9 5\n2 6\n9 8\n5 6\n1 11\n1 6\n4 1\n1 10\n10 3\n7 4\n5 1\n9 1\n5 10\n2 7\n11 5\n6 11\n5 11\n7 6\n3 2\n12 7\n8 6\n12 3\n1 2\n8 1\n2 11\n10 12\n4 6\n5 12\n2 4\n10 2\n7 3\n12 11\n7 10\n7 1\n9 2\n11 9\n9 10\n8 7\n11 3\n7 9\n5 7\n4 12\n3 5\n12 2\n4 10\n9 12\n5 2\n9 4\n11 8\n8 2\n3 6\n4 11\n8 10\n6 10\n3 9\n3 4\n", "7 10\n1 2\n1 3\n1 4\n1 6\n2 3\n4 4\n2 5\n5 5\n3 6\n4 6\n", "8 15\n2 1\n6 5\n2 4\n3 3\n2 5\n3 4\n2 6\n3 6\n5 6\n4 6\n2 7\n3 8\n2 1\n3 7\n6 7\n", "7 7\n2 2\n2 3\n3 4\n1 5\n2 4\n3 2\n4 3\n"], "output": ["2\n1 4\n", "1\n4\n", "1\n6\n", "2\n1 11\n", "3\n1 1 10\n", "2\n1 5\n", "4\n1 1 2 7\n", "1\n8\n", "1\n5\n", "1\n3\n", "3\n1 2 4\n", "3\n1 1 3\n", "1\n1\n", "3\n1 5 6\n", "4\n1 1 4 6\n", "3\n1 3 8\n", "1\n7\n", "1\n4\n", "1\n8\n", "1\n5\n", "1\n8\n", "1\n3\n", "1\n6\n", "1\n3\n", "1\n6\n", "1\n5\n", "1\n4\n", "1\n4\n", "1\n5\n", "2\n1 4\n", "1\n6\n", "2\n1 11\n", "1\n8\n", "1\n5\n", "1\n6\n", "1\n8\n", "1\n3\n", "3\n1 1 10\n", "1\n5\n", "1\n5\n", "1\n6\n", "2\n1 11\n", "1\n8\n", "1\n5\n", "1\n8\n", "3\n1 3 8\n", "1\n7\n", "1\n8\n", "1\n7\n"]}, "short_description": "1. One-sentence summary  \nCompute the sizes of connected components in the complement of a given undirected graph.  \n\n2. Core algorithmic approach  \nAn implicit-graph DFS/BFS over the complement graph, where the \u201cneighbors\u201d of a vertex are determined by set-difference of the unvisited vertices and its original adjacency set.  \n\n3. Reusable components  \n- Maintaining an unvisited-vertex set and removing nodes as they are discovered.  \n- Computing complement-neighbors via `S - adjacency[v]` (set difference).  \n- Iterative DFS/BFS with a stack/queue driven by set operations (extend, intersection)."}
{"name": "45_H. Road Problem", "description": "The Berland capital (as you very well know) contains n junctions, some pairs of which are connected by two-way roads. Unfortunately, the number of traffic jams in the capital has increased dramatically, that's why it was decided to build several new roads. Every road should connect two junctions. \n\nThe city administration noticed that in the cities of all the developed countries between any two roads one can drive along at least two paths so that the paths don't share any roads (but they may share the same junction). The administration decided to add the minimal number of roads so that this rules was fulfilled in the Berland capital as well. In the city road network should exist no more than one road between every pair of junctions before or after the reform.\n\nInput\n\nThe first input line contains a pair of integers n, m (2 \u2264 n \u2264 900, 1 \u2264 m \u2264 100000), where n is the number of junctions and m is the number of roads. Each of the following m lines contains a description of a road that is given by the numbers of the connected junctions ai, bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi). The junctions are numbered from 1 to n. It is possible to reach any junction of the city from any other one moving along roads.\n\nOutput\n\nOn the first line print t \u2014 the number of added roads. Then on t lines print the descriptions of the added roads in the format of the input data. You can use any order of printing the roads themselves as well as the junctions linked by every road. If there are several solutions to that problem, print any of them.\n\nIf the capital doesn't need the reform, print the single number 0.\n\nIf there's no solution, print the single number -1.\n\nExamples\n\nInput\n\n4 3\n1 2\n2 3\n3 4\n\n\nOutput\n\n1\n1 4\n\n\nInput\n\n4 4\n1 2\n2 3\n2 4\n3 4\n\n\nOutput\n\n1\n1 3", "solution": "import sys\nimport threading\n\ndef main():\n\n    \n    p = input().split()\n    n = int(p[0]) #number of locations\n    m = int(p[1]) #number of passages\n\n    if n==1: #if there's only one location, there's nothing to do\n        print(0)\n        return\n    if n==2: #if there's only two nodes, the only edge between them, is always a bridge\n        print(-1)\n        return\n\n    g = graph(n,m)\n\n    g.buildBridgeTree()\n    \n    e = graph(len(g.bridges)+1,len(g.bridges))\n\n    e.conexions= []\n    e.pi=[]\n    e.discovery=[]\n    e.seen=[]\n\n    for i in range(len(g.bridges)+1):\n        e.conexions.append([])\n        e.pi.append(-1)\n        e.discovery.append(sys.float_info.max)\n        e.seen.append(False)\n    for i in range(len(g.bridges)):\n        e.conexions[g.cc[g.bridges[i][0]]].append((g.cc[g.bridges[i][1]],True))\n        e.conexions[g.cc[g.bridges[i][1]]].append((g.cc[g.bridges[i][0]],True))\n    \n    e.bridges=g.bridges\n    e.bridge=g.bridge\n    e.cc=g.cc\n    e.CC=e.CC\n    e.CC\n\n    e.treeDiameter()\n\n    print(len(e.newEdges))\n    for i in range(len(e.newEdges)):\n        u = e.newEdges[i][0] +1\n        v = e.newEdges[i][1] +1\n        print(u, end=\" \")\n        print(v)\n\nclass graph:\n\n    n = int() #number of nodes\n    edges= int() #number of edges\n    time = int() \n\n\n    conexions = [] #adjacency list\n    bridges=[] #are we using a removable edge or not for city i?\n    bridge=[]\n\n\n    discovery = [] #time to discover node i\n    seen = [] #visited or not\n    cc = [] #index of connected components\n    low = [] #low[i]=min(discovery(i),discovery(w)) w:any node discoverable from i\n    pi = [] #index of i's father \n\n    CC = []\n    newEdges = []\n\n    def __init__(self, n, m):\n\n        self.n = n\n        self.edges = m\n\n        for i in range(self.n):\n            self.conexions.append([])\n            self.discovery.append(sys.float_info.max)\n            self.low.append(sys.float_info.max)\n            self.seen.append(False)\n            self.cc.append(-1)\n            self.CC.append([])\n            self.bridge.append([])\n            \n    \n    def buildGraph(self):\n        #this method put every edge in the adjacency list\n        for i in range(self.edges):\n            p2=input().split()\n            self.conexions[int(p2[0])-1].append((int(p2[1])-1,False))\n            self.conexions[int(p2[1])-1].append((int(p2[0])-1,False))\n    \n    def searchBridges (self):\n        self.time = 0 \n\n        for i in range(self.n):\n            self.pi.append(-1)\n            for j in range(self.n):\n                self.bridge[i].append(False)\n        \n        \n\n\n        self.searchBridges_(0,-1) #we can start in any node 'cause the graph is connected\n\n    \n    def searchBridges_(self,c,index):\n\n        self.seen[c]=True #mark as visited\n        self.time+=1\n        self.discovery[c]=self.low[c]= self.time\n\n        for i in range(len(self.conexions[c])):\n        \n            pos = self.conexions[c][i][0]\n            if not self.seen[pos]:\n                self.pi[pos]=c #the node that discovered it\n            \n                self.searchBridges_(pos,i) #search throw its not visited conexions\n            \n                self.low[c]= min([self.low[c],self.low[pos]]) #definition of low\n            \n            elif self.pi[c]!=pos: #It is not the node that discovered it\n                self.low[c]= min([self.low[c],self.discovery[pos]])\n        \n        if self.pi[c]!=-1 and self.low[c]==self.discovery[c]:  #it isn't the root and none of its connections is reacheable earlier than it\n            self.bridges.append((c,self.pi[c]))\n            self.bridge[self.pi[c]][c]=self.bridge[c][self.pi[c]]= True\n            \n            for i in range(len(self.conexions[c])):\n                if(self.conexions[c][i][0]==self.pi[c]):\n                    self.conexions[c][i]=(self.pi[c],True)\n                    self.conexions[self.pi[c]][index]=(c,True)\n\n        \n            \n        \n\n\n    def findCC(self):\n\n        j = 0\n\n        for i in range(self.n):\n            self.pi[i]=-1\n            self.seen[i]=False\n        \n        for i in range(self.n):\n            if self.seen[i]==False:\n                self.cc[i]=j #assign the index of the new connected component\n                self.CC[j].append(i)\n                self.findCC_(i,j) #search throw its not visited conexions\n                j+=1 #we finished the search in the connected component\n    \n    def findCC_(self, c, j):\n\n        self.seen[c]=True #mark as visited\n\n        for i in range(len(self.conexions[c])):\n\n            pos = self.conexions[c][i][0]\n            if(self.seen[pos]==False and self.conexions[c][i][1]==False):\n                \n                self.cc[pos]=j #assign the index of the connected component\n                self.CC[j].append(pos)\n                self.pi[pos]=c #the node that discovered it\n                self.findCC_(pos,j) #search throw its not visited conexions\n\n    def treeDiameter(self):\n\n       while self.n>1:\n\n            for i in range(self.n):\n                self.seen[i]=False\n                self.pi[i]=-1\n            self.discovery[0]=0\n            self.treeDiameter_(0) #search the distance from this node, to the others\n            max = -1\n            maxIndex = 0\n            for i in range(self.n):\n                if self.discovery[i]>max:\n                    max= self.discovery[i] #look for the furthest node\n                    maxIndex=i\n            for i in range(self.n):\n                self.seen[i]=False\n                self.pi[i]=-1\n            self.discovery[maxIndex]=0\n            self.treeDiameter_(maxIndex)  #search the distance from the furthest node, to the others\n            max =-1\n            maxIndex2=-1\n            for i in range(self.n):\n                if self.discovery[i]>max :\n                    max= self.discovery[i] #look for the furthest node to preview furthest node, and that is the diameter in a tree\n                    maxIndex2=i\n        \n            self.ReBuildTree(maxIndex,maxIndex2)\n\n\n    def treeDiameter_(self, c):\n\n        self.seen[c]=True #mark as visited\n\n        for i in range(len(self.conexions[c])):\n\n            pos = self.conexions[c][i][0]\n\n            if self.seen[pos]==False:\n\n                self.pi[pos]=c #the node that discovered it\n                self.discovery[pos]= self.discovery[c]+1 #distance to the node who discover it + 1\n                #we don't have to compare and search for other paths, since it's a tree and there is only one path between two nodes.\n                self.treeDiameter_(pos) #search throw its not visited conex16 ions\n\n\n\n    def buildBridgeTree(self):\n        \n        self.buildGraph()\n        self.searchBridges()\n        self.findCC()\n\n    def ReBuildTree(self, u, v):\n        find=0\n\n        for i in range(len(self.CC[u])):\n            for j in range(len(self.CC[v])):\n                if not self.bridge[self.CC[u][i]][self.CC[v][j]]:\n                    self.newEdges.append((self.CC[u][i],self.CC[v][j]))\n                    find=1\n                    break\n            \n            if find==1:\n                break\n\n        newIndex=[]\n        temp = v\n        self.conexions[u]=None\n        self.conexions[v]=None\n\n        while self.pi[temp]!=u:\n            self.conexions[self.pi[temp]]=None\n            temp = self.pi[temp]\n\n        r =1\n        for i in range(self.n):\n            if(self.conexions[i]!=None):\n                newIndex.append(r)\n                r+=1\n            else:\n                newIndex.append(0)\n        \n        self.n=r\n\n        if self.n==1:\n            return\n\n        newCC=[]\n\n        self.conexions=[]\n\n        for i in range(self.n):\n            self.conexions.append([])\n            newCC.append([])\n\n        for i in range(len(self.bridges)):\n\n            len0 = len(self.CC[self.cc[self.bridges[i][0]]])\n            \n\n            if(len0!=0):\n                for j in range(len0):\n                    newCC[newIndex[self.cc[self.bridges[i][0]]]].append(self.CC[self.cc[self.bridges[i][0]]][j])\n                self.CC[self.cc[self.bridges[i][0]]]=[]\n            \n            len1 = len(self.CC[self.cc[self.bridges[i][1]]])\n            \n            if(len1!=0):\n                for j in range(len1):\n                    newCC[newIndex[self.cc[self.bridges[i][1]]]].append(self.CC[self.cc[self.bridges[i][1]]][j])\n                self.CC[self.cc[self.bridges[i][1]]]=[]\n            \n            self.conexions[newIndex[self.cc[self.bridges[i][0]]]].append((newIndex[self.cc[self.bridges[i][1]]],True))\n            self.conexions[newIndex[self.cc[self.bridges[i][1]]]].append((newIndex[self.cc[self.bridges[i][0]]],True))\n\n        self.CC= newCC\n\n        for i in range(len(self.cc)):\n            self.cc[i]=newIndex[self.cc[i]]\n\n\n\n\n\n            \n\n\n\n\n\nif __name__ == '__main__':\n    main()", "difficulty": 14, "public_tests": {"input": ["4 4\n1 2\n2 3\n2 4\n3 4\n", "4 3\n1 2\n2 3\n3 4\n"], "output": ["1\n1 3\n", "1\n1 4\n"]}, "private_tests": {"input": ["10 9\n7 9\n8 9\n8 2\n10 6\n8 3\n9 4\n2 6\n8 5\n9 1\n", "2 1\n1 2\n", "20 20\n1 9\n11 9\n3 5\n15 13\n1 20\n11 18\n10 6\n10 8\n10 19\n12 16\n10 3\n9 18\n8 4\n15 1\n13 16\n11 2\n7 20\n10 15\n3 17\n17 14\n", "20 20\n2 17\n5 17\n14 4\n4 11\n5 1\n4 9\n18 16\n1 18\n13 6\n9 19\n2 7\n20 6\n11 12\n18 8\n13 3\n14 17\n18 13\n2 15\n10 8\n5 2\n", "20 20\n1 7\n9 4\n11 16\n19 1\n8 3\n13 14\n10 1\n15 6\n10 18\n12 16\n15 11\n20 5\n17 11\n6 8\n20 16\n2 4\n5 12\n10 15\n17 14\n9 18\n", "10 19\n3 7\n3 6\n8 1\n9 10\n1 4\n1 3\n4 3\n5 4\n7 10\n9 1\n4 2\n8 2\n9 4\n9 8\n7 6\n9 3\n8 6\n2 10\n6 2\n", "10 13\n2 9\n9 5\n5 10\n4 8\n5 7\n6 1\n5 8\n9 7\n10 3\n7 1\n7 10\n2 1\n3 1\n", "20 21\n19 7\n6 15\n17 3\n6 20\n10 11\n18 8\n1 9\n13 19\n4 16\n3 4\n3 16\n10 13\n2 3\n13 18\n1 17\n10 1\n18 6\n13 5\n9 12\n14 12\n2 16\n", "10 9\n5 4\n3 10\n8 2\n10 1\n8 3\n7 9\n5 7\n8 5\n4 6\n", "10 16\n1 3\n4 3\n6 4\n5 3\n5 4\n1 2\n9 8\n10 5\n2 6\n7 9\n7 8\n1 4\n2 3\n10 7\n1 6\n6 10\n", "6 6\n4 2\n6 2\n5 6\n4 3\n5 1\n3 5\n", "20 20\n19 11\n17 9\n1 12\n19 3\n19 2\n13 7\n10 6\n10 1\n10 19\n20 5\n10 18\n14 2\n1 17\n19 8\n14 4\n13 20\n2 4\n10 15\n1 13\n8 16\n", "70 71\n56 50\n52 51\n6 5\n56 67\n29 17\n13 41\n39 10\n61 13\n3 22\n49 11\n2 20\n44 59\n30 4\n8 39\n37 26\n8 58\n21 57\n29 63\n69 24\n66 21\n44 55\n29 40\n44 37\n62 8\n53 64\n44 2\n15 28\n11 42\n67 53\n6 1\n52 14\n23 33\n59 16\n22 48\n2 34\n36 61\n61 32\n26 65\n56 49\n52 68\n6 25\n29 31\n15 12\n36 28\n37 9\n56 29\n47 43\n51 24\n68 35\n27 21\n22 52\n29 70\n43 23\n65 19\n7 36\n44 3\n17 45\n59 7\n36 6\n6 38\n14 62\n54 55\n69 51\n37 56\n52 30\n12 28\n25 60\n4 18\n37 47\n16 66\n46 57\n", "9 8\n4 3\n6 4\n7 5\n3 8\n7 6\n4 1\n6 2\n9 1\n", "3 2\n2 1\n3 1\n", "50 50\n37 15\n19 9\n42 43\n5 23\n17 2\n14 37\n27 20\n37 46\n48 6\n41 10\n26 40\n45 12\n47 29\n14 5\n24 25\n50 44\n3 49\n47 38\n18 48\n50 24\n13 45\n39 50\n18 26\n11 39\n26 27\n50 4\n12 31\n40 1\n32 19\n23 2\n26 42\n39 47\n48 35\n28 21\n50 16\n40 3\n11 32\n32 34\n14 36\n8 11\n43 7\n46 21\n22 29\n16 30\n39 13\n17 5\n41 33\n26 8\n3 14\n4 41\n", "20 20\n19 1\n11 9\n17 11\n15 12\n19 8\n11 5\n10 3\n10 16\n10 9\n7 20\n15 6\n14 2\n8 13\n15 19\n2 4\n9 18\n4 20\n10 15\n8 14\n17 18\n", "60 66\n27 43\n37 11\n30 31\n50 53\n30 51\n13 8\n1 38\n22 57\n51 48\n10 5\n3 33\n5 60\n6 29\n58 39\n28 2\n33 36\n33 46\n41 33\n53 9\n47 40\n5 59\n20 3\n4 25\n17 57\n1 12\n55 6\n21 57\n41 28\n52 38\n23 42\n3 30\n22 21\n59 32\n49 35\n14 55\n4 32\n33 15\n59 40\n24 40\n36 16\n32 25\n37 52\n55 29\n58 45\n31 17\n20 15\n51 18\n24 47\n59 23\n34 49\n5 27\n33 39\n46 19\n1 56\n51 35\n30 50\n51 54\n5 41\n34 35\n13 26\n36 37\n10 14\n7 11\n45 39\n12 44\n59 13\n", "20 21\n6 20\n12 19\n17 14\n12 6\n10 11\n9 16\n1 9\n13 15\n3 4\n15 19\n7 2\n10 13\n20 15\n13 5\n1 18\n10 1\n18 8\n13 17\n9 2\n17 4\n20 19\n", "4 4\n1 2\n2 3\n2 4\n3 4\n", "5 5\n4 2\n1 4\n3 2\n5 1\n3 5\n", "8 14\n8 4\n3 5\n3 4\n6 3\n5 1\n1 4\n8 7\n2 4\n2 3\n2 1\n3 1\n2 6\n6 1\n2 5\n", "60 61\n19 31\n1 56\n35 37\n1 47\n56 60\n15 31\n38 33\n26 57\n43 29\n28 22\n6 5\n56 38\n3 30\n49 17\n12 13\n20 49\n13 35\n31 16\n49 3\n15 14\n35 21\n54 4\n37 52\n12 32\n32 8\n23 2\n38 20\n50 5\n53 41\n12 45\n41 19\n40 39\n50 9\n58 27\n22 44\n10 46\n56 58\n20 12\n37 36\n15 28\n25 40\n58 11\n49 2\n22 55\n49 42\n11 43\n33 34\n34 48\n49 26\n53 4\n52 59\n49 51\n25 18\n58 24\n1 25\n16 54\n5 9\n21 7\n8 10\n56 6\n49 15\n", "7 7\n4 6\n2 3\n2 4\n3 1\n5 2\n6 7\n4 7\n", "20 20\n6 5\n3 17\n8 9\n6 1\n19 8\n11 18\n15 6\n15 11\n15 19\n12 16\n15 13\n7 20\n19 3\n15 14\n5 12\n14 4\n5 16\n10 15\n1 2\n8 7\n", "70 69\n32 67\n1 57\n40 34\n44 38\n50 24\n69 5\n68 7\n19 61\n36 29\n60 6\n8 12\n32 10\n63 69\n62 39\n14 16\n40 63\n6 70\n39 58\n57 27\n9 55\n43 21\n25 15\n69 22\n30 3\n60 37\n22 50\n29 41\n37 56\n41 28\n11 19\n60 25\n50 46\n11 49\n14 2\n11 9\n40 60\n63 11\n62 1\n60 32\n15 64\n61 4\n10 66\n46 68\n32 18\n32 65\n50 62\n19 35\n40 36\n62 33\n56 31\n13 51\n17 44\n55 14\n14 47\n67 53\n46 17\n10 23\n69 45\n27 54\n60 8\n14 26\n43 52\n66 48\n26 59\n69 30\n36 43\n53 20\n56 51\n19 42\n", "6 6\n4 6\n2 1\n3 2\n4 3\n5 6\n3 5\n", "10 18\n6 4\n3 7\n4 9\n8 4\n3 4\n3 6\n7 5\n3 9\n10 9\n10 5\n1 2\n1 8\n8 2\n5 6\n6 9\n5 9\n3 10\n7 10\n", "20 21\n12 6\n14 12\n5 7\n17 6\n10 11\n8 5\n13 1\n11 2\n4 16\n2 16\n3 4\n10 19\n20 15\n11 9\n13 6\n11 13\n5 15\n11 8\n9 18\n17 14\n2 3\n", "10 16\n2 6\n3 7\n6 5\n5 9\n5 4\n1 2\n9 8\n6 4\n2 10\n3 8\n7 9\n1 4\n2 4\n10 5\n1 6\n6 10\n", "4 3\n2 1\n3 4\n2 4\n", "20 45\n3 9\n5 20\n2 16\n20 12\n18 11\n12 8\n15 8\n5 18\n8 7\n11 1\n5 10\n4 18\n10 17\n13 16\n10 11\n14 18\n9 4\n3 18\n12 1\n12 18\n5 1\n8 16\n8 19\n12 3\n8 6\n5 17\n19 7\n20 1\n6 19\n15 13\n10 20\n15 7\n4 1\n4 11\n2 7\n19 13\n14 20\n15 2\n17 14\n3 4\n6 13\n15 19\n13 2\n5 11\n16 7\n", "30 29\n12 20\n18 8\n1 18\n1 27\n17 6\n28 23\n26 16\n2 9\n15 5\n24 19\n2 21\n13 11\n16 13\n27 17\n24 26\n26 7\n18 28\n24 25\n2 15\n4 29\n24 3\n8 10\n20 30\n26 4\n15 24\n2 22\n16 14\n5 1\n21 12\n", "40 40\n4 7\n37 10\n26 14\n26 24\n39 28\n29 40\n37 39\n19 5\n3 16\n33 1\n15 20\n38 8\n7 19\n29 38\n29 37\n8 13\n33 4\n29 33\n9 18\n39 26\n8 22\n23 27\n34 15\n37 2\n27 12\n28 36\n21 32\n36 21\n30 31\n23 6\n40 11\n31 23\n30 40\n26 35\n4 17\n4 34\n11 31\n17 9\n24 3\n18 25\n"], "output": ["3\n7 5\n10 4\n3 1\n", "-1\n", "4\n2 4\n7 19\n12 5\n6 14\n", "4\n7 16\n15 10\n12 20\n19 3\n", "3\n7 3\n19 20\n2 13\n", "1\n1 5\n", "1\n4 6\n", "4\n14 8\n2 15\n11 20\n7 5\n", "2\n2 9\n6 1\n", "1\n1 7\n", "1\n1 2\n", "6\n12 16\n6 18\n11 15\n3 9\n4 7\n16 5\n", "15\n31 5\n70 60\n33 41\n20 32\n34 12\n48 54\n69 19\n10 9\n58 50\n35 64\n18 42\n46 45\n27 63\n38 40\n1 31\n", "2\n8 2\n5 9\n", "1\n2 3\n", "10\n38 6\n31 35\n9 20\n34 7\n49 44\n15 25\n28 10\n17 33\n36 30\n1 22\n", "4\n1 6\n13 3\n7 16\n12 5\n", "11\n7 60\n21 25\n48 24\n18 42\n34 8\n54 26\n9 43\n19 45\n2 16\n29 44\n60 56\n", "4\n16 20\n7 5\n8 14\n11 3\n", "1\n1 3\n", "0\n", "1\n7 1\n", "12\n60 59\n48 36\n17 7\n30 46\n23 45\n42 27\n57 29\n51 24\n16 9\n14 47\n44 39\n55 18\n", "2\n7 5\n5 1\n", "5\n16 17\n18 13\n9 4\n20 10\n17 2\n", "16\n54 28\n58 21\n24 52\n5 4\n34 35\n70 42\n31 49\n13 16\n64 2\n20 47\n48 59\n23 45\n18 3\n65 7\n12 38\n28 33\n", "1\n1 3\n", "1\n1 3\n", "4\n18 17\n7 19\n20 3\n1 18\n", "1\n1 9\n", "1\n1 3\n", "1\n1 2\n", "7\n10 19\n23 11\n6 14\n9 7\n30 29\n22 25\n19 3\n", "7\n1 22\n5 10\n25 32\n20 14\n12 16\n6 35\n13 2\n"]}, "generated_tests": {"input": ["20 20\n1 9\n11 9\n3 5\n15 13\n1 20\n11 18\n10 6\n10 8\n10 19\n12 16\n10 3\n9 18\n8 7\n15 1\n13 16\n11 2\n7 20\n10 15\n3 17\n17 14\n", "20 20\n2 17\n5 17\n14 4\n4 11\n5 1\n4 9\n18 13\n1 18\n13 6\n9 19\n2 7\n20 6\n11 12\n18 8\n13 3\n14 17\n18 13\n2 15\n10 8\n5 2\n", "10 9\n9 4\n3 10\n8 2\n10 1\n8 3\n7 9\n5 7\n8 5\n4 6\n", "10 16\n1 3\n4 3\n6 4\n5 3\n5 4\n1 2\n9 8\n10 5\n2 5\n7 9\n7 8\n1 4\n2 3\n10 7\n1 6\n6 10\n", "6 6\n4 2\n6 2\n5 2\n4 3\n5 1\n3 5\n", "20 20\n19 11\n17 9\n1 12\n19 3\n19 2\n13 3\n10 6\n10 1\n10 19\n20 5\n10 18\n14 2\n1 17\n19 8\n14 4\n13 20\n2 4\n10 15\n1 13\n8 16\n", "70 71\n56 50\n52 51\n6 5\n56 67\n29 17\n13 41\n39 10\n61 13\n3 22\n49 11\n2 20\n44 59\n30 4\n8 39\n37 26\n8 58\n21 57\n29 63\n69 24\n66 21\n44 55\n29 40\n44 37\n62 8\n53 64\n44 2\n15 28\n11 42\n67 53\n6 1\n52 14\n23 33\n59 16\n22 48\n2 34\n36 61\n61 32\n26 65\n56 49\n52 68\n6 25\n29 31\n15 12\n36 28\n37 9\n56 29\n47 43\n51 24\n68 35\n27 21\n22 52\n29 70\n43 23\n65 19\n7 36\n44 3\n17 45\n59 7\n24 6\n6 38\n14 62\n54 55\n69 51\n37 56\n52 30\n12 28\n25 60\n4 18\n37 47\n16 66\n46 57\n", "50 50\n37 15\n19 9\n42 43\n5 23\n17 2\n14 37\n27 20\n37 46\n48 6\n41 10\n26 40\n45 12\n47 29\n14 5\n24 25\n50 44\n3 49\n47 38\n18 48\n50 24\n13 45\n39 50\n18 26\n11 39\n26 27\n50 4\n12 31\n40 1\n32 19\n23 2\n26 42\n39 47\n48 35\n22 21\n50 16\n40 3\n11 32\n32 34\n14 36\n8 11\n43 7\n46 21\n22 29\n16 30\n39 13\n17 5\n41 33\n26 8\n3 14\n4 41\n", "20 20\n19 1\n11 9\n17 11\n15 12\n19 8\n11 5\n10 5\n10 16\n10 9\n7 20\n15 6\n14 2\n8 13\n15 19\n2 4\n9 18\n4 20\n10 15\n8 14\n17 18\n", "20 21\n6 20\n12 19\n17 14\n12 6\n10 11\n9 16\n1 9\n13 15\n3 4\n15 19\n7 2\n10 13\n20 15\n13 5\n1 18\n10 1\n18 8\n13 17\n15 2\n17 4\n20 19\n", "4 4\n1 2\n2 3\n2 4\n4 4\n", "60 61\n19 31\n1 56\n35 37\n1 47\n56 60\n18 31\n38 33\n26 57\n43 29\n28 22\n6 5\n56 38\n3 30\n49 17\n12 13\n20 49\n13 35\n31 16\n49 3\n15 14\n35 21\n54 4\n37 52\n12 32\n32 8\n23 2\n38 20\n50 5\n53 41\n12 45\n41 19\n40 39\n50 9\n58 27\n22 44\n10 46\n56 58\n20 12\n37 36\n15 28\n25 40\n58 11\n49 2\n22 55\n49 42\n11 43\n33 34\n34 48\n49 26\n53 4\n52 59\n49 51\n25 18\n58 24\n1 25\n16 54\n5 9\n21 7\n8 10\n56 6\n49 15\n", "7 7\n4 6\n2 3\n2 4\n3 1\n3 2\n6 7\n4 7\n", "20 20\n11 5\n3 17\n8 9\n6 1\n19 8\n11 18\n15 6\n15 11\n15 19\n12 16\n15 13\n7 20\n19 3\n15 14\n5 12\n14 4\n5 16\n10 15\n1 2\n8 7\n", "70 69\n32 67\n1 57\n40 34\n44 38\n50 24\n69 5\n68 7\n19 61\n36 29\n60 6\n8 12\n32 10\n63 69\n62 39\n14 16\n40 63\n6 70\n39 58\n57 27\n9 55\n43 21\n25 15\n69 22\n30 3\n60 37\n22 50\n29 41\n37 56\n41 28\n11 19\n60 25\n50 46\n11 49\n14 2\n11 9\n40 60\n63 11\n62 1\n60 32\n15 64\n61 4\n10 66\n46 68\n32 18\n32 65\n50 62\n19 35\n40 36\n62 33\n56 31\n13 51\n17 44\n55 14\n14 47\n67 53\n46 17\n10 23\n69 45\n27 54\n60 8\n14 26\n43 52\n66 48\n26 59\n69 30\n2 43\n53 20\n56 51\n19 42\n", "5 6\n4 6\n2 1\n3 2\n4 3\n5 6\n3 5\n", "10 18\n6 4\n3 7\n4 9\n8 4\n3 4\n3 6\n7 5\n3 9\n10 9\n10 5\n1 2\n1 8\n8 2\n3 6\n6 9\n5 9\n3 10\n7 10\n", "20 21\n12 6\n14 12\n5 7\n17 6\n10 11\n8 5\n13 1\n11 1\n4 16\n2 16\n3 4\n10 19\n20 15\n11 9\n13 6\n11 13\n5 15\n11 8\n9 18\n17 14\n2 3\n", "4 3\n2 1\n4 4\n2 4\n", "20 45\n3 9\n5 20\n2 16\n20 12\n18 11\n12 8\n15 8\n5 18\n8 7\n11 1\n5 10\n4 18\n10 17\n13 16\n10 11\n14 18\n9 4\n3 18\n12 1\n12 18\n5 1\n8 16\n8 19\n12 3\n8 6\n5 17\n19 7\n20 1\n6 19\n15 13\n10 20\n15 7\n4 1\n4 11\n2 7\n7 13\n14 20\n15 2\n17 14\n3 4\n6 13\n15 19\n13 2\n5 11\n16 7\n", "40 40\n4 7\n37 10\n26 14\n26 24\n39 28\n29 40\n37 39\n19 5\n3 16\n33 1\n15 20\n38 8\n7 19\n29 38\n29 37\n8 13\n33 4\n29 33\n9 18\n39 26\n8 22\n23 27\n34 15\n37 2\n27 12\n28 36\n21 32\n36 21\n30 31\n23 6\n40 11\n31 23\n8 40\n26 35\n4 17\n4 34\n11 31\n17 9\n24 3\n18 25\n", "4 3\n1 3\n2 3\n3 4\n", "20 20\n1 9\n19 9\n3 5\n15 13\n1 20\n11 18\n10 6\n10 8\n10 19\n12 16\n10 3\n9 18\n8 7\n15 1\n13 16\n11 2\n7 20\n10 15\n3 17\n17 14\n", "20 20\n19 11\n17 9\n1 12\n19 3\n19 2\n13 3\n10 6\n10 1\n10 19\n20 5\n10 18\n14 2\n1 17\n11 8\n14 4\n13 20\n2 4\n10 15\n1 13\n8 16\n", "50 50\n37 15\n19 9\n42 43\n5 23\n17 2\n14 37\n27 20\n37 46\n48 6\n41 10\n26 40\n45 12\n47 29\n14 5\n24 25\n50 44\n3 49\n47 38\n18 48\n50 24\n13 45\n39 50\n18 26\n11 39\n26 27\n50 4\n12 31\n40 1\n32 19\n23 2\n26 42\n39 47\n48 35\n22 21\n50 16\n40 3\n11 32\n32 34\n14 36\n8 11\n18 7\n46 21\n22 29\n16 30\n39 13\n17 5\n41 33\n26 8\n3 14\n4 41\n", "20 21\n6 20\n12 19\n17 14\n3 6\n10 11\n9 16\n1 9\n13 15\n3 4\n15 19\n7 2\n10 13\n20 15\n13 5\n1 18\n10 1\n18 8\n13 17\n15 2\n17 4\n20 19\n", "4 4\n1 2\n2 3\n2 4\n4 2\n", "60 61\n19 31\n1 56\n35 37\n1 47\n56 60\n18 31\n38 33\n26 57\n43 29\n28 22\n6 5\n56 38\n3 30\n49 17\n12 13\n20 49\n13 35\n31 16\n49 3\n15 14\n35 21\n54 4\n37 52\n12 32\n32 8\n23 2\n38 20\n50 5\n53 41\n12 45\n41 19\n40 39\n50 9\n58 27\n22 44\n10 46\n56 58\n20 12\n37 36\n15 28\n25 40\n58 11\n49 2\n32 55\n49 42\n11 43\n33 34\n34 48\n49 26\n53 4\n52 59\n49 51\n25 18\n58 24\n1 25\n16 54\n5 9\n21 7\n8 10\n56 6\n49 15\n", "20 20\n11 5\n3 17\n8 9\n6 1\n19 8\n11 18\n15 6\n15 11\n15 19\n12 16\n16 13\n7 20\n19 3\n15 14\n5 12\n14 4\n5 16\n10 15\n1 2\n8 7\n", "70 69\n32 67\n1 57\n40 34\n44 38\n50 24\n69 5\n68 7\n19 61\n36 29\n60 6\n8 12\n32 10\n63 69\n62 39\n14 16\n40 63\n6 70\n39 58\n57 27\n9 55\n43 21\n25 15\n69 22\n30 3\n60 37\n22 50\n29 41\n37 56\n41 28\n11 19\n60 25\n50 46\n11 49\n14 2\n11 9\n40 60\n63 11\n62 1\n60 32\n15 64\n61 4\n10 66\n46 68\n32 18\n32 65\n50 62\n32 35\n40 36\n62 33\n56 31\n13 51\n17 44\n55 14\n14 47\n67 53\n46 17\n10 23\n69 45\n27 54\n60 8\n14 26\n43 52\n66 48\n26 59\n69 30\n2 43\n53 20\n56 51\n19 42\n", "20 21\n12 9\n14 12\n5 7\n17 6\n10 11\n8 5\n13 1\n11 1\n4 16\n2 16\n3 4\n10 19\n20 15\n11 9\n13 6\n11 13\n5 15\n11 8\n9 18\n17 14\n2 3\n", "4 3\n4 1\n4 4\n2 4\n", "40 40\n4 7\n37 10\n26 14\n26 24\n39 28\n29 40\n37 39\n19 5\n3 16\n33 1\n15 20\n38 8\n7 19\n29 38\n29 37\n8 13\n33 4\n29 33\n9 18\n39 26\n8 22\n23 27\n34 15\n37 2\n27 12\n28 36\n21 32\n36 21\n30 31\n23 6\n40 11\n31 23\n8 40\n26 35\n1 17\n4 34\n11 31\n17 9\n24 3\n18 25\n", "4 0\n1 3\n2 3\n3 4\n", "20 20\n2 9\n19 9\n3 5\n15 13\n1 20\n11 18\n10 6\n10 8\n10 19\n12 16\n10 3\n9 18\n8 7\n15 1\n13 16\n11 2\n7 20\n10 15\n3 17\n17 14\n", "20 20\n19 11\n17 9\n1 12\n19 3\n19 2\n13 3\n10 6\n10 1\n10 19\n20 5\n10 18\n14 2\n1 17\n11 8\n14 4\n13 20\n2 4\n16 15\n1 13\n8 16\n", "50 50\n37 15\n19 9\n42 43\n5 23\n17 2\n14 37\n27 20\n37 46\n48 6\n41 10\n26 40\n45 12\n47 29\n14 5\n24 25\n50 44\n3 49\n47 38\n18 48\n50 24\n13 45\n39 50\n18 26\n11 39\n26 27\n50 4\n12 31\n40 1\n32 19\n23 2\n26 42\n39 47\n48 35\n22 21\n50 16\n40 3\n11 32\n32 34\n14 36\n8 11\n18 7\n46 21\n22 14\n16 30\n39 13\n17 5\n41 33\n26 8\n3 14\n4 41\n", "20 21\n6 20\n12 19\n17 14\n3 6\n10 11\n9 16\n1 9\n13 15\n3 3\n15 19\n7 2\n10 13\n20 15\n13 5\n1 18\n10 1\n18 8\n13 17\n15 2\n17 4\n20 19\n", "60 61\n24 31\n1 56\n35 37\n1 47\n56 60\n18 31\n38 33\n26 57\n43 29\n28 22\n6 5\n56 38\n3 30\n49 17\n12 13\n20 49\n13 35\n31 16\n49 3\n15 14\n35 21\n54 4\n37 52\n12 32\n32 8\n23 2\n38 20\n50 5\n53 41\n12 45\n41 19\n40 39\n50 9\n58 27\n22 44\n10 46\n56 58\n20 12\n37 36\n15 28\n25 40\n58 11\n49 2\n32 55\n49 42\n11 43\n33 34\n34 48\n49 26\n53 4\n52 59\n49 51\n25 18\n58 24\n1 25\n16 54\n5 9\n21 7\n8 10\n56 6\n49 15\n", "20 20\n11 5\n3 17\n11 9\n6 1\n19 8\n11 18\n15 6\n15 11\n15 19\n12 16\n16 13\n7 20\n19 3\n15 14\n5 12\n14 4\n5 16\n10 15\n1 2\n8 7\n", "70 69\n32 67\n1 57\n40 34\n44 38\n50 24\n69 5\n68 7\n19 61\n36 29\n60 6\n8 12\n32 10\n63 69\n62 39\n14 16\n40 63\n6 70\n39 58\n57 27\n9 55\n43 21\n25 15\n69 22\n30 3\n60 37\n22 50\n29 41\n37 56\n41 28\n11 19\n60 25\n50 46\n11 49\n14 2\n11 9\n40 60\n63 11\n62 1\n60 32\n15 64\n61 4\n10 66\n46 68\n32 18\n32 65\n50 62\n32 35\n40 36\n62 33\n56 31\n13 51\n4 44\n55 14\n14 47\n67 53\n46 17\n10 23\n69 45\n27 54\n60 8\n14 26\n43 52\n66 48\n26 59\n69 30\n2 43\n53 20\n56 51\n19 42\n", "10 18\n5 4\n3 7\n3 9\n8 4\n3 4\n3 6\n7 5\n3 9\n10 9\n10 5\n1 2\n1 8\n8 2\n3 6\n6 9\n5 9\n3 10\n7 10\n", "4 4\n1 2\n2 3\n2 4\n1 3\n", "20 20\n2 9\n19 9\n3 5\n15 13\n1 20\n11 18\n10 6\n10 8\n10 19\n12 16\n10 3\n9 18\n8 4\n15 1\n13 16\n11 2\n7 20\n10 15\n3 17\n17 14\n", "20 20\n19 11\n17 9\n1 12\n19 3\n19 2\n13 3\n10 6\n16 1\n10 19\n20 5\n10 18\n14 2\n1 17\n11 8\n14 4\n13 20\n2 4\n16 15\n1 13\n8 16\n", "50 50\n37 15\n19 9\n42 43\n5 23\n17 2\n14 37\n27 20\n37 46\n48 6\n41 10\n26 40\n45 12\n47 29\n14 5\n24 25\n50 44\n3 49\n47 38\n2 48\n50 24\n13 45\n39 50\n18 26\n11 39\n26 27\n50 4\n12 31\n40 1\n32 19\n23 2\n26 42\n39 47\n48 35\n22 21\n50 16\n40 3\n11 32\n32 34\n14 36\n8 11\n18 7\n46 21\n22 14\n16 30\n39 13\n17 5\n41 33\n26 8\n3 14\n4 41\n", "60 61\n24 31\n1 56\n35 37\n1 47\n56 60\n18 31\n38 33\n26 57\n43 29\n28 22\n6 5\n56 38\n3 30\n49 17\n12 13\n20 49\n13 35\n31 16\n49 3\n15 14\n35 21\n54 4\n37 52\n12 32\n32 8\n23 2\n38 20\n50 5\n53 41\n12 45\n41 19\n40 39\n50 9\n58 27\n22 44\n10 46\n56 58\n20 12\n37 36\n15 28\n25 40\n58 11\n49 2\n32 55\n49 42\n11 43\n33 34\n22 48\n49 26\n53 4\n52 59\n49 51\n25 18\n58 24\n1 25\n16 54\n5 9\n21 7\n8 10\n56 6\n49 15\n", "4 4\n1 2\n2 3\n2 4\n3 3\n", "10 18\n6 4\n3 7\n3 9\n8 4\n3 4\n3 6\n7 5\n3 9\n10 9\n10 5\n1 2\n1 8\n8 2\n3 6\n6 9\n5 9\n3 10\n7 10\n", "4 6\n1 2\n2 3\n2 4\n3 3\n", "20 21\n12 9\n14 12\n5 7\n17 6\n10 11\n8 5\n13 1\n11 1\n4 16\n2 16\n3 4\n10 19\n20 15\n11 9\n8 6\n11 13\n5 15\n11 8\n9 18\n17 14\n2 3\n", "4 3\n4 1\n4 4\n3 4\n", "3 0\n1 3\n2 3\n3 4\n", "20 20\n11 5\n3 17\n11 9\n6 1\n19 8\n11 18\n15 6\n15 11\n15 19\n12 16\n16 13\n7 20\n19 3\n15 14\n5 12\n14 4\n1 16\n10 15\n1 2\n8 7\n"], "output": ["3\n5 2\n14 6\n12 19\n", "4\n19 7\n20 15\n3 12\n10 19\n", "2\n6 2\n1 6\n", "1\n2 8\n", "1\n1 6\n", "5\n4 12\n16 6\n18 11\n15 5\n9 4\n", "14\n64 5\n42 60\n45 10\n63 58\n40 35\n31 46\n70 27\n33 41\n20 32\n34 12\n48 54\n18 19\n38 9\n1 50\n", "9\n15 6\n17 35\n36 20\n49 7\n38 44\n31 25\n9 10\n34 33\n1 30\n", "3\n6 13\n16 7\n1 12\n", "4\n7 16\n5 8\n14 11\n3 7\n", "2\n4 3\n1 4\n", "12\n59 60\n36 48\n7 17\n46 30\n45 23\n27 42\n29 57\n24 51\n9 14\n47 44\n39 55\n16 59\n", "1\n1 7\n", "5\n17 16\n13 18\n4 9\n10 20\n2 17\n", "15\n28 54\n4 58\n35 24\n42 5\n49 34\n16 70\n21 31\n52 13\n47 64\n59 20\n45 48\n3 23\n7 18\n38 65\n33 12\n", "1\n1 5\n", "1\n8 9\n", "3\n18 17\n7 19\n20 18\n", "1\n1 4\n", "1\n14 6\n", "8\n22 5\n10 25\n32 20\n14 30\n16 12\n35 6\n2 13\n1 22\n", "2\n4 2\n1 4\n", "3\n14 6\n12 5\n2 14\n", "4\n4 12\n18 6\n15 16\n9 5\n", "10\n30 6\n15 35\n17 7\n36 20\n49 43\n38 44\n31 25\n9 10\n34 33\n1 30\n", "4\n12 16\n14 8\n7 11\n5 12\n", "1\n1 3\n", "12\n36 60\n7 48\n46 17\n55 30\n45 23\n27 42\n29 57\n24 51\n9 14\n47 44\n39 59\n16 36\n", "4\n17 13\n4 18\n10 9\n2 20\n", "15\n12 54\n28 58\n4 24\n42 5\n49 34\n16 70\n21 31\n52 13\n47 64\n59 20\n45 48\n3 23\n7 18\n38 65\n33 35\n", "2\n20 19\n18 7\n", "1\n1 2\n", "7\n10 5\n32 20\n14 30\n16 12\n35 6\n2 13\n25 22\n", "0\n", "3\n5 6\n14 18\n12 5\n", "4\n5 12\n4 6\n18 15\n9 5\n", "10\n29 6\n38 35\n31 7\n9 20\n34 43\n49 44\n15 25\n17 10\n36 33\n1 30\n", "5\n3 16\n7 8\n5 11\n14 12\n4 3\n", "11\n36 60\n7 48\n46 17\n55 30\n45 23\n27 42\n29 57\n39 51\n19 14\n9 44\n47 59\n", "4\n17 13\n4 9\n10 18\n2 20\n", "15\n12 54\n28 58\n38 24\n42 5\n49 34\n16 70\n21 31\n52 13\n47 64\n59 20\n45 48\n3 23\n7 18\n17 65\n33 35\n", "1\n8 6\n", "1\n3 4\n", "4\n4 7\n18 12\n5 6\n14 4\n", "4\n4 12\n6 15\n18 5\n9 4\n", "10\n38 7\n31 20\n9 43\n34 44\n49 25\n15 10\n6 33\n35 30\n36 29\n1 38\n", "12\n59 60\n36 34\n7 17\n46 30\n55 23\n45 42\n27 57\n29 51\n39 14\n19 44\n9 48\n47 59\n", "2\n4 3\n1 4\n", "1\n8 9\n", "2\n4 3\n1 4\n", "2\n20 19\n18 7\n", "1\n1 3\n", "0\n", "4\n17 13\n4 9\n10 18\n2 20\n"]}, "short_description": "1. One-sentence summary:  \nGiven an undirected connected graph, compute and add the minimum set of edges needed to eliminate all bridges (i.e. make it 2-edge-connected).\n\n2. Core algorithmic approach:  \n- Tarjan\u2019s DFS lowlink to identify all bridges.  \n- Condense the original graph into its \u201cbridge tree\u201d of 2-edge-connected components.  \n- Repeatedly find the diameter of the current tree (two DFS/BFS) and add an edge between its endpoints to contract the tree until it collapses to a single node.\n\n3. Reusable components:  \n- A Tarjan\u2010style DFS routine for finding bridges (discovery time, lowlink, parent pointers).  \n- A two\u2010phase DFS/BFS to compute the diameter of a tree (start from any node to find furthest, then from that to find opposite endpoint).  \n- A bridge-tree construction pattern: label components by removing bridges, build a new tree over components, and iteratively contract paths by adding edges."}
{"name": "9_E. Interesting Graph and Apples", "description": "Hexadecimal likes drawing. She has drawn many graphs already, both directed and not. Recently she has started to work on a still-life \u00abinteresting graph and apples\u00bb. An undirected graph is called interesting, if each of its vertices belongs to one cycle only \u2014 a funny ring \u2014 and does not belong to any other cycles. A funny ring is a cycle that goes through all the vertices just once. Moreover, loops are funny rings too.\n\nShe has already drawn the apples and some of the graph edges. But now it is not clear, how to connect the rest of the vertices to get an interesting graph as a result. The answer should contain the minimal amount of added edges. And furthermore, the answer should be the lexicographically smallest one. The set of edges (x1, y1), (x2, y2), ..., (xn, yn), where xi \u2264 yi, is lexicographically smaller than the set (u1, v1), (u2, v2), ..., (un, vn), where ui \u2264 vi, provided that the sequence of integers x1, y1, x2, y2, ..., xn, yn is lexicographically smaller than the sequence u1, v1, u2, v2, ..., un, vn. If you do not cope, Hexadecimal will eat you. ...eat you alive.\n\nInput\n\nThe first line of the input data contains a pair of integers n and m (1 \u2264 n \u2264 50, 0 \u2264 m \u2264 2500) \u2014 the amount of vertices and edges respectively. The following lines contain pairs of numbers xi and yi (1 \u2264 xi, yi \u2264 n) \u2014 the vertices that are already connected by edges. The initial graph may contain multiple edges and loops.\n\nOutput\n\nIn the first line output \u00abYES\u00bb or \u00abNO\u00bb: if it is possible or not to construct an interesting graph. If the answer is \u00abYES\u00bb, in the second line output k \u2014 the amount of edges that should be added to the initial graph. Finally, output k lines: pairs of vertices xj and yj, between which edges should be drawn. The result may contain multiple edges and loops. k can be equal to zero.\n\nExamples\n\nInput\n\n3 2\n1 2\n2 3\n\n\nOutput\n\nYES\n1\n1 3", "solution": "def dfs(v, comp):\n    used[v] = comp\n    for u in graph[v]:\n        if not used[u]:\n            dfs(u, comp)\n\n\nn, m = map(int, input().split())\ngraph = [[] for i in range(n)]\nfor i in range(m):\n    v, u = map(int, input().split())\n    graph[v - 1].append(u - 1)\n    graph[u - 1].append(v - 1)\nused = [0] * n\nncomp = 0\nfor v in range(n):\n    if not used[v]:\n        ncomp += 1\n        dfs(v, ncomp)\nmaxpwr = max(map(len, graph))\nif n - m != ncomp or maxpwr > 2:\n    if n == m and ncomp == 1 and maxpwr == 2:\n        print(\"YES\")\n        print(0)\n    else:\n        print(\"NO\")\nelse:\n    print(\"YES\")\n    print(n - m)    \n    leaves = []\n    for v in range(n):\n        if len(graph[v]) == 1:\n            leaves.append([v + 1, used[v]])\n        elif len(graph[v]) == 0:\n            leaves.append([v + 1, used[v]])\n            leaves.append([v + 1, used[v]])\n    sets = []\n    for i in range(len(leaves)):\n        if leaves[i][0] == 0:\n            continue\n        for j in range(i + 1, len(leaves)):\n            if leaves[j][0] == 0:\n                continue            \n            if leaves[i][1] == leaves[j][1]:\n                continue\n            seti = -1\n            for k in range(len(sets)):\n                if leaves[i][1] in sets[k]:\n                    seti = k\n                    break\n            setj = -2\n            for k in range(len(sets)):\n                if leaves[j][1] in sets[k]:\n                    setj = k\n                    break\n            if seti != setj:\n                print(leaves[i][0], leaves[j][0])\n                if seti >= 0:\n                    if setj >= 0:\n                        sets[seti] |= sets[setj]\n                        sets.pop(setj)\n                    else:\n                        sets[seti].add(leaves[j][1])\n                else:\n                    if setj >= 0:\n                        sets[setj].add(leaves[i][1])   \n                    else:\n                        sets.append(set([leaves[i][1], leaves[j][1]]))\n                leaves[i][0] = 0\n                leaves[j][0] = 0\n                break\n    for i in range(len(leaves)):\n        if leaves[i][0] == 0:\n            continue\n        for j in range(i + 1, len(leaves)):\n            if leaves[j][0] == 0:\n                continue            \n            print(leaves[i][0], leaves[j][0])\n            break\n        else:\n            continue\n        break", "difficulty": 11, "public_tests": {"input": ["3 2\n1 2\n2 3\n"], "output": ["YES\n1\n1 3\n"]}, "private_tests": {"input": ["42 28\n7 19\n15 24\n3 42\n18 5\n32 27\n26 20\n40 30\n35 2\n14 8\n22 10\n36 4\n16 14\n21 29\n37 40\n2 12\n30 21\n19 17\n39 34\n31 28\n20 3\n4 33\n11 42\n26 21\n9 10\n4 32\n6 1\n1 14\n14 12\n", "2 2\n1 2\n2 1\n", "3 2\n3 2\n2 1\n", "3 3\n1 3\n2 1\n3 2\n", "2 3\n1 1\n1 2\n2 1\n", "50 27\n10 7\n32 9\n17 33\n25 34\n47 28\n23 16\n15 46\n41 50\n18 24\n27 19\n35 36\n19 38\n50 31\n31 40\n4 14\n1 11\n6 48\n33 35\n36 30\n39 12\n28 45\n2 1\n22 13\n3 49\n29 36\n7 34\n36 8\n", "30 21\n6 14\n19 17\n25 20\n28 10\n10 3\n24 23\n22 13\n1 7\n11 26\n12 1\n16 8\n14 9\n30 15\n4 27\n13 21\n20 12\n24 14\n19 10\n7 10\n16 8\n26 11\n", "9 4\n7 6\n2 8\n3 5\n8 3\n", "6 1\n4 1\n", "34 18\n9 14\n30 23\n19 3\n34 19\n26 2\n31 28\n7 21\n20 27\n16 15\n18 20\n5 34\n17 22\n10 12\n6 4\n8 32\n29 24\n24 10\n34 22\n", "45 20\n37 5\n41 6\n13 22\n28 24\n30 10\n39 35\n5 20\n38 32\n26 1\n23 37\n35 17\n21 12\n7 8\n1 7\n4 16\n8 40\n44 3\n27 23\n19 2\n33 27\n", "1 3\n1 1\n1 1\n1 1\n", "47 36\n29 31\n25 45\n39 46\n12 19\n31 21\n4 41\n5 38\n33 3\n21 39\n40 1\n1 47\n35 12\n42 10\n2 4\n6 35\n17 16\n22 28\n14 22\n41 25\n10 14\n34 37\n27 20\n44 27\n20 2\n3 17\n45 13\n18 34\n47 15\n10 44\n25 15\n12 23\n27 17\n15 38\n17 32\n29 31\n3 39\n", "6 3\n3 4\n1 3\n2 5\n", "33 19\n27 23\n17 16\n20 33\n3 11\n1 31\n26 24\n25 10\n21 15\n14 9\n12 4\n29 2\n7 21\n32 13\n33 6\n5 26\n13 28\n6 22\n3 24\n27 19\n", "49 29\n43 18\n44 26\n49 31\n37 19\n20 16\n18 22\n30 5\n7 28\n12 2\n31 11\n27 43\n25 9\n19 4\n35 25\n4 30\n6 27\n46 41\n38 23\n17 37\n13 8\n11 38\n29 20\n40 10\n22 29\n36 7\n17 36\n35 48\n41 36\n39 27\n", "50 0\n", "40 29\n23 2\n40 16\n35 31\n2 40\n39 35\n18 11\n21 7\n3 6\n15 5\n4 18\n17 19\n8 34\n16 17\n9 39\n37 21\n19 26\n26 36\n33 4\n10 9\n34 22\n13 20\n32 40\n35 11\n5 12\n14 5\n5 24\n40 6\n32 35\n21 21\n", "41 28\n6 28\n1 38\n11 7\n12 26\n10 36\n9 21\n8 3\n2 20\n33 32\n21 40\n34 10\n22 15\n30 22\n5 12\n19 35\n13 6\n31 37\n25 4\n15 23\n37 33\n19 19\n20 6\n14 8\n9 12\n27 33\n28 27\n37 11\n36 20\n", "39 25\n8 23\n27 38\n6 32\n20 33\n7 34\n22 26\n32 12\n23 2\n28 20\n33 35\n18 10\n1 21\n11 18\n39 28\n17 9\n36 8\n15 17\n14 1\n19 24\n37 30\n21 39\n38 13\n28 5\n36 30\n33 13\n", "46 24\n24 43\n38 20\n8 38\n22 13\n25 24\n40 35\n21 10\n7 39\n18 5\n33 19\n26 7\n1 27\n43 26\n9 17\n3 44\n44 14\n20 11\n5 2\n15 32\n23 8\n10 37\n27 23\n43 23\n33 25\n", "32 24\n9 15\n32 16\n26 7\n15 8\n30 21\n23 14\n22 17\n14 29\n19 1\n24 31\n3 22\n20 9\n5 23\n10 3\n27 24\n1 30\n8 18\n23 28\n14 4\n27 10\n11 9\n11 24\n11 18\n17 6\n", "44 31\n28 26\n5 36\n9 37\n36 29\n26 5\n25 42\n30 22\n29 3\n35 10\n44 28\n18 13\n16 6\n3 33\n22 9\n4 15\n27 19\n17 11\n19 41\n11 25\n10 30\n2 34\n12 7\n37 31\n16 40\n25 24\n28 44\n41 37\n21 21\n12 28\n20 23\n20 17\n", "48 32\n45 23\n17 3\n2 48\n47 20\n27 18\n13 28\n18 26\n26 21\n48 31\n21 9\n43 19\n34 43\n10 36\n14 17\n6 12\n3 11\n15 1\n23 37\n37 13\n42 40\n35 5\n16 7\n40 44\n4 29\n24 25\n5 16\n31 45\n39 22\n46 34\n22 30\n28 33\n33 41\n", "49 0\n", "45 22\n15 23\n14 30\n5 44\n43 21\n24 17\n37 38\n40 9\n41 43\n7 4\n38 22\n26 18\n44 41\n42 11\n4 33\n35 24\n36 15\n19 1\n1 37\n9 35\n12 40\n31 29\n18 25\n", "1 0\n", "35 28\n6 24\n35 10\n14 19\n30 34\n29 23\n21 16\n34 5\n22 6\n7 35\n13 29\n27 3\n8 27\n5 15\n26 11\n19 1\n31 28\n17 31\n18 20\n12 32\n4 17\n10 4\n32 8\n35 18\n9 5\n33 30\n24 25\n12 12\n34 3\n", "48 26\n27 5\n13 21\n14 20\n41 31\n4 26\n21 39\n31 17\n18 4\n42 2\n28 43\n11 23\n35 22\n34 18\n23 15\n10 13\n7 48\n5 44\n19 25\n12 7\n15 27\n39 41\n33 10\n45 40\n20 42\n29 38\n17 28\n", "1 2\n1 1\n1 1\n", "8 3\n3 8\n2 6\n1 7\n", "2 1\n1 1\n", "8 4\n1 7\n2 4\n6 2\n5 8\n", "6 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 1\n", "5 2\n1 5\n5 4\n", "6 6\n4 3\n3 5\n6 4\n1 6\n2 1\n5 2\n", "37 22\n2 15\n37 11\n14 29\n9 37\n15 23\n24 35\n18 3\n23 12\n34 33\n4 19\n22 14\n21 26\n28 27\n12 36\n8 6\n26 28\n31 1\n29 5\n27 25\n17 10\n33 18\n35 20\n", "4 1\n3 1\n", "49 26\n33 34\n43 21\n26 27\n46 33\n32 47\n6 3\n44 14\n34 42\n4 8\n27 29\n12 4\n42 7\n22 16\n5 31\n35 24\n39 40\n20 12\n17 44\n8 18\n38 26\n48 39\n31 17\n9 19\n10 23\n1 30\n49 38\n", "2 1\n2 1\n", "9 5\n5 2\n4 6\n8 4\n1 8\n2 1\n", "4 2\n3 1\n4 2\n", "7 6\n5 6\n2 7\n7 3\n4 1\n1 5\n3 4\n", "38 30\n21 36\n20 21\n9 11\n27 10\n25 20\n33 16\n11 23\n31 4\n13 22\n36 27\n32 37\n12 6\n35 31\n5 34\n6 14\n7 38\n26 18\n4 24\n18 5\n23 17\n29 28\n38 13\n10 30\n18 3\n15 25\n1 24\n22 22\n17 22\n36 18\n23 13\n", "7 4\n3 2\n2 6\n6 7\n1 5\n", "9 2\n2 5\n1 6\n", "2 0\n", "50 1\n2 3\n", "4 3\n1 2\n4 1\n2 3\n", "3 2\n1 2\n1 2\n", "47 26\n24 2\n13 24\n25 14\n35 6\n4 10\n11 18\n29 41\n37 13\n38 3\n2 31\n30 29\n6 42\n33 25\n41 45\n40 8\n28 47\n43 39\n39 38\n1 5\n45 22\n19 21\n18 37\n36 17\n27 28\n16 11\n12 30\n", "31 24\n6 25\n8 13\n29 20\n13 5\n26 8\n16 9\n31 2\n22 7\n24 21\n28 18\n9 12\n27 14\n20 24\n23 10\n10 27\n15 1\n21 28\n11 16\n12 29\n8 7\n10 28\n27 19\n17 3\n23 16\n", "2 1\n2 2\n", "50 1\n2 3\n", "4 3\n1 2\n1 3\n1 4\n", "36 23\n27 31\n33 14\n17 24\n14 25\n3 8\n1 21\n24 27\n13 26\n23 6\n35 22\n34 33\n36 4\n19 16\n18 15\n32 36\n5 7\n20 30\n21 11\n11 27\n8 23\n6 10\n4 31\n15 31\n", "5 3\n3 5\n4 2\n5 1\n", "49 0\n", "7 3\n7 4\n5 2\n1 3\n", "2 2\n1 1\n2 2\n", "50 21\n27 16\n42 35\n15 28\n46 17\n30 39\n47 18\n35 25\n26 24\n24 30\n28 41\n40 38\n11 21\n33 20\n43 10\n37 14\n1 43\n32 49\n49 6\n10 45\n21 50\n39 3\n", "1 1\n1 1\n", "46 25\n44 40\n25 10\n28 44\n26 4\n38 7\n27 3\n46 8\n32 28\n22 20\n14 33\n30 14\n12 23\n13 30\n40 18\n37 35\n10 16\n23 22\n3 46\n36 24\n19 12\n18 42\n11 34\n34 36\n9 32\n24 19\n", "5 2\n1 3\n4 1\n", "50 0\n", "43 36\n3 24\n25 36\n36 11\n12 38\n11 32\n15 3\n8 9\n2 17\n5 40\n21 37\n39 20\n28 30\n16 22\n27 13\n31 6\n24 39\n34 19\n35 18\n43 21\n41 4\n7 31\n33 26\n6 5\n42 27\n29 2\n30 10\n40 1\n1 29\n20 14\n40 29\n29 6\n26 27\n37 21\n19 9\n31 4\n19 38\n", "8 5\n4 7\n3 6\n8 3\n6 5\n1 2\n"], "output": ["NO\n", "YES\n0\n", "YES\n1\n1 3\n", "YES\n0\n", "NO\n", "NO\n", "NO\n", "YES\n5\n1 2\n1 4\n4 6\n5 9\n7 9\n", "YES\n5\n1 2\n2 3\n3 5\n4 6\n5 6\n", "NO\n", "YES\n25\n2 3\n4 6\n9 10\n9 11\n11 12\n13 14\n14 15\n15 16\n17 18\n18 19\n20 21\n22 24\n25 26\n25 28\n29 30\n29 31\n31 32\n33 34\n34 36\n36 39\n38 40\n41 42\n42 43\n43 45\n44 45\n", "NO\n", "NO\n", "YES\n3\n1 2\n4 6\n5 6\n", "YES\n14\n1 2\n4 5\n7 8\n8 9\n10 11\n12 14\n15 16\n17 18\n18 19\n20 23\n22 28\n25 29\n30 31\n30 32\n", "NO\n", "YES\n50\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n33 35\n34 36\n35 37\n36 38\n37 39\n38 40\n39 41\n40 42\n41 43\n42 44\n43 45\n44 46\n45 47\n46 48\n47 49\n48 50\n49 50\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n16\n1 2\n4 6\n7 8\n8 9\n10 11\n12 14\n15 19\n20 24\n25 27\n29 30\n32 35\n32 36\n38 39\n38 41\n42 46\n44 47\n", "YES\n49\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n33 35\n34 36\n35 37\n36 38\n37 39\n38 40\n39 41\n40 42\n41 43\n42 44\n43 45\n44 46\n45 47\n46 48\n47 49\n48 49\n", "YES\n23\n2 3\n2 5\n3 6\n6 7\n8 10\n8 11\n10 12\n13 14\n13 16\n16 17\n19 20\n20 21\n22 23\n25 27\n26 28\n27 29\n28 30\n31 32\n32 33\n34 36\n34 39\n39 45\n42 45\n", "YES\n1\n1 1\n", "NO\n", "YES\n22\n1 2\n1 3\n3 6\n6 8\n8 9\n9 11\n12 14\n16 19\n16 22\n24 25\n24 26\n29 30\n30 32\n32 33\n34 36\n35 37\n36 38\n37 40\n43 44\n45 46\n46 47\n47 48\n", "NO\n", "YES\n5\n1 2\n3 4\n4 5\n5 6\n7 8\n", "NO\n", "YES\n4\n1 3\n3 4\n5 6\n7 8\n", "NO\n", "YES\n3\n1 2\n2 3\n3 4\n", "YES\n0\n", "YES\n15\n1 2\n3 4\n5 6\n7 8\n7 9\n10 11\n13 16\n13 17\n16 19\n20 21\n22 24\n25 30\n30 31\n32 34\n32 36\n", "YES\n3\n1 2\n2 4\n3 4\n", "YES\n23\n1 2\n2 3\n5 6\n7 9\n10 11\n11 13\n13 14\n15 16\n15 18\n19 20\n21 22\n23 24\n25 28\n25 29\n28 30\n32 35\n36 37\n36 40\n37 41\n41 43\n45 46\n45 47\n48 49\n", "YES\n1\n1 2\n", "YES\n4\n3 5\n3 7\n6 9\n7 9\n", "YES\n2\n1 2\n3 4\n", "YES\n1\n2 6\n", "NO\n", "YES\n3\n1 3\n4 5\n4 7\n", "YES\n7\n1 2\n3 4\n3 5\n4 7\n6 8\n7 9\n8 9\n", "YES\n2\n1 2\n1 2\n", "YES\n49\n1 2\n1 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n33 35\n34 36\n35 37\n36 38\n37 39\n38 40\n39 41\n40 42\n41 43\n42 44\n43 45\n44 46\n45 47\n46 48\n47 49\n48 50\n49 50\n", "YES\n1\n3 4\n", "NO\n", "YES\n21\n1 3\n4 5\n7 8\n7 9\n9 10\n12 14\n15 16\n15 17\n19 20\n20 22\n21 23\n23 26\n26 27\n31 32\n32 33\n34 35\n34 36\n40 42\n43 44\n44 46\n46 47\n", "NO\n", "NO\n", "YES\n49\n1 2\n1 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n33 35\n34 36\n35 37\n36 38\n37 39\n38 40\n39 41\n40 42\n41 43\n42 44\n43 45\n44 46\n45 47\n46 48\n47 49\n48 50\n49 50\n", "NO\n", "NO\n", "YES\n2\n1 2\n3 4\n", "YES\n49\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n33 35\n34 36\n35 37\n36 38\n37 39\n38 40\n39 41\n40 42\n41 43\n42 44\n43 45\n44 46\n45 47\n46 48\n47 49\n48 49\n", "YES\n4\n1 2\n3 4\n5 6\n6 7\n", "NO\n", "YES\n29\n1 2\n2 3\n4 5\n4 6\n5 7\n7 8\n8 9\n9 11\n12 13\n12 14\n13 15\n16 17\n18 19\n19 20\n22 23\n22 25\n23 26\n27 29\n29 31\n31 32\n33 34\n34 36\n36 37\n38 41\n40 42\n44 45\n44 46\n47 48\n48 50\n", "YES\n0\n", "YES\n21\n1 2\n1 4\n2 5\n5 6\n6 7\n8 9\n11 13\n15 16\n15 17\n17 20\n21 25\n21 26\n27 29\n29 31\n31 33\n35 38\n37 39\n39 41\n41 43\n42 45\n43 45\n", "YES\n3\n2 3\n2 5\n4 5\n", "YES\n50\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n33 35\n34 36\n35 37\n36 38\n37 39\n38 40\n39 41\n40 42\n41 43\n42 44\n43 45\n44 46\n45 47\n46 48\n47 49\n48 50\n49 50\n", "NO\n", "YES\n3\n1 4\n2 5\n7 8\n"]}, "generated_tests": {"input": ["42 28\n7 19\n15 24\n3 42\n18 5\n32 27\n26 20\n40 30\n35 2\n14 8\n22 8\n36 4\n16 14\n21 29\n37 40\n2 12\n30 21\n19 17\n39 34\n31 28\n20 3\n4 33\n11 42\n26 21\n9 10\n4 32\n6 1\n1 14\n14 12\n", "45 20\n37 5\n41 6\n13 22\n28 24\n30 10\n39 35\n5 20\n38 32\n26 1\n23 37\n35 29\n21 12\n7 8\n1 7\n4 16\n8 40\n44 3\n27 23\n19 2\n33 27\n", "45 22\n15 23\n14 30\n5 44\n43 21\n24 17\n37 38\n40 9\n41 43\n7 4\n38 8\n26 18\n44 41\n42 11\n4 33\n35 24\n36 15\n19 1\n1 37\n9 35\n12 40\n31 29\n18 25\n", "48 26\n27 5\n13 21\n14 20\n41 31\n4 26\n21 39\n31 6\n18 4\n42 2\n28 43\n11 23\n35 22\n34 18\n23 15\n10 13\n7 48\n5 44\n19 25\n12 7\n15 27\n39 41\n33 10\n45 40\n20 42\n29 38\n17 28\n", "8 4\n1 7\n2 8\n6 2\n5 8\n", "37 22\n2 15\n37 11\n14 29\n9 37\n9 23\n24 35\n18 3\n23 12\n34 33\n4 19\n22 14\n21 26\n28 27\n12 36\n8 6\n26 28\n31 1\n29 5\n27 25\n17 10\n33 18\n35 20\n", "7 6\n5 6\n2 7\n7 3\n2 1\n1 5\n3 4\n", "9 2\n2 6\n1 6\n", "11 1\n2 3\n", "50 21\n27 16\n42 35\n15 28\n46 17\n30 39\n47 18\n48 25\n26 24\n24 30\n28 41\n40 38\n11 21\n33 20\n43 10\n37 14\n1 43\n32 49\n49 6\n10 45\n21 50\n39 3\n", "2 1\n1 2\n", "46 25\n44 40\n25 10\n28 44\n26 4\n38 7\n27 3\n46 8\n32 28\n22 20\n14 33\n30 14\n12 23\n13 30\n40 18\n37 35\n10 16\n23 22\n3 46\n36 24\n19 15\n18 42\n11 34\n34 36\n9 32\n24 19\n", "4 2\n1 3\n4 1\n", "6 0\n", "4 2\n1 2\n2 3\n", "11 1\n2 6\n", "4 1\n1 2\n", "4 2\n1 3\n4 2\n", "10 1\n2 6\n", "50 27\n10 7\n32 9\n17 33\n25 34\n47 28\n23 16\n15 46\n41 50\n18 24\n27 19\n29 36\n19 38\n50 31\n31 40\n4 14\n1 11\n6 48\n33 35\n36 30\n39 12\n28 45\n2 1\n22 13\n3 49\n29 36\n7 34\n36 8\n", "30 21\n6 14\n19 17\n25 20\n28 10\n10 3\n24 23\n22 13\n1 7\n11 26\n24 1\n16 8\n14 9\n30 15\n4 27\n13 21\n20 12\n24 14\n19 10\n7 10\n16 8\n26 11\n", "34 18\n9 14\n30 23\n4 3\n34 19\n26 2\n31 28\n7 21\n20 27\n16 15\n18 20\n5 34\n17 22\n10 12\n6 4\n8 32\n29 24\n24 10\n34 22\n", "47 36\n29 31\n25 45\n39 46\n12 19\n41 21\n4 41\n5 38\n33 3\n21 39\n40 1\n1 47\n35 12\n42 10\n2 4\n6 35\n17 16\n22 28\n14 22\n41 25\n10 14\n34 37\n27 20\n44 27\n20 2\n3 17\n45 13\n18 34\n47 15\n10 44\n25 15\n12 23\n27 17\n15 38\n17 32\n29 31\n3 39\n", "33 19\n27 23\n17 16\n20 33\n6 11\n1 31\n26 24\n25 10\n21 15\n14 9\n12 4\n29 2\n7 21\n32 13\n33 6\n5 26\n13 28\n6 22\n3 24\n27 19\n", "49 29\n43 18\n44 26\n49 31\n37 19\n20 16\n18 22\n30 5\n7 28\n12 2\n31 11\n27 43\n25 9\n19 4\n35 25\n4 30\n6 27\n46 41\n38 23\n4 37\n13 8\n11 38\n29 20\n40 10\n22 29\n36 7\n17 36\n35 48\n41 36\n39 27\n", "40 29\n23 2\n40 16\n35 31\n2 40\n39 35\n18 11\n21 7\n3 6\n15 5\n5 18\n17 19\n8 34\n16 17\n9 39\n37 21\n19 26\n26 36\n33 4\n10 9\n34 22\n13 20\n32 40\n35 11\n5 12\n14 5\n5 24\n40 6\n32 35\n21 21\n", "41 28\n6 28\n1 38\n11 7\n12 26\n10 36\n9 21\n8 3\n2 20\n33 32\n21 40\n34 10\n22 15\n30 22\n5 12\n19 35\n13 6\n31 37\n25 4\n15 23\n37 33\n19 19\n20 6\n14 8\n17 12\n27 33\n28 27\n37 11\n36 20\n", "39 25\n8 23\n27 38\n6 32\n20 33\n7 34\n22 26\n32 12\n23 2\n28 20\n33 35\n18 10\n1 37\n11 18\n39 28\n17 9\n36 8\n15 17\n14 1\n19 24\n37 30\n21 39\n38 13\n28 5\n36 30\n33 13\n", "32 24\n9 15\n32 16\n26 7\n15 8\n30 21\n23 14\n22 17\n14 29\n19 1\n24 31\n3 22\n20 18\n5 23\n10 3\n27 24\n1 30\n8 18\n23 28\n14 4\n27 10\n11 9\n11 24\n11 18\n17 6\n", "44 31\n28 26\n5 36\n9 37\n36 29\n26 5\n25 42\n30 22\n29 3\n35 10\n44 28\n19 13\n16 6\n3 33\n22 9\n4 15\n27 19\n17 11\n19 41\n11 25\n10 30\n2 34\n12 7\n37 31\n16 40\n25 24\n28 44\n41 37\n21 21\n12 28\n20 23\n20 17\n", "35 28\n6 24\n35 10\n14 19\n30 34\n29 23\n21 16\n34 5\n22 6\n7 35\n13 29\n27 3\n8 27\n5 15\n26 11\n19 1\n31 28\n17 31\n18 20\n12 32\n4 17\n10 4\n32 12\n35 18\n9 5\n33 30\n24 25\n12 12\n34 3\n", "38 30\n21 36\n20 21\n9 11\n27 10\n25 20\n33 16\n11 23\n31 4\n13 22\n36 27\n32 37\n12 6\n35 9\n5 34\n6 14\n7 38\n26 18\n4 24\n18 5\n23 17\n29 28\n38 13\n10 30\n18 3\n15 25\n1 24\n22 22\n17 22\n36 18\n23 13\n", "31 24\n6 25\n8 13\n29 20\n13 5\n26 8\n16 9\n31 2\n22 7\n24 21\n28 18\n9 12\n13 14\n20 24\n23 10\n10 27\n15 1\n21 28\n11 16\n12 29\n8 7\n10 28\n27 19\n17 3\n23 16\n", "36 23\n27 31\n33 14\n34 24\n14 25\n3 8\n1 21\n24 27\n13 26\n23 6\n35 22\n34 33\n36 4\n19 16\n18 15\n32 36\n5 7\n20 30\n21 11\n11 27\n8 23\n6 10\n4 31\n15 31\n", "43 36\n3 24\n25 36\n36 11\n12 38\n11 32\n15 3\n8 9\n2 17\n5 40\n21 37\n39 20\n28 30\n16 22\n27 13\n31 6\n24 39\n34 19\n35 18\n43 21\n41 4\n7 31\n33 26\n6 5\n42 27\n29 2\n30 10\n40 1\n1 29\n20 14\n40 29\n29 6\n26 27\n37 21\n19 9\n31 4\n9 38\n", "42 28\n7 19\n15 24\n3 42\n18 5\n32 27\n26 20\n40 30\n35 2\n14 8\n22 8\n36 4\n16 14\n21 29\n37 3\n2 12\n30 21\n19 17\n39 34\n31 28\n20 3\n4 33\n11 42\n26 21\n9 10\n4 32\n6 1\n1 14\n14 12\n", "30 21\n6 14\n19 17\n25 20\n28 10\n10 3\n24 23\n22 13\n1 7\n11 26\n24 1\n16 8\n14 9\n30 15\n4 27\n13 21\n11 12\n24 14\n19 10\n7 10\n16 8\n26 11\n", "34 18\n9 14\n30 29\n4 3\n34 19\n26 2\n31 28\n7 21\n20 27\n16 15\n18 20\n5 34\n17 22\n10 12\n6 4\n8 32\n29 24\n24 10\n34 22\n", "47 36\n29 31\n25 45\n39 46\n12 19\n41 21\n4 41\n5 38\n33 3\n21 39\n40 2\n1 47\n35 12\n42 10\n2 4\n6 35\n17 16\n22 28\n14 22\n41 25\n10 14\n34 37\n27 20\n44 27\n20 2\n3 17\n45 13\n18 34\n47 15\n10 44\n25 15\n12 23\n27 17\n15 38\n17 32\n29 31\n3 39\n", "33 19\n27 23\n32 16\n20 33\n6 11\n1 31\n26 24\n25 10\n21 15\n14 9\n12 4\n29 2\n7 21\n32 13\n33 6\n5 26\n13 28\n6 22\n3 24\n27 19\n", "44 31\n28 26\n5 36\n9 37\n36 29\n26 5\n25 42\n30 22\n29 3\n35 10\n44 28\n19 13\n16 6\n3 33\n22 9\n4 15\n27 19\n17 11\n19 41\n11 25\n10 30\n2 34\n12 7\n37 31\n16 40\n25 24\n28 44\n41 37\n21 21\n20 28\n20 23\n20 17\n", "35 28\n6 24\n35 10\n14 19\n30 34\n29 23\n21 16\n34 5\n22 6\n7 35\n13 29\n27 3\n8 27\n5 15\n26 11\n19 1\n31 28\n28 31\n18 20\n12 32\n4 17\n10 4\n32 12\n35 18\n9 5\n33 30\n24 25\n12 12\n34 3\n", "48 26\n27 5\n13 21\n14 20\n41 31\n4 26\n21 39\n31 6\n18 4\n42 2\n28 43\n11 23\n35 22\n34 18\n23 15\n10 13\n7 48\n5 23\n19 25\n12 7\n15 27\n39 41\n33 10\n45 40\n20 42\n29 38\n17 28\n", "7 6\n5 6\n2 7\n7 3\n2 1\n1 5\n3 7\n", "36 23\n27 31\n33 14\n34 24\n14 25\n3 8\n1 21\n24 27\n13 26\n23 6\n35 22\n34 33\n36 4\n15 16\n18 15\n32 36\n5 7\n20 30\n21 11\n11 27\n8 23\n6 10\n4 31\n15 31\n", "46 25\n44 40\n25 10\n28 44\n26 4\n38 7\n27 3\n46 8\n32 28\n22 20\n14 33\n30 14\n12 23\n13 30\n40 30\n37 35\n10 16\n23 22\n3 46\n36 24\n19 15\n18 42\n11 34\n34 36\n9 32\n24 19\n", "43 36\n3 24\n25 36\n36 11\n12 38\n11 32\n15 3\n8 1\n2 17\n5 40\n21 37\n39 20\n28 30\n16 22\n27 13\n31 6\n24 39\n34 19\n35 18\n43 21\n41 4\n7 31\n33 26\n6 5\n42 27\n29 2\n30 10\n40 1\n1 29\n20 14\n40 29\n29 6\n26 27\n37 21\n19 9\n31 4\n9 38\n", "30 21\n3 14\n19 17\n25 20\n28 10\n10 3\n24 23\n22 13\n1 7\n11 26\n24 1\n16 8\n14 9\n30 15\n4 27\n13 21\n11 12\n24 14\n19 10\n7 10\n16 8\n26 11\n", "47 36\n29 31\n25 45\n39 46\n12 19\n41 21\n4 41\n5 38\n33 3\n21 39\n40 2\n1 47\n35 12\n42 10\n2 4\n6 35\n17 16\n22 28\n14 22\n41 25\n10 14\n34 37\n27 20\n46 27\n20 2\n3 17\n45 13\n18 34\n47 15\n10 44\n25 15\n12 23\n27 17\n15 38\n17 32\n29 31\n3 39\n", "44 31\n28 26\n5 36\n9 37\n36 29\n26 5\n25 42\n30 22\n29 3\n35 10\n44 28\n19 13\n16 6\n3 33\n22 2\n4 15\n27 19\n17 11\n19 41\n11 25\n10 30\n2 34\n12 7\n37 31\n16 40\n25 24\n28 44\n41 37\n21 21\n20 28\n20 23\n20 17\n", "35 28\n6 24\n35 10\n14 19\n30 34\n29 23\n21 16\n34 5\n22 6\n7 35\n13 29\n27 3\n8 27\n5 15\n26 11\n19 1\n31 28\n28 31\n18 20\n12 32\n4 17\n10 4\n32 12\n35 18\n9 5\n7 30\n24 25\n12 12\n34 3\n", "48 26\n27 5\n13 21\n14 20\n41 31\n4 26\n21 39\n31 6\n18 4\n42 2\n28 43\n11 23\n35 22\n34 18\n23 15\n10 13\n7 48\n5 23\n19 21\n12 7\n15 27\n39 41\n33 10\n45 40\n20 42\n29 38\n17 28\n", "36 23\n27 31\n33 14\n34 24\n14 25\n3 8\n1 21\n24 27\n13 26\n23 6\n35 22\n34 33\n36 4\n15 16\n18 15\n32 36\n5 9\n20 30\n21 11\n11 27\n8 23\n6 10\n4 31\n15 31\n", "46 25\n44 40\n25 10\n28 44\n26 4\n38 7\n27 3\n46 8\n32 28\n22 20\n14 33\n30 14\n12 23\n13 30\n40 30\n37 35\n10 16\n23 22\n3 46\n36 24\n26 15\n18 42\n11 34\n34 36\n9 32\n24 19\n"], "output": ["NO\n", "YES\n25\n2 3\n4 6\n9 10\n9 11\n11 12\n13 14\n14 15\n15 16\n17 18\n17 19\n18 20\n21 22\n24 25\n25 26\n28 29\n30 31\n31 32\n33 34\n34 36\n36 38\n39 41\n40 42\n42 43\n43 45\n44 45\n", "YES\n23\n2 3\n2 5\n3 6\n6 7\n8 10\n10 11\n12 13\n13 14\n16 17\n16 19\n20 21\n20 22\n22 23\n25 27\n26 28\n27 29\n28 30\n31 32\n32 33\n34 36\n34 39\n39 45\n42 45\n", "YES\n22\n1 2\n1 3\n3 6\n8 9\n8 11\n9 12\n14 16\n16 17\n19 22\n24 25\n24 26\n29 30\n30 32\n32 33\n34 36\n35 37\n36 38\n37 40\n43 44\n45 46\n46 47\n47 48\n", "YES\n4\n1 3\n3 4\n4 5\n6 7\n", "YES\n15\n1 2\n3 4\n5 6\n7 8\n7 10\n11 13\n13 15\n16 17\n16 19\n20 21\n22 24\n25 30\n30 31\n32 34\n32 36\n", "YES\n1\n4 6\n", "YES\n7\n1 3\n2 4\n3 5\n4 7\n5 8\n7 9\n8 9\n", "YES\n10\n1 2\n1 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 11\n", "YES\n29\n1 2\n2 3\n4 5\n4 6\n5 7\n7 8\n8 9\n9 11\n12 13\n12 14\n13 15\n16 17\n18 19\n19 20\n22 23\n22 25\n23 26\n27 29\n29 31\n31 32\n33 34\n34 35\n36 37\n36 38\n40 42\n41 44\n44 45\n46 47\n48 50\n", "YES\n1\n1 2\n", "YES\n21\n1 2\n1 4\n2 5\n5 6\n6 7\n8 9\n11 12\n13 15\n16 17\n17 20\n21 25\n21 26\n27 29\n29 31\n31 33\n35 38\n37 39\n39 41\n41 43\n42 45\n43 45\n", "YES\n2\n2 3\n2 4\n", "YES\n6\n1 2\n1 3\n2 4\n3 5\n4 6\n5 6\n", "YES\n2\n1 4\n3 4\n", "YES\n10\n1 2\n1 3\n3 4\n4 5\n5 7\n6 8\n7 9\n8 10\n9 11\n10 11\n", "YES\n3\n1 3\n2 4\n3 4\n", "YES\n2\n1 2\n3 4\n", "YES\n9\n1 2\n1 3\n3 4\n4 5\n5 7\n6 8\n7 9\n8 10\n9 10\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary  \nGiven an undirected graph, test whether each connected component is a path or a single cycle (i.e. maximum degree \u22642 and edges = vertices or vertices\u20131), and if so, output a way to add edges between leaves to form one single cycle.\n\n2. Core algorithmic approach  \n\u2022 Depth-first search to label connected components and count them.  \n\u2022 Degree checks to enforce pseudoforest constraints (max degree \u22642 and edge-component count relations).  \n\u2022 Greedy two-pointer/leaf-matching to pair up \u201cleaf\u201d vertices from different components until all are joined into one cycle.\n\n3. Reusable components  \n\u2022 dfs(v, comp): standard adjacency-list DFS that marks all vertices in a component.  \n\u2022 Leaf collection pattern: scan degrees and emit each degree-1 vertex once and each isolated vertex twice, preparing for pairwise matching.  \n\u2022 Greedy component-merging using a list of sets (or could be replaced by union-find) to avoid matching within the same component and to track which components have been connected."}
{"name": "505_D. Mr. Kitayuta's Technology", "description": "Shuseki Kingdom is the world's leading nation for innovation and technology. There are n cities in the kingdom, numbered from 1 to n.\n\nThanks to Mr. Kitayuta's research, it has finally become possible to construct teleportation pipes between two cities. A teleportation pipe will connect two cities unidirectionally, that is, a teleportation pipe from city x to city y cannot be used to travel from city y to city x. The transportation within each city is extremely developed, therefore if a pipe from city x to city y and a pipe from city y to city z are both constructed, people will be able to travel from city x to city z instantly.\n\nMr. Kitayuta is also involved in national politics. He considers that the transportation between the m pairs of city (ai, bi) (1 \u2264 i \u2264 m) is important. He is planning to construct teleportation pipes so that for each important pair (ai, bi), it will be possible to travel from city ai to city bi by using one or more teleportation pipes (but not necessarily from city bi to city ai). Find the minimum number of teleportation pipes that need to be constructed. So far, no teleportation pipe has been constructed, and there is no other effective transportation between cities.\n\nInput\n\nThe first line contains two space-separated integers n and m (2 \u2264 n \u2264 105, 1 \u2264 m \u2264 105), denoting the number of the cities in Shuseki Kingdom and the number of the important pairs, respectively.\n\nThe following m lines describe the important pairs. The i-th of them (1 \u2264 i \u2264 m) contains two space-separated integers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi), denoting that it must be possible to travel from city ai to city bi by using one or more teleportation pipes (but not necessarily from city bi to city ai). It is guaranteed that all pairs (ai, bi) are distinct.\n\nOutput\n\nPrint the minimum required number of teleportation pipes to fulfill Mr. Kitayuta's purpose.\n\nExamples\n\nInput\n\n4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n\n\nOutput\n\n3\n\n\nInput\n\n4 6\n1 2\n1 4\n2 3\n2 4\n3 2\n3 4\n\n\nOutput\n\n4\n\nNote\n\nFor the first sample, one of the optimal ways to construct pipes is shown in the image below: \n\n<image>\n\nFor the second sample, one of the optimal ways is shown below: \n\n<image>", "solution": "def main():\n    n, m = map(int, input().split())\n    n += 1\n    cluster, dest, ab = list(range(n)), [0] * n, [[] for _ in range(n)]\n\n    def root(x):\n        if x != cluster[x]:\n            cluster[x] = x = root(cluster[x])\n        return x\n\n    for _ in range(m):\n        a, b = map(int, input().split())\n        ab[a].append(b)\n        dest[b] += 1\n        cluster[root(a)] = root(b)\n    pool = [a for a, f in enumerate(dest) if not f]\n    for a in pool:\n        for b in ab[a]:\n            dest[b] -= 1\n            if not dest[b]:\n                pool.append(b)\n    ab = [True] * n\n    for a, f in enumerate(dest):\n        if f:\n            ab[root(a)] = False\n    print(n - sum(f and a == c for a, c, f in zip(range(n), cluster, ab)))\n\n\nif __name__ == '__main__':\n    from sys import setrecursionlimit\n\n    setrecursionlimit(100500)\n    main()\n", "difficulty": 10, "public_tests": {"input": ["4 6\n1 2\n1 4\n2 3\n2 4\n3 2\n3 4\n", "4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n"], "output": ["4", "3"]}, "private_tests": {"input": ["7 13\n6 1\n7 2\n3 7\n6 5\n3 6\n7 4\n3 5\n4 1\n3 1\n1 5\n1 6\n6 2\n2 4\n", "8 12\n6 1\n7 5\n2 5\n4 1\n6 3\n4 3\n5 7\n1 3\n5 2\n2 7\n4 6\n7 2\n", "10 10\n10 6\n9 4\n7 8\n1 5\n3 10\n2 1\n4 9\n5 2\n10 3\n6 3\n", "10 4\n7 4\n6 8\n2 3\n3 8\n", "2 1\n1 2\n", "5 3\n4 2\n2 1\n5 4\n", "10 4\n8 4\n9 8\n2 8\n8 1\n", "6 7\n5 4\n3 1\n4 2\n2 1\n5 2\n2 3\n2 6\n", "8 7\n6 3\n2 4\n3 7\n8 2\n4 8\n7 6\n3 2\n", "7 8\n4 6\n2 1\n2 5\n7 4\n7 1\n7 2\n1 4\n2 4\n", "9 10\n6 4\n7 5\n9 3\n7 6\n4 8\n4 2\n9 8\n1 3\n5 1\n4 7\n", "8 5\n3 1\n7 5\n2 5\n8 6\n1 3\n", "5 7\n4 3\n2 5\n2 1\n3 2\n1 3\n3 4\n1 4\n", "3 6\n1 2\n1 3\n2 1\n2 3\n3 1\n3 2\n", "5 4\n2 5\n4 3\n5 2\n5 1\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "7 7\n7 3\n5 4\n4 7\n5 7\n6 3\n5 6\n3 4\n", "9 5\n5 8\n7 4\n7 2\n9 8\n9 5\n"], "output": ["7", "6", "9", "4", "1", "3", "4", "5", "6", "5", "9", "5", "5", "3", "4", "3", "5", "4"]}, "generated_tests": {"input": ["7 13\n6 1\n7 2\n3 7\n6 5\n3 6\n7 4\n3 5\n4 1\n3 1\n1 5\n1 6\n4 2\n2 4\n", "10 10\n10 6\n9 4\n7 8\n1 4\n3 10\n2 1\n4 9\n5 2\n10 3\n6 3\n", "10 4\n7 4\n6 7\n2 3\n3 8\n", "8 7\n6 3\n2 4\n3 3\n8 2\n4 8\n7 6\n3 2\n", "8 5\n3 1\n7 5\n2 5\n8 2\n1 3\n", "3 6\n1 2\n1 2\n2 1\n2 3\n3 1\n3 2\n", "10 10\n10 6\n9 4\n7 8\n1 4\n6 10\n2 1\n1 9\n5 1\n10 3\n6 3\n", "7 8\n4 6\n3 1\n2 5\n7 4\n7 1\n7 2\n1 4\n2 4\n", "9 10\n6 4\n7 7\n9 3\n7 6\n4 8\n4 2\n9 8\n1 3\n5 1\n4 7\n", "5 7\n4 3\n2 3\n2 1\n3 2\n1 3\n3 4\n1 4\n", "4 6\n1 2\n1 3\n1 4\n2 4\n2 4\n3 4\n", "9 5\n5 8\n8 4\n7 2\n9 8\n9 5\n", "4 6\n1 3\n1 4\n2 3\n2 4\n3 2\n3 4\n", "7 13\n6 1\n7 2\n3 7\n6 5\n3 6\n7 4\n3 7\n4 1\n3 1\n1 5\n1 6\n4 2\n2 4\n", "10 10\n10 6\n9 4\n7 8\n1 4\n3 10\n2 1\n4 9\n5 1\n10 3\n6 3\n", "10 4\n7 4\n6 7\n2 3\n3 1\n", "8 7\n6 3\n2 6\n3 3\n8 2\n4 8\n7 6\n3 2\n", "7 8\n4 6\n3 1\n2 5\n7 4\n3 1\n7 2\n1 4\n2 4\n", "9 10\n6 4\n7 8\n9 3\n7 6\n4 8\n4 2\n9 8\n1 3\n5 1\n4 7\n", "9 5\n5 8\n8 6\n7 2\n9 8\n9 5\n", "4 6\n1 3\n1 4\n2 3\n2 4\n1 2\n3 4\n", "10 10\n10 6\n9 4\n7 9\n1 4\n3 10\n2 1\n4 9\n5 1\n10 3\n6 3\n", "10 4\n7 4\n6 7\n1 3\n3 1\n", "7 8\n4 6\n3 1\n2 6\n7 4\n3 1\n7 2\n1 4\n2 4\n", "7 8\n2 6\n3 1\n2 6\n7 4\n3 1\n7 2\n1 4\n2 4\n", "10 10\n3 6\n9 4\n7 8\n1 5\n3 10\n2 1\n4 9\n5 2\n10 3\n6 3\n", "8 7\n6 3\n2 4\n3 7\n8 2\n4 8\n5 6\n3 2\n", "7 8\n4 6\n2 1\n2 5\n7 4\n7 1\n5 2\n1 4\n2 4\n", "9 10\n6 4\n7 5\n9 3\n7 6\n4 8\n4 2\n9 8\n1 3\n5 1\n4 6\n", "3 6\n1 1\n1 3\n2 1\n2 3\n3 1\n3 2\n", "5 4\n2 5\n4 3\n3 2\n5 1\n", "17 5\n5 8\n7 4\n7 2\n9 8\n9 5\n", "4 6\n2 2\n1 4\n2 3\n2 4\n3 2\n3 4\n", "4 5\n1 2\n1 3\n1 4\n1 3\n2 4\n", "7 13\n6 1\n7 2\n3 7\n6 5\n3 6\n7 4\n3 4\n4 1\n3 1\n1 5\n1 6\n4 2\n2 4\n", "5 7\n4 3\n2 3\n2 1\n3 2\n1 5\n3 4\n1 4\n", "4 6\n1 1\n1 4\n2 3\n2 4\n3 2\n3 4\n", "10 10\n10 6\n9 4\n7 8\n1 4\n6 10\n2 1\n4 9\n5 1\n10 3\n6 3\n", "10 4\n7 4\n6 7\n2 3\n5 1\n", "7 8\n4 6\n3 1\n2 5\n7 4\n3 1\n3 2\n1 4\n2 4\n", "16 5\n5 8\n8 6\n7 2\n9 8\n9 5\n", "10 10\n10 6\n9 4\n7 4\n1 4\n3 10\n2 1\n4 9\n5 1\n10 3\n6 3\n", "10 4\n7 4\n6 7\n1 3\n2 1\n", "7 8\n4 6\n3 1\n2 6\n7 4\n6 1\n7 2\n1 4\n2 4\n", "10 10\n3 6\n9 4\n7 8\n1 5\n3 10\n3 1\n4 9\n5 2\n10 3\n6 3\n", "8 7\n6 5\n2 4\n3 7\n8 2\n4 8\n5 6\n3 2\n", "7 8\n4 6\n2 1\n3 5\n7 4\n7 1\n5 2\n1 4\n2 4\n", "13 10\n6 4\n7 5\n9 3\n7 6\n4 8\n4 2\n9 8\n1 3\n5 1\n4 6\n", "3 6\n2 1\n1 3\n2 1\n2 3\n3 1\n3 2\n", "5 4\n2 5\n1 3\n3 2\n5 1\n", "5 7\n4 3\n2 3\n2 1\n3 2\n1 5\n4 4\n1 4\n", "10 4\n7 4\n6 7\n2 3\n2 1\n", "13 10\n6 4\n7 5\n9 3\n7 6\n4 8\n4 2\n9 8\n1 4\n5 1\n4 6\n", "5 4\n2 5\n1 4\n3 2\n5 1\n", "10 4\n7 5\n6 7\n2 3\n2 1\n", "7 13\n6 1\n7 2\n1 7\n6 5\n3 6\n7 4\n3 5\n4 1\n3 1\n1 5\n1 6\n6 2\n2 4\n", "8 12\n6 1\n7 5\n2 5\n4 1\n6 3\n6 3\n5 7\n1 3\n5 2\n2 7\n4 6\n7 2\n", "10 10\n10 5\n9 4\n7 8\n1 5\n3 10\n2 1\n4 9\n5 2\n10 3\n6 3\n", "10 4\n7 4\n10 8\n2 3\n3 8\n", "5 3\n4 2\n2 1\n1 4\n", "10 4\n8 4\n9 6\n2 8\n8 1\n", "6 7\n5 4\n3 1\n4 2\n2 1\n5 2\n2 3\n3 6\n", "8 7\n6 3\n2 4\n3 7\n8 2\n4 8\n7 4\n3 2\n"], "output": ["7\n", "9\n", "4\n", "6\n", "5\n", "3\n", "8\n", "6\n", "9\n", "4\n", "3\n", "4\n", "4\n", "7\n", "9\n", "4\n", "6\n", "6\n", "9\n", "4\n", "3\n", "9\n", "4\n", "5\n", "5\n", "9\n", "7\n", "6\n", "9\n", "3\n", "4\n", "4\n", "4\n", "3\n", "7\n", "5\n", "4\n", "9\n", "4\n", "6\n", "4\n", "9\n", "4\n", "6\n", "9\n", "7\n", "6\n", "9\n", "3\n", "4\n", "5\n", "4\n", "9\n", "4\n", "4\n", "7\n", "6\n", "9\n", "4\n", "3\n", "4\n", "5\n", "6\n"]}, "short_description": "1. One-sentence summary:  \n   Given a directed graph, the code identifies all weakly-connected components and counts how many of those components contain at least one cycle (i.e., cannot be fully eliminated by repeatedly removing zero-indegree nodes).\n\n2. Core algorithmic approach:  \n   - Union-find (disjoint-set) to merge endpoints of each directed edge into weakly-connected components.  \n   - Kahn\u2019s algorithm (topological sort via zero-indegree queue) to peel off all nodes not in cycles, thereby flagging nodes that remain (i.e., those in cycles).  \n\n3. Reusable components:  \n   a. A union-find data structure with path compression (root and union operations) for maintaining and querying weakly-connected components.  \n   b. Indegree tracking combined with a queue (or list used as a queue) to implement Kahn\u2019s algorithm for detecting and removing acyclic nodes in a directed graph.  \n   c. A pattern that combines component labels with per-node flags (e.g., \u201cis in a cycle?\u201d) to aggregate or filter component-level properties."}
{"name": "505_B. Mr. Kitayuta's Colorful Graph", "description": "Mr. Kitayuta has just bought an undirected graph consisting of n vertices and m edges. The vertices of the graph are numbered from 1 to n. Each edge, namely edge i, has a color ci, connecting vertex ai and bi.\n\nMr. Kitayuta wants you to process the following q queries.\n\nIn the i-th query, he gives you two integers \u2014 ui and vi.\n\nFind the number of the colors that satisfy the following condition: the edges of that color connect vertex ui and vertex vi directly or indirectly.\n\nInput\n\nThe first line of the input contains space-separated two integers \u2014 n and m (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 100), denoting the number of the vertices and the number of the edges, respectively.\n\nThe next m lines contain space-separated three integers \u2014 ai, bi (1 \u2264 ai < bi \u2264 n) and ci (1 \u2264 ci \u2264 m). Note that there can be multiple edges between two vertices. However, there are no multiple edges of the same color between two vertices, that is, if i \u2260 j, (ai, bi, ci) \u2260 (aj, bj, cj).\n\nThe next line contains a integer \u2014 q (1 \u2264 q \u2264 100), denoting the number of the queries.\n\nThen follows q lines, containing space-separated two integers \u2014 ui and vi (1 \u2264 ui, vi \u2264 n). It is guaranteed that ui \u2260 vi.\n\nOutput\n\nFor each query, print the answer in a separate line.\n\nExamples\n\nInput\n\n4 5\n1 2 1\n1 2 2\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n\n\nOutput\n\n2\n1\n0\n\n\nInput\n\n5 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n\n\nOutput\n\n1\n1\n1\n1\n2\n\nNote\n\nLet's consider the first sample. \n\n<image> The figure above shows the first sample. \n\n  * Vertex 1 and vertex 2 are connected by color 1 and 2. \n  * Vertex 3 and vertex 4 are connected by color 3. \n  * Vertex 1 and vertex 4 are not connected by any single color. ", "solution": "def build_graph():\n    line1 = input().strip().split()\n    n = int(line1[0])\n    m = int(line1[1])\n    graph = {}\n    for _ in range(m):\n        line = input().strip().split()\n        u = int(line[0])\n        v = int(line[1])\n        c = int(line[2])\n        if c not in graph:\n            graph[c] = {j: [] for j in range(1, n+1)}\n        graph[c][u].append(v)\n        graph[c][v].append(u)\n    return graph\n\ndef no_of_paths(u, v, graph):\n    x = 0\n    for c in graph:\n        parent = {}\n        parent = dfs_visit(v, graph[c], parent)\n        if u in parent:\n            x += 1\n    return x\n\ndef dfs_visit(i, adj_list, parent):\n    for j in adj_list[i]:\n        if j not in parent:\n            parent[j] = i\n            dfs_visit(j, adj_list, parent)\n    return parent\n\n\nif __name__ == \"__main__\":\n    graph = build_graph()\n    for _ in range(int(input())):\n        line = input().strip().split()\n        print(no_of_paths(int(line[0]), int(line[1]), graph))", "difficulty": 8, "public_tests": {"input": ["5 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "4 5\n1 2 1\n1 2 2\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n"], "output": ["1\n1\n1\n1\n2\n", "2\n1\n0\n"]}, "private_tests": {"input": ["2 1\n1 2 1\n1\n1 2\n", "2 3\n1 2 3\n1 2 2\n1 2 1\n1\n1 2\n", "2 5\n1 2 1\n1 2 2\n1 2 3\n1 2 4\n1 2 5\n1\n1 2\n"], "output": ["1\n", "3\n", "5\n"]}, "generated_tests": {"input": ["5 7\n1 1 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "4 5\n1 2 1\n1 1 2\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 5 1\n3 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "6 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "5 7\n1 1 1\n2 5 1\n1 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "6 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 2\n5 1\n2 5\n1 5\n1 4\n", "4 5\n2 2 1\n1 1 2\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n2 5\n1 2\n", "2 3\n1 2 3\n1 2 2\n2 2 1\n1\n1 2\n", "5 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 1\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "4 5\n1 4 1\n1 2 2\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "4 5\n1 2 1\n1 1 2\n2 3 1\n2 3 3\n2 1 3\n3\n1 2\n3 4\n1 4\n", "6 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 2\n5 1\n2 5\n1 5\n1 6\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 3\n2 5\n1 4\n", "4 5\n1 4 1\n1 2 2\n2 3 1\n2 1 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "4 5\n2 2 1\n1 1 2\n2 3 1\n2 3 3\n2 4 1\n2\n1 2\n3 4\n1 4\n", "4 5\n2 2 1\n1 1 2\n2 3 1\n2 3 3\n2 4 1\n1\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n4 5 2\n1 2 2\n4 3 2\n3 4 2\n5\n1 5\n5 2\n2 3\n2 5\n1 4\n", "8 7\n1 5 2\n2 5 1\n3 5 1\n4 5 1\n1 2 1\n2 3 1\n3 4 2\n5\n1 5\n5 1\n2 5\n2 5\n1 4\n", "5 7\n1 1 1\n2 5 1\n5 5 1\n4 5 2\n1 1 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "4 5\n1 2 2\n1 1 3\n2 3 1\n1 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "4 5\n1 2 1\n1 1 2\n2 3 1\n2 3 3\n2 1 3\n3\n1 2\n3 1\n1 4\n", "6 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 6 2\n3 4 2\n5\n1 2\n5 1\n2 5\n1 5\n1 6\n", "4 5\n2 2 1\n1 1 2\n2 3 1\n4 3 3\n2 4 1\n3\n1 2\n3 4\n1 4\n", "4 5\n1 4 1\n1 2 2\n2 3 1\n2 1 3\n3 4 3\n3\n1 2\n3 4\n1 4\n", "5 7\n2 1 1\n2 5 1\n3 5 1\n3 5 2\n1 2 2\n2 3 2\n3 4 2\n4\n1 5\n5 1\n2 5\n1 5\n1 4\n", "4 5\n2 2 1\n1 1 2\n2 3 1\n2 3 3\n2 1 1\n2\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 5 1\n5 5 1\n4 5 2\n1 1 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n2 4\n", "4 5\n2 2 1\n2 1 2\n2 3 1\n2 3 3\n4 4 1\n1\n1 2\n3 4\n1 4\n", "4 5\n1 2 2\n1 1 3\n1 3 1\n1 3 3\n2 4 3\n3\n1 2\n3 4\n2 4\n", "5 7\n1 1 1\n2 5 1\n1 5 1\n4 5 2\n1 2 2\n2 5 3\n3 3 2\n5\n1 5\n5 1\n2 5\n2 5\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n4 2 2\n1 2 1\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 3\n2 3\n1 4\n", "5 7\n1 5 2\n2 5 1\n3 5 2\n4 5 1\n1 3 1\n2 3 1\n3 4 2\n5\n1 5\n5 1\n2 5\n2 5\n1 4\n", "5 7\n1 1 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 4\n5 1\n2 5\n1 5\n1 4\n", "4 5\n1 2 1\n1 1 3\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 5 1\n5 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "4 5\n1 2 2\n1 1 2\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "4 5\n1 2 2\n1 1 3\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 5 1\n1 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n2 5\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n2 5\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n3 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n2 5\n1 2\n", "5 7\n1 1 1\n2 5 1\n3 5 1\n3 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "4 5\n1 3 1\n1 1 3\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 5 2\n5 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "4 5\n1 2 2\n1 1 2\n2 3 1\n4 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "4 5\n2 2 1\n1 1 2\n2 3 1\n2 3 3\n2 4 1\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n3 5 3\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n2 5\n1 2\n", "5 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 1\n2 3 1\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "5 7\n2 1 1\n2 5 1\n3 5 1\n3 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "5 5\n1 3 1\n1 1 3\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 5 2\n5 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n4 5\n1 5\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 2\n2 3\n2 5\n1 4\n", "5 7\n1 5 2\n2 5 1\n3 5 1\n4 5 1\n1 2 1\n2 3 1\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "5 7\n2 1 1\n2 5 1\n3 5 1\n3 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 2\n1 4\n", "5 5\n1 3 1\n1 1 3\n2 3 1\n4 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "8 7\n1 5 2\n2 5 1\n3 5 1\n4 5 1\n1 2 1\n2 3 1\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "5 5\n1 3 1\n1 1 3\n2 3 2\n4 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "4 5\n1 3 1\n1 1 3\n2 3 2\n4 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "7 5\n1 3 1\n1 1 3\n2 3 2\n4 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n3 5\n1 5\n1 4\n", "4 5\n1 2 2\n1 1 3\n1 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 5 1\n1 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n4 5\n1 5\n1 4\n", "5 7\n1 1 1\n2 5 1\n1 5 1\n4 5 2\n1 2 2\n2 5 2\n3 4 2\n5\n1 5\n5 1\n2 5\n2 5\n1 4\n", "5 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 1\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 4\n1 4\n", "5 7\n1 1 1\n2 5 1\n3 5 1\n3 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 4\n5 1\n2 5\n1 5\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n4 2 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 3\n2 5\n1 4\n", "5 7\n1 1 1\n2 5 2\n5 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n3 5\n1 5\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n1 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 2\n2 3\n2 5\n1 4\n", "5 7\n1 5 2\n2 5 1\n3 5 1\n4 5 1\n1 2 1\n2 3 1\n3 4 2\n5\n1 5\n5 1\n2 5\n2 5\n1 4\n", "4 5\n2 2 1\n1 1 2\n2 3 1\n2 3 3\n4 4 1\n1\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n4 5 2\n1 2 2\n3 3 2\n3 4 2\n5\n1 5\n5 2\n2 3\n2 5\n1 4\n", "5 7\n1 1 1\n2 5 1\n3 5 1\n4 4 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n3 5\n1 5\n1 4\n", "4 5\n1 2 2\n1 1 3\n1 3 1\n1 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 5 1\n1 5 1\n4 5 2\n1 2 2\n2 5 2\n3 3 2\n5\n1 5\n5 1\n2 5\n2 5\n1 4\n", "4 5\n1 2 1\n1 1 2\n2 4 1\n2 3 3\n2 1 3\n3\n1 2\n3 1\n1 4\n", "5 7\n1 1 1\n2 1 1\n1 5 1\n4 2 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 3\n2 3\n1 4\n", "5 7\n1 5 2\n2 5 1\n3 5 1\n4 5 1\n1 3 1\n2 3 1\n3 4 2\n5\n1 5\n5 1\n2 5\n2 5\n1 4\n", "5 7\n1 1 2\n2 1 1\n1 5 1\n4 5 2\n1 2 2\n3 3 2\n3 4 2\n5\n1 5\n5 2\n2 3\n2 5\n1 4\n", "5 7\n1 1 1\n2 5 1\n1 5 1\n4 5 2\n1 2 2\n2 5 3\n3 3 4\n5\n1 5\n5 1\n2 5\n2 5\n1 4\n", "5 7\n1 5 2\n2 5 1\n3 5 2\n4 5 1\n1 3 1\n2 3 1\n3 4 2\n5\n1 5\n5 2\n2 5\n2 5\n1 4\n", "4 5\n1 2 1\n1 2 2\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n2 4\n", "4 5\n1 2 1\n1 1 2\n2 3 1\n2 3 3\n2 3 3\n3\n1 2\n3 4\n1 4\n", "5 7\n1 1 1\n2 5 1\n3 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 3\n5 1\n2 5\n1 5\n1 4\n", "4 5\n1 2 1\n1 2 3\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n", "7 7\n1 1 1\n2 5 1\n5 5 1\n4 5 2\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n", "6 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n5 4 2\n5\n1 2\n5 1\n2 5\n1 5\n1 4\n"], "output": ["0\n0\n1\n0\n1\n", "1\n1\n0\n", "1\n1\n2\n1\n1\n", "1\n1\n1\n1\n2\n", "2\n2\n2\n2\n1\n", "2\n1\n1\n1\n2\n", "0\n1\n0\n", "2\n2\n2\n2\n2\n", "2\n", "1\n1\n1\n1\n1\n", "1\n1\n1\n", "2\n0\n0\n", "2\n1\n1\n1\n0\n", "2\n2\n1\n2\n1\n", "2\n0\n2\n", "0\n1\n", "0\n", "1\n1\n0\n1\n0\n", "2\n2\n1\n1\n1\n", "0\n0\n2\n0\n0\n", "1\n0\n0\n", "2\n2\n0\n", "2\n1\n1\n1\n1\n", "0\n2\n0\n", "2\n1\n1\n", "2\n2\n2\n2\n", "1\n0\n", "0\n0\n2\n0\n1\n", "1\n", "1\n0\n1\n", "1\n1\n2\n2\n0\n", "1\n1\n1\n1\n0\n", "2\n2\n1\n1\n2\n", "1\n0\n1\n0\n1\n", "1\n1\n0\n", "1\n1\n2\n1\n1\n", "1\n1\n0\n", "1\n1\n0\n", "2\n2\n2\n2\n1\n", "2\n2\n2\n2\n1\n", "2\n2\n2\n2\n2\n", "1\n1\n2\n1\n1\n", "1\n1\n0\n", "1\n1\n1\n1\n1\n", "1\n1\n0\n", "0\n1\n0\n", "1\n1\n1\n1\n2\n", "1\n1\n1\n1\n1\n", "2\n2\n2\n2\n1\n", "1\n1\n0\n", "1\n1\n1\n1\n1\n", "2\n2\n1\n2\n1\n", "2\n2\n1\n2\n1\n", "2\n2\n2\n2\n1\n", "1\n1\n0\n", "2\n2\n1\n2\n1\n", "0\n1\n0\n", "0\n1\n0\n", "0\n1\n0\n", "0\n0\n1\n0\n1\n", "1\n1\n0\n", "2\n2\n1\n2\n1\n", "2\n2\n2\n2\n1\n", "1\n1\n1\n1\n1\n", "1\n1\n2\n1\n1\n", "1\n1\n1\n1\n1\n", "1\n1\n1\n1\n1\n", "2\n2\n1\n2\n1\n", "2\n2\n1\n1\n1\n", "0\n", "1\n1\n0\n1\n0\n", "0\n0\n1\n0\n1\n", "1\n0\n0\n", "2\n2\n2\n2\n1\n", "2\n1\n1\n", "1\n1\n1\n1\n1\n", "2\n2\n1\n1\n1\n", "1\n1\n0\n1\n0\n", "1\n1\n2\n2\n0\n", "2\n1\n1\n1\n2\n", "2\n1\n1\n", "1\n0\n0\n", "1\n1\n2\n1\n1\n", "2\n1\n1\n", "1\n1\n2\n1\n1\n", "2\n1\n1\n1\n1\n"]}, "short_description": "1. One-sentence summary:  \nDetermine how many distinct categories of edges connect two given vertices by checking connectivity across separate subgraphs.\n\n2. Core algorithmic approach:  \nRepeated depth-first search (DFS) on multiple independent adjacency lists (one per edge category) to test reachability.\n\n3. Reusable components:  \n- Construction of multiple adjacency lists keyed by an edge attribute (i.e., grouping edges by category).  \n- A generic DFS routine that marks reachable nodes and records parent (or visited) information.  \n- A query routine that iterates over subgraphs, invokes the DFS reachability test, and aggregates results."}
{"name": "27_B. Tournament", "description": "The tournament \u00abSleepyhead-2010\u00bb in the rapid falling asleep has just finished in Berland. n best participants from the country have participated in it. The tournament consists of games, each of them is a match between two participants. n\u00b7(n - 1) / 2 games were played during the tournament, and each participant had a match with each other participant. \n\nThe rules of the game are quite simple \u2014 the participant who falls asleep first wins. The secretary made a record of each game in the form \u00abxi yi\u00bb, where xi and yi are the numbers of participants. The first number in each pair is a winner (i.e. xi is a winner and yi is a loser). There is no draws.\n\nRecently researches form the \u00abInstitute Of Sleep\u00bb have found that every person is characterized by a value pj \u2014 the speed of falling asleep. The person who has lower speed wins. Every person has its own value pj, constant during the life. \n\nIt is known that all participants of the tournament have distinct speeds of falling asleep. Also it was found that the secretary made records about all the games except one. You are to find the result of the missing game.\n\nInput\n\nThe first line contains one integer n (3 \u2264 n \u2264 50) \u2014 the number of participants. The following n\u00b7(n - 1) / 2 - 1 lines contain the results of the games. Each game is described in a single line by two integers xi, yi (1 \u2264 xi, yi \u2264 n, xi \u2260 yi), where xi \u0438 yi are the numbers of the opponents in this game. It is known that during the tournament each of the n participants played n - 1 games, one game with each other participant.\n\nOutput\n\nOutput two integers x and y \u2014 the missing record. If there are several solutions, output any of them.\n\nExamples\n\nInput\n\n4\n4 2\n4 1\n2 3\n2 1\n3 1\n\n\nOutput\n\n4 3", "solution": "a = int(input())\nd = {}\nf = {}\nfor i in range(a*(a-1)//2-1):\n    v, c = map(int, input().split())\n    if v not in f:\n        f[v] = []\n    f[v].append(c)\n    if v in d:\n        d[v] += 1\n    else:\n        d[v] = 1\n    if c in d:\n        d[c] += 1\n    else:\n        d[c] = 1\ns = []\nm = 0\nfor i in range(1, a + 1):\n    if d[i] > m:\n         m = d[i]\nfor i in range(1, a + 1):\n    if d[i] < m:\n        s.append(i)\nm = 0\nfor i in range(1, a + 1):\n    if i not in s:\n        if s[0] in f and i in f and s[1] in f:\n            if i in f[s[1]] and s[0] in f[i]:\n                m = 1\n                s.reverse()\n                break\nprint(*s)", "difficulty": 8, "public_tests": {"input": ["4\n4 2\n4 1\n2 3\n2 1\n3 1\n"], "output": ["4 3\n"]}, "private_tests": {"input": ["4\n3 1\n4 1\n4 2\n3 2\n3 4\n", "5\n3 5\n2 5\n1 5\n1 4\n4 3\n1 3\n2 3\n4 5\n4 2\n", "6\n3 1\n5 4\n2 1\n6 2\n5 2\n3 6\n6 4\n3 2\n3 4\n6 1\n6 5\n5 1\n2 4\n3 5\n", "5\n4 5\n1 5\n4 3\n2 5\n2 1\n2 4\n3 5\n2 3\n1 3\n", "5\n2 1\n4 1\n5 1\n4 5\n3 5\n2 3\n3 1\n2 5\n2 4\n", "6\n5 3\n6 5\n3 4\n1 5\n2 3\n6 2\n2 5\n5 4\n6 4\n1 4\n6 3\n6 1\n2 4\n1 3\n", "3\n2 1\n3 1\n", "5\n5 2\n3 1\n5 3\n5 1\n3 4\n1 4\n3 2\n1 2\n5 4\n", "5\n4 5\n4 3\n5 3\n4 1\n3 1\n3 2\n5 2\n4 2\n5 1\n", "7\n2 4\n6 1\n6 5\n3 4\n6 3\n2 6\n6 4\n3 7\n7 1\n1 4\n7 4\n7 5\n2 7\n2 3\n5 4\n3 5\n3 1\n5 1\n6 7\n2 1\n", "9\n4 5\n9 6\n5 6\n8 7\n5 1\n8 5\n9 5\n4 7\n2 6\n7 6\n3 5\n2 1\n8 2\n3 7\n9 1\n2 5\n2 7\n4 2\n8 9\n8 1\n3 6\n7 1\n8 6\n3 2\n3 1\n9 2\n4 6\n5 7\n1 6\n4 8\n4 1\n4 3\n4 9\n9 3\n9 7\n", "4\n3 4\n1 4\n2 3\n2 1\n2 4\n", "6\n6 1\n5 6\n4 1\n3 1\n3 4\n4 6\n4 5\n3 2\n4 2\n6 2\n5 1\n3 5\n3 6\n5 2\n", "3\n1 3\n2 3\n", "4\n2 4\n3 4\n1 2\n1 4\n1 3\n", "6\n3 4\n3 5\n5 4\n1 2\n5 6\n2 6\n5 2\n3 6\n3 2\n4 6\n2 4\n1 3\n1 5\n1 4\n", "6\n6 1\n1 3\n3 4\n6 3\n2 4\n6 2\n1 5\n5 3\n5 4\n6 4\n1 2\n1 4\n6 5\n5 2\n", "5\n2 4\n5 3\n5 4\n2 5\n1 4\n2 3\n1 5\n1 3\n1 2\n", "4\n2 3\n1 3\n2 1\n4 1\n4 3\n", "8\n4 3\n6 8\n1 5\n8 3\n1 4\n1 7\n5 6\n5 3\n5 8\n7 3\n7 8\n2 3\n1 3\n2 8\n1 6\n5 4\n1 2\n2 5\n4 8\n1 8\n2 6\n2 7\n4 7\n2 4\n6 4\n6 7\n6 3\n", "6\n6 2\n6 4\n4 1\n4 3\n5 6\n5 2\n6 3\n5 1\n5 3\n2 1\n2 3\n6 1\n3 1\n5 4\n", "3\n3 2\n1 2\n"], "output": ["2 1\n", "1 2\n", "4 1\n", "4 1\n", "4 3\n", "2 1\n", "3 2\n", "4 2\n", "2 1\n", "2 5\n", "8 3\n", "3 1\n", "2 1\n", "2 1\n", "3 2\n", "1 6\n", "3 2\n", "4 3\n", "4 2\n", "5 7\n", "4 2\n", "3 1\n"]}, "generated_tests": {"input": ["5\n4 5\n1 5\n4 3\n2 5\n4 1\n2 4\n3 5\n2 3\n1 3\n", "4\n2 4\n3 4\n1 2\n1 4\n2 3\n", "5\n2 1\n4 1\n5 1\n4 5\n3 5\n2 3\n3 1\n2 5\n3 4\n", "3\n2 1\n3 2\n", "3\n1 2\n1 3\n", "6\n3 4\n3 5\n5 4\n1 2\n5 6\n1 6\n5 2\n3 6\n3 2\n4 6\n2 4\n1 3\n1 5\n1 4\n", "3\n3 2\n1 3\n", "4\n3 4\n1 3\n2 3\n2 1\n2 4\n", "3\n3 1\n1 2\n", "4\n2 3\n1 3\n2 1\n4 2\n4 3\n", "4\n3 1\n4 1\n1 2\n3 2\n3 4\n", "5\n3 5\n2 5\n1 2\n1 4\n4 3\n1 3\n2 3\n4 5\n4 2\n", "3\n1 2\n2 3\n", "5\n2 1\n4 1\n5 1\n4 5\n3 5\n4 3\n3 1\n2 5\n2 4\n", "5\n4 5\n1 5\n4 3\n2 5\n2 1\n1 4\n3 5\n2 3\n1 3\n", "3\n3 1\n3 2\n", "3\n1 2\n3 1\n", "4\n2 4\n3 4\n2 1\n1 4\n2 3\n", "4\n2 4\n3 4\n2 1\n1 4\n1 3\n", "4\n2 4\n3 4\n1 3\n1 4\n2 3\n", "6\n5 3\n6 5\n3 4\n1 5\n2 3\n6 2\n2 5\n5 4\n6 4\n1 4\n6 3\n6 1\n2 1\n1 3\n", "3\n1 3\n2 1\n", "3\n2 3\n3 1\n", "6\n6 1\n2 3\n3 4\n6 3\n2 4\n6 2\n1 5\n5 3\n5 4\n6 4\n1 2\n1 4\n6 5\n5 2\n", "3\n3 1\n2 1\n", "3\n3 2\n2 1\n", "3\n3 1\n2 3\n", "5\n2 1\n4 1\n5 1\n4 5\n3 5\n2 4\n3 1\n2 5\n3 4\n", "4\n2 4\n3 4\n1 3\n1 2\n2 3\n", "3\n2 3\n2 1\n", "3\n1 3\n1 2\n", "5\n3 5\n2 5\n1 2\n1 4\n4 3\n1 5\n2 3\n4 5\n4 2\n", "3\n2 3\n1 2\n", "4\n3 4\n1 4\n1 3\n2 1\n2 4\n", "3\n2 1\n2 3\n", "3\n3 2\n3 1\n", "3\n1 3\n3 2\n"], "output": ["2 1\n", "1 3\n", "2 4\n", "3 1\n", "2 3\n", "2 6\n", "1 2\n", "1 4\n", "3 2\n", "4 1\n", "4 2\n", "1 5\n", "1 3\n", "2 3\n", "2 4\n", "1 2\n", "3 2\n", "1 3\n", "2 3\n", "1 2\n", "2 4\n", "2 3\n", "2 1\n", "1 3\n", "2 3\n", "3 1\n", "2 1\n", "2 3\n", "1 4\n", "1 3\n", "2 3\n", "1 3\n", "1 3\n", "2 3\n", "1 3\n", "1 2\n", "1 2\n"]}, "short_description": "1. One-sentence summary  \nGiven an almost fully connected undirected graph with exactly one missing edge, the solution efficiently identifies the two vertices between which the edge is missing.  \n\n2. Core algorithmic approach  \nIt uses simple graph\u2010degree counting: build degrees and adjacency lists, then detect the two nodes with degree less than the maximum degree in the near-complete graph.  \n\n3. Reusable components  \n- Degree-map construction: maintain a dictionary (or array) to track the degree of each vertex as edges are read.  \n- Adjacency-list builder: collect neighbors in a map of lists for quick adjacency checks.  \n- Anomaly detection via degree scan: single pass over the degree map to pick out elements whose degree deviates from the expected maximum."}
{"name": "445_B. DZY Loves Chemistry", "description": "DZY loves chemistry, and he enjoys mixing chemicals.\n\nDZY has n chemicals, and m pairs of them will react. He wants to pour these chemicals into a test tube, and he needs to pour them in one by one, in any order. \n\nLet's consider the danger of a test tube. Danger of an empty test tube is 1. And every time when DZY pours a chemical, if there are already one or more chemicals in the test tube that can react with it, the danger of the test tube will be multiplied by 2. Otherwise the danger remains as it is.\n\nFind the maximum possible danger after pouring all the chemicals one by one in optimal order.\n\nInput\n\nThe first line contains two space-separated integers n and m <image>.\n\nEach of the next m lines contains two space-separated integers xi and yi (1 \u2264 xi < yi \u2264 n). These integers mean that the chemical xi will react with the chemical yi. Each pair of chemicals will appear at most once in the input.\n\nConsider all the chemicals numbered from 1 to n in some order.\n\nOutput\n\nPrint a single integer \u2014 the maximum possible danger.\n\nExamples\n\nInput\n\n1 0\n\n\nOutput\n\n1\n\n\nInput\n\n2 1\n1 2\n\n\nOutput\n\n2\n\n\nInput\n\n3 2\n1 2\n2 3\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample, there's only one way to pour, and the danger won't increase.\n\nIn the second sample, no matter we pour the 1st chemical first, or pour the 2nd chemical first, the answer is always 2.\n\nIn the third sample, there are four ways to achieve the maximum possible danger: 2-1-3, 2-3-1, 1-2-3 and 3-2-1 (that is the numbers of the chemicals in order of pouring).", "solution": "def iterative_dfs(graph, start, path=[]):\n    visited = {}\n    for i in graph:\n        visited[i] = []\n    q=[start]\n    while q:\n        v=q.pop(0)\n        if not visited[v]:\n            visited[v] = True\n            path=path+[v]\n            q=graph[v]+q\n    return path\n    \nnodes, edges = map(int, input().split(' '))\ngraph = {}\nfor i in range(nodes):\n  graph[i] = []\n\nfor i in range(edges):\n  a, b = map(int, input().split(' '))\n  graph[a-1].append(b-1)\n  graph[b-1].append(a-1)\n\nmarked = [False] * nodes\nnum = 0\nfor i in range(nodes):\n  if not marked[i]:\n    for j in iterative_dfs(graph, i):\n      marked[j] = True\n    num += 1\nprint(2**(nodes-num))\n", "difficulty": 8, "public_tests": {"input": ["3 2\n1 2\n2 3\n", "2 1\n1 2\n", "1 0\n"], "output": ["4\n", "2\n", "1\n"]}, "private_tests": {"input": ["26 17\n1 2\n2 3\n1 6\n6 7\n7 8\n2 9\n4 10\n3 11\n11 12\n9 13\n6 14\n2 16\n5 18\n6 19\n11 22\n15 24\n6 26\n", "8 5\n1 2\n1 3\n1 4\n5 6\n7 8\n", "10 10\n1 8\n4 10\n4 6\n5 10\n2 3\n1 7\n3 4\n3 6\n6 9\n3 7\n", "40 28\n1 2\n2 4\n3 5\n1 7\n1 8\n7 9\n6 10\n7 11\n2 12\n9 13\n11 15\n12 16\n1 18\n10 19\n7 21\n7 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "50 50\n16 21\n23 47\n23 30\n2 12\n23 41\n3 16\n14 20\n4 49\n2 47\n19 29\n13 42\n5 8\n24 38\n13 32\n34 37\n38 46\n3 20\n27 50\n7 42\n33 45\n2 48\n41 47\n9 48\n15 26\n27 37\n32 34\n17 24\n1 39\n27 30\n10 33\n38 47\n32 33\n14 39\n35 50\n2 19\n3 12\n27 34\n18 25\n12 23\n31 44\n5 35\n28 45\n38 39\n13 44\n34 38\n16 46\n5 15\n26 30\n47 49\n2 10\n", "20 20\n6 8\n13 20\n7 13\n6 17\n5 15\n1 12\n2 15\n5 17\n5 14\n6 14\n12 20\n7 20\n1 6\n1 7\n2 19\n14 17\n1 10\n11 15\n9 18\n2 12\n", "50 0\n", "20 15\n1 3\n3 4\n3 5\n4 6\n1 7\n1 8\n1 9\n7 11\n8 12\n5 13\n3 16\n1 17\n3 18\n1 19\n17 20\n", "40 40\n28 33\n15 21\n12 29\n14 31\n2 26\n3 12\n25 34\n6 30\n6 25\n5 28\n9 17\n23 29\n30 36\n3 21\n35 37\n7 25\n29 39\n15 19\n12 35\n24 34\n15 25\n19 33\n26 31\n7 29\n1 40\n11 27\n6 9\n6 27\n36 39\n10 14\n6 16\n23 25\n2 38\n3 24\n30 31\n29 30\n4 12\n11 13\n14 40\n22 39\n", "5 4\n1 2\n2 3\n3 4\n4 5\n", "30 24\n2 3\n3 4\n1 5\n4 6\n6 7\n1 8\n1 9\n4 10\n9 11\n5 12\n6 13\n10 14\n14 15\n12 16\n14 17\n2 18\n8 19\n3 20\n10 21\n11 24\n3 25\n1 26\n7 27\n4 29\n", "50 41\n1 3\n1 4\n2 5\n2 7\n1 8\n2 10\n4 11\n5 12\n12 13\n4 14\n10 17\n1 18\n1 21\n5 22\n14 23\n19 24\n13 25\n3 26\n11 27\n6 28\n26 29\n21 30\n17 31\n15 32\n1 33\n12 34\n23 36\n6 37\n15 38\n37 39\n31 40\n15 41\n25 42\n19 43\n20 44\n32 45\n44 46\n31 47\n2 48\n32 49\n27 50\n", "50 38\n1 2\n2 3\n3 4\n3 5\n4 7\n5 10\n9 11\n9 12\n11 13\n12 14\n6 15\n8 16\n2 18\n15 19\n3 20\n10 21\n4 22\n9 24\n2 25\n23 26\n3 28\n20 29\n14 30\n4 32\n24 33\n20 36\n1 38\n19 39\n39 40\n22 41\n18 42\n19 43\n40 45\n45 46\n9 47\n6 48\n9 49\n25 50\n", "7 20\n2 3\n3 6\n1 6\n1 2\n3 5\n1 7\n4 5\n4 7\n1 3\n2 6\n2 7\n4 6\n3 4\n1 4\n3 7\n1 5\n2 5\n5 6\n5 7\n2 4\n", "11 20\n3 6\n2 6\n2 9\n4 5\n9 11\n6 8\n5 6\n1 6\n4 11\n9 10\n5 10\n4 6\n3 8\n2 3\n1 7\n1 11\n2 7\n1 3\n3 7\n1 8\n", "50 41\n1 2\n1 3\n2 4\n1 5\n2 7\n4 8\n7 9\n2 11\n10 13\n11 14\n12 15\n14 16\n4 19\n7 20\n14 21\n8 23\n16 24\n16 25\n16 26\n19 27\n2 28\n3 29\n21 30\n12 31\n20 32\n23 33\n30 34\n6 35\n34 36\n34 37\n33 38\n34 40\n30 41\n3 42\n39 43\n5 44\n8 45\n40 46\n20 47\n31 49\n34 50\n", "8 7\n1 2\n2 3\n3 4\n1 4\n5 6\n6 7\n7 8\n", "50 47\n1 2\n1 3\n1 4\n1 5\n5 6\n2 7\n2 8\n2 9\n2 10\n8 11\n5 12\n11 13\n10 14\n6 15\n9 16\n1 17\n1 18\n8 19\n5 20\n5 21\n11 22\n2 23\n22 24\n24 25\n5 26\n21 27\n27 28\n8 29\n2 30\n4 31\n11 32\n17 33\n22 34\n25 35\n28 36\n28 37\n11 38\n17 39\n19 42\n6 43\n11 44\n29 45\n2 46\n24 47\n7 48\n3 49\n44 50\n", "48 43\n1 2\n1 3\n3 4\n4 5\n2 6\n5 7\n7 9\n4 10\n6 11\n3 12\n6 13\n3 14\n6 15\n13 16\n4 17\n12 18\n18 19\n1 20\n1 21\n16 22\n9 23\n3 24\n22 25\n2 26\n10 27\n18 28\n13 30\n3 31\n24 33\n29 34\n15 35\n16 36\n23 37\n21 38\n34 39\n37 40\n39 41\n19 42\n15 43\n23 44\n22 45\n14 47\n10 48\n", "50 39\n1 2\n1 4\n5 6\n4 7\n5 8\n7 9\n9 10\n10 11\n2 12\n8 14\n11 15\n11 17\n3 18\n13 19\n17 20\n7 21\n6 22\n22 23\n14 24\n22 25\n23 26\n26 27\n27 28\n15 29\n8 30\n26 31\n32 33\n21 35\n14 36\n30 37\n17 38\n12 40\n11 42\n14 43\n12 44\n1 45\n29 46\n22 47\n47 50\n", "30 30\n7 28\n16 26\n14 24\n16 18\n20 29\n4 28\n19 21\n8 26\n1 25\n14 22\n13 23\n4 15\n15 16\n2 19\n29 30\n12 20\n3 4\n3 26\n3 11\n22 27\n5 16\n2 24\n2 18\n7 16\n17 21\n17 25\n8 15\n23 27\n12 21\n5 30\n", "10 7\n1 2\n2 3\n1 5\n2 7\n7 8\n1 9\n9 10\n", "50 7\n16 32\n31 34\n4 16\n4 39\n1 50\n43 49\n1 33\n"], "output": ["131072\n", "32\n", "512\n", "268435456\n", "4398046511104\n", "32768\n", "1\n", "32768\n", "34359738368\n", "16\n", "16777216\n", "2199023255552\n", "274877906944\n", "64\n", "1024\n", "2199023255552\n", "64\n", "140737488355328\n", "8796093022208\n", "549755813888\n", "67108864\n", "128\n", "128\n"]}, "generated_tests": {"input": ["10 10\n1 8\n4 10\n4 6\n5 10\n2 3\n1 7\n3 4\n3 6\n6 9\n4 7\n", "40 28\n1 2\n2 4\n3 5\n1 7\n1 8\n7 9\n6 10\n2 11\n2 12\n9 13\n11 15\n12 16\n1 18\n10 19\n7 21\n7 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "50 50\n16 21\n23 47\n23 30\n2 12\n23 41\n3 16\n14 20\n4 49\n2 47\n19 29\n13 42\n5 8\n24 38\n13 32\n34 37\n38 46\n3 20\n19 50\n7 42\n33 45\n2 48\n41 47\n9 48\n15 26\n27 37\n32 34\n17 24\n1 39\n27 30\n10 33\n38 47\n32 33\n14 39\n35 50\n2 19\n3 12\n27 34\n18 25\n12 23\n31 44\n5 35\n28 45\n38 39\n13 44\n34 38\n16 46\n5 15\n26 30\n47 49\n2 10\n", "12 0\n", "20 15\n1 3\n3 4\n3 5\n4 6\n1 7\n1 8\n1 9\n7 11\n8 12\n5 13\n3 16\n1 17\n3 18\n1 19\n17 7\n", "40 40\n28 33\n15 21\n12 29\n14 31\n2 26\n3 12\n25 34\n6 30\n6 25\n5 28\n9 17\n23 29\n30 36\n3 21\n35 37\n7 25\n29 39\n15 19\n12 35\n24 34\n15 25\n19 33\n26 31\n7 29\n1 40\n11 27\n6 9\n6 27\n36 39\n10 14\n6 16\n23 25\n2 38\n3 24\n10 31\n29 30\n4 12\n11 13\n14 40\n22 39\n", "5 4\n1 2\n2 3\n3 4\n4 1\n", "30 24\n2 3\n3 4\n1 5\n4 6\n6 6\n1 8\n1 9\n4 10\n9 11\n5 12\n6 13\n10 14\n14 15\n12 16\n14 17\n2 18\n8 19\n3 20\n10 21\n11 24\n3 25\n1 26\n7 27\n4 29\n", "50 41\n1 3\n1 4\n2 5\n2 7\n1 8\n2 10\n4 11\n5 12\n12 13\n4 14\n10 17\n1 18\n1 21\n5 22\n14 23\n19 24\n13 25\n3 26\n11 27\n6 28\n26 29\n21 30\n17 31\n15 32\n1 33\n12 34\n23 36\n2 37\n15 38\n37 39\n31 40\n15 41\n25 42\n19 43\n20 44\n32 45\n44 46\n31 47\n2 48\n32 49\n27 50\n", "50 38\n1 2\n2 3\n3 4\n3 5\n4 7\n5 10\n17 11\n9 12\n11 13\n12 14\n6 15\n8 16\n2 18\n15 19\n3 20\n10 21\n4 22\n9 24\n2 25\n23 26\n3 28\n20 29\n14 30\n4 32\n24 33\n20 36\n1 38\n19 39\n39 40\n22 41\n18 42\n19 43\n40 45\n45 46\n9 47\n6 48\n9 49\n25 50\n", "7 20\n2 3\n3 6\n1 6\n1 2\n3 2\n1 7\n4 5\n4 7\n1 3\n2 6\n2 7\n4 6\n3 4\n1 4\n3 7\n1 5\n2 5\n5 6\n5 7\n2 4\n", "11 20\n3 6\n2 6\n2 9\n4 5\n9 11\n6 8\n5 6\n1 6\n4 11\n9 10\n5 10\n4 6\n3 8\n2 3\n1 7\n1 11\n2 7\n1 3\n1 7\n1 8\n", "50 47\n1 2\n1 3\n1 4\n1 5\n5 6\n2 7\n2 8\n2 9\n2 10\n8 11\n5 12\n11 13\n10 14\n6 15\n9 16\n1 17\n1 18\n8 19\n5 20\n5 21\n11 22\n2 23\n22 24\n24 25\n5 26\n21 27\n27 28\n8 29\n2 30\n4 31\n11 32\n17 33\n22 34\n25 35\n28 36\n28 37\n11 38\n17 39\n19 42\n6 43\n11 44\n29 45\n2 34\n24 47\n7 48\n3 49\n44 50\n", "48 43\n1 2\n1 3\n3 4\n4 5\n2 6\n5 7\n7 9\n4 10\n12 11\n3 12\n6 13\n3 14\n6 15\n13 16\n4 17\n12 18\n18 19\n1 20\n1 21\n16 22\n9 23\n3 24\n22 25\n2 26\n10 27\n18 28\n13 30\n3 31\n24 33\n29 34\n15 35\n16 36\n23 37\n21 38\n34 39\n37 40\n39 41\n19 42\n15 43\n23 44\n22 45\n14 47\n10 48\n", "50 39\n1 2\n1 4\n5 6\n4 7\n5 8\n7 9\n9 10\n10 11\n2 12\n8 14\n11 15\n11 17\n3 18\n13 19\n17 20\n7 21\n6 22\n22 23\n14 24\n22 25\n23 26\n26 27\n27 28\n15 29\n8 30\n26 31\n32 33\n21 35\n14 36\n30 37\n17 38\n12 23\n11 42\n14 43\n12 44\n1 45\n29 46\n22 47\n47 50\n", "30 30\n7 28\n16 26\n14 24\n16 18\n20 29\n4 28\n19 21\n8 26\n1 25\n14 22\n13 23\n4 15\n15 16\n2 19\n29 30\n12 20\n3 4\n3 26\n3 11\n22 27\n5 16\n2 24\n2 18\n7 16\n13 21\n17 25\n8 15\n23 27\n12 21\n5 30\n", "4 1\n1 2\n", "40 28\n1 2\n2 4\n3 5\n1 7\n1 8\n7 9\n6 10\n2 11\n2 12\n9 13\n11 15\n12 12\n1 18\n10 19\n7 21\n7 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "50 47\n1 2\n1 3\n1 4\n1 5\n5 6\n2 7\n2 8\n2 9\n2 10\n8 11\n5 12\n11 13\n10 14\n6 15\n9 16\n1 17\n1 18\n8 19\n5 20\n5 21\n11 22\n2 23\n22 24\n24 25\n5 26\n21 44\n27 28\n8 29\n2 30\n4 31\n11 32\n17 33\n22 34\n25 35\n28 36\n28 37\n11 38\n17 39\n19 42\n6 43\n11 44\n29 45\n2 34\n24 47\n7 48\n3 49\n44 50\n", "20 15\n1 3\n3 4\n3 5\n4 6\n1 7\n1 8\n1 4\n7 11\n8 12\n5 13\n3 16\n1 17\n3 18\n1 19\n17 7\n", "40 28\n1 2\n2 4\n3 5\n1 7\n1 8\n7 1\n6 10\n2 11\n2 12\n9 13\n11 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "20 15\n1 3\n3 7\n3 5\n4 6\n1 7\n1 8\n1 6\n7 11\n8 8\n5 13\n3 16\n1 17\n1 18\n1 19\n17 7\n", "26 17\n1 2\n2 3\n1 6\n6 7\n7 8\n2 9\n4 10\n3 11\n11 12\n9 13\n6 14\n2 16\n5 17\n6 19\n11 22\n15 24\n6 26\n", "8 5\n1 2\n2 3\n1 4\n5 6\n7 8\n", "30 24\n2 3\n3 4\n1 5\n4 6\n6 7\n1 8\n1 9\n4 10\n9 11\n5 12\n6 13\n10 14\n14 15\n12 16\n14 17\n1 18\n8 19\n3 20\n10 21\n11 24\n3 25\n1 26\n7 27\n4 29\n", "50 7\n16 32\n18 34\n4 16\n4 39\n1 50\n43 49\n1 33\n", "20 15\n1 3\n3 4\n3 5\n4 6\n1 7\n1 8\n1 9\n7 11\n8 12\n5 13\n3 16\n1 17\n3 18\n1 19\n17 2\n", "5 4\n1 2\n2 5\n3 4\n4 1\n", "10 7\n1 2\n2 3\n1 5\n2 7\n7 8\n1 8\n9 10\n", "4 0\n", "20 15\n1 3\n3 4\n3 5\n4 6\n1 7\n1 8\n1 14\n7 11\n8 12\n5 13\n3 16\n1 17\n3 18\n1 19\n17 7\n", "40 40\n28 33\n15 21\n12 29\n14 31\n2 26\n3 12\n25 34\n6 30\n6 25\n5 28\n9 17\n23 29\n30 36\n3 28\n35 37\n7 25\n29 39\n15 19\n12 35\n24 34\n15 25\n19 33\n26 31\n7 29\n1 40\n11 27\n6 9\n6 27\n36 39\n10 14\n6 16\n23 25\n2 38\n3 24\n10 31\n29 30\n4 12\n11 13\n14 40\n22 39\n", "7 20\n2 3\n3 6\n1 6\n1 2\n3 2\n1 7\n4 5\n2 7\n1 3\n2 6\n2 7\n4 6\n3 4\n1 4\n3 7\n1 5\n2 5\n5 6\n5 7\n2 4\n", "48 43\n1 2\n1 3\n3 4\n4 5\n2 6\n5 7\n7 9\n4 10\n12 11\n3 12\n6 13\n3 2\n6 15\n13 16\n4 17\n12 18\n18 19\n1 20\n1 21\n16 22\n9 23\n3 24\n22 25\n2 26\n10 27\n18 28\n13 30\n3 31\n24 33\n29 34\n15 35\n16 36\n23 37\n21 38\n34 39\n37 40\n39 41\n19 42\n15 43\n23 44\n22 45\n14 47\n10 48\n", "50 39\n1 2\n1 4\n5 6\n4 7\n5 8\n7 9\n9 10\n10 11\n2 12\n8 14\n11 15\n11 17\n3 18\n13 19\n17 20\n7 21\n6 22\n22 23\n14 24\n22 25\n23 26\n26 27\n27 28\n15 29\n8 30\n26 31\n32 33\n21 35\n14 36\n30 37\n17 38\n12 23\n11 42\n19 43\n12 44\n1 45\n29 46\n22 47\n47 50\n", "30 30\n7 28\n16 26\n14 24\n16 18\n20 29\n4 28\n19 21\n8 26\n1 25\n14 22\n13 23\n4 15\n15 16\n2 27\n29 30\n12 20\n3 4\n3 26\n3 11\n22 27\n5 16\n2 24\n2 18\n7 16\n13 21\n17 25\n8 15\n23 27\n12 21\n5 30\n", "10 7\n1 2\n2 3\n1 5\n2 7\n7 8\n1 8\n3 10\n", "40 28\n1 2\n2 4\n3 5\n1 7\n1 8\n7 9\n6 10\n2 11\n2 12\n9 13\n11 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "5 0\n", "40 40\n28 33\n15 21\n12 29\n14 31\n2 26\n3 12\n25 34\n6 30\n6 25\n5 28\n9 17\n23 29\n30 36\n3 28\n35 37\n7 25\n29 39\n15 19\n12 35\n24 34\n15 25\n19 33\n26 31\n7 29\n1 40\n11 27\n6 9\n6 27\n36 39\n10 14\n6 16\n23 23\n2 38\n3 24\n10 31\n29 30\n4 12\n11 13\n14 40\n22 39\n", "7 20\n2 3\n3 6\n2 6\n1 2\n3 2\n1 7\n4 5\n2 7\n1 3\n2 6\n2 7\n4 6\n3 4\n1 4\n3 7\n1 5\n2 5\n5 6\n5 7\n2 4\n", "48 43\n1 2\n1 3\n3 4\n4 5\n2 6\n5 7\n7 9\n4 10\n12 11\n3 12\n6 13\n3 2\n6 15\n13 16\n4 17\n12 18\n18 19\n1 20\n1 21\n16 22\n9 23\n3 24\n22 25\n2 26\n10 27\n18 28\n13 30\n3 31\n24 33\n29 34\n15 35\n16 36\n23 37\n21 38\n34 39\n37 40\n39 41\n33 42\n15 43\n23 44\n22 45\n14 47\n10 48\n", "30 30\n7 28\n16 26\n14 24\n16 18\n20 29\n4 28\n19 21\n8 26\n1 25\n14 22\n13 23\n4 15\n15 16\n2 27\n29 30\n12 20\n3 4\n3 26\n3 11\n22 27\n5 16\n2 24\n3 18\n7 16\n13 21\n17 25\n8 15\n23 27\n12 21\n5 30\n", "10 7\n1 2\n2 3\n1 5\n2 7\n7 8\n1 8\n5 10\n", "8 0\n", "20 15\n1 3\n3 7\n3 5\n4 6\n1 7\n1 8\n1 4\n7 11\n8 12\n5 13\n3 16\n1 17\n3 18\n1 19\n17 7\n", "40 40\n28 33\n15 21\n12 29\n14 31\n2 26\n3 12\n25 34\n6 30\n6 25\n5 28\n9 17\n23 29\n30 36\n3 28\n35 37\n7 25\n29 39\n15 19\n12 32\n24 34\n15 25\n19 33\n26 31\n7 29\n1 40\n11 27\n6 9\n6 27\n36 39\n10 14\n6 16\n23 23\n2 38\n3 24\n10 31\n29 30\n4 12\n11 13\n14 40\n22 39\n", "30 30\n7 28\n16 26\n14 24\n16 18\n20 29\n4 28\n19 21\n8 26\n1 25\n14 22\n13 23\n4 15\n15 16\n2 27\n29 30\n12 20\n2 4\n3 26\n3 11\n22 27\n5 16\n2 24\n3 18\n7 16\n13 21\n17 25\n8 15\n23 27\n12 21\n5 30\n", "40 28\n1 2\n2 4\n2 5\n1 7\n1 8\n7 1\n6 10\n2 11\n2 12\n9 13\n11 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "6 0\n", "20 15\n1 3\n3 7\n3 5\n4 6\n1 7\n1 8\n1 6\n7 11\n8 12\n5 13\n3 16\n1 17\n3 18\n1 19\n17 7\n", "40 28\n1 2\n2 4\n2 5\n1 7\n1 8\n7 1\n6 10\n2 11\n2 1\n9 13\n11 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "20 15\n1 3\n3 7\n3 5\n4 6\n1 7\n1 8\n1 6\n7 11\n8 12\n5 13\n3 16\n1 17\n1 18\n1 19\n17 7\n", "40 28\n1 2\n2 4\n2 5\n1 7\n1 8\n7 1\n6 10\n2 11\n2 1\n9 13\n17 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "40 28\n1 2\n2 4\n2 5\n1 7\n1 8\n7 1\n6 10\n2 11\n2 1\n11 13\n17 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "40 28\n1 2\n2 4\n2 5\n1 7\n1 8\n7 1\n6 10\n2 11\n2 1\n11 13\n17 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n9 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "40 28\n1 2\n2 4\n2 5\n1 9\n1 8\n7 1\n6 10\n2 11\n2 1\n11 13\n17 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n9 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "10 10\n1 8\n4 10\n4 6\n5 10\n2 3\n1 7\n3 4\n3 6\n1 9\n3 7\n", "40 28\n1 2\n2 4\n3 7\n1 7\n1 8\n7 9\n6 10\n7 11\n2 12\n9 13\n11 15\n12 16\n1 18\n10 19\n7 21\n7 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "50 50\n16 21\n23 47\n23 30\n2 12\n23 41\n3 16\n14 20\n4 49\n2 47\n19 29\n13 42\n5 8\n24 38\n13 32\n34 37\n38 46\n3 37\n27 50\n7 42\n33 45\n2 48\n41 47\n9 48\n15 26\n27 37\n32 34\n17 24\n1 39\n27 30\n10 33\n38 47\n32 33\n14 39\n35 50\n2 19\n3 12\n27 34\n18 25\n12 23\n31 44\n5 35\n28 45\n38 39\n13 44\n34 38\n16 46\n5 15\n26 30\n47 49\n2 10\n", "20 15\n1 3\n3 4\n3 5\n4 6\n1 7\n1 8\n1 9\n7 11\n8 6\n5 13\n3 16\n1 17\n3 18\n1 19\n17 20\n", "40 40\n28 33\n15 21\n12 29\n14 31\n3 26\n3 12\n25 34\n6 30\n6 25\n5 28\n9 17\n23 29\n30 36\n3 21\n35 37\n7 25\n29 39\n15 19\n12 35\n24 34\n15 25\n19 33\n26 31\n7 29\n1 40\n11 27\n6 9\n6 27\n36 39\n10 14\n6 16\n23 25\n2 38\n3 24\n30 31\n29 30\n4 12\n11 13\n14 40\n22 39\n", "50 41\n1 3\n1 4\n2 5\n2 6\n1 8\n2 10\n4 11\n5 12\n12 13\n4 14\n10 17\n1 18\n1 21\n5 22\n14 23\n19 24\n13 25\n3 26\n11 27\n6 28\n26 29\n21 30\n17 31\n15 32\n1 33\n12 34\n23 36\n6 37\n15 38\n37 39\n31 40\n15 41\n25 42\n19 43\n20 44\n32 45\n44 46\n31 47\n2 48\n32 49\n27 50\n", "50 38\n1 2\n2 3\n3 4\n3 5\n4 7\n5 10\n9 11\n9 12\n11 13\n12 14\n6 15\n8 16\n2 18\n15 19\n3 20\n10 21\n4 22\n9 36\n2 25\n23 26\n3 28\n20 29\n14 30\n4 32\n24 33\n20 36\n1 38\n19 39\n39 40\n22 41\n18 42\n19 43\n40 45\n45 46\n9 47\n6 48\n9 49\n25 50\n", "7 20\n2 3\n3 6\n1 6\n1 2\n3 5\n1 6\n4 5\n4 7\n1 3\n2 6\n2 7\n4 6\n3 4\n1 4\n3 7\n1 5\n2 5\n5 6\n5 7\n2 4\n", "8 7\n1 2\n2 3\n3 4\n1 4\n5 8\n6 7\n7 8\n", "48 43\n1 2\n1 3\n3 4\n4 5\n2 6\n5 7\n7 9\n4 10\n5 11\n3 12\n6 13\n3 14\n6 15\n13 16\n4 17\n12 18\n18 19\n1 20\n1 21\n16 22\n9 23\n3 24\n22 25\n2 26\n10 27\n18 28\n13 30\n3 31\n24 33\n29 34\n15 35\n16 36\n23 37\n21 38\n34 39\n37 40\n39 41\n19 42\n15 43\n23 44\n22 45\n14 47\n10 48\n", "30 30\n7 28\n16 26\n14 24\n16 18\n20 29\n1 28\n19 21\n8 26\n1 25\n14 22\n13 23\n4 15\n15 16\n2 19\n29 30\n12 20\n3 4\n3 26\n3 11\n22 27\n5 16\n2 24\n2 18\n7 16\n17 21\n17 25\n8 15\n23 27\n12 21\n5 30\n", "3 2\n1 2\n2 1\n", "40 28\n1 2\n2 4\n3 5\n1 7\n1 8\n7 9\n6 10\n2 11\n2 12\n9 13\n11 15\n12 16\n1 18\n10 19\n7 21\n7 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n1 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "50 50\n16 21\n23 47\n23 30\n2 12\n23 41\n3 16\n14 20\n4 49\n2 47\n19 29\n13 42\n5 8\n24 38\n13 32\n34 37\n38 46\n3 20\n19 50\n7 42\n33 45\n2 48\n41 47\n9 48\n15 26\n27 37\n32 34\n17 24\n1 39\n27 30\n10 33\n38 47\n32 33\n14 39\n35 50\n2 19\n3 23\n27 34\n18 25\n12 23\n31 44\n5 35\n28 45\n38 39\n13 44\n34 38\n16 46\n5 15\n26 30\n47 49\n2 10\n", "17 0\n", "40 40\n28 33\n15 21\n12 29\n14 31\n2 26\n3 12\n25 34\n6 30\n6 25\n5 28\n9 17\n23 7\n30 36\n3 21\n35 37\n7 25\n29 39\n15 19\n12 35\n24 34\n15 25\n19 33\n26 31\n7 29\n1 40\n11 27\n6 9\n6 27\n36 39\n10 14\n6 16\n23 25\n2 38\n3 24\n10 31\n29 30\n4 12\n11 13\n14 40\n22 39\n", "50 41\n1 3\n1 4\n2 5\n2 7\n1 8\n2 10\n4 11\n5 12\n12 13\n4 14\n10 17\n1 18\n1 21\n5 22\n14 23\n19 24\n13 25\n3 26\n11 27\n6 28\n26 29\n2 30\n17 31\n15 32\n1 33\n12 34\n23 36\n2 37\n15 38\n37 39\n31 40\n15 41\n25 42\n19 43\n20 44\n32 45\n44 46\n31 47\n2 48\n32 49\n27 50\n", "11 20\n3 6\n2 6\n2 9\n4 5\n9 11\n6 8\n5 6\n1 6\n4 11\n9 10\n5 10\n4 6\n3 8\n2 3\n1 7\n1 6\n2 7\n1 3\n1 7\n1 8\n", "50 47\n1 2\n1 3\n1 4\n1 5\n5 6\n2 7\n2 8\n2 9\n2 10\n8 11\n5 12\n11 13\n10 14\n6 15\n9 16\n1 17\n1 18\n8 19\n5 20\n5 21\n11 22\n2 23\n22 24\n24 25\n5 26\n21 27\n27 28\n8 29\n2 30\n4 31\n11 32\n17 33\n22 34\n25 35\n28 36\n28 37\n11 38\n23 39\n19 42\n6 43\n11 44\n29 45\n2 34\n24 47\n7 48\n3 49\n44 50\n", "48 43\n1 2\n1 3\n3 4\n4 5\n2 6\n5 7\n7 9\n4 10\n12 11\n3 12\n6 13\n3 14\n6 15\n13 16\n4 17\n12 18\n18 19\n1 20\n1 21\n16 22\n9 23\n3 24\n22 25\n2 26\n10 27\n18 28\n13 30\n3 31\n24 33\n29 48\n15 35\n16 36\n23 37\n21 38\n34 39\n37 40\n39 41\n19 42\n15 43\n23 44\n22 45\n14 47\n10 48\n", "30 30\n7 28\n16 26\n14 24\n16 18\n20 29\n4 28\n19 21\n8 26\n1 25\n14 22\n13 23\n4 15\n15 16\n2 19\n29 28\n12 20\n3 4\n3 26\n3 11\n22 27\n5 16\n2 24\n2 18\n7 16\n13 21\n17 25\n8 15\n23 27\n12 21\n5 30\n", "4 1\n2 2\n", "40 28\n1 2\n2 4\n3 5\n1 1\n1 8\n7 9\n6 10\n2 11\n2 12\n9 13\n11 15\n12 12\n1 18\n10 19\n7 21\n7 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "2 0\n", "40 40\n28 33\n15 21\n12 29\n14 31\n2 26\n3 12\n25 34\n6 30\n6 25\n5 28\n9 17\n23 29\n30 36\n3 28\n35 37\n7 25\n29 39\n15 19\n12 35\n24 34\n15 25\n19 33\n26 31\n7 29\n1 40\n11 20\n6 9\n6 27\n36 39\n10 14\n6 16\n23 25\n2 38\n3 24\n10 31\n29 30\n4 12\n11 13\n14 40\n22 39\n", "48 43\n1 2\n1 3\n3 4\n4 5\n2 6\n5 7\n7 9\n4 10\n12 11\n3 12\n6 13\n3 2\n6 15\n13 16\n4 17\n12 18\n18 19\n1 20\n1 21\n16 22\n9 23\n3 24\n22 25\n2 26\n10 27\n18 28\n13 30\n3 31\n24 33\n29 34\n15 35\n16 36\n23 37\n23 38\n34 39\n37 40\n39 41\n19 42\n15 43\n23 44\n22 45\n14 47\n10 48\n", "50 39\n1 2\n1 4\n5 6\n4 7\n5 8\n7 9\n9 10\n10 11\n2 12\n8 14\n11 15\n11 17\n3 18\n13 19\n17 20\n7 21\n6 22\n22 23\n14 24\n22 25\n23 26\n26 27\n27 28\n15 29\n8 30\n26 31\n50 33\n21 35\n14 36\n30 37\n17 38\n12 23\n11 42\n19 43\n12 44\n1 45\n29 46\n22 47\n47 50\n", "30 30\n7 28\n16 26\n14 24\n16 18\n20 29\n4 28\n19 17\n8 26\n1 25\n14 22\n13 23\n4 15\n15 16\n2 27\n29 30\n12 20\n3 4\n3 26\n3 11\n22 27\n5 16\n2 24\n2 18\n7 16\n13 21\n17 25\n8 15\n23 27\n12 21\n5 30\n", "11 7\n1 2\n2 3\n1 5\n2 7\n7 8\n1 8\n3 10\n", "40 28\n1 2\n2 4\n3 5\n1 7\n1 8\n7 9\n6 10\n2 11\n2 12\n9 13\n11 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 17\n32 36\n23 38\n7 39\n20 40\n", "3 0\n", "7 20\n2 3\n3 6\n2 6\n1 2\n3 2\n1 7\n4 5\n4 7\n1 3\n2 6\n2 7\n4 6\n3 4\n1 4\n3 7\n1 5\n2 5\n5 6\n5 7\n2 4\n", "48 43\n1 2\n1 3\n3 1\n4 5\n2 6\n5 7\n7 9\n4 10\n12 11\n3 12\n6 13\n3 2\n6 15\n13 16\n4 17\n12 18\n18 19\n1 20\n1 21\n16 22\n9 23\n3 24\n22 25\n2 26\n10 27\n18 28\n13 30\n3 31\n24 33\n29 34\n15 35\n16 36\n23 37\n21 38\n34 39\n37 40\n39 41\n33 42\n15 43\n23 44\n22 45\n14 47\n10 48\n", "30 30\n7 28\n16 26\n14 24\n16 18\n20 29\n4 28\n19 21\n8 26\n1 25\n14 22\n13 23\n4 15\n15 16\n2 27\n29 30\n12 20\n3 4\n3 26\n3 11\n22 25\n5 16\n2 24\n3 18\n7 16\n13 21\n17 25\n8 15\n23 27\n12 21\n5 30\n", "10 7\n2 2\n2 3\n1 5\n2 7\n7 8\n1 8\n5 10\n", "40 28\n1 2\n2 4\n3 5\n1 7\n1 3\n7 1\n6 10\n2 11\n2 12\n9 13\n11 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n20 40\n", "27 15\n1 3\n3 7\n3 5\n4 6\n1 7\n1 8\n1 4\n7 11\n8 12\n5 13\n3 16\n1 17\n3 18\n1 19\n17 7\n", "40 40\n28 33\n15 21\n12 29\n14 31\n2 26\n3 12\n25 34\n6 30\n6 25\n5 28\n9 17\n23 29\n30 36\n3 28\n35 33\n7 25\n29 39\n15 19\n12 32\n24 34\n15 25\n19 33\n26 31\n7 29\n1 40\n11 27\n6 9\n6 27\n36 39\n10 14\n6 16\n23 23\n2 38\n3 24\n10 31\n29 30\n4 12\n11 13\n14 40\n22 39\n", "30 30\n7 28\n16 26\n14 24\n16 18\n20 29\n4 28\n19 21\n8 26\n1 25\n14 22\n13 23\n4 15\n15 16\n2 27\n29 30\n12 20\n2 4\n3 26\n3 11\n22 27\n5 16\n2 24\n3 18\n7 16\n13 21\n17 25\n8 15\n23 27\n8 21\n5 30\n", "40 28\n1 2\n2 4\n2 5\n1 7\n1 8\n7 1\n6 10\n2 11\n2 12\n9 13\n11 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 17\n23 38\n7 39\n20 40\n", "40 28\n1 2\n2 4\n2 5\n1 7\n1 8\n7 1\n6 10\n2 11\n2 1\n9 13\n11 15\n12 12\n1 18\n10 19\n7 21\n2 23\n20 25\n24 27\n14 28\n9 29\n23 30\n27 31\n11 34\n21 35\n32 36\n23 38\n7 39\n40 40\n", "20 15\n1 3\n3 7\n3 5\n4 6\n1 7\n1 8\n1 6\n7 11\n8 12\n5 13\n3 2\n1 17\n1 18\n1 19\n17 7\n"], "output": ["512\n", "268435456\n", "4398046511104\n", "1\n", "16384\n", "17179869184\n", "8\n", "8388608\n", "2199023255552\n", "274877906944\n", "64\n", "1024\n", "70368744177664\n", "8796093022208\n", "549755813888\n", "33554432\n", "2\n", "134217728\n", "35184372088832\n", "8192\n", "67108864\n", "4096\n", "131072\n", "32\n", "16777216\n", "128\n", "32768\n", "16\n", "64\n", "1\n", "16384\n", "17179869184\n", "64\n", "4398046511104\n", "549755813888\n", "33554432\n", "64\n", "134217728\n", "1\n", "17179869184\n", "64\n", "4398046511104\n", "33554432\n", "64\n", "1\n", "8192\n", "17179869184\n", "33554432\n", "67108864\n", "1\n", "8192\n", "33554432\n", "8192\n", "33554432\n", "33554432\n", "33554432\n", "67108864\n", "512\n", "268435456\n", "4398046511104\n", "16384\n", "17179869184\n", "2199023255552\n", "274877906944\n", "64\n", "64\n", "8796093022208\n", "67108864\n", "2\n", "268435456\n", "4398046511104\n", "1\n", "17179869184\n", "2199023255552\n", "1024\n", "70368744177664\n", "8796093022208\n", "33554432\n", "1\n", "67108864\n", "1\n", "17179869184\n", "4398046511104\n", "549755813888\n", "33554432\n", "64\n", "134217728\n", "1\n", "64\n", "2199023255552\n", "67108864\n", "64\n", "67108864\n", "8192\n", "17179869184\n", "33554432\n", "67108864\n", "16777216\n", "8192\n"]}, "short_description": "1. One-sentence summary:  \nCompute the number of connected substructures in an undirected collection of elements and then evaluate 2^(total elements \u2212 number of such substructures).\n\n2. Core algorithmic approach:  \nIterative depth\u2010first search (DFS) over an adjacency\u2010list representation to identify and count connected components in an undirected graph.\n\n3. Reusable components:  \n- An adjacency\u2010list graph data structure (dict or list of lists) with functions to add undirected edges.  \n- A generic iterative DFS routine (or BFS variant) that takes a start node, marks visited nodes, and returns the traversal order.  \n- A driver loop that iterates through all nodes, invokes DFS on unvisited nodes, and tallies connected components."}
{"name": "217_A. Ice Skating", "description": "Bajtek is learning to skate on ice. He's a beginner, so his only mode of transportation is pushing off from a snow drift to the north, east, south or west and sliding until he lands in another snow drift. He has noticed that in this way it's impossible to get from some snow drifts to some other by any sequence of moves. He now wants to heap up some additional snow drifts, so that he can get from any snow drift to any other one. He asked you to find the minimal number of snow drifts that need to be created.\n\nWe assume that Bajtek can only heap up snow drifts at integer coordinates.\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of snow drifts. Each of the following n lines contains two integers xi and yi (1 \u2264 xi, yi \u2264 1000) \u2014 the coordinates of the i-th snow drift.\n\nNote that the north direction coin\u0441ides with the direction of Oy axis, so the east direction coin\u0441ides with the direction of the Ox axis. All snow drift's locations are distinct.\n\nOutput\n\nOutput the minimal number of snow drifts that need to be created in order for Bajtek to be able to reach any snow drift from any other one.\n\nExamples\n\nInput\n\n2\n2 1\n1 2\n\n\nOutput\n\n1\n\n\nInput\n\n2\n2 1\n4 1\n\n\nOutput\n\n0", "solution": "n = int(input())\ng = []\nfor i in range(n):\n    t = input().split()\n    g.append([ int(t[0]), int(t[1]), False ])\n\ndef visita(i):\n    g[i][2] = True\n    for j in range(n):\n        if g[j][2] == False and (g[i][0] == g[j][0] or g[i][1] == g[j][1]):\n            visita(j)\n\ncnt = -1\nfor i in range(n):\n    if g[i][2] == False:\n        cnt += 1\n        visita(i)\n\nprint(cnt)", "difficulty": 7, "public_tests": {"input": ["2\n2 1\n1 2\n", "2\n2 1\n4 1\n"], "output": ["1\n", "0\n"]}, "private_tests": {"input": ["55\n1 1\n1 14\n2 2\n2 19\n3 1\n3 3\n3 8\n3 14\n3 23\n4 1\n4 4\n5 5\n5 8\n5 15\n6 2\n6 3\n6 4\n6 6\n7 7\n8 8\n8 21\n9 9\n10 1\n10 10\n11 9\n11 11\n12 12\n13 13\n14 14\n15 15\n15 24\n16 5\n16 16\n17 5\n17 10\n17 17\n17 18\n17 22\n17 27\n18 18\n19 19\n20 20\n21 20\n21 21\n22 22\n23 23\n24 14\n24 24\n25 25\n26 8\n26 11\n26 26\n27 3\n27 27\n28 28\n", "4\n1 1\n2 2\n3 2\n3 1\n", "36\n952 981\n885 900\n803 790\n107 129\n670 654\n143 132\n66 58\n813 819\n849 837\n165 198\n247 228\n15 39\n619 618\n105 138\n868 855\n965 957\n293 298\n613 599\n227 212\n745 754\n723 704\n877 858\n503 487\n678 697\n592 595\n155 135\n962 982\n93 89\n660 673\n225 212\n967 987\n690 680\n804 813\n489 518\n240 221\n111 124\n", "32\n643 877\n842 614\n387 176\n99 338\n894 798\n652 728\n611 648\n622 694\n579 781\n243 46\n322 305\n198 438\n708 579\n246 325\n536 459\n874 593\n120 277\n989 907\n223 110\n35 130\n761 692\n690 661\n518 766\n226 93\n678 597\n725 617\n661 574\n775 496\n56 416\n14 189\n358 359\n898 901\n", "3\n1 1\n1 2\n2 2\n", "4\n325 343\n425 442\n785 798\n275 270\n", "20\n1 1\n2 2\n3 3\n3 9\n4 4\n5 2\n5 5\n5 7\n5 8\n6 2\n6 6\n6 9\n7 7\n8 8\n9 4\n9 7\n9 9\n10 2\n10 9\n10 10\n", "14\n685 808\n542 677\n712 747\n832 852\n187 410\n399 338\n626 556\n530 635\n267 145\n215 209\n559 684\n944 949\n753 596\n601 823\n", "4\n1 3\n2 1\n3 2\n3 1\n", "29\n462 519\n871 825\n127 335\n156 93\n576 612\n885 830\n634 779\n340 105\n744 795\n716 474\n93 139\n563 805\n137 276\n177 101\n333 14\n391 437\n873 588\n817 518\n460 597\n572 670\n140 303\n392 441\n273 120\n862 578\n670 639\n410 161\n544 577\n193 116\n252 195\n", "3\n1 2\n1 3\n1 4\n", "23\n102 84\n562 608\n200 127\n952 999\n465 496\n322 367\n728 690\n143 147\n855 867\n861 866\n26 59\n300 273\n255 351\n192 246\n70 111\n365 277\n32 104\n298 319\n330 354\n241 141\n56 125\n315 298\n412 461\n", "32\n652 712\n260 241\n27 154\n188 16\n521 351\n518 356\n452 540\n790 827\n339 396\n336 551\n897 930\n828 627\n27 168\n180 113\n134 67\n794 671\n812 711\n100 241\n686 813\n138 289\n384 506\n884 932\n913 959\n470 508\n730 734\n373 478\n788 862\n392 426\n148 68\n113 49\n713 852\n924 894\n", "4\n3 1\n2 1\n2 2\n1 2\n", "7\n948 946\n130 130\n761 758\n941 938\n971 971\n387 385\n509 510\n", "4\n1 1\n2 2\n1 2\n2 1\n", "7\n1 1\n2 2\n3 3\n4 4\n1 2\n2 3\n3 4\n", "7\n312 298\n86 78\n73 97\n619 594\n403 451\n538 528\n71 86\n", "4\n5 5\n5 4\n6 3\n6 4\n", "3\n1 1\n2 2\n2 1\n", "3\n939 867\n411 427\n757 708\n", "28\n462 483\n411 401\n118 94\n111 127\n5 6\n70 52\n893 910\n73 63\n818 818\n182 201\n642 633\n900 886\n893 886\n684 700\n157 173\n953 953\n671 660\n224 225\n832 801\n152 157\n601 585\n115 101\n739 722\n611 606\n659 642\n461 469\n702 689\n649 653\n", "3\n1 2\n3 4\n3 2\n", "5\n175 158\n16 2\n397 381\n668 686\n957 945\n", "12\n548 506\n151 198\n370 380\n655 694\n654 690\n407 370\n518 497\n819 827\n765 751\n802 771\n741 752\n653 662\n", "1\n321 88\n", "4\n1 1\n1 2\n2 1\n2 2\n", "23\n952 907\n345 356\n812 807\n344 328\n242 268\n254 280\n1000 990\n80 78\n424 396\n595 608\n755 813\n383 380\n55 56\n598 633\n203 211\n508 476\n600 593\n206 192\n855 882\n517 462\n967 994\n642 657\n493 488\n", "3\n1 1\n2 2\n1 2\n", "9\n811 859\n656 676\n76 141\n945 951\n497 455\n18 55\n335 294\n267 275\n656 689\n", "7\n1 1\n1 2\n2 2\n3 3\n3 4\n4 4\n1 4\n", "3\n175 201\n907 909\n388 360\n", "10\n579 816\n806 590\n830 787\n120 278\n677 800\n16 67\n188 251\n559 560\n87 67\n104 235\n", "5\n664 666\n951 941\n739 742\n844 842\n2 2\n", "6\n1 1\n2 1\n2 2\n2 4\n4 3\n2 3\n", "19\n802 820\n368 248\n758 794\n455 378\n876 888\n771 814\n245 177\n586 555\n844 842\n364 360\n820 856\n731 624\n982 975\n825 856\n122 121\n862 896\n42 4\n792 841\n828 820\n", "7\n429 506\n346 307\n99 171\n853 916\n322 263\n115 157\n906 924\n", "10\n1 1\n1 2\n1 3\n1 4\n5 5\n6 6\n7 7\n8 8\n9 9\n100 100\n", "30\n89 3\n167 156\n784 849\n943 937\n144 95\n24 159\n80 120\n657 683\n585 596\n43 147\n909 964\n131 84\n345 389\n333 321\n91 126\n274 325\n859 723\n866 922\n622 595\n690 752\n902 944\n127 170\n426 383\n905 925\n172 284\n793 810\n414 510\n890 884\n123 24\n267 255\n", "17\n660 646\n440 442\n689 618\n441 415\n922 865\n950 972\n312 366\n203 229\n873 860\n219 199\n344 308\n169 176\n961 992\n153 84\n201 230\n987 938\n834 815\n", "11\n798 845\n722 911\n374 270\n629 537\n748 856\n831 885\n486 641\n751 829\n609 492\n98 27\n654 663\n", "24\n171 35\n261 20\n4 206\n501 446\n961 912\n581 748\n946 978\n463 514\n841 889\n341 466\n842 967\n54 102\n235 261\n925 889\n682 672\n623 636\n268 94\n635 710\n474 510\n697 794\n586 663\n182 184\n806 663\n468 459\n", "21\n12 12\n13 12\n12 11\n13 13\n10 10\n11 10\n11 11\n501 500\n501 501\n503 502\n500 500\n503 503\n502 501\n502 502\n700 700\n702 702\n703 702\n701 701\n702 701\n703 703\n701 700\n", "36\n429 424\n885 972\n442 386\n512 511\n751 759\n4 115\n461 497\n496 408\n8 23\n542 562\n296 331\n448 492\n412 395\n109 166\n622 640\n379 355\n251 262\n564 586\n66 115\n275 291\n666 611\n629 534\n510 567\n635 666\n738 803\n420 369\n92 17\n101 144\n141 92\n258 258\n184 235\n492 456\n311 210\n394 357\n531 512\n634 636\n", "14\n25 23\n499 406\n193 266\n823 751\n219 227\n101 138\n978 992\n43 74\n997 932\n237 189\n634 538\n774 740\n842 767\n742 802\n", "23\n420 424\n280 303\n515 511\n956 948\n799 803\n441 455\n362 369\n299 289\n823 813\n982 967\n876 878\n185 157\n529 551\n964 989\n655 656\n1 21\n114 112\n45 56\n935 937\n1000 997\n934 942\n360 366\n648 621\n", "40\n685 711\n433 403\n703 710\n491 485\n616 619\n288 282\n884 871\n367 352\n500 511\n977 982\n51 31\n576 564\n508 519\n755 762\n22 20\n368 353\n232 225\n953 955\n452 436\n311 330\n967 988\n369 364\n791 803\n150 149\n651 661\n118 93\n398 387\n748 766\n852 852\n230 228\n555 545\n515 519\n667 678\n867 862\n134 146\n859 863\n96 99\n486 469\n303 296\n780 786\n", "2\n802 903\n476 348\n", "6\n1 1\n1 2\n2 2\n3 1\n3 2\n3 3\n", "21\n1 1\n1 9\n2 1\n2 2\n2 5\n2 6\n2 9\n3 3\n3 8\n4 1\n4 4\n5 5\n5 8\n6 6\n7 7\n8 8\n9 9\n10 4\n10 10\n11 5\n11 11\n", "50\n1 1\n2 2\n2 9\n3 3\n4 4\n4 9\n4 16\n4 24\n5 5\n6 6\n7 7\n8 8\n8 9\n8 20\n9 9\n10 10\n11 11\n12 12\n13 13\n14 7\n14 14\n14 16\n14 25\n15 4\n15 6\n15 15\n15 22\n16 6\n16 16\n17 17\n18 18\n19 6\n19 19\n20 20\n21 21\n22 6\n22 22\n23 23\n24 6\n24 7\n24 8\n24 9\n24 24\n25 1\n25 3\n25 5\n25 7\n25 23\n25 24\n25 25\n", "3\n1 2\n2 1\n2 2\n", "5\n312 284\n490 509\n730 747\n504 497\n782 793\n", "8\n1 3\n1 1\n4 1\n2 2\n2 5\n5 9\n5 1\n5 4\n", "32\n325 327\n20 22\n72 74\n935 933\n664 663\n726 729\n785 784\n170 171\n315 314\n577 580\n984 987\n313 317\n434 435\n962 961\n55 54\n46 44\n743 742\n434 433\n617 612\n332 332\n883 886\n940 936\n793 792\n645 644\n611 607\n418 418\n465 465\n219 218\n167 164\n56 54\n403 405\n210 210\n", "6\n535 699\n217 337\n508 780\n180 292\n393 112\n732 888\n", "6\n4 4\n3 4\n5 4\n4 5\n4 3\n3 1\n", "22\n1 1\n1 3\n1 4\n1 8\n1 9\n1 11\n2 2\n3 3\n4 4\n4 5\n5 5\n6 6\n6 8\n7 7\n8 3\n8 4\n8 8\n9 9\n10 10\n11 4\n11 9\n11 11\n", "5\n1 1\n1 2\n2 2\n3 1\n3 3\n", "3\n1 1\n2 1\n2 2\n", "6\n1 11\n6 8\n11 10\n1 10\n11 11\n6 9\n", "6\n1 1\n2 2\n2 1\n2 4\n4 3\n2 3\n"], "output": ["5\n", "0\n", "34\n", "31\n", "0\n", "3\n", "1\n", "13\n", "1\n", "28\n", "0\n", "22\n", "29\n", "0\n", "6\n", "0\n", "0\n", "6\n", "0\n", "0\n", "2\n", "25\n", "0\n", "4\n", "11\n", "0\n", "0\n", "22\n", "0\n", "7\n", "0\n", "2\n", "8\n", "4\n", "0\n", "16\n", "6\n", "6\n", "29\n", "16\n", "10\n", "21\n", "2\n", "34\n", "13\n", "22\n", "38\n", "1\n", "0\n", "1\n", "7\n", "0\n", "4\n", "1\n", "29\n", "5\n", "0\n", "3\n", "0\n", "0\n", "1\n", "0\n"]}, "generated_tests": {"input": ["55\n1 1\n1 14\n2 2\n2 19\n3 1\n3 3\n3 8\n3 14\n3 23\n4 1\n4 4\n5 5\n5 8\n5 15\n6 2\n6 3\n6 4\n6 6\n7 7\n8 8\n8 21\n9 9\n10 1\n10 10\n11 1\n11 11\n12 12\n13 13\n14 14\n15 15\n15 24\n16 5\n16 16\n17 5\n17 10\n17 17\n17 18\n17 22\n17 27\n18 18\n19 19\n20 20\n21 20\n21 21\n22 22\n23 23\n24 14\n24 24\n25 25\n26 8\n26 11\n26 26\n27 3\n27 27\n28 28\n", "4\n1 1\n2 2\n3 2\n2 1\n", "36\n952 981\n885 900\n803 790\n107 129\n552 654\n143 132\n66 58\n813 819\n849 837\n165 198\n247 228\n15 39\n619 618\n105 138\n868 855\n965 957\n293 298\n613 599\n227 212\n745 754\n723 704\n877 858\n503 487\n678 697\n592 595\n155 135\n962 982\n93 89\n660 673\n225 212\n967 987\n690 680\n804 813\n489 518\n240 221\n111 124\n", "32\n643 877\n842 614\n387 176\n99 338\n894 798\n652 728\n611 648\n622 694\n579 781\n243 46\n322 305\n198 438\n708 482\n246 325\n536 459\n874 593\n120 277\n989 907\n223 110\n35 130\n761 692\n690 661\n518 766\n226 93\n678 597\n725 617\n661 574\n775 496\n56 416\n14 189\n358 359\n898 901\n", "4\n325 343\n425 442\n785 798\n241 270\n", "20\n1 1\n2 2\n3 3\n3 10\n4 4\n5 2\n5 5\n5 7\n5 8\n6 2\n6 6\n6 9\n7 7\n8 8\n9 4\n9 7\n9 9\n10 2\n10 9\n10 10\n", "14\n685 808\n542 677\n712 747\n832 852\n187 410\n399 338\n626 556\n530 285\n267 145\n215 209\n559 684\n944 949\n753 596\n601 823\n", "29\n462 519\n871 825\n127 335\n156 93\n576 612\n885 830\n634 779\n340 105\n744 795\n716 474\n93 139\n563 805\n137 276\n177 101\n333 14\n391 437\n873 588\n817 518\n460 597\n572 670\n140 303\n392 441\n273 120\n862 578\n670 639\n410 302\n544 577\n193 116\n252 195\n", "23\n102 84\n562 608\n200 127\n952 999\n465 496\n322 367\n728 690\n143 147\n855 867\n861 866\n26 59\n300 273\n255 351\n192 246\n70 111\n365 277\n32 104\n298 319\n330 354\n241 141\n56 125\n315 298\n127 461\n", "32\n652 712\n260 241\n27 154\n188 16\n521 351\n518 356\n452 540\n790 827\n339 396\n336 551\n897 930\n828 627\n27 168\n180 113\n134 67\n794 671\n812 711\n100 241\n824 813\n138 289\n384 506\n884 932\n913 959\n470 508\n730 734\n373 478\n788 862\n392 426\n148 68\n113 49\n713 852\n924 894\n", "3\n939 867\n290 427\n757 708\n", "28\n462 483\n411 401\n118 94\n111 127\n5 6\n70 52\n893 910\n73 63\n818 818\n182 201\n642 633\n900 886\n893 886\n684 700\n157 173\n953 953\n671 660\n224 225\n832 801\n152 157\n601 585\n115 001\n739 722\n611 606\n659 642\n461 469\n702 689\n649 653\n", "12\n548 506\n151 198\n370 380\n655 694\n654 690\n407 403\n518 497\n819 827\n765 751\n802 771\n741 752\n653 662\n", "9\n811 859\n656 676\n76 141\n945 951\n497 455\n18 22\n335 294\n267 275\n656 689\n", "10\n579 816\n806 590\n830 787\n120 278\n677 800\n16 67\n188 251\n559 560\n87 67\n104 98\n", "5\n664 666\n951 941\n739 875\n844 842\n2 2\n", "19\n802 820\n368 248\n758 794\n455 378\n876 888\n771 814\n245 177\n586 555\n844 842\n598 360\n820 856\n731 624\n982 975\n825 856\n122 121\n862 896\n42 4\n792 841\n828 820\n", "10\n1 1\n1 2\n1 3\n1 4\n5 3\n6 6\n7 7\n8 8\n9 9\n100 100\n", "11\n664 845\n722 911\n374 270\n629 537\n748 856\n831 885\n486 641\n751 829\n609 492\n98 27\n654 663\n", "40\n685 711\n433 403\n703 710\n491 485\n616 619\n288 282\n884 871\n367 352\n500 511\n977 982\n51 31\n576 564\n508 519\n755 762\n22 20\n368 353\n232 225\n953 955\n452 436\n311 330\n967 988\n369 364\n791 803\n150 149\n651 661\n118 93\n398 387\n748 766\n852 852\n230 228\n555 300\n515 519\n667 678\n867 862\n134 146\n859 863\n96 99\n486 469\n303 296\n780 786\n", "32\n652 712\n260 241\n27 154\n188 16\n521 351\n518 356\n452 540\n790 827\n339 396\n336 551\n897 930\n828 627\n27 168\n180 113\n134 67\n794 671\n812 711\n100 215\n824 813\n138 289\n384 506\n884 932\n913 959\n470 508\n730 734\n373 478\n788 862\n392 426\n148 68\n113 49\n713 852\n924 894\n", "3\n1 1\n1 2\n3 2\n", "4\n2 3\n2 1\n3 2\n3 1\n", "3\n1 2\n1 3\n1 8\n", "4\n1 1\n2 1\n2 2\n1 2\n", "7\n948 946\n130 74\n761 758\n941 938\n971 971\n387 385\n509 510\n", "7\n312 298\n86 78\n73 97\n822 594\n403 451\n538 528\n71 86\n", "4\n5 5\n5 4\n4 3\n6 4\n", "3\n1 1\n2 3\n2 1\n", "3\n1 2\n3 4\n3 1\n", "1\n104 88\n", "4\n1 1\n1 2\n2 1\n2 3\n", "23\n952 907\n345 356\n812 807\n344 328\n242 268\n254 280\n1000 990\n80 78\n424 396\n595 608\n755 813\n257 380\n55 56\n598 633\n203 211\n508 476\n600 593\n206 192\n855 882\n517 462\n967 994\n642 657\n493 488\n", "3\n246 201\n907 909\n388 360\n", "6\n1 1\n2 1\n2 2\n4 4\n4 3\n2 3\n", "7\n429 506\n346 307\n99 171\n406 916\n322 263\n115 157\n906 924\n", "30\n57 3\n167 156\n784 849\n943 937\n144 95\n24 159\n80 120\n657 683\n585 596\n43 147\n909 964\n131 84\n345 389\n333 321\n91 126\n274 325\n859 723\n866 922\n622 595\n690 752\n902 944\n127 170\n426 383\n905 925\n172 284\n793 810\n414 510\n890 884\n123 24\n267 255\n", "17\n660 646\n440 442\n689 618\n441 415\n922 865\n950 972\n312 366\n203 229\n873 860\n219 199\n344 308\n169 247\n961 992\n153 84\n201 230\n987 938\n834 815\n", "21\n12 12\n13 12\n12 11\n13 13\n10 10\n11 10\n11 11\n484 500\n501 501\n503 502\n500 500\n503 503\n502 501\n502 502\n700 700\n702 702\n703 702\n701 701\n702 701\n703 703\n701 700\n", "36\n429 424\n885 972\n442 386\n512 511\n751 759\n4 115\n461 497\n496 408\n8 23\n542 562\n296 331\n448 492\n412 395\n109 166\n622 640\n379 355\n251 262\n564 586\n66 115\n275 218\n666 611\n629 534\n510 567\n635 666\n738 803\n420 369\n92 17\n101 144\n141 92\n258 258\n184 235\n492 456\n311 210\n394 357\n531 512\n634 636\n", "14\n25 23\n499 406\n193 266\n823 751\n219 227\n101 138\n978 992\n43 74\n997 932\n237 189\n634 536\n774 740\n842 767\n742 802\n", "23\n420 424\n280 303\n515 511\n956 948\n799 803\n849 455\n362 369\n299 289\n823 813\n982 967\n876 878\n185 157\n529 551\n964 989\n655 656\n1 21\n114 112\n45 56\n935 937\n1000 997\n934 942\n360 366\n648 621\n", "2\n802 903\n476 471\n", "6\n1 1\n1 2\n2 2\n5 1\n3 2\n3 3\n", "21\n1 1\n1 9\n2 1\n2 2\n2 5\n2 6\n2 9\n3 2\n3 8\n4 1\n4 4\n5 5\n5 8\n6 6\n7 7\n8 8\n9 9\n10 4\n10 10\n11 5\n11 11\n", "3\n1 2\n2 1\n4 2\n", "8\n1 3\n1 1\n4 1\n2 2\n2 10\n5 9\n5 1\n5 4\n", "32\n325 327\n20 22\n72 74\n935 167\n664 663\n726 729\n785 784\n170 171\n315 314\n577 580\n984 987\n313 317\n434 435\n962 961\n55 54\n46 44\n743 742\n434 433\n617 612\n332 332\n883 886\n940 936\n793 792\n645 644\n611 607\n418 418\n465 465\n219 218\n167 164\n56 54\n403 405\n210 210\n", "6\n535 699\n217 337\n350 780\n180 292\n393 112\n732 888\n", "22\n1 1\n1 3\n1 4\n1 8\n1 9\n1 11\n2 2\n3 3\n4 4\n4 5\n5 5\n6 6\n6 8\n7 7\n8 3\n3 4\n8 8\n9 9\n10 10\n11 4\n11 9\n11 11\n", "3\n1 1\n2 1\n2 3\n", "6\n1 11\n6 8\n11 10\n1 10\n11 11\n6 7\n", "2\n2 1\n2 2\n", "2\n2 1\n1 1\n", "55\n1 1\n1 14\n2 2\n2 19\n3 1\n3 3\n3 8\n3 14\n3 23\n4 1\n4 4\n5 5\n5 8\n5 15\n6 2\n6 3\n6 4\n6 6\n7 7\n8 8\n8 21\n9 9\n10 1\n10 10\n11 1\n11 11\n12 12\n13 13\n14 14\n15 15\n15 24\n16 5\n16 16\n17 5\n17 10\n17 17\n17 18\n17 22\n17 27\n18 18\n19 19\n20 20\n21 20\n21 21\n22 22\n23 23\n24 14\n24 24\n25 25\n26 8\n26 11\n26 26\n27 3\n27 27\n28 34\n", "36\n952 981\n885 900\n803 790\n107 112\n552 654\n143 132\n66 58\n813 819\n849 837\n165 198\n247 228\n15 39\n619 618\n105 138\n868 855\n965 957\n293 298\n613 599\n227 212\n745 754\n723 704\n877 858\n503 487\n678 697\n592 595\n155 135\n962 982\n93 89\n660 673\n225 212\n967 987\n690 680\n804 813\n489 518\n240 221\n111 124\n", "32\n643 877\n842 614\n387 176\n99 338\n894 798\n652 728\n611 648\n622 751\n579 781\n243 46\n322 305\n198 438\n708 482\n246 325\n536 459\n874 593\n120 277\n989 907\n223 110\n35 130\n761 692\n690 661\n518 766\n226 93\n678 597\n725 617\n661 574\n775 496\n56 416\n14 189\n358 359\n898 901\n", "4\n325 343\n425 640\n785 798\n241 270\n", "14\n685 808\n542 677\n712 747\n832 852\n187 410\n399 338\n626 556\n530 285\n267 145\n215 209\n890 684\n944 949\n753 596\n601 823\n", "4\n2 3\n2 1\n5 2\n3 1\n", "23\n102 84\n562 608\n200 127\n952 999\n465 496\n322 367\n728 690\n143 147\n855 867\n861 866\n26 59\n300 273\n255 351\n192 246\n70 111\n365 277\n32 104\n298 319\n596 354\n241 141\n56 125\n315 298\n127 461\n", "7\n948 946\n130 74\n761 758\n941 938\n865 971\n387 385\n509 510\n", "7\n312 298\n86 78\n73 180\n822 594\n403 451\n538 528\n71 86\n", "4\n5 5\n5 6\n4 3\n6 4\n", "3\n939 867\n290 427\n628 708\n", "12\n165 506\n151 198\n370 380\n655 694\n654 690\n407 403\n518 497\n819 827\n765 751\n802 771\n741 752\n653 662\n", "1\n104 139\n", "23\n952 907\n345 356\n812 807\n344 591\n242 268\n254 280\n1000 990\n80 78\n424 396\n595 608\n755 813\n257 380\n55 56\n598 633\n203 211\n508 476\n600 593\n206 192\n855 882\n517 462\n967 994\n642 657\n493 488\n", "9\n811 859\n193 676\n76 141\n945 951\n497 455\n18 22\n335 294\n267 275\n656 689\n", "3\n246 201\n907 909\n388 683\n", "10\n579 816\n806 590\n830 787\n120 278\n677 800\n16 67\n188 251\n559 560\n47 67\n104 98\n", "5\n664 666\n762 941\n739 875\n844 842\n2 2\n", "6\n1 1\n2 1\n2 2\n4 5\n4 3\n2 3\n", "19\n802 820\n368 248\n758 794\n455 378\n876 888\n771 814\n245 31\n586 555\n844 842\n598 360\n820 856\n731 624\n982 975\n825 856\n122 121\n862 896\n42 4\n792 841\n828 820\n", "7\n429 506\n346 307\n99 171\n406 916\n322 263\n115 157\n71 924\n", "30\n57 3\n167 156\n784 849\n943 937\n144 95\n24 159\n80 120\n657 683\n585 596\n43 147\n909 964\n131 84\n345 389\n333 321\n91 126\n274 325\n859 723\n866 922\n622 595\n690 752\n902 944\n127 170\n426 383\n905 925\n172 284\n793 810\n414 510\n890 884\n123 24\n23 255\n", "17\n660 646\n440 442\n689 618\n441 415\n922 865\n950 972\n312 366\n203 229\n873 860\n219 199\n344 308\n169 247\n961 992\n153 84\n55 230\n987 938\n834 815\n", "11\n664 845\n722 911\n374 376\n629 537\n748 856\n831 885\n486 641\n751 829\n609 492\n98 27\n654 663\n", "36\n429 424\n885 972\n442 535\n512 511\n751 759\n4 115\n461 497\n496 408\n8 23\n542 562\n296 331\n448 492\n412 395\n109 166\n622 640\n379 355\n251 262\n564 586\n66 115\n275 218\n666 611\n629 534\n510 567\n635 666\n738 803\n420 369\n92 17\n101 144\n141 92\n258 258\n184 235\n492 456\n311 210\n394 357\n531 512\n634 636\n", "14\n25 23\n499 406\n193 266\n823 751\n219 227\n101 138\n978 992\n43 74\n997 932\n95 189\n634 536\n774 740\n842 767\n742 802\n", "23\n420 424\n280 303\n515 511\n956 948\n799 803\n849 455\n362 369\n299 289\n823 813\n982 967\n986 878\n185 157\n529 551\n964 989\n655 656\n1 21\n114 112\n45 56\n935 937\n1000 997\n934 942\n360 366\n648 621\n", "40\n685 711\n433 403\n703 710\n491 485\n616 619\n288 282\n884 871\n367 352\n500 511\n977 982\n51 31\n576 564\n508 519\n755 762\n22 20\n368 353\n232 225\n953 955\n452 436\n311 330\n967 988\n369 364\n791 803\n150 149\n651 661\n118 93\n398 387\n748 766\n852 852\n230 228\n555 300\n515 519\n667 678\n867 862\n134 60\n859 863\n96 99\n486 469\n303 296\n780 786\n", "2\n802 903\n952 471\n"], "output": ["6\n", "0\n", "34\n", "31\n", "3\n", "1\n", "13\n", "28\n", "22\n", "29\n", "2\n", "25\n", "11\n", "7\n", "8\n", "4\n", "16\n", "5\n", "10\n", "38\n", "30\n", "0\n", "0\n", "0\n", "0\n", "6\n", "6\n", "1\n", "0\n", "1\n", "0\n", "0\n", "22\n", "2\n", "0\n", "6\n", "29\n", "16\n", "3\n", "34\n", "13\n", "22\n", "1\n", "0\n", "1\n", "1\n", "1\n", "29\n", "5\n", "3\n", "0\n", "1\n", "0\n", "0\n", "6\n", "34\n", "31\n", "3\n", "13\n", "1\n", "22\n", "6\n", "6\n", "2\n", "2\n", "11\n", "0\n", "22\n", "8\n", "2\n", "8\n", "4\n", "0\n", "16\n", "6\n", "29\n", "16\n", "10\n", "34\n", "13\n", "22\n", "38\n", "1\n"]}, "short_description": "1. One-sentence summary:  \n   Count the number of connected components in an undirected graph whose vertices are points and edges connect any two points sharing either coordinate.\n\n2. Core algorithmic approach:  \n   Depth-First Search (DFS) on an implicit adjacency graph (O(n\u00b2) neighbor checks).\n\n3. Reusable components:  \n   \u2022 Generic DFS/BFS routine on an adjacency condition defined by a predicate rather than an explicit list.  \n   \u2022 A visited-flag array or boolean marker within a node-record to track exploration state.  \n   \u2022 A pattern for counting connected components by iterating over unvisited nodes and launching a traversal from each."}
{"name": "771_A. Bear and Friendship Condition", "description": "Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).\n\nThere are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.\n\nLet A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.\n\nFor example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.\n\nCan you help Limak and check if the network is reasonable? Print \"YES\" or \"NO\" accordingly, without the quotes.\n\nInput\n\nThe first line of the input contain two integers n and m (3 \u2264 n \u2264 150 000, <image>) \u2014 the number of members and the number of pairs of members that are friends.\n\nThe i-th of the next m lines contains two distinct integers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.\n\nOutput\n\nIf the given network is reasonable, print \"YES\" in a single line (without the quotes). Otherwise, print \"NO\" in a single line (without the quotes).\n\nExamples\n\nInput\n\n4 3\n1 3\n3 4\n1 4\n\n\nOutput\n\nYES\n\n\nInput\n\n4 4\n3 1\n2 3\n3 4\n1 2\n\n\nOutput\n\nNO\n\n\nInput\n\n10 4\n4 3\n5 10\n8 9\n1 2\n\n\nOutput\n\nYES\n\n\nInput\n\n3 2\n1 2\n2 3\n\n\nOutput\n\nNO\n\nNote\n\nThe drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is \"NO\" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.\n\n<image>", "solution": "n,m = map(int,input().split())\ndic = {}\nedges = []\nfrom collections import Counter\ndef find(node):\n    tmp = node\n    while node!=dic[node]:\n        node = dic[node]\n    while tmp!=dic[tmp]:\n        dic[tmp],tmp=node,dic[tmp]\n    return node\nfor _ in range(m):\n    p1,p2 = map(int,input().split())\n    dic.setdefault(p1,p1)\n    dic.setdefault(p2,p2)\n    edges.append(p1)\n    lp = find(p1)\n    rp = find(p2)\n    if lp!=rp:\n        dic[rp] = lp\nfor k in dic:\n    find(k)\ndef judge():\n    counter = Counter([dic[i] for i in edges])\n    s = Counter(dic.values())\n    for k in counter:\n        en,nn = counter[k],s[k]\n        if (nn**2-nn)//2!=en:\n            return False\n    return True\nif judge():\n    print(\"YES\")\nelse:\n    print(\"NO\")", "difficulty": 7, "public_tests": {"input": ["10 4\n4 3\n5 10\n8 9\n1 2\n", "4 4\n3 1\n2 3\n3 4\n1 2\n", "3 2\n1 2\n2 3\n", "4 3\n1 3\n3 4\n1 4\n"], "output": ["YES\n", "NO\n", "NO\n", "YES\n"]}, "private_tests": {"input": ["4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n", "6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n1 6\n", "4 3\n1 2\n1 3\n1 4\n", "4 4\n1 2\n2 3\n3 4\n4 1\n", "5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n", "150000 3\n150000 149999\n149998 149999\n149998 150000\n", "5 9\n1 2\n5 1\n3 1\n1 4\n2 4\n5 3\n5 4\n2 3\n5 2\n", "10 8\n10 7\n9 7\n5 7\n6 8\n3 5\n8 10\n3 4\n7 8\n", "3 1\n1 2\n", "10 5\n9 5\n1 2\n6 8\n6 3\n10 6\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "3 3\n2 3\n1 2\n1 3\n", "6 6\n1 2\n2 4\n4 3\n1 5\n5 6\n6 3\n", "3 2\n3 2\n1 3\n", "99 26\n64 17\n48 70\n71 50\n3 50\n9 60\n61 64\n53 50\n25 12\n3 71\n71 53\n3 53\n65 70\n9 25\n9 12\n59 56\n39 60\n64 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n65 48\n61 69\n", "10 15\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n4 5\n1 6\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n", "4 4\n1 2\n1 3\n4 2\n4 3\n", "5 4\n1 2\n2 5\n3 4\n4 5\n", "4 4\n1 2\n2 3\n3 4\n1 4\n", "4 4\n1 2\n1 3\n2 4\n3 4\n", "4 2\n4 1\n2 1\n", "4 3\n1 2\n1 3\n3 4\n", "5 5\n1 4\n5 3\n5 1\n2 3\n4 5\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n13 11\n30 29\n16 12\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 7\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "150000 10\n62562 50190\n48849 60549\n139470 18456\n21436 25159\n66845 120884\n99972 114453\n11631 99153\n62951 134848\n78114 146050\n136760 131762\n", "5 4\n1 2\n1 3\n1 4\n1 5\n", "3 0\n", "4 5\n1 2\n1 3\n1 4\n2 3\n3 4\n", "4 3\n3 1\n2 1\n3 2\n", "150000 0\n", "1000 4\n100 132\n100 164\n196 132\n196 164\n", "4 5\n1 2\n1 3\n2 3\n1 4\n2 4\n", "9 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 1\n", "4 3\n1 2\n1 3\n2 4\n", "6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n", "10 20\n8 2\n8 3\n1 8\n9 5\n2 4\n10 1\n10 5\n7 5\n7 8\n10 7\n6 5\n3 7\n1 9\n9 8\n7 2\n2 10\n2 1\n6 4\n9 7\n4 3\n", "3 2\n1 2\n1 3\n", "6 12\n1 2\n1 4\n1 5\n1 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n", "6 9\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n", "15 42\n8 1\n3 14\n7 14\n12 3\n7 9\n6 7\n6 12\n14 12\n3 10\n10 14\n6 3\n3 13\n13 10\n7 12\n7 2\n6 10\n11 4\n9 3\n8 4\n7 3\n2 3\n2 10\n9 13\n2 14\n6 14\n13 2\n1 4\n13 6\n7 10\n13 14\n12 10\n13 7\n12 2\n9 10\n13 12\n2 6\n9 14\n6 9\n12 9\n11 1\n2 9\n11 8\n"], "output": ["NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n"]}, "generated_tests": {"input": ["4 5\n1 2\n1 3\n2 4\n2 3\n2 4\n", "1101 4\n001 284\n111 98\n222 38\n607 164\n", "6 6\n2 2\n2 3\n3 4\n4 5\n5 6\n1 6\n", "10 8\n10 7\n9 7\n5 7\n6 8\n3 7\n8 10\n3 4\n7 8\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n1 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "99 26\n64 17\n48 70\n71 50\n3 50\n9 60\n61 64\n53 50\n25 12\n3 71\n71 78\n3 53\n65 70\n9 25\n9 12\n59 56\n39 60\n64 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n65 48\n61 69\n", "10 15\n1 2\n1 4\n2 4\n2 5\n3 4\n3 5\n4 5\n1 6\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n", "4 4\n1 2\n1 3\n2 4\n1 4\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n13 11\n30 29\n16 12\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 7\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n17 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "5 4\n1 2\n2 3\n1 4\n1 5\n", "1000 4\n100 132\n110 164\n196 132\n196 164\n", "4 5\n1 2\n1 3\n2 4\n1 4\n2 4\n", "9 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n1 9\n9 1\n", "10 20\n8 4\n8 3\n1 8\n9 5\n2 4\n10 1\n10 5\n7 5\n7 8\n10 7\n6 5\n3 7\n1 9\n9 8\n7 2\n2 10\n2 1\n6 4\n9 7\n4 3\n", "6 12\n1 2\n1 4\n1 5\n1 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n4 1\n4 6\n", "6 9\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n3 4\n3 5\n2 6\n", "10 4\n5 3\n5 10\n8 9\n1 2\n", "4 3\n2 3\n3 4\n1 4\n", "6 6\n1 2\n2 3\n3 4\n4 2\n5 6\n1 6\n", "10 8\n10 7\n9 7\n5 6\n6 8\n3 7\n8 10\n3 4\n7 8\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n1 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n1 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "99 26\n64 17\n48 70\n71 50\n3 50\n9 60\n61 64\n53 50\n2 12\n3 71\n71 78\n3 53\n65 70\n9 25\n9 12\n59 56\n39 60\n64 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n65 48\n61 69\n", "10 15\n1 2\n1 4\n2 4\n2 5\n3 4\n3 5\n4 2\n1 6\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n", "4 4\n1 4\n1 3\n2 4\n1 4\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n13 11\n30 29\n16 12\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 7\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n8 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n17 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "1000 4\n100 132\n111 164\n196 132\n196 164\n", "9 9\n1 2\n2 3\n3 6\n4 5\n5 6\n6 7\n7 8\n1 9\n9 1\n", "10 20\n8 4\n8 3\n1 8\n9 5\n2 4\n10 1\n10 5\n2 5\n7 8\n10 7\n6 5\n3 7\n1 9\n9 8\n7 2\n2 10\n2 1\n6 4\n9 7\n4 3\n", "6 12\n1 4\n1 4\n1 5\n1 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n4 1\n4 6\n", "6 9\n1 4\n1 5\n1 6\n2 4\n2 6\n2 6\n3 4\n3 5\n2 6\n", "10 8\n10 7\n9 7\n5 6\n6 8\n3 7\n8 10\n3 4\n4 8\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n1 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n1 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 12\n13 14\n1 17\n15 1\n17 11\n", "99 26\n64 17\n48 70\n71 50\n3 50\n9 60\n61 64\n53 50\n2 12\n3 71\n71 78\n3 53\n65 70\n9 25\n9 5\n59 56\n39 60\n64 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n65 48\n61 69\n", "10 15\n1 2\n1 4\n2 4\n2 5\n3 4\n1 5\n4 2\n1 6\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n13 11\n30 29\n16 12\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 7\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n1 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n8 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n17 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "1000 4\n100 263\n111 164\n196 132\n196 164\n", "10 20\n8 4\n8 3\n1 8\n9 5\n2 4\n10 1\n10 5\n2 5\n7 8\n10 7\n6 5\n3 7\n1 9\n9 8\n7 2\n2 10\n3 1\n6 4\n9 7\n4 3\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n1 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n1 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n6 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 12\n13 14\n1 17\n15 1\n17 11\n", "99 26\n64 17\n48 70\n71 50\n3 50\n9 60\n61 64\n53 50\n2 12\n3 71\n71 78\n3 53\n65 70\n9 25\n9 5\n59 56\n39 60\n64 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n17 48\n61 69\n", "10 15\n1 2\n1 4\n2 4\n2 5\n3 4\n1 5\n4 4\n1 6\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n13 11\n30 29\n16 12\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 7\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n1 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n8 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n23 9\n18 26\n1 28\n30 22\n17 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "1000 4\n101 263\n111 164\n196 132\n196 164\n", "10 20\n8 4\n8 3\n1 8\n9 5\n2 4\n10 1\n10 5\n2 10\n7 8\n10 7\n6 5\n3 7\n1 9\n9 8\n7 2\n2 10\n3 1\n6 4\n9 7\n4 3\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n1 13\n3 13\n12 7\n9 13\n10 20\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n1 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n6 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 12\n13 14\n1 17\n15 1\n17 11\n", "99 26\n64 17\n48 70\n71 50\n3 50\n9 60\n61 64\n53 50\n2 12\n3 71\n71 78\n3 53\n63 70\n9 25\n9 5\n59 56\n39 60\n64 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n17 48\n61 69\n", "1000 4\n101 284\n111 164\n196 132\n196 164\n", "10 20\n8 4\n8 3\n1 8\n9 1\n2 4\n10 1\n10 5\n2 10\n7 8\n10 7\n6 5\n3 7\n1 9\n9 8\n7 2\n2 10\n3 1\n6 4\n9 7\n4 3\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n1 13\n3 13\n12 9\n9 13\n10 20\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n1 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n6 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 12\n13 14\n1 17\n15 1\n17 11\n", "99 26\n64 17\n48 70\n71 50\n3 50\n9 60\n61 64\n53 50\n2 12\n3 71\n71 78\n3 53\n63 70\n9 25\n9 5\n59 22\n39 60\n64 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n17 48\n61 69\n", "1000 4\n101 284\n111 164\n196 174\n196 164\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n1 13\n3 13\n12 9\n9 13\n10 20\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n1 1\n9 12\n18 15\n17 3\n7 15\n4 5\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n6 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 12\n13 14\n1 17\n15 1\n17 11\n", "99 26\n64 17\n48 70\n71 50\n3 50\n9 60\n61 64\n53 50\n2 12\n3 71\n71 78\n3 53\n63 70\n9 25\n9 5\n59 22\n39 60\n65 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n17 48\n61 69\n", "1000 4\n101 284\n111 164\n222 174\n196 164\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n1 9\n3 13\n12 9\n9 13\n10 20\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n1 1\n9 12\n18 15\n17 3\n7 15\n4 5\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n6 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 12\n13 14\n1 17\n15 1\n17 11\n", "1000 4\n101 284\n111 164\n222 174\n319 164\n", "1001 4\n101 284\n111 164\n222 174\n319 164\n", "1001 4\n101 284\n111 164\n222 38\n319 164\n", "1101 4\n101 284\n111 164\n222 38\n319 164\n", "1101 4\n001 284\n111 164\n222 38\n319 164\n", "1101 4\n001 284\n111 164\n222 38\n607 164\n", "1001 4\n001 284\n111 98\n222 38\n607 164\n", "1001 4\n001 284\n111 98\n222 38\n607 12\n", "1001 4\n001 284\n111 98\n138 38\n607 12\n", "1001 4\n001 284\n111 98\n138 38\n607 21\n", "1001 4\n001 284\n111 98\n99 38\n607 21\n", "1001 4\n001 389\n111 98\n99 38\n607 21\n", "1001 4\n001 389\n101 98\n99 38\n607 21\n", "1001 4\n001 389\n100 98\n99 38\n607 21\n", "1001 4\n001 389\n100 98\n99 38\n74 21\n", "1011 4\n001 389\n100 98\n99 38\n74 21\n", "4 5\n1 3\n1 3\n1 4\n2 3\n2 4\n", "6 6\n1 2\n2 3\n3 4\n5 5\n5 6\n1 6\n", "8 5\n1 2\n2 3\n3 4\n4 5\n5 1\n", "150000 3\n150000 149999\n149998 80719\n149998 150000\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 8\n3 9\n13 14\n1 17\n15 1\n17 11\n", "6 6\n1 2\n2 3\n4 3\n1 5\n5 6\n6 3\n", "99 26\n64 17\n48 70\n71 50\n4 50\n9 60\n61 64\n53 50\n25 12\n3 71\n71 53\n3 53\n65 70\n9 25\n9 12\n59 56\n39 60\n64 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n65 48\n61 69\n", "5 4\n1 4\n2 5\n3 4\n4 5\n", "4 4\n1 3\n1 3\n2 4\n3 4\n"], "output": ["NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary  \nDetermine whether each connected component in an undirected graph is a complete graph (clique) by comparing the actual edge count to the expected n\u00b7(n\u20131)/2 for that component.\n\n2. Core algorithmic approach  \nUnion-find (disjoint-set) to group vertices into components, followed by simple counting to verify the clique property.\n\n3. Reusable components  \n- A UnionFind/DSU implementation with path compression (find and union operations).  \n- Counting occurrences with a hash-map or Counter to track component sizes and edge counts.  \n- Formula n\u00b7(n\u20131)/2 to compute the required number of edges for a complete graph of size n."}
{"name": "510_B. Fox And Two Dots", "description": "Fox Ciel is playing a mobile puzzle game called \"Two Dots\". The basic levels are played on a board of size n \u00d7 m cells, like this:\n\n<image>\n\nEach cell contains a dot that has some color. We will use different uppercase Latin characters to express different colors.\n\nThe key of this game is to find a cycle that contain dots of same color. Consider 4 blue dots on the picture forming a circle as an example. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:\n\n  1. These k dots are different: if i \u2260 j then di is different from dj. \n  2. k is at least 4. \n  3. All dots belong to the same color. \n  4. For all 1 \u2264 i \u2264 k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge. \n\n\n\nDetermine if there exists a cycle on the field.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 50): the number of rows and columns of the board.\n\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.\n\nOutput\n\nOutput \"Yes\" if there exists a cycle, and \"No\" otherwise.\n\nExamples\n\nInput\n\n3 4\nAAAA\nABCA\nAAAA\n\n\nOutput\n\nYes\n\n\nInput\n\n3 4\nAAAA\nABCA\nAADA\n\n\nOutput\n\nNo\n\n\nInput\n\n4 4\nYYYR\nBYBY\nBBBY\nBBBY\n\n\nOutput\n\nYes\n\n\nInput\n\n7 6\nAAAAAB\nABBBAB\nABAAAB\nABABBB\nABAAAB\nABBBAB\nAAAAAB\n\n\nOutput\n\nYes\n\n\nInput\n\n2 13\nABCDEFGHIJKLM\nNOPQRSTUVWXYZ\n\n\nOutput\n\nNo\n\nNote\n\nIn first sample test all 'A' form a cycle.\n\nIn second sample there is no such cycle.\n\nThe third sample is displayed on the picture above ('Y' = Yellow, 'B' = Blue, 'R' = Red).", "solution": "'''\nZijian He\n1429876\n'''\n# Import\nfrom sys import setrecursionlimit\nsetrecursionlimit(10**6)\n\n\n# Function from class\nclass Graph:\n    def __init__ (self):\n        self._alist = {}\n\n    def add_vertex (self, vertex):\n        if vertex not in self._alist:\n            self._alist[vertex] = set()\n\n    def add_edge (self, source, destination):\n        self.add_vertex(source)\n        self.add_vertex(destination)\n        self._alist[source].add(destination)\n\n    def is_edge (self, source, destination):\n        return (self.is_vertex(source)\n                and destination in self._alist[source])\n\n    def is_vertex (self, vertex):\n        return vertex in self._alist\n\n    def neighbours (self, vertex):\n        return self._alist[vertex]\n\n    def vertices (self):\n        return self._alist.keys()\n\nclass UndirectedGraph (Graph):\n    def add_edge (self, a, b):\n        super().add_edge (a, b)\n        super().add_edge (b, a)\n\ndef depth_first_search(g, v):\n    reached = {}\n    def do_dfs(curr, prev):\n        if curr in reached:\n            return\n        reached[curr] = prev\n        for succ in g.neighbours(curr):\n            do_dfs(succ, curr)\n    do_dfs(v, v)\n    return reached\n#-----------------------------------------------------------------------\n\n# Declaire the variables for checking the cycle\nDetect = False\n\nvertex = {}\n\ndef dfs_v2(g, curr, prev):\n\tglobal Detect\n\tglobal vertex\n\t\n\tif Detect:\n\t\treturn\n\t\t\n\tvertex[curr] = True\n\n\tfor succ in g.neighbours(curr):\n\t\n\t\tif vertex[succ] and succ != prev:\n\t\t\tDetect = True\n\t\t\treturn\n\t\tif not vertex[succ]:\n\t\t\tdfs_v2(g, succ, curr)\n\n\ndef cycle(g):\n\tglobal Detect\n\tglobal vertex\n\t\n\t# Initialize all the node as unmarked\n\tfor i in g.vertices():\n\t\tvertex[i] = False\n\t\t\n\t# Check throughout the node\n\tfor j in g.vertices():\n\t\tif not vertex[j]:\n\t\t\tdfs_v2(g, j, j)\n\t\tif Detect:\n\t\t\tbreak\n\treturn \n\n# ----------------------------------------------------------------------\n\n\n\n# Process the input\nrow, col = map(int, input().split(\" \"))\nrows = []\n\nfor i in range(row):\n\trows.append(input())\n\t\n# Set node as a dictionary\nnode = {}\n\nfor i in range(row):\n\tfor j in range(col):\n\t\tnode[i * col + j] = rows[i][j]\n\t\n# Set up the graph\nresult_Graph = UndirectedGraph()\n\n# Connecting the node with same color\nfor i in range(row * col):\n\t\n\tresult_Graph.add_vertex(i)\n\t\n\ttry:\n\t\tif node[i] == node[i + 1] and (i % col) != (col - 1):\n\t\t\tresult_Graph.add_edge(i, i + 1)\t\n\t\t\t\n\t\tif node[i] == node[i + col]:\n\t\t\tresult_Graph.add_edge(i, i + col)\n\texcept:\n\t\tcontinue\n\n# Main function\ncycle(result_Graph)\n\nif Detect:\n\tprint(\"Yes\")\n\t\nelse:\n\tprint(\"No\")\n", "difficulty": 8, "public_tests": {"input": ["2 13\nABCDEFGHIJKLM\nNOPQRSTUVWXYZ\n", "7 6\nAAAAAB\nABBBAB\nABAAAB\nABABBB\nABAAAB\nABBBAB\nAAAAAB\n", "3 4\nAAAA\nABCA\nAAAA\n", "3 4\nAAAA\nABCA\nAADA\n", "4 4\nYYYR\nBYBY\nBBBY\nBBBY\n"], "output": ["No\n", "Yes\n", "Yes\n", "No\n", "Yes\n"]}, "private_tests": {"input": ["10 10\nHIICQRHPUJ\nBCDUKHMBFK\nPFTUIDOBOE\nQQPITLRKUP\nERMUJMOSMF\nMRSICEILQB\nODIGFNCHFR\nGHIOAFLHJH\nFBLAQNGEIF\nFDLEGDUTNG\n", "2 2\nAA\nAB\n", "2 50\nDADCDBCCDAACDBCAACADBCBDBACCCCDADCBACADBCCBDBCCBCC\nDADAADCABBBACCDDBABBBDCBACBCCCCDDADCDABADDDCABACDB\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nFA\nCF\nFB\nDE\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "3 3\nAAA\nABA\nABA\n", "3 3\nAAA\nABA\nAAA\n", "2 2\nAA\nAA\n", "10 10\nEGFJGJKGEI\nAKJHBGHIHF\nJBABBCFGEJ\nCJDJHJJKBD\nKHJIKKGGEK\nHHJHKHGEKF\nEKFCAJGGDK\nAFKBBFICAA\nFEDFAGHEKA\nCAAGIFHGGI\n"], "output": ["No\n", "No\n", "Yes\n", "No\n", "No\n", "Yes\n", "Yes\n", "No\n"]}, "generated_tests": {"input": ["10 10\nHIIDQRHPUJ\nBCDUKHMBFK\nPFTUIDOBOE\nQQPITLRKUP\nERMUJMOSMF\nMRSICEILQB\nODIGFNCHFR\nGHIOAFLHJH\nFBLAQNGEIF\nFDLEGDUTNG\n", "2 50\nDADCDBCCDAACDBCAACADBCBDBACBCCDADCBACADBCCBDBCCBCC\nDADAADCABBBACCDDBABBBDCBACBCCCCDDADCDABADDDCABACDB\n", "2 2\nAB\nAB\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDE\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "2 13\nABCDEFGHJJKLM\nNOPQRSTUVWXYZ\n", "3 4\nAAAA\nACCA\nAADA\n", "4 4\nYYYR\nBYBY\nBABY\nBBBY\n", "10 10\nHIPDQRHIUJ\nBCDUKHMBFK\nPFTUIDOBOE\nQQPITLRKUP\nERMUJMOSMF\nMRSICEILQB\nODIGFNCHFR\nGHIOAFLHJH\nFBLAQNGEIF\nFDLEGDUTNG\n", "2 50\nDADCDBCCDAACDBCAACADBCBDBACBCCDADCBACADBCCBDBCCBCC\nDADAADCABBBACCDDBABBBDCBACBCCCCDDACCDABADDDCABACDB\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "2 50\nDADCDBCCDAACDBCAACADBCBDBACBCCDADCBACADBCCBDBCCBCC\nDADAADCABBBACCDDBABBBDCBACBCCCCDDACCDABADDDCABABDB\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "2 50\nDADCDBCCDAACDBCAACADBCBDBACBCCDADCBACADBCCBDBCCBCC\nEADAADCABBBACCDDBABBBDCBACBCCCCDDACCDABADDDCABABDB\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAE\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nBC\nBB\nDC\nAE\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nBC\nBB\nDC\nAE\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nEB\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "10 10\nHIICQRHPUJ\nBCDUKHMBFK\nPFTUIDOEOB\nQQPITLRKUP\nERMUJMOSMF\nMRSICEILQB\nODIGFNCHFR\nGHIOAFLHJH\nFBLAQNGEIF\nFDLEGDUTNG\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nFD\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nFA\nCF\nFB\nDE\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "10 10\nEGFJGJKGEI\nAKJHBGHIHF\nJBABBCFGEJ\nCJDJHJJKBD\nKHGIKKJGEK\nHHJHKHGEKF\nEKFCAJGGDK\nAFKBBFICAA\nFEDFAGHEKA\nCAAGIFHGGI\n", "2 13\nABCDEFGHIJKLM\nZYXWVUTSRQPON\n", "3 4\nAABA\nABCA\nAADA\n", "10 10\nHIIDQRHPUJ\nBCDUKHMBFK\nPFTUIDOBOE\nQQPITLRKUP\nERMUJMOSMF\nMRSICEILQB\nRFHCNFGIDO\nGHIOAFLHJH\nFBLAQNGEIF\nFDLEGDUTNG\n", "2 2\nAB\nBA\n", "2 50\nDADCDBCCDAACDBCAACADBCBDBACBCCDADCBACADBCCCDBCCBCC\nDADAADCABBBACCDDBABBBDCBACBCCCCDDADCDABADDDCABACDB\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAF\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDE\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "2 50\nDADCDBCCDAACDBCAACADBCBDBACBCCDADCBACADBCCBDBCCBCC\nBDCABACDDDABADCCADDCCCCBCABCDBBBABDDCCABBBACDAADAD\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nEB\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nFD\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nCA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nFE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAG\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFD\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nCF\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nDA\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAE\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nFA\nFC\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nBC\nBB\nDC\nAE\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nBC\nBB\nDC\nAE\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nEB\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDE\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "10 10\nJUPHRQCIIH\nBCDUKHMBFK\nPFTUIDOEOB\nQQPITLRKUP\nERMUJMOSMF\nMRSICEILQB\nODIGFNCHFR\nGHIOAFLHJH\nFBLAQNGEIF\nFDLEGDUTNG\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nFD\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFA\nAE\nBE\nFA\nCF\nFB\nDE\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "10 10\nEGFJGJKGEI\nAKJHBGHIHF\nJBABBCFGEJ\nCJDJHJJKBD\nKHGIKKJGEK\nHHJHKHGEKF\nEKFCAJGGDK\nAFKBBFICAA\nFEDFAGHDKA\nCAAGIFHGGI\n", "3 4\nAABB\nABCA\nAADA\n", "10 10\nHIIDQRHPUJ\nBCDUKHMBFK\nPFTUIDOBOE\nQQPITLRKUP\nERUMJMOSMF\nMRSICEILQB\nRFHCNFGIDO\nGHIOAFLHJH\nFBLAQNGEIF\nFDLEGDUTNG\n", "2 2\nAC\nBA\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nAB\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAF\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDE\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "2 50\nDADCDBCCBAACDBCAACADBCBDBACBCCDADCBACADBCCDDBCCBCC\nBDCABACDDDABADCCADDCCCCBCABCDBBBABDDCCABBBACDAADAD\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nEB\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nAF\nBB\nBF\nDA\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAG\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nFD\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nCA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nFC\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nEC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nFE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAE\nFC\nAD\nBA\nAG\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFD\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFD\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nCF\nAD\nBA\nAF\nBF\nDB\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nDA\nBA\nAF\nAF\nDA\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAE\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFD\nED\nAF\nFC\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nBC\nBB\nDC\nAE\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nEB\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDE\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "10 10\nJUPHRQCIIH\nBCDUKHMBFK\nPFTUICOEOB\nQQPITLRKUP\nERMUJMOSMF\nMRSICEILQB\nODIGFNCHFR\nGHIOAFLHJH\nFBLAQNGEIF\nFDLEGDUTNG\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nBA\nAF\nBF\nAD\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nFD\nCD\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFA\nAE\nBE\nFA\nCF\nFB\nDE\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "10 10\nEGFJGJKGEI\nAKJHBFHIHG\nJBABBCFGEJ\nCJDJHJJKBD\nKHGIKKJGEK\nHHJHKHGEKF\nEKFCAJGGDK\nAFKBBFICAA\nFEDFAGHDKA\nCAAGIFHGGI\n", "3 4\nBABB\nABCA\nAADA\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nAB\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAD\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCC\nFC\nFB\nBB\nDD\nEB\nBE\nCF\nDE\nAF\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDE\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAG\nFC\nAD\nBA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nBE\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nFD\nED\nAD\nFA\nBB\nBF\nDA\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nAD\nCA\nAF\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFB\nBB\nDD\nEB\nEB\nFC\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nCF\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nDE\nAE\nFC\nAD\nBA\nAG\nBF\nDA\nAC\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFD\nAD\nBA\nAF\nBF\nDA\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nAB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFD\nFB\nDF\nED\nAD\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nEE\nAF\nCF\nAD\nBA\nAF\nBF\nDB\nCA\nFC\nFA\nBF\nAC\nBB\nDC\nAF\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFC\nED\nAF\nFC\nDA\nBA\nAF\nAF\nDA\nCA\nFC\nEA\nBF\nAC\nBB\nDC\nAE\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nBE\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDF\nED\nDA\nFA\nBB\nBF\nAD\nEE\n", "50 2\nAA\nCD\nEE\nFD\nED\nAF\nFC\nAD\nBA\nAF\nBF\nEA\nCA\nFC\nFA\nBF\nBC\nBB\nDC\nAE\nAA\nAD\nEE\nED\nCD\nFC\nFA\nBB\nDD\nEB\nEB\nCF\nDE\nAE\nFD\nAB\nFB\nAE\nBE\nAF\nFC\nFB\nDE\nED\nDA\nFA\nBB\nBF\nAD\nEE\n"], "output": ["No\n", "Yes\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "Yes\n", "No\n", "Yes\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n"]}, "short_description": "1. One-sentence summary  \nGiven a 2D grid of labels, the solution builds an undirected graph by linking adjacent cells of identical labels and determines whether this graph contains any cycle.\n\n2. Core algorithmic approach  \nUndirected\u2010graph cycle detection via depth-first search with parent tracking: the algorithm performs a DFS from each unvisited vertex, marking nodes and checking for a back-edge to any visited neighbor other than the immediate parent.\n\n3. Reusable components  \n- A generic Graph/UndirectedGraph class with methods for adding vertices, adding edges, and retrieving neighbours.  \n- A DFS-based cycle detection routine that carries the previous node in recursion to distinguish back-edges from tree-edges.  \n- A grid-to-graph conversion pattern: linearizing 2D indices, iterating over cells, and adding edges for matching adjacent cells."}
{"name": "156_D. Clues", "description": "As Sherlock Holmes was investigating another crime, he found a certain number of clues. Also, he has already found direct links between some of those clues. The direct links between the clues are mutual. That is, the direct link between clues A and B and the direct link between clues B and A is the same thing. No more than one direct link can exist between two clues.\n\nOf course Sherlock is able to find direct links between all clues. But it will take too much time and the criminals can use this extra time to hide. To solve the crime, Sherlock needs each clue to be linked to all other clues (maybe not directly, via some other clues). Clues A and B are considered linked either if there is a direct link between them or if there is a direct link between A and some other clue C which is linked to B. \n\nSherlock Holmes counted the minimum number of additional direct links that he needs to find to solve the crime. As it turns out, it equals T.\n\nPlease count the number of different ways to find exactly T direct links between the clues so that the crime is solved in the end. Two ways to find direct links are considered different if there exist two clues which have a direct link in one way and do not have a direct link in the other way. \n\nAs the number of different ways can turn out rather big, print it modulo k.\n\nInput\n\nThe first line contains three space-separated integers n, m, k (1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105, 1 \u2264 k \u2264 109) \u2014 the number of clues, the number of direct clue links that Holmes has already found and the divisor for the modulo operation.\n\nEach of next m lines contains two integers a and b (1 \u2264 a, b \u2264 n, a \u2260 b), that represent a direct link between clues. It is guaranteed that any two clues are linked by no more than one direct link. Note that the direct links between the clues are mutual.\n\nOutput\n\nPrint the single number \u2014 the answer to the problem modulo k.\n\nExamples\n\nInput\n\n2 0 1000000000\n\n\nOutput\n\n1\n\n\nInput\n\n3 0 100\n\n\nOutput\n\n3\n\n\nInput\n\n4 1 1000000000\n1 4\n\n\nOutput\n\n8\n\nNote\n\nThe first sample only has two clues and Sherlock hasn't found any direct link between them yet. The only way to solve the crime is to find the link.\n\nThe second sample has three clues and Sherlock hasn't found any direct links between them. He has to find two of three possible direct links between clues to solve the crime \u2014 there are 3 ways to do it.\n\nThe third sample has four clues and the detective has already found one direct link between the first and the fourth clue. There are 8 ways to find two remaining clues to solve the crime.", "solution": "def dfs(node, my_cc):\n    vis[node] = True\n    acc[my_cc]+=1\n    for i in adj[node]:\n        if not vis[i]:\n            dfs(i, my_cc)\n\ndef ittDfs(node):\n    queue = [node]\n    curr = 0\n    while(queue):\n        node = queue.pop()\n        if vis[node]:\n            continue\n        vis[node] = True\n        acc[cc] += 1\n        for i in adj[node]:\n            if not vis[i]:\n                queue.append(i)\n\ndef bfs(node):\n\tvis[node] = True\n\tcola = [node]\n\n\tcur = 0\n\n\twhile (cur < len(cola)):\n\t\tx = cola[cur]\n\t\tacc[cc] += 1\n\t\tcur += 1;\n\n\t\tfor i in adj[x]:\n\t\t\tif not vis[i]:\n\t\t\t\tvis[i] = True\n\t\t\t\tcola.append(i)\n\n            \nif __name__ == '__main__':\n    _input = input().split()\n    n = int(_input[0])\n    m = int(_input[1])\n    k = int(_input[2])\n    \n    adj = []\n    vis = []\n    acc = []\n    cc = 0\n    for i in range(n):\n        vis.append(False)\n        adj.append([])\n        acc.append(0)\n\n    for i in range(m):\n        _in2 = input().split()\n        v = int(_in2[0]) - 1\n        w = int(_in2[1]) - 1\n        adj[v].append(w)\n        adj[w].append(v)\n        \n    for i in range(n):\n        if not vis[i]:\n            # dfs(i, cc)\n            ittDfs(i)\n            cc+=1\n    \n    if cc == 1:\n        print(1 % k)\n        exit()\n        \n    ans = 1\n    for i in range(cc - 2):\n        ans = ans * n\n        ans = ans % k\n    for i in range(cc):\n        ans = ans * acc[i]\n        ans = ans % k\n    print(ans)\n        ", "difficulty": 10, "public_tests": {"input": ["4 1 1000000000\n1 4\n", "3 0 100\n", "2 0 1000000000\n"], "output": ["8\n", "3\n", "1\n"]}, "private_tests": {"input": ["100000 0 1\n", "2 1 100000\n1 2\n", "2 1 819865995\n2 1\n", "83 33 367711297\n14 74\n26 22\n55 19\n8 70\n6 42\n53 49\n54 56\n52 17\n62 44\n78 61\n76 4\n78 30\n51 2\n31 42\n33 67\n45 41\n64 62\n15 25\n33 35\n37 20\n38 65\n65 83\n61 14\n20 67\n62 47\n7 34\n78 41\n38 83\n26 69\n54 58\n11 62\n30 55\n15 74\n", "8 4 17\n1 2\n2 3\n3 4\n4 1\n", "10 45 220178113\n9 1\n8 1\n5 8\n1 5\n7 8\n6 7\n7 9\n6 2\n3 2\n1 4\n8 3\n8 9\n3 6\n4 5\n5 3\n10 4\n3 9\n9 6\n5 9\n2 9\n10 7\n1 10\n9 4\n3 10\n2 5\n7 1\n6 10\n6 5\n8 6\n8 4\n8 10\n1 6\n4 2\n9 10\n2 10\n7 3\n6 4\n7 5\n1 2\n4 3\n10 5\n4 7\n3 1\n7 2\n8 2\n", "9 11 498920381\n2 8\n5 4\n1 8\n8 3\n4 9\n3 6\n8 9\n1 7\n5 1\n5 6\n9 6\n", "2 1 1000\n1 2\n", "30 18 918975816\n30 18\n23 1\n21 14\n14 8\n18 9\n23 29\n3 23\n29 19\n18 4\n27 19\n30 2\n9 10\n9 28\n16 15\n10 6\n18 12\n23 9\n19 14\n", "3 2 11\n1 2\n2 3\n", "2 0 753780649\n", "3 3 975373207\n1 2\n1 3\n3 2\n", "1 0 997185958\n", "1 0 773734495\n", "9 35 480175322\n6 3\n8 6\n7 5\n7 9\n3 4\n2 8\n5 3\n4 5\n4 6\n7 1\n7 6\n2 5\n8 3\n6 9\n8 4\n8 5\n6 1\n8 1\n3 2\n5 1\n8 9\n3 1\n8 7\n5 6\n5 9\n4 9\n7 4\n2 7\n3 9\n2 4\n7 3\n9 1\n2 9\n1 4\n1 2\n", "1 0 10000\n", "5 7 729985252\n2 3\n3 1\n2 5\n1 5\n1 2\n1 4\n4 3\n", "57 28 776442742\n31 10\n25 28\n51 45\n14 40\n21 52\n53 51\n52 53\n4 6\n51 35\n53 15\n17 16\n40 44\n37 51\n33 43\n55 40\n42 16\n30 8\n19 45\n7 27\n31 8\n49 8\n43 44\n45 3\n16 22\n32 36\n52 36\n5 26\n2 23\n", "10 5 1000000000\n1 2\n4 3\n5 6\n8 7\n10 9\n", "24 68 862907549\n6 9\n16 22\n11 23\n12 17\n18 2\n15 5\n5 22\n16 4\n21 9\n7 11\n19 16\n9 13\n21 20\n5 24\n7 12\n17 1\n24 21\n23 7\n16 17\n16 18\n10 13\n18 7\n8 21\n13 5\n10 18\n4 11\n21 6\n15 13\n2 1\n20 16\n11 16\n22 19\n2 4\n21 1\n6 18\n24 12\n21 19\n6 14\n22 24\n11 20\n2 19\n1 11\n24 18\n14 8\n10 24\n5 3\n11 3\n17 4\n4 20\n2 10\n12 11\n24 7\n23 16\n2 3\n19 24\n22 1\n22 4\n4 6\n3 4\n11 13\n6 5\n18 23\n4 23\n22 13\n20 5\n2 5\n2 11\n9 5\n", "10 0 766953983\n", "67 2 818380264\n4 52\n15 44\n", "3 2 21502109\n3 2\n1 2\n", "47 51 283106191\n18 14\n30 26\n24 2\n18 41\n35 31\n16 24\n29 39\n6 12\n17 21\n7 19\n36 16\n27 39\n28 34\n22 35\n28 43\n40 5\n2 26\n18 16\n27 13\n21 6\n19 5\n35 30\n13 31\n7 10\n25 7\n44 42\n45 1\n35 47\n11 28\n47 46\n18 15\n27 16\n24 41\n10 8\n25 41\n4 40\n5 11\n24 6\n10 17\n41 38\n47 28\n8 29\n25 24\n35 37\n44 17\n24 47\n8 32\n33 11\n26 28\n23 9\n5 9\n", "15 10 1\n1 2\n4 5\n6 3\n11 8\n8 5\n5 9\n9 1\n11 12\n12 1\n2 8\n", "588 32 634894588\n535 26\n562 406\n70 368\n357 513\n108 361\n515 5\n159 56\n522 81\n169 229\n312 252\n492 43\n476 405\n524 555\n537 169\n142 149\n586 112\n7 159\n76 370\n295 376\n33 455\n278 225\n377 88\n526 308\n517 303\n300 576\n230 493\n588 525\n177 312\n356 215\n515 34\n196 236\n323 9\n", "2 1 855341703\n2 1\n", "100000 0 1000000000\n", "2 1 719418546\n1 2\n", "10 7 587143295\n1 10\n7 1\n1 8\n7 10\n8 10\n4 8\n6 8\n", "10 30 407595309\n3 6\n6 10\n6 7\n7 10\n7 8\n3 10\n3 4\n1 4\n9 10\n8 4\n3 7\n5 1\n2 4\n6 2\n8 9\n10 5\n7 5\n10 4\n5 8\n8 2\n10 2\n1 6\n4 7\n2 3\n5 6\n8 10\n3 5\n1 8\n9 7\n1 9\n", "5 10 93196990\n1 5\n1 4\n4 2\n1 3\n3 4\n1 2\n5 2\n5 4\n5 3\n2 3\n", "1 0 21080115\n", "7 7 302838679\n5 3\n4 1\n5 4\n6 5\n1 6\n3 2\n6 4\n", "8 8 999999937\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n8 7\n", "2 1 100\n1 2\n", "1 0 1\n", "1 0 10\n", "6 4 100000\n1 4\n4 6\n6 1\n2 5\n", "99 12 832839308\n66 23\n36 5\n16 57\n70 62\n94 96\n63 33\n99 23\n63 10\n6 85\n73 23\n69 46\n72 95\n", "3 2 42\n1 2\n2 3\n", "5 4 100000\n1 2\n2 3\n3 4\n4 5\n", "3 3 100\n1 2\n2 3\n3 1\n", "6 1 310732484\n4 2\n", "9 33 321578376\n9 5\n6 3\n8 4\n4 1\n3 5\n2 6\n8 2\n7 6\n7 9\n8 6\n4 5\n1 6\n1 2\n5 6\n9 4\n7 8\n3 9\n9 6\n4 7\n7 2\n1 8\n4 6\n8 3\n3 7\n8 9\n5 7\n3 4\n7 1\n9 2\n5 1\n2 5\n9 1\n3 2\n", "10 0 123456789\n", "9 6 342597160\n1 2\n3 4\n4 5\n6 7\n7 8\n8 9\n", "10 36 279447540\n10 7\n10 8\n1 8\n1 5\n4 5\n9 5\n3 9\n7 3\n10 4\n8 9\n2 10\n6 2\n4 8\n10 3\n1 4\n10 1\n10 6\n8 3\n3 6\n9 7\n10 5\n6 9\n3 1\n8 6\n4 9\n5 3\n9 10\n7 2\n2 4\n7 4\n5 6\n5 8\n7 5\n5 2\n6 7\n1 9\n", "30 70 288262020\n27 18\n5 19\n23 17\n16 17\n29 17\n1 22\n23 5\n10 13\n22 26\n14 3\n8 3\n29 9\n9 1\n3 9\n16 4\n9 22\n10 22\n20 1\n3 7\n23 19\n26 8\n24 1\n5 7\n28 29\n20 11\n16 12\n6 9\n24 29\n30 4\n5 26\n18 21\n5 21\n30 6\n12 13\n16 23\n28 14\n30 1\n7 27\n7 19\n27 17\n5 30\n30 27\n28 30\n12 28\n27 9\n30 26\n20 18\n21 16\n8 30\n4 26\n13 22\n2 14\n12 30\n4 2\n6 12\n29 25\n19 29\n14 15\n3 23\n10 28\n7 1\n21 10\n4 12\n1 14\n7 21\n21 8\n17 26\n7 6\n26 29\n9 8\n", "86 23 608266393\n62 78\n44 84\n42 37\n20 24\n40 36\n41 76\n14 38\n80 72\n39 52\n31 58\n71 17\n81 6\n32 65\n11 69\n43 86\n85 59\n28 77\n78 64\n15 19\n36 39\n53 49\n48 75\n33 85\n"], "output": ["0\n", "1\n", "1\n", "131377693\n", "8\n", "1\n", "1\n", "1\n", "782410104\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "135540294\n", "32000\n", "1\n", "100000000\n", "517849052\n", "1\n", "189974\n", "0\n", "478655040\n", "1\n", "0\n", "1\n", "6000\n", "1\n", "1\n", "1\n", "6\n", "1\n", "1\n", "0\n", "1\n", "36\n", "71450536\n", "1\n", "1\n", "1\n", "432\n", "1\n", "100000000\n", "216\n", "1\n", "1\n", "235915236\n"]}, "generated_tests": {"input": ["2 1 110000\n1 2\n", "8 4 17\n1 3\n2 3\n3 4\n4 1\n", "30 18 918975816\n30 18\n23 1\n21 14\n14 8\n17 9\n23 29\n3 23\n29 19\n18 4\n27 19\n30 2\n9 10\n9 28\n16 15\n10 6\n18 12\n23 9\n19 14\n", "57 28 776442742\n31 10\n25 28\n51 45\n14 40\n21 52\n53 51\n52 53\n4 6\n51 35\n53 15\n17 16\n40 44\n37 51\n33 43\n55 52\n42 16\n30 8\n19 45\n7 27\n31 8\n49 8\n43 44\n45 3\n16 22\n32 36\n52 36\n5 26\n2 23\n", "10 5 1000000000\n1 2\n4 3\n5 2\n8 7\n10 9\n", "10 0 56786793\n", "15 10 1\n1 2\n4 5\n6 3\n11 8\n8 5\n5 2\n9 1\n11 12\n12 1\n2 8\n", "588 32 634894588\n535 26\n562 406\n70 368\n357 513\n108 361\n515 5\n159 56\n522 81\n169 229\n312 252\n492 43\n476 405\n524 555\n537 11\n142 149\n586 112\n7 159\n76 370\n295 376\n33 455\n278 225\n377 88\n526 308\n517 303\n300 576\n230 493\n588 525\n177 312\n356 215\n515 34\n196 236\n323 9\n", "2 1 855341703\n2 2\n", "8 10 93196990\n1 5\n1 4\n4 2\n1 3\n3 4\n1 2\n5 2\n5 4\n5 3\n2 3\n", "7 7 302838679\n5 3\n4 1\n5 4\n6 5\n1 6\n1 2\n6 4\n", "99 12 832839308\n66 23\n36 5\n16 57\n70 62\n94 96\n63 33\n99 23\n63 10\n6 9\n73 23\n69 46\n72 95\n", "6 1 310732484\n4 1\n", "8 1 1000000000\n1 4\n", "3 0 110\n", "57 28 776442742\n31 10\n25 28\n51 45\n14 40\n21 52\n53 57\n52 53\n4 6\n51 35\n53 15\n17 16\n40 44\n37 51\n33 43\n55 52\n42 16\n30 8\n19 45\n7 27\n31 8\n49 8\n43 44\n45 3\n16 22\n32 36\n52 36\n5 26\n2 23\n", "10 0 24779564\n", "4 3 100\n1 2\n2 3\n3 1\n", "14 36 279447540\n10 7\n10 8\n1 8\n1 5\n4 5\n9 5\n3 9\n7 3\n10 4\n8 9\n2 10\n6 2\n4 8\n8 3\n1 4\n10 1\n10 6\n8 3\n3 6\n9 7\n10 5\n6 9\n3 1\n8 6\n4 9\n5 3\n9 10\n7 2\n2 4\n7 4\n5 6\n5 8\n7 5\n5 2\n6 7\n1 9\n", "16 1 1000000000\n1 4\n", "2 1 989003834\n2 1\n", "9 11 498920381\n2 8\n5 4\n1 8\n8 3\n4 9\n3 2\n8 9\n1 7\n5 1\n5 6\n9 6\n", "2 1 1100\n1 2\n", "3 3 975373207\n2 2\n1 3\n3 2\n", "9 35 480175322\n5 3\n8 6\n7 5\n7 9\n3 4\n2 8\n5 3\n4 5\n4 6\n7 1\n7 6\n2 5\n8 3\n6 9\n8 4\n8 5\n6 1\n8 1\n3 2\n5 1\n8 9\n3 1\n8 7\n5 6\n5 9\n4 9\n7 4\n2 7\n3 9\n2 4\n7 3\n9 1\n2 9\n1 4\n1 2\n", "1 0 10001\n", "5 7 729985252\n2 3\n3 1\n2 5\n1 5\n1 2\n1 2\n4 3\n", "24 68 862907549\n6 9\n16 22\n11 23\n12 17\n18 2\n15 5\n5 22\n16 4\n21 9\n7 11\n19 16\n9 13\n21 20\n5 24\n7 12\n17 1\n24 21\n23 7\n16 17\n16 18\n10 13\n18 7\n8 21\n13 5\n10 18\n4 11\n21 6\n15 13\n2 1\n20 16\n11 16\n22 19\n2 4\n21 1\n6 18\n24 12\n21 19\n6 14\n22 24\n11 20\n2 19\n1 11\n24 18\n14 8\n10 24\n5 3\n11 3\n17 4\n1 20\n2 10\n12 11\n24 7\n23 16\n2 3\n19 24\n22 1\n22 4\n4 6\n3 4\n11 13\n6 5\n18 23\n4 23\n22 13\n20 5\n2 5\n2 11\n9 5\n", "3 2 31007477\n3 2\n1 2\n", "10 30 566439979\n3 6\n6 10\n6 7\n7 10\n7 8\n3 10\n3 4\n1 4\n9 10\n8 4\n3 7\n5 1\n2 4\n6 2\n8 9\n10 5\n7 5\n10 4\n5 8\n8 2\n10 2\n1 6\n4 7\n2 3\n5 6\n8 10\n3 5\n1 8\n9 7\n1 9\n", "2 0 21080115\n", "2 1 100\n2 2\n", "1 0 11\n", "6 3 100\n1 2\n2 3\n3 1\n", "9 33 321578376\n9 5\n6 3\n8 4\n4 1\n3 5\n2 6\n8 2\n7 6\n7 9\n8 6\n4 5\n1 6\n1 2\n5 6\n9 4\n7 8\n3 9\n9 9\n4 7\n7 2\n1 8\n4 6\n8 3\n3 7\n8 9\n5 7\n3 4\n7 1\n9 2\n5 1\n2 5\n9 1\n3 2\n", "10 36 279447540\n10 7\n10 8\n1 8\n1 5\n4 5\n9 5\n3 9\n7 3\n10 4\n8 9\n2 10\n6 2\n4 8\n8 3\n1 4\n10 1\n10 6\n8 3\n3 6\n9 7\n10 5\n6 9\n3 1\n8 6\n4 9\n5 3\n9 10\n7 2\n2 4\n7 4\n5 6\n5 8\n7 5\n5 2\n6 7\n1 9\n", "30 70 288262020\n27 18\n5 19\n23 17\n16 17\n29 17\n1 22\n23 5\n10 13\n22 26\n14 3\n8 3\n29 9\n9 1\n3 9\n16 4\n9 22\n10 22\n20 1\n3 7\n23 19\n26 8\n24 1\n5 7\n28 29\n20 11\n16 12\n6 9\n24 29\n30 4\n5 26\n18 21\n5 21\n30 6\n12 13\n16 23\n28 14\n30 1\n7 27\n7 19\n27 17\n5 30\n30 27\n28 30\n12 28\n27 9\n30 26\n20 18\n21 16\n8 30\n4 26\n23 22\n2 14\n12 30\n4 2\n6 12\n29 25\n19 29\n14 15\n3 23\n10 28\n7 1\n21 10\n4 12\n1 14\n7 21\n21 8\n17 26\n7 6\n26 29\n9 8\n", "4 4 17\n1 3\n2 3\n3 4\n4 1\n", "30 18 918975816\n30 18\n23 1\n21 9\n14 8\n17 9\n23 29\n3 23\n29 19\n18 4\n27 19\n30 2\n9 10\n9 28\n16 15\n10 6\n18 12\n23 9\n19 14\n", "9 35 480175322\n5 3\n8 4\n7 5\n7 9\n3 4\n2 8\n5 3\n4 5\n4 6\n7 1\n7 6\n2 5\n8 3\n6 9\n8 4\n8 5\n6 1\n8 1\n3 2\n5 1\n8 9\n3 1\n8 7\n5 6\n5 9\n4 9\n7 4\n2 7\n3 9\n2 4\n7 3\n9 1\n2 9\n1 4\n1 2\n", "5 7 729985252\n2 3\n5 1\n2 5\n1 5\n1 2\n1 2\n4 3\n", "24 68 862907549\n6 9\n16 22\n11 23\n12 17\n18 2\n15 5\n5 22\n16 4\n21 9\n7 11\n19 16\n9 13\n21 20\n5 24\n7 12\n17 1\n24 21\n23 7\n16 17\n16 18\n10 13\n18 7\n8 21\n13 5\n10 18\n4 11\n21 6\n15 13\n2 1\n20 16\n11 16\n22 19\n2 4\n21 1\n6 18\n24 12\n21 19\n6 14\n22 24\n11 20\n2 19\n1 11\n24 18\n14 8\n10 24\n5 3\n11 3\n17 4\n1 20\n2 10\n12 11\n24 7\n23 22\n2 3\n19 24\n22 1\n22 4\n4 6\n3 4\n11 13\n6 5\n18 23\n4 23\n22 13\n20 5\n2 5\n2 11\n9 5\n", "3 2 48180342\n3 2\n1 2\n", "15 10 1\n1 2\n4 5\n6 3\n11 8\n6 5\n5 2\n9 1\n11 12\n12 1\n2 8\n", "588 32 634894588\n535 26\n562 406\n70 368\n357 513\n108 361\n515 5\n159 54\n522 81\n169 229\n312 252\n492 43\n476 405\n524 555\n537 11\n142 149\n586 112\n7 159\n76 370\n295 376\n33 455\n278 225\n377 88\n526 308\n517 303\n300 576\n230 493\n588 525\n177 312\n356 215\n515 34\n196 236\n323 9\n", "10 30 566439979\n3 6\n6 10\n6 7\n7 10\n7 8\n3 10\n3 4\n1 4\n9 10\n8 4\n3 7\n5 1\n2 4\n6 2\n8 9\n10 5\n7 5\n10 4\n5 8\n8 2\n8 2\n1 6\n4 7\n2 3\n5 6\n8 10\n3 5\n1 8\n9 7\n1 9\n", "8 10 93196990\n1 1\n1 4\n4 2\n1 3\n3 4\n1 2\n5 2\n5 4\n5 3\n2 3\n", "2 0 24022820\n", "1 0 14\n", "9 33 321578376\n9 5\n6 3\n8 4\n4 1\n3 5\n2 6\n8 2\n7 6\n7 9\n8 6\n4 5\n1 6\n1 2\n5 6\n9 4\n8 8\n3 9\n9 9\n4 7\n7 2\n1 8\n4 6\n8 3\n3 7\n8 9\n5 7\n3 4\n7 1\n9 2\n5 1\n2 5\n9 1\n3 2\n", "30 70 288262020\n27 18\n5 19\n23 25\n16 17\n29 17\n1 22\n23 5\n10 13\n22 26\n14 3\n8 3\n29 9\n9 1\n3 9\n16 4\n9 22\n10 22\n20 1\n3 7\n23 19\n26 8\n24 1\n5 7\n28 29\n20 11\n16 12\n6 9\n24 29\n30 4\n5 26\n18 21\n5 21\n30 6\n12 13\n16 23\n28 14\n30 1\n7 27\n7 19\n27 17\n5 30\n30 27\n28 30\n12 28\n27 9\n30 26\n20 18\n21 16\n8 30\n4 26\n23 22\n2 14\n12 30\n4 2\n6 12\n29 25\n19 29\n14 15\n3 23\n10 28\n7 1\n21 10\n4 12\n1 14\n7 21\n21 8\n17 26\n7 6\n26 29\n9 8\n", "9 35 480175322\n5 3\n8 4\n7 5\n7 9\n3 4\n2 8\n5 3\n4 5\n4 6\n7 2\n7 6\n2 5\n8 3\n6 9\n8 4\n8 5\n6 1\n8 1\n3 2\n5 1\n8 9\n3 1\n8 7\n5 6\n5 9\n4 9\n7 4\n2 7\n3 9\n2 4\n7 3\n9 1\n2 9\n1 4\n1 2\n"], "output": ["1\n", "8\n", "285778512\n", "284121670\n", "24000\n", "43213207\n", "0\n", "3312132\n", "1", "320\n", "6", "71450536\n", "432\n", "65536\n", "3\n", "451800980\n", "881744\n", "3", "27440\n", "254740992\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1", "1", "1\n", "8\n", "1\n", "1\n", "1\n", "1\n", "285778512\n", "1\n", "1\n", "1\n", "1\n", "0\n", "3312132\n", "1\n", "320\n", "1", "1\n", "1\n", "1\n", "1\n"]}, "short_description": "1. One-sentence summary  \nCompute the sizes of all connected components in an undirected graph and then combine those sizes with a simple modular arithmetic formula.\n\n2. Core algorithmic approach  \nGraph traversal via depth-first search or breadth-first search to identify and size each connected component.\n\n3. Reusable components  \n- Iterative graph traversal (stack- or queue-based DFS) for marking reachable nodes without recursion.  \n- Breadth-first search loop that tracks visited flags and accumulates component size.  \n- Common adjacency-list plus visited-array pattern for exploring sparse graphs."}
{"name": "103_B. Cthulhu", "description": "...Once upon a time a man came to the sea. The sea was stormy and dark. The man started to call for the little mermaid to appear but alas, he only woke up Cthulhu...\n\nWhereas on the other end of the world Pentagon is actively collecting information trying to predict the monster's behavior and preparing the secret super weapon. Due to high seismic activity and poor weather conditions the satellites haven't yet been able to make clear shots of the monster. The analysis of the first shot resulted in an undirected graph with n vertices and m edges. Now the world's best minds are about to determine whether this graph can be regarded as Cthulhu or not.\n\nTo add simplicity, let's suppose that Cthulhu looks from the space like some spherical body with tentacles attached to it. Formally, we shall regard as Cthulhu such an undirected graph that can be represented as a set of three or more rooted trees, whose roots are connected by a simple cycle.\n\nIt is guaranteed that the graph contains no multiple edges and self-loops.\n\n<image>\n\nInput\n\nThe first line contains two integers \u2014 the number of vertices n and the number of edges m of the graph (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 <image>).\n\nEach of the following m lines contains a pair of integers x and y, that show that an edge exists between vertices x and y (1 \u2264 x, y \u2264 n, x \u2260 y). For each pair of vertices there will be at most one edge between them, no edge connects a vertex to itself.\n\nOutput\n\nPrint \"NO\", if the graph is not Cthulhu and \"FHTAGN!\" if it is.\n\nExamples\n\nInput\n\n6 6\n6 3\n6 4\n5 1\n2 5\n1 4\n5 4\n\n\nOutput\n\nFHTAGN!\n\nInput\n\n6 5\n5 6\n4 6\n3 1\n5 1\n1 2\n\n\nOutput\n\nNO\n\nNote\n\nLet us denote as a simple cycle a set of v vertices that can be numbered so that the edges will only exist between vertices number 1 and 2, 2 and 3, ..., v - 1 and v, v and 1.\n\nA tree is a connected undirected graph consisting of n vertices and n - 1 edges (n > 0).\n\nA rooted tree is a tree where one vertex is selected to be the root.", "solution": "\ninp = input().split()\n\nn = int(inp[0])\nm = int(inp[1])\n\ndef dfs(x):\n\n    visited.add(x)\n\n    for y in e[x]:\n\n        if not y in visited:\n\n            dfs(y)\n\nif n >= 3 and n == m:\n\n    visited = set()\n\n    e = [[] for i in range(n + 1)]\n    \n    for i in range(m):\n    \n        x, y = map(int, input().split())\n    \n        e[x].append(y)\n    \n        e[y].append(x)\n\n    dfs(1)\n \n    print('FHTAGN!' if len(visited) == n else 'NO')\nelse:\n    print('NO')\n\n \n ", "difficulty": 8, "public_tests": {"input": ["6 5\n5 6\n4 6\n3 1\n5 1\n1 2\n", "6 6\n6 3\n6 4\n5 1\n2 5\n1 4\n5 4\n"], "output": ["NO\n", "FHTAGN!\n"]}, "private_tests": {"input": ["100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "100 1\n11 23\n", "30 30\n17 6\n16 29\n16 13\n16 20\n29 26\n17 5\n27 28\n24 16\n7 18\n24 10\n1 27\n12 17\n27 30\n6 1\n3 30\n5 19\n18 13\n16 2\n30 1\n5 8\n14 16\n26 18\n7 19\n5 6\n23 14\n6 8\n23 8\n18 8\n18 3\n5 21\n", "12 15\n3 2\n11 12\n1 9\n2 1\n1 8\n9 6\n11 5\n9 5\n9 10\n11 3\n7 11\n5 6\n11 10\n4 6\n4 2\n", "2 1\n1 2\n", "4 4\n1 2\n3 4\n4 1\n2 4\n", "3 0\n", "5 4\n1 5\n1 3\n1 4\n3 2\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n8 9\n20 8\n6 2\n2 15\n7 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "3 1\n1 3\n", "3 3\n1 2\n2 3\n3 1\n", "12 10\n1 11\n3 6\n5 7\n4 7\n6 8\n11 7\n3 12\n11 12\n7 9\n12 2\n", "6 5\n1 2\n2 3\n3 1\n1 4\n1 5\n", "10 10\n4 10\n8 5\n2 8\n4 9\n9 3\n2 7\n10 6\n10 2\n9 8\n1 8\n", "10 10\n5 7\n8 1\n10 3\n6 4\n10 6\n5 3\n5 6\n2 6\n4 3\n2 10\n", "2 0\n", "4 4\n1 2\n4 3\n2 3\n3 1\n", "4 3\n1 2\n2 3\n3 1\n", "3 2\n1 2\n2 3\n", "5 5\n2 3\n2 4\n5 4\n4 1\n1 2\n", "100 0\n", "10 10\n1 10\n5 9\n6 2\n8 9\n9 1\n5 4\n2 8\n1 3\n6 3\n4 1\n", "1 0\n", "12 12\n4 12\n4 7\n4 9\n7 2\n5 12\n2 1\n5 9\n8 6\n10 12\n2 5\n10 9\n12 3\n", "6 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n"], "output": ["NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "generated_tests": {"input": ["100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n19 59\n36 77\n55 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "5 5\n2 3\n2 5\n5 4\n4 1\n1 2\n", "100 0\n11 23\n", "30 30\n17 6\n16 29\n16 13\n16 20\n24 26\n17 5\n27 28\n24 16\n7 18\n24 10\n1 27\n12 17\n27 30\n6 1\n3 30\n5 19\n18 13\n16 2\n30 1\n5 8\n14 16\n26 18\n7 19\n5 6\n23 14\n6 8\n23 8\n18 8\n18 3\n5 21\n", "2 1\n2 2\n", "4 0\n1 2\n3 4\n4 1\n2 4\n", "4 0\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n7 8\n8 9\n20 8\n6 2\n2 15\n7 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "3 1\n1 2\n2 3\n3 1\n", "14 10\n1 11\n3 6\n5 7\n4 7\n6 8\n11 7\n3 12\n11 12\n7 9\n12 2\n", "10 10\n4 10\n8 5\n2 8\n4 9\n9 4\n2 7\n10 6\n10 2\n9 8\n1 8\n", "10 10\n5 7\n8 1\n10 2\n6 4\n10 6\n5 3\n5 6\n2 6\n4 3\n2 10\n", "5 0\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n19 59\n36 77\n55 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n37 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "100 0\n22 23\n", "30 30\n17 6\n16 29\n16 13\n16 20\n24 26\n17 5\n27 28\n24 16\n7 18\n24 10\n1 27\n12 17\n27 30\n6 1\n3 30\n5 19\n18 13\n16 2\n30 1\n5 8\n14 16\n26 18\n8 19\n5 6\n23 14\n6 8\n23 8\n18 8\n18 3\n5 21\n", "4 0\n1 2\n3 4\n7 1\n2 4\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n2 10\n19 15\n4 10\n7 8\n8 9\n20 8\n6 2\n2 15\n7 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "3 1\n1 2\n2 6\n3 1\n", "14 10\n1 11\n3 6\n5 7\n4 7\n6 8\n11 7\n1 12\n11 12\n7 9\n12 2\n", "17 10\n4 10\n8 5\n2 8\n4 9\n9 4\n2 7\n10 6\n10 2\n9 8\n1 8\n", "10 10\n5 7\n8 1\n10 4\n6 4\n10 6\n5 3\n5 6\n2 6\n4 3\n2 10\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n19 59\n36 77\n55 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 7\n100 82\n85 6\n58 25\n66 6\n14 32\n37 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "4 0\n1 2\n3 4\n7 1\n4 4\n", "14 10\n1 11\n1 6\n5 7\n4 7\n6 8\n11 7\n1 12\n11 12\n7 9\n12 2\n", "17 10\n4 10\n8 5\n2 8\n4 9\n9 4\n2 7\n11 6\n10 2\n9 8\n1 8\n", "10 10\n5 7\n7 1\n10 4\n6 4\n10 6\n5 3\n5 6\n2 6\n4 3\n2 10\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n19 59\n36 77\n2 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 7\n100 82\n85 6\n58 25\n66 6\n14 32\n37 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "4 0\n1 2\n3 4\n7 1\n8 4\n", "14 10\n1 11\n1 6\n5 7\n4 7\n6 8\n11 7\n1 12\n11 12\n7 2\n12 2\n", "17 10\n4 10\n8 5\n2 8\n4 9\n9 5\n2 7\n11 6\n10 2\n9 8\n1 8\n", "10 10\n5 7\n7 1\n10 4\n6 4\n10 6\n5 3\n5 6\n2 6\n4 1\n2 10\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n19 59\n36 77\n2 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 10\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 7\n100 82\n85 6\n58 25\n66 6\n14 32\n37 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "4 0\n1 2\n4 4\n7 1\n8 4\n", "14 10\n1 11\n1 6\n5 7\n4 7\n6 8\n11 7\n1 12\n11 12\n7 2\n12 4\n", "17 10\n4 10\n8 5\n2 8\n4 9\n9 5\n2 7\n11 6\n10 2\n9 12\n1 8\n", "10 10\n5 7\n7 1\n10 4\n6 4\n3 6\n5 3\n5 6\n2 6\n4 1\n2 10\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 69\n40 96\n19 59\n36 77\n2 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 10\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 7\n100 82\n85 6\n58 25\n66 6\n14 32\n37 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "4 0\n1 2\n4 4\n2 1\n8 4\n", "14 10\n1 11\n1 6\n5 7\n4 7\n6 8\n11 7\n1 12\n11 12\n13 2\n12 4\n", "17 10\n4 10\n8 5\n2 8\n4 9\n9 2\n2 7\n11 6\n10 2\n9 12\n1 8\n", "10 10\n5 7\n7 1\n5 4\n6 4\n3 6\n5 3\n5 6\n2 6\n4 1\n2 10\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 69\n40 96\n19 59\n36 77\n2 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 10\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 7\n100 82\n85 6\n58 25\n66 6\n14 32\n37 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 47\n", "4 0\n1 2\n4 0\n2 1\n8 4\n", "4 0\n1 2\n4 1\n2 1\n8 4\n", "4 0\n1 2\n4 2\n2 1\n8 4\n", "4 0\n1 2\n4 2\n2 1\n8 5\n", "4 1\n1 2\n4 2\n2 1\n8 5\n", "4 1\n1 2\n1 2\n2 1\n8 5\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 38\n66 32\n77 58\n11 46\n", "30 6\n17 6\n16 29\n16 13\n16 20\n29 26\n17 5\n27 28\n24 16\n7 18\n24 10\n1 27\n12 17\n27 30\n6 1\n3 30\n5 19\n18 13\n16 2\n30 1\n5 8\n14 16\n26 18\n7 19\n5 6\n23 14\n6 8\n23 8\n18 8\n18 3\n5 21\n", "12 15\n3 1\n11 12\n1 9\n2 1\n1 8\n9 6\n11 5\n9 5\n9 10\n11 3\n7 11\n5 6\n11 10\n4 6\n4 2\n", "3 1\n1 2\n", "8 4\n1 2\n3 4\n4 1\n2 4\n", "20 14\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n8 9\n20 8\n6 2\n2 15\n7 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "10 10\n4 10\n2 5\n2 8\n4 9\n9 3\n2 7\n10 6\n10 2\n9 8\n1 8\n", "10 10\n5 7\n8 1\n10 3\n6 4\n10 6\n5 3\n5 5\n2 6\n4 3\n2 10\n", "4 4\n1 4\n4 3\n2 3\n3 1\n", "4 2\n1 2\n2 3\n", "6 6\n1 2\n2 3\n3 1\n4 5\n3 6\n6 4\n", "6 5\n5 6\n4 6\n6 1\n5 1\n1 2\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n19 59\n36 77\n55 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 90\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "100 0\n1 23\n", "30 30\n17 6\n16 29\n16 13\n16 20\n24 26\n17 5\n27 28\n24 16\n7 18\n24 10\n1 27\n12 17\n27 30\n6 2\n3 30\n5 19\n18 13\n16 2\n30 1\n5 8\n14 16\n26 18\n7 19\n5 6\n23 14\n6 8\n23 8\n18 8\n18 3\n5 21\n", "4 1\n2 2\n", "4 0\n1 2\n3 1\n4 1\n2 4\n", "8 0\n", "3 1\n1 2\n2 3\n6 1\n", "14 10\n1 11\n3 6\n5 7\n4 7\n6 8\n11 7\n3 12\n11 12\n7 9\n13 2\n", "5 5\n2 3\n2 5\n2 4\n4 1\n1 2\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n19 59\n36 77\n55 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 8\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n37 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "100 1\n22 23\n", "4 0\n1 2\n6 4\n7 1\n2 4\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n2 10\n19 15\n4 10\n7 8\n8 9\n20 8\n6 2\n2 15\n7 19\n20 4\n3 16\n1 20\n9 1\n5 10\n", "3 1\n1 2\n2 11\n3 1\n", "14 10\n1 11\n3 7\n5 7\n4 7\n6 8\n11 7\n1 12\n11 12\n7 9\n12 2\n", "17 10\n4 10\n8 5\n2 8\n4 9\n9 4\n2 7\n10 7\n10 2\n9 8\n1 8\n", "4 0\n1 1\n3 4\n7 1\n4 4\n", "14 10\n1 11\n1 6\n5 7\n4 7\n6 8\n11 11\n1 12\n11 12\n7 9\n12 2\n", "17 10\n4 10\n8 5\n2 8\n4 9\n12 4\n2 7\n11 6\n10 2\n9 8\n1 8\n", "10 10\n5 7\n10 1\n10 4\n6 4\n10 6\n5 3\n5 6\n2 6\n4 3\n2 10\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n19 59\n36 77\n2 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 4\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 7\n100 82\n85 6\n58 25\n66 6\n14 32\n37 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "4 0\n1 2\n3 4\n7 1\n3 4\n", "17 10\n4 10\n8 5\n2 8\n4 9\n9 2\n2 7\n11 6\n10 2\n9 8\n1 8\n", "10 10\n3 7\n7 1\n10 4\n6 4\n10 6\n5 3\n5 6\n2 6\n4 1\n2 10\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n19 59\n36 77\n2 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 10\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 7\n100 76\n85 6\n58 25\n66 6\n14 32\n37 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "4 0\n2 2\n4 4\n7 1\n8 4\n", "14 10\n1 11\n1 6\n4 7\n4 7\n6 8\n11 7\n1 12\n11 12\n7 2\n12 4\n", "14 10\n4 10\n8 5\n2 8\n4 9\n9 5\n2 7\n11 6\n10 2\n9 12\n1 8\n", "4 0\n1 2\n4 4\n2 1\n1 4\n"], "output": ["NO\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "FHTAGN!\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary:  \n   Determine whether an undirected graph with n nodes and m edges is connected and contains exactly one simple cycle covering all nodes.\n\n2. Core algorithmic approach:  \n   - Graph connectivity check via depth\u2010first search (DFS).  \n   - Cycle existence inferred from the relationship m == n for a connected undirected graph (a single cycle plus a tree).\n\n3. Reusable components:  \n   - DFS traversal routine (recursive or iterative) with a visited set or array to mark reached nodes.  \n   - Adjacency list construction for undirected graphs.  \n   - Structural validity check for a single-cycle graph: ensure m == n and the DFS visits all n nodes."}
{"name": "1263_D. Secret Passwords", "description": "One unknown hacker wants to get the admin's password of AtForces testing system, to get problems from the next contest. To achieve that, he sneaked into the administrator's office and stole a piece of paper with a list of n passwords \u2014 strings, consists of small Latin letters.\n\nHacker went home and started preparing to hack AtForces. He found that the system contains only passwords from the stolen list and that the system determines the equivalence of the passwords a and b as follows:\n\n  * two passwords a and b are equivalent if there is a letter, that exists in both a and b; \n  * two passwords a and b are equivalent if there is a password c from the list, which is equivalent to both a and b. \n\n\n\nIf a password is set in the system and an equivalent one is applied to access the system, then the user is accessed into the system.\n\nFor example, if the list contain passwords \"a\", \"b\", \"ab\", \"d\", then passwords \"a\", \"b\", \"ab\" are equivalent to each other, but the password \"d\" is not equivalent to any other password from list. In other words, if:\n\n  * admin's password is \"b\", then you can access to system by using any of this passwords: \"a\", \"b\", \"ab\"; \n  * admin's password is \"d\", then you can access to system by using only \"d\". \n\n\n\nOnly one password from the list is the admin's password from the testing system. Help hacker to calculate the minimal number of passwords, required to guaranteed access to the system. Keep in mind that the hacker does not know which password is set in the system.\n\nInput\n\nThe first line contain integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 number of passwords in the list. Next n lines contains passwords from the list \u2013 non-empty strings s_i, with length at most 50 letters. Some of the passwords may be equal.\n\nIt is guaranteed that the total length of all passwords does not exceed 10^6 letters. All of them consist only of lowercase Latin letters.\n\nOutput\n\nIn a single line print the minimal number of passwords, the use of which will allow guaranteed to access the system.\n\nExamples\n\nInput\n\n\n4\na\nb\nab\nd\n\n\nOutput\n\n\n2\n\nInput\n\n\n3\nab\nbc\nabc\n\n\nOutput\n\n\n1\n\nInput\n\n\n1\ncodeforces\n\n\nOutput\n\n\n1\n\nNote\n\nIn the second example hacker need to use any of the passwords to access the system.", "solution": "from sys import stdin\ninp = lambda: stdin.readline().strip()\n\nn = int(inp())\n\n\ndef dfs(visited, graph, node):\n    if not visited[node]:\n        visited[node] = True\n        for neighbour in graph[node]:\n            dfs(visited, graph, neighbour)\n\n\nadj = [set() for x in range(26)]\nvisited = [True]*26\nfor i in range(n):\n    s = list(set(inp()))\n    for j in range(len(s)):\n        visited[ord(s[j])-97] = False\n        for k in range(len(s)):\n            if s[k] != s[j]:\n                adj[ord(s[j])-97].add(ord(s[k])-97)\n\nfor i in range(26):\n    adj[i] = list(adj[i])\ncounter = 0\nfor i in range(26):\n    if not visited[i]:\n        dfs(visited,adj,i)\n        counter += 1\nprint(counter)", "difficulty": 10, "public_tests": {"input": ["1\ncodeforces\n", "3\nab\nbc\nabc\n", "4\na\nb\nab\nd\n"], "output": ["1\n", "1\n", "2\n"]}, "private_tests": {"input": ["3\nac\nbde\nbc\n", "5\nyyyyyyyyyyyyyyyyyyyyyyyyyyy\nxxxxxx\nzz\nzzzzzzzzzzz\nzzzzzzzzzz\n", "3\nab\ncd\nda\n", "2\nab\nad\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnnnnzzn\nljjjjlljlllllj\nduuuudududduuuuududdddduduudduddududdduuuudduddd\nssssssssss\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "3\nasd\nqwe\naq\n", "4\na\nac\nb\ncb\n", "3\naaa\nbbb\nab\n", "5\nuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\nxdxxdxxddxdxdxxdddxdddxxxddx\npyfpffffyyfppyfffpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "3\nab\nbc\nca\n", "7\na\nb\nc\nd\nab\ncd\nabcd\n", "5\naaa\nbbb\nccc\nddd\nab\n", "5\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\nff\nsssssssssssssssssssssss\nwwwwwww\nxxxxxxxx\n", "10\ngzjzzjjjzjzgjgzzgzjjjzzzggjjggggjjzzgzz\nyyyyyyyyyyyyyy\nuuuuuuuuuuuuuuuuuuuuuuuu\nssssssssssssssssssssss\nuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\ngzjgjzzzjgjzggjjjjjzjzzgjgjzgjgjzzjjggzgjzgjgj\ny\nsssssssssss\ngzjzgjjjzggjgzjzgzzz\nsssssssssssssssssssssssssssssss\n"], "output": ["1\n", "3\n", "1\n", "1\n", "5\n", "1\n", "1\n", "1\n", "4\n", "1\n", "1\n", "3\n", "5\n", "4\n"]}, "generated_tests": {"input": ["3\nab\ndc\nda\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnnnnzzn\nljjjjlljlllllj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "5\nuuuuuuuuuuuuuuuuuuuuuuuuuuuvuuuuuuuu\nxdxxdxxddxdxdxxdddxdddxxxddx\npyfpffffyyfppyfffpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "4\na\nb\nab\ne\n", "5\nyyyyyyyyyzyyyyyyyyyyyyyyyyyyyyyyyyyyxyyy\nff\nsssssssssssssssssssssss\nwwwwwww\nxwxxxxxx\n", "2\naa\nad\n", "3\nasd\nqwd\naq\n", "4\nb\nac\nb\ncb\n", "3\naaa\nbbb\nba\n", "3\nab\nbc\nac\n", "7\na\nb\nc\nd\nab\ndc\nabcd\n", "5\nyyyyyyyyyzyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\nff\nsssssssssssssssssssssss\nwwwwwww\nxxxxxxxx\n", "10\ngzjzzjjjzjzgjgzzgzjjjzzzggjjggggjjzzgzz\nyyyyyyyyyyyyyy\nuuuuuuuuuuuuuuuuuuuuuuuu\nssssssssssssssssssssss\nuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\njgjgzjgzggjjzzjgjgzjgjgzzjzjjjjjggzjgjzzzjgjzg\ny\nsssssssssss\ngzjzgjjjzggjgzjzgzzz\nsssssssssssssssssssssssssssssss\n", "1\ncoddforces\n", "3\nba\ndc\nda\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnnnnzzn\nljjjljljlllllj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "3\nasd\nqwd\nar\n", "4\nb\nac\nb\nbc\n", "5\nuuuuuuuuuuuuuuuuuuuuuuuuuuuvuuuuuuuu\nxddxxxdddxdddxxdxdxddxxdxxdx\npyfpffffyyfppyfffpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "3\nba\nbc\nac\n", "7\na\nb\nc\nd\nbb\ndc\nabcd\n", "5\nyyyyyyyyyzyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\nff\nsssssssssssssssssssssss\nwwwwwww\nxwxxxxxx\n", "1\nsecrofddoc\n", "4\na\nb\nba\ne\n", "3\nba\ndc\nad\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnnnnzzn\nljjjljlklllllj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "5\nuuuuuuuuuuuuuuuuuutuuuuuuuuvuuuuuuuu\nxddxxxdddxdddxxdxdxddxxdxxdx\npyfpffffyyfppyfffpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "3\nba\ncc\nac\n", "7\nb\nb\nc\nd\nbb\ndc\nabcd\n", "1\ncoddfsrceo\n", "4\na\nc\nab\ne\n", "3\nba\ndc\nae\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnnnnzzn\nljjjljlkllllmj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "5\nuuuuuuuuuuvuuuuuuutuuuuuuuuvuuuuuuuu\nxddxxxdddxdddxxdxdxddxxdxxdx\npyfpffffyyfppyfffpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "3\nba\ncc\nca\n", "7\nb\nb\nc\ne\nbb\ndc\nabcd\n", "5\nyyyyyyyyyzyyzyyyyyyyyyyyyyyyyyyyyyyyxyyy\nff\nsssssssssssssssssssssss\nwwwwwww\nxwxxxxxx\n", "1\noecrsfddoc\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnnnnzzn\nljjjljlkllllnj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "5\nuuuuuuuuuuvuuuuuuutuuuuuuuuvuuuuuuuu\nxddxxxdddxdddxxdxdxddxxdxxdx\npffpffffyyfppyfyfpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "3\nab\ncc\nca\n", "7\na\nb\nc\ne\nbb\ndc\nabcd\n", "5\nyyyxyyyyyyyyyyyyyyyyyyyyyyyzyyzyyyyyyyyy\nff\nsssssssssssssssssssssss\nwwwwwww\nxwxxxxxx\n", "1\ncoddrsfceo\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnonnzzn\nljjjljlkllllnj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "5\nuuuuuuuuuuvuuuuuuutuuuuuuuuvuuuuuuuu\nxdxxdxxddxdxdxxdddxdddxxxddx\npffpffffyyfppyfyfpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "3\nab\ndc\nca\n", "7\na\nb\nc\ne\nbb\ndc\ndcba\n", "5\nyyyyyyyyyzyyzyyyyyyyyyyyyyyyyyyyyyyyxyyy\nff\nsssssssrsssssssssssssss\nwwwwwww\nxwxxxxxx\n", "1\ndocdrsfceo\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnonnzzn\nljjjljlkllllnj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqq\n", "5\nuuuuuuuuuuvuuuuuuutuuuuuuuuvuuuuuuuu\nxdxxdxxddxdxdxxdddxdddxxxddx\npffpffffyyfppyfygpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "7\na\nb\nc\nf\nbb\ndc\ndcba\n", "1\ndocdrsfdeo\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnonnzzn\nljjjljlkllllnj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\n", "5\nuuuuuuuuuuvuuuuuuutuuuuuuuuvuuuuuuuu\nxdxxdxxddxdxdxxdddxdddxxxddx\npfepffffyyfppyfygpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "7\na\nb\nb\ne\nbb\ndc\ndcba\n", "1\noedfsrdcod\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnonnzzn\nlkjjljlkllllnj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\n", "5\nuuuuuuuuuuvuuuuuuutuuuuuuuuvuuuuuuuu\nxexxdxxddxdxdxxdddxdddxxxddx\npfepffffyyfppyfygpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "7\na\nb\nb\nd\nbb\ndc\ndcba\n", "1\ndocdrsgdeo\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnonnzzn\nlkijljlkllllnj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\n", "1\ndncdrsgdeo\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnonnzzn\nlkijljkkllllnj\nduuuudududduuuuududdddduduuddudduduedduuuudduddd\nssssssssss\nqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\n", "1\noedgsrdcnd\n", "1\ndncdrsgdep\n", "1\ndncrdsgdep\n", "1\ndncsdsgdep\n", "1\ncncsdsgdep\n", "1\ncncsdsfdep\n", "1\ndncsdsfdep\n", "1\ndncscsfdep\n", "1\ndncsscfdep\n", "1\ndncssdfdep\n", "1\npedfdsscnd\n", "1\ndnctscfdep\n", "1\ndnptscfdec\n"], "output": ["1\n", "5\n", "4\n", "2\n", "3\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "5\n", "4\n", "1\n", "1\n", "5\n", "1\n", "1\n", "4\n", "1\n", "1\n", "4\n", "1\n", "2\n", "1\n", "5\n", "4\n", "1\n", "1\n", "1\n", "3\n", "2\n", "5\n", "4\n", "1\n", "2\n", "3\n", "1\n", "4\n", "4\n", "1\n", "2\n", "3\n", "1\n", "4\n", "4\n", "1\n", "2\n", "3\n", "1\n", "4\n", "4\n", "2\n", "1\n", "4\n", "4\n", "2\n", "1\n", "4\n", "3\n", "1\n", "1\n", "4\n", "1\n", "4\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n"]}, "short_description": "1. One-sentence summary:  \n   Builds an undirected graph of elements that co-occur in the same input group and counts how many connected components it has.\n\n2. Core algorithmic approach:  \n   Depth-first search is used to traverse each unvisited node in the adjacency list and thereby count connected components.\n\n3. Reusable components:  \n   - A generic DFS routine over an adjacency list with a visited array to mark reachable nodes.  \n   - Building an adjacency list from pairwise co-occurrence in a group (using a temporary set to dedupe before adding edges).  \n   - The pattern of iterating over all nodes, invoking DFS on unvisited ones, and incrementing a component counter."}
{"name": "216_B. Forming Teams", "description": "One day n students come to the stadium. They want to play football, and for that they need to split into teams, the teams must have an equal number of people.\n\nWe know that this group of people has archenemies. Each student has at most two archenemies. Besides, if student A is an archenemy to student B, then student B is an archenemy to student A.\n\nThe students want to split so as no two archenemies were in one team. If splitting in the required manner is impossible, some students will have to sit on the bench.\n\nDetermine the minimum number of students you will have to send to the bench in order to form the two teams in the described manner and begin the game at last.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 100) \u2014 the number of students and the number of pairs of archenemies correspondingly.\n\nNext m lines describe enmity between students. Each enmity is described as two numbers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi) \u2014 the indexes of the students who are enemies to each other. Each enmity occurs in the list exactly once. It is guaranteed that each student has no more than two archenemies.\n\nYou can consider the students indexed in some manner with distinct integers from 1 to n.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of students you will have to send to the bench in order to start the game.\n\nExamples\n\nInput\n\n5 4\n1 2\n2 4\n5 3\n1 4\n\n\nOutput\n\n1\n\nInput\n\n6 2\n1 4\n3 4\n\n\nOutput\n\n0\n\nInput\n\n6 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n\n\nOutput\n\n2", "solution": "def arr_inp():\n    return [int(x) for x in stdin.readline().split()]\n\n\nclass graph:\n    # initialize graph\n    def __init__(self, gdict=None):\n        if gdict is None:\n            gdict = defaultdict(list)\n        self.gdict = gdict\n\n    # get edges\n    def edges(self):\n        return self.find_edges()\n\n    # find edges\n    def find_edges(self):\n        edges = []\n        for node in self.gdict:\n            for nxNode in self.gdict[node]:\n                if {nxNode, node} not in edges:\n                    edges.append({node, nxNode})\n        return edges\n\n    # Get verticies\n    def get_vertices(self):\n        return list(self.gdict.keys())\n\n    # add vertix\n    def add_vertix(self, node):\n        self.gdict[node] = []\n\n    # add edge\n    def add_edge(self, node1, node2):\n        self.gdict[node1].append(node2)\n        self.gdict[node2].append(node1)\n\n    def dfsUtil(self, v, par):\n\n        self.visit[v] = 1\n\n        for i in self.gdict[v]:\n            if self.visit[i] == 0:\n                self.dfsUtil(i, v)\n                self.topsort += 1\n            elif i != par and v != par:\n                self.topsort += 1\n                self.flag = 1\n\n    # dfs for graph\n    def dfs(self):\n        self.visit, self.cnt, self.topsort, self.flag = defaultdict(int), 0, 0, 0\n\n        for i in self.get_vertices():\n            if self.visit[i] == 0:\n                self.dfsUtil(i, i)\n\n                if self.topsort & 1 and self.topsort >= 3 and self.flag:\n                    self.cnt += 1\n                self.flag = 0\n                self.topsort = 0\n        return self.cnt\n\n\nfrom collections import defaultdict\nfrom sys import stdin\n\nn, m = arr_inp()\nstudent = graph()\nfor i in range(m):\n    a, b = arr_inp()\n    student.add_edge(a, b)\n\nans = student.dfs()\nprint(ans + 1 if (n - ans) & 1 else ans)\n", "difficulty": 8, "public_tests": {"input": ["6 2\n1 4\n3 4\n", "5 4\n1 2\n2 4\n5 3\n1 4\n", "6 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n"], "output": ["0", "1", "2"]}, "private_tests": {"input": ["4 3\n1 3\n3 2\n2 4\n", "6 5\n1 2\n2 3\n3 4\n4 5\n5 1\n", "20 11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 1\n", "20 12\n16 20\n8 3\n20 5\n5 10\n17 7\n13 2\n18 9\n17 18\n1 6\n14 4\n11 12\n10 16\n", "6 5\n2 1\n3 4\n2 3\n4 5\n5 6\n", "16 16\n1 2\n2 3\n1 3\n4 5\n5 6\n4 6\n7 8\n8 9\n9 10\n10 11\n11 7\n12 13\n13 14\n14 15\n15 16\n16 12\n", "4 1\n1 4\n", "100 50\n82 99\n27 56\n74 38\n16 68\n90 27\n77 4\n7 88\n77 33\n25 85\n18 70\n50 7\n31 5\n21 20\n50 83\n55 5\n46 83\n55 81\n73 6\n76 58\n60 67\n66 99\n71 23\n100 13\n76 8\n52 14\n6 54\n53 54\n88 22\n12 4\n33 60\n43 62\n42 31\n19 67\n98 80\n15 17\n78 79\n62 37\n66 96\n40 44\n37 86\n71 58\n42 92\n8 38\n92 13\n73 70\n46 41\n30 34\n15 65\n97 19\n14 53\n", "19 16\n2 16\n7 10\n17 16\n17 14\n1 5\n19 6\n11 13\n15 19\n7 9\n13 5\n4 6\n1 11\n12 9\n10 12\n2 14\n4 15\n", "28 3\n15 3\n10 19\n17 25\n", "33 33\n2 16\n28 20\n13 9\n4 22\n18 1\n6 12\n13 29\n32 1\n17 15\n10 7\n6 15\n16 5\n11 10\n31 29\n25 8\n23 21\n14 32\n8 2\n19 3\n11 4\n21 25\n31 30\n33 5\n26 7\n27 26\n27 12\n30 24\n33 17\n28 22\n18 24\n19 9\n3 23\n14 20\n", "10 9\n5 10\n3 2\n8 6\n4 5\n4 10\n6 1\n1 8\n9 2\n3 9\n", "100 10\n88 82\n5 78\n66 31\n65 100\n92 25\n71 62\n47 31\n17 67\n69 68\n59 49\n", "4 2\n4 1\n2 1\n", "49 36\n17 47\n19 27\n41 23\n31 27\n11 29\n34 10\n35 2\n42 24\n19 16\n38 24\n5 9\n26 9\n36 14\n18 47\n28 40\n45 13\n35 22\n2 15\n31 30\n20 48\n39 3\n8 34\n36 7\n25 17\n5 39\n29 1\n32 33\n16 30\n38 49\n25 18\n1 11\n7 44\n12 43\n15 22\n49 21\n8 23\n", "4 3\n3 2\n4 2\n4 3\n", "4 2\n2 4\n3 4\n", "3 1\n2 3\n", "4 4\n1 2\n4 3\n1 4\n2 3\n", "3 2\n1 2\n3 2\n", "4 3\n1 2\n3 4\n1 3\n", "93 72\n3 87\n88 60\n73 64\n45 35\n61 85\n68 80\n54 29\n4 88\n19 91\n82 48\n50 2\n40 53\n56 8\n66 82\n83 81\n62 8\n79 30\n89 26\n77 10\n65 15\n27 47\n15 51\n70 6\n59 85\n63 20\n64 92\n7 1\n93 52\n74 38\n71 23\n83 12\n86 52\n46 56\n34 36\n37 84\n18 16\n11 42\n69 72\n53 20\n78 84\n54 91\n14 5\n65 49\n90 19\n42 39\n68 57\n75 27\n57 32\n44 9\n79 74\n48 66\n43 93\n31 30\n58 24\n80 67\n6 60\n39 5\n23 17\n25 1\n18 36\n32 67\n10 9\n14 11\n63 21\n92 73\n13 43\n28 78\n33 51\n4 70\n75 45\n37 28\n62 46\n", "6 4\n1 2\n1 3\n4 5\n4 6\n", "6 5\n1 2\n2 3\n3 4\n4 5\n1 5\n", "29 20\n15 9\n21 15\n14 12\n12 16\n3 28\n5 13\n19 1\n19 21\n23 17\n27 9\n26 10\n20 5\n8 16\n11 6\n4 22\n29 22\n29 11\n14 17\n28 6\n1 23\n", "8 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1\n", "2 1\n1 2\n", "77 54\n18 56\n72 2\n6 62\n58 52\n5 70\n24 4\n67 66\n65 47\n43 77\n61 66\n24 51\n70 7\n48 39\n46 11\n77 28\n65 76\n15 6\n22 13\n34 75\n33 42\n59 37\n7 31\n50 23\n28 9\n17 29\n1 14\n11 45\n36 46\n32 39\n59 21\n22 34\n53 21\n29 47\n16 44\n69 4\n62 16\n36 3\n68 75\n51 69\n49 43\n30 55\n40 20\n57 60\n45 3\n38 33\n49 9\n71 19\n73 20\n48 32\n63 67\n8 54\n42 38\n26 12\n5 74\n", "10 7\n8 9\n3 6\n2 4\n4 1\n1 3\n2 7\n7 10\n", "8 8\n1 2\n2 3\n3 4\n1 4\n5 6\n6 7\n7 8\n5 8\n", "50 48\n33 21\n1 46\n43 37\n1 48\n42 32\n31 45\n14 29\n34 28\n38 19\n46 48\n49 31\n8 3\n27 23\n26 37\n15 9\n27 17\n9 35\n18 7\n35 15\n32 4\n23 17\n36 22\n16 33\n39 6\n40 13\n11 6\n21 16\n10 40\n30 36\n20 5\n24 3\n43 26\n22 30\n41 20\n50 38\n25 29\n5 41\n34 44\n12 7\n8 24\n44 28\n25 14\n12 18\n39 11\n42 4\n45 49\n50 19\n13 10\n", "68 50\n10 9\n28 25\n53 46\n38 32\n46 9\n35 13\n65 21\n64 1\n15 52\n43 52\n31 7\n61 67\n41 49\n30 1\n14 4\n17 44\n25 7\n24 31\n57 51\n27 12\n3 37\n17 11\n41 16\n65 23\n10 2\n16 22\n40 36\n15 51\n58 44\n61 2\n50 30\n48 35\n45 32\n56 59\n37 49\n62 55\n62 11\n6 19\n34 33\n53 66\n67 39\n47 21\n56 40\n12 58\n4 23\n26 42\n42 5\n60 8\n5 63\n6 47\n", "6 5\n1 3\n1 2\n2 4\n5 3\n5 4\n", "3 3\n1 2\n1 3\n2 3\n", "10 8\n8 3\n9 7\n6 1\n10 9\n2 6\n2 1\n3 4\n4 8\n", "100 72\n2 88\n55 80\n22 20\n78 52\n66 74\n91 82\n59 77\n97 93\n46 44\n99 35\n73 62\n58 24\n6 16\n47 41\n98 86\n23 19\n39 68\n32 28\n85 29\n37 40\n16 62\n19 61\n84 72\n17 15\n76 96\n37 31\n67 35\n48 15\n80 85\n90 47\n79 36\n39 54\n57 87\n42 60\n34 56\n23 61\n92 2\n88 63\n20 42\n27 81\n65 84\n6 73\n64 100\n76 95\n43 4\n65 86\n21 46\n11 64\n72 98\n63 92\n7 50\n14 22\n89 30\n31 40\n8 57\n90 70\n53 59\n69 24\n96 49\n67 99\n51 70\n18 66\n91 3\n26 38\n13 58\n51 41\n9 11\n5 74\n3 25\n4 32\n28 43\n71 56\n", "35 21\n15 3\n13 5\n2 28\n26 35\n9 10\n22 18\n17 1\n31 32\n35 33\n5 15\n14 24\n29 12\n16 2\n14 10\n7 4\n29 4\n23 27\n30 34\n19 26\n23 11\n25 21\n", "8 5\n1 2\n2 3\n3 4\n4 5\n5 1\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n43 45\n59 38\n26 23\n66 61\n81 30\n65 25\n13 71\n25 8\n56 59\n46 13\n22 30\n87 3\n26 32\n75 44\n48 87\n47 4\n63 21\n36 6\n42 86\n", "70 70\n27 54\n45 23\n67 34\n66 25\n64 38\n30 68\n51 65\n19 4\n15 33\n47 14\n3 9\n42 29\n69 56\n10 50\n34 58\n51 23\n55 14\n18 53\n27 68\n17 6\n48 6\n8 5\n46 37\n37 33\n21 36\n69 24\n16 13\n50 12\n59 31\n63 38\n22 11\n46 28\n67 62\n63 26\n70 31\n7 59\n55 52\n28 43\n18 35\n53 3\n16 60\n43 40\n61 9\n20 44\n47 41\n35 1\n32 4\n13 54\n30 60\n45 19\n39 42\n2 20\n2 26\n52 8\n12 25\n5 41\n21 10\n58 48\n29 11\n7 56\n49 57\n65 32\n15 40\n66 36\n64 44\n22 57\n1 61\n39 49\n24 70\n62 17\n", "100 1\n3 87\n", "5 1\n1 2\n", "9 9\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n7 8\n8 9\n9 7\n", "5 3\n4 2\n3 4\n5 1\n", "10 10\n1 2\n2 3\n3 4\n4 5\n5 1\n6 7\n7 8\n8 9\n9 10\n10 6\n"], "output": ["0", "2", "2", "0", "0", "4", "0", "0", "1", "0", "1", "4", "0", "0", "3", "2", "0", "1", "0", "1", "0", "5", "0", "2", "1", "0", "0", "5", "0", "0", "16", "0", "2", "1", "2", "6", "1", "2", "1", "10", "0", "1", "3", "1", "2"]}, "generated_tests": {"input": ["20 12\n16 20\n8 3\n20 8\n5 10\n17 7\n13 2\n18 9\n17 18\n1 6\n14 4\n11 12\n10 16\n", "49 36\n17 47\n19 27\n41 23\n31 27\n11 29\n34 10\n35 2\n42 24\n19 16\n38 24\n5 9\n26 9\n36 14\n18 47\n28 40\n45 13\n35 22\n2 15\n31 30\n20 48\n39 3\n8 34\n36 7\n25 17\n5 39\n29 1\n32 33\n16 30\n38 49\n25 18\n1 11\n14 44\n12 43\n15 22\n49 21\n8 23\n", "29 20\n15 9\n21 15\n14 12\n12 16\n3 28\n5 13\n19 1\n19 21\n23 17\n27 9\n26 10\n20 5\n8 16\n11 6\n4 22\n29 22\n29 11\n14 17\n2 6\n1 23\n", "10 8\n8 3\n9 5\n6 1\n10 9\n2 6\n2 1\n3 4\n4 8\n", "6 5\n2 1\n3 4\n2 3\n4 1\n5 6\n", "100 10\n88 82\n5 78\n66 31\n65 100\n92 25\n71 84\n47 31\n17 67\n69 68\n59 49\n", "4 3\n3 2\n4 1\n4 3\n", "4 2\n2 4\n1 4\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n43 45\n59 38\n26 23\n66 61\n81 30\n65 40\n13 71\n25 8\n56 59\n46 13\n22 30\n87 3\n26 32\n75 44\n48 87\n47 4\n63 21\n36 6\n42 86\n", "100 10\n88 82\n5 78\n66 31\n65 100\n92 25\n71 84\n47 57\n17 67\n69 68\n59 49\n", "4 3\n3 2\n4 1\n1 3\n", "20 12\n16 20\n8 3\n20 5\n5 10\n17 7\n13 2\n18 9\n17 18\n1 6\n14 4\n11 12\n10 1\n", "19 16\n2 16\n7 10\n17 16\n17 14\n1 5\n19 6\n11 13\n15 19\n7 9\n13 5\n4 6\n1 11\n12 9\n10 12\n2 14\n4 18\n", "28 3\n15 3\n10 19\n9 25\n", "100 10\n88 82\n5 78\n66 31\n65 100\n92 25\n71 62\n81 31\n17 67\n69 68\n59 49\n", "49 36\n17 47\n19 27\n41 23\n31 27\n11 29\n34 10\n35 2\n42 24\n19 16\n38 24\n5 9\n26 14\n36 14\n18 47\n28 40\n45 13\n35 22\n2 15\n31 30\n20 48\n39 3\n8 34\n36 7\n25 17\n5 39\n29 1\n32 33\n16 30\n38 49\n25 18\n1 11\n7 44\n12 43\n15 22\n49 21\n8 23\n", "7 2\n2 4\n3 4\n", "3 1\n1 3\n", "4 3\n1 2\n2 4\n1 3\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n43 45\n59 46\n26 23\n66 61\n81 30\n65 25\n13 71\n25 8\n56 59\n46 13\n22 30\n87 3\n26 32\n75 44\n48 87\n47 4\n63 21\n36 6\n42 86\n", "17 9\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n7 8\n8 9\n9 7\n", "5 3\n1 2\n3 4\n5 1\n", "6 2\n2 4\n3 4\n", "29 20\n15 9\n21 15\n14 12\n12 16\n3 28\n5 13\n19 1\n19 28\n23 17\n27 9\n26 10\n20 5\n8 16\n11 6\n4 22\n29 22\n29 11\n14 17\n2 6\n1 23\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n43 45\n59 38\n26 23\n66 61\n81 30\n65 40\n13 71\n25 8\n56 59\n64 13\n22 30\n87 3\n26 32\n75 44\n48 87\n47 4\n63 21\n36 6\n42 86\n", "19 16\n2 16\n7 10\n17 16\n17 18\n1 5\n19 6\n11 13\n15 19\n7 9\n13 5\n4 6\n1 11\n12 9\n10 12\n2 14\n4 18\n", "28 3\n15 3\n7 19\n9 25\n", "100 10\n88 82\n5 78\n66 31\n65 100\n92 25\n71 62\n49 31\n17 67\n69 68\n59 49\n", "7 2\n2 4\n6 4\n", "10 8\n8 3\n9 5\n6 1\n10 9\n2 6\n2 1\n5 4\n4 8\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n43 45\n59 46\n1 23\n66 61\n81 30\n65 25\n13 71\n25 8\n56 59\n46 13\n22 30\n87 3\n26 32\n75 44\n48 87\n47 4\n63 21\n36 6\n42 86\n", "15 9\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n7 8\n8 9\n9 7\n", "29 20\n15 9\n21 15\n14 12\n12 16\n3 28\n5 13\n19 1\n19 28\n8 17\n27 9\n26 10\n20 5\n8 16\n11 6\n4 22\n29 22\n29 11\n14 17\n2 6\n1 23\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n4 45\n59 38\n26 23\n66 61\n81 30\n65 40\n13 71\n25 8\n56 59\n64 13\n22 30\n87 3\n26 32\n75 44\n48 87\n47 4\n63 21\n36 6\n42 86\n", "100 10\n88 82\n5 78\n66 31\n65 100\n73 25\n71 62\n49 31\n17 67\n69 68\n59 49\n", "7 2\n2 4\n6 2\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n43 45\n59 46\n1 23\n66 61\n81 30\n65 25\n13 71\n25 8\n56 59\n46 13\n22 30\n87 3\n26 32\n75 52\n48 87\n47 4\n63 21\n36 6\n42 86\n", "100 10\n88 82\n5 78\n66 39\n65 100\n73 25\n71 62\n49 31\n17 67\n69 68\n59 49\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 2\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n43 45\n59 46\n1 23\n66 61\n81 30\n65 25\n13 71\n25 8\n56 59\n46 13\n22 30\n87 3\n26 32\n75 52\n48 87\n47 4\n63 21\n36 6\n42 86\n", "100 10\n88 82\n5 78\n66 39\n65 100\n73 25\n71 62\n49 31\n12 67\n69 68\n59 49\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 2\n89 37\n84 65\n6 41\n55 79\n33 56\n60 40\n43 45\n59 46\n1 23\n66 61\n81 30\n65 25\n13 71\n25 8\n56 59\n46 13\n22 30\n87 3\n26 32\n75 52\n48 87\n47 4\n63 21\n36 6\n42 86\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 2\n89 37\n84 65\n6 42\n55 79\n33 56\n60 40\n43 45\n59 46\n1 23\n66 61\n81 30\n65 25\n13 71\n25 8\n56 59\n46 13\n22 30\n87 3\n26 32\n75 52\n48 87\n47 4\n63 21\n36 6\n42 86\n", "20 11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 18\n9 10\n10 11\n11 1\n", "100 50\n82 99\n27 56\n74 38\n16 68\n90 27\n77 4\n7 88\n77 33\n25 85\n18 70\n50 7\n31 5\n21 20\n50 83\n55 5\n46 83\n55 81\n73 6\n76 58\n60 67\n66 99\n71 23\n100 13\n76 8\n52 14\n6 54\n53 54\n88 22\n12 4\n33 60\n43 62\n42 31\n19 67\n98 80\n15 17\n78 79\n62 37\n66 96\n40 44\n37 86\n71 58\n42 92\n8 38\n92 20\n73 70\n46 41\n30 34\n15 65\n97 19\n14 53\n", "28 3\n15 3\n10 19\n17 2\n", "100 10\n88 82\n5 78\n66 42\n65 100\n92 25\n71 62\n47 31\n17 67\n69 68\n59 49\n", "5 2\n4 1\n2 1\n", "7 2\n2 4\n2 4\n", "4 3\n1 2\n3 4\n1 4\n", "29 20\n15 9\n21 15\n14 12\n12 16\n3 28\n5 13\n19 1\n19 21\n23 17\n27 9\n26 10\n20 5\n8 16\n11 6\n4 22\n29 22\n24 11\n14 17\n28 6\n1 23\n", "77 54\n18 56\n72 2\n6 62\n58 52\n5 70\n24 4\n67 66\n65 47\n43 77\n61 66\n24 51\n70 7\n48 39\n46 11\n77 28\n65 76\n15 6\n22 13\n34 75\n33 42\n59 37\n7 31\n50 23\n28 9\n17 29\n1 14\n11 45\n36 46\n32 39\n59 21\n22 34\n53 21\n29 47\n16 44\n69 4\n62 16\n36 3\n68 75\n51 69\n49 43\n30 55\n40 20\n57 60\n56 3\n38 33\n49 9\n71 19\n73 20\n48 32\n63 67\n8 54\n42 38\n26 12\n5 74\n", "10 7\n8 9\n3 6\n2 6\n4 1\n1 3\n2 7\n7 10\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n43 45\n59 38\n26 23\n66 61\n81 30\n65 25\n13 71\n25 8\n56 59\n46 13\n22 30\n87 3\n26 32\n75 44\n48 87\n47 4\n63 21\n36 7\n42 86\n", "5 1\n1 4\n", "5 4\n1 3\n2 4\n5 3\n1 4\n", "49 36\n17 47\n19 27\n41 23\n31 27\n11 29\n34 10\n35 2\n42 24\n19 16\n38 24\n5 9\n26 9\n36 14\n18 47\n28 40\n45 13\n35 22\n2 15\n31 30\n20 48\n39 3\n8 34\n36 12\n25 17\n5 39\n29 1\n32 33\n16 30\n38 49\n25 18\n1 11\n14 44\n12 43\n15 22\n49 21\n8 23\n", "8 2\n2 4\n1 4\n", "29 20\n25 9\n21 15\n14 12\n12 16\n3 28\n5 13\n19 1\n19 21\n23 17\n27 9\n26 10\n20 5\n8 16\n11 6\n4 22\n29 22\n29 11\n14 17\n2 6\n1 23\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n43 45\n59 38\n26 23\n66 61\n81 30\n65 40\n13 71\n25 8\n56 59\n46 12\n22 30\n87 3\n26 32\n75 44\n48 87\n47 4\n63 21\n36 6\n42 86\n", "100 10\n88 82\n5 78\n66 31\n65 100\n92 44\n71 84\n47 57\n17 67\n69 68\n59 49\n", "20 12\n16 20\n8 3\n20 5\n5 10\n17 7\n13 2\n18 9\n17 18\n1 6\n14 4\n16 12\n10 1\n", "100 10\n88 82\n5 78\n66 31\n65 100\n92 21\n71 62\n81 31\n17 67\n69 68\n59 49\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n82 79\n33 56\n60 40\n43 45\n59 46\n26 23\n66 61\n81 30\n65 25\n13 71\n25 8\n56 59\n46 13\n22 30\n87 3\n26 32\n75 44\n48 87\n47 4\n63 21\n36 6\n42 86\n", "6 2\n2 1\n3 4\n", "29 20\n15 9\n21 15\n14 12\n12 16\n2 28\n5 13\n19 1\n19 28\n23 17\n27 9\n26 10\n20 5\n8 16\n11 6\n4 22\n29 22\n29 11\n14 17\n2 6\n1 23\n", "89 30\n86 72\n43 16\n32 80\n17 79\n29 8\n89 37\n84 65\n3 41\n55 79\n33 56\n60 40\n43 45\n59 38\n26 23\n66 61\n81 30\n65 40\n13 71\n25 8\n16 59\n64 13\n22 30\n87 3\n26 32\n75 44\n48 87\n47 4\n63 21\n36 6\n42 86\n", "28 3\n15 3\n3 19\n9 25\n", "100 10\n88 82\n5 26\n66 31\n65 100\n92 25\n71 62\n49 31\n17 67\n69 68\n59 49\n"], "output": ["0\n", "3\n", "1\n", "2\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "3\n", "1\n", "1\n", "0\n", "1\n", "3\n", "1\n", "0\n", "1\n", "1\n", "1\n", "0\n", "0\n", "1\n", "2\n", "1\n", "3\n", "1\n", "1\n", "0\n", "1\n", "1\n", "0\n", "1\n", "0\n", "1\n", "1\n", "0\n", "0\n", "0\n", "0\n", "1\n", "1\n", "0\n", "1\n", "3\n", "0\n", "1\n", "1\n", "1\n", "3\n", "0\n", "1\n", "1\n", "0\n", "0\n", "0\n", "1\n", "0\n", "1\n", "1\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:  \n   The solution builds an undirected graph and uses a depth-first search to detect and count connected components that contain at least one odd-length cycle.\n\n2. Core algorithmic approach:  \n   \u2013 Graph traversal via DFS with parent tracking to detect back-edges (cycle detection in an undirected graph)  \n   \u2013 Component-wise aggregation of cycle parities to count odd cycles per connected component  \n\n3. Reusable components:  \n   \u2013 A generic adjacency-list Graph class supporting edge addition, vertex listing, and edge listing  \n   \u2013 A DFS utility with parent tracking for undirected cycle detection (identifying back-edges)  \n   \u2013 Component-wise state reset and aggregation pattern (resetting visit flags and counters per component)"}
{"name": "690_C1. Brain Network (easy)", "description": "One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect \u2013 it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated \u2013 it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: \n\n  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). \n  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. \n\n\n\nIf both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.\n\nInput\n\nThe first line of the input contains two space-separated integers n and m (1 \u2264 n, m \u2264 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 \u2264 a, b \u2264 n, a \u2260 b).\n\nOutput\n\nThe output consists of one line, containing either yes or no depending on whether the nervous system is valid.\n\nExamples\n\nInput\n\n4 4\n1 2\n2 3\n3 1\n4 1\n\n\nOutput\n\nno\n\n\nInput\n\n6 5\n1 2\n2 3\n3 4\n4 5\n3 6\n\n\nOutput\n\nyes", "solution": "import sys\nsys.setrecursionlimit(1000000)\ndef dfs(v, pr):\n    global used\n    global p\n    global f\n    if not f:\n        return None\n    if used[v]:\n        f = False\n    used[v] = True\n    for i in range(len(p[v])):\n        if p[v][i] != pr:\n            dfs(p[v][i], v)\nn, m = map(int, input().split())\np = []\nfor i in range(n):\n    p.append([])\nfor i in range(m):\n    a, b = map(int, input().split())\n    a -= 1\n    b -= 1\n    p[a].append(b)\n    p[b].append(a)\nused = [False] * n\nf = True\nfor i in range(n):\n    if i != 0 and not used[i]:\n        f = False\n        break\n    if not used[i]:\n        dfs(i, -1)\nif f:\n    print('yes')\nelse:\n    print('no')\n\n        \n", "difficulty": 9, "public_tests": {"input": ["6 5\n1 2\n2 3\n3 4\n4 5\n3 6\n", "4 4\n1 2\n2 3\n3 1\n4 1\n"], "output": ["yes\n", "no\n"]}, "private_tests": {"input": ["10 9\n2 3\n6 8\n10 1\n1 8\n6 7\n8 7\n10 5\n7 10\n2 5\n", "2 1\n1 2\n", "3 2\n1 2\n2 3\n", "10 9\n6 5\n9 2\n4 7\n2 3\n7 3\n3 4\n10 6\n1 2\n5 8\n", "8 7\n6 2\n1 5\n4 8\n4 7\n6 7\n8 3\n8 1\n", "3 3\n2 1\n1 3\n3 2\n", "10 9\n3 2\n4 1\n6 1\n7 1\n9 2\n6 9\n5 2\n7 9\n3 7\n", "200 5\n93 101\n199 164\n14 94\n115 61\n106 156\n", "9 8\n1 2\n2 3\n3 4\n4 1\n5 6\n6 7\n7 8\n8 9\n"], "output": ["no\n", "yes\n", "yes\n", "no\n", "yes\n", "no\n", "no\n", "no\n", "no\n"]}, "generated_tests": {"input": ["10 9\n3 2\n4 1\n6 1\n6 1\n9 2\n6 9\n5 2\n7 9\n3 7\n", "10 9\n6 5\n9 2\n4 7\n2 3\n7 5\n3 4\n10 6\n1 2\n5 8\n", "200 5\n93 111\n199 164\n14 94\n115 61\n106 156\n", "9 8\n1 2\n2 3\n3 4\n4 1\n5 6\n6 7\n7 8\n8 2\n", "200 5\n93 111\n199 164\n14 114\n115 61\n106 156\n", "9 8\n1 2\n2 2\n3 4\n4 1\n5 6\n6 7\n7 8\n8 2\n", "200 5\n93 111\n194 164\n14 114\n115 61\n106 156\n", "9 8\n1 2\n2 2\n3 4\n4 1\n5 6\n4 7\n7 8\n8 2\n", "10 9\n2 3\n6 8\n10 1\n1 8\n6 7\n8 7\n10 5\n7 10\n2 2\n", "10 9\n6 5\n9 2\n4 7\n2 3\n7 3\n3 4\n10 1\n1 2\n5 8\n", "8 7\n6 2\n1 5\n4 8\n4 7\n6 7\n8 1\n8 1\n", "10 9\n3 2\n4 2\n6 1\n7 1\n9 2\n6 9\n5 2\n7 9\n3 7\n", "200 5\n93 101\n199 164\n14 94\n5 61\n106 156\n", "10 9\n3 2\n5 1\n6 1\n6 1\n9 2\n6 9\n5 2\n7 9\n3 7\n", "200 5\n93 111\n199 164\n14 65\n115 61\n106 156\n", "9 8\n1 2\n2 3\n1 4\n4 1\n5 6\n6 7\n7 8\n8 2\n", "200 5\n93 111\n199 6\n14 114\n115 61\n106 156\n", "9 8\n1 2\n2 2\n3 4\n4 1\n5 6\n6 7\n7 6\n8 2\n", "200 5\n93 101\n194 164\n14 114\n115 61\n106 156\n", "9 8\n1 2\n2 2\n3 4\n4 1\n8 6\n4 7\n7 8\n8 2\n", "10 9\n6 5\n9 2\n4 7\n2 3\n7 3\n3 4\n10 1\n1 2\n9 8\n", "8 7\n6 2\n1 5\n1 8\n4 7\n6 7\n8 1\n8 1\n", "10 9\n3 1\n5 1\n6 1\n6 1\n9 2\n6 9\n5 2\n7 9\n3 7\n", "200 5\n93 111\n199 164\n14 65\n115 24\n106 156\n", "200 5\n93 111\n199 6\n14 114\n36 61\n106 156\n", "9 8\n1 2\n2 2\n3 4\n4 1\n8 6\n4 7\n7 8\n9 2\n", "10 9\n6 5\n9 2\n4 7\n2 3\n7 3\n3 4\n10 1\n1 4\n9 8\n", "347 5\n93 111\n199 164\n14 65\n115 24\n106 156\n", "354 5\n93 111\n199 6\n14 114\n36 61\n106 156\n", "9 8\n1 2\n1 2\n3 4\n4 1\n8 6\n4 7\n7 8\n9 2\n", "347 5\n93 111\n31 164\n14 65\n115 24\n106 156\n", "354 5\n93 111\n199 6\n14 114\n36 61\n145 156\n", "347 5\n93 111\n31 134\n14 65\n115 24\n106 156\n", "347 5\n93 111\n31 134\n14 65\n115 27\n106 156\n", "347 5\n93 111\n31 134\n14 65\n115 27\n131 156\n", "347 5\n144 111\n31 134\n14 65\n115 27\n131 156\n", "229 5\n144 111\n31 134\n14 65\n115 27\n131 156\n", "229 5\n144 111\n31 134\n14 65\n115 27\n227 156\n", "200 5\n93 101\n199 164\n14 94\n115 61\n175 156\n", "9 8\n1 2\n2 3\n1 4\n4 1\n5 6\n6 7\n7 8\n8 9\n", "6 5\n1 2\n2 6\n3 4\n4 5\n3 6\n", "7 4\n1 2\n2 3\n3 1\n4 1\n", "200 5\n93 110\n199 164\n14 114\n115 61\n106 156\n", "200 5\n93 111\n194 156\n14 114\n115 61\n106 156\n", "9 8\n1 4\n2 2\n3 4\n4 1\n5 6\n4 7\n7 8\n8 2\n", "10 9\n2 3\n6 8\n10 1\n1 8\n6 7\n8 7\n10 4\n7 10\n2 2\n", "10 9\n3 2\n4 1\n6 1\n7 1\n9 2\n6 9\n5 2\n10 9\n3 7\n", "10 9\n3 2\n5 1\n1 1\n6 1\n9 2\n6 9\n5 2\n7 9\n3 7\n", "200 5\n93 111\n199 164\n14 76\n115 61\n106 156\n", "9 8\n1 2\n2 3\n1 4\n4 2\n5 6\n6 7\n7 8\n8 2\n", "9 8\n1 2\n2 2\n3 4\n4 1\n5 6\n6 7\n7 6\n8 1\n", "9 8\n1 2\n2 2\n3 4\n4 1\n8 6\n4 7\n7 8\n8 4\n", "10 9\n3 1\n5 1\n6 1\n6 1\n9 2\n6 9\n5 2\n2 9\n3 7\n", "332 5\n93 111\n199 164\n14 65\n115 24\n106 156\n", "200 5\n93 111\n199 6\n14 114\n36 61\n193 156\n", "9 8\n1 2\n2 2\n3 4\n4 1\n8 6\n4 7\n3 8\n9 2\n", "10 9\n6 5\n9 2\n4 7\n2 3\n7 3\n3 4\n10 1\n1 4\n9 6\n", "347 5\n93 111\n126 164\n14 65\n115 24\n106 156\n", "354 5\n93 111\n199 6\n14 114\n36 61\n106 251\n", "9 8\n1 2\n2 4\n3 4\n4 1\n8 6\n4 7\n7 8\n9 2\n", "347 5\n93 111\n31 164\n14 98\n115 24\n106 156\n", "347 5\n93 111\n31 187\n14 65\n115 24\n106 156\n", "347 5\n93 111\n31 258\n14 65\n115 27\n131 156\n", "347 5\n144 111\n31 134\n14 65\n115 27\n131 232\n", "229 5\n144 111\n31 134\n14 65\n115 25\n131 156\n", "200 5\n93 101\n199 164\n7 94\n115 61\n175 156\n", "9 8\n1 2\n2 3\n1 4\n4 1\n4 6\n6 7\n7 8\n8 9\n", "200 5\n93 110\n199 42\n14 114\n115 61\n106 156\n"], "output": ["no\n", "yes\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "yes\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n", "no\n"]}, "short_description": "1. One-sentence summary:  \n   The code determines whether a given undirected graph is a single connected acyclic component (i.e., a tree).\n\n2. Core algorithmic approach:  \n   It performs a depth-first search (DFS) to simultaneously check for cycles (by detecting back-edges) and track reachability, and then verifies that all vertices have been visited exactly once.\n\n3. Reusable components:  \n   a) DFS with parent tracking for cycle detection in an undirected graph  \n   b) Adjacency-list construction and maintenance of a visited array  \n   c) Post-DFS connectivity check to ensure only one connected component exists (i.e., all vertices reached)"}
{"name": "1249_B1. Books Exchange (easy version)", "description": "The only difference between easy and hard versions is constraints.\n\nThere are n kids, each of them is reading a unique book. At the end of any day, the i-th kid will give his book to the p_i-th kid (in case of i = p_i the kid will give his book to himself). It is guaranteed that all values of p_i are distinct integers from 1 to n (i.e. p is a permutation). The sequence p doesn't change from day to day, it is fixed.\n\nFor example, if n=6 and p=[4, 6, 1, 3, 5, 2] then at the end of the first day the book of the 1-st kid will belong to the 4-th kid, the 2-nd kid will belong to the 6-th kid and so on. At the end of the second day the book of the 1-st kid will belong to the 3-th kid, the 2-nd kid will belong to the 2-th kid and so on.\n\nYour task is to determine the number of the day the book of the i-th child is returned back to him for the first time for every i from 1 to n.\n\nConsider the following example: p = [5, 1, 2, 4, 3]. The book of the 1-st kid will be passed to the following kids:\n\n  * after the 1-st day it will belong to the 5-th kid, \n  * after the 2-nd day it will belong to the 3-rd kid, \n  * after the 3-rd day it will belong to the 2-nd kid, \n  * after the 4-th day it will belong to the 1-st kid. \n\n\n\nSo after the fourth day, the book of the first kid will return to its owner. The book of the fourth kid will return to him for the first time after exactly one day.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 200) \u2014 the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 \u2264 n \u2264 200) \u2014 the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.\n\nOutput\n\nFor each query, print the answer on it: n integers a_1, a_2, ..., a_n, where a_i is the number of the day the book of the i-th child is returned back to him for the first time in this query.\n\nExample\n\nInput\n\n\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\n\nOutput\n\n\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4 ", "solution": "import sys\nimport math\nimport heapq\nimport bisect\nfrom collections import Counter\nfrom collections import defaultdict\nfrom io import BytesIO, IOBase\nimport string\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        import os\n        self.os = os\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n        self.BUFSIZE = 8192\n\n    def read(self):\n        while True:\n            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, self.BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, self.BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            self.os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\ndef get_int():\n    return int(input())\n\n\ndef get_ints():\n    return list(map(int, input().split(' ')))\n\n\ndef get_int_grid(n):\n    return [get_ints() for _ in range(n)]\n\n\ndef get_str():\n    return input().split(' ')\n\n\ndef yes_no(b):\n    if b:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef binary_search(good, left, right, delta=1, right_true=False):\n    \"\"\"\n    Performs binary search\n    ----------\n    Parameters\n    ----------\n    :param good: Function used to perform the binary search\n    :param left: Starting value of left limit\n    :param right: Starting value of the right limit\n    :param delta: Margin of error, defaults value of 1 for integer binary search\n    :param right_true: Boolean, for whether the right limit is the true invariant\n    :return: Returns the most extremal value interval [left, right] which is good function evaluates to True,\n            alternatively returns False if no such value found\n    \"\"\"\n\n    limits = [left, right]\n    while limits[1] - limits[0] > delta:\n        if delta == 1:\n            mid = sum(limits) // 2\n        else:\n            mid = sum(limits) / 2\n        if good(mid):\n            limits[int(right_true)] = mid\n        else:\n            limits[int(~right_true)] = mid\n    if good(limits[int(right_true)]):\n        return limits[int(right_true)]\n    else:\n        return False\n\n\ndef prefix_sums(a, drop_zero=False):\n    p = [0]\n    for x in a:\n        p.append(p[-1] + x)\n    if drop_zero:\n        return p[1:]\n    else:\n        return p\n\n\ndef prefix_mins(a, drop_zero=False):\n    p = [float('inf')]\n    for x in a:\n        p.append(min(p[-1], x))\n    if drop_zero:\n        return p[1:]\n    else:\n        return p\n\n\nclass DSU:\n\n    # Disjoint Set Union (Union-Find) Data Structure\n    def __init__(self, nodes):\n        # Parents\n        self.p = [i for i in range(nodes)]\n        # Ranks\n        self.r = [0 for i in range(nodes)]\n        # Sizes\n        self.s = [1 for i in range(nodes)]\n\n    def get(self, u):\n        # Recursive Returns the identifier of the set that contains u, includes path compression\n        if u != self.p[u]:\n            self.p[u] = self.get(self.p[u])\n        return self.p[u]\n\n    def union(self, u, v):\n        # Unites the sets with identifiers u and v\n        u = self.get(u)\n        v = self.get(v)\n        if u != v:\n            if self.r[u] > self.r[v]:\n                u, v = v, u\n            self.p[u] = v\n            if self.r[u] == self.r[v]:\n                self.r[v] += 1\n            self.s[v] += self.s[u]\n\n    def get_size(self, u):\n        u = self.get(u)\n        return self.s[u]\n\n\ndef solve_b():\n    n = get_int()\n    p = get_ints()\n    dsu = DSU(n)\n    for i, x in enumerate(p):\n        dsu.union(i, x - 1)\n    return [dsu.get_size(i) for i in range(n)]\n\n\nt = get_int()\nfor _ in range(t):\n    print(*solve_b())\n", "difficulty": 8, "public_tests": {"input": ["6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n"], "output": ["1 1 1 1 1\n3 3 3\n2 3 3 2 1 3\n1\n2 2 2 2\n4 4 4 1 4\n"]}, "private_tests": {"input": ["20\n6\n4 5 6 3 2 1\n7\n1 4 3 6 5 2 7\n10\n4 6 8 2 5 7 3 1 9 10\n6\n4 5 2 3 1 6\n2\n1 2\n7\n4 2 3 7 1 6 5\n10\n3 6 2 8 4 1 7 9 10 5\n3\n1 3 2\n4\n4 3 1 2\n2\n2 1\n1\n1\n1\n1\n5\n1 5 2 3 4\n9\n5 2 8 7 1 6 3 9 4\n6\n2 5 4 6 3 1\n3\n1 2 3\n7\n7 5 2 1 3 4 6\n1\n1\n3\n2 3 1\n7\n3 4 5 2 6 7 1\n", "20\n5\n3 4 5 1 2\n6\n3 6 4 5 1 2\n4\n4 2 1 3\n5\n2 5 4 3 1\n6\n5 3 1 6 2 4\n2\n1 2\n4\n4 2 1 3\n9\n1 8 2 4 6 9 5 3 7\n8\n8 5 6 4 3 1 7 2\n4\n3 1 4 2\n2\n1 2\n4\n1 2 3 4\n2\n2 1\n3\n1 3 2\n8\n5 6 3 8 4 1 7 2\n5\n2 4 1 5 3\n5\n5 2 1 4 3\n7\n6 2 5 1 4 7 3\n7\n2 4 6 5 1 7 3\n7\n3 6 2 4 1 7 5\n", "20\n10\n3 8 1 4 9 6 10 2 7 5\n10\n10 4 8 6 5 3 1 2 9 7\n1\n1\n2\n2 1\n10\n2 5 3 6 9 7 4 10 8 1\n10\n1 7 4 6 9 10 8 2 3 5\n8\n3 8 1 7 6 4 2 5\n8\n7 4 5 2 8 1 6 3\n5\n1 2 4 3 5\n6\n4 2 5 6 3 1\n5\n5 3 2 4 1\n5\n4 3 5 1 2\n7\n6 5 1 7 4 2 3\n6\n6 2 4 1 5 3\n3\n3 1 2\n4\n1 3 4 2\n3\n3 1 2\n6\n4 2 1 5 3 6\n9\n4 5 7 8 1 6 2 3 9\n2\n2 1\n", "1\n3\n1 2 3\n", "20\n6\n3 6 4 2 5 1\n6\n2 4 1 3 5 6\n7\n5 2 1 4 6 7 3\n6\n3 6 4 2 5 1\n9\n5 8 2 6 4 7 9 1 3\n9\n3 2 6 8 5 7 9 1 4\n8\n8 4 6 5 2 1 7 3\n5\n3 1 2 5 4\n10\n2 4 3 5 6 10 7 9 1 8\n2\n2 1\n1\n1\n5\n3 2 5 4 1\n3\n1 3 2\n8\n2 6 5 3 7 1 4 8\n5\n3 5 4 1 2\n4\n1 4 3 2\n5\n5 1 4 3 2\n4\n4 1 3 2\n1\n1\n7\n3 1 5 2 6 7 4\n"], "output": ["4 2 4 4 2 4\n1 3 1 3 1 3 1\n7 7 7 7 1 7 7 7 1 1\n5 5 5 5 5 1\n1 1\n4 1 1 4 4 1 4\n4 4 4 5 5 4 1 5 5 5\n1 2 2\n4 4 4 4\n2 2\n1\n1\n1 4 4 4 4\n2 1 5 5 2 1 5 5 5\n6 6 6 6 6 6\n1 1 1\n4 3 3 4 3 4 4\n1\n3 3 3\n5 2 5 2 5 5 5\n", "5 5 5 5 5\n4 2 4 4 4 2\n3 1 3 3\n3 3 2 2 3\n4 4 4 2 4 2\n1 1\n3 1 3 3\n1 3 3 1 4 4 4 3 4\n6 6 6 1 6 6 1 6\n4 4 4 4\n1 1\n1 1 1 1\n2 2\n1 2 2\n6 6 1 6 6 6 1 6\n5 5 5 5 5\n3 1 3 1 3\n6 1 6 6 6 6 6\n4 4 3 4 4 3 3\n6 6 6 1 6 6 6\n", "2 2 2 1 4 1 4 2 4 4\n3 5 5 5 1 5 3 5 1 3\n1\n2 2\n6 6 1 3 6 3 3 6 6 6\n1 3 6 6 6 6 3 3 6 6\n2 6 2 6 6 6 6 6\n3 2 3 2 3 3 3 3\n1 1 2 2 1\n3 1 2 3 2 3\n2 2 2 1 2\n2 3 3 2 3\n7 7 7 7 7 7 7\n4 1 4 4 1 4\n3 3 3\n1 3 3 3\n3 3 3\n4 1 4 4 4 1\n7 7 7 7 7 1 7 7 1\n2 2\n", "1 1 1\n", "5 5 5 5 1 5\n4 4 4 4 1 1\n5 1 5 1 5 5 5\n5 5 5 5 1 5\n9 9 9 9 9 9 9 9 9\n7 1 7 7 1 7 7 7 7\n4 3 4 3 3 4 1 4\n3 3 3 2 2\n8 8 1 8 8 8 1 8 8 8\n2 2\n1\n3 1 3 1 3\n1 2 2\n3 3 4 4 4 3 4 1\n3 2 3 3 2\n1 2 1 2\n3 3 2 2 3\n3 3 1 3\n1\n7 7 7 7 7 7 7\n"]}, "generated_tests": {"input": ["1\n3\n2 1 3\n", "1\n3\n3 1 2\n", "1\n3\n1 3 2\n", "1\n3\n3 2 1\n"], "output": ["2 2 1\n", "3 3 3\n", "1 2 2\n", "2 1 2\n"]}, "short_description": "1. One-sentence summary:  \nGiven a directed graph where each node has exactly one outgoing edge, compute for every node the size of the connected component (cycle or tree\u2010into\u2010cycle) it belongs to.\n\n2. Core algorithmic approach:  \nDisjoint Set Union (Union-Find) to merge nodes connected by edges and to track component sizes with path compression and union by rank.\n\n3. Reusable components:  \n- DSU class (union, find/get with path compression, size tracking) for quickly merging nodes and querying component sizes.  \n- Fast I/O wrapper (FastIO and IOWrapper) to accelerate reading and writing large inputs.  \n- Utility functions like `binary_search` or `prefix_sums` that can be lifted wholesale into other problems requiring binary searches over predicates or quick prefix computations."}
{"name": "1217_D. Coloring Edges", "description": "You are given a directed graph with n vertices and m directed edges without self-loops or multiple edges.\n\nLet's denote the k-coloring of a digraph as following: you color each edge in one of k colors. The k-coloring is good if and only if there no cycle formed by edges of same color.\n\nFind a good k-coloring of given digraph with minimum possible k.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 5000, 1 \u2264 m \u2264 5000) \u2014 the number of vertices and edges in the digraph, respectively.\n\nNext m lines contain description of edges \u2014 one per line. Each edge is a pair of integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v) \u2014 there is directed edge from u to v in the graph.\n\nIt is guaranteed that each ordered pair (u, v) appears in the list of edges at most once.\n\nOutput\n\nIn the first line print single integer k \u2014 the number of used colors in a good k-coloring of given graph.\n\nIn the second line print m integers c_1, c_2, ..., c_m (1 \u2264 c_i \u2264 k), where c_i is a color of the i-th edge (in order as they are given in the input).\n\nIf there are multiple answers print any of them (you still have to minimize k).\n\nExamples\n\nInput\n\n\n4 5\n1 2\n1 3\n3 4\n2 4\n1 4\n\n\nOutput\n\n\n1\n1 1 1 1 1 \n\n\nInput\n\n\n3 3\n1 2\n2 3\n3 1\n\n\nOutput\n\n\n2\n1 1 2 ", "solution": "import sys\ninput = sys.stdin.readline\ndef dfs(cur_node, childs, vis, cur_dfs):\n    if cur_node in cur_dfs:\n        return True\n\n    if vis[cur_node]:\n        return False\n\n    vis[cur_node] = True\n    cur_dfs.add(cur_node)\n    for ele in childs[cur_node]:\n        if dfs(ele, childs, vis, cur_dfs):\n            return True\n\n    cur_dfs.remove(cur_node)\n    return False\n\nn, m = map(int, input().split())\nchilds = [[] for i in range(n+1)]\nhas_dad = [False] * (n+1)\nvis = [False] * (n+1)\nans2 = []\nfor i in range(m):\n    x1, x2 = map(int, input().split())\n    ans2.append(str((x1 < x2) + 1))\n    childs[x1].append(x2)\n    has_dad[x2] = True\n\nhas_cycle = False\nfor i in range(1, n+1):\n    if not has_dad[i] and dfs(i, childs, vis, set()):\n        has_cycle = True\n        break\n\nfor i in range(1, n+1):\n    if has_dad[i] and not vis[i]:\n        has_cycle = True\n        break\n\nif has_cycle:\n    print(2)\n    print(' '.join(ans2))\nelse:\n    print(1)\n    print(' '.join(['1']*m))\n", "difficulty": 10, "public_tests": {"input": ["3 3\n1 2\n2 3\n3 1\n", "4 5\n1 2\n1 3\n3 4\n2 4\n1 4\n"], "output": ["2\n1 1 2\n", "1\n1 1 1 1 1\n"]}, "private_tests": {"input": ["3 5\n1 3\n1 2\n3 2\n3 1\n2 3\n", "3 4\n3 1\n1 3\n2 3\n3 2\n", "3 6\n1 2\n2 3\n3 1\n2 1\n3 2\n1 3\n", "10 2\n8 7\n10 5\n", "3 6\n1 2\n2 3\n3 1\n2 1\n1 3\n3 2\n", "8 6\n3 5\n8 3\n3 6\n8 5\n4 6\n2 5\n", "12 7\n11 8\n4 2\n7 5\n2 9\n7 2\n5 4\n10 8\n", "5 12\n4 1\n4 5\n5 3\n5 4\n2 4\n5 1\n1 5\n1 4\n3 4\n3 5\n2 1\n4 2\n", "14 23\n8 5\n6 3\n5 9\n3 1\n6 1\n13 11\n11 2\n14 4\n14 5\n4 2\n10 3\n14 6\n4 1\n8 2\n11 1\n14 1\n5 13\n1 4\n9 5\n8 13\n1 2\n4 8\n2 6\n", "10 44\n9 2\n3 9\n3 10\n6 8\n10 9\n2 1\n5 9\n10 1\n4 2\n3 1\n3 6\n3 7\n1 9\n1 4\n1 8\n9 7\n7 3\n1 6\n4 9\n7 5\n1 2\n4 3\n10 7\n8 1\n8 10\n9 8\n6 10\n6 5\n2 9\n9 1\n3 4\n5 7\n6 3\n2 8\n7 6\n4 5\n8 6\n2 10\n10 2\n5 8\n2 7\n8 7\n3 5\n9 6\n", "3 4\n1 2\n2 3\n3 2\n3 1\n", "18 74\n12 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n8 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "7 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n1 3\n3 5\n5 7\n", "19 27\n6 13\n15 5\n12 15\n16 18\n9 18\n9 17\n1 16\n3 14\n8 7\n19 7\n14 6\n16 13\n15 12\n14 12\n13 5\n2 3\n13 11\n6 8\n7 14\n3 17\n8 2\n9 12\n18 14\n11 16\n17 3\n13 18\n1 3\n", "2 1\n2 1\n", "16 21\n7 9\n5 1\n3 9\n4 7\n15 5\n12 13\n12 7\n7 5\n1 4\n9 3\n13 16\n13 15\n9 15\n7 15\n16 3\n13 5\n3 7\n1 7\n5 13\n1 2\n2 9\n", "2 2\n2 1\n1 2\n", "14 50\n8 10\n5 11\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 1\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n6 2\n7 1\n14 11\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "6 8\n1 2\n2 3\n3 1\n4 3\n5 4\n6 5\n1 6\n6 2\n", "4 4\n4 2\n3 1\n2 3\n4 1\n"], "output": ["2\n1 1 1 2 2\n", "2\n2 1 2 1\n", "2\n1 1 2 2 2 1\n", "1\n1 1\n", "2\n1 1 2 2 1 2\n", "1\n1 1 1 1 1 1\n", "1\n1 1 1 1 1 1 1\n", "2\n2 2 1 1 2 2 1 1 1 2 2 1\n", "2\n1 1 1 2 2 1 1 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1\n", "2\n1 2 2 2 2 2 2 2 2 2 1 2 1 1 1 1 1 1 2 1 1 2 1 2 1 1 2 1 2 2 1 2 2 1 1 1 1 1 2 2 1 1 1 1\n", "2\n1 1 2 2\n", "2\n1 1 1 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 2 2 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 2 1 1 1\n", "2\n1 1 1 1 1 1 2 1 1 1\n", "2\n1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 2 2 1\n", "1\n1\n", "2\n1 2 2 1 1 1 1 1 1 1 1 2 1 1 1 2 2 1 1 1 1\n", "2\n2 1\n", "2\n2 1 1 1 2 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 2 1 1 1 1 1 2 1 1 2 2 2 1 1 1 1 2 2 1 2 2 1 1 2 2 1 2 1 2 1\n", "2\n1 1 2 1 1 1 1 1\n", "1\n1 1 1 1\n"]}, "generated_tests": {"input": ["10 2\n4 7\n10 5\n", "14 23\n8 5\n6 3\n5 9\n3 1\n6 1\n13 11\n11 2\n14 4\n14 5\n4 2\n10 3\n14 6\n4 1\n8 2\n11 1\n14 1\n5 13\n1 4\n9 5\n8 13\n1 2\n5 8\n2 6\n", "18 74\n12 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "19 27\n6 13\n15 5\n12 15\n16 18\n9 18\n9 17\n1 16\n3 14\n8 7\n19 7\n14 6\n16 13\n15 12\n14 12\n13 5\n2 3\n13 11\n6 8\n7 14\n3 17\n8 2\n9 12\n18 6\n11 16\n17 3\n13 18\n1 3\n", "16 21\n7 9\n5 1\n3 9\n4 7\n15 5\n12 13\n12 7\n7 5\n1 4\n9 3\n13 16\n13 15\n9 15\n7 15\n16 3\n13 5\n3 7\n1 12\n5 13\n1 2\n2 9\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 1\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n6 2\n7 1\n14 11\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "4 4\n4 2\n3 1\n2 1\n4 1\n", "18 74\n3 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "19 27\n6 13\n15 5\n12 15\n16 18\n9 18\n9 17\n1 16\n3 14\n8 7\n19 7\n14 6\n16 13\n15 12\n14 12\n13 5\n2 3\n13 11\n6 8\n7 14\n3 17\n8 2\n9 12\n9 6\n11 16\n17 3\n13 18\n1 3\n", "16 21\n7 9\n5 1\n3 9\n4 7\n15 5\n12 13\n12 7\n7 5\n1 4\n9 3\n13 16\n11 15\n9 15\n7 15\n16 3\n13 5\n3 7\n1 12\n5 13\n1 2\n2 9\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 1\n11 2\n10 3\n7 11\n7 3\n13 14\n8 2\n14 1\n14 8\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 1\n11 2\n10 3\n7 11\n7 3\n13 14\n8 2\n14 1\n14 8\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n14 11\n2 10\n", "3 4\n2 1\n1 3\n2 3\n3 2\n", "8 6\n3 2\n8 3\n3 6\n8 5\n4 6\n2 5\n", "14 23\n8 5\n6 3\n5 9\n3 1\n6 1\n13 11\n11 2\n14 4\n14 5\n4 2\n10 3\n14 6\n4 1\n8 2\n11 1\n14 1\n5 13\n1 4\n9 5\n8 13\n1 2\n4 8\n2 12\n", "3 4\n1 3\n2 3\n3 2\n3 1\n", "14 23\n7 5\n6 3\n5 9\n3 1\n6 1\n13 11\n11 2\n14 4\n14 5\n4 2\n10 3\n14 6\n4 1\n8 2\n11 1\n14 1\n5 13\n1 4\n9 5\n8 13\n1 2\n5 8\n2 6\n", "19 27\n6 13\n15 5\n12 2\n16 18\n9 18\n9 17\n1 16\n3 14\n8 7\n19 7\n14 6\n16 13\n15 12\n14 12\n13 5\n2 3\n13 11\n6 8\n7 14\n3 17\n8 2\n9 12\n18 6\n11 16\n17 3\n13 18\n1 3\n", "14 50\n1 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 1\n11 2\n10 3\n7 11\n7 3\n13 14\n8 2\n14 1\n14 8\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 12\n9 1\n5 12\n9 7\n7 10\n4 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n6 2\n7 1\n14 11\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "14 50\n1 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n1 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 1\n11 2\n10 3\n7 11\n7 3\n13 14\n8 2\n14 1\n14 8\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "19 27\n6 13\n15 5\n12 2\n16 18\n9 18\n9 17\n1 16\n3 14\n8 7\n19 7\n14 6\n16 11\n15 12\n14 12\n13 5\n2 3\n13 17\n6 8\n7 14\n3 17\n8 2\n9 12\n18 6\n11 16\n17 3\n13 18\n1 3\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 12\n9 1\n5 12\n9 7\n7 10\n4 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n6 2\n7 1\n14 11\n10 9\n4 3\n11 5\n12 4\n8 12\n13 10\n12 11\n2 10\n", "14 50\n1 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n6 3\n13 12\n5 8\n1 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 1\n11 2\n10 3\n7 11\n7 3\n13 14\n8 2\n14 1\n14 8\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "18 74\n12 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n4 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n16 1\n7 13\n11 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "19 27\n6 13\n15 5\n12 2\n16 18\n9 18\n9 17\n1 16\n3 14\n8 7\n19 7\n14 6\n16 11\n15 12\n14 12\n13 5\n2 3\n13 17\n6 8\n7 14\n3 17\n8 2\n9 12\n18 6\n11 16\n11 3\n13 18\n1 3\n", "19 27\n6 13\n15 5\n17 2\n16 18\n9 18\n9 17\n1 16\n3 14\n8 7\n19 7\n14 6\n16 11\n15 12\n14 12\n13 5\n2 3\n13 17\n6 8\n7 14\n3 17\n8 2\n9 12\n18 6\n11 16\n11 3\n13 18\n1 3\n", "5 12\n4 1\n4 5\n5 3\n5 4\n2 4\n5 2\n1 5\n1 4\n3 4\n3 5\n2 1\n4 2\n", "14 23\n8 5\n6 3\n5 9\n3 1\n6 1\n13 11\n11 2\n14 4\n14 5\n4 2\n10 3\n14 6\n4 1\n8 4\n11 1\n14 1\n5 13\n1 4\n9 5\n8 13\n1 2\n4 8\n2 6\n", "7 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n1 3\n1 5\n5 7\n", "14 50\n8 10\n5 11\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 1\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 3\n11 2\n10 4\n7 11\n7 3\n13 14\n6 2\n7 1\n14 11\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "19 27\n6 13\n15 5\n12 15\n11 18\n9 18\n9 17\n1 16\n3 14\n8 7\n19 7\n14 6\n16 13\n15 12\n14 12\n13 5\n2 3\n13 11\n6 8\n7 14\n3 17\n8 2\n9 12\n18 6\n11 16\n17 3\n13 18\n1 3\n", "16 21\n7 6\n5 1\n3 9\n4 7\n15 5\n12 13\n12 7\n7 5\n1 4\n9 3\n13 16\n13 15\n9 15\n7 15\n16 3\n13 5\n3 7\n1 12\n5 13\n1 2\n2 9\n", "18 74\n3 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 4\n4 8\n14 1\n7 3\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 10\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 1\n11 2\n10 1\n7 11\n7 3\n13 14\n8 2\n14 1\n14 8\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "8 6\n5 2\n8 3\n3 6\n8 5\n4 6\n2 5\n", "14 23\n8 5\n6 3\n5 9\n3 1\n5 1\n13 11\n11 2\n14 4\n14 5\n4 2\n10 3\n14 6\n4 1\n8 2\n11 1\n14 1\n5 13\n1 4\n9 5\n8 13\n1 2\n4 8\n2 12\n", "15 2\n8 7\n10 5\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n6 2\n7 1\n14 11\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "15 2\n8 7\n10 6\n", "18 74\n3 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 10\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n6 2\n7 1\n14 8\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "18 74\n3 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 3\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 10\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n8 2\n7 1\n14 8\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n8 2\n14 1\n14 8\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "10 2\n8 7\n4 5\n", "18 74\n3 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n8 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "18 74\n12 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n16 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 1\n5 12\n9 7\n7 10\n4 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n6 2\n7 1\n14 11\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n2 10\n", "15 2\n8 1\n10 5\n", "21 2\n8 7\n10 6\n", "18 74\n3 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 10\n7 11\n9 5\n4 17\n18 15\n12 4\n8 5\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "18 74\n3 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n14 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 3\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 10\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "14 23\n8 5\n6 3\n5 9\n3 1\n6 1\n13 11\n11 2\n14 4\n14 5\n4 2\n10 6\n14 6\n4 1\n8 2\n11 1\n14 1\n5 13\n1 4\n9 5\n8 13\n1 2\n4 8\n2 12\n", "19 23\n7 5\n6 3\n5 9\n3 1\n6 1\n13 11\n11 2\n14 4\n14 5\n4 2\n10 3\n14 6\n4 1\n8 2\n11 1\n14 1\n5 13\n1 4\n9 5\n8 13\n1 2\n5 8\n2 6\n", "18 74\n12 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n16 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n14 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "19 27\n6 13\n15 5\n12 2\n16 18\n9 18\n9 17\n1 16\n3 14\n8 7\n19 7\n14 6\n16 11\n15 12\n14 12\n13 5\n2 3\n13 11\n6 8\n7 14\n3 17\n8 2\n9 12\n18 6\n11 16\n17 3\n13 18\n1 3\n", "14 23\n8 5\n6 3\n5 9\n3 1\n6 1\n13 11\n11 2\n14 4\n14 5\n4 2\n10 6\n14 6\n4 1\n13 2\n11 1\n14 1\n5 13\n1 4\n9 5\n8 13\n1 2\n4 8\n2 12\n", "18 74\n12 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n16 1\n7 13\n11 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "14 23\n8 5\n6 3\n5 9\n3 1\n6 1\n13 11\n11 2\n14 8\n14 5\n4 2\n10 6\n14 6\n4 1\n13 2\n11 1\n14 1\n5 13\n1 4\n9 5\n8 13\n1 2\n4 8\n2 12\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 3\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 12\n9 1\n5 12\n9 7\n7 10\n4 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n6 1\n7 1\n14 11\n10 9\n4 3\n11 5\n12 4\n8 12\n13 10\n12 11\n2 10\n", "14 50\n1 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n6 3\n13 12\n5 8\n1 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 13\n9 2\n5 12\n9 7\n7 10\n3 13\n3 10\n5 4\n13 1\n11 2\n10 3\n7 11\n7 3\n13 14\n8 2\n14 1\n14 8\n10 9\n4 3\n11 5\n12 2\n8 12\n13 10\n12 11\n4 10\n", "14 50\n8 10\n5 2\n3 6\n14 6\n4 11\n6 8\n9 8\n3 7\n4 9\n4 8\n5 10\n13 5\n8 6\n13 12\n5 8\n4 5\n12 1\n14 10\n10 13\n6 13\n2 5\n6 4\n14 4\n11 12\n5 7\n1 12\n9 1\n5 12\n9 7\n7 10\n4 13\n3 10\n5 4\n13 3\n11 2\n10 3\n7 11\n7 3\n13 14\n6 1\n7 1\n14 11\n10 9\n4 3\n11 5\n12 4\n8 12\n13 10\n12 11\n2 10\n", "19 27\n6 13\n15 5\n17 2\n16 18\n9 18\n9 17\n1 16\n3 14\n8 7\n19 7\n14 6\n16 11\n15 12\n14 12\n13 5\n2 3\n13 17\n6 8\n7 14\n3 17\n8 2\n9 12\n18 6\n11 16\n19 3\n13 18\n1 3\n", "3 2\n1 3\n1 2\n3 2\n3 1\n2 3\n", "18 74\n12 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 14\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n8 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "10 2\n3 7\n10 5\n", "18 74\n12 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 16\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "22 2\n8 7\n10 5\n", "16 21\n7 9\n5 1\n3 9\n4 7\n15 5\n12 13\n12 7\n7 5\n1 4\n9 3\n13 16\n11 15\n9 15\n7 15\n16 3\n13 4\n3 7\n1 12\n5 13\n1 2\n2 9\n", "18 74\n3 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n14 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n4 17\n18 15\n12 4\n8 3\n10 2\n7 2\n8 4\n8 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n", "14 23\n7 5\n6 3\n5 9\n3 1\n6 1\n13 11\n11 2\n14 4\n14 5\n4 2\n10 3\n14 6\n4 1\n8 2\n11 1\n14 1\n5 13\n1 4\n9 5\n8 11\n1 2\n5 8\n2 6\n", "18 74\n12 17\n6 3\n7 5\n11 13\n13 12\n16 2\n15 3\n10 6\n18 1\n6 1\n10 18\n3 16\n16 5\n14 12\n12 1\n9 6\n13 11\n11 17\n13 1\n1 7\n18 12\n6 8\n11 15\n2 9\n9 12\n7 4\n8 15\n6 9\n11 9\n11 18\n3 6\n5 7\n1 16\n2 6\n17 11\n4 8\n16 1\n7 13\n18 14\n7 16\n15 5\n11 2\n18 17\n9 16\n4 13\n17 5\n8 6\n18 6\n6 4\n17 10\n10 7\n5 9\n7 6\n17 1\n9 13\n7 11\n9 5\n6 17\n18 15\n12 4\n8 3\n9 2\n7 2\n8 4\n4 11\n16 10\n13 18\n16 12\n3 10\n18 10\n12 3\n12 14\n9 14\n3 11\n"], "output": ["1\n1 1\n", "2\n2 1 1 2 2 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1\n", "2\n1 1 1 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 2 2 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 2 1 1 1\n", "2\n1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 2 2 2 1\n", "2\n1 2 2 1 1 1 1 1 1 1 1 2 1 1 1 2 2 1 1 1 1\n", "2\n2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 2 1 1 2 1 1 2 1 1 2 2 2 1 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 1 1\n", "1\n1 1 1 1\n", "2\n1 1 1 1 1 1 2 2 2 2 2 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 2 2 1 2 1 1 2 1 1 1 2 1 2 1 2 2 2 2 1 1 2 1 1 2 1 1 2 2 1 1 2 1 1 2 2 1 1 1 1 1 2 1 1 1\n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 2 1 1 1 1 2 2 1 1\n", "2\n1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1\n", "2\n2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 2 1 1 2 1 1 2 1 1 2 2 2 1 2 2 1 1 2 1 2 2 1 1 2 2 2 1 1 1 1\n", "2\n2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 2 1 1 1 1 1 2 1 1 2 2 2 1 2 2 1 1 2 1 2 2 1 1 2 2 2 1 1 1 1\n", "2\n2 1 2 1\n", "1\n1 1 1 1 1 1\n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1\n", "2\n1 2 1 2\n", "2\n1 1 1 2 2 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1\n", "2\n1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 1\n", "2\n1 1 1 1 1 2 2 1 1 2 2 1 1 1 1 2 2 2 1 2 2 1 1 1 1 1 1 1 1 2 2 2 1 2 1 1 1 2 1 1 2 1 1 2 2 1 1 2 2 2\n", "2\n2 2 1 1 1 1 1 1 1 1 1 2 2 2 1 2 2 2 1 2 1 1 1 2 1 1 2 2 1 2 2 2 1 1 2 1 1 2 1 2 2 1 1 2 2 1 2 2 1 1\n", "2\n1 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1 2 2 1 2 2 1 1 1 1 1 1 1 1 2 2 2 1 2 1 1 1 2 1 1 2 1 1 2 2 1 1 2 2 2\n", "2\n1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 2 1\n", "2\n2 2 1 1 1 1 1 1 1 1 1 2 2 2 1 1 2 2 1 2 1 2 2 2 1 1 2 2 1 2 1 2 2 1 1 1 2 2 1 2 2 2 1 1 1 1 2 2 1 1\n", "2\n1 1 1 1 1 1 1 2 1 1 2 1 2 1 1 1 2 2 1 2 2 1 1 2 1 1 1 1 2 2 2 2 1 2 1 1 1 1 1 1 2 1 1 2 2 1 1 2 1 2\n", "2\n1 1 1 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 2 1 1 2 2 2 2 2 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 2 1 1 1\n", "2\n1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1\n", "2\n1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 2 1 2 1\n", "2\n2 2 1 1 2 1 1 1 1 2 2 1\n", "2\n1 1 1 2 2 1 1 1 1 1 1 1 2 2 2 1 1 1 2 1 1 1 1\n", "2\n1 1 1 1 1 1 2 1 1 1\n", "2\n2 1 1 1 2 2 1 1 1 1 1 1 1 1 1 2 2 1 2 2 2 2 1 1 1 1 2 1 1 2 2 2 1 1 1 1 2 2 1 2 2 1 1 1 2 1 2 1 2 1\n", "2\n2 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 2 2 1 1\n", "2\n1 2 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2 1 1 1 1\n", "2\n1 1 1 2 1 1 2 2 2 2 2 1 2 2 2 1 1 2 2 1 1 1 1 2 1 1 1 2 2 1 2 2 1 2 1 1 2 1 1 1 2 1 2 1 1 2 2 2 1 1 2 1 1 2 1 1 2 2 1 2 2 1 1 2 1 1 1 1 1 1 2 1 1 1\n", "2\n2 1 1 1 1 2 1 1 2 2 1 1 1 1 1 2 2 1 2 2 2 1 1 1 1 1 2 1 1 2 2 2 1 2 2 2 1 2 1 2 2 1 1 2 2 2 1 1 2 1\n", "2\n2 1 1 1 1 1\n", "2\n1 1 1 1 2 1 1 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1\n", "1\n1 1\n", "2\n2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 2 1 1 2 1 1 2 1 1 2 2 2 1 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 1 1\n", "1\n1 1\n", "2\n1 1 1 1 1 1 2 2 2 2 2 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 2 2 1 2 1 1 2 1 1 1 2 1 2 1 2 2 2 2 1 1 2 1 1 2 1 1 2 2 1 1 2 1 1 2 2 1 1 1 1 1 2 1 1 1\n", "2\n2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 2 1 1 2 1 1 2 1 1 2 2 2 1 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 1 1\n", "2\n1 1 1 1 1 1 2 2 2 2 2 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 2 2 1 2 1 1 2 1 1 1 2 1 2 1 2 2 2 2 1 1 2 1 1 2 1 1 2 2 1 1 2 1 1 2 2 1 1 1 1 1 2 1 1 1\n", "2\n2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 2 1 1 2 1 1 2 1 1 2 2 2 1 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 1 1\n", "2\n2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 2 1 1 2 1 1 2 1 1 2 2 2 1 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 1 1\n", "1\n1 1\n", "2\n1 1 1 1 1 1 2 2 2 2 2 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 2 2 1 2 1 1 2 1 1 1 2 1 2 1 2 2 2 2 1 1 2 1 1 2 1 1 2 2 1 1 2 1 1 2 2 1 1 1 1 1 2 1 1 1\n", "2\n1 1 1 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 2 2 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 2 1 1 1\n", "2\n2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 2 1 1 2 1 1 2 1 1 2 2 2 1 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 1 1\n", "1\n1 1\n", "1\n1 1\n", "2\n1 1 1 1 1 1 2 2 2 2 2 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 2 2 1 2 1 1 2 1 1 1 2 1 2 1 2 2 2 2 1 1 2 1 1 2 1 1 2 2 1 1 2 1 1 2 2 1 1 1 1 1 2 1 1 1\n", "2\n1 1 1 1 1 1 2 2 2 2 2 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 2 2 1 2 1 1 2 1 1 1 2 1 2 1 2 2 2 2 1 1 2 1 1 2 1 1 2 2 1 1 2 1 1 2 2 1 1 1 1 1 2 1 1 1\n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1\n", "2\n1 1 1 2 2 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1\n", "2\n1 1 1 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 2 2 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 2 1 1 1\n", "2\n1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 1\n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1\n", "2\n1 1 1 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 2 2 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 2 1 1 1\n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1\n", "2\n2 2 1 1 1 1 1 1 1 1 1 2 2 2 1 1 2 2 1 2 1 2 2 2 1 1 2 2 1 2 1 2 2 1 1 1 2 2 1 2 2 2 1 1 1 1 2 2 1 1\n", "2\n1 1 1 1 1 1 1 2 1 1 2 1 2 1 1 1 2 2 1 2 2 1 1 2 1 1 1 1 2 2 2 2 1 2 1 1 1 1 1 1 2 1 1 2 2 1 1 2 1 2\n", "2\n2 2 1 1 1 1 1 1 1 1 1 2 2 2 1 1 2 2 1 2 1 2 2 2 1 1 2 2 1 2 1 2 2 1 1 1 2 2 1 2 2 2 1 1 1 1 2 2 1 1\n", "2\n1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 2 1 2 1\n", "1\n1 1\n", "2\n1 1 1 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 2 2 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 2 1 1 1\n", "1\n1 1\n", "2\n1 1 1 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 2 2 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 2 1 1 1\n", "1\n1 1\n", "2\n1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1\n", "2\n1 1 1 1 1 1 2 2 2 2 2 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 2 2 1 2 1 1 2 1 1 1 2 1 2 1 2 2 2 2 1 1 2 1 1 2 1 1 2 2 1 1 2 1 1 2 2 1 1 1 1 1 2 1 1 1\n", "2\n1 1 1 2 2 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1\n", "2\n1 1 1 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 2 2 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 2 1 1 1\n"]}, "short_description": "1. One-sentence summary  \nDetects whether a directed graph (given as an edge list) contains a cycle and produces one of two edge\u2010labelings accordingly.\n\n2. Core algorithmic approach  \nDepth\u2010first search with a recursion\u2010stack check (DFS cycle detection in a directed graph).\n\n3. Reusable components  \n- A DFS routine that carries both a global visited array and a \u201ccurrent path\u201d set (recursion stack) to detect back edges \u21d2 cycle detection in directed graphs.  \n- Building and using an adjacency-list (`childs`) for efficient traversal of sparse graphs.  \n- A simple \u201chas_parent\u201d or \u201cin-degree > 0\u201d marker array to identify root nodes (nodes with zero in-degree) and ensure full coverage of all components."}
{"name": "745_C. Hongcow Builds A Nation", "description": "Hongcow is ruler of the world. As ruler of the world, he wants to make it easier for people to travel by road within their own countries.\n\nThe world can be modeled as an undirected graph with n nodes and m edges. k of the nodes are home to the governments of the k countries that make up the world.\n\nThere is at most one edge connecting any two nodes and no edge connects a node to itself. Furthermore, for any two nodes corresponding to governments, there is no path between those two nodes. Any graph that satisfies all of these conditions is stable.\n\nHongcow wants to add as many edges as possible to the graph while keeping it stable. Determine the maximum number of edges Hongcow can add.\n\nInput\n\nThe first line of input will contain three integers n, m and k (1 \u2264 n \u2264 1 000, 0 \u2264 m \u2264 100 000, 1 \u2264 k \u2264 n) \u2014 the number of vertices and edges in the graph, and the number of vertices that are homes of the government. \n\nThe next line of input will contain k integers c1, c2, ..., ck (1 \u2264 ci \u2264 n). These integers will be pairwise distinct and denote the nodes that are home to the governments in this world.\n\nThe following m lines of input will contain two integers ui and vi (1 \u2264 ui, vi \u2264 n). This denotes an undirected edge between nodes ui and vi.\n\nIt is guaranteed that the graph described by the input is stable.\n\nOutput\n\nOutput a single integer, the maximum number of edges Hongcow can add to the graph while keeping it stable.\n\nExamples\n\nInput\n\n4 1 2\n1 3\n1 2\n\n\nOutput\n\n2\n\n\nInput\n\n3 3 1\n2\n1 2\n1 3\n2 3\n\n\nOutput\n\n0\n\nNote\n\nFor the first sample test, the graph looks like this: \n\n<image> Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\n\nFor the second sample test, the graph looks like this: \n\n<image> We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.", "solution": "from collections import deque\nn,m,k = map(int,input().split())\nline = input().split()\ngov = []\nfor i in range(k):\n    gov.append(int(line[i])-1)\ngraph = {}\nfor i in range(m):\n    u,v = map(int,input().split())\n    u -= 1\n    v -= 1\n    if u not in graph:\n        graph[u] = set()\n    if v not in graph:\n        graph[v] = set()\n    graph[u].add(v)\n    graph[v].add(u)\ngovgraph = {}\nnottaken = set()\nfor i in range(n):\n    nottaken.add(i)\nfor x in gov:\n    nottaken.remove(x)\n    if x in graph:\n        d = deque()\n        reach = set([x])\n        d.append(x)\n        while len(d) > 0:\n            c = d.popleft()\n            for i in graph[c]:\n                if i not in reach:\n                    reach.add(i)\n                    nottaken.remove(i)\n                    d.append(i)\n        govgraph[x] = reach\n    else:\n        govgraph[x] = set([x])\nar = []\nfor c in govgraph:\n    ar.append(govgraph[c])\nar.sort(key = lambda x: len(x), reverse=True)\nmeh = len(ar[0]) + len(nottaken)\nans = int((meh*(meh-1))/2)\nfor i in range(1,len(ar)):\n    ans += int((len(ar[i])*(len(ar[i])-1))/2)\nprint(ans - m)\n", "difficulty": 9, "public_tests": {"input": ["4 1 2\n1 3\n1 2\n", "3 3 1\n2\n1 2\n1 3\n2 3\n"], "output": ["2", "0"]}, "private_tests": {"input": ["6 4 2\n1 4\n1 2\n2 3\n4 5\n5 6\n", "5 2 2\n1 2\n1 3\n2 4\n", "10 10 3\n2 5 6\n1 3\n4 1\n4 3\n5 3\n3 9\n8 4\n9 4\n5 10\n8 7\n10 8\n", "1 0 1\n1\n", "20 4 5\n1 3 9 10 20\n5 6\n1 2\n7 9\n4 10\n", "10 5 3\n1 5 9\n1 3\n1 8\n2 3\n8 4\n5 7\n", "10 3 2\n1 10\n1 2\n1 3\n4 5\n", "7 8 2\n1 4\n1 2\n2 3\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n", "24 38 2\n4 13\n7 1\n24 1\n2 8\n17 2\n2 18\n22 2\n23 3\n5 9\n21 5\n6 7\n6 19\n6 20\n11 7\n7 20\n13 8\n16 8\n9 10\n14 9\n21 9\n12 10\n10 22\n23 10\n17 11\n11 24\n20 12\n13 16\n13 23\n15 14\n17 14\n14 20\n19 16\n17 20\n17 23\n18 22\n18 23\n22 19\n21 20\n23 24\n", "10 13 2\n5 10\n2 1\n1 4\n2 3\n2 8\n3 4\n7 3\n4 6\n8 4\n4 9\n6 7\n6 9\n10 6\n7 8\n", "5 3 2\n1 2\n2 3\n2 4\n1 5\n", "1000 0 1\n72\n", "11 7 2\n1 4\n1 2\n1 3\n4 5\n4 6\n5 6\n9 10\n1 11\n", "10 30 1\n4\n1 2\n3 1\n4 1\n1 6\n1 8\n10 1\n2 4\n2 7\n3 4\n3 5\n7 3\n3 9\n10 3\n5 4\n6 4\n7 4\n9 4\n10 4\n6 5\n5 8\n9 5\n10 5\n6 7\n9 6\n10 6\n7 8\n9 7\n10 7\n9 8\n10 8\n", "6 4 1\n1\n2 3\n3 4\n4 5\n5 6\n", "5 2 3\n1 3 4\n1 5\n2 4\n", "9 5 2\n1 5\n1 2\n2 3\n3 4\n5 6\n6 7\n", "7 3 3\n1 5 6\n1 2\n1 3\n6 7\n", "6 4 2\n1 5\n1 2\n2 3\n3 4\n5 6\n"], "output": ["2", "2", "18", "0", "89", "17", "33", "1", "215", "23", "1", "499500", "24", "15", "11", "0", "13", "4", "3\n"]}, "generated_tests": {"input": ["10 5 3\n1 5 9\n1 3\n1 8\n2 1\n8 4\n5 7\n", "10 3 2\n1 10\n1 2\n1 3\n1 5\n", "24 38 2\n4 13\n7 1\n24 1\n2 8\n17 2\n2 18\n22 2\n23 3\n5 9\n21 5\n6 7\n6 19\n6 20\n11 7\n7 20\n13 8\n16 8\n9 10\n14 9\n21 9\n12 10\n10 13\n23 10\n17 11\n11 24\n20 12\n13 16\n13 23\n15 14\n17 14\n14 20\n19 16\n17 20\n17 23\n18 22\n18 23\n22 19\n21 20\n23 24\n", "11 4 1\n1\n2 3\n3 4\n4 5\n5 6\n", "9 5 2\n1 5\n1 2\n2 3\n6 4\n5 6\n6 7\n", "7 3 3\n2 5 6\n1 2\n1 3\n6 7\n", "7 3 3\n2 5 6\n1 4\n1 3\n6 7\n", "2 0 1\n1\n", "1000 0 1\n34\n", "18 7 2\n1 4\n1 2\n1 3\n4 5\n4 6\n5 6\n9 10\n1 11\n", "10 30 1\n4\n1 2\n3 1\n4 1\n1 6\n1 8\n10 1\n2 4\n2 7\n3 4\n3 5\n7 3\n3 9\n10 3\n5 4\n6 4\n7 5\n9 4\n10 4\n6 5\n5 8\n9 5\n10 5\n6 7\n9 6\n10 6\n7 8\n9 7\n10 7\n9 8\n10 8\n", "6 4 1\n2\n2 3\n3 4\n4 5\n5 6\n", "12 5 2\n1 5\n1 2\n2 3\n3 4\n5 6\n6 7\n", "8 3 3\n1 5 6\n1 2\n1 3\n6 7\n", "4 1 2\n1 3\n1 4\n", "16 3 3\n2 5 6\n1 2\n1 3\n6 7\n", "20 4 5\n1 3 9 10 20\n5 6\n1 2\n7 9\n8 10\n", "13 3 3\n1 5 6\n1 2\n1 3\n6 7\n", "12 5 2\n1 5\n1 2\n2 3\n3 4\n5 9\n6 7\n", "20 4 1\n1\n1 3\n3 4\n4 5\n5 6\n", "11 4 1\n1\n2 3\n3 4\n4 5\n5 10\n", "10 5 3\n1 7 9\n1 3\n1 8\n2 3\n8 4\n5 7\n", "11 4 1\n1\n1 3\n3 4\n4 5\n5 6\n", "11 4 1\n1\n2 1\n3 4\n4 5\n5 10\n", "1000 0 1\n9\n", "6 4 1\n2\n1 3\n3 4\n4 5\n5 6\n", "12 5 2\n1 5\n1 2\n2 3\n3 4\n5 6\n6 12\n", "11 4 1\n1\n2 1\n3 7\n4 5\n5 10\n", "24 38 2\n4 13\n7 1\n24 1\n2 8\n17 2\n2 18\n22 2\n23 3\n5 9\n21 5\n6 7\n6 19\n6 20\n11 7\n7 20\n13 8\n16 8\n9 6\n14 9\n21 9\n12 10\n10 22\n23 10\n17 11\n11 24\n20 12\n13 16\n13 23\n15 14\n17 14\n14 20\n19 16\n17 20\n17 23\n18 22\n18 23\n22 19\n21 20\n23 24\n", "5 2 3\n1 3 4\n1 5\n2 1\n", "7 3 3\n1 5 4\n1 2\n1 3\n6 7\n", "9 3 3\n2 5 6\n1 2\n1 3\n6 7\n", "11 4 1\n1\n2 3\n6 4\n4 5\n5 10\n", "10 5 3\n1 7 9\n1 3\n1 8\n2 3\n5 4\n5 7\n", "1000 0 1\n8\n", "18 7 2\n1 4\n1 2\n1 3\n4 5\n4 6\n5 6\n9 10\n2 11\n", "12 5 2\n1 5\n1 2\n2 3\n1 4\n5 6\n6 7\n", "11 4 1\n1\n1 3\n3 6\n4 5\n5 6\n", "11 4 1\n1\n4 1\n3 4\n4 5\n5 10\n", "11 4 1\n1\n2 1\n5 7\n4 5\n5 10\n", "11 4 1\n1\n1 3\n6 4\n4 5\n5 10\n", "1000 0 1\n15\n", "11 4 1\n1\n2 1\n5 7\n4 5\n7 10\n", "11 4 1\n1\n2 1\n5 7\n4 5\n7 1\n", "11 4 1\n1\n2 1\n6 7\n4 5\n7 1\n", "11 4 1\n1\n2 1\n6 8\n4 5\n7 1\n", "11 4 1\n1\n4 1\n6 8\n4 5\n7 1\n", "5 2 2\n1 2\n1 5\n2 4\n", "10 3 2\n1 10\n1 2\n2 3\n4 5\n", "24 38 2\n4 13\n7 1\n24 1\n2 8\n17 2\n2 18\n22 2\n23 3\n5 9\n21 5\n6 7\n6 19\n6 20\n11 7\n7 20\n13 8\n16 8\n9 10\n14 9\n21 9\n12 10\n10 22\n23 10\n17 11\n11 24\n20 1\n13 16\n13 23\n15 14\n17 14\n14 20\n19 16\n17 20\n17 23\n18 22\n18 23\n22 19\n21 20\n23 24\n", "1000 0 1\n30\n", "9 5 2\n2 5\n1 2\n2 3\n3 4\n5 6\n6 7\n", "10 5 3\n1 5 9\n1 3\n2 8\n2 1\n8 4\n5 7\n", "9 5 3\n1 7 9\n1 3\n1 8\n2 3\n8 4\n5 7\n", "24 38 2\n4 13\n7 1\n24 1\n2 8\n17 2\n2 18\n22 2\n23 3\n5 9\n21 5\n6 7\n6 19\n6 20\n11 7\n7 20\n13 8\n16 8\n9 11\n14 9\n21 9\n12 10\n10 22\n23 10\n17 11\n11 24\n20 12\n13 16\n13 23\n15 14\n17 14\n14 20\n19 16\n17 20\n17 23\n18 22\n18 23\n22 19\n21 20\n23 24\n", "11 4 1\n1\n2 3\n6 3\n4 5\n5 10\n"], "output": ["17\n", "33\n", "215\n", "51\n", "13\n", "4\n", "7\n", "1\n", "499500\n", "101\n", "15\n", "11\n", "34\n", "8\n", "2\n", "76\n", "89\n", "43\n", "41\n", "186\n", "51\n", "17\n", "51\n", "51\n", "499500\n", "11\n", "34\n", "51\n", "215\n", "1\n", "7\n", "13\n", "51\n", "13\n", "499500\n", "101\n", "34\n", "51\n", "51\n", "51\n", "51\n", "499500\n", "51\n", "51\n", "51\n", "51\n", "51\n", "2\n", "33\n", "215\n", "499500\n", "13\n", "17\n", "11\n", "215\n", "51\n"]}, "short_description": "1. One-sentence summary:  \nPartition the nodes of an undirected graph into connected components anchored at given \u201cseed\u201d nodes, greedily absorb all unassigned nodes into the largest such component, and then compute how many additional edges are needed to make each component a clique.\n\n2. Core algorithmic approach:  \n- Breadth-First Search (BFS) to extract connected components from each seed node.  \n- A greedy step that assigns all leftover nodes to the largest component.  \n- Combinatorial counting (nC2) to compute the number of edges in a full clique for each component, minus the existing edges.\n\n3. Reusable components:  \n- BFS-based component extractor: given a start node and adjacency list, returns the set of reachable nodes.  \n- Clique-edge calculator: a function that returns n \u00d7 (n\u22121)/2 for a given size n.  \n- Greedy assignment pattern: sort component sizes and assign a pool of extra elements to the largest component."}
{"name": "977_E. Cyclic Components", "description": "You are given an undirected graph consisting of n vertices and m edges. Your task is to find the number of connected components which are cycles.\n\nHere are some definitions of graph theory.\n\nAn undirected graph consists of two sets: set of nodes (called vertices) and set of edges. Each edge connects a pair of vertices. All edges are bidirectional (i.e. if a vertex a is connected with a vertex b, a vertex b is also connected with a vertex a). An edge can't connect vertex with itself, there is at most one edge between a pair of vertices.\n\nTwo vertices u and v belong to the same connected component if and only if there is at least one path along edges connecting u and v.\n\nA connected component is a cycle if and only if its vertices can be reordered in such a way that:\n\n  * the first vertex is connected with the second vertex by an edge, \n  * the second vertex is connected with the third vertex by an edge, \n  * ... \n  * the last vertex is connected with the first vertex by an edge, \n  * all the described edges of a cycle are distinct. \n\n\n\nA cycle doesn't contain any other edges except described above. By definition any cycle contains three or more vertices.\n\n<image> There are 6 connected components, 2 of them are cycles: [7, 10, 16] and [5, 11, 9, 15].\n\nInput\n\nThe first line contains two integer numbers n and m (1 \u2264 n \u2264 2 \u22c5 10^5, 0 \u2264 m \u2264 2 \u22c5 10^5) \u2014 number of vertices and edges.\n\nThe following m lines contains edges: edge i is given as a pair of vertices v_i, u_i (1 \u2264 v_i, u_i \u2264 n, u_i \u2260 v_i). There is no multiple edges in the given graph, i.e. for each pair (v_i, u_i) there no other pairs (v_i, u_i) and (u_i, v_i) in the list of edges.\n\nOutput\n\nPrint one integer \u2014 the number of connected components which are also cycles.\n\nExamples\n\nInput\n\n5 4\n1 2\n3 4\n5 4\n3 5\n\n\nOutput\n\n1\n\n\nInput\n\n17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n\n\nOutput\n\n2\n\nNote\n\nIn the first example only component [3, 4, 5] is also a cycle.\n\nThe illustration above corresponds to the second example.", "solution": "from sys import stdin\nfrom collections import deque\n\n\ndef bfs(x):\n    vis[x] = True\n    q = deque([x])\n    ans = 1\n    while q:\n        cur = q.popleft()\n        ans &= len(g[cur]) == 2\n        for x in g[cur]:\n            if not vis[x]:\n                vis[x] = True\n                q.append(x)\n    return ans\n\n\nn, m = map(int, stdin.readline().split())\ng = [[] for _ in range(n)]\nvis = [False]*n\nans = 0\nfor _ in range(m):\n    u, v = map(lambda x: int(x) - 1, stdin.readline().split())\n    g[u].append(v)\n    g[v].append(u)\n\nfor x in range(n):\n    if not vis[x]:\n        ans += bfs(x)\n\nprint(ans)\n\n  \t\t \t\t \t   \t \t\t\t\t \t     \t   \t", "difficulty": 11, "public_tests": {"input": ["5 4\n1 2\n3 4\n5 4\n3 5\n", "17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n"], "output": ["1\n", "2\n"]}, "private_tests": {"input": ["5 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n", "5 5\n1 2\n2 3\n3 4\n4 1\n3 5\n", "5 10\n1 2\n2 3\n3 4\n4 5\n5 1\n1 4\n2 4\n3 5\n3 1\n2 5\n", "1 0\n", "4 4\n1 2\n2 3\n1 3\n1 4\n", "200000 0\n", "4 6\n1 2\n2 3\n3 4\n4 1\n1 3\n2 4\n", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n6 2\n2 4\n6 4\n"], "output": ["0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "generated_tests": {"input": ["5 5\n1 2\n2 3\n3 4\n1 1\n3 5\n", "17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n", "32 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n", "2 0\n", "187138 0\n", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n6 2\n2 4\n1 4\n", "5 5\n1 2\n1 3\n3 4\n1 1\n3 5\n", "3 0\n", "47131 0\n", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n1 2\n2 4\n1 4\n", "17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n15 16\n7 10\n16 7\n14 3\n14 4\n17 6\n", "5 0\n1 2\n1 3\n3 4\n1 1\n3 5\n", "4029 0\n", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n1 2\n2 1\n1 4\n", "5 1\n1 2\n1 3\n3 4\n1 1\n3 5\n", "7007 0\n", "6 9\n1 2\n2 3\n1 4\n4 5\n5 6\n6 1\n1 2\n2 1\n1 4\n", "5 1\n1 2\n1 3\n3 4\n0 1\n3 5\n", "6 9\n1 2\n2 3\n1 4\n4 5\n2 6\n6 1\n1 2\n2 1\n1 4\n", "5 1\n1 2\n1 3\n3 0\n0 1\n3 5\n", "5 10\n1 1\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n", "5 5\n1 2\n2 3\n3 4\n4 1\n3 3\n", "5 10\n1 2\n2 3\n3 4\n4 5\n5 1\n1 4\n2 4\n3 5\n1 1\n2 5\n", "153137 0\n", "4 6\n1 2\n2 3\n3 1\n4 1\n1 3\n2 4\n", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n6 2\n1 4\n6 4\n", "5 5\n1 2\n2 4\n3 4\n1 1\n3 5\n", "4 0\n", "17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n3 16\n7 10\n16 7\n14 3\n14 4\n17 6\n", "1519 0\n", "6 9\n1 1\n2 3\n3 4\n4 5\n5 6\n6 1\n1 2\n2 4\n1 4\n", "17 15\n1 8\n1 12\n5 11\n11 9\n11 15\n15 5\n4 13\n3 10\n4 3\n15 16\n7 10\n16 7\n14 3\n14 4\n17 6\n", "5 0\n1 0\n1 3\n3 4\n1 1\n3 5\n", "2226 0\n", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n1 2\n2 1\n2 4\n", "9667 0\n", "6 9\n1 2\n2 3\n1 4\n4 5\n5 4\n6 1\n1 2\n2 1\n1 4\n", "6 1\n1 2\n1 3\n3 4\n1 1\n3 5\n", "5 1\n1 2\n1 3\n3 0\n0 1\n4 5\n", "5 10\n1 2\n2 3\n3 4\n4 5\n5 1\n1 4\n2 4\n3 5\n1 1\n1 5\n", "4 6\n1 2\n2 3\n3 1\n4 1\n1 3\n1 4\n", "32 15\n1 5\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n", "17 15\n1 4\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n3 16\n7 10\n16 7\n14 3\n14 4\n17 6\n", "2107 0\n", "6 9\n1 1\n2 3\n3 4\n4 5\n5 6\n6 1\n1 2\n2 3\n1 4\n", "5 0\n1 0\n1 3\n3 4\n1 2\n3 5\n", "17521 0\n", "6 9\n1 2\n2 3\n1 4\n4 5\n5 4\n2 1\n1 2\n2 1\n1 4\n", "6 1\n1 2\n1 0\n3 4\n1 1\n3 5\n", "32 15\n1 5\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n", "17 15\n1 4\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n3 16\n7 16\n16 7\n14 3\n14 4\n17 6\n", "5 0\n1 0\n1 3\n3 4\n1 2\n3 7\n", "6 9\n1 3\n2 3\n1 4\n4 5\n5 4\n2 1\n1 2\n2 1\n1 4\n", "32 15\n1 5\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n10 16\n7 10\n13 7\n14 3\n14 4\n17 6\n", "17 15\n1 4\n2 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n3 16\n7 16\n16 7\n14 3\n14 4\n17 6\n", "5 0\n1 0\n1 3\n3 4\n1 2\n5 7\n", "6 9\n1 3\n2 3\n1 4\n4 5\n5 4\n2 1\n1 2\n3 1\n1 4\n", "32 15\n1 5\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n10 20\n7 10\n13 7\n14 3\n14 4\n17 6\n", "5 0\n2 0\n1 3\n3 4\n1 2\n5 7\n", "32 15\n1 5\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n10 20\n7 10\n21 7\n14 3\n14 4\n17 6\n", "5 0\n2 0\n0 3\n3 4\n1 2\n5 7\n", "32 15\n1 5\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n2 10\n4 3\n10 20\n7 10\n21 7\n14 3\n14 4\n17 6\n", "5 0\n2 0\n0 3\n5 4\n1 2\n5 7\n", "32 15\n1 5\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n2 10\n4 3\n10 20\n7 10\n21 7\n14 3\n14 4\n17 11\n", "9 0\n2 0\n0 3\n5 4\n1 2\n5 7\n", "32 15\n1 5\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n2 10\n4 3\n10 20\n7 10\n10 7\n14 3\n14 4\n17 11\n", "9 0\n2 0\n0 3\n5 4\n1 3\n5 7\n", "9 0\n2 0\n0 3\n5 4\n1 3\n5 5\n", "5 10\n1 2\n1 3\n1 4\n1 5\n3 3\n2 4\n2 5\n3 4\n3 5\n4 5\n", "5 5\n1 2\n2 4\n3 4\n4 1\n3 5\n", "5 10\n1 2\n2 3\n3 4\n4 5\n5 1\n2 4\n2 4\n3 5\n3 1\n2 5\n", "4 4\n1 2\n2 4\n1 3\n1 4\n", "4 6\n1 2\n2 1\n3 4\n4 1\n1 3\n2 4\n", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n6 2\n3 4\n6 4\n", "5 4\n1 2\n3 3\n5 4\n3 5\n", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n3 2\n2 4\n1 4\n", "17 9\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 10\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n", "5 5\n1 2\n1 2\n3 4\n1 1\n3 5\n", "34590 0\n", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n1 3\n2 4\n1 4\n", "17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 7\n4 3\n15 16\n7 10\n16 7\n14 3\n14 4\n17 6\n"], "output": ["0\n", "1\n", "2\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:  \n   The solution counts the number of connected components in an undirected graph where every vertex in the component has exactly two neighbors.\n\n2. Core algorithmic approach:  \n   Breadth-first search (BFS) is used to traverse each unvisited component and simultaneously verify a global property (all nodes have degree two).\n\n3. Reusable components:  \n   - BFS component traversal template with a queue and visited array for exploring undirected graphs.  \n   - Adjacency-list graph representation and degree checks for per-node properties during traversal.  \n   - Boolean accumulator pattern (`ans &= condition`) to aggregate a component-wise predicate over all visited nodes."}
{"name": "791_B. Bear and Friendship Condition", "description": "Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).\n\nThere are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.\n\nLet A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.\n\nFor example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.\n\nCan you help Limak and check if the network is reasonable? Print \"YES\" or \"NO\" accordingly, without the quotes.\n\nInput\n\nThe first line of the input contain two integers n and m (3 \u2264 n \u2264 150 000, <image>) \u2014 the number of members and the number of pairs of members that are friends.\n\nThe i-th of the next m lines contains two distinct integers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.\n\nOutput\n\nIf the given network is reasonable, print \"YES\" in a single line (without the quotes). Otherwise, print \"NO\" in a single line (without the quotes).\n\nExamples\n\nInput\n\n4 3\n1 3\n3 4\n1 4\n\n\nOutput\n\nYES\n\n\nInput\n\n4 4\n3 1\n2 3\n3 4\n1 2\n\n\nOutput\n\nNO\n\n\nInput\n\n10 4\n4 3\n5 10\n8 9\n1 2\n\n\nOutput\n\nYES\n\n\nInput\n\n3 2\n1 2\n2 3\n\n\nOutput\n\nNO\n\nNote\n\nThe drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is \"NO\" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.\n\n<image>", "solution": "\nn , m = map(int,input().split())\ng = [[] for i in range(n + 1 )]\n\ne = 0\nvx = 0\n\nfor i in range(m):\n    a , b = map(int,input().split())\n    g[a].append(b)\n    g[b].append(a)\n\nvis = [False for i in range(n + 1 )]\n\ndef dfs(node):\n    global vx , e\n    stack = [node]\n    while(stack):\n        node = stack.pop()\n        if not vis[node]:\n            vx +=1\n            vis[node] = True\n            for j in g[node]:\n                e +=1\n                stack.append(j)\n\nans = 'YES'\nfor i in range(1 , n + 1):\n    if not vis[i]:\n        e = vx = 0\n        dfs(i)\n        e //=2\n        if e != vx*(vx - 1)//2:\n            ans = 'NO'\n\nprint(ans)\n", "difficulty": 8, "public_tests": {"input": ["3 2\n1 2\n2 3\n", "10 4\n4 3\n5 10\n8 9\n1 2\n", "4 3\n1 3\n3 4\n1 4\n", "4 4\n3 1\n2 3\n3 4\n1 2\n"], "output": ["No\n", "Yes\n", "Yes\n", "No\n"]}, "private_tests": {"input": ["6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n1 6\n", "4 5\n1 2\n1 3\n1 4\n2 3\n3 4\n", "6 6\n1 2\n2 4\n4 3\n1 5\n5 6\n6 3\n", "4 5\n1 2\n1 3\n2 3\n1 4\n2 4\n", "150000 0\n", "6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n", "4 4\n1 2\n2 3\n3 4\n4 1\n", "6 9\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n", "3 2\n1 2\n1 3\n", "5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n", "3 2\n3 2\n1 3\n", "150000 3\n150000 149999\n149998 149999\n149998 150000\n", "4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n", "5 5\n1 4\n5 3\n5 1\n2 3\n4 5\n", "5 9\n1 2\n5 1\n3 1\n1 4\n2 4\n5 3\n5 4\n2 3\n5 2\n", "4 3\n1 2\n1 3\n1 4\n", "5 4\n1 2\n2 5\n3 4\n4 5\n", "4 4\n1 2\n1 3\n4 2\n4 3\n", "4 4\n1 2\n1 3\n2 4\n3 4\n", "9 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 1\n", "10 5\n9 5\n1 2\n6 8\n6 3\n10 6\n", "4 3\n1 2\n1 3\n2 4\n", "3 3\n2 3\n1 2\n1 3\n", "6 12\n1 2\n1 4\n1 5\n1 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n", "3 0\n", "3 1\n1 2\n", "150000 10\n62562 50190\n48849 60549\n139470 18456\n21436 25159\n66845 120884\n99972 114453\n11631 99153\n62951 134848\n78114 146050\n136760 131762\n", "10 8\n10 7\n9 7\n5 7\n6 8\n3 5\n8 10\n3 4\n7 8\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "10 20\n8 2\n8 3\n1 8\n9 5\n2 4\n10 1\n10 5\n7 5\n7 8\n10 7\n6 5\n3 7\n1 9\n9 8\n7 2\n2 10\n2 1\n6 4\n9 7\n4 3\n", "5 4\n1 2\n1 3\n1 4\n1 5\n", "15 42\n8 1\n3 14\n7 14\n12 3\n7 9\n6 7\n6 12\n14 12\n3 10\n10 14\n6 3\n3 13\n13 10\n7 12\n7 2\n6 10\n11 4\n9 3\n8 4\n7 3\n2 3\n2 10\n9 13\n2 14\n6 14\n13 2\n1 4\n13 6\n7 10\n13 14\n12 10\n13 7\n12 2\n9 10\n13 12\n2 6\n9 14\n6 9\n12 9\n11 1\n2 9\n11 8\n", "4 4\n1 2\n2 3\n3 4\n1 4\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n13 11\n30 29\n16 12\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 7\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "4 3\n1 2\n1 3\n3 4\n", "1000 4\n100 132\n100 164\n196 132\n196 164\n", "99 26\n64 17\n48 70\n71 50\n3 50\n9 60\n61 64\n53 50\n25 12\n3 71\n71 53\n3 53\n65 70\n9 25\n9 12\n59 56\n39 60\n64 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n65 48\n61 69\n", "4 3\n3 1\n2 1\n3 2\n", "4 2\n4 1\n2 1\n", "10 15\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n4 5\n1 6\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n"], "output": ["No\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "Yes\n", "Yes\n", "Yes\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "No\n"]}, "generated_tests": {"input": ["4 5\n1 2\n2 3\n1 4\n2 3\n3 4\n", "125021 0\n", "6 6\n1 2\n2 5\n4 3\n1 5\n5 6\n6 3\n", "4 4\n1 3\n2 3\n3 4\n4 1\n", "3 2\n3 2\n1 2\n", "4 4\n1 2\n2 3\n4 2\n4 3\n", "4 4\n1 2\n1 3\n2 4\n2 4\n", "9 9\n2 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 1\n", "10 5\n9 5\n1 2\n6 8\n6 5\n10 6\n", "7 3\n1 2\n1 3\n2 4\n", "6 12\n1 2\n1 4\n1 5\n1 6\n1 3\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n", "150000 10\n62562 9958\n48849 60549\n139470 18456\n21436 25159\n66845 120884\n99972 114453\n11631 99153\n62951 134848\n78114 146050\n136760 131762\n", "10 8\n10 7\n9 7\n5 7\n6 8\n3 5\n8 1\n3 4\n7 8\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 2\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "10 20\n8 2\n8 3\n1 8\n9 5\n2 4\n10 1\n10 5\n7 5\n7 8\n10 7\n6 5\n1 7\n1 9\n9 8\n7 2\n2 10\n2 1\n6 4\n9 7\n4 3\n", "5 4\n1 2\n1 3\n1 1\n1 5\n", "4 4\n1 2\n1 3\n3 4\n1 4\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n21 11\n30 29\n16 12\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 7\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "6 3\n1 2\n1 3\n3 4\n", "4 2\n4 2\n2 1\n", "10 15\n1 2\n1 3\n2 4\n2 5\n3 4\n4 5\n4 5\n1 6\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n", "4 5\n1 2\n2 3\n1 4\n2 3\n3 2\n", "10 6\n1 2\n2 5\n4 3\n1 5\n5 6\n6 3\n", "5 2\n3 2\n1 2\n", "4 4\n1 2\n2 3\n4 2\n3 3\n", "4 4\n1 2\n1 3\n3 4\n2 4\n", "7 3\n1 2\n2 3\n2 4\n", "150000 10\n62562 7701\n48849 60549\n139470 18456\n21436 25159\n66845 120884\n99972 114453\n11631 99153\n62951 134848\n78114 146050\n136760 131762\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 2\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n3 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "10 20\n8 2\n8 3\n1 8\n9 5\n2 6\n10 1\n10 5\n7 5\n7 8\n10 7\n6 5\n1 7\n1 9\n9 8\n7 2\n2 10\n2 1\n6 4\n9 7\n4 3\n", "7 4\n1 2\n1 3\n3 4\n1 4\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n21 11\n30 29\n16 12\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 11\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "6 2\n4 2\n2 1\n", "10 15\n1 2\n1 3\n2 4\n2 5\n3 4\n6 5\n4 5\n1 6\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n", "10 6\n1 2\n2 5\n4 3\n1 5\n5 6\n6 1\n", "5 2\n3 1\n1 2\n", "4 4\n1 2\n1 3\n1 4\n2 4\n", "150000 10\n62562 7701\n48849 60549\n139470 18456\n9256 25159\n66845 120884\n99972 114453\n11631 99153\n62951 134848\n78114 146050\n136760 131762\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 2\n4 1\n11 4\n12 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n3 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "10 20\n7 2\n8 3\n1 8\n9 5\n2 6\n10 1\n10 5\n7 5\n7 8\n10 7\n6 5\n1 7\n1 9\n9 8\n7 2\n2 10\n2 1\n6 4\n9 7\n4 3\n", "7 4\n1 2\n1 3\n3 4\n2 4\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n21 11\n30 29\n16 7\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 11\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "6 2\n4 3\n2 1\n", "10 15\n1 2\n1 3\n2 4\n2 5\n3 4\n6 5\n4 5\n1 6\n6 7\n6 8\n1 9\n7 10\n8 9\n8 10\n9 10\n", "10 6\n1 2\n2 5\n4 3\n2 5\n5 6\n6 1\n", "150000 10\n62562 7701\n48849 60549\n139470 18456\n9256 25159\n66845 120884\n99972 114453\n11631 99153\n48053 134848\n78114 146050\n136760 131762\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 2\n4 1\n11 4\n12 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n3 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 3\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "10 20\n7 2\n8 3\n1 8\n9 5\n2 6\n10 1\n10 5\n7 8\n7 8\n10 7\n6 5\n1 7\n1 9\n9 8\n7 2\n2 10\n2 1\n6 4\n9 7\n4 3\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n21 11\n30 29\n16 7\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 11\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 5\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "10 15\n1 2\n1 3\n2 4\n2 5\n3 4\n9 5\n4 5\n1 6\n6 7\n6 8\n1 9\n7 10\n8 9\n8 10\n9 10\n", "10 6\n1 2\n3 5\n4 3\n2 5\n5 6\n6 1\n", "150000 10\n62562 7701\n48849 60549\n139470 18456\n9256 25159\n66845 120884\n99972 114453\n11631 99153\n48053 134848\n72854 146050\n136760 131762\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 2\n4 1\n11 4\n12 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n3 9\n12 17\n14 18\n6 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 3\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n21 11\n30 29\n16 7\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 11\n14 26\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 5\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "10 6\n1 2\n3 4\n4 3\n2 5\n5 6\n6 1\n", "150000 10\n62562 7701\n48849 60549\n139470 18456\n9256 25159\n66845 120884\n99972 114453\n11631 99153\n48053 134848\n72854 146050\n136760 61162\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 13\n11 2\n4 1\n11 4\n12 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n3 9\n12 17\n14 18\n6 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 3\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n21 11\n30 29\n16 7\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 11\n14 26\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 16\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 5\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "150000 10\n62562 7701\n48849 60549\n139470 18456\n9256 25159\n66845 120884\n99972 114453\n11631 99153\n48053 134848\n72854 116362\n136760 61162\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 13\n11 2\n4 1\n11 4\n12 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n3 9\n12 17\n14 18\n6 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 20\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 3\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n21 13\n30 29\n16 7\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 11\n14 26\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 16\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 5\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n21 13\n30 29\n16 7\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 11\n14 26\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n3 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 16\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 5\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n21 13\n30 29\n16 7\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 11\n14 26\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n6 20\n30 24\n25 20\n4 1\n3 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 16\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 5\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "6 6\n1 2\n3 3\n3 4\n4 5\n5 6\n1 6\n", "6 6\n1 2\n2 4\n2 3\n1 5\n5 6\n6 3\n", "4 5\n1 2\n1 2\n2 3\n1 4\n2 4\n", "4 4\n1 2\n2 3\n4 4\n4 1\n", "6 9\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n3 4\n3 1\n3 6\n", "5 2\n3 2\n1 3\n", "9 9\n1 2\n2 3\n3 4\n4 5\n8 6\n6 7\n7 8\n8 9\n9 1\n", "6 12\n1 2\n1 4\n1 5\n1 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n4 6\n4 6\n", "4 0\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n1 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 1\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n7 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "14 20\n8 2\n8 3\n1 8\n9 5\n2 4\n10 1\n10 5\n7 5\n7 8\n10 7\n6 5\n3 7\n1 9\n9 8\n7 2\n2 10\n2 1\n6 4\n9 7\n4 3\n", "15 42\n8 1\n3 14\n7 14\n12 3\n7 9\n6 7\n6 12\n14 12\n3 10\n10 14\n6 3\n3 13\n13 10\n7 12\n7 2\n6 10\n11 4\n9 3\n8 4\n7 3\n2 3\n2 10\n9 13\n2 14\n6 14\n13 2\n1 4\n13 6\n7 10\n13 4\n12 10\n13 7\n12 2\n9 10\n13 12\n2 6\n9 14\n6 9\n12 9\n11 1\n2 9\n11 8\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n13 11\n30 29\n16 12\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 7\n14 25\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 9\n18 26\n1 28\n30 22\n23 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "99 26\n64 17\n48 70\n71 50\n3 50\n9 2\n61 64\n53 50\n25 12\n3 71\n71 53\n3 53\n65 70\n9 25\n9 12\n59 56\n39 60\n64 69\n65 94\n70 94\n25 60\n60 12\n94 48\n17 69\n61 17\n65 48\n61 69\n", "10 15\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n4 5\n1 6\n6 7\n6 8\n7 7\n7 10\n8 9\n8 10\n9 10\n", "6 2\n1 2\n2 3\n", "10 4\n6 3\n5 10\n8 9\n1 2\n", "4 4\n2 3\n2 3\n3 4\n4 1\n", "9 9\n2 4\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 1\n", "6 12\n1 2\n1 4\n1 5\n1 6\n1 3\n3 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n", "150000 10\n62562 9958\n48849 60549\n139470 18456\n21436 25159\n66845 117812\n99972 114453\n11631 99153\n62951 134848\n78114 146050\n136760 131762\n", "10 8\n10 7\n9 7\n3 7\n6 8\n3 5\n8 1\n3 4\n7 8\n", "20 80\n17 4\n10 1\n11 10\n17 7\n15 10\n14 15\n13 1\n18 13\n3 13\n12 7\n9 13\n10 12\n14 12\n18 11\n4 7\n10 13\n11 3\n19 8\n14 7\n10 17\n14 3\n7 11\n11 14\n19 5\n10 14\n15 17\n3 1\n9 10\n11 2\n4 1\n11 4\n9 1\n12 3\n13 7\n1 14\n11 12\n7 1\n9 12\n18 15\n17 3\n7 15\n4 10\n7 18\n7 9\n12 17\n14 18\n3 18\n18 17\n9 15\n14 4\n14 9\n9 18\n12 4\n9 10\n15 4\n4 18\n15 13\n1 12\n7 3\n13 11\n4 13\n5 8\n12 18\n12 15\n17 9\n11 15\n3 10\n18 10\n4 3\n15 3\n13 12\n9 4\n9 11\n14 17\n13 17\n3 9\n13 14\n1 17\n15 1\n17 11\n", "30 73\n25 2\n2 16\n20 12\n16 20\n7 18\n11 15\n21 11\n30 29\n16 12\n12 25\n2 1\n18 14\n9 8\n28 16\n2 9\n22 21\n1 25\n12 28\n14 7\n4 9\n26 7\n14 27\n12 2\n29 22\n1 9\n13 15\n3 10\n1 12\n8 20\n30 24\n25 20\n4 1\n4 12\n20 1\n8 4\n2 28\n25 16\n16 8\n20 4\n9 12\n21 30\n23 11\n19 6\n28 4\n29 21\n9 28\n30 10\n22 24\n25 8\n27 26\n25 4\n28 20\n9 25\n24 29\n20 16\n18 26\n1 28\n30 22\n23 15\n28 27\n8 2\n23 13\n12 8\n14 26\n16 4\n28 25\n8 1\n4 2\n9 16\n20 2\n18 27\n28 8\n27 7\n", "4 2\n4 3\n2 1\n", "4 5\n1 2\n2 3\n2 4\n2 3\n3 4\n", "10 6\n1 2\n2 5\n2 3\n1 5\n5 6\n6 3\n"], "output": ["NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary  \nGiven an undirected graph, determine if every connected component is a clique (i.e., fully connected subgraph).  \n\n2. Core algorithmic approach  \nGraph traversal with depth-first search (DFS) to identify connected components, count their vertices and edges, and then verify the clique condition by comparing the observed edge count to k\u00b7(k\u20131)/2 for a component of size k.  \n\n3. Reusable components  \n- Iterative DFS (stack-based) for component extraction and property accumulation (size, edge count).  \n- Adjacency-list graph representation for efficient neighbor enumeration.  \n- Connected-components loop combining a visited array with per-component metrics aggregation."}
{"name": "1000_E. We Need More Bosses", "description": "Your friend is developing a computer game. He has already decided how the game world should look like \u2014 it should consist of n locations connected by m two-way passages. The passages are designed in such a way that it should be possible to get from any location to any other location.\n\nOf course, some passages should be guarded by the monsters (if you just can go everywhere without any difficulties, then it's not fun, right?). Some crucial passages will be guarded by really fearsome monsters, requiring the hero to prepare for battle and designing his own tactics of defeating them (commonly these kinds of monsters are called bosses). And your friend wants you to help him place these bosses.\n\nThe game will start in location s and end in location t, but these locations are not chosen yet. After choosing these locations, your friend will place a boss in each passage such that it is impossible to get from s to t without using this passage. Your friend wants to place as much bosses as possible (because more challenges means more fun, right?), so he asks you to help him determine the maximum possible number of bosses, considering that any location can be chosen as s or as t.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 3 \u22c5 10^5, n - 1 \u2264 m \u2264 3 \u22c5 10^5) \u2014 the number of locations and passages, respectively.\n\nThen m lines follow, each containing two integers x and y (1 \u2264 x, y \u2264 n, x \u2260 y) describing the endpoints of one of the passages.\n\nIt is guaranteed that there is no pair of locations directly connected by two or more passages, and that any location is reachable from any other location.\n\nOutput\n\nPrint one integer \u2014 the maximum number of bosses your friend can place, considering all possible choices for s and t.\n\nExamples\n\nInput\n\n5 5\n1 2\n2 3\n3 1\n4 1\n5 2\n\n\nOutput\n\n2\n\n\nInput\n\n4 3\n1 2\n4 3\n3 2\n\n\nOutput\n\n3", "solution": "import sys\nfrom array import array  # noqa: F401\n\n\ndef readline(): return sys.stdin.buffer.readline().decode('utf-8')\n\n\ndef build_bridge_tree(v_count, edge_count, adj, edge_index):\n    from collections import deque\n\n    preorder = [0]\n    parent, order, low = [0]+[-1]*v_count, [0]+[-1]*(v_count-1), [0]*v_count\n    stack = [0]\n    rem = [len(dests)-1 for dests in adj]\n    pre_i = 1\n\n    while stack:\n        v = stack.pop()\n\n        while rem[v] >= 0:\n            dest = adj[v][rem[v]]\n            rem[v] -= 1\n\n            if order[dest] == -1:\n                preorder.append(dest)\n                order[dest] = low[dest] = pre_i\n                parent[dest] = v\n                pre_i += 1\n                stack.extend((v, dest))\n                break\n\n    is_bridge = array('b', [0]) * edge_count\n\n    for v in reversed(preorder):\n        for dest, ei in zip(adj[v], edge_index[v]):\n            if dest != parent[v] and low[v] > low[dest]:\n                low[v] = low[dest]\n            if dest != parent[v] and order[v] < low[dest]:\n                is_bridge[ei] = 1\n\n    bridge_tree = [[] for _ in range(v_count)]\n    stack = [0]\n    visited = array('b', [1] + [0]*(v_count-1))\n\n    while stack:\n        v = stack.pop()\n        dq = deque([v])\n        while dq:\n            u = dq.popleft()\n            for dest, ei in zip(adj[u], edge_index[u]):\n                if visited[dest]:\n                    continue\n                visited[dest] = 1\n\n                if is_bridge[ei]:\n                    bridge_tree[v].append(dest)\n                    bridge_tree[dest].append(v)\n                    stack.append(dest)\n                else:\n                    dq.append(dest)\n\n    return bridge_tree\n\n\ndef get_dia(adj):\n    from collections import deque\n    n = len(adj)\n    dq = deque([(0, -1)])\n\n    while dq:\n        end1, par = dq.popleft()\n        for dest in adj[end1]:\n            if dest != par:\n                dq.append((dest, end1))\n\n    prev = [-1]*n\n    prev[end1] = -2\n    dq = deque([(end1, 0)])\n\n    while dq:\n        end2, diameter = dq.popleft()\n        for dest in adj[end2]:\n            if prev[dest] == -1:\n                prev[dest] = end2\n                dq.append((dest, diameter+1))\n\n    return end1, end2, diameter, prev\n\n\nn, m = map(int, readline().split())\nadj = [[] for _ in range(n)]\neindex = [[] for _ in range(n)]\n\nfor ei in range(m):\n    u, v = map(int, readline().split())\n    adj[u-1].append(v-1)\n    adj[v-1].append(u-1)\n    eindex[u-1].append(ei)\n    eindex[v-1].append(ei)\n\nbtree = build_bridge_tree(n, m, adj, eindex)\nprint(get_dia(btree)[2])\n", "difficulty": 11, "public_tests": {"input": ["5 5\n1 2\n2 3\n3 1\n4 1\n5 2\n", "4 3\n1 2\n4 3\n3 2\n"], "output": ["2\n", "3\n"]}, "private_tests": {"input": ["5 6\n1 5\n2 3\n3 5\n2 1\n2 5\n2 4\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n19 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n"], "output": ["1\n", "8\n"]}, "generated_tests": {"input": ["4 3\n1 2\n4 2\n3 2\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "5 6\n1 5\n2 3\n3 5\n2 1\n2 5\n1 4\n", "5 6\n1 5\n3 3\n3 5\n2 2\n2 5\n2 4\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n8 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 6\n14 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 30\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n2 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n34 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 16\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 20\n29 25\n25 4\n1 13\n8 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n19 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n47 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 44\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 8\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "5 6\n1 5\n3 3\n3 5\n2 1\n2 5\n2 4\n", "5 5\n1 2\n2 3\n3 1\n4 1\n5 4\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n34 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 30\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n34 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n8 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n19 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n32 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 30\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n2 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n34 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n8 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n19 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n47 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n22 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 8\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n34 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 23\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "5 6\n1 5\n2 3\n3 5\n1 1\n2 5\n1 4\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n8 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n14 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 30\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n2 43\n40 36\n5 46\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n34 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n5 47\n31 32\n26 28\n8 8\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n22 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 3\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n34 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 23\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 30\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n2 43\n40 36\n5 46\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 30\n5 36\n34 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n8 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 6\n14 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 4\n", "50 72\n35 38\n19 30\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n2 43\n40 36\n5 46\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 30\n5 36\n34 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n2 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n8 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 6\n14 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n30 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 4\n", "5 6\n2 5\n2 3\n3 5\n2 1\n2 5\n2 4\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n19 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n23 3\n14 10\n41 25\n17 50\n44 9\n", "5 5\n1 2\n2 3\n3 1\n4 1\n5 3\n", "50 72\n35 13\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 30\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 6\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n34 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n4 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n32 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 46\n9 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n4 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n5 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 29\n48 21\n22 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n26 48\n43 30\n26 10\n30 13\n2 46\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n", "50 72\n35 38\n19 46\n35 12\n27 30\n23 41\n50 16\n31 6\n20 33\n38 1\n10 35\n13 43\n29 25\n25 4\n1 13\n8 20\n36 29\n13 47\n48 5\n30 21\n30 38\n28 50\n41 45\n25 43\n40 36\n14 47\n31 32\n26 28\n8 13\n43 24\n27 35\n14 29\n14 38\n50 9\n34 49\n12 34\n43 42\n41 15\n46 29\n48 11\n48 7\n40 16\n48 21\n18 26\n15 11\n12 39\n18 42\n27 12\n6 9\n19 37\n45 39\n5 36\n37 22\n18 49\n15 38\n24 42\n34 45\n43 3\n2 1\n18 48\n43 30\n26 10\n30 13\n2 27\n8 3\n22 42\n14 4\n14 27\n13 3\n14 10\n41 25\n17 50\n44 9\n"], "output": ["2\n", "8\n", "1\n", "3\n", "4\n", "6\n", "7\n", "5\n", "2\n", "2\n", "8\n", "8\n", "8\n", "8\n", "8\n", "3\n", "8\n", "8\n", "8\n", "8\n", "8\n", "2\n", "8\n", "8\n", "8\n", "8\n", "8\n", "4\n", "8\n", "4\n", "2\n", "8\n", "2\n", "8\n", "4\n", "3\n", "8\n", "6\n"]}, "short_description": "1. One-sentence summary  \nGiven an undirected graph, the solution identifies all \u201ccritical\u201d edges whose removal splits the graph, compresses the graph along non-critical edges into a tree of components, and computes the longest distance (diameter) in that tree.\n\n2. Core algorithmic approach  \n- Tarjan\u2010style bridge finding via low-link values using an explicit (stack-based) DFS  \n- Component condensation by flood-filling across non-bridge edges to build a bridge\u2010tree  \n- Tree diameter computation by two BFS/DFS traversals (farthest\u2010node twice)\n\n3. Reusable components  \n- Iterative DFS with arrays `order[]`, `low[]`, and a parent stack to detect bridges  \n- Flood-fill (BFS/DFS) to group vertices by non-bridge connectivity and assemble the bridge\u2010tree  \n- Two\u2010phase BFS/DFS pattern to find the diameter of any tree-like structure"}
{"name": "1534_F1. Falling Sand (Easy Version)", "description": "This is the easy version of the problem. The difference between the versions is the constraints on a_i. You can make hacks only if all versions of the problem are solved.\n\nLittle Dormi has recently received a puzzle from his friend and needs your help to solve it. \n\nThe puzzle consists of an upright board with n rows and m columns of cells, some empty and some filled with blocks of sand, and m non-negative integers a_1,a_2,\u2026,a_m (0 \u2264 a_i \u2264 n). In this version of the problem, a_i will be equal to the number of blocks of sand in column i.\n\nWhen a cell filled with a block of sand is disturbed, the block of sand will fall from its cell to the sand counter at the bottom of the column (each column has a sand counter). While a block of sand is falling, other blocks of sand that are adjacent at any point to the falling block of sand will also be disturbed and start to fall. Specifically, a block of sand disturbed at a cell (i,j) will pass through all cells below and including the cell (i,j) within the column, disturbing all adjacent cells along the way. Here, the cells adjacent to a cell (i,j) are defined as (i-1,j), (i,j-1), (i+1,j), and (i,j+1) (if they are within the grid). Note that the newly falling blocks can disturb other blocks.\n\nIn one operation you are able to disturb any piece of sand. The puzzle is solved when there are at least a_i blocks of sand counted in the i-th sand counter for each column from 1 to m.\n\nYou are now tasked with finding the minimum amount of operations in order to solve the puzzle. Note that Little Dormi will never give you a puzzle that is impossible to solve.\n\nInput\n\nThe first line consists of two space-separated positive integers n and m (1 \u2264 n \u22c5 m \u2264 400 000).\n\nEach of the next n lines contains m characters, describing each row of the board. If a character on a line is '.', the corresponding cell is empty. If it is '#', the cell contains a block of sand.\n\nThe final line contains m non-negative integers a_1,a_2,\u2026,a_m (0 \u2264 a_i \u2264 n) \u2014 the minimum amount of blocks of sand that needs to fall below the board in each column. In this version of the problem, a_i will be equal to the number of blocks of sand in column i.\n\nOutput\n\nPrint one non-negative integer, the minimum amount of operations needed to solve the puzzle.\n\nExamples\n\nInput\n\n\n5 7\n#....#.\n.#.#...\n#....#.\n#....##\n#.#....\n4 1 1 1 0 3 1\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n3 3\n#.#\n#..\n##.\n3 1 1\n\n\nOutput\n\n\n1\n\nNote\n\nFor example 1, by disturbing both blocks of sand on the first row from the top at the first and sixth columns from the left, and the block of sand on the second row from the top and the fourth column from the left, it is possible to have all the required amounts of sand fall in each column. It can be proved that this is not possible with fewer than 3 operations, and as such the answer is 3. Here is the puzzle from the first example.\n\n<image>\n\nFor example 2, by disturbing the cell on the top row and rightmost column, one can cause all of the blocks of sand in the board to fall into the counters at the bottom. Thus, the answer is 1. Here is the puzzle from the second example.\n\n<image>", "solution": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\ndef scc(E):\n    n = len(E)\n    iE = [[] for _ in range(n)]\n    for i, e in enumerate(E):\n        for v in e:\n            iE[v].append(i)\n    T = []\n    done = [0] * n # 0 -> 1 -> 2\n    ct = 0\n    for i0 in range(n):\n        if done[i0]: continue\n        Q = [~i0, i0]\n        while Q:\n            i = Q.pop()\n            if i < 0:\n                if done[~i] == 2: continue\n                done[~i] = 2\n                T.append(~i)\n                ct += 1\n                continue\n            if i >= 0:\n                if done[i]: continue\n                done[i] = 1\n            for j in E[i]:\n                if done[j]: continue\n                Q.append(~j)\n                Q.append(j)\n    \n    done = [0] * n\n    SCC = []\n    ### ID \ufffd\ufffd\ufffdK\ufffdv\ufffd\u0202\u0182\ufffd\n    I = [0] * n\n    ###\n    for i0 in T[::-1]:\n        if done[i0]: continue\n        L = []\n        Q = [~i0, i0]\n        while Q:\n            i = Q.pop()\n            if i < 0:\n                if done[~i] == 2: continue\n                done[~i] = 2\n                L.append(~i)\n                ###\n                I[~i] = len(SCC)\n                ###\n                continue\n            if i >= 0:\n                if done[i]: continue\n                done[i] = 1\n            for j in iE[i]:\n                if done[j]: continue\n                Q.append(~j)\n                Q.append(j)\n        SCC.append(L)\n    # return SCC, I\n    \n    ### \ufffd\ufffd Edge \ufffd\ufffd\ufffdK\ufffdv\ufffd\u0202\u0182\ufffd \ufffdi\ufffd\ufffd\ufffd return \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdj\n    # nE = [set() for _ in range(len(SCC))]\n    # iE = [set() for _ in range(len(SCC))]\n    ciE = [1] * len(SCC)\n    for i, e in enumerate(E):\n        for j in e:\n            if I[i] == I[j]: continue\n            # print(\"i, j, I[i], I[j] =\", i, j, I[i], I[j])\n            # nE[I[i]].add(I[j])\n            # iE[I[j]].add(I[i])\n            ciE[I[j]] = 0\n    # nE = [list(e) for e in nE]\n    # iE = [list(e) for e in iE]\n    return ciE\n    # return SCC, I, nE, iE, ciE\n\nN, M = map(int, input().split())\nZ = [[1 if a == \"#\" else 0 for a in input()] for _ in range(N)]\n\nsu = sum([int(a) for a in input().split()])\n\nI = []\nZZ = [[-1] * M for _ in range(N)]\nfor j in range(M):\n    for i in range(N)[::-1]:\n        if Z[i][j]:\n            ZZ[i][j] = len(I)\n            I.append((i << 20) ^ j)\n        elif i < N - 1:\n            ZZ[i][j] = ZZ[i+1][j]\n\nmmm = (1 << 20) - 1\nE = [[] for _ in range(su)]\nfor k in range(su):\n    ij = I[k]\n    i = ij >> 20\n    j = ij & mmm\n    if i < N - 1 and ZZ[i+1][j] >= 0:\n        E[k].append(ZZ[i+1][j])\n    if i and Z[i-1][j]:\n        E[k].append(ZZ[i-1][j])\n    if j and ZZ[i][j-1] >= 0:\n        E[k].append(ZZ[i][j-1])\n    if j < M - 1 and ZZ[i][j+1] >= 0:\n        E[k].append(ZZ[i][j+1])\n\nciE = scc(E)\n\nprint(sum(ciE))\n\n\n\n", "difficulty": 12, "public_tests": {"input": ["5 7\n#....#.\n.#.#...\n#....#.\n#....##\n#.#....\n4 1 1 1 0 3 1\n", "3 3\n#.#\n#..\n##.\n3 1 1\n"], "output": ["\n3\n", "\n1\n"]}, "private_tests": {"input": ["3 6\n..#..#\n......\n#####.\n1 1 2 1 1 1\n", "3 10\n#..###..##\n...#..###.\n.###..##..\n1 1 1 3 1 1 2 2 2 1\n", "1 1\n.\n0\n", "1 1\n#\n1\n"], "output": ["2\n", "1\n", "0\n", "1\n"]}, "generated_tests": {"input": ["3 3\n#.#\n#..\n##.\n2 1 1\n", "3 3\n#.#\n.#.\n##.\n2 2 1\n", "3 3\n#.#\n#..\n##.\n3 1 0\n", "3 3\n#.#\n#..\n.##\n2 1 2\n"], "output": ["1\n", "2\n", "1\n", "2\n"]}, "short_description": "1. One-sentence summary:  \n   Given a directed graph, the solution identifies all its strongly connected components (SCCs) and counts how many of those components have no incoming edges from any other component.  \n\n2. Core algorithmic approach:  \n   A two\u2010pass depth\u2010first search (DFS) method to compute SCCs (akin to Kosaraju\u2019s algorithm), followed by a condensation\u2010graph in\u2010degree check to count SCCs with zero incoming edges.  \n\n3. Reusable components:  \n   - Iterative DFS with explicit \u201center/exit\u201d markers (using bit\u2010negated node IDs) to produce a postorder list for SCC discovery.  \n   - Construction of the transpose (reverse) graph for the second pass of Kosaraju\u2019s algorithm.  \n   - SCC condensation in\u2010degree accumulator: initialize each component as \u201cno incoming,\u201d then iterate over original edges and mark any component with incoming edges."}
{"name": "104_C. Cthulhu", "description": "...Once upon a time a man came to the sea. The sea was stormy and dark. The man started to call for the little mermaid to appear but alas, he only woke up Cthulhu...\n\nWhereas on the other end of the world Pentagon is actively collecting information trying to predict the monster's behavior and preparing the secret super weapon. Due to high seismic activity and poor weather conditions the satellites haven't yet been able to make clear shots of the monster. The analysis of the first shot resulted in an undirected graph with n vertices and m edges. Now the world's best minds are about to determine whether this graph can be regarded as Cthulhu or not.\n\nTo add simplicity, let's suppose that Cthulhu looks from the space like some spherical body with tentacles attached to it. Formally, we shall regard as Cthulhu such an undirected graph that can be represented as a set of three or more rooted trees, whose roots are connected by a simple cycle.\n\nIt is guaranteed that the graph contains no multiple edges and self-loops.\n\n<image>\n\nInput\n\nThe first line contains two integers \u2014 the number of vertices n and the number of edges m of the graph (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 <image>).\n\nEach of the following m lines contains a pair of integers x and y, that show that an edge exists between vertices x and y (1 \u2264 x, y \u2264 n, x \u2260 y). For each pair of vertices there will be at most one edge between them, no edge connects a vertex to itself.\n\nOutput\n\nPrint \"NO\", if the graph is not Cthulhu and \"FHTAGN!\" if it is.\n\nExamples\n\nInput\n\n6 6\n6 3\n6 4\n5 1\n2 5\n1 4\n5 4\n\n\nOutput\n\nFHTAGN!\n\nInput\n\n6 5\n5 6\n4 6\n3 1\n5 1\n1 2\n\n\nOutput\n\nNO\n\nNote\n\nLet us denote as a simple cycle a set of v vertices that can be numbered so that the edges will only exist between vertices number 1 and 2, 2 and 3, ..., v - 1 and v, v and 1.\n\nA tree is a connected undirected graph consisting of n vertices and n - 1 edges (n > 0).\n\nA rooted tree is a tree where one vertex is selected to be the root.", "solution": "n, m = [int(i) for i in input().split()]\nadj = [[] for i in range(n+1)]\nseen = [False for i in range(n+1)]\npai = [0 for i in range(n+1)]\nciclos = 0\n\ndef dfs (u):\n    seen[u] = True\n    global ciclos\n    for v in adj[u]:\n        if not seen[v]:\n            pai[v] = u\n            dfs(v)\n        elif v != pai[u]:\n            ciclos += 1\n\nfor i in range(m):\n    x, y = [int(i) for i in input().split()]\n    adj[x].append(y)\n    adj[y].append(x)\n\ndfs(1)\nconexo = True\n\nfor i in range(1, n+1, 1):\n    if not seen[i]:\n        conexo = False\n\nif conexo and ciclos/2 == 1:\n    print('FHTAGN!')\nelse:\n    print('NO')\nexit(0)\n", "difficulty": 9, "public_tests": {"input": ["6 6\n6 3\n6 4\n5 1\n2 5\n1 4\n5 4\n", "6 5\n5 6\n4 6\n3 1\n5 1\n1 2\n"], "output": ["FHTAGN!\n", "NO\n"]}, "private_tests": {"input": ["5 5\n2 3\n2 4\n5 4\n4 1\n1 2\n", "2 0\n", "12 10\n1 11\n3 6\n5 7\n4 7\n6 8\n11 7\n3 12\n11 12\n7 9\n12 2\n", "10 10\n1 10\n5 9\n6 2\n8 9\n9 1\n5 4\n2 8\n1 3\n6 3\n4 1\n", "4 3\n1 2\n2 3\n3 1\n", "30 30\n17 6\n16 29\n16 13\n16 20\n29 26\n17 5\n27 28\n24 16\n7 18\n24 10\n1 27\n12 17\n27 30\n6 1\n3 30\n5 19\n18 13\n16 2\n30 1\n5 8\n14 16\n26 18\n7 19\n5 6\n23 14\n6 8\n23 8\n18 8\n18 3\n5 21\n", "3 2\n1 2\n2 3\n", "6 5\n1 2\n2 3\n3 1\n1 4\n1 5\n", "1 0\n", "3 0\n", "6 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n", "10 10\n4 10\n8 5\n2 8\n4 9\n9 3\n2 7\n10 6\n10 2\n9 8\n1 8\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "2 1\n1 2\n", "12 12\n4 12\n4 7\n4 9\n7 2\n5 12\n2 1\n5 9\n8 6\n10 12\n2 5\n10 9\n12 3\n", "3 1\n1 3\n", "100 1\n11 23\n", "12 15\n3 2\n11 12\n1 9\n2 1\n1 8\n9 6\n11 5\n9 5\n9 10\n11 3\n7 11\n5 6\n11 10\n4 6\n4 2\n", "100 0\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n8 9\n20 8\n6 2\n2 15\n7 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "5 4\n1 5\n1 3\n1 4\n3 2\n", "10 10\n5 7\n8 1\n10 3\n6 4\n10 6\n5 3\n5 6\n2 6\n4 3\n2 10\n", "3 3\n1 2\n2 3\n3 1\n", "4 4\n1 2\n3 4\n4 1\n2 4\n", "4 4\n1 2\n4 3\n2 3\n3 1\n"], "output": ["FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "FHTAGN!\n", "FHTAGN!\n", "FHTAGN!\n"]}, "generated_tests": {"input": ["12 10\n1 11\n3 6\n8 7\n4 7\n6 8\n11 7\n3 12\n11 12\n7 9\n12 2\n", "10 10\n1 10\n5 9\n6 2\n8 9\n9 1\n5 4\n2 8\n1 3\n7 3\n4 1\n", "4 3\n1 3\n2 3\n3 1\n", "6 5\n1 2\n2 1\n3 1\n1 4\n1 5\n", "6 6\n1 2\n4 3\n3 1\n4 5\n5 6\n6 4\n", "10 10\n5 10\n8 5\n2 8\n4 9\n9 3\n2 7\n10 6\n10 2\n9 8\n1 8\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "12 12\n4 12\n6 7\n4 9\n7 2\n5 12\n2 1\n5 9\n8 6\n10 12\n2 5\n10 9\n12 3\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n8 9\n20 8\n6 2\n2 3\n7 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "10 10\n5 7\n8 1\n10 3\n6 4\n10 6\n5 3\n5 6\n2 6\n4 3\n2 6\n", "12 10\n1 11\n3 6\n8 7\n7 7\n6 8\n11 7\n3 12\n11 12\n7 9\n12 2\n", "10 10\n1 10\n5 9\n6 2\n8 9\n9 1\n5 4\n2 8\n1 3\n7 3\n8 1\n", "6 6\n1 2\n6 3\n3 1\n4 5\n5 6\n6 4\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n8 9\n20 8\n6 2\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "12 10\n2 11\n3 6\n8 7\n7 7\n6 8\n11 7\n3 12\n11 12\n7 9\n12 2\n", "10 10\n1 10\n5 9\n6 1\n8 9\n9 1\n5 4\n2 8\n1 3\n7 3\n8 1\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 17\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n8 9\n20 8\n6 1\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 17\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 10\n82 55\n70 46\n66 32\n77 58\n11 46\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n14 9\n20 8\n6 1\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n69 80\n42 3\n86 17\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 10\n82 55\n70 46\n66 32\n77 58\n11 46\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n14 9\n20 8\n6 1\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 16\n", "100 66\n41 14\n26 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n69 80\n42 3\n86 17\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 10\n82 55\n70 46\n66 32\n77 58\n11 46\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n14 9\n20 5\n6 1\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 16\n", "100 66\n41 14\n26 13\n41 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n69 80\n42 3\n86 17\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 10\n82 55\n70 46\n66 32\n77 58\n11 46\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n14 9\n16 5\n6 1\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 16\n", "100 66\n41 14\n26 13\n41 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 74\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n69 80\n42 3\n86 17\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 10\n82 55\n70 46\n66 32\n77 58\n11 46\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n1 12\n19 10\n19 15\n4 10\n4 8\n14 9\n16 5\n6 1\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 16\n", "100 66\n41 14\n26 13\n41 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 74\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n69 80\n42 3\n86 17\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 10\n82 55\n70 46\n66 32\n77 58\n11 33\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n1 12\n19 10\n19 15\n8 10\n4 8\n14 9\n16 5\n6 1\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 16\n", "100 66\n41 14\n26 13\n41 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 74\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n69 80\n42 3\n86 17\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 8\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 10\n82 55\n70 46\n66 32\n77 58\n11 33\n", "12 10\n1 11\n3 6\n5 7\n4 7\n6 8\n11 7\n3 12\n11 12\n11 9\n12 2\n", "30 30\n17 6\n16 29\n16 13\n16 20\n29 26\n17 5\n27 28\n24 16\n7 18\n24 10\n1 27\n12 17\n27 30\n6 1\n3 30\n5 19\n18 13\n16 2\n30 1\n5 8\n14 16\n26 18\n7 19\n5 6\n23 14\n6 8\n23 8\n18 8\n18 3\n5 13\n", "6 5\n1 2\n2 5\n3 1\n1 4\n1 5\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 43\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 31\n77 58\n11 46\n", "100 1\n11 43\n", "12 15\n3 2\n11 12\n1 9\n2 1\n1 8\n9 6\n11 5\n9 5\n9 10\n11 3\n6 11\n5 6\n11 10\n4 6\n4 2\n", "001 0\n", "20 20\n9 10\n4 11\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n8 9\n20 8\n6 2\n2 15\n7 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "10 10\n5 7\n3 1\n10 3\n6 4\n10 6\n5 3\n5 6\n2 6\n4 3\n2 10\n", "6 6\n6 3\n6 4\n5 1\n1 5\n1 4\n5 4\n", "10 10\n1 10\n5 9\n6 4\n8 9\n9 1\n5 4\n2 8\n1 3\n7 3\n4 1\n", "4 3\n1 3\n2 3\n3 2\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n54 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n80 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "20 20\n9 10\n4 19\n9 7\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n8 9\n20 8\n6 2\n2 3\n7 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "10 10\n5 7\n8 1\n10 3\n6 4\n10 2\n5 3\n5 6\n2 6\n4 3\n2 6\n", "10 10\n2 10\n5 9\n6 2\n8 9\n9 1\n5 4\n2 8\n1 3\n7 3\n8 1\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 17\n48 87\n25 43\n65 80\n42 3\n86 35\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n6 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 9\n82 55\n70 46\n66 32\n77 58\n11 46\n", "20 20\n9 10\n4 19\n9 20\n12 20\n1 15\n4 12\n19 10\n19 15\n4 10\n4 8\n8 9\n20 8\n6 2\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "12 10\n2 11\n3 6\n8 7\n7 7\n6 8\n11 7\n6 12\n11 12\n7 9\n12 2\n", "34 20\n9 10\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n8 9\n20 8\n6 1\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 10\n", "100 66\n41 14\n19 13\n70 43\n79 62\n9 62\n71 40\n53 86\n80 4\n34 33\n72 68\n40 96\n84 59\n36 77\n55 50\n40 3\n79 81\n3 83\n33 47\n22 98\n33 90\n56 49\n69 28\n73 30\n65 22\n98 20\n9 52\n69 20\n32 70\n51 80\n63 12\n21 48\n35 34\n48 87\n25 43\n65 80\n42 3\n86 17\n95 98\n43 59\n51 46\n66 37\n88 34\n32 47\n24 42\n21 44\n92 59\n81 6\n100 82\n85 6\n58 25\n66 6\n14 32\n59 85\n3 98\n44 4\n85 51\n69 41\n80 70\n81 24\n75 71\n93 10\n82 55\n70 46\n66 32\n77 58\n11 46\n", "20 20\n9 7\n4 19\n9 20\n12 20\n1 15\n2 12\n19 10\n19 15\n4 10\n4 8\n14 9\n20 8\n6 1\n2 3\n8 19\n20 4\n3 16\n1 20\n9 1\n20 10\n"], "output": ["NO\n", "FHTAGN!\n", "NO\n", "NO\n", "FHTAGN!\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "FHTAGN!\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "FHTAGN!\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "short_description": "1. One-sentence summary  \nDetermine whether an undirected graph is connected and contains exactly one simple cycle.\n\n2. Core algorithmic approach  \nDepth-first search on an adjacency list to both mark connectivity and detect back-edges (cycles) in an undirected graph.\n\n3. Reusable components  \n- DFS traversal with a \u201cparent\u201d array to distinguish tree edges from back edges for cycle detection.  \n- Adjacency-list representation of a graph with a boolean visited array for connectivity checks.  \n- Post-DFS connectivity validation by verifying all nodes were reached."}
{"name": "1242_B. 0-1 MST", "description": "Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.\n\nIt is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.\n\nSince Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?\n\nInput\n\nThe first line of the input contains two integers n and m (1 \u2264 n \u2264 10^5, 0 \u2264 m \u2264 min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. \n\nThe i-th of the next m lines contains two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n, a_i \u2260 b_i), the endpoints of the i-th edge of weight 1.\n\nIt is guaranteed that no edge appears twice in the input.\n\nOutput\n\nOutput a single integer, the weight of the minimum spanning tree of the graph.\n\nExamples\n\nInput\n\n\n6 11\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n3 0\n\n\nOutput\n\n\n0\n\nNote\n\nThe graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.\n\n<image>\n\nIn the second sample, all edges have weight 0 so any spanning tree has total weight 0.", "solution": "import collections as cc\nimport sys\ninput=sys.stdin.readline\n#sys.setrecursionlimit(10**9)\nI=lambda:list(map(int,input().split()))\nn,m=I()\ng=[set() for i in range(n+1)]\nxx=[0]*(n+1)\nfor i in range(m):\n\tx,y=I()\n\tg[x].add(y)\n\tg[y].add(x)\nparent=[i for i in range(n+1)]\ndef find(x):\n\twhile x!=parent[x]:\n\t\tx=parent[x]\n\treturn x\ndef union(x,y):\n\ta=find(x)\n\tb=find(y)\n\tif a!=b:\n\t\tparent[a]=parent[b]=min(a,b)\nff=cc.defaultdict(int)\nused=cc.defaultdict(int)\nfor i in range(1,n+1):\n\tif find(i)==i:\n\t\t\t\n\t\tfor j in range(1,n+1):\n\t\t\tif j not in g[i]:\n\t\t\t\tg[i]&=g[j]\n\t\tfor j in range(1,n+1):\n\t\t\tif j not in g[i]:\n\t\t\t\tunion(i,j)\n\t\t\t\t\n \nprint(len(set([find(i) for i in range(1,n+1)]))-1)", "difficulty": 8, "public_tests": {"input": ["6 11\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n", "3 0\n"], "output": ["2\n", "0\n"]}, "private_tests": {"input": ["1 0\n", "2 0\n", "2 1\n1 2\n", "3 1\n2 3\n", "10 10\n1 5\n1 8\n1 9\n5 8\n8 9\n4 7\n2 3\n3 10\n2 6\n2 10\n", "3 3\n1 2\n3 1\n2 3\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n2 6\n3 5\n4 6\n5 6\n", "100000 0\n", "7 5\n7 5\n1 5\n3 2\n2 6\n3 6\n", "4 2\n3 2\n1 4\n", "5 10\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n2 4\n3 5\n4 1\n5 2\n", "15 10\n2 3\n5 4\n5 6\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n14 15\n"], "output": ["0\n", "0\n", "1\n", "0\n", "0\n", "2\n", "0\n", "0\n", "0\n", "0\n", "4\n", "0\n"]}, "generated_tests": {"input": ["4 2\n3 4\n1 4\n", "6 11\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n4 5\n3 6\n", "10 10\n1 5\n1 8\n1 9\n5 8\n8 9\n4 7\n2 3\n3 10\n2 9\n2 10\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n2 6\n3 5\n1 6\n5 6\n", "4 2\n3 3\n1 4\n", "15 10\n2 3\n5 4\n5 4\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n14 15\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n2 6\n3 4\n1 6\n5 6\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n2 6\n6 4\n1 6\n5 6\n", "3 1\n2 1\n", "7 5\n7 5\n2 5\n3 2\n2 6\n3 6\n", "4 2\n3 1\n1 4\n", "10 10\n1 5\n1 9\n1 9\n5 8\n8 9\n4 7\n2 3\n3 10\n2 9\n2 10\n", "15 10\n2 3\n5 4\n5 4\n5 7\n3 7\n3 10\n11 12\n12 13\n13 14\n14 15\n", "7 5\n7 5\n3 5\n3 2\n2 6\n3 6\n", "4 1\n2 3\n", "10 10\n1 5\n1 8\n1 6\n5 8\n8 9\n4 7\n2 3\n3 10\n2 6\n2 10\n", "13 5\n7 5\n1 5\n3 2\n2 6\n3 6\n", "15 10\n4 3\n5 4\n5 6\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n14 15\n", "5 0\n", "10 10\n1 5\n1 8\n1 9\n5 8\n8 9\n4 7\n2 3\n6 10\n2 9\n2 10\n", "4 2\n3 3\n2 4\n", "15 10\n2 3\n5 8\n5 4\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n14 15\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n2 6\n6 4\n1 5\n5 6\n", "4 2\n3 1\n2 4\n", "25 10\n2 3\n5 4\n5 4\n5 7\n3 7\n3 10\n11 12\n12 13\n13 14\n14 15\n", "7 5\n7 5\n3 4\n3 2\n2 6\n3 6\n", "8 1\n2 3\n", "10 10\n1 5\n1 8\n1 6\n5 8\n8 9\n4 10\n2 3\n3 10\n2 6\n2 10\n", "15 10\n4 3\n6 4\n5 6\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n14 15\n", "10 0\n", "10 10\n1 5\n1 8\n1 9\n5 8\n9 9\n4 7\n2 3\n6 10\n2 9\n2 10\n", "8 2\n3 3\n2 4\n", "4 2\n3 2\n2 4\n", "25 10\n2 3\n5 4\n5 4\n5 7\n3 7\n3 10\n19 12\n12 13\n13 14\n14 15\n", "7 5\n7 5\n3 4\n3 2\n2 7\n3 6\n", "10 10\n1 5\n1 8\n1 6\n5 8\n8 9\n4 10\n2 3\n3 3\n2 6\n2 10\n", "15 10\n4 3\n3 4\n5 6\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n14 15\n", "7 2\n3 2\n1 4\n", "7 5\n7 5\n2 4\n3 2\n2 7\n3 6\n", "7 5\n7 5\n2 4\n3 2\n2 7\n6 6\n", "7 5\n6 5\n2 4\n3 2\n2 7\n6 6\n", "7 5\n6 5\n2 4\n6 2\n2 7\n6 6\n", "7 5\n6 5\n2 4\n6 2\n2 5\n6 6\n", "4 0\n", "10 10\n1 5\n1 8\n1 9\n5 8\n8 9\n4 7\n2 3\n3 6\n2 6\n2 10\n", "7 2\n3 2\n1 7\n", "15 10\n2 3\n5 4\n5 6\n5 7\n3 8\n3 10\n11 14\n12 13\n13 14\n14 15\n", "10 10\n1 3\n1 8\n1 9\n5 8\n8 9\n4 7\n2 3\n3 10\n2 9\n2 10\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n2 6\n6 4\n1 6\n5 3\n", "20 10\n2 3\n5 4\n5 4\n5 7\n3 7\n3 10\n11 12\n12 13\n13 14\n14 15\n", "10 10\n1 5\n1 8\n1 6\n5 8\n8 9\n4 7\n2 3\n3 10\n4 6\n2 10\n", "25 5\n7 5\n1 5\n3 2\n2 6\n3 6\n", "10 10\n1 5\n1 8\n1 9\n5 8\n8 9\n4 7\n1 3\n6 10\n2 9\n2 10\n"], "output": ["0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:\nGiven an undirected graph, the solution computes how many edges must be added between non\u2010adjacent vertices so that the \u201ccomplement\u201d graph becomes connected.\n\n2. Core algorithmic approach:\nIt performs a union-find over the complement of the input graph by, for each current component representative, iterating through all other vertices and unioning any pair that is not an original edge\u2014in effect discovering connected components in the complement graph via a brute-force scan plus on\u2010the\u2010fly set intersections to prune future checks.\n\n3. Reusable components:\n- Union\u2010Find data structure (find and union functions) for maintaining and merging disjoint sets.\n- Adjacency\u2010set representation of the graph to allow O(1) non\u2010edge checks.\n- Lazy set\u2010intersection pruning: updating a candidate set of vertices by intersecting with other adjacency sets to reduce redundant checks in subsequent iterations."}
{"name": "653_E. Bear and Forgotten Tree 2", "description": "A tree is a connected undirected graph consisting of n vertices and n - 1 edges. Vertices are numbered 1 through n.\n\nLimak is a little polar bear. He once had a tree with n vertices but he lost it. He still remembers something about the lost tree though.\n\nYou are given m pairs of vertices (a1, b1), (a2, b2), ..., (am, bm). Limak remembers that for each i there was no edge between ai and bi. He also remembers that vertex 1 was incident to exactly k edges (its degree was equal to k).\n\nIs it possible that Limak remembers everything correctly? Check whether there exists a tree satisfying the given conditions.\n\nInput\n\nThe first line of the input contains three integers n, m and k (<image>) \u2014 the number of vertices in Limak's tree, the number of forbidden pairs of vertices, and the degree of vertex 1, respectively.\n\nThe i-th of next m lines contains two distinct integers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi) \u2014 the i-th pair that is forbidden. It's guaranteed that each pair of vertices will appear at most once in the input.\n\nOutput\n\nPrint \"possible\" (without quotes) if there exists at least one tree satisfying the given conditions. Otherwise, print \"impossible\" (without quotes).\n\nExamples\n\nInput\n\n5 4 2\n1 2\n2 3\n4 2\n4 1\n\n\nOutput\n\npossible\n\n\nInput\n\n6 5 3\n1 2\n1 3\n1 4\n1 5\n1 6\n\n\nOutput\n\nimpossible\n\nNote\n\nIn the first sample, there are n = 5 vertices. The degree of vertex 1 should be k = 2. All conditions are satisfied for a tree with edges 1 - 5, 5 - 2, 1 - 3 and 3 - 4.\n\nIn the second sample, Limak remembers that none of the following edges existed: 1 - 2, 1 - 3, 1 - 4, 1 - 5 and 1 - 6. Hence, vertex 1 couldn't be connected to any other vertex and it implies that there is no suitable tree.", "solution": "import sys\nimport math\nfrom heapq import *;\ninput = sys.stdin.readline\nfrom functools import cmp_to_key;\n\ndef pi():\n    return(int(input()))\ndef pl():\n    return(int(input(), 16))\ndef ti():\n    return(list(map(int,input().split())))\ndef ts():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\nmod = 1000000007;\nf = [];\ndef fact(n,m):\n    global f;\n    f = [1 for i in range(n+1)];\n    f[0] = 1;\n    for i in range(1,n+1):\n        f[i] = (f[i-1]*i)%m;\n\ndef fast_mod_exp(a,b,m):\n    res = 1;\n    while b > 0:\n        if b & 1:\n            res = (res*a)%m;\n        a = (a*a)%m;\n        b = b >> 1;\n    return res;\n\ndef inverseMod(n,m):\n    return fast_mod_exp(n,m-2,m);\n\ndef ncr(n,r,m):\n    if n < 0 or r < 0 or r > n: return 0;\n    if r == 0: return 1;\n    return ((f[n]*inverseMod(f[n-r],m))%m*inverseMod(f[r],m))%m;\n\ndef main():\n    E();\n\nmp = [{''} for i in range(300005)];\ndef canConnect(a,b):\n    return b not in mp[a];\n\nremaining = {''};\ndef dfs(a):\n    temp = [];\n    for b in remaining:\n        if canConnect(a,b): temp.append(b);\n    for b in temp:\n        remaining.remove(b);\n    for b in temp:\n        dfs(b);\n\ndef E():\n    [n,m,k] = ti();\n    mxDegreePossible = n-1;\n    for i in range(m):\n        [a,b] = ti();\n        mp[a].add(b);\n        mp[b].add(a);\n        if a == 1 or b == 1:\n            mxDegreePossible -= 1;\n    \n    if mxDegreePossible < k:\n        print(\"impossible\");\n        return;\n\n    for i in range(2,n+1):\n        remaining.add(i);\n    \n    components = 0;\n    for i in range(2,n+1):\n        if i in remaining and canConnect(1,i):\n            remaining.remove(i);\n            dfs(i);\n            components += 1;\n    remaining.remove('');\n    if components > k or len(remaining) > 0:\n        print('impossible');\n        return;\n    print('possible');\n\n    \n    \n    \nmain();", "difficulty": 11, "public_tests": {"input": ["5 4 2\n1 2\n2 3\n4 2\n4 1\n", "6 5 3\n1 2\n1 3\n1 4\n1 5\n1 6\n"], "output": ["possible\n", "impossible\n"]}, "private_tests": {"input": ["5 4 3\n5 1\n5 3\n3 1\n4 2\n", "4 2 2\n1 2\n1 3\n", "5 6 2\n3 5\n2 1\n2 5\n1 5\n1 3\n2 4\n", "5 6 1\n3 1\n4 5\n3 5\n4 3\n1 2\n2 4\n", "5 4 2\n2 1\n4 1\n4 2\n3 5\n", "5 3 3\n5 4\n2 4\n2 1\n", "2 1 1\n2 1\n", "3 1 2\n1 3\n", "4 5 1\n2 3\n2 4\n4 3\n3 1\n1 2\n", "5 5 2\n2 1\n3 1\n5 3\n3 2\n3 4\n", "4 3 2\n2 3\n2 4\n3 4\n", "5 4 4\n4 5\n4 2\n1 5\n5 3\n", "5 6 3\n3 1\n4 3\n2 5\n4 5\n2 4\n3 2\n", "5 2 4\n4 3\n1 3\n", "300000 0 299999\n", "4 2 3\n2 1\n2 4\n", "5 8 1\n1 4\n4 3\n1 5\n3 5\n2 4\n1 2\n5 2\n4 5\n", "2 0 1\n", "5 3 2\n1 2\n5 1\n1 4\n", "7 11 1\n1 2\n1 3\n1 4\n1 5\n1 7\n6 2\n6 3\n6 4\n6 5\n6 7\n2 3\n", "300000 0 1\n", "5 3 1\n2 1\n4 3\n3 1\n", "4 2 2\n2 1\n1 4\n"], "output": ["impossible\n", "impossible\n", "impossible\n", "impossible\n", "possible\n", "possible\n", "impossible\n", "impossible\n", "impossible\n", "impossible\n", "impossible\n", "impossible\n", "possible\n", "impossible\n", "possible\n", "impossible\n", "impossible\n", "possible\n", "impossible\n", "impossible\n", "possible\n", "possible\n", "impossible\n"]}, "generated_tests": {"input": ["4 2 1\n1 2\n1 3\n", "5 8 1\n1 4\n4 3\n1 5\n1 5\n2 4\n1 2\n5 2\n4 5\n", "5 3 2\n5 4\n2 4\n2 1\n", "4 1 1\n2 1\n", "5 5 2\n2 1\n3 1\n5 3\n4 2\n3 4\n", "8 2 4\n4 3\n1 3\n", "300000 0 109663\n", "84947 0 1\n", "5 3 1\n2 1\n4 3\n2 1\n", "5 4 0\n1 2\n2 3\n4 2\n4 1\n", "8 2 4\n4 3\n1 4\n", "300000 0 162130\n", "84947 0 2\n", "5 3 2\n2 1\n4 3\n2 1\n", "8 2 2\n4 3\n1 4\n", "165837 0 2\n", "165837 0 3\n", "37567 0 2\n", "44383 0 2\n", "4 2 2\n1 2\n2 3\n", "3 1 1\n2 1\n", "5 6 3\n3 1\n4 3\n2 5\n4 5\n2 4\n1 2\n", "4 0 1\n", "5 3 4\n1 2\n5 1\n1 4\n", "7 11 1\n1 2\n1 3\n1 4\n1 5\n1 1\n6 2\n6 3\n6 4\n6 5\n6 7\n2 3\n", "5 3 2\n5 4\n2 4\n3 1\n", "4 1 0\n2 1\n", "5 5 2\n2 1\n5 1\n5 3\n4 2\n3 4\n", "8 2 4\n4 2\n1 3\n", "140309 0 1\n", "81732 0 2\n", "8 2 4\n7 3\n1 4\n", "165837 0 5\n", "40829 0 2\n", "44383 0 0\n", "4 2 2\n1 4\n2 3\n"], "output": ["possible\n", "impossible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "impossible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "impossible\n", "possible\n", "impossible\n", "impossible\n", "possible\n", "impossible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "possible\n", "impossible\n", "possible\n"]}, "short_description": "1. One-sentence summary  \nDetermine whether a given undirected graph can satisfy a requirement on how many components are reachable from a special vertex (vertex 1) in the complement of the original graph, subject to a minimum degree constraint on that special vertex.\n\n2. Core algorithmic approach  \nTraversal of the complement graph via DFS (using a set of \u201cremaining\u201d unvisited nodes and adjacency\u2010set lookups to efficiently jump to non\u2010neighbors), combined with a simple greedy check on the degree of the special node.\n\n3. Reusable components  \n- Complement\u2010graph DFS pattern: maintain a set `remaining` of unvisited nodes, and for each visited node `u` collect all `v` in `remaining` not in `adj[u]`, remove them in bulk, then recurse.  \n- canConnect(u,v): constant\u2010time check for non\u2010adjacency via adjacency sets.  \n- fast_mod_exp + inverseMod + precomputed factorial array for fast nCr modulo operations."}
{"name": "1521_D. Nastia Plays with a Tree", "description": "Nastia has an unweighted tree with n vertices and wants to play with it!\n\nThe girl will perform the following operation with her tree, as long as she needs:\n\n  1. Remove any existing edge. \n  2. Add an edge between any pair of vertices. \n\n\n\nWhat is the minimum number of operations Nastia needs to get a bamboo from a tree? A bamboo is a tree in which no node has a degree greater than 2.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the number of vertices in the tree.\n\nNext n - 1 lines of each test cases describe the edges of the tree in form a_i, b_i (1 \u2264 a_i, b_i \u2264 n, a_i \u2260 b_i).\n\nIt's guaranteed the given graph is a tree and the sum of n in one test doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case in the first line print a single integer k \u2014 the minimum number of operations required to obtain a bamboo from the initial tree.\n\nIn the next k lines print 4 integers x_1, y_1, x_2, y_2 (1 \u2264 x_1, y_1, x_2, y_{2} \u2264 n, x_1 \u2260 y_1, x_2 \u2260 y_2) \u2014 this way you remove the edge (x_1, y_1) and add an undirected edge (x_2, y_2).\n\nNote that the edge (x_1, y_1) must be present in the graph at the moment of removing.\n\nExample\n\nInput\n\n\n2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4\n1 2\n1 3\n3 4\n\n\nOutput\n\n\n2\n2 5 6 7\n3 6 4 5\n0\n\nNote\n\nNote the graph can be unconnected after a certain operation.\n\nConsider the first test case of the example: \n\n<image> The red edges are removed, and the green ones are added.", "solution": "def dfs(x, e, v, g):\n  v[x] = True\n  c = 0\n  for y in e[x]:\n    if not y in v:\n      if dfs(y, e, v, g):\n        c += 1\n        if c > 2:\n          g.append((x, y))\n      else:\n        g.append((x, y))\n\n  if c < 2:\n    return True\n\n  if x != 1:\n    return False\n\ndef leaf(x, e):\n  p = 0\n  while True:\n    u = 0\n    for y in e[x]:\n      if y != p:\n        u = y\n        break\n    if u == 0: break\n    p = x\n    x = u\n  return x\n\ndef solve(n, e):\n  g = []\n  dfs(1, e, {}, g)\n\n  for x, y in g:\n    e[x].remove(y)\n    e[y].remove(x)\n\n  z = []\n  l = leaf(1, e)\n  for p, y, in g:\n    r = leaf(y, e)\n    z.append((p, y, l, r))\n    l = leaf(r, e)\n\n  print(len(z))\n  if len(z) > 0:\n    print('\\n'.join(map(lambda x: ' '.join(map(str, x)), z)))\n\n\ndef main():\n  t = int(input())\n  for i in range(t):\n    n = int(input())\n    e = {}\n    for i in range(n - 1):\n      a, b = map(int, input().split())\n      if not a in e: e[a] = []\n      if not b in e: e[b] = []\n      e[a].append(b)\n      e[b].append(a)\n    solve(n, e)\n\n\nimport threading\nimport sys\n\nsys.setrecursionlimit(10 ** 5 + 1)\nthreading.stack_size(262000)\nmain = threading.Thread(target=main)\nmain.start()\nmain.join()\n", "difficulty": 10, "public_tests": {"input": ["2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4\n1 2\n1 3\n3 4\n"], "output": ["\n2\n2 5 6 7\n3 6 4 5\n0"]}, "private_tests": {"input": ["2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4\n1 2\n1 3\n3 4\n"], "output": ["2\n1 2 1 4\n1 3 5 6\n0\n"]}, "generated_tests": {"input": ["2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4\n1 2\n1 4\n3 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4\n1 2\n2 3\n3 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4\n1 2\n1 4\n3 2\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n1 3\n3 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n3 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n5 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n0 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n1 3\n3 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n3 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4\n1 2\n2 4\n3 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 3\n5 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n3 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 2\n5 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n3 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 3\n0 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 0\n3 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n6 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 0\n0 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n10 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n3 0\n0 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 2\n5 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n3 0\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 2\n10 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 3\n2 3\n3 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n5 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 0\n0 2\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n1 3\n5 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 0\n5 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 0\n1 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 2\n8 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n3 2\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n0 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n1 3\n2 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 3\n2 3\n3 0\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 2\n8 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n3 0\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n8 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 2\n3 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n0 5\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n2 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 2\n5 0\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 4\n0 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n0 2\n10 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 3\n2 3\n5 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n0 2\n10 7\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n3 8\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 2\n5 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n16 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 3\n2 3\n3 2\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 1\n8 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n0 2\n12 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 4\n3 8\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 1\n13 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n1 3\n4 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 0\n0 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 0\n2 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 3\n8 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 3\n0 5\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 4\n3 8\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 1\n13 10\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 4\n0 8\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 3\n5 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n3 3\n0 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n10 2\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 0\n5 7\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 2\n8 2\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 0\n8 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n1 3\n16 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 1\n2 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 4\n3 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n10 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 1\n2 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 4\n1 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 4\n2 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 3\n3 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n0 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 3\n2 3\n1 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n5 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 1\n5 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n3 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 2\n9 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n4 4\n0 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n0 4\n10 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 1\n3 8\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 3\n16 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n0 0\n2 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 1\n13 10\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n1 3\n18 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 7\n2 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 1\n1 8\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n3 3\n16 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 1\n1 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n3 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n4 0\n0 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 3\n0 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 2\n8 9\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n3 -1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 3\n9 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n0 2\n5 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 2\n5 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 2\n2 3\n4 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n0 0\n0 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 0\n2 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 3\n8 8\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n0 0\n5 7\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 4\n4 3\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 1\n0 1\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n8 4\n0 4\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n0 0\n2 2\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n2 7\n2 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n1 5\n9 6\n", "2\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2\n1 2\n8 4\n-1 4\n"], "output": ["2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n", "2\n1 2 1 4\n1 3 5 6\n0\n"]}, "short_description": "1. One-sentence summary  \nGiven a tree, the code identifies and removes \u201cextra\u201d branches at nodes with degree > 2 and then reconnects the resulting components by pairing leaves, effectively transforming the tree into a \u201cbinary\u201d structure while preserving connectivity.\n\n2. Core algorithmic approach  \n\u2022 Graph traversal via depth-first search (DFS) to detect and collect surplus edges at nodes whose child-count exceeds two.  \n\u2022 Subsequent leaf discovery by walking down the tree from a given start until no unvisited neighbor remains (essentially a O(depth) scan).  \n\u2022 Greedy reconnection of the detached subtrees by matching successive leaves.\n\n3. Reusable components  \n\u2022 DFS with a return flag and side-effect list: a pattern that both explores a tree and collects edges when a local condition (child count limit) is violated.  \n\u2022 Leaf-finding routine that, given a start node and its parent, walks to any terminal node (leaf) in O(height).  \n\u2022 Edge-removal and batch reconnection template: remove a set of edges from an adjacency list and then stitch components back together by pairing leaves."}
{"name": "1169_B. Pairs", "description": "Toad Ivan has m pairs of integers, each integer is between 1 and n, inclusive. The pairs are (a_1, b_1), (a_2, b_2), \u2026, (a_m, b_m). \n\nHe asks you to check if there exist two integers x and y (1 \u2264 x < y \u2264 n) such that in each given pair at least one integer is equal to x or y.\n\nInput\n\nThe first line contains two space-separated integers n and m (2 \u2264 n \u2264 300 000, 1 \u2264 m \u2264 300 000) \u2014 the upper bound on the values of integers in the pairs, and the number of given pairs.\n\nThe next m lines contain two integers each, the i-th of them contains two space-separated integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n, a_i \u2260 b_i) \u2014 the integers in the i-th pair.\n\nOutput\n\nOutput \"YES\" if there exist two integers x and y (1 \u2264 x < y \u2264 n) such that in each given pair at least one integer is equal to x or y. Otherwise, print \"NO\". You can print each letter in any case (upper or lower).\n\nExamples\n\nInput\n\n\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\nYES\n\n\nInput\n\n\n300000 5\n1 2\n1 2\n1 2\n1 2\n1 2\n\n\nOutput\n\n\nYES\n\nNote\n\nIn the first example, you can't choose any x, y because for each such pair you can find a given pair where both numbers are different from chosen integers.\n\nIn the second example, you can choose x=2 and y=4.\n\nIn the third example, you can choose x=1 and y=2.", "solution": "bound, m = [int(x) for x in input().split()]\n\nif m == 1:\n    print(\"YES\")\n    exit(0)\n\npairs_uniq = set()\nfor _ in range(m):\n    x = [int(x) for x in input().split()]\n    x.sort()\n    pairs_uniq.add((x[0], x[1]))\n\nif len(pairs_uniq) == 1:\n    print(\"YES\")\n    exit(0)\n\npairs = [x for x in pairs_uniq]\n\n# Choose the first one as our x\nfor x in pairs[0]:\n    no_x_pairs = [n for n in pairs if n[0] != x and n[1] != x]\n\n    x_pairs_count = 0\n    d = {}\n    for (i, j) in pairs:\n        if i != x and j != x:\n            if i not in d:\n                d[i] = 0\n            d[i] += 1\n            if j not in d:\n                d[j] = 0\n            d[j] += 1\n        else:\n            x_pairs_count += 1\n\n    max_ = 0 if len(d.values()) == 0 else sorted(d.values())[-1]\n    if max_ + x_pairs_count == len(pairs):\n        print(\"YES\")\n        exit(0)\n\nprint(\"NO\")\n", "difficulty": 8, "public_tests": {"input": ["300000 5\n1 2\n1 2\n1 2\n1 2\n1 2\n", "5 4\n1 2\n2 3\n3 4\n4 5\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n"], "output": ["YES", "YES", "NO"]}, "private_tests": {"input": ["6 9\n6 2\n4 2\n3 6\n4 6\n2 6\n1 4\n2 6\n4 5\n4 2\n", "5 8\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n", "4 4\n1 2\n2 3\n3 1\n1 4\n", "4 3\n1 2\n2 3\n3 4\n", "4 3\n1 2\n1 3\n1 4\n", "7 5\n6 4\n1 4\n6 4\n2 4\n6 4\n", "4 2\n1 2\n2 3\n", "7 5\n6 1\n1 3\n2 1\n7 3\n7 1\n", "5 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n", "7 5\n7 1\n5 1\n2 7\n1 3\n6 7\n", "4 2\n1 2\n3 4\n", "4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n", "5 8\n3 2\n5 3\n1 4\n4 5\n3 1\n4 2\n3 5\n2 4\n", "5 9\n1 2\n1 3\n1 4\n1 5\n2 4\n2 5\n3 4\n3 5\n4 5\n", "4 3\n1 2\n2 3\n3 1\n", "4 6\n3 4\n4 2\n3 2\n2 1\n1 2\n3 1\n", "4 1\n1 2\n", "100 2\n1 2\n1 2\n", "10 10\n1 3\n1 3\n1 3\n1 3\n1 3\n2 3\n1 5\n2 6\n2 7\n2 9\n", "2 1\n1 2\n", "7 5\n6 5\n1 4\n6 5\n4 5\n7 4\n", "4 4\n1 2\n3 4\n1 4\n2 3\n", "5 7\n1 5\n1 5\n5 2\n5 2\n5 2\n3 2\n1 4\n", "4 8\n1 4\n1 3\n3 2\n4 3\n2 3\n1 3\n2 4\n4 1\n", "9 10\n6 5\n9 8\n7 8\n4 5\n5 8\n3 5\n7 8\n9 8\n8 5\n1 5\n", "7 5\n1 6\n1 3\n7 3\n7 1\n2 1\n"], "output": ["YES", "NO", "YES", "YES", "YES", "YES", "YES", "YES", "NO", "YES", "YES", "YES", "YES", "NO", "YES", "YES", "YES", "YES", "YES", "YES", "YES", "YES", "YES", "YES", "YES", "YES"]}, "generated_tests": {"input": ["4 3\n1 2\n2 4\n3 4\n", "10 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n", "7 5\n6 4\n1 5\n6 4\n2 4\n6 4\n", "5 8\n3 2\n5 3\n1 4\n4 5\n3 1\n4 2\n3 5\n2 3\n", "100 1\n1 2\n1 2\n", "10 10\n1 3\n1 3\n1 3\n1 3\n1 3\n2 3\n1 5\n2 7\n2 7\n2 9\n", "5 7\n1 5\n1 5\n5 2\n5 2\n5 2\n4 2\n1 4\n", "4 8\n1 4\n1 3\n3 2\n4 3\n2 3\n1 3\n1 4\n4 1\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 1\n3 4\n", "7 5\n6 4\n1 5\n6 4\n3 4\n6 4\n", "101 1\n1 2\n1 2\n", "5 7\n1 5\n2 5\n5 2\n5 2\n5 2\n4 2\n1 4\n", "4 8\n1 4\n1 3\n3 2\n4 2\n2 3\n1 3\n1 4\n4 1\n", "7 5\n6 4\n2 5\n6 4\n3 4\n6 4\n", "101 1\n1 2\n0 2\n", "4 8\n1 4\n1 3\n3 2\n4 2\n2 1\n1 3\n1 4\n4 1\n", "7 5\n6 4\n2 5\n6 4\n3 5\n6 4\n", "4 4\n1 2\n2 4\n3 1\n1 4\n", "7 5\n5 4\n1 4\n6 4\n2 4\n6 4\n", "13 5\n6 1\n1 3\n2 1\n7 3\n7 1\n", "5 10\n1 2\n1 3\n1 4\n1 5\n2 2\n2 4\n2 5\n3 4\n3 5\n4 5\n", "7 5\n2 1\n5 1\n2 7\n1 3\n6 7\n", "8 2\n1 2\n3 4\n", "4 5\n1 2\n2 3\n1 4\n2 3\n2 4\n", "5 9\n1 2\n1 3\n1 4\n1 5\n2 4\n2 5\n3 2\n3 5\n4 5\n", "8 1\n1 2\n", "10 10\n1 3\n1 3\n1 3\n1 3\n1 3\n2 3\n1 5\n2 3\n2 7\n2 9\n", "4 8\n1 4\n1 3\n3 2\n4 3\n2 3\n1 3\n2 4\n4 2\n", "12 5\n1 6\n1 3\n7 3\n7 1\n2 1\n", "5 4\n1 2\n1 3\n3 4\n4 5\n", "6 3\n1 2\n2 4\n3 4\n", "10 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 2\n", "5 8\n3 2\n5 3\n1 4\n4 5\n4 1\n4 2\n3 5\n2 3\n", "100 1\n1 2\n0 2\n", "10 10\n1 3\n1 3\n1 3\n1 4\n1 3\n2 3\n1 5\n2 7\n2 7\n2 9\n", "6 7\n1 5\n2 5\n5 2\n5 2\n5 2\n4 2\n1 4\n", "7 5\n6 4\n1 5\n3 4\n3 4\n6 4\n", "4 4\n1 4\n1 3\n3 2\n4 2\n2 3\n1 3\n1 4\n4 1\n", "7 5\n6 5\n2 5\n6 4\n3 4\n6 4\n", "101 1\n1 2\n-1 2\n", "7 3\n5 4\n1 4\n6 4\n2 4\n6 4\n", "26 5\n6 1\n1 3\n2 1\n7 3\n7 1\n", "5 10\n1 2\n1 3\n1 4\n1 5\n2 4\n2 4\n2 5\n3 4\n3 5\n4 5\n", "7 5\n2 1\n5 1\n2 7\n1 6\n6 7\n", "4 2\n1 2\n2 3\n1 4\n2 3\n2 4\n", "5 9\n1 2\n1 3\n2 4\n1 5\n2 4\n2 5\n3 2\n3 5\n4 5\n", "6 3\n1 2\n2 4\n6 4\n", "10 10\n1 3\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 2\n", "5 8\n3 2\n5 1\n1 4\n4 5\n4 1\n4 2\n3 5\n2 3\n", "100 1\n1 2\n-1 2\n", "10 6\n1 3\n1 3\n1 3\n1 4\n1 3\n2 3\n1 5\n2 7\n2 7\n2 9\n", "4 1\n1 4\n1 3\n3 2\n4 2\n2 3\n1 3\n1 4\n4 1\n", "111 1\n1 2\n-1 2\n", "7 3\n5 2\n1 4\n6 4\n2 4\n6 4\n", "26 1\n6 1\n1 3\n2 1\n7 3\n7 1\n", "5 9\n1 2\n2 3\n2 4\n1 5\n2 4\n2 5\n3 2\n3 5\n4 5\n", "5 8\n3 2\n5 1\n1 4\n4 5\n4 1\n4 3\n3 5\n2 3\n", "101 1\n1 2\n-2 2\n", "110 1\n1 2\n-1 2\n", "7 1\n5 2\n1 4\n6 4\n2 4\n6 4\n", "26 1\n6 1\n1 3\n2 1\n7 2\n7 1\n", "101 1\n1 2\n-2 1\n", "7 1\n5 2\n1 4\n9 4\n2 4\n6 4\n", "26 1\n6 1\n1 3\n3 1\n7 2\n7 1\n", "7 1\n5 2\n1 4\n9 4\n2 4\n6 7\n", "26 1\n2 1\n1 3\n3 1\n7 2\n7 1\n", "7 1\n5 2\n1 4\n9 4\n2 0\n6 7\n", "26 1\n2 1\n1 2\n3 1\n7 2\n7 1\n", "7 1\n5 2\n1 5\n9 4\n2 0\n6 7\n", "29 1\n2 1\n1 2\n3 1\n7 2\n7 1\n", "7 1\n5 2\n2 5\n9 4\n2 0\n6 7\n", "29 1\n2 1\n2 2\n3 1\n7 2\n7 1\n", "29 1\n3 1\n2 2\n3 1\n7 2\n7 1\n", "29 1\n3 1\n2 2\n3 1\n8 2\n7 1\n", "29 1\n3 1\n2 4\n3 1\n8 2\n7 1\n", "6 9\n6 2\n4 2\n3 6\n4 6\n2 6\n1 4\n1 6\n4 5\n4 2\n", "7 5\n6 4\n1 4\n6 5\n2 4\n6 4\n", "5 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n4 5\n4 5\n", "7 5\n7 1\n5 1\n2 7\n1 3\n4 7\n", "4 5\n1 2\n1 3\n1 4\n2 3\n3 4\n"], "output": ["YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n"]}, "short_description": "1. One-sentence summary:  \nDetermine whether all given undirected edges can be covered by at most two vertices\u2014i.e. whether there exists a set of size \u22642 such that every edge is incident to at least one vertex in that set.\n\n2. Core algorithmic approach:  \nBrute-force on a constant small candidate set (the two endpoints of the first edge), combined with counting/degree accumulation to verify coverage in O(m) time overall.\n\n3. Reusable components:  \n- Unique-pair extraction via sorting each pair and storing in a set to eliminate duplicates.  \n- Degree-map accumulation for a subset of edges using a hash map (dict) to count incidences.  \n- Constant-size candidate testing loop (trying both endpoints of a reference edge as potential cover vertices)."}
{"name": "1243_D. 0-1 MST", "description": "Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.\n\nIt is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.\n\nSince Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?\n\nInput\n\nThe first line of the input contains two integers n and m (1 \u2264 n \u2264 10^5, 0 \u2264 m \u2264 min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. \n\nThe i-th of the next m lines contains two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n, a_i \u2260 b_i), the endpoints of the i-th edge of weight 1.\n\nIt is guaranteed that no edge appears twice in the input.\n\nOutput\n\nOutput a single integer, the weight of the minimum spanning tree of the graph.\n\nExamples\n\nInput\n\n\n6 11\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n3 0\n\n\nOutput\n\n\n0\n\nNote\n\nThe graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.\n\n<image>\n\nIn the second sample, all edges have weight 0 so any spanning tree has total weight 0.", "solution": "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\nn,m = map(int, input().split())\nG = [set() for i in range(n)]\nfor i in range(m):\n    a,b = map(int, input().split())\n    a,b = a-1,b-1\n    G[a].add(b)\n    G[b].add(a)\n\nans = 0\nunused = set(range(n))\nwhile unused:\n    cur = {unused.pop()}\n    while cur:\n        i = cur.pop()\n        nxt = {j for j in unused if j not in G[i]}\n        unused.difference_update(nxt)\n        cur.update(nxt)\n    ans += 1\nprint(ans-1)", "difficulty": 10, "public_tests": {"input": ["6 11\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n", "3 0\n"], "output": ["2", "0"]}, "private_tests": {"input": ["2 0\n", "4 2\n3 2\n1 4\n", "3 3\n1 2\n3 1\n2 3\n", "10 10\n1 5\n1 8\n1 9\n5 8\n8 9\n4 7\n2 3\n3 10\n2 6\n2 10\n", "100000 0\n", "3 1\n2 3\n", "2 1\n1 2\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n2 6\n3 5\n4 6\n5 6\n", "1 0\n", "15 10\n2 3\n5 4\n5 6\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n14 15\n", "5 10\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n2 4\n3 5\n4 1\n5 2\n", "7 5\n7 5\n1 5\n3 2\n2 6\n3 6\n"], "output": ["0", "0", "2", "0", "0", "0", "1", "0", "0", "0", "4", "0"]}, "generated_tests": {"input": ["10 10\n1 5\n1 8\n1 9\n5 8\n8 9\n4 7\n2 3\n5 10\n2 6\n2 10\n", "5 10\n1 2\n3 3\n3 4\n4 5\n5 1\n1 3\n2 4\n3 5\n4 1\n5 2\n", "4 1\n2 3\n", "15 10\n2 3\n5 8\n5 6\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n14 15\n", "7 5\n7 5\n1 5\n3 2\n3 6\n3 6\n", "4 1\n2 2\n", "15 10\n2 3\n5 8\n5 6\n5 7\n3 8\n3 10\n11 12\n6 13\n13 14\n14 15\n", "7 5\n7 5\n1 3\n3 2\n3 6\n3 6\n", "4 1\n2 1\n", "15 10\n2 3\n5 8\n5 5\n5 7\n3 8\n3 10\n11 12\n6 13\n13 14\n14 15\n", "8 1\n2 1\n", "13 1\n2 1\n", "4 0\n", "6 2\n3 2\n1 4\n", "10 10\n1 5\n1 1\n1 9\n5 8\n8 9\n4 7\n2 3\n3 10\n2 6\n2 10\n", "100001 0\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n2 6\n5 5\n4 6\n5 6\n", "15 10\n2 3\n5 4\n5 12\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n14 15\n", "7 5\n7 5\n1 5\n3 2\n2 6\n5 6\n", "15 10\n2 3\n5 8\n5 6\n5 7\n3 8\n5 10\n11 12\n12 13\n13 14\n14 15\n", "6 1\n2 2\n", "4 1\n1 1\n", "16 10\n2 3\n5 8\n5 5\n5 7\n3 8\n3 10\n11 12\n6 13\n13 14\n14 15\n", "8 1\n4 1\n", "13 1\n3 1\n", "6 2\n4 2\n1 4\n", "6 9\n1 2\n1 4\n1 5\n2 3\n2 5\n3 6\n5 5\n4 6\n5 6\n", "15 10\n2 3\n6 4\n5 12\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n14 15\n", "15 10\n2 3\n5 8\n5 6\n5 7\n3 8\n5 10\n11 12\n12 13\n13 14\n14 9\n", "16 10\n2 3\n5 7\n5 5\n5 7\n3 8\n3 10\n11 12\n6 13\n13 14\n14 15\n", "8 1\n8 1\n", "6 9\n1 2\n1 4\n1 5\n2 3\n1 5\n3 6\n5 5\n4 6\n5 6\n", "15 10\n2 3\n6 4\n5 12\n5 7\n3 8\n3 10\n11 12\n12 13\n13 14\n9 15\n", "15 10\n2 3\n5 6\n5 6\n5 7\n3 8\n5 10\n11 12\n12 13\n13 14\n14 9\n", "16 10\n2 3\n5 7\n5 5\n5 7\n5 8\n3 10\n11 12\n6 13\n13 14\n14 15\n", "15 10\n2 3\n6 4\n5 12\n5 7\n3 8\n3 10\n11 12\n12 13\n13 10\n9 15\n", "15 10\n2 3\n5 6\n5 10\n5 7\n3 8\n5 10\n11 12\n12 13\n13 14\n14 9\n", "16 10\n2 4\n5 7\n5 5\n5 7\n5 8\n3 10\n11 12\n6 13\n13 14\n14 15\n", "15 10\n2 3\n5 6\n5 10\n5 7\n3 8\n5 10\n8 12\n12 13\n13 14\n14 9\n", "16 10\n2 4\n5 7\n5 5\n5 7\n5 8\n3 10\n11 12\n10 13\n13 14\n14 15\n", "4 2\n3 2\n1 2\n", "6 1\n2 3\n", "7 5\n7 5\n1 5\n6 2\n2 6\n3 6\n", "10 10\n1 5\n1 8\n1 9\n5 8\n8 9\n4 7\n2 3\n5 10\n2 7\n2 10\n", "4 1\n1 3\n", "9 10\n1 2\n3 3\n3 4\n4 5\n5 1\n1 3\n2 4\n3 5\n4 1\n5 2\n", "13 5\n7 5\n1 5\n3 2\n3 6\n3 6\n", "15 10\n2 3\n5 8\n5 6\n5 7\n3 8\n4 10\n11 12\n6 13\n13 14\n14 15\n", "7 5\n7 5\n1 3\n3 2\n3 6\n5 6\n", "4 1\n4 1\n", "15 10\n2 3\n5 10\n5 5\n5 7\n3 8\n3 10\n11 12\n6 13\n13 14\n14 15\n", "13 1\n2 2\n", "5 0\n", "10 10\n1 5\n1 2\n1 9\n5 8\n8 9\n4 7\n2 3\n3 10\n2 6\n2 10\n", "15 10\n2 3\n5 8\n5 1\n5 7\n3 8\n5 10\n11 12\n12 13\n13 14\n14 15\n"], "output": ["0\n", "3\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:  \nDetermine the minimum number of links needed to connect all nodes by exploring connected components in the complement of a given undirected graph.\n\n2. Core algorithmic approach:  \nRepeated depth-first/breadth-first search on the complement graph, using set-based operations to efficiently find and traverse non-neighbors.\n\n3. Reusable components:  \n- Maintaining an adjacency representation with a list of Python sets for O(1) edge existence checks.  \n- Tracking unvisited vertices in a set and extracting \u201ccomplement neighbors\u201d via set difference.  \n- Iterative BFS/DFS expansion using a frontier set with `difference_update` to batch-remove visited nodes."}
{"name": "659_E. New Reform", "description": "Berland has n cities connected by m bidirectional roads. No road connects a city to itself, and each pair of cities is connected by no more than one road. It is not guaranteed that you can get from any city to any other one, using only the existing roads.\n\nThe President of Berland decided to make changes to the road system and instructed the Ministry of Transport to make this reform. Now, each road should be unidirectional (only lead from one city to another).\n\nIn order not to cause great resentment among residents, the reform needs to be conducted so that there can be as few separate cities as possible. A city is considered separate, if no road leads into it, while it is allowed to have roads leading from this city.\n\nHelp the Ministry of Transport to find the minimum possible number of separate cities after the reform.\n\nInput\n\nThe first line of the input contains two positive integers, n and m \u2014 the number of the cities and the number of roads in Berland (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000). \n\nNext m lines contain the descriptions of the roads: the i-th road is determined by two distinct integers xi, yi (1 \u2264 xi, yi \u2264 n, xi \u2260 yi), where xi and yi are the numbers of the cities connected by the i-th road.\n\nIt is guaranteed that there is no more than one road between each pair of cities, but it is not guaranteed that from any city you can get to any other one, using only roads.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of separated cities after the reform.\n\nExamples\n\nInput\n\n4 3\n2 1\n1 3\n4 3\n\n\nOutput\n\n1\n\n\nInput\n\n5 5\n2 1\n1 3\n2 3\n2 5\n4 3\n\n\nOutput\n\n0\n\n\nInput\n\n6 5\n1 2\n2 3\n4 5\n4 6\n5 6\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample the following road orientation is allowed: <image>, <image>, <image>.\n\nThe second sample: <image>, <image>, <image>, <image>, <image>.\n\nThe third sample: <image>, <image>, <image>, <image>, <image>.", "solution": "import sys\nfrom math import sqrt, gcd, ceil, log\n# from bisect import bisect, bisect_left\nfrom collections import defaultdict, Counter, deque\n# from heapq import heapify, heappush, heappop\ninput = sys.stdin.readline\nread = lambda: list(map(int, input().strip().split()))\n\nsys.setrecursionlimit(200000)\n\n\ndef main(): \n\tn, m = read()\n\tadj = defaultdict(list)\n\tvisited = defaultdict(int)\n\t# visited\n\tfor i in range(m):\n\t\tx, y = read()\n\t\tadj[x].append(y)\n\t\tadj[y].append(x)\n\n\tdef dfs(ver):\n\t\tparent = defaultdict(int)\n\t\tstk = [(ver,0)]\n\t\tvisited[ver] = 1\n\t\tparent[ver] = 0\n\t\twhile stk:\n\t\t\tnode, par = stk.pop()\n\t\t\tfor child in adj[node]:\n\t\t\t\tif child == par:continue\n\t\t\t\telif not visited[child]:\n\t\t\t\t\tvisited[child] = 1\n\t\t\t\t\tparent[child] = node\n\t\t\t\t\tstk.append((child, node))\n\t\t\t\telif parent[child] != node:\n\t\t\t\t\treturn(0)\n\t\treturn(1)\n\n\tans = 0\n\tfor i in range(1, n+1):\n\t\tif not visited[i]:\n\t\t\tans += dfs(i)\n\t\t\t# print(i, visited)\n\tprint(ans)\n\t\t# \n\n\n\n\n\t\t\t\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\tmain()", "difficulty": 11, "public_tests": {"input": ["5 5\n2 1\n1 3\n2 3\n2 5\n4 3\n", "4 3\n2 1\n1 3\n4 3\n", "6 5\n1 2\n2 3\n4 5\n4 6\n5 6\n"], "output": ["0", "1", "1"]}, "private_tests": {"input": ["10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "20 20\n16 3\n15 14\n6 14\n13 19\n7 13\n3 13\n3 2\n17 11\n14 20\n19 10\n4 13\n3 8\n18 4\n12 7\n6 3\n11 13\n17 19\n5 14\n9 2\n11 1\n", "2 1\n1 2\n", "5 5\n1 2\n2 3\n3 4\n4 5\n5 2\n", "4 4\n1 2\n2 3\n3 4\n4 1\n"], "output": ["0", "0", "1", "0", "0"]}, "generated_tests": {"input": ["10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "4 3\n2 1\n2 3\n4 3\n", "4 4\n1 2\n2 4\n3 4\n4 1\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n9 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n9 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "20 20\n16 3\n15 14\n6 14\n13 19\n7 13\n3 13\n3 2\n17 12\n14 20\n19 10\n4 13\n3 8\n18 4\n12 7\n6 3\n11 13\n17 19\n5 14\n9 2\n11 1\n", "5 5\n2 1\n1 5\n2 3\n2 5\n4 3\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 7\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 4\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 2\n9 4\n3 6\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n1 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n3 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n9 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n9 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 8\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n4 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 4\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n3 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n1 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n3 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n6 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n9 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n9 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 8\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 1\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n4 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 4\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 3\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n3 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n1 4\n10 8\n7 8\n4 6\n9 1\n5 5\n9 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n2 1\n3 7\n5 10\n6 1\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n3 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n6 8\n6 4\n10 2\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n9 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n9 8\n5 7\n2 1\n3 7\n7 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 8\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 1\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n4 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n6 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 4\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 3\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n8 8\n5 7\n2 1\n3 7\n3 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n1 4\n10 8\n7 8\n4 6\n9 1\n5 5\n9 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n2 1\n3 7\n5 10\n6 2\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n4 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n9 8\n6 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 4\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 3\n4 5\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n3 1\n3 7\n5 10\n6 2\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n3 1\n3 7\n5 10\n6 2\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n6 10\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n3 1\n3 7\n5 10\n6 2\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n3 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n6 10\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n3 1\n3 7\n5 10\n6 2\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n3 6\n5 8\n6 8\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n6 10\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n3 1\n3 7\n5 10\n6 2\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n3 6\n5 8\n6 8\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 4\n1 8\n10 2\n6 10\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n3 1\n3 7\n5 10\n6 2\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n3 6\n5 8\n6 8\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 5\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 4\n1 8\n10 2\n6 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 7\n", "4 3\n4 1\n1 3\n4 3\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n2 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n5 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 1\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 6\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n10 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 9\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n3 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n9 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n9 8\n5 7\n2 1\n4 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "20 20\n16 3\n15 1\n6 14\n13 19\n7 13\n3 13\n3 2\n17 12\n14 20\n19 10\n4 13\n3 8\n18 4\n12 7\n6 3\n11 13\n17 19\n5 14\n9 2\n11 1\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n4 1\n3 7\n5 10\n6 1\n9 4\n3 7\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 6\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 4\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 2\n9 4\n3 6\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 3\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 5\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n3 8\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n2 5\n7 2\n9 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n9 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 8\n9 3\n4 2\n2 6\n5 6\n5 9\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n3 6\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n6 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n9 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n9 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 8\n9 3\n4 2\n2 6\n5 6\n3 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 1\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n4 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 4\n10 3\n3 8\n4 10\n2 1\n10 7\n1 3\n1 8\n10 3\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n3 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 3\n1 4\n10 8\n7 8\n4 6\n9 1\n5 5\n9 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n2 1\n3 7\n5 10\n6 1\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n2 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n8 8\n9 7\n2 1\n3 7\n3 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n1 4\n10 8\n7 8\n4 6\n9 1\n5 5\n9 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n3 1\n3 7\n5 9\n6 2\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n3 1\n3 7\n5 10\n6 2\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n3 10\n1 1\n10 7\n1 3\n1 8\n10 2\n6 10\n", "10 45\n3 7\n2 3\n4 8\n2 5\n6 8\n7 7\n3 1\n3 7\n5 10\n6 2\n9 3\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n3 6\n5 8\n4 8\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n6 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n8 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 7\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n2 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n8 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n2 3\n4 8\n2 5\n5 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 3\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "10 45\n3 5\n1 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 1\n2 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 6\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n3 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 8\n3 1\n2 10\n8 7\n1 7\n7 9\n6 9\n9 3\n2 2\n2 6\n5 6\n5 8\n6 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n9 3\n3 8\n2 10\n1 1\n10 7\n1 3\n1 8\n10 2\n4 10\n", "10 45\n3 5\n2 3\n4 8\n2 5\n9 8\n5 7\n2 1\n4 7\n5 10\n6 2\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n", "20 20\n16 3\n15 1\n6 14\n13 19\n7 13\n3 13\n3 2\n17 12\n14 20\n19 10\n4 11\n3 8\n18 4\n12 7\n6 3\n11 13\n17 19\n5 14\n9 2\n11 1\n", "10 45\n3 5\n2 3\n4 8\n2 5\n6 7\n5 7\n4 1\n3 7\n5 10\n6 1\n9 4\n3 7\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 5\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n"], "output": ["0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "short_description": "1. One-sentence summary:  \n   The solution counts how many connected components in an undirected graph are acyclic (i.e., are trees).\n\n2. Core algorithmic approach:  \n   Iterative depth-first search (DFS) with parent tracking to detect cycles in each connected component and tally those without cycles.\n\n3. Reusable components:  \n   \u2022 Adjacency list built via `defaultdict(list)` for sparse graph representation.  \n   \u2022 Iterative DFS skeleton with an explicit stack and a parent map for cycle detection in undirected graphs.  \n   \u2022 Component-wise traversal pattern: loop over all vertices, launch DFS on unvisited nodes, and aggregate per-component results."}
